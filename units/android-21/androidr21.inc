  AManifest = class sealed external 'android' name 'Manifest' (JLObject)
  public
    type
      Innerpermission_group = class;
      Arr1Innerpermission_group = array of Innerpermission_group;
      Arr2Innerpermission_group = array of Arr1Innerpermission_group;
      Arr3Innerpermission_group = array of Arr2Innerpermission_group;
      Innerpermission = class;
      Arr1Innerpermission = array of Innerpermission;
      Arr2Innerpermission = array of Arr1Innerpermission;
      Arr3Innerpermission = array of Arr2Innerpermission;
      Innerpermission_group = class sealed external 'android' name 'permission_group' (JLObject)
      public
        const
          ACCESSIBILITY_FEATURES = 'android.permission-group.ACCESSIBILITY_FEATURES';
          ACCOUNTS = 'android.permission-group.ACCOUNTS';
          AFFECTS_BATTERY = 'android.permission-group.AFFECTS_BATTERY';
          APP_INFO = 'android.permission-group.APP_INFO';
          AUDIO_SETTINGS = 'android.permission-group.AUDIO_SETTINGS';
          BLUETOOTH_NETWORK = 'android.permission-group.BLUETOOTH_NETWORK';
          BOOKMARKS = 'android.permission-group.BOOKMARKS';
          CALENDAR = 'android.permission-group.CALENDAR';
          CAMERA = 'android.permission-group.CAMERA';
          COST_MONEY = 'android.permission-group.COST_MONEY';
          DEVELOPMENT_TOOLS = 'android.permission-group.DEVELOPMENT_TOOLS';
          DEVICE_ALARMS = 'android.permission-group.DEVICE_ALARMS';
          DISPLAY = 'android.permission-group.DISPLAY';
          HARDWARE_CONTROLS = 'android.permission-group.HARDWARE_CONTROLS';
          LOCATION = 'android.permission-group.LOCATION';
          MESSAGES = 'android.permission-group.MESSAGES';
          MICROPHONE = 'android.permission-group.MICROPHONE';
          NETWORK = 'android.permission-group.NETWORK';
          PERSONAL_INFO = 'android.permission-group.PERSONAL_INFO';
          PHONE_CALLS = 'android.permission-group.PHONE_CALLS';
          SCREENLOCK = 'android.permission-group.SCREENLOCK';
          SOCIAL_INFO = 'android.permission-group.SOCIAL_INFO';
          STATUS_BAR = 'android.permission-group.STATUS_BAR';
          STORAGE = 'android.permission-group.STORAGE';
          SYNC_SETTINGS = 'android.permission-group.SYNC_SETTINGS';
          SYSTEM_CLOCK = 'android.permission-group.SYSTEM_CLOCK';
          SYSTEM_TOOLS = 'android.permission-group.SYSTEM_TOOLS';
          USER_DICTIONARY = 'android.permission-group.USER_DICTIONARY';
          VOICEMAIL = 'android.permission-group.VOICEMAIL';
          WALLPAPER = 'android.permission-group.WALLPAPER';
          WRITE_USER_DICTIONARY = 'android.permission-group.WRITE_USER_DICTIONARY';
      public
        constructor create(); overload;
      end;

      Innerpermission = class sealed external 'android' name 'permission' (JLObject)
      public
        const
          ACCESS_CHECKIN_PROPERTIES = 'android.permission.ACCESS_CHECKIN_PROPERTIES';
          ACCESS_COARSE_LOCATION = 'android.permission.ACCESS_COARSE_LOCATION';
          ACCESS_FINE_LOCATION = 'android.permission.ACCESS_FINE_LOCATION';
          ACCESS_LOCATION_EXTRA_COMMANDS = 'android.permission.ACCESS_LOCATION_EXTRA_COMMANDS';
          ACCESS_MOCK_LOCATION = 'android.permission.ACCESS_MOCK_LOCATION';
          ACCESS_NETWORK_STATE = 'android.permission.ACCESS_NETWORK_STATE';
          ACCESS_SURFACE_FLINGER = 'android.permission.ACCESS_SURFACE_FLINGER';
          ACCESS_WIFI_STATE = 'android.permission.ACCESS_WIFI_STATE';
          ACCOUNT_MANAGER = 'android.permission.ACCOUNT_MANAGER';
          ADD_VOICEMAIL = 'com.android.voicemail.permission.ADD_VOICEMAIL';
          AUTHENTICATE_ACCOUNTS = 'android.permission.AUTHENTICATE_ACCOUNTS';
          BATTERY_STATS = 'android.permission.BATTERY_STATS';
          BIND_ACCESSIBILITY_SERVICE = 'android.permission.BIND_ACCESSIBILITY_SERVICE';
          BIND_APPWIDGET = 'android.permission.BIND_APPWIDGET';
          BIND_DEVICE_ADMIN = 'android.permission.BIND_DEVICE_ADMIN';
          BIND_DREAM_SERVICE = 'android.permission.BIND_DREAM_SERVICE';
          BIND_INPUT_METHOD = 'android.permission.BIND_INPUT_METHOD';
          BIND_NFC_SERVICE = 'android.permission.BIND_NFC_SERVICE';
          BIND_NOTIFICATION_LISTENER_SERVICE = 'android.permission.BIND_NOTIFICATION_LISTENER_SERVICE';
          BIND_PRINT_SERVICE = 'android.permission.BIND_PRINT_SERVICE';
          BIND_REMOTEVIEWS = 'android.permission.BIND_REMOTEVIEWS';
          BIND_TEXT_SERVICE = 'android.permission.BIND_TEXT_SERVICE';
          BIND_TV_INPUT = 'android.permission.BIND_TV_INPUT';
          BIND_VOICE_INTERACTION = 'android.permission.BIND_VOICE_INTERACTION';
          BIND_VPN_SERVICE = 'android.permission.BIND_VPN_SERVICE';
          BIND_WALLPAPER = 'android.permission.BIND_WALLPAPER';
          BLUETOOTH = 'android.permission.BLUETOOTH';
          BLUETOOTH_ADMIN = 'android.permission.BLUETOOTH_ADMIN';
          BLUETOOTH_PRIVILEGED = 'android.permission.BLUETOOTH_PRIVILEGED';
          BODY_SENSORS = 'android.permission.BODY_SENSORS';
          BRICK = 'android.permission.BRICK';
          BROADCAST_PACKAGE_REMOVED = 'android.permission.BROADCAST_PACKAGE_REMOVED';
          BROADCAST_SMS = 'android.permission.BROADCAST_SMS';
          BROADCAST_STICKY = 'android.permission.BROADCAST_STICKY';
          BROADCAST_WAP_PUSH = 'android.permission.BROADCAST_WAP_PUSH';
          CALL_PHONE = 'android.permission.CALL_PHONE';
          CALL_PRIVILEGED = 'android.permission.CALL_PRIVILEGED';
          CAMERA = 'android.permission.CAMERA';
          CAPTURE_AUDIO_OUTPUT = 'android.permission.CAPTURE_AUDIO_OUTPUT';
          CAPTURE_SECURE_VIDEO_OUTPUT = 'android.permission.CAPTURE_SECURE_VIDEO_OUTPUT';
          CAPTURE_VIDEO_OUTPUT = 'android.permission.CAPTURE_VIDEO_OUTPUT';
          CHANGE_COMPONENT_ENABLED_STATE = 'android.permission.CHANGE_COMPONENT_ENABLED_STATE';
          CHANGE_CONFIGURATION = 'android.permission.CHANGE_CONFIGURATION';
          CHANGE_NETWORK_STATE = 'android.permission.CHANGE_NETWORK_STATE';
          CHANGE_WIFI_MULTICAST_STATE = 'android.permission.CHANGE_WIFI_MULTICAST_STATE';
          CHANGE_WIFI_STATE = 'android.permission.CHANGE_WIFI_STATE';
          CLEAR_APP_CACHE = 'android.permission.CLEAR_APP_CACHE';
          CLEAR_APP_USER_DATA = 'android.permission.CLEAR_APP_USER_DATA';
          CONTROL_LOCATION_UPDATES = 'android.permission.CONTROL_LOCATION_UPDATES';
          DELETE_CACHE_FILES = 'android.permission.DELETE_CACHE_FILES';
          DELETE_PACKAGES = 'android.permission.DELETE_PACKAGES';
          DEVICE_POWER = 'android.permission.DEVICE_POWER';
          DIAGNOSTIC = 'android.permission.DIAGNOSTIC';
          DISABLE_KEYGUARD = 'android.permission.DISABLE_KEYGUARD';
          DUMP = 'android.permission.DUMP';
          EXPAND_STATUS_BAR = 'android.permission.EXPAND_STATUS_BAR';
          FACTORY_TEST = 'android.permission.FACTORY_TEST';
          FLASHLIGHT = 'android.permission.FLASHLIGHT';
          FORCE_BACK = 'android.permission.FORCE_BACK';
          GET_ACCOUNTS = 'android.permission.GET_ACCOUNTS';
          GET_PACKAGE_SIZE = 'android.permission.GET_PACKAGE_SIZE';
          GET_TASKS = 'android.permission.GET_TASKS' deprecated;
          GET_TOP_ACTIVITY_INFO = 'android.permission.GET_TOP_ACTIVITY_INFO';
          GLOBAL_SEARCH = 'android.permission.GLOBAL_SEARCH';
          HARDWARE_TEST = 'android.permission.HARDWARE_TEST';
          INJECT_EVENTS = 'android.permission.INJECT_EVENTS';
          INSTALL_LOCATION_PROVIDER = 'android.permission.INSTALL_LOCATION_PROVIDER';
          INSTALL_PACKAGES = 'android.permission.INSTALL_PACKAGES';
          INSTALL_SHORTCUT = 'com.android.launcher.permission.INSTALL_SHORTCUT';
          INTERNAL_SYSTEM_WINDOW = 'android.permission.INTERNAL_SYSTEM_WINDOW';
          INTERNET = 'android.permission.INTERNET';
          KILL_BACKGROUND_PROCESSES = 'android.permission.KILL_BACKGROUND_PROCESSES';
          LOCATION_HARDWARE = 'android.permission.LOCATION_HARDWARE';
          MANAGE_ACCOUNTS = 'android.permission.MANAGE_ACCOUNTS';
          MANAGE_APP_TOKENS = 'android.permission.MANAGE_APP_TOKENS';
          MANAGE_DOCUMENTS = 'android.permission.MANAGE_DOCUMENTS';
          MASTER_CLEAR = 'android.permission.MASTER_CLEAR';
          MEDIA_CONTENT_CONTROL = 'android.permission.MEDIA_CONTENT_CONTROL';
          MODIFY_AUDIO_SETTINGS = 'android.permission.MODIFY_AUDIO_SETTINGS';
          MODIFY_PHONE_STATE = 'android.permission.MODIFY_PHONE_STATE';
          MOUNT_FORMAT_FILESYSTEMS = 'android.permission.MOUNT_FORMAT_FILESYSTEMS';
          MOUNT_UNMOUNT_FILESYSTEMS = 'android.permission.MOUNT_UNMOUNT_FILESYSTEMS';
          NFC = 'android.permission.NFC';
          PERSISTENT_ACTIVITY = 'android.permission.PERSISTENT_ACTIVITY' deprecated;
          PROCESS_OUTGOING_CALLS = 'android.permission.PROCESS_OUTGOING_CALLS';
          READ_CALENDAR = 'android.permission.READ_CALENDAR';
          READ_CALL_LOG = 'android.permission.READ_CALL_LOG';
          READ_CONTACTS = 'android.permission.READ_CONTACTS';
          READ_EXTERNAL_STORAGE = 'android.permission.READ_EXTERNAL_STORAGE';
          READ_FRAME_BUFFER = 'android.permission.READ_FRAME_BUFFER';
          READ_HISTORY_BOOKMARKS = 'com.android.browser.permission.READ_HISTORY_BOOKMARKS';
          READ_INPUT_STATE = 'android.permission.READ_INPUT_STATE' deprecated;
          READ_LOGS = 'android.permission.READ_LOGS';
          READ_PHONE_STATE = 'android.permission.READ_PHONE_STATE';
          READ_PROFILE = 'android.permission.READ_PROFILE';
          READ_SMS = 'android.permission.READ_SMS';
          READ_SOCIAL_STREAM = 'android.permission.READ_SOCIAL_STREAM' deprecated;
          READ_SYNC_SETTINGS = 'android.permission.READ_SYNC_SETTINGS';
          READ_SYNC_STATS = 'android.permission.READ_SYNC_STATS';
          READ_USER_DICTIONARY = 'android.permission.READ_USER_DICTIONARY';
          READ_VOICEMAIL = 'com.android.voicemail.permission.READ_VOICEMAIL';
          REBOOT = 'android.permission.REBOOT';
          RECEIVE_BOOT_COMPLETED = 'android.permission.RECEIVE_BOOT_COMPLETED';
          RECEIVE_MMS = 'android.permission.RECEIVE_MMS';
          RECEIVE_SMS = 'android.permission.RECEIVE_SMS';
          RECEIVE_WAP_PUSH = 'android.permission.RECEIVE_WAP_PUSH';
          RECORD_AUDIO = 'android.permission.RECORD_AUDIO';
          REORDER_TASKS = 'android.permission.REORDER_TASKS';
          RESTART_PACKAGES = 'android.permission.RESTART_PACKAGES' deprecated;
          SEND_RESPOND_VIA_MESSAGE = 'android.permission.SEND_RESPOND_VIA_MESSAGE';
          SEND_SMS = 'android.permission.SEND_SMS';
          SET_ACTIVITY_WATCHER = 'android.permission.SET_ACTIVITY_WATCHER';
          SET_ALARM = 'com.android.alarm.permission.SET_ALARM';
          SET_ALWAYS_FINISH = 'android.permission.SET_ALWAYS_FINISH';
          SET_ANIMATION_SCALE = 'android.permission.SET_ANIMATION_SCALE';
          SET_DEBUG_APP = 'android.permission.SET_DEBUG_APP';
          SET_ORIENTATION = 'android.permission.SET_ORIENTATION';
          SET_POINTER_SPEED = 'android.permission.SET_POINTER_SPEED';
          SET_PREFERRED_APPLICATIONS = 'android.permission.SET_PREFERRED_APPLICATIONS' deprecated;
          SET_PROCESS_LIMIT = 'android.permission.SET_PROCESS_LIMIT';
          SET_TIME = 'android.permission.SET_TIME';
          SET_TIME_ZONE = 'android.permission.SET_TIME_ZONE';
          SET_WALLPAPER = 'android.permission.SET_WALLPAPER';
          SET_WALLPAPER_HINTS = 'android.permission.SET_WALLPAPER_HINTS';
          SIGNAL_PERSISTENT_PROCESSES = 'android.permission.SIGNAL_PERSISTENT_PROCESSES';
          STATUS_BAR = 'android.permission.STATUS_BAR';
          SUBSCRIBED_FEEDS_READ = 'android.permission.SUBSCRIBED_FEEDS_READ';
          SUBSCRIBED_FEEDS_WRITE = 'android.permission.SUBSCRIBED_FEEDS_WRITE';
          SYSTEM_ALERT_WINDOW = 'android.permission.SYSTEM_ALERT_WINDOW';
          TRANSMIT_IR = 'android.permission.TRANSMIT_IR';
          UNINSTALL_SHORTCUT = 'com.android.launcher.permission.UNINSTALL_SHORTCUT';
          UPDATE_DEVICE_STATS = 'android.permission.UPDATE_DEVICE_STATS';
          USE_CREDENTIALS = 'android.permission.USE_CREDENTIALS';
          USE_SIP = 'android.permission.USE_SIP';
          VIBRATE = 'android.permission.VIBRATE';
          WAKE_LOCK = 'android.permission.WAKE_LOCK';
          WRITE_APN_SETTINGS = 'android.permission.WRITE_APN_SETTINGS';
          WRITE_CALENDAR = 'android.permission.WRITE_CALENDAR';
          WRITE_CALL_LOG = 'android.permission.WRITE_CALL_LOG';
          WRITE_CONTACTS = 'android.permission.WRITE_CONTACTS';
          WRITE_EXTERNAL_STORAGE = 'android.permission.WRITE_EXTERNAL_STORAGE';
          WRITE_GSERVICES = 'android.permission.WRITE_GSERVICES';
          WRITE_HISTORY_BOOKMARKS = 'com.android.browser.permission.WRITE_HISTORY_BOOKMARKS';
          WRITE_PROFILE = 'android.permission.WRITE_PROFILE';
          WRITE_SECURE_SETTINGS = 'android.permission.WRITE_SECURE_SETTINGS';
          WRITE_SETTINGS = 'android.permission.WRITE_SETTINGS';
          WRITE_SMS = 'android.permission.WRITE_SMS';
          WRITE_SOCIAL_STREAM = 'android.permission.WRITE_SOCIAL_STREAM' deprecated;
          WRITE_SYNC_SETTINGS = 'android.permission.WRITE_SYNC_SETTINGS';
          WRITE_USER_DICTIONARY = 'android.permission.WRITE_USER_DICTIONARY';
          WRITE_VOICEMAIL = 'com.android.voicemail.permission.WRITE_VOICEMAIL';
      public
        constructor create(); overload;
      end;

  public
    constructor create(); overload;
  end;

  AR = class sealed external 'android' name 'R' (JLObject)
  public
    type
      Innerxml = class;
      Arr1Innerxml = array of Innerxml;
      Arr2Innerxml = array of Arr1Innerxml;
      Arr3Innerxml = array of Arr2Innerxml;
      Innertransition = class;
      Arr1Innertransition = array of Innertransition;
      Arr2Innertransition = array of Arr1Innertransition;
      Arr3Innertransition = array of Arr2Innertransition;
      Innerstyle = class;
      Arr1Innerstyle = array of Innerstyle;
      Arr2Innerstyle = array of Arr1Innerstyle;
      Arr3Innerstyle = array of Arr2Innerstyle;
      Innerstring = class;
      Arr1Innerstring = array of Innerstring;
      Arr2Innerstring = array of Arr1Innerstring;
      Arr3Innerstring = array of Arr2Innerstring;
      Innerraw = class;
      Arr1Innerraw = array of Innerraw;
      Arr2Innerraw = array of Arr1Innerraw;
      Arr3Innerraw = array of Arr2Innerraw;
      Innerplurals = class;
      Arr1Innerplurals = array of Innerplurals;
      Arr2Innerplurals = array of Arr1Innerplurals;
      Arr3Innerplurals = array of Arr2Innerplurals;
      Innermipmap = class;
      Arr1Innermipmap = array of Innermipmap;
      Arr2Innermipmap = array of Arr1Innermipmap;
      Arr3Innermipmap = array of Arr2Innermipmap;
      Innermenu = class;
      Arr1Innermenu = array of Innermenu;
      Arr2Innermenu = array of Arr1Innermenu;
      Arr3Innermenu = array of Arr2Innermenu;
      Innerlayout = class;
      Arr1Innerlayout = array of Innerlayout;
      Arr2Innerlayout = array of Arr1Innerlayout;
      Arr3Innerlayout = array of Arr2Innerlayout;
      Innerinterpolator = class;
      Arr1Innerinterpolator = array of Innerinterpolator;
      Arr2Innerinterpolator = array of Arr1Innerinterpolator;
      Arr3Innerinterpolator = array of Arr2Innerinterpolator;
      Innerinteger = class;
      Arr1Innerinteger = array of Innerinteger;
      Arr2Innerinteger = array of Arr1Innerinteger;
      Arr3Innerinteger = array of Arr2Innerinteger;
      Innerid = class;
      Arr1Innerid = array of Innerid;
      Arr2Innerid = array of Arr1Innerid;
      Arr3Innerid = array of Arr2Innerid;
      Innerfraction = class;
      Arr1Innerfraction = array of Innerfraction;
      Arr2Innerfraction = array of Arr1Innerfraction;
      Arr3Innerfraction = array of Arr2Innerfraction;
      Innerdrawable = class;
      Arr1Innerdrawable = array of Innerdrawable;
      Arr2Innerdrawable = array of Arr1Innerdrawable;
      Arr3Innerdrawable = array of Arr2Innerdrawable;
      Innerdimen = class;
      Arr1Innerdimen = array of Innerdimen;
      Arr2Innerdimen = array of Arr1Innerdimen;
      Arr3Innerdimen = array of Arr2Innerdimen;
      Innercolor = class;
      Arr1Innercolor = array of Innercolor;
      Arr2Innercolor = array of Arr1Innercolor;
      Arr3Innercolor = array of Arr2Innercolor;
      Innerbool = class;
      Arr1Innerbool = array of Innerbool;
      Arr2Innerbool = array of Arr1Innerbool;
      Arr3Innerbool = array of Arr2Innerbool;
      Innerattr = class;
      Arr1Innerattr = array of Innerattr;
      Arr2Innerattr = array of Arr1Innerattr;
      Arr3Innerattr = array of Arr2Innerattr;
      Innerarray = class;
      Arr1Innerarray = array of Innerarray;
      Arr2Innerarray = array of Arr1Innerarray;
      Arr3Innerarray = array of Arr2Innerarray;
      Inneranimator = class;
      Arr1Inneranimator = array of Inneranimator;
      Arr2Inneranimator = array of Arr1Inneranimator;
      Arr3Inneranimator = array of Arr2Inneranimator;
      Inneranim = class;
      Arr1Inneranim = array of Inneranim;
      Arr2Inneranim = array of Arr1Inneranim;
      Arr3Inneranim = array of Arr2Inneranim;
      Innerxml = class sealed external 'android' name 'xml' (JLObject)
      public
        constructor create(); overload;
      end;

      Innertransition = class sealed external 'android' name 'transition' (JLObject)
      public
        const
          explode = 17760259;
          fade = 17760258;
          move = 17760257;
          no_transition = 17760256;
          slide_bottom = 17760260;
          slide_left = 17760263;
          slide_right = 17760262;
          slide_top = 17760261;
      public
        constructor create(); overload;
      end;

      Innerstyle = class sealed external 'android' name 'style' (JLObject)
      public
        const
          Animation = 16973824;
          Animation_Activity = 16973825;
          Animation_Dialog = 16973826;
          Animation_InputMethod = 16973910;
          Animation_Toast = 16973828;
          Animation_Translucent = 16973827;
          DeviceDefault_ButtonBar = 16974287;
          DeviceDefault_ButtonBar_AlertDialog = 16974288;
          DeviceDefault_Light_ButtonBar = 16974290;
          DeviceDefault_Light_ButtonBar_AlertDialog = 16974291;
          DeviceDefault_Light_SegmentedButton = 16974292;
          DeviceDefault_SegmentedButton = 16974289;
          Holo_ButtonBar = 16974053;
          Holo_ButtonBar_AlertDialog = 16974055;
          Holo_Light_ButtonBar = 16974054;
          Holo_Light_ButtonBar_AlertDialog = 16974056;
          Holo_Light_SegmentedButton = 16974058;
          Holo_SegmentedButton = 16974057;
          MediaButton = 16973879;
          MediaButton_Ffwd = 16973883;
          MediaButton_Next = 16973881;
          MediaButton_Pause = 16973885;
          MediaButton_Play = 16973882;
          MediaButton_Previous = 16973880;
          MediaButton_Rew = 16973884;
          TextAppearance = 16973886;
          TextAppearance_DeviceDefault = 16974253;
          TextAppearance_DeviceDefault_DialogWindowTitle = 16974264;
          TextAppearance_DeviceDefault_Inverse = 16974254;
          TextAppearance_DeviceDefault_Large = 16974255;
          TextAppearance_DeviceDefault_Large_Inverse = 16974256;
          TextAppearance_DeviceDefault_Medium = 16974257;
          TextAppearance_DeviceDefault_Medium_Inverse = 16974258;
          TextAppearance_DeviceDefault_SearchResult_Subtitle = 16974262;
          TextAppearance_DeviceDefault_SearchResult_Title = 16974261;
          TextAppearance_DeviceDefault_Small = 16974259;
          TextAppearance_DeviceDefault_Small_Inverse = 16974260;
          TextAppearance_DeviceDefault_Widget = 16974265;
          TextAppearance_DeviceDefault_Widget_ActionBar_Menu = 16974286;
          TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle = 16974279;
          TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse = 16974283 deprecated;
          TextAppearance_DeviceDefault_Widget_ActionBar_Title = 16974278;
          TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse = 16974282 deprecated;
          TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle = 16974281;
          TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse = 16974285 deprecated;
          TextAppearance_DeviceDefault_Widget_ActionMode_Title = 16974280;
          TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse = 16974284 deprecated;
          TextAppearance_DeviceDefault_Widget_Button = 16974266;
          TextAppearance_DeviceDefault_Widget_DropDownHint = 16974271;
          TextAppearance_DeviceDefault_Widget_DropDownItem = 16974272;
          TextAppearance_DeviceDefault_Widget_EditText = 16974274;
          TextAppearance_DeviceDefault_Widget_IconMenu_Item = 16974267;
          TextAppearance_DeviceDefault_Widget_PopupMenu = 16974275;
          TextAppearance_DeviceDefault_Widget_PopupMenu_Large = 16974276;
          TextAppearance_DeviceDefault_Widget_PopupMenu_Small = 16974277;
          TextAppearance_DeviceDefault_Widget_TabWidget = 16974268;
          TextAppearance_DeviceDefault_Widget_TextView = 16974269;
          TextAppearance_DeviceDefault_Widget_TextView_PopupMenu = 16974270;
          TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem = 16974273;
          TextAppearance_DeviceDefault_WindowTitle = 16974263;
          TextAppearance_DialogWindowTitle = 16973889;
          TextAppearance_Holo = 16974075;
          TextAppearance_Holo_DialogWindowTitle = 16974103;
          TextAppearance_Holo_Inverse = 16974076;
          TextAppearance_Holo_Large = 16974077;
          TextAppearance_Holo_Large_Inverse = 16974078;
          TextAppearance_Holo_Medium = 16974079;
          TextAppearance_Holo_Medium_Inverse = 16974080;
          TextAppearance_Holo_SearchResult_Subtitle = 16974084;
          TextAppearance_Holo_SearchResult_Title = 16974083;
          TextAppearance_Holo_Small = 16974081;
          TextAppearance_Holo_Small_Inverse = 16974082;
          TextAppearance_Holo_Widget = 16974085;
          TextAppearance_Holo_Widget_ActionBar_Menu = 16974112;
          TextAppearance_Holo_Widget_ActionBar_Subtitle = 16974099;
          TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse = 16974109;
          TextAppearance_Holo_Widget_ActionBar_Title = 16974098;
          TextAppearance_Holo_Widget_ActionBar_Title_Inverse = 16974108;
          TextAppearance_Holo_Widget_ActionMode_Subtitle = 16974101;
          TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse = 16974111;
          TextAppearance_Holo_Widget_ActionMode_Title = 16974100;
          TextAppearance_Holo_Widget_ActionMode_Title_Inverse = 16974110;
          TextAppearance_Holo_Widget_Button = 16974086;
          TextAppearance_Holo_Widget_DropDownHint = 16974091;
          TextAppearance_Holo_Widget_DropDownItem = 16974092;
          TextAppearance_Holo_Widget_EditText = 16974094;
          TextAppearance_Holo_Widget_IconMenu_Item = 16974087;
          TextAppearance_Holo_Widget_PopupMenu = 16974095;
          TextAppearance_Holo_Widget_PopupMenu_Large = 16974096;
          TextAppearance_Holo_Widget_PopupMenu_Small = 16974097;
          TextAppearance_Holo_Widget_TabWidget = 16974088;
          TextAppearance_Holo_Widget_TextView = 16974089;
          TextAppearance_Holo_Widget_TextView_PopupMenu = 16974090;
          TextAppearance_Holo_Widget_TextView_SpinnerItem = 16974093;
          TextAppearance_Holo_WindowTitle = 16974102;
          TextAppearance_Inverse = 16973887;
          TextAppearance_Large = 16973890;
          TextAppearance_Large_Inverse = 16973891;
          TextAppearance_Material = 16974317;
          TextAppearance_Material_Body1 = 16974320;
          TextAppearance_Material_Body2 = 16974319;
          TextAppearance_Material_Button = 16974318;
          TextAppearance_Material_Caption = 16974321;
          TextAppearance_Material_DialogWindowTitle = 16974322;
          TextAppearance_Material_Display1 = 16974326;
          TextAppearance_Material_Display2 = 16974325;
          TextAppearance_Material_Display3 = 16974324;
          TextAppearance_Material_Display4 = 16974323;
          TextAppearance_Material_Headline = 16974327;
          TextAppearance_Material_Inverse = 16974328;
          TextAppearance_Material_Large = 16974329;
          TextAppearance_Material_Large_Inverse = 16974330;
          TextAppearance_Material_Medium = 16974331;
          TextAppearance_Material_Medium_Inverse = 16974332;
          TextAppearance_Material_Menu = 16974333;
          TextAppearance_Material_Notification = 16974334;
          TextAppearance_Material_Notification_Emphasis = 16974335;
          TextAppearance_Material_Notification_Info = 16974336;
          TextAppearance_Material_Notification_Line2 = 16974337;
          TextAppearance_Material_Notification_Time = 16974338;
          TextAppearance_Material_Notification_Title = 16974339;
          TextAppearance_Material_SearchResult_Subtitle = 16974340;
          TextAppearance_Material_SearchResult_Title = 16974341;
          TextAppearance_Material_Small = 16974342;
          TextAppearance_Material_Small_Inverse = 16974343;
          TextAppearance_Material_Subhead = 16974344;
          TextAppearance_Material_Title = 16974345;
          TextAppearance_Material_Widget = 16974347;
          TextAppearance_Material_Widget_ActionBar_Menu = 16974348;
          TextAppearance_Material_Widget_ActionBar_Subtitle = 16974349;
          TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse = 16974350;
          TextAppearance_Material_Widget_ActionBar_Title = 16974351;
          TextAppearance_Material_Widget_ActionBar_Title_Inverse = 16974352;
          TextAppearance_Material_Widget_ActionMode_Subtitle = 16974353;
          TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse = 16974354;
          TextAppearance_Material_Widget_ActionMode_Title = 16974355;
          TextAppearance_Material_Widget_ActionMode_Title_Inverse = 16974356;
          TextAppearance_Material_Widget_Button = 16974357;
          TextAppearance_Material_Widget_DropDownHint = 16974358;
          TextAppearance_Material_Widget_DropDownItem = 16974359;
          TextAppearance_Material_Widget_EditText = 16974360;
          TextAppearance_Material_Widget_IconMenu_Item = 16974361;
          TextAppearance_Material_Widget_PopupMenu = 16974362;
          TextAppearance_Material_Widget_PopupMenu_Large = 16974363;
          TextAppearance_Material_Widget_PopupMenu_Small = 16974364;
          TextAppearance_Material_Widget_TabWidget = 16974365;
          TextAppearance_Material_Widget_TextView = 16974366;
          TextAppearance_Material_Widget_TextView_PopupMenu = 16974367;
          TextAppearance_Material_Widget_TextView_SpinnerItem = 16974368;
          TextAppearance_Material_Widget_Toolbar_Subtitle = 16974369;
          TextAppearance_Material_Widget_Toolbar_Title = 16974370;
          TextAppearance_Material_WindowTitle = 16974346;
          TextAppearance_Medium = 16973892;
          TextAppearance_Medium_Inverse = 16973893;
          TextAppearance_Small = 16973894;
          TextAppearance_Small_Inverse = 16973895;
          TextAppearance_StatusBar_EventContent = 16973927;
          TextAppearance_StatusBar_EventContent_Title = 16973928;
          TextAppearance_StatusBar_Icon = 16973926;
          TextAppearance_StatusBar_Title = 16973925;
          TextAppearance_SuggestionHighlight = 16974104;
          TextAppearance_Theme = 16973888;
          TextAppearance_Theme_Dialog = 16973896;
          TextAppearance_Widget = 16973897;
          TextAppearance_Widget_Button = 16973898;
          TextAppearance_Widget_DropDownHint = 16973904;
          TextAppearance_Widget_DropDownItem = 16973905;
          TextAppearance_Widget_EditText = 16973900;
          TextAppearance_Widget_IconMenu_Item = 16973899;
          TextAppearance_Widget_PopupMenu_Large = 16973952;
          TextAppearance_Widget_PopupMenu_Small = 16973953;
          TextAppearance_Widget_TabWidget = 16973901;
          TextAppearance_Widget_TextView = 16973902;
          TextAppearance_Widget_TextView_PopupMenu = 16973903;
          TextAppearance_Widget_TextView_SpinnerItem = 16973906;
          TextAppearance_WindowTitle = 16973907;
          Theme = 16973829;
          ThemeOverlay = 16974407;
          ThemeOverlay_Material = 16974408;
          ThemeOverlay_Material_ActionBar = 16974409;
          ThemeOverlay_Material_Dark = 16974411;
          ThemeOverlay_Material_Dark_ActionBar = 16974412;
          ThemeOverlay_Material_Light = 16974410;
          Theme_Black = 16973832;
          Theme_Black_NoTitleBar = 16973833;
          Theme_Black_NoTitleBar_Fullscreen = 16973834;
          Theme_DeviceDefault = 16974120;
          Theme_DeviceDefault_Dialog = 16974126;
          Theme_DeviceDefault_DialogWhenLarge = 16974134;
          Theme_DeviceDefault_DialogWhenLarge_NoActionBar = 16974135;
          Theme_DeviceDefault_Dialog_MinWidth = 16974127;
          Theme_DeviceDefault_Dialog_NoActionBar = 16974128;
          Theme_DeviceDefault_Dialog_NoActionBar_MinWidth = 16974129;
          Theme_DeviceDefault_InputMethod = 16974142;
          Theme_DeviceDefault_Light = 16974123;
          Theme_DeviceDefault_Light_DarkActionBar = 16974143;
          Theme_DeviceDefault_Light_Dialog = 16974130;
          Theme_DeviceDefault_Light_DialogWhenLarge = 16974136;
          Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar = 16974137;
          Theme_DeviceDefault_Light_Dialog_MinWidth = 16974131;
          Theme_DeviceDefault_Light_Dialog_NoActionBar = 16974132;
          Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth = 16974133;
          Theme_DeviceDefault_Light_NoActionBar = 16974124;
          Theme_DeviceDefault_Light_NoActionBar_Fullscreen = 16974125;
          Theme_DeviceDefault_Light_NoActionBar_Overscan = 16974304;
          Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor = 16974308;
          Theme_DeviceDefault_Light_Panel = 16974139;
          Theme_DeviceDefault_NoActionBar = 16974121;
          Theme_DeviceDefault_NoActionBar_Fullscreen = 16974122;
          Theme_DeviceDefault_NoActionBar_Overscan = 16974303;
          Theme_DeviceDefault_NoActionBar_TranslucentDecor = 16974307;
          Theme_DeviceDefault_Panel = 16974138;
          Theme_DeviceDefault_Settings = 16974371;
          Theme_DeviceDefault_Wallpaper = 16974140;
          Theme_DeviceDefault_Wallpaper_NoTitleBar = 16974141;
          Theme_Dialog = 16973835;
          Theme_Holo = 16973931;
          Theme_Holo_Dialog = 16973935;
          Theme_Holo_DialogWhenLarge = 16973943;
          Theme_Holo_DialogWhenLarge_NoActionBar = 16973944;
          Theme_Holo_Dialog_MinWidth = 16973936;
          Theme_Holo_Dialog_NoActionBar = 16973937;
          Theme_Holo_Dialog_NoActionBar_MinWidth = 16973938;
          Theme_Holo_InputMethod = 16973951;
          Theme_Holo_Light = 16973934;
          Theme_Holo_Light_DarkActionBar = 16974105;
          Theme_Holo_Light_Dialog = 16973939;
          Theme_Holo_Light_DialogWhenLarge = 16973945;
          Theme_Holo_Light_DialogWhenLarge_NoActionBar = 16973946;
          Theme_Holo_Light_Dialog_MinWidth = 16973940;
          Theme_Holo_Light_Dialog_NoActionBar = 16973941;
          Theme_Holo_Light_Dialog_NoActionBar_MinWidth = 16973942;
          Theme_Holo_Light_NoActionBar = 16974064;
          Theme_Holo_Light_NoActionBar_Fullscreen = 16974065;
          Theme_Holo_Light_NoActionBar_Overscan = 16974302;
          Theme_Holo_Light_NoActionBar_TranslucentDecor = 16974306;
          Theme_Holo_Light_Panel = 16973948;
          Theme_Holo_NoActionBar = 16973932;
          Theme_Holo_NoActionBar_Fullscreen = 16973933;
          Theme_Holo_NoActionBar_Overscan = 16974301;
          Theme_Holo_NoActionBar_TranslucentDecor = 16974305;
          Theme_Holo_Panel = 16973947;
          Theme_Holo_Wallpaper = 16973949;
          Theme_Holo_Wallpaper_NoTitleBar = 16973950;
          Theme_InputMethod = 16973908;
          Theme_Light = 16973836;
          Theme_Light_NoTitleBar = 16973837;
          Theme_Light_NoTitleBar_Fullscreen = 16973838;
          Theme_Light_Panel = 16973914;
          Theme_Light_WallpaperSettings = 16973922;
          Theme_Material = 16974372;
          Theme_Material_Dialog = 16974373;
          Theme_Material_DialogWhenLarge = 16974379;
          Theme_Material_DialogWhenLarge_NoActionBar = 16974380;
          Theme_Material_Dialog_Alert = 16974374;
          Theme_Material_Dialog_MinWidth = 16974375;
          Theme_Material_Dialog_NoActionBar = 16974376;
          Theme_Material_Dialog_NoActionBar_MinWidth = 16974377;
          Theme_Material_Dialog_Presentation = 16974378;
          Theme_Material_InputMethod = 16974381;
          Theme_Material_Light = 16974391;
          Theme_Material_Light_DarkActionBar = 16974392;
          Theme_Material_Light_Dialog = 16974393;
          Theme_Material_Light_DialogWhenLarge = 16974399;
          Theme_Material_Light_DialogWhenLarge_NoActionBar = 16974400;
          Theme_Material_Light_Dialog_Alert = 16974394;
          Theme_Material_Light_Dialog_MinWidth = 16974395;
          Theme_Material_Light_Dialog_NoActionBar = 16974396;
          Theme_Material_Light_Dialog_NoActionBar_MinWidth = 16974397;
          Theme_Material_Light_Dialog_Presentation = 16974398;
          Theme_Material_Light_NoActionBar = 16974401;
          Theme_Material_Light_NoActionBar_Fullscreen = 16974402;
          Theme_Material_Light_NoActionBar_Overscan = 16974403;
          Theme_Material_Light_NoActionBar_TranslucentDecor = 16974404;
          Theme_Material_Light_Panel = 16974405;
          Theme_Material_Light_Voice = 16974406;
          Theme_Material_NoActionBar = 16974382;
          Theme_Material_NoActionBar_Fullscreen = 16974383;
          Theme_Material_NoActionBar_Overscan = 16974384;
          Theme_Material_NoActionBar_TranslucentDecor = 16974385;
          Theme_Material_Panel = 16974386;
          Theme_Material_Settings = 16974387;
          Theme_Material_Voice = 16974388;
          Theme_Material_Wallpaper = 16974389;
          Theme_Material_Wallpaper_NoTitleBar = 16974390;
          Theme_NoDisplay = 16973909;
          Theme_NoTitleBar = 16973830;
          Theme_NoTitleBar_Fullscreen = 16973831;
          Theme_NoTitleBar_OverlayActionModes = 16973930;
          Theme_Panel = 16973913;
          Theme_Translucent = 16973839;
          Theme_Translucent_NoTitleBar = 16973840;
          Theme_Translucent_NoTitleBar_Fullscreen = 16973841;
          Theme_Wallpaper = 16973918;
          Theme_WallpaperSettings = 16973921;
          Theme_Wallpaper_NoTitleBar = 16973919;
          Theme_Wallpaper_NoTitleBar_Fullscreen = 16973920;
          Theme_WithActionBar = 16973929;
          Widget = 16973842;
          Widget_AbsListView = 16973843;
          Widget_ActionBar = 16973954;
          Widget_ActionBar_TabBar = 16974068;
          Widget_ActionBar_TabText = 16974067;
          Widget_ActionBar_TabView = 16974066;
          Widget_ActionButton = 16973956;
          Widget_ActionButton_CloseMode = 16973960;
          Widget_ActionButton_Overflow = 16973959;
          Widget_AutoCompleteTextView = 16973863;
          Widget_Button = 16973844;
          Widget_Button_Inset = 16973845;
          Widget_Button_Small = 16973846;
          Widget_Button_Toggle = 16973847;
          Widget_CalendarView = 16974059;
          Widget_CompoundButton = 16973848;
          Widget_CompoundButton_CheckBox = 16973849;
          Widget_CompoundButton_RadioButton = 16973850;
          Widget_CompoundButton_Star = 16973851;
          Widget_DatePicker = 16974062;
          Widget_DeviceDefault = 16974144;
          Widget_DeviceDefault_ActionBar = 16974187;
          Widget_DeviceDefault_ActionBar_Solid = 16974195;
          Widget_DeviceDefault_ActionBar_TabBar = 16974194;
          Widget_DeviceDefault_ActionBar_TabText = 16974193;
          Widget_DeviceDefault_ActionBar_TabView = 16974192;
          Widget_DeviceDefault_ActionButton = 16974182;
          Widget_DeviceDefault_ActionButton_CloseMode = 16974186;
          Widget_DeviceDefault_ActionButton_Overflow = 16974183;
          Widget_DeviceDefault_ActionButton_TextButton = 16974184;
          Widget_DeviceDefault_ActionMode = 16974185;
          Widget_DeviceDefault_AutoCompleteTextView = 16974151;
          Widget_DeviceDefault_Button = 16974145;
          Widget_DeviceDefault_Button_Borderless = 16974188;
          Widget_DeviceDefault_Button_Borderless_Small = 16974149;
          Widget_DeviceDefault_Button_Inset = 16974147;
          Widget_DeviceDefault_Button_Small = 16974146;
          Widget_DeviceDefault_Button_Toggle = 16974148;
          Widget_DeviceDefault_CalendarView = 16974190;
          Widget_DeviceDefault_CheckedTextView = 16974299;
          Widget_DeviceDefault_CompoundButton_CheckBox = 16974152;
          Widget_DeviceDefault_CompoundButton_RadioButton = 16974169;
          Widget_DeviceDefault_CompoundButton_Star = 16974173;
          Widget_DeviceDefault_DatePicker = 16974191;
          Widget_DeviceDefault_DropDownItem = 16974177;
          Widget_DeviceDefault_DropDownItem_Spinner = 16974178;
          Widget_DeviceDefault_EditText = 16974154;
          Widget_DeviceDefault_ExpandableListView = 16974155;
          Widget_DeviceDefault_FastScroll = 16974313;
          Widget_DeviceDefault_GridView = 16974156;
          Widget_DeviceDefault_HorizontalScrollView = 16974171;
          Widget_DeviceDefault_ImageButton = 16974157;
          Widget_DeviceDefault_Light = 16974196;
          Widget_DeviceDefault_Light_ActionBar = 16974243;
          Widget_DeviceDefault_Light_ActionBar_Solid = 16974247;
          Widget_DeviceDefault_Light_ActionBar_Solid_Inverse = 16974248 deprecated;
          Widget_DeviceDefault_Light_ActionBar_TabBar = 16974246;
          Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse = 16974249 deprecated;
          Widget_DeviceDefault_Light_ActionBar_TabText = 16974245;
          Widget_DeviceDefault_Light_ActionBar_TabText_Inverse = 16974251 deprecated;
          Widget_DeviceDefault_Light_ActionBar_TabView = 16974244;
          Widget_DeviceDefault_Light_ActionBar_TabView_Inverse = 16974250 deprecated;
          Widget_DeviceDefault_Light_ActionButton = 16974239;
          Widget_DeviceDefault_Light_ActionButton_CloseMode = 16974242;
          Widget_DeviceDefault_Light_ActionButton_Overflow = 16974240;
          Widget_DeviceDefault_Light_ActionMode = 16974241;
          Widget_DeviceDefault_Light_ActionMode_Inverse = 16974252 deprecated;
          Widget_DeviceDefault_Light_AutoCompleteTextView = 16974203;
          Widget_DeviceDefault_Light_Button = 16974197;
          Widget_DeviceDefault_Light_Button_Borderless_Small = 16974201;
          Widget_DeviceDefault_Light_Button_Inset = 16974199;
          Widget_DeviceDefault_Light_Button_Small = 16974198;
          Widget_DeviceDefault_Light_Button_Toggle = 16974200;
          Widget_DeviceDefault_Light_CalendarView = 16974238;
          Widget_DeviceDefault_Light_CheckedTextView = 16974300;
          Widget_DeviceDefault_Light_CompoundButton_CheckBox = 16974204;
          Widget_DeviceDefault_Light_CompoundButton_RadioButton = 16974224;
          Widget_DeviceDefault_Light_CompoundButton_Star = 16974228;
          Widget_DeviceDefault_Light_DropDownItem = 16974232;
          Widget_DeviceDefault_Light_DropDownItem_Spinner = 16974233;
          Widget_DeviceDefault_Light_EditText = 16974206;
          Widget_DeviceDefault_Light_ExpandableListView = 16974207;
          Widget_DeviceDefault_Light_FastScroll = 16974315;
          Widget_DeviceDefault_Light_GridView = 16974208;
          Widget_DeviceDefault_Light_HorizontalScrollView = 16974226;
          Widget_DeviceDefault_Light_ImageButton = 16974209;
          Widget_DeviceDefault_Light_ListPopupWindow = 16974235;
          Widget_DeviceDefault_Light_ListView = 16974210;
          Widget_DeviceDefault_Light_ListView_DropDown = 16974205;
          Widget_DeviceDefault_Light_MediaRouteButton = 16974296;
          Widget_DeviceDefault_Light_PopupMenu = 16974236;
          Widget_DeviceDefault_Light_PopupWindow = 16974211;
          Widget_DeviceDefault_Light_ProgressBar = 16974212;
          Widget_DeviceDefault_Light_ProgressBar_Horizontal = 16974213;
          Widget_DeviceDefault_Light_ProgressBar_Inverse = 16974217;
          Widget_DeviceDefault_Light_ProgressBar_Large = 16974216;
          Widget_DeviceDefault_Light_ProgressBar_Large_Inverse = 16974219;
          Widget_DeviceDefault_Light_ProgressBar_Small = 16974214;
          Widget_DeviceDefault_Light_ProgressBar_Small_Inverse = 16974218;
          Widget_DeviceDefault_Light_ProgressBar_Small_Title = 16974215;
          Widget_DeviceDefault_Light_RatingBar = 16974221;
          Widget_DeviceDefault_Light_RatingBar_Indicator = 16974222;
          Widget_DeviceDefault_Light_RatingBar_Small = 16974223;
          Widget_DeviceDefault_Light_ScrollView = 16974225;
          Widget_DeviceDefault_Light_SeekBar = 16974220;
          Widget_DeviceDefault_Light_Spinner = 16974227;
          Widget_DeviceDefault_Light_StackView = 16974316;
          Widget_DeviceDefault_Light_Tab = 16974237;
          Widget_DeviceDefault_Light_TabWidget = 16974229;
          Widget_DeviceDefault_Light_TextView = 16974202;
          Widget_DeviceDefault_Light_TextView_SpinnerItem = 16974234;
          Widget_DeviceDefault_Light_WebTextView = 16974230;
          Widget_DeviceDefault_Light_WebView = 16974231;
          Widget_DeviceDefault_ListPopupWindow = 16974180;
          Widget_DeviceDefault_ListView = 16974158;
          Widget_DeviceDefault_ListView_DropDown = 16974153;
          Widget_DeviceDefault_MediaRouteButton = 16974295;
          Widget_DeviceDefault_PopupMenu = 16974181;
          Widget_DeviceDefault_PopupWindow = 16974159;
          Widget_DeviceDefault_ProgressBar = 16974160;
          Widget_DeviceDefault_ProgressBar_Horizontal = 16974161;
          Widget_DeviceDefault_ProgressBar_Large = 16974164;
          Widget_DeviceDefault_ProgressBar_Small = 16974162;
          Widget_DeviceDefault_ProgressBar_Small_Title = 16974163;
          Widget_DeviceDefault_RatingBar = 16974166;
          Widget_DeviceDefault_RatingBar_Indicator = 16974167;
          Widget_DeviceDefault_RatingBar_Small = 16974168;
          Widget_DeviceDefault_ScrollView = 16974170;
          Widget_DeviceDefault_SeekBar = 16974165;
          Widget_DeviceDefault_Spinner = 16974172;
          Widget_DeviceDefault_StackView = 16974314;
          Widget_DeviceDefault_Tab = 16974189;
          Widget_DeviceDefault_TabWidget = 16974174;
          Widget_DeviceDefault_TextView = 16974150;
          Widget_DeviceDefault_TextView_SpinnerItem = 16974179;
          Widget_DeviceDefault_WebTextView = 16974175;
          Widget_DeviceDefault_WebView = 16974176;
          Widget_DropDownItem = 16973867;
          Widget_DropDownItem_Spinner = 16973868;
          Widget_EditText = 16973859;
          Widget_ExpandableListView = 16973860;
          Widget_FastScroll = 16974309;
          Widget_FragmentBreadCrumbs = 16973961;
          Widget_Gallery = 16973877;
          Widget_GridView = 16973874;
          Widget_Holo = 16973962;
          Widget_Holo_ActionBar = 16974004;
          Widget_Holo_ActionBar_Solid = 16974113;
          Widget_Holo_ActionBar_TabBar = 16974071;
          Widget_Holo_ActionBar_TabText = 16974070;
          Widget_Holo_ActionBar_TabView = 16974069;
          Widget_Holo_ActionButton = 16973999;
          Widget_Holo_ActionButton_CloseMode = 16974003;
          Widget_Holo_ActionButton_Overflow = 16974000;
          Widget_Holo_ActionButton_TextButton = 16974001;
          Widget_Holo_ActionMode = 16974002;
          Widget_Holo_AutoCompleteTextView = 16973968;
          Widget_Holo_Button = 16973963;
          Widget_Holo_Button_Borderless = 16974050;
          Widget_Holo_Button_Borderless_Small = 16974106;
          Widget_Holo_Button_Inset = 16973965;
          Widget_Holo_Button_Small = 16973964;
          Widget_Holo_Button_Toggle = 16973966;
          Widget_Holo_CalendarView = 16974060;
          Widget_Holo_CheckedTextView = 16974297;
          Widget_Holo_CompoundButton_CheckBox = 16973969;
          Widget_Holo_CompoundButton_RadioButton = 16973986;
          Widget_Holo_CompoundButton_Star = 16973990;
          Widget_Holo_DatePicker = 16974063;
          Widget_Holo_DropDownItem = 16973994;
          Widget_Holo_DropDownItem_Spinner = 16973995;
          Widget_Holo_EditText = 16973971;
          Widget_Holo_ExpandableListView = 16973972;
          Widget_Holo_GridView = 16973973;
          Widget_Holo_HorizontalScrollView = 16973988;
          Widget_Holo_ImageButton = 16973974;
          Widget_Holo_Light = 16974005;
          Widget_Holo_Light_ActionBar = 16974049;
          Widget_Holo_Light_ActionBar_Solid = 16974114;
          Widget_Holo_Light_ActionBar_Solid_Inverse = 16974115;
          Widget_Holo_Light_ActionBar_TabBar = 16974074;
          Widget_Holo_Light_ActionBar_TabBar_Inverse = 16974116;
          Widget_Holo_Light_ActionBar_TabText = 16974073;
          Widget_Holo_Light_ActionBar_TabText_Inverse = 16974118;
          Widget_Holo_Light_ActionBar_TabView = 16974072;
          Widget_Holo_Light_ActionBar_TabView_Inverse = 16974117;
          Widget_Holo_Light_ActionButton = 16974045;
          Widget_Holo_Light_ActionButton_CloseMode = 16974048;
          Widget_Holo_Light_ActionButton_Overflow = 16974046;
          Widget_Holo_Light_ActionMode = 16974047;
          Widget_Holo_Light_ActionMode_Inverse = 16974119;
          Widget_Holo_Light_AutoCompleteTextView = 16974011;
          Widget_Holo_Light_Button = 16974006;
          Widget_Holo_Light_Button_Borderless_Small = 16974107;
          Widget_Holo_Light_Button_Inset = 16974008;
          Widget_Holo_Light_Button_Small = 16974007;
          Widget_Holo_Light_Button_Toggle = 16974009;
          Widget_Holo_Light_CalendarView = 16974061;
          Widget_Holo_Light_CheckedTextView = 16974298;
          Widget_Holo_Light_CompoundButton_CheckBox = 16974012;
          Widget_Holo_Light_CompoundButton_RadioButton = 16974032;
          Widget_Holo_Light_CompoundButton_Star = 16974036;
          Widget_Holo_Light_DropDownItem = 16974040;
          Widget_Holo_Light_DropDownItem_Spinner = 16974041;
          Widget_Holo_Light_EditText = 16974014;
          Widget_Holo_Light_ExpandableListView = 16974015;
          Widget_Holo_Light_GridView = 16974016;
          Widget_Holo_Light_HorizontalScrollView = 16974034;
          Widget_Holo_Light_ImageButton = 16974017;
          Widget_Holo_Light_ListPopupWindow = 16974043;
          Widget_Holo_Light_ListView = 16974018;
          Widget_Holo_Light_ListView_DropDown = 16974013;
          Widget_Holo_Light_MediaRouteButton = 16974294;
          Widget_Holo_Light_PopupMenu = 16974044;
          Widget_Holo_Light_PopupWindow = 16974019;
          Widget_Holo_Light_ProgressBar = 16974020;
          Widget_Holo_Light_ProgressBar_Horizontal = 16974021;
          Widget_Holo_Light_ProgressBar_Inverse = 16974025;
          Widget_Holo_Light_ProgressBar_Large = 16974024;
          Widget_Holo_Light_ProgressBar_Large_Inverse = 16974027;
          Widget_Holo_Light_ProgressBar_Small = 16974022;
          Widget_Holo_Light_ProgressBar_Small_Inverse = 16974026;
          Widget_Holo_Light_ProgressBar_Small_Title = 16974023;
          Widget_Holo_Light_RatingBar = 16974029;
          Widget_Holo_Light_RatingBar_Indicator = 16974030;
          Widget_Holo_Light_RatingBar_Small = 16974031;
          Widget_Holo_Light_ScrollView = 16974033;
          Widget_Holo_Light_SeekBar = 16974028;
          Widget_Holo_Light_Spinner = 16974035;
          Widget_Holo_Light_Tab = 16974052;
          Widget_Holo_Light_TabWidget = 16974037;
          Widget_Holo_Light_TextView = 16974010;
          Widget_Holo_Light_TextView_SpinnerItem = 16974042;
          Widget_Holo_Light_WebTextView = 16974038;
          Widget_Holo_Light_WebView = 16974039;
          Widget_Holo_ListPopupWindow = 16973997;
          Widget_Holo_ListView = 16973975;
          Widget_Holo_ListView_DropDown = 16973970;
          Widget_Holo_MediaRouteButton = 16974293;
          Widget_Holo_PopupMenu = 16973998;
          Widget_Holo_PopupWindow = 16973976;
          Widget_Holo_ProgressBar = 16973977;
          Widget_Holo_ProgressBar_Horizontal = 16973978;
          Widget_Holo_ProgressBar_Large = 16973981;
          Widget_Holo_ProgressBar_Small = 16973979;
          Widget_Holo_ProgressBar_Small_Title = 16973980;
          Widget_Holo_RatingBar = 16973983;
          Widget_Holo_RatingBar_Indicator = 16973984;
          Widget_Holo_RatingBar_Small = 16973985;
          Widget_Holo_ScrollView = 16973987;
          Widget_Holo_SeekBar = 16973982;
          Widget_Holo_Spinner = 16973989;
          Widget_Holo_Tab = 16974051;
          Widget_Holo_TabWidget = 16973991;
          Widget_Holo_TextView = 16973967;
          Widget_Holo_TextView_SpinnerItem = 16973996;
          Widget_Holo_WebTextView = 16973992;
          Widget_Holo_WebView = 16973993;
          Widget_ImageButton = 16973862;
          Widget_ImageWell = 16973861;
          Widget_KeyboardView = 16973911;
          Widget_ListPopupWindow = 16973957;
          Widget_ListView = 16973870;
          Widget_ListView_DropDown = 16973872;
          Widget_ListView_Menu = 16973873;
          Widget_ListView_White = 16973871;
          Widget_Material = 16974413;
          Widget_Material_ActionBar = 16974414;
          Widget_Material_ActionBar_Solid = 16974415;
          Widget_Material_ActionBar_TabBar = 16974416;
          Widget_Material_ActionBar_TabText = 16974417;
          Widget_Material_ActionBar_TabView = 16974418;
          Widget_Material_ActionButton = 16974419;
          Widget_Material_ActionButton_CloseMode = 16974420;
          Widget_Material_ActionButton_Overflow = 16974421;
          Widget_Material_ActionMode = 16974422;
          Widget_Material_AutoCompleteTextView = 16974423;
          Widget_Material_Button = 16974424;
          Widget_Material_ButtonBar = 16974431;
          Widget_Material_ButtonBar_AlertDialog = 16974432;
          Widget_Material_Button_Borderless = 16974425;
          Widget_Material_Button_Borderless_Colored = 16974426;
          Widget_Material_Button_Borderless_Small = 16974427;
          Widget_Material_Button_Inset = 16974428;
          Widget_Material_Button_Small = 16974429;
          Widget_Material_Button_Toggle = 16974430;
          Widget_Material_CalendarView = 16974433;
          Widget_Material_CheckedTextView = 16974434;
          Widget_Material_CompoundButton_CheckBox = 16974435;
          Widget_Material_CompoundButton_RadioButton = 16974436;
          Widget_Material_CompoundButton_Star = 16974437;
          Widget_Material_DatePicker = 16974438;
          Widget_Material_DropDownItem = 16974439;
          Widget_Material_DropDownItem_Spinner = 16974440;
          Widget_Material_EditText = 16974441;
          Widget_Material_ExpandableListView = 16974442;
          Widget_Material_FastScroll = 16974443;
          Widget_Material_GridView = 16974444;
          Widget_Material_HorizontalScrollView = 16974445;
          Widget_Material_ImageButton = 16974446;
          Widget_Material_Light = 16974478;
          Widget_Material_Light_ActionBar = 16974479;
          Widget_Material_Light_ActionBar_Solid = 16974480;
          Widget_Material_Light_ActionBar_TabBar = 16974481;
          Widget_Material_Light_ActionBar_TabText = 16974482;
          Widget_Material_Light_ActionBar_TabView = 16974483;
          Widget_Material_Light_ActionButton = 16974484;
          Widget_Material_Light_ActionButton_CloseMode = 16974485;
          Widget_Material_Light_ActionButton_Overflow = 16974486;
          Widget_Material_Light_ActionMode = 16974487;
          Widget_Material_Light_AutoCompleteTextView = 16974488;
          Widget_Material_Light_Button = 16974489;
          Widget_Material_Light_ButtonBar = 16974496;
          Widget_Material_Light_ButtonBar_AlertDialog = 16974497;
          Widget_Material_Light_Button_Borderless = 16974490;
          Widget_Material_Light_Button_Borderless_Colored = 16974491;
          Widget_Material_Light_Button_Borderless_Small = 16974492;
          Widget_Material_Light_Button_Inset = 16974493;
          Widget_Material_Light_Button_Small = 16974494;
          Widget_Material_Light_Button_Toggle = 16974495;
          Widget_Material_Light_CalendarView = 16974498;
          Widget_Material_Light_CheckedTextView = 16974499;
          Widget_Material_Light_CompoundButton_CheckBox = 16974500;
          Widget_Material_Light_CompoundButton_RadioButton = 16974501;
          Widget_Material_Light_CompoundButton_Star = 16974502;
          Widget_Material_Light_DatePicker = 16974503;
          Widget_Material_Light_DropDownItem = 16974504;
          Widget_Material_Light_DropDownItem_Spinner = 16974505;
          Widget_Material_Light_EditText = 16974506;
          Widget_Material_Light_ExpandableListView = 16974507;
          Widget_Material_Light_FastScroll = 16974508;
          Widget_Material_Light_GridView = 16974509;
          Widget_Material_Light_HorizontalScrollView = 16974510;
          Widget_Material_Light_ImageButton = 16974511;
          Widget_Material_Light_ListPopupWindow = 16974512;
          Widget_Material_Light_ListView = 16974513;
          Widget_Material_Light_ListView_DropDown = 16974514;
          Widget_Material_Light_MediaRouteButton = 16974515;
          Widget_Material_Light_PopupMenu = 16974516;
          Widget_Material_Light_PopupMenu_Overflow = 16974517;
          Widget_Material_Light_PopupWindow = 16974518;
          Widget_Material_Light_ProgressBar = 16974519;
          Widget_Material_Light_ProgressBar_Horizontal = 16974520;
          Widget_Material_Light_ProgressBar_Inverse = 16974521;
          Widget_Material_Light_ProgressBar_Large = 16974522;
          Widget_Material_Light_ProgressBar_Large_Inverse = 16974523;
          Widget_Material_Light_ProgressBar_Small = 16974524;
          Widget_Material_Light_ProgressBar_Small_Inverse = 16974525;
          Widget_Material_Light_ProgressBar_Small_Title = 16974526;
          Widget_Material_Light_RatingBar = 16974527;
          Widget_Material_Light_RatingBar_Indicator = 16974528;
          Widget_Material_Light_RatingBar_Small = 16974529;
          Widget_Material_Light_ScrollView = 16974530;
          Widget_Material_Light_SearchView = 16974531;
          Widget_Material_Light_SeekBar = 16974532;
          Widget_Material_Light_SegmentedButton = 16974533;
          Widget_Material_Light_Spinner = 16974535;
          Widget_Material_Light_Spinner_Underlined = 16974536;
          Widget_Material_Light_StackView = 16974534;
          Widget_Material_Light_Tab = 16974537;
          Widget_Material_Light_TabWidget = 16974538;
          Widget_Material_Light_TextView = 16974539;
          Widget_Material_Light_TextView_SpinnerItem = 16974540;
          Widget_Material_Light_TimePicker = 16974541;
          Widget_Material_Light_WebTextView = 16974542;
          Widget_Material_Light_WebView = 16974543;
          Widget_Material_ListPopupWindow = 16974447;
          Widget_Material_ListView = 16974448;
          Widget_Material_ListView_DropDown = 16974449;
          Widget_Material_MediaRouteButton = 16974450;
          Widget_Material_PopupMenu = 16974451;
          Widget_Material_PopupMenu_Overflow = 16974452;
          Widget_Material_PopupWindow = 16974453;
          Widget_Material_ProgressBar = 16974454;
          Widget_Material_ProgressBar_Horizontal = 16974455;
          Widget_Material_ProgressBar_Large = 16974456;
          Widget_Material_ProgressBar_Small = 16974457;
          Widget_Material_ProgressBar_Small_Title = 16974458;
          Widget_Material_RatingBar = 16974459;
          Widget_Material_RatingBar_Indicator = 16974460;
          Widget_Material_RatingBar_Small = 16974461;
          Widget_Material_ScrollView = 16974462;
          Widget_Material_SearchView = 16974463;
          Widget_Material_SeekBar = 16974464;
          Widget_Material_SegmentedButton = 16974465;
          Widget_Material_Spinner = 16974467;
          Widget_Material_Spinner_Underlined = 16974468;
          Widget_Material_StackView = 16974466;
          Widget_Material_Tab = 16974469;
          Widget_Material_TabWidget = 16974470;
          Widget_Material_TextView = 16974471;
          Widget_Material_TextView_SpinnerItem = 16974472;
          Widget_Material_TimePicker = 16974473;
          Widget_Material_Toolbar = 16974474;
          Widget_Material_Toolbar_Button_Navigation = 16974475;
          Widget_Material_WebTextView = 16974476;
          Widget_Material_WebView = 16974477;
          Widget_PopupMenu = 16973958;
          Widget_PopupWindow = 16973878;
          Widget_ProgressBar = 16973852;
          Widget_ProgressBar_Horizontal = 16973855;
          Widget_ProgressBar_Inverse = 16973915;
          Widget_ProgressBar_Large = 16973853;
          Widget_ProgressBar_Large_Inverse = 16973916;
          Widget_ProgressBar_Small = 16973854;
          Widget_ProgressBar_Small_Inverse = 16973917;
          Widget_RatingBar = 16973857;
          Widget_ScrollView = 16973869;
          Widget_SeekBar = 16973856;
          Widget_Spinner = 16973864;
          Widget_Spinner_DropDown = 16973955;
          Widget_StackView = 16974310;
          Widget_TabWidget = 16973876;
          Widget_TextView = 16973858;
          Widget_TextView_PopupMenu = 16973865;
          Widget_TextView_SpinnerItem = 16973866;
          Widget_Toolbar = 16974311;
          Widget_Toolbar_Button_Navigation = 16974312;
          Widget_WebView = 16973875;
      public
        constructor create(); overload;
      end;

      Innerstring = class sealed external 'android' name 'string' (JLObject)
      public
        const
          VideoView_error_button = 17039376;
          VideoView_error_text_invalid_progressive_playback = 17039381;
          VideoView_error_text_unknown = 17039377;
          VideoView_error_title = 17039378;
          cancel = 17039360;
          copy = 17039361;
          copyUrl = 17039362;
          cut = 17039363;
          defaultMsisdnAlphaTag = 17039365;
          defaultVoiceMailAlphaTag = 17039364;
          dialog_alert_title = 17039380;
          emptyPhoneNumber = 17039366;
          httpErrorBadUrl = 17039367;
          httpErrorUnsupportedScheme = 17039368;
          no = 17039369;
          ok = 17039370;
          paste = 17039371;
          search_go = 17039372;
          selectAll = 17039373;
          selectTextMode = 17039382;
          status_bar_notification_info_overflow = 17039383;
          unknownName = 17039374;
          untitled = 17039375;
          yes = 17039379;
      public
        constructor create(); overload;
      end;

      Innerraw = class sealed external 'android' name 'raw' (JLObject)
      public
        constructor create(); overload;
      end;

      Innerplurals = class sealed external 'android' name 'plurals' (JLObject)
      public
        constructor create(); overload;
      end;

      Innermipmap = class sealed external 'android' name 'mipmap' (JLObject)
      public
        const
          sym_def_app_icon = 17629184;
      public
        constructor create(); overload;
      end;

      Innermenu = class sealed external 'android' name 'menu' (JLObject)
      public
        constructor create(); overload;
      end;

      Innerlayout = class sealed external 'android' name 'layout' (JLObject)
      public
        const
          activity_list_item = 17367040;
          browser_link_context_header = 17367054;
          expandable_list_content = 17367041;
          list_content = 17367060;
          preference_category = 17367042;
          select_dialog_item = 17367057;
          select_dialog_multichoice = 17367059;
          select_dialog_singlechoice = 17367058;
          simple_dropdown_item_1line = 17367050;
          simple_expandable_list_item_1 = 17367046;
          simple_expandable_list_item_2 = 17367047;
          simple_gallery_item = 17367051;
          simple_list_item_1 = 17367043;
          simple_list_item_2 = 17367044;
          simple_list_item_activated_1 = 17367062;
          simple_list_item_activated_2 = 17367063;
          simple_list_item_checked = 17367045;
          simple_list_item_multiple_choice = 17367056;
          simple_list_item_single_choice = 17367055;
          simple_selectable_list_item = 17367061;
          simple_spinner_dropdown_item = 17367049;
          simple_spinner_item = 17367048;
          test_list_item = 17367052;
          two_line_list_item = 17367053;
      public
        constructor create(); overload;
      end;

      Innerinterpolator = class sealed external 'android' name 'interpolator' (JLObject)
      public
        const
          accelerate_cubic = 17563650;
          accelerate_decelerate = 17563654;
          accelerate_quad = 17563648;
          accelerate_quint = 17563652;
          anticipate = 17563655;
          anticipate_overshoot = 17563657;
          bounce = 17563658;
          cycle = 17563660;
          decelerate_cubic = 17563651;
          decelerate_quad = 17563649;
          decelerate_quint = 17563653;
          fast_out_linear_in = 17563663;
          fast_out_slow_in = 17563661;
          linear = 17563659;
          linear_out_slow_in = 17563662;
          overshoot = 17563656;
      public
        constructor create(); overload;
      end;

      Innerinteger = class sealed external 'android' name 'integer' (JLObject)
      public
        const
          config_longAnimTime = 17694722;
          config_mediumAnimTime = 17694721;
          config_shortAnimTime = 17694720;
          status_bar_notification_info_maxnum = 17694723;
      public
        constructor create(); overload;
      end;

      Innerid = class sealed external 'android' name 'id' (JLObject)
      public
        const
          addToDictionary = 16908330;
          background = 16908288;
          button1 = 16908313;
          button2 = 16908314;
          button3 = 16908315;
          candidatesArea = 16908317;
          checkbox = 16908289;
          closeButton = 16908327;
          content = 16908290;
          copy = 16908321;
          copyUrl = 16908323;
          custom = 16908331;
          cut = 16908320;
          edit = 16908291;
          empty = 16908292;
          extractArea = 16908316;
          hint = 16908293;
          home = 16908332;
          icon = 16908294;
          icon1 = 16908295;
          icon2 = 16908296;
          input = 16908297;
          inputArea = 16908318;
          inputExtractEditText = 16908325;
          keyboardView = 16908326;
          list = 16908298;
          mask = 16908334;
          message = 16908299;
          navigationBarBackground = 16908336;
          paste = 16908322;
          primary = 16908300;
          progress = 16908301;
          secondaryProgress = 16908303;
          selectAll = 16908319;
          selectTextMode = 16908333;
          selectedIcon = 16908302;
          startSelectingText = 16908328;
          statusBarBackground = 16908335;
          stopSelectingText = 16908329;
          summary = 16908304;
          switchInputMethod = 16908324;
          tabcontent = 16908305;
          tabhost = 16908306;
          tabs = 16908307;
          text1 = 16908308;
          text2 = 16908309;
          title = 16908310;
          toggle = 16908311;
          widget_frame = 16908312;
      public
        constructor create(); overload;
      end;

      Innerfraction = class sealed external 'android' name 'fraction' (JLObject)
      public
        constructor create(); overload;
      end;

      Innerdrawable = class sealed external 'android' name 'drawable' (JLObject)
      public
        const
          alert_dark_frame = 17301504;
          alert_light_frame = 17301505;
          arrow_down_float = 17301506;
          arrow_up_float = 17301507;
          bottom_bar = 17301658;
          btn_default = 17301508;
          btn_default_small = 17301509;
          btn_dialog = 17301527;
          btn_dropdown = 17301510;
          btn_minus = 17301511;
          btn_plus = 17301512;
          btn_radio = 17301513;
          btn_star = 17301514;
          btn_star_big_off = 17301515;
          btn_star_big_on = 17301516;
          button_onoff_indicator_off = 17301518;
          button_onoff_indicator_on = 17301517;
          checkbox_off_background = 17301519;
          checkbox_on_background = 17301520;
          dark_header = 17301669;
          dialog_frame = 17301521;
          dialog_holo_dark_frame = 17301682;
          dialog_holo_light_frame = 17301683;
          divider_horizontal_bright = 17301522;
          divider_horizontal_dark = 17301524;
          divider_horizontal_dim_dark = 17301525;
          divider_horizontal_textfield = 17301523;
          edit_text = 17301526;
          editbox_background = 17301528;
          editbox_background_normal = 17301529;
          editbox_dropdown_dark_frame = 17301530;
          editbox_dropdown_light_frame = 17301531;
          gallery_thumb = 17301532;
          ic_btn_speak_now = 17301668;
          ic_delete = 17301533;
          ic_dialog_alert = 17301543;
          ic_dialog_dialer = 17301544;
          ic_dialog_email = 17301545;
          ic_dialog_info = 17301659;
          ic_dialog_map = 17301546;
          ic_input_add = 17301547;
          ic_input_delete = 17301548;
          ic_input_get = 17301549;
          ic_lock_idle_alarm = 17301550;
          ic_lock_idle_charging = 17301534;
          ic_lock_idle_lock = 17301535;
          ic_lock_idle_low_battery = 17301536;
          ic_lock_lock = 17301551;
          ic_lock_power_off = 17301552;
          ic_lock_silent_mode = 17301553;
          ic_lock_silent_mode_off = 17301554;
          ic_media_ff = 17301537;
          ic_media_next = 17301538;
          ic_media_pause = 17301539;
          ic_media_play = 17301540;
          ic_media_previous = 17301541;
          ic_media_rew = 17301542;
          ic_menu_add = 17301555;
          ic_menu_agenda = 17301556;
          ic_menu_always_landscape_portrait = 17301557;
          ic_menu_call = 17301558;
          ic_menu_camera = 17301559;
          ic_menu_close_clear_cancel = 17301560;
          ic_menu_compass = 17301561;
          ic_menu_crop = 17301562;
          ic_menu_day = 17301563;
          ic_menu_delete = 17301564;
          ic_menu_directions = 17301565;
          ic_menu_edit = 17301566;
          ic_menu_gallery = 17301567;
          ic_menu_help = 17301568;
          ic_menu_info_details = 17301569;
          ic_menu_manage = 17301570;
          ic_menu_mapmode = 17301571;
          ic_menu_month = 17301572;
          ic_menu_more = 17301573;
          ic_menu_my_calendar = 17301574;
          ic_menu_mylocation = 17301575;
          ic_menu_myplaces = 17301576;
          ic_menu_preferences = 17301577;
          ic_menu_recent_history = 17301578;
          ic_menu_report_image = 17301579;
          ic_menu_revert = 17301580;
          ic_menu_rotate = 17301581;
          ic_menu_save = 17301582;
          ic_menu_search = 17301583;
          ic_menu_send = 17301584;
          ic_menu_set_as = 17301585;
          ic_menu_share = 17301586;
          ic_menu_slideshow = 17301587;
          ic_menu_sort_alphabetically = 17301660;
          ic_menu_sort_by_size = 17301661;
          ic_menu_today = 17301588;
          ic_menu_upload = 17301589;
          ic_menu_upload_you_tube = 17301590;
          ic_menu_view = 17301591;
          ic_menu_week = 17301592;
          ic_menu_zoom = 17301593;
          ic_notification_clear_all = 17301594;
          ic_notification_overlay = 17301595;
          ic_partial_secure = 17301596;
          ic_popup_disk_full = 17301597;
          ic_popup_reminder = 17301598;
          ic_popup_sync = 17301599;
          ic_search_category_default = 17301600;
          ic_secure = 17301601;
          list_selector_background = 17301602;
          menu_frame = 17301603;
          menu_full_frame = 17301604;
          menuitem_background = 17301605;
          picture_frame = 17301606;
          presence_audio_away = 17301679;
          presence_audio_busy = 17301680;
          presence_audio_online = 17301681;
          presence_away = 17301607;
          presence_busy = 17301608;
          presence_invisible = 17301609;
          presence_offline = 17301610;
          presence_online = 17301611;
          presence_video_away = 17301676;
          presence_video_busy = 17301677;
          presence_video_online = 17301678;
          progress_horizontal = 17301612;
          progress_indeterminate_horizontal = 17301613;
          radiobutton_off_background = 17301614;
          radiobutton_on_background = 17301615;
          screen_background_dark = 17301656;
          screen_background_dark_transparent = 17301673;
          screen_background_light = 17301657;
          screen_background_light_transparent = 17301674;
          spinner_background = 17301616;
          spinner_dropdown_background = 17301617;
          star_big_off = 17301619;
          star_big_on = 17301618;
          star_off = 17301621;
          star_on = 17301620;
          stat_notify_call_mute = 17301622;
          stat_notify_chat = 17301623;
          stat_notify_error = 17301624;
          stat_notify_missed_call = 17301631;
          stat_notify_more = 17301625;
          stat_notify_sdcard = 17301626;
          stat_notify_sdcard_prepare = 17301675;
          stat_notify_sdcard_usb = 17301627;
          stat_notify_sync = 17301628;
          stat_notify_sync_noanim = 17301629;
          stat_notify_voicemail = 17301630;
          stat_sys_data_bluetooth = 17301632;
          stat_sys_download = 17301633;
          stat_sys_download_done = 17301634;
          stat_sys_headset = 17301635;
          stat_sys_phone_call = 17301636 deprecated;
          stat_sys_phone_call_forward = 17301637 deprecated;
          stat_sys_phone_call_on_hold = 17301638 deprecated;
          stat_sys_speakerphone = 17301639;
          stat_sys_upload = 17301640;
          stat_sys_upload_done = 17301641;
          stat_sys_vp_phone_call = 17301671 deprecated;
          stat_sys_vp_phone_call_on_hold = 17301672 deprecated;
          stat_sys_warning = 17301642;
          status_bar_item_app_background = 17301643;
          status_bar_item_background = 17301644;
          sym_action_call = 17301645;
          sym_action_chat = 17301646;
          sym_action_email = 17301647;
          sym_call_incoming = 17301648;
          sym_call_missed = 17301649;
          sym_call_outgoing = 17301650;
          sym_contact_card = 17301652;
          sym_def_app_icon = 17301651;
          title_bar = 17301653;
          title_bar_tall = 17301670;
          toast_frame = 17301654;
          zoom_plate = 17301655;
      public
        constructor create(); overload;
      end;

      Innerdimen = class sealed external 'android' name 'dimen' (JLObject)
      public
        const
          app_icon_size = 17104896;
          dialog_min_width_major = 17104899;
          dialog_min_width_minor = 17104900;
          notification_large_icon_height = 17104902;
          notification_large_icon_width = 17104901;
          thumbnail_height = 17104897;
          thumbnail_width = 17104898;
      public
        constructor create(); overload;
      end;

      Innercolor = class sealed external 'android' name 'color' (JLObject)
      public
        const
          background_dark = 17170446;
          background_light = 17170447;
          black = 17170444;
          darker_gray = 17170432;
          holo_blue_bright = 17170459;
          holo_blue_dark = 17170451;
          holo_blue_light = 17170450;
          holo_green_dark = 17170453;
          holo_green_light = 17170452;
          holo_orange_dark = 17170457;
          holo_orange_light = 17170456;
          holo_purple = 17170458;
          holo_red_dark = 17170455;
          holo_red_light = 17170454;
          primary_text_dark = 17170433;
          primary_text_dark_nodisable = 17170434;
          primary_text_light = 17170435;
          primary_text_light_nodisable = 17170436;
          secondary_text_dark = 17170437;
          secondary_text_dark_nodisable = 17170438;
          secondary_text_light = 17170439;
          secondary_text_light_nodisable = 17170440;
          tab_indicator_text = 17170441;
          tertiary_text_dark = 17170448;
          tertiary_text_light = 17170449;
          transparent = 17170445;
          white = 17170443;
          widget_edittext_dark = 17170442;
      public
        constructor create(); overload;
      end;

      Innerbool = class sealed external 'android' name 'bool' (JLObject)
      public
        constructor create(); overload;
      end;

      Innerattr = class sealed external 'android' name 'attr' (JLObject)
      public
        const
          absListViewStyle = 16842858;
          accessibilityEventTypes = 16843648;
          accessibilityFeedbackType = 16843650;
          accessibilityFlags = 16843652;
          accessibilityLiveRegion = 16843758;
          accountPreferences = 16843423;
          accountType = 16843407;
          action = 16842797;
          actionBarDivider = 16843675;
          actionBarItemBackground = 16843676;
          actionBarPopupTheme = 16843917;
          actionBarSize = 16843499;
          actionBarSplitStyle = 16843656;
          actionBarStyle = 16843470;
          actionBarTabBarStyle = 16843508;
          actionBarTabStyle = 16843507;
          actionBarTabTextStyle = 16843509;
          actionBarTheme = 16843825;
          actionBarWidgetTheme = 16843671;
          actionButtonStyle = 16843480;
          actionDropDownStyle = 16843479;
          actionLayout = 16843515;
          actionMenuTextAppearance = 16843616;
          actionMenuTextColor = 16843617;
          actionModeBackground = 16843483;
          actionModeCloseButtonStyle = 16843511;
          actionModeCloseDrawable = 16843484;
          actionModeCopyDrawable = 16843538;
          actionModeCutDrawable = 16843537;
          actionModeFindDrawable = 16843898;
          actionModePasteDrawable = 16843539;
          actionModeSelectAllDrawable = 16843646;
          actionModeShareDrawable = 16843897;
          actionModeSplitBackground = 16843677;
          actionModeStyle = 16843668;
          actionModeWebSearchDrawable = 16843899;
          actionOverflowButtonStyle = 16843510;
          actionOverflowMenuStyle = 16843844;
          actionProviderClass = 16843657;
          actionViewClass = 16843516;
          activatedBackgroundIndicator = 16843517;
          activityCloseEnterAnimation = 16842938;
          activityCloseExitAnimation = 16842939;
          activityOpenEnterAnimation = 16842936;
          activityOpenExitAnimation = 16842937;
          addPrintersActivity = 16843750;
          addStatesFromChildren = 16842992;
          adjustViewBounds = 16843038;
          advancedPrintOptionsActivity = 16843761;
          alertDialogIcon = 16843605;
          alertDialogStyle = 16842845;
          alertDialogTheme = 16843529;
          alignmentMode = 16843642;
          allContactsName = 16843468;
          allowBackup = 16843392;
          allowClearUserData = 16842757;
          allowEmbedded = 16843765;
          allowParallelSyncs = 16843570;
          allowSingleTap = 16843353;
          allowTaskReparenting = 16843268;
          alpha = 16843551;
          alphabeticShortcut = 16843235;
          alwaysDrawnWithCache = 16842991;
          alwaysRetainTaskState = 16843267;
          amPmBackgroundColor = 16843941;
          amPmTextColor = 16843940;
          ambientShadowAlpha = 16843966;
          angle = 16843168;
          animateFirstView = 16843477;
          animateLayoutChanges = 16843506;
          animateOnClick = 16843356;
          animation = 16843213;
          animationCache = 16842989;
          animationDuration = 16843026;
          animationOrder = 16843214;
          animationResolution = 16843546 deprecated;
          antialias = 16843034;
          anyDensity = 16843372;
          apduServiceBanner = 16843757;
          apiKey = 16843281;
          author = 16843444;
          authorities = 16842776;
          autoAdvanceViewId = 16843535;
          autoCompleteTextViewStyle = 16842859;
          autoLink = 16842928;
          autoMirrored = 16843754;
          autoRemoveFromRecents = 16843847;
          autoStart = 16843445;
          autoText = 16843114 deprecated;
          autoUrlDetect = 16843404;
          background = 16842964;
          backgroundDimAmount = 16842802;
          backgroundDimEnabled = 16843295;
          backgroundSplit = 16843659;
          backgroundStacked = 16843658;
          backgroundTint = 16843883;
          backgroundTintMode = 16843884;
          backupAgent = 16843391;
          banner = 16843762;
          baseline = 16843548;
          baselineAlignBottom = 16843042;
          baselineAligned = 16843046;
          baselineAlignedChildIndex = 16843047;
          borderlessButtonStyle = 16843563;
          bottom = 16843184;
          bottomBright = 16842957;
          bottomDark = 16842953;
          bottomLeftRadius = 16843179;
          bottomMedium = 16842958;
          bottomOffset = 16843351;
          bottomRightRadius = 16843180;
          breadCrumbShortTitle = 16843524;
          breadCrumbTitle = 16843523;
          bufferType = 16843086;
          button = 16843015;
          buttonBarButtonStyle = 16843567;
          buttonBarNegativeButtonStyle = 16843915;
          buttonBarNeutralButtonStyle = 16843914;
          buttonBarPositiveButtonStyle = 16843913;
          buttonBarStyle = 16843566;
          buttonStyle = 16842824;
          buttonStyleInset = 16842826;
          buttonStyleSmall = 16842825;
          buttonStyleToggle = 16842827;
          buttonTint = 16843887;
          buttonTintMode = 16843888;
          cacheColorHint = 16843009;
          calendarTextColor = 16843931;
          calendarViewShown = 16843596;
          calendarViewStyle = 16843613;
          canRequestEnhancedWebAccessibility = 16843736;
          canRequestFilterKeyEvents = 16843737;
          canRequestTouchExplorationMode = 16843735;
          canRetrieveWindowContent = 16843653;
          candidatesTextStyleSpans = 16843312;
          capitalize = 16843113 deprecated;
          category = 16843752;
          centerBright = 16842956;
          centerColor = 16843275;
          centerDark = 16842952;
          centerMedium = 16842959;
          centerX = 16843170;
          centerY = 16843171;
          checkBoxPreferenceStyle = 16842895;
          checkMark = 16843016;
          checkMarkTint = 16843943;
          checkMarkTintMode = 16843944;
          checkable = 16843237;
          checkableBehavior = 16843232;
          checkboxStyle = 16842860;
          checked = 16843014;
          checkedButton = 16843080;
          checkedTextViewStyle = 16843720;
          childDivider = 16843025;
          childIndicator = 16843020;
          childIndicatorEnd = 16843732;
          childIndicatorLeft = 16843023;
          childIndicatorRight = 16843024;
          childIndicatorStart = 16843731;
          choiceMode = 16843051;
          clearTaskOnLaunch = 16842773;
          clickable = 16842981;
          clipChildren = 16842986;
          clipOrientation = 16843274;
          clipToPadding = 16842987;
          closeIcon = 16843905;
          codes = 16843330;
          collapseColumns = 16843083;
          color = 16843173;
          colorAccent = 16843829;
          colorActivatedHighlight = 16843664;
          colorBackground = 16842801;
          colorBackgroundCacheHint = 16843435;
          colorButtonNormal = 16843819;
          colorControlActivated = 16843818;
          colorControlHighlight = 16843820;
          colorControlNormal = 16843817;
          colorEdgeEffect = 16843982;
          colorFocusedHighlight = 16843663;
          colorForeground = 16842800;
          colorForegroundInverse = 16843270;
          colorLongPressedHighlight = 16843662;
          colorMultiSelectHighlight = 16843665;
          colorPressedHighlight = 16843661;
          colorPrimary = 16843827;
          colorPrimaryDark = 16843828;
          columnCount = 16843639;
          columnDelay = 16843215;
          columnOrderPreserved = 16843640;
          columnWidth = 16843031;
          commitIcon = 16843909;
          compatibleWidthLimitDp = 16843621;
          completionHint = 16843122;
          completionHintView = 16843123;
          completionThreshold = 16843124;
          configChanges = 16842783;
          configure = 16843357;
          constantSize = 16843158;
          content = 16843355;
          contentAgeHint = 16843961;
          contentAuthority = 16843408;
          contentDescription = 16843379;
          contentInsetEnd = 16843860;
          contentInsetLeft = 16843861;
          contentInsetRight = 16843862;
          contentInsetStart = 16843859;
          controlX1 = 16843772;
          controlX2 = 16843774;
          controlY1 = 16843773;
          controlY2 = 16843775;
          country = 16843962;
          cropToPadding = 16843043;
          cursorVisible = 16843090;
          customNavigationLayout = 16843474;
          customTokens = 16843579;
          cycles = 16843220;
          dashGap = 16843175;
          dashWidth = 16843174;
          data = 16842798;
          datePickerDialogTheme = 16843948;
          datePickerMode = 16843955;
          datePickerStyle = 16843612;
          dateTextAppearance = 16843593;
          dayOfWeekBackground = 16843924;
          dayOfWeekTextAppearance = 16843925;
          debuggable = 16842767;
          defaultValue = 16843245;
          delay = 16843212;
          dependency = 16843244;
          descendantFocusability = 16842993;
          description = 16842784;
          detachWallpaper = 16843430;
          detailColumn = 16843427;
          detailSocialSummary = 16843428;
          detailsElementBackground = 16843598;
          dial = 16843010;
          dialogIcon = 16843252;
          dialogLayout = 16843255;
          dialogMessage = 16843251;
          dialogPreferenceStyle = 16842897;
          dialogTheme = 16843528;
          dialogTitle = 16843250;
          digits = 16843110;
          direction = 16843217;
          directionDescriptions = 16843681;
          directionPriority = 16843218;
          disableDependentsState = 16843249;
          disabledAlpha = 16842803;
          displayOptions = 16843472;
          dither = 16843036;
          divider = 16843049;
          dividerHeight = 16843050;
          dividerHorizontal = 16843564;
          dividerPadding = 16843562;
          dividerVertical = 16843530;
          documentLaunchMode = 16843845;
          drawSelectorOnTop = 16843004;
          drawable = 16843161;
          drawableBottom = 16843118;
          drawableEnd = 16843667;
          drawableLeft = 16843119;
          drawablePadding = 16843121;
          drawableRight = 16843120;
          drawableStart = 16843666;
          drawableTop = 16843117;
          drawingCacheQuality = 16842984;
          dropDownAnchor = 16843363;
          dropDownHeight = 16843395;
          dropDownHintAppearance = 16842888;
          dropDownHorizontalOffset = 16843436;
          dropDownItemStyle = 16842886;
          dropDownListViewStyle = 16842861;
          dropDownSelector = 16843125;
          dropDownSpinnerStyle = 16843478;
          dropDownVerticalOffset = 16843437;
          dropDownWidth = 16843362;
          duplicateParentState = 16842985;
          duration = 16843160;
          editTextBackground = 16843602;
          editTextColor = 16843601;
          editTextPreferenceStyle = 16842898;
          editTextStyle = 16842862;
          editable = 16843115 deprecated;
          editorExtras = 16843300;
          elegantTextHeight = 16843869;
          elevation = 16843840;
          ellipsize = 16842923;
          ems = 16843096;
          enabled = 16842766;
          endColor = 16843166;
          endYear = 16843133 deprecated;
          enterFadeDuration = 16843532;
          entries = 16842930;
          entryValues = 16843256;
          eventsInterceptionEnabled = 16843389;
          excludeClass = 16843842;
          excludeFromRecents = 16842775;
          excludeId = 16843841;
          excludeName = 16843854;
          exitFadeDuration = 16843533;
          expandableListPreferredChildIndicatorLeft = 16842834;
          expandableListPreferredChildIndicatorRight = 16842835;
          expandableListPreferredChildPaddingLeft = 16842831;
          expandableListPreferredItemIndicatorLeft = 16842832;
          expandableListPreferredItemIndicatorRight = 16842833;
          expandableListPreferredItemPaddingLeft = 16842830;
          expandableListViewStyle = 16842863;
          expandableListViewWhiteStyle = 16843446;
          exported = 16842768;
          extraTension = 16843371;
          factor = 16843219;
          fadeDuration = 16843384;
          fadeEnabled = 16843390;
          fadeOffset = 16843383;
          fadeScrollbars = 16843434;
          fadingEdge = 16842975;
          fadingEdgeLength = 16842976;
          fadingMode = 16843745;
          fastScrollAlwaysVisible = 16843573;
          fastScrollEnabled = 16843302;
          fastScrollOverlayPosition = 16843578;
          fastScrollPreviewBackgroundLeft = 16843575;
          fastScrollPreviewBackgroundRight = 16843576;
          fastScrollStyle = 16843767;
          fastScrollTextColor = 16843609;
          fastScrollThumbDrawable = 16843574;
          fastScrollTrackDrawable = 16843577;
          fillAfter = 16843197;
          fillAlpha = 16843980;
          fillBefore = 16843196;
          fillColor = 16843780;
          fillEnabled = 16843343;
          fillViewport = 16843130;
          filter = 16843035;
          filterTouchesWhenObscured = 16843460;
          finishOnCloseSystemDialogs = 16843431;
          finishOnTaskLaunch = 16842772;
          firstDayOfWeek = 16843581;
          fitsSystemWindows = 16842973;
          flipInterval = 16843129;
          focusable = 16842970;
          focusableInTouchMode = 16842971;
          focusedMonthDateColor = 16843587;
          fontFamily = 16843692;
          fontFeatureSettings = 16843959;
          footerDividersEnabled = 16843311;
          foreground = 16843017;
          foregroundGravity = 16843264;
          foregroundTint = 16843885;
          foregroundTintMode = 16843886;
          format = 16843013;
          format12Hour = 16843722;
          format24Hour = 16843723;
          fragment = 16843491;
          fragmentAllowEnterTransitionOverlap = 16843976;
          fragmentAllowReturnTransitionOverlap = 16843977;
          fragmentCloseEnterAnimation = 16843495;
          fragmentCloseExitAnimation = 16843496;
          fragmentEnterTransition = 16843971;
          fragmentExitTransition = 16843970;
          fragmentFadeEnterAnimation = 16843497;
          fragmentFadeExitAnimation = 16843498;
          fragmentOpenEnterAnimation = 16843493;
          fragmentOpenExitAnimation = 16843494;
          fragmentReenterTransition = 16843975;
          fragmentReturnTransition = 16843973;
          fragmentSharedElementEnterTransition = 16843972;
          fragmentSharedElementReturnTransition = 16843974;
          freezesText = 16843116;
          fromAlpha = 16843210;
          fromDegrees = 16843187;
          fromId = 16843850;
          fromScene = 16843741;
          fromXDelta = 16843206;
          fromXScale = 16843202;
          fromYDelta = 16843208;
          fromYScale = 16843204;
          fullBackupOnly = 16843891;
          fullBright = 16842954;
          fullDark = 16842950;
          functionalTest = 16842787;
          galleryItemBackground = 16842828;
          galleryStyle = 16842864;
          gestureColor = 16843381;
          gestureStrokeAngleThreshold = 16843388;
          gestureStrokeLengthThreshold = 16843386;
          gestureStrokeSquarenessThreshold = 16843387;
          gestureStrokeType = 16843385;
          gestureStrokeWidth = 16843380;
          glEsVersion = 16843393;
          goIcon = 16843906;
          gradientRadius = 16843172;
          grantUriPermissions = 16842779;
          gravity = 16842927;
          gridViewStyle = 16842865;
          groupIndicator = 16843019;
          hand_hour = 16843011;
          hand_minute = 16843012;
          handle = 16843354;
          handleProfiling = 16842786;
          hapticFeedbackEnabled = 16843358;
          hardwareAccelerated = 16843475;
          hasCode = 16842764;
          headerAmPmTextAppearance = 16843936;
          headerBackground = 16843055;
          headerDayOfMonthTextAppearance = 16843927;
          headerDividersEnabled = 16843310;
          headerMonthTextAppearance = 16843926;
          headerTimeTextAppearance = 16843935;
          headerYearTextAppearance = 16843928;
          height = 16843093;
          hideOnContentScroll = 16843843;
          hint = 16843088;
          homeAsUpIndicator = 16843531;
          homeLayout = 16843549;
          horizontalDivider = 16843053;
          horizontalGap = 16843327;
          horizontalScrollViewStyle = 16843603;
          horizontalSpacing = 16843028;
          host = 16842792;
          icon = 16842754;
          iconPreview = 16843337;
          iconifiedByDefault = 16843514;
          id = 16842960;
          ignoreGravity = 16843263;
          imageButtonStyle = 16842866;
          imageWellStyle = 16842867;
          imeActionId = 16843366;
          imeActionLabel = 16843365;
          imeExtractEnterAnimation = 16843368;
          imeExtractExitAnimation = 16843369;
          imeFullscreenBackground = 16843308;
          imeOptions = 16843364;
          imeSubtypeExtraValue = 16843502;
          imeSubtypeLocale = 16843500;
          imeSubtypeMode = 16843501;
          immersive = 16843456;
          importantForAccessibility = 16843690;
          inAnimation = 16843127;
          includeFontPadding = 16843103;
          includeInGlobalSearch = 16843374;
          indeterminate = 16843065;
          indeterminateBehavior = 16843070;
          indeterminateDrawable = 16843067;
          indeterminateDuration = 16843069;
          indeterminateOnly = 16843066;
          indeterminateProgressStyle = 16843544;
          indeterminateTint = 16843881;
          indeterminateTintMode = 16843882;
          indicatorEnd = 16843730;
          indicatorLeft = 16843021;
          indicatorRight = 16843022;
          indicatorStart = 16843729;
          inflatedId = 16842995;
          initOrder = 16842778;
          initialKeyguardLayout = 16843714;
          initialLayout = 16843345;
          innerRadius = 16843359;
          innerRadiusRatio = 16843163;
          inputMethod = 16843112 deprecated;
          inputType = 16843296;
          inset = 16843957;
          insetBottom = 16843194;
          insetLeft = 16843191;
          insetRight = 16843192;
          insetTop = 16843193;
          installLocation = 16843447;
          interpolator = 16843073;
          isAlwaysSyncable = 16843571;
          isAsciiCapable = 16843753;
          isAuxiliary = 16843647;
          isDefault = 16843297;
          isGame = 16843764;
          isIndicator = 16843079;
          isModifier = 16843334;
          isRepeatable = 16843336;
          isScrollContainer = 16843342;
          isSticky = 16843335;
          isolatedProcess = 16843689;
          itemBackground = 16843056;
          itemIconDisabledAlpha = 16843057;
          itemPadding = 16843565;
          itemTextAppearance = 16843052;
          keepScreenOn = 16843286;
          key = 16843240;
          keyBackground = 16843315;
          keyEdgeFlags = 16843333;
          keyHeight = 16843326;
          keyIcon = 16843340;
          keyLabel = 16843339;
          keyOutputText = 16843338;
          keyPreviewHeight = 16843321;
          keyPreviewLayout = 16843319;
          keyPreviewOffset = 16843320;
          keySet = 16843739;
          keyTextColor = 16843318;
          keyTextSize = 16843316;
          keyWidth = 16843325;
          keyboardLayout = 16843691;
          keyboardMode = 16843341;
          keycode = 16842949;
          killAfterRestore = 16843420;
          &label = 16842753;
          labelFor = 16843718;
          labelTextSize = 16843317;
          largeHeap = 16843610;
          largeScreens = 16843398;
          largestWidthLimitDp = 16843622;
          launchMode = 16842781;
          launchTaskBehindSourceAnimation = 16843922;
          launchTaskBehindTargetAnimation = 16843921;
          layerType = 16843604;
          layout = 16842994;
          layoutAnimation = 16842988;
          layoutDirection = 16843698;
          layoutMode = 16843738;
          layout_above = 16843140;
          layout_alignBaseline = 16843142;
          layout_alignBottom = 16843146;
          layout_alignEnd = 16843706;
          layout_alignLeft = 16843143;
          layout_alignParentBottom = 16843150;
          layout_alignParentEnd = 16843708;
          layout_alignParentLeft = 16843147;
          layout_alignParentRight = 16843149;
          layout_alignParentStart = 16843707;
          layout_alignParentTop = 16843148;
          layout_alignRight = 16843145;
          layout_alignStart = 16843705;
          layout_alignTop = 16843144;
          layout_alignWithParentIfMissing = 16843154;
          layout_below = 16843141;
          layout_centerHorizontal = 16843152;
          layout_centerInParent = 16843151;
          layout_centerVertical = 16843153;
          layout_column = 16843084;
          layout_columnSpan = 16843645;
          layout_columnWeight = 16843865;
          layout_gravity = 16842931;
          layout_height = 16842997;
          layout_margin = 16842998;
          layout_marginBottom = 16843002;
          layout_marginEnd = 16843702;
          layout_marginLeft = 16842999;
          layout_marginRight = 16843001;
          layout_marginStart = 16843701;
          layout_marginTop = 16843000;
          layout_row = 16843643;
          layout_rowSpan = 16843644;
          layout_rowWeight = 16843864;
          layout_scale = 16843155;
          layout_span = 16843085;
          layout_toEndOf = 16843704;
          layout_toLeftOf = 16843138;
          layout_toRightOf = 16843139;
          layout_toStartOf = 16843703;
          layout_weight = 16843137;
          layout_width = 16842996;
          layout_x = 16843135;
          layout_y = 16843136;
          left = 16843181;
          letterSpacing = 16843958;
          lineSpacingExtra = 16843287;
          lineSpacingMultiplier = 16843288;
          lines = 16843092;
          linksClickable = 16842929;
          listChoiceBackgroundIndicator = 16843504;
          listChoiceIndicatorMultiple = 16843290;
          listChoiceIndicatorSingle = 16843289;
          listDivider = 16843284;
          listDividerAlertDialog = 16843525;
          listPopupWindowStyle = 16843519;
          listPreferredItemHeight = 16842829;
          listPreferredItemHeightLarge = 16843654;
          listPreferredItemHeightSmall = 16843655;
          listPreferredItemPaddingEnd = 16843710;
          listPreferredItemPaddingLeft = 16843683;
          listPreferredItemPaddingRight = 16843684;
          listPreferredItemPaddingStart = 16843709;
          listSelector = 16843003;
          listSeparatorTextViewStyle = 16843272;
          listViewStyle = 16842868;
          listViewWhiteStyle = 16842869;
          logo = 16843454;
          longClickable = 16842982;
          loopViews = 16843527;
          manageSpaceActivity = 16842756;
          mapViewStyle = 16842890;
          marqueeRepeatLimit = 16843293;
          matchOrder = 16843855;
          max = 16843062;
          maxDate = 16843584;
          maxEms = 16843095;
          maxHeight = 16843040;
          maxItemsPerRow = 16843060;
          maxLength = 16843104;
          maxLevel = 16843186;
          maxLines = 16843091;
          maxRecents = 16843846;
          maxRows = 16843059;
          maxSdkVersion = 16843377;
          maxWidth = 16843039;
          maximumAngle = 16843903;
          measureAllChildren = 16843018;
          measureWithLargestChild = 16843476;
          mediaRouteButtonStyle = 16843693;
          mediaRouteTypes = 16843694;
          menuCategory = 16843230;
          mimeType = 16842790;
          minDate = 16843583;
          minEms = 16843098;
          minHeight = 16843072;
          minLevel = 16843185;
          minLines = 16843094;
          minResizeHeight = 16843670;
          minResizeWidth = 16843669;
          minSdkVersion = 16843276;
          minWidth = 16843071;
          minimumHorizontalAngle = 16843901;
          minimumVerticalAngle = 16843902;
          mipMap = 16843725;
          mirrorForRtl = 16843726;
          mode = 16843134;
          moreIcon = 16843061;
          multiArch = 16843918;
          multiprocess = 16842771;
          name = 16842755;
          navigationBarColor = 16843858;
          navigationContentDescription = 16843969;
          navigationIcon = 16843968;
          navigationMode = 16843471;
          negativeButtonText = 16843254;
          nestedScrollingEnabled = 16843830;
          nextFocusDown = 16842980;
          nextFocusForward = 16843580;
          nextFocusLeft = 16842977;
          nextFocusRight = 16842978;
          nextFocusUp = 16842979;
          noHistory = 16843309;
          normalScreens = 16843397;
          notificationTimeout = 16843651;
          numColumns = 16843032;
          numStars = 16843076;
          numbersBackgroundColor = 16843938;
          numbersSelectorColor = 16843939;
          numbersTextColor = 16843937;
          numeric = 16843109 deprecated;
          numericShortcut = 16843236;
          onClick = 16843375;
          oneshot = 16843159;
          opacity = 16843550;
          order = 16843242;
          orderInCategory = 16843231;
          ordering = 16843490;
          orderingFromXml = 16843239;
          orientation = 16842948;
          outAnimation = 16843128;
          outlineProvider = 16843960;
          overScrollFooter = 16843459;
          overScrollHeader = 16843458;
          overScrollMode = 16843457;
          overlapAnchor = 16843874;
          overridesImplicitlyEnabledSubtype = 16843682;
          packageNames = 16843649;
          padding = 16842965;
          paddingBottom = 16842969;
          paddingEnd = 16843700;
          paddingLeft = 16842966;
          paddingMode = 16843863;
          paddingRight = 16842968;
          paddingStart = 16843699;
          paddingTop = 16842967;
          panelBackground = 16842846;
          panelColorBackground = 16842849;
          panelColorForeground = 16842848;
          panelFullBackground = 16842847;
          panelTextAppearance = 16842850;
          parentActivityName = 16843687;
          password = 16843100 deprecated;
          path = 16842794;
          pathData = 16843781;
          pathPattern = 16842796;
          pathPrefix = 16842795;
          patternPathData = 16843978;
          permission = 16842758;
          permissionFlags = 16843719;
          permissionGroup = 16842762;
          permissionGroupFlags = 16843717;
          persistableMode = 16843821;
          persistent = 16842765;
          persistentDrawingCache = 16842990;
          phoneNumber = 16843111 deprecated;
          pivotX = 16843189;
          pivotY = 16843190;
          popupAnimationStyle = 16843465;
          popupBackground = 16843126;
          popupCharacters = 16843332;
          popupElevation = 16843916;
          popupKeyboard = 16843331;
          popupLayout = 16843323;
          popupMenuStyle = 16843520;
          popupTheme = 16843945;
          popupWindowStyle = 16842870;
          port = 16842793;
          positiveButtonText = 16843253;
          preferenceCategoryStyle = 16842892;
          preferenceInformationStyle = 16842893;
          preferenceLayoutChild = 16842900;
          preferenceScreenStyle = 16842891;
          preferenceStyle = 16842894;
          presentationTheme = 16843712;
          previewImage = 16843482;
          priority = 16842780;
          privateImeOptions = 16843299;
          process = 16842769;
          progress = 16843063;
          progressBackgroundTint = 16843877;
          progressBackgroundTintMode = 16843878;
          progressBarPadding = 16843545;
          progressBarStyle = 16842871;
          progressBarStyleHorizontal = 16842872;
          progressBarStyleInverse = 16843399;
          progressBarStyleLarge = 16842874;
          progressBarStyleLargeInverse = 16843401;
          progressBarStyleSmall = 16842873;
          progressBarStyleSmallInverse = 16843400;
          progressBarStyleSmallTitle = 16843279;
          progressDrawable = 16843068;
          progressTint = 16843875;
          progressTintMode = 16843876;
          prompt = 16843131;
          propertyName = 16843489;
          propertyXName = 16843892;
          propertyYName = 16843893;
          protectionLevel = 16842761;
          publicKey = 16843686;
          queryActionMsg = 16843227;
          queryAfterZeroResults = 16843394;
          queryBackground = 16843911;
          queryHint = 16843608;
          quickContactBadgeStyleSmallWindowLarge = 16843443;
          quickContactBadgeStyleSmallWindowMedium = 16843442;
          quickContactBadgeStyleSmallWindowSmall = 16843441;
          quickContactBadgeStyleWindowLarge = 16843440;
          quickContactBadgeStyleWindowMedium = 16843439;
          quickContactBadgeStyleWindowSmall = 16843438;
          radioButtonStyle = 16842878;
          radius = 16843176;
          rating = 16843077;
          ratingBarStyle = 16842876;
          ratingBarStyleIndicator = 16843280;
          ratingBarStyleSmall = 16842877;
          readPermission = 16842759;
          recognitionService = 16843932;
          relinquishTaskIdentity = 16843894;
          reparent = 16843964;
          reparentWithOverlay = 16843965;
          repeatCount = 16843199;
          repeatMode = 16843200;
          reqFiveWayNav = 16843314;
          reqHardKeyboard = 16843305;
          reqKeyboardType = 16843304;
          reqNavigation = 16843306;
          reqTouchScreen = 16843303;
          requireDeviceUnlock = 16843756;
          required = 16843406;
          requiredAccountType = 16843734;
          requiredForAllUsers = 16843728;
          requiresFadingEdge = 16843685;
          requiresSmallestWidthDp = 16843620;
          resizeMode = 16843619;
          resizeable = 16843405;
          resource = 16842789;
          restoreAnyVersion = 16843450;
          restoreNeedsApplication = 16843421 deprecated;
          restrictedAccountType = 16843733;
          restrictionType = 16843923;
          resumeWhilePausing = 16843954;
          reversible = 16843851;
          right = 16843183;
          ringtonePreferenceStyle = 16842899;
          ringtoneType = 16843257;
          rotation = 16843558;
          rotationX = 16843559;
          rotationY = 16843560;
          rowCount = 16843637;
          rowDelay = 16843216;
          rowEdgeFlags = 16843329;
          rowHeight = 16843058;
          rowOrderPreserved = 16843638;
          saveEnabled = 16842983;
          scaleGravity = 16843262;
          scaleHeight = 16843261;
          scaleType = 16843037;
          scaleWidth = 16843260;
          scaleX = 16843556;
          scaleY = 16843557;
          scheme = 16842791;
          screenDensity = 16843467;
          screenOrientation = 16842782;
          screenSize = 16843466;
          scrollHorizontally = 16843099;
          scrollViewStyle = 16842880;
          scrollX = 16842962;
          scrollY = 16842963;
          scrollbarAlwaysDrawHorizontalTrack = 16842856;
          scrollbarAlwaysDrawVerticalTrack = 16842857;
          scrollbarDefaultDelayBeforeFade = 16843433;
          scrollbarFadeDuration = 16843432;
          scrollbarSize = 16842851;
          scrollbarStyle = 16842879;
          scrollbarThumbHorizontal = 16842852;
          scrollbarThumbVertical = 16842853;
          scrollbarTrackHorizontal = 16842854;
          scrollbarTrackVertical = 16842855;
          scrollbars = 16842974;
          scrollingCache = 16843006;
          searchButtonText = 16843269 deprecated;
          searchIcon = 16843907;
          searchMode = 16843221;
          searchSettingsDescription = 16843402;
          searchSuggestAuthority = 16843222;
          searchSuggestIntentAction = 16843225;
          searchSuggestIntentData = 16843226;
          searchSuggestPath = 16843223;
          searchSuggestSelection = 16843224;
          searchSuggestThreshold = 16843373;
          searchViewStyle = 16843904;
          secondaryProgress = 16843064;
          secondaryProgressTint = 16843879;
          secondaryProgressTintMode = 16843880;
          seekBarStyle = 16842875;
          segmentedButtonStyle = 16843568;
          selectAllOnFocus = 16843102;
          selectable = 16843238;
          selectableItemBackground = 16843534;
          selectableItemBackgroundBorderless = 16843868;
          selectedDateVerticalBar = 16843591;
          selectedWeekBackgroundColor = 16843586;
          sessionService = 16843837;
          settingsActivity = 16843301;
          setupActivity = 16843766;
          shadowColor = 16843105;
          shadowDx = 16843106;
          shadowDy = 16843107;
          shadowRadius = 16843108;
          shape = 16843162;
          shareInterpolator = 16843195;
          sharedUserId = 16842763;
          sharedUserLabel = 16843361;
          shouldDisableView = 16843246;
          showAsAction = 16843481;
          showDefault = 16843258;
          showDividers = 16843561;
          showOnLockScreen = 16843721;
          showSilent = 16843259;
          showText = 16843949;
          showWeekNumber = 16843582;
          shownWeekCount = 16843585;
          shrinkColumns = 16843082;
          singleLine = 16843101 deprecated;
          singleUser = 16843711;
          slideEdge = 16843824;
          smallIcon = 16843422;
          smallScreens = 16843396;
          smoothScrollbar = 16843313;
          soundEffectsEnabled = 16843285;
          spacing = 16843027;
          spinnerDropDownItemStyle = 16842887;
          spinnerItemStyle = 16842889;
          spinnerMode = 16843505;
          spinnerStyle = 16842881;
          spinnersShown = 16843595;
          splitMotionEvents = 16843503;
          splitTrack = 16843852;
          spotShadowAlpha = 16843967;
          src = 16843033;
          ssp = 16843747;
          sspPattern = 16843749;
          sspPrefix = 16843748;
          stackFromBottom = 16843005;
          stackViewStyle = 16843838;
          starStyle = 16842882;
          startColor = 16843165;
          startDelay = 16843746;
          startOffset = 16843198;
          startYear = 16843132 deprecated;
          stateListAnimator = 16843848;
          stateNotNeeded = 16842774;
          state_above_anchor = 16842922;
          state_accelerated = 16843547;
          state_activated = 16843518;
          state_active = 16842914;
          state_checkable = 16842911;
          state_checked = 16842912;
          state_drag_can_accept = 16843624;
          state_drag_hovered = 16843625;
          state_empty = 16842921;
          state_enabled = 16842910;
          state_expanded = 16842920;
          state_first = 16842916;
          state_focused = 16842908;
          state_hovered = 16843623;
          state_last = 16842918;
          state_long_pressable = 16843324;
          state_middle = 16842917;
          state_multiline = 16843597;
          state_pressed = 16842919;
          state_selected = 16842913;
          state_single = 16842915;
          state_window_focused = 16842909;
          staticWallpaperPreview = 16843569;
          statusBarColor = 16843857;
          stepSize = 16843078;
          stopWithTask = 16843626;
          streamType = 16843273;
          stretchColumns = 16843081;
          stretchMode = 16843030;
          strokeAlpha = 16843979;
          strokeColor = 16843782;
          strokeLineCap = 16843787;
          strokeLineJoin = 16843788;
          strokeMiterLimit = 16843789;
          strokeWidth = 16843783;
          submitBackground = 16843912;
          subtitle = 16843473;
          subtitleTextAppearance = 16843823;
          subtitleTextStyle = 16843513;
          subtypeExtraValue = 16843674;
          subtypeId = 16843713;
          subtypeLocale = 16843673;
          suggestActionMsg = 16843228;
          suggestActionMsgColumn = 16843229;
          suggestionRowLayout = 16843910;
          summary = 16843241;
          summaryColumn = 16843426;
          summaryOff = 16843248;
          summaryOn = 16843247;
          supportsRtl = 16843695;
          supportsSwitchingToNextInputMethod = 16843755;
          supportsUploading = 16843419;
          switchMinWidth = 16843632;
          switchPadding = 16843633;
          switchPreferenceStyle = 16843629;
          switchStyle = 16843839;
          switchTextAppearance = 16843630;
          switchTextOff = 16843628;
          switchTextOn = 16843627;
          syncable = 16842777;
          tabStripEnabled = 16843453;
          tabStripLeft = 16843451;
          tabStripRight = 16843452;
          tabWidgetStyle = 16842883;
          tag = 16842961;
          targetActivity = 16843266;
          targetClass = 16842799;
          targetDescriptions = 16843680;
          targetId = 16843740;
          targetName = 16843853;
          targetPackage = 16842785;
          targetSdkVersion = 16843376;
          taskAffinity = 16842770;
          taskCloseEnterAnimation = 16842942;
          taskCloseExitAnimation = 16842943;
          taskOpenEnterAnimation = 16842940;
          taskOpenExitAnimation = 16842941;
          taskToBackEnterAnimation = 16842946;
          taskToBackExitAnimation = 16842947;
          taskToFrontEnterAnimation = 16842944;
          taskToFrontExitAnimation = 16842945;
          tension = 16843370;
          testOnly = 16843378;
          text = 16843087;
          textAlignment = 16843697;
          textAllCaps = 16843660;
          textAppearance = 16842804;
          textAppearanceButton = 16843271;
          textAppearanceInverse = 16842805;
          textAppearanceLarge = 16842816;
          textAppearanceLargeInverse = 16842819;
          textAppearanceLargePopupMenu = 16843521;
          textAppearanceListItem = 16843678;
          textAppearanceListItemSecondary = 16843826;
          textAppearanceListItemSmall = 16843679;
          textAppearanceMedium = 16842817;
          textAppearanceMediumInverse = 16842820;
          textAppearanceSearchResultSubtitle = 16843424;
          textAppearanceSearchResultTitle = 16843425;
          textAppearanceSmall = 16842818;
          textAppearanceSmallInverse = 16842821;
          textAppearanceSmallPopupMenu = 16843522;
          textCheckMark = 16842822;
          textCheckMarkInverse = 16842823;
          textColor = 16842904;
          textColorAlertDialogListItem = 16843526;
          textColorHighlight = 16842905;
          textColorHighlightInverse = 16843599;
          textColorHint = 16842906;
          textColorHintInverse = 16842815;
          textColorLink = 16842907;
          textColorLinkInverse = 16843600;
          textColorPrimary = 16842806;
          textColorPrimaryDisableOnly = 16842807;
          textColorPrimaryInverse = 16842809;
          textColorPrimaryInverseDisableOnly = 16843403;
          textColorPrimaryInverseNoDisable = 16842813;
          textColorPrimaryNoDisable = 16842811;
          textColorSecondary = 16842808;
          textColorSecondaryInverse = 16842810;
          textColorSecondaryInverseNoDisable = 16842814;
          textColorSecondaryNoDisable = 16842812;
          textColorTertiary = 16843282;
          textColorTertiaryInverse = 16843283;
          textCursorDrawable = 16843618;
          textDirection = 16843696;
          textEditNoPasteWindowLayout = 16843541;
          textEditPasteWindowLayout = 16843540;
          textEditSideNoPasteWindowLayout = 16843615;
          textEditSidePasteWindowLayout = 16843614;
          textEditSuggestionItemLayout = 16843636;
          textFilterEnabled = 16843007;
          textIsSelectable = 16843542;
          textOff = 16843045;
          textOn = 16843044;
          textScaleX = 16843089;
          textSelectHandle = 16843463;
          textSelectHandleLeft = 16843461;
          textSelectHandleRight = 16843462;
          textSelectHandleWindowStyle = 16843464;
          textSize = 16842901;
          textStyle = 16842903;
          textSuggestionsWindowStyle = 16843635;
          textViewStyle = 16842884;
          theme = 16842752;
          thickness = 16843360;
          thicknessRatio = 16843164;
          thumb = 16843074;
          thumbOffset = 16843075;
          thumbTextPadding = 16843634;
          thumbTint = 16843889;
          thumbTintMode = 16843890;
          thumbnail = 16843429;
          tileMode = 16843265;
          tileModeX = 16843895;
          tileModeY = 16843896;
          timePickerDialogTheme = 16843934;
          timePickerMode = 16843956;
          timePickerStyle = 16843933;
          timeZone = 16843724;
          tint = 16843041;
          tintMode = 16843771;
          title = 16843233;
          titleCondensed = 16843234;
          titleTextAppearance = 16843822;
          titleTextStyle = 16843512;
          toAlpha = 16843211;
          toDegrees = 16843188;
          toId = 16843849;
          toScene = 16843742;
          toXDelta = 16843207;
          toXScale = 16843203;
          toYDelta = 16843209;
          toYScale = 16843205;
          toolbarStyle = 16843946;
          top = 16843182;
          topBright = 16842955;
          topDark = 16842951;
          topLeftRadius = 16843177;
          topOffset = 16843352;
          topRightRadius = 16843178;
          touchscreenBlocksFocus = 16843919;
          track = 16843631;
          transcriptMode = 16843008;
          transformPivotX = 16843552;
          transformPivotY = 16843553;
          transition = 16843743;
          transitionGroup = 16843777;
          transitionName = 16843776;
          transitionOrdering = 16843744;
          transitionVisibilityMode = 16843900;
          translateX = 16843866;
          translateY = 16843867;
          translationX = 16843554;
          translationY = 16843555;
          translationZ = 16843770;
          trimPathEnd = 16843785;
          trimPathOffset = 16843786;
          trimPathStart = 16843784;
          &type = 16843169;
          typeface = 16842902;
          uiOptions = 16843672;
          uncertainGestureColor = 16843382;
          unfocusedMonthDateColor = 16843588;
          unselectedAlpha = 16843278;
          updatePeriodMillis = 16843344;
          useDefaultMargins = 16843641;
          useIntrinsicSizeAsMinimum = 16843536;
          useLevel = 16843167;
          userVisible = 16843409;
          value = 16842788;
          valueFrom = 16843486;
          valueTo = 16843487;
          valueType = 16843488;
          variablePadding = 16843157;
          vendor = 16843751;
          versionCode = 16843291;
          versionName = 16843292;
          verticalCorrection = 16843322;
          verticalDivider = 16843054;
          verticalGap = 16843328;
          verticalScrollbarPosition = 16843572;
          verticalSpacing = 16843029;
          viewportHeight = 16843779;
          viewportWidth = 16843778;
          visibility = 16842972;
          visible = 16843156;
          vmSafeMode = 16843448;
          voiceIcon = 16843908;
          voiceLanguage = 16843349;
          voiceLanguageModel = 16843347;
          voiceMaxResults = 16843350;
          voicePromptText = 16843348;
          voiceSearchMode = 16843346;
          wallpaperCloseEnterAnimation = 16843413;
          wallpaperCloseExitAnimation = 16843414;
          wallpaperIntraCloseEnterAnimation = 16843417;
          wallpaperIntraCloseExitAnimation = 16843418;
          wallpaperIntraOpenEnterAnimation = 16843415;
          wallpaperIntraOpenExitAnimation = 16843416;
          wallpaperOpenEnterAnimation = 16843411;
          wallpaperOpenExitAnimation = 16843412;
          webTextViewStyle = 16843449;
          webViewStyle = 16842885;
          weekDayTextAppearance = 16843592;
          weekNumberColor = 16843589;
          weekSeparatorLineColor = 16843590;
          weightSum = 16843048;
          widgetCategory = 16843716;
          widgetLayout = 16843243;
          width = 16843097;
          windowActionBar = 16843469;
          windowActionBarOverlay = 16843492;
          windowActionModeOverlay = 16843485;
          windowActivityTransitions = 16843981;
          windowAllowEnterTransitionOverlap = 16843836;
          windowAllowReturnTransitionOverlap = 16843835;
          windowAnimationStyle = 16842926;
          windowBackground = 16842836;
          windowClipToOutline = 16843947;
          windowCloseOnTouchOutside = 16843611;
          windowContentOverlay = 16842841;
          windowContentTransitionManager = 16843769;
          windowContentTransitions = 16843768;
          windowDisablePreview = 16843298;
          windowDrawsSystemBarBackgrounds = 16843856;
          windowElevation = 16843920;
          windowEnableSplitTouch = 16843543;
          windowEnterAnimation = 16842932;
          windowEnterTransition = 16843831;
          windowExitAnimation = 16842933;
          windowExitTransition = 16843832;
          windowFrame = 16842837;
          windowFullscreen = 16843277;
          windowHideAnimation = 16842935;
          windowIsFloating = 16842839;
          windowIsTranslucent = 16842840;
          windowMinWidthMajor = 16843606;
          windowMinWidthMinor = 16843607;
          windowNoDisplay = 16843294;
          windowNoTitle = 16842838;
          windowOverscan = 16843727;
          windowReenterTransition = 16843951;
          windowReturnTransition = 16843950;
          windowSharedElementEnterTransition = 16843833;
          windowSharedElementExitTransition = 16843834;
          windowSharedElementReenterTransition = 16843953;
          windowSharedElementReturnTransition = 16843952;
          windowSharedElementsUseOverlay = 16843963;
          windowShowAnimation = 16842934;
          windowShowWallpaper = 16843410;
          windowSoftInputMode = 16843307;
          windowSwipeToDismiss = 16843763;
          windowTitleBackgroundStyle = 16842844;
          windowTitleSize = 16842842;
          windowTitleStyle = 16842843;
          windowTransitionBackgroundFadeDuration = 16843873;
          windowTranslucentNavigation = 16843760;
          windowTranslucentStatus = 16843759;
          writePermission = 16842760;
          x = 16842924;
          xlargeScreens = 16843455;
          y = 16842925;
          yearListItemTextAppearance = 16843929;
          yearListSelectorColor = 16843930;
          yesNoPreferenceStyle = 16842896;
          zAdjustment = 16843201;
      public
        constructor create(); overload;
      end;

      Innerarray = class sealed external 'android' name 'array' (JLObject)
      public
        const
          emailAddressTypes = 17235968;
          imProtocols = 17235969;
          organizationTypes = 17235970;
          phoneTypes = 17235971;
          postalAddressTypes = 17235972;
      public
        constructor create(); overload;
      end;

      Inneranimator = class sealed external 'android' name 'animator' (JLObject)
      public
        const
          fade_in = 17498112;
          fade_out = 17498113;
      public
        constructor create(); overload;
      end;

      Inneranim = class sealed external 'android' name 'anim' (JLObject)
      public
        const
          accelerate_decelerate_interpolator = 17432580;
          accelerate_interpolator = 17432581;
          anticipate_interpolator = 17432583;
          anticipate_overshoot_interpolator = 17432585;
          bounce_interpolator = 17432586;
          cycle_interpolator = 17432588;
          decelerate_interpolator = 17432582;
          fade_in = 17432576;
          fade_out = 17432577;
          linear_interpolator = 17432587;
          overshoot_interpolator = 17432584;
          slide_in_left = 17432578;
          slide_out_right = 17432579;
      public
        constructor create(); overload;
      end;

  public
    constructor create(); overload;
  end;

  AAAbstractAccountAuthenticator = class abstract external 'android.accounts' name 'AbstractAccountAuthenticator' (JLObject)
  public
    constructor create(para1: ACContext); overload;
    function getIBinder(): AOIBinder; overload; virtual; final;
    function editProperties(para1: AAAccountAuthenticatorResponse; para2: JLString): AOBundle; overload; virtual; abstract;
    function addAccount(para1: AAAccountAuthenticatorResponse; para2: JLString; para3: JLString; para4: Arr1JLString; para5: AOBundle): AOBundle; overload; virtual; abstract;  // throws android.accounts.NetworkErrorException
    function addAccount(para1: AAAccountAuthenticatorResponse; para2: JLString; para3: JLString; var para4: array of JLString; para5: AOBundle): AOBundle; overload; virtual; abstract;  // throws android.accounts.NetworkErrorException
    function confirmCredentials(para1: AAAccountAuthenticatorResponse; para2: AAAccount; para3: AOBundle): AOBundle; overload; virtual; abstract;  // throws android.accounts.NetworkErrorException
    function getAuthToken(para1: AAAccountAuthenticatorResponse; para2: AAAccount; para3: JLString; para4: AOBundle): AOBundle; overload; virtual; abstract;  // throws android.accounts.NetworkErrorException
    function getAuthTokenLabel(para1: JLString): JLString; overload; virtual; abstract;
    function updateCredentials(para1: AAAccountAuthenticatorResponse; para2: AAAccount; para3: JLString; para4: AOBundle): AOBundle; overload; virtual; abstract;  // throws android.accounts.NetworkErrorException
    function hasFeatures(para1: AAAccountAuthenticatorResponse; para2: AAAccount; para3: Arr1JLString): AOBundle; overload; virtual; abstract;  // throws android.accounts.NetworkErrorException
    function hasFeatures(para1: AAAccountAuthenticatorResponse; para2: AAAccount; var para3: array of JLString): AOBundle; overload; virtual; abstract;  // throws android.accounts.NetworkErrorException
    function getAccountRemovalAllowed(para1: AAAccountAuthenticatorResponse; para2: AAAccount): AOBundle; overload; virtual;  // throws android.accounts.NetworkErrorException
    function getAccountCredentialsForCloning(para1: AAAccountAuthenticatorResponse; para2: AAAccount): AOBundle; overload; virtual;  // throws android.accounts.NetworkErrorException
    function addAccountFromCredentials(para1: AAAccountAuthenticatorResponse; para2: AAAccount; para3: AOBundle): AOBundle; overload; virtual;  // throws android.accounts.NetworkErrorException
  end;

  AAAccountManager = class external 'android.accounts' name 'AccountManager' (JLObject)
  public
    const
      ACTION_AUTHENTICATOR_INTENT = 'android.accounts.AccountAuthenticator';
      AUTHENTICATOR_ATTRIBUTES_NAME = 'account-authenticator';
      AUTHENTICATOR_META_DATA_NAME = 'android.accounts.AccountAuthenticator';
      ERROR_CODE_BAD_ARGUMENTS = 7;
      ERROR_CODE_BAD_AUTHENTICATION = 9;
      ERROR_CODE_BAD_REQUEST = 8;
      ERROR_CODE_CANCELED = 4;
      ERROR_CODE_INVALID_RESPONSE = 5;
      ERROR_CODE_NETWORK_ERROR = 3;
      ERROR_CODE_REMOTE_EXCEPTION = 1;
      ERROR_CODE_UNSUPPORTED_OPERATION = 6;
      KEY_ACCOUNTS = 'accounts';
      KEY_ACCOUNT_AUTHENTICATOR_RESPONSE = 'accountAuthenticatorResponse';
      KEY_ACCOUNT_MANAGER_RESPONSE = 'accountManagerResponse';
      KEY_ACCOUNT_NAME = 'authAccount';
      KEY_ACCOUNT_TYPE = 'accountType';
      KEY_ANDROID_PACKAGE_NAME = 'androidPackageName';
      KEY_AUTHENTICATOR_TYPES = 'authenticator_types';
      KEY_AUTHTOKEN = 'authtoken';
      KEY_AUTH_FAILED_MESSAGE = 'authFailedMessage';
      KEY_AUTH_TOKEN_LABEL = 'authTokenLabelKey';
      KEY_BOOLEAN_RESULT = 'booleanResult';
      KEY_CALLER_PID = 'callerPid';
      KEY_CALLER_UID = 'callerUid';
      KEY_ERROR_CODE = 'errorCode';
      KEY_ERROR_MESSAGE = 'errorMessage';
      KEY_INTENT = 'intent';
      KEY_PASSWORD = 'password';
      KEY_USERDATA = 'userdata';
      LOGIN_ACCOUNTS_CHANGED_ACTION = 'android.accounts.LOGIN_ACCOUNTS_CHANGED';
  public
    class function get(para1: ACContext): AAAccountManager; static; overload;
    function getPassword(para1: AAAccount): JLString; overload; virtual;
    function getUserData(para1: AAAccount; para2: JLString): JLString; overload; virtual;
    function getAuthenticatorTypes(): Arr1AAAuthenticatorDescription; overload; virtual;
    function getAccounts(): Arr1AAAccount; overload; virtual;
    function getAccountsByTypeForPackage(para1: JLString; para2: JLString): Arr1AAAccount; overload; virtual;
    function getAccountsByType(para1: JLString): Arr1AAAccount; overload; virtual;
    function hasFeatures(para1: AAAccount; para2: Arr1JLString; para3: AAAccountManagerCallback; para4: AOHandler): AAAccountManagerFuture; overload; virtual;
    function hasFeatures(para1: AAAccount; var para2: array of JLString; para3: AAAccountManagerCallback; para4: AOHandler): AAAccountManagerFuture; overload; virtual;
    function getAccountsByTypeAndFeatures(para1: JLString; para2: Arr1JLString; para3: AAAccountManagerCallback; para4: AOHandler): AAAccountManagerFuture; overload; virtual;
    function getAccountsByTypeAndFeatures(para1: JLString; var para2: array of JLString; para3: AAAccountManagerCallback; para4: AOHandler): AAAccountManagerFuture; overload; virtual;
    function addAccountExplicitly(para1: AAAccount; para2: JLString; para3: AOBundle): jboolean; overload; virtual;
    function renameAccount(para1: AAAccount; para2: JLString; para3: AAAccountManagerCallback; para4: AOHandler): AAAccountManagerFuture; overload; virtual;
    function getPreviousName(para1: AAAccount): JLString; overload; virtual;
    function removeAccount(para1: AAAccount; para2: AAAccountManagerCallback; para3: AOHandler): AAAccountManagerFuture; overload; virtual;
    procedure invalidateAuthToken(para1: JLString; para2: JLString); overload; virtual;
    function peekAuthToken(para1: AAAccount; para2: JLString): JLString; overload; virtual;
    procedure setPassword(para1: AAAccount; para2: JLString); overload; virtual;
    procedure clearPassword(para1: AAAccount); overload; virtual;
    procedure setUserData(para1: AAAccount; para2: JLString; para3: JLString); overload; virtual;
    procedure setAuthToken(para1: AAAccount; para2: JLString; para3: JLString); overload; virtual;
    function blockingGetAuthToken(para1: AAAccount; para2: JLString; para3: jboolean): JLString; overload; virtual;  // throws android.accounts.OperationCanceledException, java.io.IOException, android.accounts.AuthenticatorException
    function getAuthToken(para1: AAAccount; para2: JLString; para3: AOBundle; para4: AAActivity; para5: AAAccountManagerCallback; para6: AOHandler): AAAccountManagerFuture; overload; virtual;
    function getAuthToken(para1: AAAccount; para2: JLString; para3: jboolean; para4: AAAccountManagerCallback; para5: AOHandler): AAAccountManagerFuture; overload; virtual;
    function getAuthToken(para1: AAAccount; para2: JLString; para3: AOBundle; para4: jboolean; para5: AAAccountManagerCallback; para6: AOHandler): AAAccountManagerFuture; overload; virtual;
    function addAccount(para1: JLString; para2: JLString; para3: Arr1JLString; para4: AOBundle; para5: AAActivity; para6: AAAccountManagerCallback; para7: AOHandler): AAAccountManagerFuture; overload; virtual;
    function addAccount(para1: JLString; para2: JLString; var para3: array of JLString; para4: AOBundle; para5: AAActivity; para6: AAAccountManagerCallback; para7: AOHandler): AAAccountManagerFuture; overload; virtual;
    function confirmCredentials(para1: AAAccount; para2: AOBundle; para3: AAActivity; para4: AAAccountManagerCallback; para5: AOHandler): AAAccountManagerFuture; overload; virtual;
    function updateCredentials(para1: AAAccount; para2: JLString; para3: AOBundle; para4: AAActivity; para5: AAAccountManagerCallback; para6: AOHandler): AAAccountManagerFuture; overload; virtual;
    function editProperties(para1: JLString; para2: AAActivity; para3: AAAccountManagerCallback; para4: AOHandler): AAAccountManagerFuture; overload; virtual;
    function getAuthTokenByFeatures(para1: JLString; para2: JLString; para3: Arr1JLString; para4: AAActivity; para5: AOBundle; para6: AOBundle; para7: AAAccountManagerCallback; para8: AOHandler): AAAccountManagerFuture; overload; virtual;
    function getAuthTokenByFeatures(para1: JLString; para2: JLString; var para3: array of JLString; para4: AAActivity; para5: AOBundle; para6: AOBundle; para7: AAAccountManagerCallback; para8: AOHandler): AAAccountManagerFuture; overload; virtual;
    class function newChooseAccountIntent(para1: AAAccount; para2: JUArrayList; para3: Arr1JLString; para4: jboolean; para5: JLString; para6: JLString; para7: Arr1JLString; para8: AOBundle): ACIntent; static; overload;
    class function newChooseAccountIntent(para1: AAAccount; para2: JUArrayList; var para3: array of JLString; para4: jboolean; para5: JLString; para6: JLString; var para7: array of JLString; para8: AOBundle): ACIntent; static; overload;
    procedure addOnAccountsUpdatedListener(para1: AAOnAccountsUpdateListener; para2: AOHandler; para3: jboolean); overload; virtual;
    procedure removeOnAccountsUpdatedListener(para1: AAOnAccountsUpdateListener); overload; virtual;
  end;

  AAAccountManagerCallback = interface external 'android.accounts' name 'AccountManagerCallback' 
    procedure run(para1: AAAccountManagerFuture); overload;
  end;

  AAAccountManagerFuture = interface external 'android.accounts' name 'AccountManagerFuture' 
    function cancel(para1: jboolean): jboolean; overload;
    function isCancelled(): jboolean; overload;
    function isDone(): jboolean; overload;
    function getResult(): JLObject; overload;  // throws android.accounts.OperationCanceledException, java.io.IOException, android.accounts.AuthenticatorException
    function getResult(para1: jlong; para2: JUCTimeUnit): JLObject; overload;  // throws android.accounts.OperationCanceledException, java.io.IOException, android.accounts.AuthenticatorException
  end;

  AAOnAccountsUpdateListener = interface external 'android.accounts' name 'OnAccountsUpdateListener' 
    procedure onAccountsUpdated(para1: Arr1AAAccount); overload;
    procedure onAccountsUpdated(var para1: array of AAAccount); overload;
  end;

  AAAnimatorInflater = class external 'android.animation' name 'AnimatorInflater' (JLObject)
  public
    constructor create(); overload;
    class function loadAnimator(para1: ACContext; para2: jint): AAAnimator; static; overload;  // throws android.content.res.Resources$NotFoundException
    class function loadStateListAnimator(para1: ACContext; para2: jint): AAStateListAnimator; static; overload;  // throws android.content.res.Resources$NotFoundException
  end;

  AALayoutTransition = class external 'android.animation' name 'LayoutTransition' (JLObject)
  public
    type
      InnerTransitionListener = interface;
      Arr1InnerTransitionListener = array of InnerTransitionListener;
      Arr2InnerTransitionListener = array of Arr1InnerTransitionListener;
      Arr3InnerTransitionListener = array of Arr2InnerTransitionListener;
      InnerTransitionListener = interface external 'android.animation' name 'TransitionListener' 
        procedure startTransition(para1: AALayoutTransition; para2: AVViewGroup; para3: AVView; para4: jint); overload;
        procedure endTransition(para1: AALayoutTransition; para2: AVViewGroup; para3: AVView; para4: jint); overload;
      end;

  public
    const
      APPEARING = 2;
      CHANGE_APPEARING = 0;
      CHANGE_DISAPPEARING = 1;
      CHANGING = 4;
      DISAPPEARING = 3;
  public
    constructor create(); overload;
    procedure setDuration(para1: jlong); overload; virtual;
    procedure enableTransitionType(para1: jint); overload; virtual;
    procedure disableTransitionType(para1: jint); overload; virtual;
    function isTransitionTypeEnabled(para1: jint): jboolean; overload; virtual;
    procedure setStartDelay(para1: jint; para2: jlong); overload; virtual;
    function getStartDelay(para1: jint): jlong; overload; virtual;
    procedure setDuration(para1: jint; para2: jlong); overload; virtual;
    function getDuration(para1: jint): jlong; overload; virtual;
    procedure setStagger(para1: jint; para2: jlong); overload; virtual;
    function getStagger(para1: jint): jlong; overload; virtual;
    procedure setInterpolator(para1: jint; para2: AATimeInterpolator); overload; virtual;
    function getInterpolator(para1: jint): AATimeInterpolator; overload; virtual;
    procedure setAnimator(para1: jint; para2: AAAnimator); overload; virtual;
    function getAnimator(para1: jint): AAAnimator; overload; virtual;
    procedure setAnimateParentHierarchy(para1: jboolean); overload; virtual;
    function isChangingLayout(): jboolean; overload; virtual;
    function isRunning(): jboolean; overload; virtual;
    procedure addChild(para1: AVViewGroup; para2: AVView); overload; virtual;
    procedure showChild(para1: AVViewGroup; para2: AVView); overload; virtual;
    procedure showChild(para1: AVViewGroup; para2: AVView; para3: jint); overload; virtual;
    procedure removeChild(para1: AVViewGroup; para2: AVView); overload; virtual;
    procedure hideChild(para1: AVViewGroup; para2: AVView); overload; virtual;
    procedure hideChild(para1: AVViewGroup; para2: AVView; para3: jint); overload; virtual;
    procedure addTransitionListener(para1: AALayoutTransition.InnerTransitionListener); overload; virtual;
    procedure removeTransitionListener(para1: AALayoutTransition.InnerTransitionListener); overload; virtual;
    function getTransitionListeners(): JUList; overload; virtual;
  end;

  AATimeInterpolator = interface external 'android.animation' name 'TimeInterpolator' 
    function getInterpolation(para1: jfloat): jfloat; overload;
  end;

  AATypeEvaluator = interface external 'android.animation' name 'TypeEvaluator' 
    function evaluate(para1: jfloat; para2: JLObject; para3: JLObject): JLObject; overload;
  end;

  AOParcelable = interface external 'android.os' name 'Parcelable' 
    type
      InnerCreator = interface;
      Arr1InnerCreator = array of InnerCreator;
      Arr2InnerCreator = array of Arr1InnerCreator;
      Arr3InnerCreator = array of Arr2InnerCreator;
      InnerClassLoaderCreator = interface;
      Arr1InnerClassLoaderCreator = array of InnerClassLoaderCreator;
      Arr2InnerClassLoaderCreator = array of Arr1InnerClassLoaderCreator;
      Arr3InnerClassLoaderCreator = array of Arr2InnerClassLoaderCreator;
      InnerCreator = interface external 'android.os' name 'Creator' 
        function createFromParcel(para1: AOParcel): JLObject; overload;
        function newArray(para1: jint): Arr1JLObject; overload;
      end;

      InnerClassLoaderCreator = interface external 'android.os' name 'ClassLoaderCreator' (AOParcelable.InnerCreator)
        function createFromParcel(para1: AOParcel; para2: JLClassLoader): JLObject; overload;
      end;

    const
      CONTENTS_FILE_DESCRIPTOR = 1;
      PARCELABLE_WRITE_RETURN_VALUE = 1;
    function describeContents(): jint; overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload;
  end;

  AAAlarmManager = class external 'android.app' name 'AlarmManager' (JLObject)
  public
    type
      InnerAlarmClockInfo = class;
      Arr1InnerAlarmClockInfo = array of InnerAlarmClockInfo;
      Arr2InnerAlarmClockInfo = array of Arr1InnerAlarmClockInfo;
      Arr3InnerAlarmClockInfo = array of Arr2InnerAlarmClockInfo;
      InnerAlarmClockInfo = class sealed external 'android.app' name 'AlarmClockInfo' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        constructor create(para1: jlong; para2: AAPendingIntent); overload;
        function getTriggerTime(): jlong; overload; virtual;
        function getShowIntent(): AAPendingIntent; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
      end;

  public
    const
      ACTION_NEXT_ALARM_CLOCK_CHANGED = 'android.app.action.NEXT_ALARM_CLOCK_CHANGED';
      ELAPSED_REALTIME = 3;
      ELAPSED_REALTIME_WAKEUP = 2;
      INTERVAL_DAY = jlong(86400000);
      INTERVAL_FIFTEEN_MINUTES = jlong(900000);
      INTERVAL_HALF_DAY = jlong(43200000);
      INTERVAL_HALF_HOUR = jlong(1800000);
      INTERVAL_HOUR = jlong(3600000);
      RTC = 1;
      RTC_WAKEUP = 0;
  public
    procedure &set(para1: jint; para2: jlong; para3: AAPendingIntent); overload; virtual;
    procedure setRepeating(para1: jint; para2: jlong; para3: jlong; para4: AAPendingIntent); overload; virtual;
    procedure setWindow(para1: jint; para2: jlong; para3: jlong; para4: AAPendingIntent); overload; virtual;
    procedure setExact(para1: jint; para2: jlong; para3: AAPendingIntent); overload; virtual;
    procedure setAlarmClock(para1: AAAlarmManager.InnerAlarmClockInfo; para2: AAPendingIntent); overload; virtual;
    procedure setInexactRepeating(para1: jint; para2: jlong; para3: jlong; para4: AAPendingIntent); overload; virtual;
    procedure cancel(para1: AAPendingIntent); overload; virtual;
    procedure setTime(para1: jlong); overload; virtual;
    procedure setTimeZone(para1: JLString); overload; virtual;
    function getNextAlarmClock(): AAAlarmManager.InnerAlarmClockInfo; overload; virtual;
  end;

  AADownloadManager = class external 'android.app' name 'DownloadManager' (JLObject)
  public
    type
      InnerQuery = class;
      Arr1InnerQuery = array of InnerQuery;
      Arr2InnerQuery = array of Arr1InnerQuery;
      Arr3InnerQuery = array of Arr2InnerQuery;
      InnerRequest = class;
      Arr1InnerRequest = array of InnerRequest;
      Arr2InnerRequest = array of Arr1InnerRequest;
      Arr3InnerRequest = array of Arr2InnerRequest;
      InnerQuery = class external 'android.app' name 'Query' (JLObject)
      public
        constructor create(); overload;
        function setFilterById(para1: Arr1jlong): AADownloadManager.InnerQuery; overload; virtual;
        function setFilterById(const para1: array of jlong): AADownloadManager.InnerQuery; overload; virtual;
        function setFilterByStatus(para1: jint): AADownloadManager.InnerQuery; overload; virtual;
      end;

      InnerRequest = class external 'android.app' name 'Request' (JLObject)
      public
        const
          NETWORK_MOBILE = 1;
          NETWORK_WIFI = 2;
          VISIBILITY_HIDDEN = 2;
          VISIBILITY_VISIBLE = 0;
          VISIBILITY_VISIBLE_NOTIFY_COMPLETED = 1;
          VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION = 3;
      public
        constructor create(para1: ANUri); overload;
        function setDestinationUri(para1: ANUri): AADownloadManager.InnerRequest; overload; virtual;
        function setDestinationInExternalFilesDir(para1: ACContext; para2: JLString; para3: JLString): AADownloadManager.InnerRequest; overload; virtual;
        function setDestinationInExternalPublicDir(para1: JLString; para2: JLString): AADownloadManager.InnerRequest; overload; virtual;
        procedure allowScanningByMediaScanner(); overload; virtual;
        function addRequestHeader(para1: JLString; para2: JLString): AADownloadManager.InnerRequest; overload; virtual;
        function setTitle(para1: JLCharSequence): AADownloadManager.InnerRequest; overload; virtual;
        function setDescription(para1: JLCharSequence): AADownloadManager.InnerRequest; overload; virtual;
        function setMimeType(para1: JLString): AADownloadManager.InnerRequest; overload; virtual;
        function setShowRunningNotification(para1: jboolean): AADownloadManager.InnerRequest; overload; virtual;
        function setNotificationVisibility(para1: jint): AADownloadManager.InnerRequest; overload; virtual;
        function setAllowedNetworkTypes(para1: jint): AADownloadManager.InnerRequest; overload; virtual;
        function setAllowedOverRoaming(para1: jboolean): AADownloadManager.InnerRequest; overload; virtual;
        function setAllowedOverMetered(para1: jboolean): AADownloadManager.InnerRequest; overload; virtual;
        function setVisibleInDownloadsUi(para1: jboolean): AADownloadManager.InnerRequest; overload; virtual;
      end;

  public
    const
      ACTION_DOWNLOAD_COMPLETE = 'android.intent.action.DOWNLOAD_COMPLETE';
      ACTION_NOTIFICATION_CLICKED = 'android.intent.action.DOWNLOAD_NOTIFICATION_CLICKED';
      ACTION_VIEW_DOWNLOADS = 'android.intent.action.VIEW_DOWNLOADS';
      COLUMN_BYTES_DOWNLOADED_SO_FAR = 'bytes_so_far';
      COLUMN_DESCRIPTION = 'description';
      COLUMN_ID = '_id';
      COLUMN_LAST_MODIFIED_TIMESTAMP = 'last_modified_timestamp';
      COLUMN_LOCAL_FILENAME = 'local_filename';
      COLUMN_LOCAL_URI = 'local_uri';
      COLUMN_MEDIAPROVIDER_URI = 'mediaprovider_uri';
      COLUMN_MEDIA_TYPE = 'media_type';
      COLUMN_REASON = 'reason';
      COLUMN_STATUS = 'status';
      COLUMN_TITLE = 'title';
      COLUMN_TOTAL_SIZE_BYTES = 'total_size';
      COLUMN_URI = 'uri';
      ERROR_CANNOT_RESUME = 1008;
      ERROR_DEVICE_NOT_FOUND = 1007;
      ERROR_FILE_ALREADY_EXISTS = 1009;
      ERROR_FILE_ERROR = 1001;
      ERROR_HTTP_DATA_ERROR = 1004;
      ERROR_INSUFFICIENT_SPACE = 1006;
      ERROR_TOO_MANY_REDIRECTS = 1005;
      ERROR_UNHANDLED_HTTP_CODE = 1002;
      ERROR_UNKNOWN = 1000;
      EXTRA_DOWNLOAD_ID = 'extra_download_id';
      EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS = 'extra_click_download_ids';
      INTENT_EXTRAS_SORT_BY_SIZE = 'android.app.DownloadManager.extra_sortBySize';
      PAUSED_QUEUED_FOR_WIFI = 3;
      PAUSED_UNKNOWN = 4;
      PAUSED_WAITING_FOR_NETWORK = 2;
      PAUSED_WAITING_TO_RETRY = 1;
      STATUS_FAILED = 16;
      STATUS_PAUSED = 4;
      STATUS_PENDING = 1;
      STATUS_RUNNING = 2;
      STATUS_SUCCESSFUL = 8;
  public
    function enqueue(para1: AADownloadManager.InnerRequest): jlong; overload; virtual;
    function remove(para1: Arr1jlong): jint; overload; virtual;
    function remove(const para1: array of jlong): jint; overload; virtual;
    function query(para1: AADownloadManager.InnerQuery): ADCursor; overload; virtual;
    function openDownloadedFile(para1: jlong): AOParcelFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
    function getUriForDownloadedFile(para1: jlong): ANUri; overload; virtual;
    function getMimeTypeForDownloadedFile(para1: jlong): JLString; overload; virtual;
    class function getMaxBytesOverMobile(para1: ACContext): JLLong; static; overload;
    class function getRecommendedMaxBytesOverMobile(para1: ACContext): JLLong; static; overload;
    function addCompletedDownload(para1: JLString; para2: JLString; para3: jboolean; para4: JLString; para5: JLString; para6: jlong; para7: jboolean): jlong; overload; virtual;
  end;

  AAFragmentTransaction = class abstract external 'android.app' name 'FragmentTransaction' (JLObject)
  public
    const
      TRANSIT_ENTER_MASK = 4096;
      TRANSIT_EXIT_MASK = 8192;
      TRANSIT_FRAGMENT_CLOSE = 8194;
      TRANSIT_FRAGMENT_FADE = 4099;
      TRANSIT_FRAGMENT_OPEN = 4097;
      TRANSIT_NONE = 0;
      TRANSIT_UNSET = -1;
  public
    constructor create(); overload;
    function add(para1: AAFragment; para2: JLString): AAFragmentTransaction; overload; virtual; abstract;
    function add(para1: jint; para2: AAFragment): AAFragmentTransaction; overload; virtual; abstract;
    function add(para1: jint; para2: AAFragment; para3: JLString): AAFragmentTransaction; overload; virtual; abstract;
    function replace(para1: jint; para2: AAFragment): AAFragmentTransaction; overload; virtual; abstract;
    function replace(para1: jint; para2: AAFragment; para3: JLString): AAFragmentTransaction; overload; virtual; abstract;
    function remove(para1: AAFragment): AAFragmentTransaction; overload; virtual; abstract;
    function hide(para1: AAFragment): AAFragmentTransaction; overload; virtual; abstract;
    function show(para1: AAFragment): AAFragmentTransaction; overload; virtual; abstract;
    function detach(para1: AAFragment): AAFragmentTransaction; overload; virtual; abstract;
    function attach(para1: AAFragment): AAFragmentTransaction; overload; virtual; abstract;
    function isEmpty(): jboolean; overload; virtual; abstract;
    function setCustomAnimations(para1: jint; para2: jint): AAFragmentTransaction; overload; virtual; abstract;
    function setCustomAnimations(para1: jint; para2: jint; para3: jint; para4: jint): AAFragmentTransaction; overload; virtual; abstract;
    function setTransition(para1: jint): AAFragmentTransaction; overload; virtual; abstract;
    function addSharedElement(para1: AVView; para2: JLString): AAFragmentTransaction; overload; virtual; abstract;
    function setTransitionStyle(para1: jint): AAFragmentTransaction; overload; virtual; abstract;
    function addToBackStack(para1: JLString): AAFragmentTransaction; overload; virtual; abstract;
    function isAddToBackStackAllowed(): jboolean; overload; virtual; abstract;
    function disallowAddToBackStack(): AAFragmentTransaction; overload; virtual; abstract;
    function setBreadCrumbTitle(para1: jint): AAFragmentTransaction; overload; virtual; abstract;
    function setBreadCrumbTitle(para1: JLCharSequence): AAFragmentTransaction; overload; virtual; abstract;
    function setBreadCrumbShortTitle(para1: jint): AAFragmentTransaction; overload; virtual; abstract;
    function setBreadCrumbShortTitle(para1: JLCharSequence): AAFragmentTransaction; overload; virtual; abstract;
    function commit(): jint; overload; virtual; abstract;
    function commitAllowingStateLoss(): jint; overload; virtual; abstract;
  end;

  AAInstrumentation = class external 'android.app' name 'Instrumentation' (JLObject)
  public
    type
      InnerActivityResult = class;
      Arr1InnerActivityResult = array of InnerActivityResult;
      Arr2InnerActivityResult = array of Arr1InnerActivityResult;
      Arr3InnerActivityResult = array of Arr2InnerActivityResult;
      InnerActivityMonitor = class;
      Arr1InnerActivityMonitor = array of InnerActivityMonitor;
      Arr2InnerActivityMonitor = array of Arr1InnerActivityMonitor;
      Arr3InnerActivityMonitor = array of Arr2InnerActivityMonitor;
      InnerActivityResult = class sealed external 'android.app' name 'ActivityResult' (JLObject)
      public
        constructor create(para1: jint; para2: ACIntent); overload;
        function getResultCode(): jint; overload; virtual;
        function getResultData(): ACIntent; overload; virtual;
      end;

      InnerActivityMonitor = class external 'android.app' name 'ActivityMonitor' (JLObject)
      public
        constructor create(para1: ACIntentFilter; para2: AAInstrumentation.InnerActivityResult; para3: jboolean); overload;
        constructor create(para1: JLString; para2: AAInstrumentation.InnerActivityResult; para3: jboolean); overload;
        function getFilter(): ACIntentFilter; overload; virtual; final;
        function getResult(): AAInstrumentation.InnerActivityResult; overload; virtual; final;
        function isBlocking(): jboolean; overload; virtual; final;
        function getHits(): jint; overload; virtual; final;
        function getLastActivity(): AAActivity; overload; virtual; final;
        function waitForActivity(): AAActivity; overload; virtual; final;
        function waitForActivityWithTimeout(para1: jlong): AAActivity; overload; virtual; final;
      end;

  public
    const
      REPORT_KEY_IDENTIFIER = 'id';
      REPORT_KEY_STREAMRESULT = 'stream';
  public
    constructor create(); overload;
    procedure onCreate(para1: AOBundle); overload; virtual;
    procedure start(); overload; virtual;
    procedure onStart(); overload; virtual;
    function onException(para1: JLObject; para2: JLThrowable): jboolean; overload; virtual;
    procedure sendStatus(para1: jint; para2: AOBundle); overload; virtual;
    procedure finish(para1: jint; para2: AOBundle); overload; virtual;
    procedure setAutomaticPerformanceSnapshots(); overload; virtual;
    procedure startPerformanceSnapshot(); overload; virtual;
    procedure endPerformanceSnapshot(); overload; virtual;
    procedure onDestroy(); overload; virtual;
    function getContext(): ACContext; overload; virtual;
    function getComponentName(): ACComponentName; overload; virtual;
    function getTargetContext(): ACContext; overload; virtual;
    function isProfiling(): jboolean; overload; virtual;
    procedure startProfiling(); overload; virtual;
    procedure stopProfiling(); overload; virtual;
    procedure setInTouchMode(para1: jboolean); overload; virtual;
    procedure waitForIdle(para1: JLRunnable); overload; virtual;
    procedure waitForIdleSync(); overload; virtual;
    procedure runOnMainSync(para1: JLRunnable); overload; virtual;
    function startActivitySync(para1: ACIntent): AAActivity; overload; virtual;
    procedure addMonitor(para1: AAInstrumentation.InnerActivityMonitor); overload; virtual;
    function addMonitor(para1: ACIntentFilter; para2: AAInstrumentation.InnerActivityResult; para3: jboolean): AAInstrumentation.InnerActivityMonitor; overload; virtual;
    function addMonitor(para1: JLString; para2: AAInstrumentation.InnerActivityResult; para3: jboolean): AAInstrumentation.InnerActivityMonitor; overload; virtual;
    function checkMonitorHit(para1: AAInstrumentation.InnerActivityMonitor; para2: jint): jboolean; overload; virtual;
    function waitForMonitor(para1: AAInstrumentation.InnerActivityMonitor): AAActivity; overload; virtual;
    function waitForMonitorWithTimeout(para1: AAInstrumentation.InnerActivityMonitor; para2: jlong): AAActivity; overload; virtual;
    procedure removeMonitor(para1: AAInstrumentation.InnerActivityMonitor); overload; virtual;
    function invokeMenuActionSync(para1: AAActivity; para2: jint; para3: jint): jboolean; overload; virtual;
    function invokeContextMenuAction(para1: AAActivity; para2: jint; para3: jint): jboolean; overload; virtual;
    procedure sendStringSync(para1: JLString); overload; virtual;
    procedure sendKeySync(para1: AVKeyEvent); overload; virtual;
    procedure sendKeyDownUpSync(para1: jint); overload; virtual;
    procedure sendCharacterSync(para1: jint); overload; virtual;
    procedure sendPointerSync(para1: AVMotionEvent); overload; virtual;
    procedure sendTrackballEventSync(para1: AVMotionEvent); overload; virtual;
    function newApplication(para1: JLClassLoader; para2: JLString; para3: ACContext): AAApplication; overload; virtual;  // throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.ClassNotFoundException
    class function newApplication(para1: JLClass; para2: ACContext): AAApplication; static; overload;  // throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.ClassNotFoundException
    procedure callApplicationOnCreate(para1: AAApplication); overload; virtual;
    function newActivity(para1: JLClass; para2: ACContext; para3: AOIBinder; para4: AAApplication; para5: ACIntent; para6: ACPActivityInfo; para7: JLCharSequence; para8: AAActivity; para9: JLString; para10: JLObject): AAActivity; overload; virtual;  // throws java.lang.InstantiationException, java.lang.IllegalAccessException
    function newActivity(para1: JLClassLoader; para2: JLString; para3: ACIntent): AAActivity; overload; virtual;  // throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.ClassNotFoundException
    procedure callActivityOnCreate(para1: AAActivity; para2: AOBundle); overload; virtual;
    procedure callActivityOnCreate(para1: AAActivity; para2: AOBundle; para3: AOPersistableBundle); overload; virtual;
    procedure callActivityOnDestroy(para1: AAActivity); overload; virtual;
    procedure callActivityOnRestoreInstanceState(para1: AAActivity; para2: AOBundle); overload; virtual;
    procedure callActivityOnRestoreInstanceState(para1: AAActivity; para2: AOBundle; para3: AOPersistableBundle); overload; virtual;
    procedure callActivityOnPostCreate(para1: AAActivity; para2: AOBundle); overload; virtual;
    procedure callActivityOnPostCreate(para1: AAActivity; para2: AOBundle; para3: AOPersistableBundle); overload; virtual;
    procedure callActivityOnNewIntent(para1: AAActivity; para2: ACIntent); overload; virtual;
    procedure callActivityOnStart(para1: AAActivity); overload; virtual;
    procedure callActivityOnRestart(para1: AAActivity); overload; virtual;
    procedure callActivityOnResume(para1: AAActivity); overload; virtual;
    procedure callActivityOnStop(para1: AAActivity); overload; virtual;
    procedure callActivityOnSaveInstanceState(para1: AAActivity; para2: AOBundle); overload; virtual;
    procedure callActivityOnSaveInstanceState(para1: AAActivity; para2: AOBundle; para3: AOPersistableBundle); overload; virtual;
    procedure callActivityOnPause(para1: AAActivity); overload; virtual;
    procedure callActivityOnUserLeaving(para1: AAActivity); overload; virtual;
    procedure startAllocCounting(); overload; virtual;
    procedure stopAllocCounting(); overload; virtual;
    function getAllocCounts(): AOBundle; overload; virtual;
    function getBinderCounts(): AOBundle; overload; virtual;
    function getUiAutomation(): AAUiAutomation; overload; virtual;
  end;

  AAKeyguardManager = class external 'android.app' name 'KeyguardManager' (JLObject)
  public
    type
      InnerOnKeyguardExitResult = interface;
      Arr1InnerOnKeyguardExitResult = array of InnerOnKeyguardExitResult;
      Arr2InnerOnKeyguardExitResult = array of Arr1InnerOnKeyguardExitResult;
      Arr3InnerOnKeyguardExitResult = array of Arr2InnerOnKeyguardExitResult;
      InnerKeyguardLock = class;
      Arr1InnerKeyguardLock = array of InnerKeyguardLock;
      Arr2InnerKeyguardLock = array of Arr1InnerKeyguardLock;
      Arr3InnerKeyguardLock = array of Arr2InnerKeyguardLock;
      InnerOnKeyguardExitResult = interface external 'android.app' name 'OnKeyguardExitResult' 
        procedure onKeyguardExitResult(para1: jboolean); overload;
      end;

      InnerKeyguardLock = class external 'android.app' name 'KeyguardLock' 
      end;

  public
    function createConfirmDeviceCredentialIntent(para1: JLCharSequence; para2: JLCharSequence): ACIntent; overload; virtual;
    function newKeyguardLock(para1: JLString): AAKeyguardManager.InnerKeyguardLock; overload; virtual;
    function isKeyguardLocked(): jboolean; overload; virtual;
    function isKeyguardSecure(): jboolean; overload; virtual;
    function inKeyguardRestrictedInputMode(): jboolean; overload; virtual;
    procedure exitKeyguardSecurely(para1: AAKeyguardManager.InnerOnKeyguardExitResult); overload; virtual;
  end;

  AALoaderManager = class abstract external 'android.app' name 'LoaderManager' (JLObject)
  public
    type
      InnerLoaderCallbacks = interface;
      Arr1InnerLoaderCallbacks = array of InnerLoaderCallbacks;
      Arr2InnerLoaderCallbacks = array of Arr1InnerLoaderCallbacks;
      Arr3InnerLoaderCallbacks = array of Arr2InnerLoaderCallbacks;
      InnerLoaderCallbacks = interface external 'android.app' name 'LoaderCallbacks' 
        function onCreateLoader(para1: jint; para2: AOBundle): ACLoader; overload;
        procedure onLoadFinished(para1: ACLoader; para2: JLObject); overload;
        procedure onLoaderReset(para1: ACLoader); overload;
      end;

  public
    constructor create(); overload;
    function initLoader(para1: jint; para2: AOBundle; para3: AALoaderManager.InnerLoaderCallbacks): ACLoader; overload; virtual; abstract;
    function restartLoader(para1: jint; para2: AOBundle; para3: AALoaderManager.InnerLoaderCallbacks): ACLoader; overload; virtual; abstract;
    procedure destroyLoader(para1: jint); overload; virtual; abstract;
    function getLoader(para1: jint): ACLoader; overload; virtual; abstract;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; para4: Arr1JLString); overload; virtual; abstract;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; var para4: array of JLString); overload; virtual; abstract;
    class procedure enableDebugLogging(para1: jboolean); static; overload;
  end;

  AALocalActivityManager = class external 'android.app' name 'LocalActivityManager' (JLObject)
  public
    constructor create(para1: AAActivity; para2: jboolean); overload;
    function startActivity(para1: JLString; para2: ACIntent): AVWindow; overload; virtual;
    function destroyActivity(para1: JLString; para2: jboolean): AVWindow; overload; virtual;
    function getCurrentActivity(): AAActivity; overload; virtual;
    function getCurrentId(): JLString; overload; virtual;
    function getActivity(para1: JLString): AAActivity; overload; virtual;
    procedure dispatchCreate(para1: AOBundle); overload; virtual;
    function saveInstanceState(): AOBundle; overload; virtual;
    procedure dispatchResume(); overload; virtual;
    procedure dispatchPause(para1: jboolean); overload; virtual;
    procedure dispatchStop(); overload; virtual;
    procedure removeAllActivities(); overload; virtual;
    procedure dispatchDestroy(para1: jboolean); overload; virtual;
  end;

  AANotificationManager = class external 'android.app' name 'NotificationManager' (JLObject)
  public
    procedure notify(para1: jint; para2: AANotification); overload; virtual;
    procedure notify(para1: JLString; para2: jint; para3: AANotification); overload; virtual;
    procedure cancel(para1: jint); overload; virtual;
    procedure cancel(para1: JLString; para2: jint); overload; virtual;
    procedure cancelAll(); overload; virtual;
  end;

  AAUiModeManager = class external 'android.app' name 'UiModeManager' (JLObject)
  public
    class var
      fACTION_ENTER_CAR_MODE: JLString; external name 'ACTION_ENTER_CAR_MODE';
      fACTION_ENTER_DESK_MODE: JLString; external name 'ACTION_ENTER_DESK_MODE';
      fACTION_EXIT_CAR_MODE: JLString; external name 'ACTION_EXIT_CAR_MODE';
      fACTION_EXIT_DESK_MODE: JLString; external name 'ACTION_EXIT_DESK_MODE';
  public
    const
      DISABLE_CAR_MODE_GO_HOME = 1;
      ENABLE_CAR_MODE_ALLOW_SLEEP = 2;
      ENABLE_CAR_MODE_GO_CAR_HOME = 1;
      MODE_NIGHT_AUTO = 0;
      MODE_NIGHT_NO = 1;
      MODE_NIGHT_YES = 2;
  public
    procedure enableCarMode(para1: jint); overload; virtual;
    procedure disableCarMode(para1: jint); overload; virtual;
    function getCurrentModeType(): jint; overload; virtual;
    procedure setNightMode(para1: jint); overload; virtual;
    function getNightMode(): jint; overload; virtual;
  end;

  AAWallpaperManager = class external 'android.app' name 'WallpaperManager' (JLObject)
  public
    const
      ACTION_CHANGE_LIVE_WALLPAPER = 'android.service.wallpaper.CHANGE_LIVE_WALLPAPER';
      ACTION_CROP_AND_SET_WALLPAPER = 'android.service.wallpaper.CROP_AND_SET_WALLPAPER';
      ACTION_LIVE_WALLPAPER_CHOOSER = 'android.service.wallpaper.LIVE_WALLPAPER_CHOOSER';
      COMMAND_DROP = 'android.home.drop';
      COMMAND_SECONDARY_TAP = 'android.wallpaper.secondaryTap';
      COMMAND_TAP = 'android.wallpaper.tap';
      EXTRA_LIVE_WALLPAPER_COMPONENT = 'android.service.wallpaper.extra.LIVE_WALLPAPER_COMPONENT';
      WALLPAPER_PREVIEW_META_DATA = 'android.wallpaper.preview';
  public
    class function getInstance(para1: ACContext): AAWallpaperManager; static; overload;
    function getDrawable(): AGDDrawable; overload; virtual;
    function getBuiltInDrawable(): AGDDrawable; overload; virtual;
    function getBuiltInDrawable(para1: jint; para2: jint; para3: jboolean; para4: jfloat; para5: jfloat): AGDDrawable; overload; virtual;
    function peekDrawable(): AGDDrawable; overload; virtual;
    function getFastDrawable(): AGDDrawable; overload; virtual;
    function peekFastDrawable(): AGDDrawable; overload; virtual;
    procedure forgetLoadedWallpaper(); overload; virtual;
    function getWallpaperInfo(): AAWallpaperInfo; overload; virtual;
    function getCropAndSetWallpaperIntent(para1: ANUri): ACIntent; overload; virtual;
    procedure setResource(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure setBitmap(para1: AGBitmap); overload; virtual;  // throws java.io.IOException
    procedure setStream(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    function hasResourceWallpaper(para1: jint): jboolean; overload; virtual;
    function getDesiredMinimumWidth(): jint; overload; virtual;
    function getDesiredMinimumHeight(): jint; overload; virtual;
    procedure suggestDesiredDimensions(para1: jint; para2: jint); overload; virtual;
    procedure setWallpaperOffsets(para1: AOIBinder; para2: jfloat; para3: jfloat); overload; virtual;
    procedure setWallpaperOffsetSteps(para1: jfloat; para2: jfloat); overload; virtual;
    procedure sendWallpaperCommand(para1: AOIBinder; para2: JLString; para3: jint; para4: jint; para5: jint; para6: AOBundle); overload; virtual;
    procedure clearWallpaperOffsets(para1: AOIBinder); overload; virtual;
    procedure clear(); overload; virtual;  // throws java.io.IOException
  end;

  AAADevicePolicyManager = class external 'android.app.admin' name 'DevicePolicyManager' (JLObject)
  public
    const
      ACTION_ADD_DEVICE_ADMIN = 'android.app.action.ADD_DEVICE_ADMIN';
      ACTION_PROVISION_MANAGED_PROFILE = 'android.app.action.PROVISION_MANAGED_PROFILE';
      ACTION_SET_NEW_PASSWORD = 'android.app.action.SET_NEW_PASSWORD';
      ACTION_START_ENCRYPTION = 'android.app.action.START_ENCRYPTION';
      ENCRYPTION_STATUS_ACTIVATING = 2;
      ENCRYPTION_STATUS_ACTIVE = 3;
      ENCRYPTION_STATUS_INACTIVE = 1;
      ENCRYPTION_STATUS_UNSUPPORTED = 0;
      EXTRA_ADD_EXPLANATION = 'android.app.extra.ADD_EXPLANATION';
      EXTRA_DEVICE_ADMIN = 'android.app.extra.DEVICE_ADMIN';
      EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE = 'android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE';
      EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM = 'android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM';
      EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER = 'android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER';
      EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION = 'android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION';
      EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME = 'android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME';
      EXTRA_PROVISIONING_EMAIL_ADDRESS = 'android.app.extra.PROVISIONING_EMAIL_ADDRESS';
      EXTRA_PROVISIONING_LOCALE = 'android.app.extra.PROVISIONING_LOCALE';
      EXTRA_PROVISIONING_LOCAL_TIME = 'android.app.extra.PROVISIONING_LOCAL_TIME';
      EXTRA_PROVISIONING_TIME_ZONE = 'android.app.extra.PROVISIONING_TIME_ZONE';
      EXTRA_PROVISIONING_WIFI_HIDDEN = 'android.app.extra.PROVISIONING_WIFI_HIDDEN';
      EXTRA_PROVISIONING_WIFI_PAC_URL = 'android.app.extra.PROVISIONING_WIFI_PAC_URL';
      EXTRA_PROVISIONING_WIFI_PASSWORD = 'android.app.extra.PROVISIONING_WIFI_PASSWORD';
      EXTRA_PROVISIONING_WIFI_PROXY_BYPASS = 'android.app.extra.PROVISIONING_WIFI_PROXY_BYPASS';
      EXTRA_PROVISIONING_WIFI_PROXY_HOST = 'android.app.extra.PROVISIONING_WIFI_PROXY_HOST';
      EXTRA_PROVISIONING_WIFI_PROXY_PORT = 'android.app.extra.PROVISIONING_WIFI_PROXY_PORT';
      EXTRA_PROVISIONING_WIFI_SECURITY_TYPE = 'android.app.extra.PROVISIONING_WIFI_SECURITY_TYPE';
      EXTRA_PROVISIONING_WIFI_SSID = 'android.app.extra.PROVISIONING_WIFI_SSID';
      FLAG_MANAGED_CAN_ACCESS_PARENT = 2;
      FLAG_PARENT_CAN_ACCESS_MANAGED = 1;
      KEYGUARD_DISABLE_FEATURES_ALL = 2147483647;
      KEYGUARD_DISABLE_FEATURES_NONE = 0;
      KEYGUARD_DISABLE_FINGERPRINT = 32;
      KEYGUARD_DISABLE_SECURE_CAMERA = 2;
      KEYGUARD_DISABLE_SECURE_NOTIFICATIONS = 4;
      KEYGUARD_DISABLE_TRUST_AGENTS = 16;
      KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS = 8;
      KEYGUARD_DISABLE_WIDGETS_ALL = 1;
      MIME_TYPE_PROVISIONING_NFC = 'application/com.android.managedprovisioning';
      PASSWORD_QUALITY_ALPHABETIC = 262144;
      PASSWORD_QUALITY_ALPHANUMERIC = 327680;
      PASSWORD_QUALITY_BIOMETRIC_WEAK = 32768;
      PASSWORD_QUALITY_COMPLEX = 393216;
      PASSWORD_QUALITY_NUMERIC = 131072;
      PASSWORD_QUALITY_NUMERIC_COMPLEX = 196608;
      PASSWORD_QUALITY_SOMETHING = 65536;
      PASSWORD_QUALITY_UNSPECIFIED = 0;
      RESET_PASSWORD_REQUIRE_ENTRY = 1;
      WIPE_EXTERNAL_STORAGE = 1;
  public
    function isAdminActive(para1: ACComponentName): jboolean; overload; virtual;
    function getActiveAdmins(): JUList; overload; virtual;
    procedure removeActiveAdmin(para1: ACComponentName); overload; virtual;
    function hasGrantedPolicy(para1: ACComponentName; para2: jint): jboolean; overload; virtual;
    procedure setPasswordQuality(para1: ACComponentName; para2: jint); overload; virtual;
    function getPasswordQuality(para1: ACComponentName): jint; overload; virtual;
    procedure setPasswordMinimumLength(para1: ACComponentName; para2: jint); overload; virtual;
    function getPasswordMinimumLength(para1: ACComponentName): jint; overload; virtual;
    procedure setPasswordMinimumUpperCase(para1: ACComponentName; para2: jint); overload; virtual;
    function getPasswordMinimumUpperCase(para1: ACComponentName): jint; overload; virtual;
    procedure setPasswordMinimumLowerCase(para1: ACComponentName; para2: jint); overload; virtual;
    function getPasswordMinimumLowerCase(para1: ACComponentName): jint; overload; virtual;
    procedure setPasswordMinimumLetters(para1: ACComponentName; para2: jint); overload; virtual;
    function getPasswordMinimumLetters(para1: ACComponentName): jint; overload; virtual;
    procedure setPasswordMinimumNumeric(para1: ACComponentName; para2: jint); overload; virtual;
    function getPasswordMinimumNumeric(para1: ACComponentName): jint; overload; virtual;
    procedure setPasswordMinimumSymbols(para1: ACComponentName; para2: jint); overload; virtual;
    function getPasswordMinimumSymbols(para1: ACComponentName): jint; overload; virtual;
    procedure setPasswordMinimumNonLetter(para1: ACComponentName; para2: jint); overload; virtual;
    function getPasswordMinimumNonLetter(para1: ACComponentName): jint; overload; virtual;
    procedure setPasswordHistoryLength(para1: ACComponentName; para2: jint); overload; virtual;
    procedure setPasswordExpirationTimeout(para1: ACComponentName; para2: jlong); overload; virtual;
    function getPasswordExpirationTimeout(para1: ACComponentName): jlong; overload; virtual;
    function getPasswordExpiration(para1: ACComponentName): jlong; overload; virtual;
    function getPasswordHistoryLength(para1: ACComponentName): jint; overload; virtual;
    function getPasswordMaximumLength(para1: jint): jint; overload; virtual;
    function isActivePasswordSufficient(): jboolean; overload; virtual;
    function getCurrentFailedPasswordAttempts(): jint; overload; virtual;
    procedure setMaximumFailedPasswordsForWipe(para1: ACComponentName; para2: jint); overload; virtual;
    function getMaximumFailedPasswordsForWipe(para1: ACComponentName): jint; overload; virtual;
    function resetPassword(para1: JLString; para2: jint): jboolean; overload; virtual;
    procedure setMaximumTimeToLock(para1: ACComponentName; para2: jlong); overload; virtual;
    function getMaximumTimeToLock(para1: ACComponentName): jlong; overload; virtual;
    procedure lockNow(); overload; virtual;
    procedure wipeData(para1: jint); overload; virtual;
    procedure setRecommendedGlobalProxy(para1: ACComponentName; para2: ANProxyInfo); overload; virtual;
    function setStorageEncryption(para1: ACComponentName; para2: jboolean): jint; overload; virtual;
    function getStorageEncryption(para1: ACComponentName): jboolean; overload; virtual;
    function getStorageEncryptionStatus(): jint; overload; virtual;
    function installCaCert(para1: ACComponentName; para2: Arr1jbyte): jboolean; overload; virtual;
    function installCaCert(para1: ACComponentName; var para2: array of jbyte): jboolean; overload; virtual;
    procedure uninstallCaCert(para1: ACComponentName; para2: Arr1jbyte); overload; virtual;
    procedure uninstallCaCert(para1: ACComponentName; var para2: array of jbyte); overload; virtual;
    function getInstalledCaCerts(para1: ACComponentName): JUList; overload; virtual;
    procedure uninstallAllUserCaCerts(para1: ACComponentName); overload; virtual;
    function hasCaCertInstalled(para1: ACComponentName; para2: Arr1jbyte): jboolean; overload; virtual;
    function hasCaCertInstalled(para1: ACComponentName; var para2: array of jbyte): jboolean; overload; virtual;
    function installKeyPair(para1: ACComponentName; para2: JSPrivateKey; para3: JSCCertificate; para4: JLString): jboolean; overload; virtual;
    procedure setCameraDisabled(para1: ACComponentName; para2: jboolean); overload; virtual;
    function getCameraDisabled(para1: ACComponentName): jboolean; overload; virtual;
    procedure setScreenCaptureDisabled(para1: ACComponentName; para2: jboolean); overload; virtual;
    function getScreenCaptureDisabled(para1: ACComponentName): jboolean; overload; virtual;
    procedure setAutoTimeRequired(para1: ACComponentName; para2: jboolean); overload; virtual;
    function getAutoTimeRequired(): jboolean; overload; virtual;
    procedure setKeyguardDisabledFeatures(para1: ACComponentName; para2: jint); overload; virtual;
    function getKeyguardDisabledFeatures(para1: ACComponentName): jint; overload; virtual;
    function isDeviceOwnerApp(para1: JLString): jboolean; overload; virtual;
    procedure clearDeviceOwnerApp(para1: JLString); overload; virtual;
    procedure setProfileEnabled(para1: ACComponentName); overload; virtual;
    procedure setProfileName(para1: ACComponentName; para2: JLString); overload; virtual;
    function isProfileOwnerApp(para1: JLString): jboolean; overload; virtual;
    procedure addPersistentPreferredActivity(para1: ACComponentName; para2: ACIntentFilter; para3: ACComponentName); overload; virtual;
    procedure clearPackagePersistentPreferredActivities(para1: ACComponentName; para2: JLString); overload; virtual;
    procedure setApplicationRestrictions(para1: ACComponentName; para2: JLString; para3: AOBundle); overload; virtual;
    procedure setCrossProfileCallerIdDisabled(para1: ACComponentName; para2: jboolean); overload; virtual;
    function getCrossProfileCallerIdDisabled(para1: ACComponentName): jboolean; overload; virtual;
    procedure addCrossProfileIntentFilter(para1: ACComponentName; para2: ACIntentFilter; para3: jint); overload; virtual;
    procedure clearCrossProfileIntentFilters(para1: ACComponentName); overload; virtual;
    function setPermittedAccessibilityServices(para1: ACComponentName; para2: JUList): jboolean; overload; virtual;
    function getPermittedAccessibilityServices(para1: ACComponentName): JUList; overload; virtual;
    function setPermittedInputMethods(para1: ACComponentName; para2: JUList): jboolean; overload; virtual;
    function getPermittedInputMethods(para1: ACComponentName): JUList; overload; virtual;
    function createUser(para1: ACComponentName; para2: JLString): AOUserHandle; overload; virtual;
    function createAndInitializeUser(para1: ACComponentName; para2: JLString; para3: JLString; para4: ACComponentName; para5: AOBundle): AOUserHandle; overload; virtual;
    function removeUser(para1: ACComponentName; para2: AOUserHandle): jboolean; overload; virtual;
    function switchUser(para1: ACComponentName; para2: AOUserHandle): jboolean; overload; virtual;
    function getApplicationRestrictions(para1: ACComponentName; para2: JLString): AOBundle; overload; virtual;
    procedure addUserRestriction(para1: ACComponentName; para2: JLString); overload; virtual;
    procedure clearUserRestriction(para1: ACComponentName; para2: JLString); overload; virtual;
    function setApplicationHidden(para1: ACComponentName; para2: JLString; para3: jboolean): jboolean; overload; virtual;
    function isApplicationHidden(para1: ACComponentName; para2: JLString): jboolean; overload; virtual;
    procedure enableSystemApp(para1: ACComponentName; para2: JLString); overload; virtual;
    function enableSystemApp(para1: ACComponentName; para2: ACIntent): jint; overload; virtual;
    procedure setAccountManagementDisabled(para1: ACComponentName; para2: JLString; para3: jboolean); overload; virtual;
    function getAccountTypesWithManagementDisabled(): Arr1JLString; overload; virtual;
    procedure setLockTaskPackages(para1: ACComponentName; para2: Arr1JLString); overload; virtual;  // throws java.lang.SecurityException
    procedure setLockTaskPackages(para1: ACComponentName; var para2: array of JLString); overload; virtual;  // throws java.lang.SecurityException
    function isLockTaskPermitted(para1: JLString): jboolean; overload; virtual;
    procedure setGlobalSetting(para1: ACComponentName; para2: JLString; para3: JLString); overload; virtual;
    procedure setSecureSetting(para1: ACComponentName; para2: JLString; para3: JLString); overload; virtual;
    procedure setRestrictionsProvider(para1: ACComponentName; para2: ACComponentName); overload; virtual;
    procedure setMasterVolumeMuted(para1: ACComponentName; para2: jboolean); overload; virtual;
    function isMasterVolumeMuted(para1: ACComponentName): jboolean; overload; virtual;
    procedure setUninstallBlocked(para1: ACComponentName; para2: JLString; para3: jboolean); overload; virtual;
    function isUninstallBlocked(para1: ACComponentName; para2: JLString): jboolean; overload; virtual;
    function addCrossProfileWidgetProvider(para1: ACComponentName; para2: JLString): jboolean; overload; virtual;
    function removeCrossProfileWidgetProvider(para1: ACComponentName; para2: JLString): jboolean; overload; virtual;
    function getCrossProfileWidgetProviders(para1: ACComponentName): JUList; overload; virtual;
  end;

  AABBackupDataInput = class external 'android.app.backup' name 'BackupDataInput' (JLObject)
  public
    function readNextHeader(): jboolean; overload; virtual;  // throws java.io.IOException
    function getKey(): JLString; overload; virtual;
    function getDataSize(): jint; overload; virtual;
    function readEntityData(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function readEntityData(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    procedure skipEntityData(); overload; virtual;  // throws java.io.IOException
  end;

  AABBackupDataOutput = class external 'android.app.backup' name 'BackupDataOutput' (JLObject)
  public
    function writeEntityHeader(para1: JLString; para2: jint): jint; overload; virtual;  // throws java.io.IOException
    function writeEntityData(para1: Arr1jbyte; para2: jint): jint; overload; virtual;  // throws java.io.IOException
    function writeEntityData(var para1: array of jbyte; para2: jint): jint; overload; virtual;  // throws java.io.IOException
  end;

  AABBackupHelper = interface external 'android.app.backup' name 'BackupHelper' 
    procedure performBackup(para1: AOParcelFileDescriptor; para2: AABBackupDataOutput; para3: AOParcelFileDescriptor); overload;
    procedure restoreEntity(para1: AABBackupDataInputStream); overload;
    procedure writeNewStateDescription(para1: AOParcelFileDescriptor); overload;
  end;

  AABBackupManager = class external 'android.app.backup' name 'BackupManager' (JLObject)
  public
    constructor create(para1: ACContext); overload;
    procedure dataChanged(); overload; virtual;
    class procedure dataChanged(para1: JLString); static; overload;
    function requestRestore(para1: AABRestoreObserver): jint; overload; virtual;
  end;

  AABFileBackupHelperBase = class external 'android.app.backup' name 'FileBackupHelperBase' (JLObject)
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    procedure writeNewStateDescription(para1: AOParcelFileDescriptor); overload; virtual;
  end;

  AABFullBackupDataOutput = class external 'android.app.backup' name 'FullBackupDataOutput' (JLObject)
  end;

  AABRestoreObserver = class abstract external 'android.app.backup' name 'RestoreObserver' (JLObject)
  public
    constructor create(); overload;
    procedure restoreStarting(para1: jint); overload; virtual;
    procedure onUpdate(para1: jint; para2: JLString); overload; virtual;
    procedure restoreFinished(para1: jint); overload; virtual;
  end;

  AAAppWidgetHost = class external 'android.appwidget' name 'AppWidgetHost' (JLObject)
  public
    constructor create(para1: ACContext; para2: jint); overload;
    procedure startListening(); overload; virtual;
    procedure stopListening(); overload; virtual;
    function allocateAppWidgetId(): jint; overload; virtual;
    procedure startAppWidgetConfigureActivityForResult(para1: AAActivity; para2: jint; para3: jint; para4: jint; para5: AOBundle); overload; virtual; final;
    procedure deleteAppWidgetId(para1: jint); overload; virtual;
    procedure deleteHost(); overload; virtual;
    class procedure deleteAllHosts(); static; overload;
    function createView(para1: ACContext; para2: jint; para3: AAAppWidgetProviderInfo): AAAppWidgetHostView; overload; virtual; final;
  strict protected
    function onCreateView(para1: ACContext; para2: jint; para3: AAAppWidgetProviderInfo): AAAppWidgetHostView; overload; virtual;
    procedure onProviderChanged(para1: jint; para2: AAAppWidgetProviderInfo); overload; virtual;
    procedure onProvidersChanged(); overload; virtual;
    procedure clearViews(); overload; virtual;
  end;

  AAAppWidgetManager = class external 'android.appwidget' name 'AppWidgetManager' (JLObject)
  public
    const
      ACTION_APPWIDGET_BIND = 'android.appwidget.action.APPWIDGET_BIND';
      ACTION_APPWIDGET_CONFIGURE = 'android.appwidget.action.APPWIDGET_CONFIGURE';
      ACTION_APPWIDGET_DELETED = 'android.appwidget.action.APPWIDGET_DELETED';
      ACTION_APPWIDGET_DISABLED = 'android.appwidget.action.APPWIDGET_DISABLED';
      ACTION_APPWIDGET_ENABLED = 'android.appwidget.action.APPWIDGET_ENABLED';
      ACTION_APPWIDGET_HOST_RESTORED = 'android.appwidget.action.APPWIDGET_HOST_RESTORED';
      ACTION_APPWIDGET_OPTIONS_CHANGED = 'android.appwidget.action.APPWIDGET_UPDATE_OPTIONS';
      ACTION_APPWIDGET_PICK = 'android.appwidget.action.APPWIDGET_PICK';
      ACTION_APPWIDGET_RESTORED = 'android.appwidget.action.APPWIDGET_RESTORED';
      ACTION_APPWIDGET_UPDATE = 'android.appwidget.action.APPWIDGET_UPDATE';
      EXTRA_APPWIDGET_ID = 'appWidgetId';
      EXTRA_APPWIDGET_IDS = 'appWidgetIds';
      EXTRA_APPWIDGET_OLD_IDS = 'appWidgetOldIds';
      EXTRA_APPWIDGET_OPTIONS = 'appWidgetOptions';
      EXTRA_APPWIDGET_PROVIDER = 'appWidgetProvider';
      EXTRA_APPWIDGET_PROVIDER_PROFILE = 'appWidgetProviderProfile';
      EXTRA_CUSTOM_EXTRAS = 'customExtras';
      EXTRA_CUSTOM_INFO = 'customInfo';
      EXTRA_HOST_ID = 'hostId';
      INVALID_APPWIDGET_ID = 0;
      META_DATA_APPWIDGET_PROVIDER = 'android.appwidget.provider';
      OPTION_APPWIDGET_HOST_CATEGORY = 'appWidgetCategory';
      OPTION_APPWIDGET_MAX_HEIGHT = 'appWidgetMaxHeight';
      OPTION_APPWIDGET_MAX_WIDTH = 'appWidgetMaxWidth';
      OPTION_APPWIDGET_MIN_HEIGHT = 'appWidgetMinHeight';
      OPTION_APPWIDGET_MIN_WIDTH = 'appWidgetMinWidth';
  public
    class function getInstance(para1: ACContext): AAAppWidgetManager; static; overload;
    procedure updateAppWidget(para1: Arr1jint; para2: AWRemoteViews); overload; virtual;
    procedure updateAppWidget(var para1: array of jint; para2: AWRemoteViews); overload; virtual;
    procedure updateAppWidgetOptions(para1: jint; para2: AOBundle); overload; virtual;
    function getAppWidgetOptions(para1: jint): AOBundle; overload; virtual;
    procedure updateAppWidget(para1: jint; para2: AWRemoteViews); overload; virtual;
    procedure partiallyUpdateAppWidget(para1: Arr1jint; para2: AWRemoteViews); overload; virtual;
    procedure partiallyUpdateAppWidget(var para1: array of jint; para2: AWRemoteViews); overload; virtual;
    procedure partiallyUpdateAppWidget(para1: jint; para2: AWRemoteViews); overload; virtual;
    procedure updateAppWidget(para1: ACComponentName; para2: AWRemoteViews); overload; virtual;
    procedure notifyAppWidgetViewDataChanged(para1: Arr1jint; para2: jint); overload; virtual;
    procedure notifyAppWidgetViewDataChanged(var para1: array of jint; para2: jint); overload; virtual;
    procedure notifyAppWidgetViewDataChanged(para1: jint; para2: jint); overload; virtual;
    function getInstalledProvidersForProfile(para1: AOUserHandle): JUList; overload; virtual;
    function getInstalledProviders(): JUList; overload; virtual;
    function getAppWidgetInfo(para1: jint): AAAppWidgetProviderInfo; overload; virtual;
    function bindAppWidgetIdIfAllowed(para1: jint; para2: ACComponentName): jboolean; overload; virtual;
    function bindAppWidgetIdIfAllowed(para1: jint; para2: ACComponentName; para3: AOBundle): jboolean; overload; virtual;
    function bindAppWidgetIdIfAllowed(para1: jint; para2: AOUserHandle; para3: ACComponentName; para4: AOBundle): jboolean; overload; virtual;
    function getAppWidgetIds(para1: ACComponentName): Arr1jint; overload; virtual;
  end;

  ABBluetoothAssignedNumbers = class external 'android.bluetooth' name 'BluetoothAssignedNumbers' (JLObject)
  public
    const
      AAMP_OF_AMERICA = 190;
      ACCEL_SEMICONDUCTOR = 74;
      ACE_SENSOR = 188;
      ADIDAS = 195;
      ADVANCED_PANMOBIL_SYSTEMS = 145;
      AIROHA_TECHNOLOGY = 148;
      ALCATEL = 36;
      ALPWISE = 154;
      AMICCOM_ELECTRONICS = 192;
      APLIX = 189;
      APPLE = 76;
      APT_LICENSING = 79;
      ARCHOS = 207;
      ARP_DEVICES = 168;
      ATHEROS_COMMUNICATIONS = 69;
      ATMEL = 19;
      AUSTCO_COMMUNICATION_SYSTEMS = 213;
      AUTONET_MOBILE = 127;
      AVAGO = 78;
      AVM_BERLIN = 31;
      A_AND_D_ENGINEERING = 105;
      A_AND_R_CAMBRIDGE = 124;
      BANDSPEED = 32;
      BAND_XI_INTERNATIONAL = 100;
      BDE_TECHNOLOGY = 180;
      BEATS_ELECTRONICS = 204;
      BEAUTIFUL_ENTERPRISE = 108;
      BEKEY = 178;
      BELKIN_INTERNATIONAL = 92;
      BINAURIC = 203;
      BIOSENTRONICS = 219;
      BLUEGIGA = 71;
      BLUERADIOS = 133;
      BLUETOOTH_SIG = 63;
      BLUETREK_TECHNOLOGIES = 151;
      BOSE = 158;
      BRIARTEK = 109;
      BROADCOM = 15;
      CAEN_RFID = 170;
      CAMBRIDGE_SILICON_RADIO = 10;
      CATC = 52;
      CINETIX = 175;
      CLARINOX_TECHNOLOGIES = 179;
      COLORFY = 156;
      COMMIL = 51;
      CONEXANT_SYSTEMS = 28;
      CONNECTBLUE = 113;
      CONTINENTAL_AUTOMOTIVE = 75;
      CONWISE_TECHNOLOGY = 66;
      CREATIVE_TECHNOLOGY = 118;
      C_TECHNOLOGIES = 38;
      DANLERS = 225;
      DELORME_PUBLISHING_COMPANY = 128;
      DEXCOM = 208;
      DIALOG_SEMICONDUCTOR = 210;
      DIGIANSWER = 12;
      ECLIPSE = 53;
      ECOTEST = 136;
      ELGATO_SYSTEMS = 206;
      EM_MICROELECTRONIC_MARIN = 90;
      EQUINOX_AG = 134;
      ERICSSON_TECHNOLOGY = 0;
      EVLUMA = 201;
      FREE2MOVE = 83;
      FUNAI_ELECTRIC = 144;
      GARMIN_INTERNATIONAL = 135;
      GCT_SEMICONDUCTOR = 45;
      GELO = 200;
      GENEQ = 194;
      GENERAL_MOTORS = 104;
      GENNUM = 59;
      GEOFORCE = 157;
      GIBSON_GUITARS = 98;
      GN_NETCOM = 103;
      GN_RESOUND = 137;
      GOOGLE = 224;
      GREEN_THROTTLE_GAMES = 172;
      GROUP_SENSE = 115;
      HANLYNN_TECHNOLOGIES = 123;
      HARMAN_INTERNATIONAL = 87;
      HEWLETT_PACKARD = 101;
      HITACHI = 41;
      HOSIDEN = 221;
      IBM = 3;
      INFINEON_TECHNOLOGIES = 9;
      INGENIEUR_SYSTEMGRUPPE_ZAHN = 171;
      INTEGRATED_SILICON_SOLUTION = 65;
      INTEGRATED_SYSTEM_SOLUTION = 57;
      INTEL = 2;
      INVENTEL = 30;
      IPEXTREME = 61;
      I_TECH_DYNAMIC_GLOBAL_DISTRIBUTION = 153;
      JAWBONE = 138;
      JIANGSU_TOPPOWER_AUTOMOTIVE_ELECTRONICS = 155;
      JOHNSON_CONTROLS = 185;
      J_AND_M = 82;
      KAWANTECH = 212;
      KC_TECHNOLOGY = 22;
      KENSINGTON_COMPUTER_PRODUCTS_GROUP = 160;
      LAIRD_TECHNOLOGIES = 119;
      LESSWIRE = 121;
      LG_ELECTRONICS = 196;
      LINAK = 164;
      LUCENT = 7;
      LUDUS_HELSINKI = 132;
      MACRONIX = 44;
      MAGNETI_MARELLI = 169;
      MANSELLA = 33;
      MARVELL = 72;
      MATSUSHITA_ELECTRIC = 58;
      MC10 = 202;
      MEDIATEK = 70;
      MESO_INTERNATIONAL = 182;
      META_WATCH = 163;
      MEWTEL_TECHNOLOGY = 47;
      MICOMMAND = 99;
      MICROCHIP_TECHNOLOGY = 205;
      MICROSOFT = 6;
      MINDTREE = 106;
      MISFIT_WEARABLES = 223;
      MITEL_SEMICONDUCTOR = 16;
      MITSUBISHI_ELECTRIC = 20;
      MOBILIAN_CORPORATION = 55;
      MONSTER = 112;
      MOTOROLA = 8;
      MSTAR_SEMICONDUCTOR = 122;
      MUZIK = 222;
      NEC = 34;
      NEC_LIGHTING = 149;
      NEWLOGIC = 23;
      NIKE = 120;
      NINE_SOLUTIONS = 102;
      NOKIA_MOBILE_PHONES = 1;
      NORDIC_SEMICONDUCTOR = 89;
      NORWOOD_SYSTEMS = 46;
      ODM_TECHNOLOGY = 150;
      OMEGAWAVE = 174;
      ONSET_COMPUTER = 197;
      OPEN_INTERFACE = 39;
      OTL_DYNAMICS = 165;
      PANDA_OCEAN = 166;
      PARROT = 67;
      PARTHUS_TECHNOLOGIES = 14;
      PASSIF_SEMICONDUCTOR = 176;
      PETER_SYSTEMTECHNIK = 173;
      PHILIPS_SEMICONDUCTORS = 37;
      PLANTRONICS = 85;
      POLAR_ELECTRO = 107;
      POLAR_ELECTRO_EUROPE = 209;
      PROCTER_AND_GAMBLE = 220;
      QUALCOMM = 29;
      QUALCOMM_CONNECTED_EXPERIENCES = 216;
      QUALCOMM_INNOVATION_CENTER = 184;
      QUALCOMM_LABS = 140;
      QUALCOMM_TECHNOLOGIES = 215;
      QUINTIC = 142;
      QUUPPA = 199;
      RALINK_TECHNOLOGY = 91;
      RDA_MICROELECTRONICS = 97;
      REALTEK_SEMICONDUCTOR = 93;
      RED_M = 50;
      RENESAS_TECHNOLOGY = 54;
      RESEARCH_IN_MOTION = 60;
      RF_MICRO_DEVICES = 40;
      RIVIERAWAVES = 96;
      ROHDE_AND_SCHWARZ = 25;
      RTX_TELECOM = 21;
      SAMSUNG_ELECTRONICS = 117;
      SARIS_CYCLING_GROUP = 177;
      SEERS_TECHNOLOGY = 125;
      SEIKO_EPSON = 64;
      SELFLY = 198;
      SEMILINK = 226;
      SENNHEISER_COMMUNICATIONS = 130;
      SHANGHAI_SUPER_SMART_ELECTRONICS = 114;
      SHENZHEN_EXCELSECU_DATA_TECHNOLOGY = 193;
      SIGNIA_TECHNOLOGIES = 27;
      SILICON_WAVE = 11;
      SIRF_TECHNOLOGY = 80;
      SOCKET_MOBILE = 68;
      SONY_ERICSSON = 86;
      SOUND_ID = 111;
      SPORTS_TRACKING_TECHNOLOGIES = 126;
      SR_MEDIZINELEKTRONIK = 161;
      STACCATO_COMMUNICATIONS = 77;
      STALMART_TECHNOLOGY = 191;
      STARKEY_LABORATORIES = 186;
      STOLLMAN_E_PLUS_V = 143;
      STONESTREET_ONE = 94;
      ST_MICROELECTRONICS = 48;
      SUMMIT_DATA_COMMUNICATIONS = 110;
      SUUNTO = 159;
      SWIRL_NETWORKS = 181;
      SYMBOL_TECHNOLOGIES = 42;
      SYNOPSYS = 49;
      SYSTEMS_AND_CHIPS = 62;
      S_POWER_ELECTRONICS = 187;
      TAIXINGBANG_TECHNOLOGY = 211;
      TENOVIS = 43;
      TERAX = 56;
      TEXAS_INSTRUMENTS = 13;
      THINKOPTICS = 146;
      THREECOM = 5;
      THREE_DIJOY = 84;
      THREE_DSP = 73;
      TIMEKEEPING_SYSTEMS = 131;
      TIMEX_GROUP_USA = 214;
      TOPCORN_POSITIONING_SYSTEMS = 139;
      TOSHIBA = 4;
      TRANSILICA = 24;
      TRELAB = 183;
      TTPCOM = 26;
      TXTR = 218;
      TZERO_TECHNOLOGIES = 81;
      UNIVERSAL_ELECTRONICS = 147;
      VERTU = 162;
      VISTEON = 167;
      VIZIO = 88;
      VOYETRA_TURTLE_BEACH = 217;
      WAVEPLUS_TECHNOLOGY = 35;
      WICENTRIC = 95;
      WIDCOMM = 17;
      WUXI_VIMICRO = 129;
      ZEEVO = 18;
      ZER01_TV = 152;
      ZOMM = 116;
      ZSCAN_SOFTWARE = 141;
  end;

  ABBluetoothHealthCallback = class abstract external 'android.bluetooth' name 'BluetoothHealthCallback' (JLObject)
  public
    constructor create(); overload;
    procedure onHealthAppConfigurationStatusChange(para1: ABBluetoothHealthAppConfiguration; para2: jint); overload; virtual;
    procedure onHealthChannelStateChange(para1: ABBluetoothHealthAppConfiguration; para2: ABBluetoothDevice; para3: jint; para4: jint; para5: AOParcelFileDescriptor; para6: jint); overload; virtual;
  end;

  ABBluetoothProfile = interface external 'android.bluetooth' name 'BluetoothProfile' 
    type
      InnerServiceListener = interface;
      Arr1InnerServiceListener = array of InnerServiceListener;
      Arr2InnerServiceListener = array of Arr1InnerServiceListener;
      Arr3InnerServiceListener = array of Arr2InnerServiceListener;
      InnerServiceListener = interface external 'android.bluetooth' name 'ServiceListener' 
        procedure onServiceConnected(para1: jint; para2: ABBluetoothProfile); overload;
        procedure onServiceDisconnected(para1: jint); overload;
      end;

    const
      A2DP = 2;
      EXTRA_PREVIOUS_STATE = 'android.bluetooth.profile.extra.PREVIOUS_STATE';
      EXTRA_STATE = 'android.bluetooth.profile.extra.STATE';
      GATT = 7;
      GATT_SERVER = 8;
      HEADSET = 1;
      HEALTH = 3;
      STATE_CONNECTED = 2;
      STATE_CONNECTING = 1;
      STATE_DISCONNECTED = 0;
      STATE_DISCONNECTING = 3;
    function getConnectedDevices(): JUList; overload;
    function getDevicesMatchingConnectionStates(para1: Arr1jint): JUList; overload;
    function getDevicesMatchingConnectionStates(var para1: array of jint): JUList; overload;
    function getConnectionState(para1: ABBluetoothDevice): jint; overload;
  end;

  ACAbstractThreadedSyncAdapter = class abstract external 'android.content' name 'AbstractThreadedSyncAdapter' (JLObject)
  public
    const
      LOG_SYNC_DETAILS = 2743 deprecated;
  public
    constructor create(para1: ACContext; para2: jboolean); overload;
    constructor create(para1: ACContext; para2: jboolean; para3: jboolean); overload;
    function getContext(): ACContext; overload; virtual;
    function getSyncAdapterBinder(): AOIBinder; overload; virtual; final;
    procedure onPerformSync(para1: AAAccount; para2: AOBundle; para3: JLString; para4: ACContentProviderClient; para5: ACSyncResult); overload; virtual; abstract;
    procedure onSyncCanceled(); overload; virtual;
    procedure onSyncCanceled(para1: JLThread); overload; virtual;
  end;

  ACBroadcastReceiver = class abstract external 'android.content' name 'BroadcastReceiver' (JLObject)
  public
    type
      InnerPendingResult = class;
      Arr1InnerPendingResult = array of InnerPendingResult;
      Arr2InnerPendingResult = array of Arr1InnerPendingResult;
      Arr3InnerPendingResult = array of Arr2InnerPendingResult;
      InnerPendingResult = class external 'android.content' name 'PendingResult' (JLObject)
      public
        procedure setResultCode(para1: jint); overload; virtual; final;
        function getResultCode(): jint; overload; virtual; final;
        procedure setResultData(para1: JLString); overload; virtual; final;
        function getResultData(): JLString; overload; virtual; final;
        procedure setResultExtras(para1: AOBundle); overload; virtual; final;
        function getResultExtras(para1: jboolean): AOBundle; overload; virtual; final;
        procedure setResult(para1: jint; para2: JLString; para3: AOBundle); overload; virtual; final;
        function getAbortBroadcast(): jboolean; overload; virtual; final;
        procedure abortBroadcast(); overload; virtual; final;
        procedure clearAbortBroadcast(); overload; virtual; final;
        procedure finish(); overload; virtual; final;
      end;

  public
    constructor create(); overload;
    procedure onReceive(para1: ACContext; para2: ACIntent); overload; virtual; abstract;
    function goAsync(): ACBroadcastReceiver.InnerPendingResult; overload; virtual; final;
    function peekService(para1: ACContext; para2: ACIntent): AOIBinder; overload; virtual;
    procedure setResultCode(para1: jint); overload; virtual; final;
    function getResultCode(): jint; overload; virtual; final;
    procedure setResultData(para1: JLString); overload; virtual; final;
    function getResultData(): JLString; overload; virtual; final;
    procedure setResultExtras(para1: AOBundle); overload; virtual; final;
    function getResultExtras(para1: jboolean): AOBundle; overload; virtual; final;
    procedure setResult(para1: jint; para2: JLString; para3: AOBundle); overload; virtual; final;
    function getAbortBroadcast(): jboolean; overload; virtual; final;
    procedure abortBroadcast(); overload; virtual; final;
    procedure clearAbortBroadcast(); overload; virtual; final;
    function isOrderedBroadcast(): jboolean; overload; virtual; final;
    function isInitialStickyBroadcast(): jboolean; overload; virtual; final;
    procedure setOrderedHint(para1: jboolean); overload; virtual; final;
    procedure setDebugUnregister(para1: jboolean); overload; virtual; final;
    function getDebugUnregister(): jboolean; overload; virtual; final;
  end;

  ACComponentCallbacks = interface external 'android.content' name 'ComponentCallbacks' 
    procedure onConfigurationChanged(para1: ACRConfiguration); overload;
    procedure onLowMemory(); overload;
  end;

  ACContentProviderClient = class external 'android.content' name 'ContentProviderClient' (JLObject)
  public
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString): ADCursor; overload; virtual;  // throws android.os.RemoteException
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString): ADCursor; overload; virtual;  // throws android.os.RemoteException
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString; para6: AOCancellationSignal): ADCursor; overload; virtual;  // throws android.os.RemoteException
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString; para6: AOCancellationSignal): ADCursor; overload; virtual;  // throws android.os.RemoteException
    function getType(para1: ANUri): JLString; overload; virtual;  // throws android.os.RemoteException
    function getStreamTypes(para1: ANUri; para2: JLString): Arr1JLString; overload; virtual;  // throws android.os.RemoteException
    function canonicalize(para1: ANUri): ANUri; overload; virtual; final;  // throws android.os.RemoteException
    function uncanonicalize(para1: ANUri): ANUri; overload; virtual; final;  // throws android.os.RemoteException
    function insert(para1: ANUri; para2: ACContentValues): ANUri; overload; virtual;  // throws android.os.RemoteException
    function bulkInsert(para1: ANUri; para2: Arr1ACContentValues): jint; overload; virtual;  // throws android.os.RemoteException
    function bulkInsert(para1: ANUri; var para2: array of ACContentValues): jint; overload; virtual;  // throws android.os.RemoteException
    function delete(para1: ANUri; para2: JLString; para3: Arr1JLString): jint; overload; virtual;  // throws android.os.RemoteException
    function delete(para1: ANUri; para2: JLString; var para3: array of JLString): jint; overload; virtual;  // throws android.os.RemoteException
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; para4: Arr1JLString): jint; overload; virtual;  // throws android.os.RemoteException
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; var para4: array of JLString): jint; overload; virtual;  // throws android.os.RemoteException
    function openFile(para1: ANUri; para2: JLString): AOParcelFileDescriptor; overload; virtual;  // throws android.os.RemoteException, java.io.FileNotFoundException
    function openFile(para1: ANUri; para2: JLString; para3: AOCancellationSignal): AOParcelFileDescriptor; overload; virtual;  // throws android.os.RemoteException, java.io.FileNotFoundException
    function openAssetFile(para1: ANUri; para2: JLString): ACRAssetFileDescriptor; overload; virtual;  // throws android.os.RemoteException, java.io.FileNotFoundException
    function openAssetFile(para1: ANUri; para2: JLString; para3: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual;  // throws android.os.RemoteException, java.io.FileNotFoundException
    function openTypedAssetFileDescriptor(para1: ANUri; para2: JLString; para3: AOBundle): ACRAssetFileDescriptor; overload; virtual; final;  // throws android.os.RemoteException, java.io.FileNotFoundException
    function openTypedAssetFileDescriptor(para1: ANUri; para2: JLString; para3: AOBundle; para4: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual; final;  // throws android.os.RemoteException, java.io.FileNotFoundException
    function applyBatch(para1: JUArrayList): Arr1ACContentProviderResult; overload; virtual;  // throws android.os.RemoteException, android.content.OperationApplicationException
    function call(para1: JLString; para2: JLString; para3: AOBundle): AOBundle; overload; virtual;  // throws android.os.RemoteException
    function release(): jboolean; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function getLocalContentProvider(): ACContentProvider; overload; virtual;
  end;

  ACContentResolver = class abstract external 'android.content' name 'ContentResolver' (JLObject)
  public
    const
      ANY_CURSOR_ITEM_TYPE = 'vnd.android.cursor.item/*';
      CURSOR_DIR_BASE_TYPE = 'vnd.android.cursor.dir';
      CURSOR_ITEM_BASE_TYPE = 'vnd.android.cursor.item';
      EXTRA_SIZE = 'android.content.extra.SIZE';
      SCHEME_ANDROID_RESOURCE = 'android.resource';
      SCHEME_CONTENT = 'content';
      SCHEME_FILE = 'file';
      SYNC_EXTRAS_ACCOUNT = 'account' deprecated;
      SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS = 'discard_deletions';
      SYNC_EXTRAS_DO_NOT_RETRY = 'do_not_retry';
      SYNC_EXTRAS_EXPEDITED = 'expedited';
      SYNC_EXTRAS_FORCE = 'force' deprecated;
      SYNC_EXTRAS_IGNORE_BACKOFF = 'ignore_backoff';
      SYNC_EXTRAS_IGNORE_SETTINGS = 'ignore_settings';
      SYNC_EXTRAS_INITIALIZE = 'initialize';
      SYNC_EXTRAS_MANUAL = 'force';
      SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS = 'deletions_override';
      SYNC_EXTRAS_UPLOAD = 'upload';
      SYNC_OBSERVER_TYPE_ACTIVE = 4;
      SYNC_OBSERVER_TYPE_PENDING = 2;
      SYNC_OBSERVER_TYPE_SETTINGS = 1;
  public
    constructor create(para1: ACContext); overload;
    function getType(para1: ANUri): JLString; overload; virtual; final;
    function getStreamTypes(para1: ANUri; para2: JLString): Arr1JLString; overload; virtual;
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString): ADCursor; overload; virtual; final;
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString): ADCursor; overload; virtual; final;
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString; para6: AOCancellationSignal): ADCursor; overload; virtual; final;
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString; para6: AOCancellationSignal): ADCursor; overload; virtual; final;
    function canonicalize(para1: ANUri): ANUri; overload; virtual; final;
    function uncanonicalize(para1: ANUri): ANUri; overload; virtual; final;
    function openInputStream(para1: ANUri): JIInputStream; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openOutputStream(para1: ANUri): JIOutputStream; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openOutputStream(para1: ANUri; para2: JLString): JIOutputStream; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openFileDescriptor(para1: ANUri; para2: JLString): AOParcelFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openFileDescriptor(para1: ANUri; para2: JLString; para3: AOCancellationSignal): AOParcelFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openAssetFileDescriptor(para1: ANUri; para2: JLString): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openAssetFileDescriptor(para1: ANUri; para2: JLString; para3: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openTypedAssetFileDescriptor(para1: ANUri; para2: JLString; para3: AOBundle): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openTypedAssetFileDescriptor(para1: ANUri; para2: JLString; para3: AOBundle; para4: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function insert(para1: ANUri; para2: ACContentValues): ANUri; overload; virtual; final;
    function applyBatch(para1: JLString; para2: JUArrayList): Arr1ACContentProviderResult; overload; virtual;  // throws android.os.RemoteException, android.content.OperationApplicationException
    function bulkInsert(para1: ANUri; para2: Arr1ACContentValues): jint; overload; virtual; final;
    function bulkInsert(para1: ANUri; var para2: array of ACContentValues): jint; overload; virtual; final;
    function delete(para1: ANUri; para2: JLString; para3: Arr1JLString): jint; overload; virtual; final;
    function delete(para1: ANUri; para2: JLString; var para3: array of JLString): jint; overload; virtual; final;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; para4: Arr1JLString): jint; overload; virtual; final;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; var para4: array of JLString): jint; overload; virtual; final;
    function call(para1: ANUri; para2: JLString; para3: JLString; para4: AOBundle): AOBundle; overload; virtual; final;
    function acquireContentProviderClient(para1: ANUri): ACContentProviderClient; overload; virtual; final;
    function acquireContentProviderClient(para1: JLString): ACContentProviderClient; overload; virtual; final;
    function acquireUnstableContentProviderClient(para1: ANUri): ACContentProviderClient; overload; virtual; final;
    function acquireUnstableContentProviderClient(para1: JLString): ACContentProviderClient; overload; virtual; final;
    procedure registerContentObserver(para1: ANUri; para2: jboolean; para3: ADContentObserver); overload; virtual; final;
    procedure unregisterContentObserver(para1: ADContentObserver); overload; virtual; final;
    procedure notifyChange(para1: ANUri; para2: ADContentObserver); overload; virtual;
    procedure notifyChange(para1: ANUri; para2: ADContentObserver; para3: jboolean); overload; virtual;
    procedure takePersistableUriPermission(para1: ANUri; para2: jint); overload; virtual;
    procedure releasePersistableUriPermission(para1: ANUri; para2: jint); overload; virtual;
    function getPersistedUriPermissions(): JUList; overload; virtual;
    function getOutgoingPersistedUriPermissions(): JUList; overload; virtual;
    procedure startSync(para1: ANUri; para2: AOBundle); overload; virtual;
    class procedure requestSync(para1: AAAccount; para2: JLString; para3: AOBundle); static; overload;
    class procedure requestSync(para1: ACSyncRequest); static; overload;
    class procedure validateSyncExtrasBundle(para1: AOBundle); static; overload;
    procedure cancelSync(para1: ANUri); overload; virtual;
    class procedure cancelSync(para1: AAAccount; para2: JLString); static; overload;
    class function getSyncAdapterTypes(): Arr1ACSyncAdapterType; static; overload;
    class function getSyncAutomatically(para1: AAAccount; para2: JLString): jboolean; static; overload;
    class procedure setSyncAutomatically(para1: AAAccount; para2: JLString; para3: jboolean); static; overload;
    class procedure addPeriodicSync(para1: AAAccount; para2: JLString; para3: AOBundle; para4: jlong); static; overload;
    class procedure removePeriodicSync(para1: AAAccount; para2: JLString; para3: AOBundle); static; overload;
    class procedure cancelSync(para1: ACSyncRequest); static; overload;
    class function getPeriodicSyncs(para1: AAAccount; para2: JLString): JUList; static; overload;
    class function getIsSyncable(para1: AAAccount; para2: JLString): jint; static; overload;
    class procedure setIsSyncable(para1: AAAccount; para2: JLString; para3: jint); static; overload;
    class function getMasterSyncAutomatically(): jboolean; static; overload;
    class procedure setMasterSyncAutomatically(para1: jboolean); static; overload;
    class function isSyncActive(para1: AAAccount; para2: JLString): jboolean; static; overload;
    class function getCurrentSync(): ACSyncInfo; static; overload;
    class function getCurrentSyncs(): JUList; static; overload;
    class function isSyncPending(para1: AAAccount; para2: JLString): jboolean; static; overload;
    class function addStatusChangeListener(para1: jint; para2: ACSyncStatusObserver): JLObject; static; overload;
    class procedure removeStatusChangeListener(para1: JLObject); static; overload;
  end;

  ACDialogInterface = interface external 'android.content' name 'DialogInterface' 
    type
      InnerOnKeyListener = interface;
      Arr1InnerOnKeyListener = array of InnerOnKeyListener;
      Arr2InnerOnKeyListener = array of Arr1InnerOnKeyListener;
      Arr3InnerOnKeyListener = array of Arr2InnerOnKeyListener;
      InnerOnMultiChoiceClickListener = interface;
      Arr1InnerOnMultiChoiceClickListener = array of InnerOnMultiChoiceClickListener;
      Arr2InnerOnMultiChoiceClickListener = array of Arr1InnerOnMultiChoiceClickListener;
      Arr3InnerOnMultiChoiceClickListener = array of Arr2InnerOnMultiChoiceClickListener;
      InnerOnClickListener = interface;
      Arr1InnerOnClickListener = array of InnerOnClickListener;
      Arr2InnerOnClickListener = array of Arr1InnerOnClickListener;
      Arr3InnerOnClickListener = array of Arr2InnerOnClickListener;
      InnerOnShowListener = interface;
      Arr1InnerOnShowListener = array of InnerOnShowListener;
      Arr2InnerOnShowListener = array of Arr1InnerOnShowListener;
      Arr3InnerOnShowListener = array of Arr2InnerOnShowListener;
      InnerOnDismissListener = interface;
      Arr1InnerOnDismissListener = array of InnerOnDismissListener;
      Arr2InnerOnDismissListener = array of Arr1InnerOnDismissListener;
      Arr3InnerOnDismissListener = array of Arr2InnerOnDismissListener;
      InnerOnCancelListener = interface;
      Arr1InnerOnCancelListener = array of InnerOnCancelListener;
      Arr2InnerOnCancelListener = array of Arr1InnerOnCancelListener;
      Arr3InnerOnCancelListener = array of Arr2InnerOnCancelListener;
      InnerOnKeyListener = interface external 'android.content' name 'OnKeyListener' 
        function onKey(para1: ACDialogInterface; para2: jint; para3: AVKeyEvent): jboolean; overload;
      end;

      InnerOnMultiChoiceClickListener = interface external 'android.content' name 'OnMultiChoiceClickListener' 
        procedure onClick(para1: ACDialogInterface; para2: jint; para3: jboolean); overload;
      end;

      InnerOnClickListener = interface external 'android.content' name 'OnClickListener' 
        procedure onClick(para1: ACDialogInterface; para2: jint); overload;
      end;

      InnerOnShowListener = interface external 'android.content' name 'OnShowListener' 
        procedure onShow(para1: ACDialogInterface); overload;
      end;

      InnerOnDismissListener = interface external 'android.content' name 'OnDismissListener' 
        procedure onDismiss(para1: ACDialogInterface); overload;
      end;

      InnerOnCancelListener = interface external 'android.content' name 'OnCancelListener' 
        procedure onCancel(para1: ACDialogInterface); overload;
      end;

    const
      BUTTON1 = -1 deprecated;
      BUTTON2 = -2 deprecated;
      BUTTON3 = -3 deprecated;
      BUTTON_NEGATIVE = -2;
      BUTTON_NEUTRAL = -3;
      BUTTON_POSITIVE = -1;
    procedure cancel(); overload;
    procedure dismiss(); overload;
  end;

  ACEntity = class sealed external 'android.content' name 'Entity' (JLObject)
  public
    type
      InnerNamedContentValues = class;
      Arr1InnerNamedContentValues = array of InnerNamedContentValues;
      Arr2InnerNamedContentValues = array of Arr1InnerNamedContentValues;
      Arr3InnerNamedContentValues = array of Arr2InnerNamedContentValues;
      InnerNamedContentValues = class external 'android.content' name 'NamedContentValues' (JLObject)
      public
        final var
          furi: ANUri; external name 'uri';
          fvalues: ACContentValues; external name 'values';
      public
        constructor create(para1: ANUri; para2: ACContentValues); overload;
      end;

  public
    constructor create(para1: ACContentValues); overload;
    function getEntityValues(): ACContentValues; overload; virtual;
    function getSubValues(): JUArrayList; overload; virtual;
    procedure addSubValue(para1: ANUri; para2: ACContentValues); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ACLoader = class external 'android.content' name 'Loader' (JLObject)
  public
    type
      InnerOnLoadCanceledListener = interface;
      Arr1InnerOnLoadCanceledListener = array of InnerOnLoadCanceledListener;
      Arr2InnerOnLoadCanceledListener = array of Arr1InnerOnLoadCanceledListener;
      Arr3InnerOnLoadCanceledListener = array of Arr2InnerOnLoadCanceledListener;
      InnerOnLoadCompleteListener = interface;
      Arr1InnerOnLoadCompleteListener = array of InnerOnLoadCompleteListener;
      Arr2InnerOnLoadCompleteListener = array of Arr1InnerOnLoadCompleteListener;
      Arr3InnerOnLoadCompleteListener = array of Arr2InnerOnLoadCompleteListener;
      InnerForceLoadContentObserver = class;
      Arr1InnerForceLoadContentObserver = array of InnerForceLoadContentObserver;
      Arr2InnerForceLoadContentObserver = array of Arr1InnerForceLoadContentObserver;
      Arr3InnerForceLoadContentObserver = array of Arr2InnerForceLoadContentObserver;
      InnerOnLoadCanceledListener = interface external 'android.content' name 'OnLoadCanceledListener' 
        procedure onLoadCanceled(para1: ACLoader); overload;
      end;

      InnerOnLoadCompleteListener = interface external 'android.content' name 'OnLoadCompleteListener' 
        procedure onLoadComplete(para1: ACLoader; para2: JLObject); overload;
      end;

      InnerForceLoadContentObserver = class sealed external 'android.content' name 'ForceLoadContentObserver' 
      end;

  public
    constructor create(para1: ACContext); overload;
    procedure deliverResult(para1: JLObject); overload; virtual;
    procedure deliverCancellation(); overload; virtual;
    function getContext(): ACContext; overload; virtual;
    function getId(): jint; overload; virtual;
    procedure registerListener(para1: jint; para2: ACLoader.InnerOnLoadCompleteListener); overload; virtual;
    procedure unregisterListener(para1: ACLoader.InnerOnLoadCompleteListener); overload; virtual;
    procedure registerOnLoadCanceledListener(para1: ACLoader.InnerOnLoadCanceledListener); overload; virtual;
    procedure unregisterOnLoadCanceledListener(para1: ACLoader.InnerOnLoadCanceledListener); overload; virtual;
    function isStarted(): jboolean; overload; virtual;
    function isAbandoned(): jboolean; overload; virtual;
    function isReset(): jboolean; overload; virtual;
    procedure startLoading(); overload; virtual; final;
  strict protected
    procedure onStartLoading(); overload; virtual;
  public
    function cancelLoad(): jboolean; overload; virtual;
  strict protected
    function onCancelLoad(): jboolean; overload; virtual;
  public
    procedure forceLoad(); overload; virtual;
  strict protected
    procedure onForceLoad(); overload; virtual;
  public
    procedure stopLoading(); overload; virtual;
  strict protected
    procedure onStopLoading(); overload; virtual;
  public
    procedure abandon(); overload; virtual;
  strict protected
    procedure onAbandon(); overload; virtual;
  public
    procedure reset(); overload; virtual;
  strict protected
    procedure onReset(); overload; virtual;
  public
    function takeContentChanged(): jboolean; overload; virtual;
    procedure commitContentChanged(); overload; virtual;
    procedure rollbackContentChanged(); overload; virtual;
    procedure onContentChanged(); overload; virtual;
    function dataToString(para1: JLObject): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; para4: Arr1JLString); overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; var para4: array of JLString); overload; virtual;
  end;

  ACServiceConnection = interface external 'android.content' name 'ServiceConnection' 
    procedure onServiceConnected(para1: ACComponentName; para2: AOIBinder); overload;
    procedure onServiceDisconnected(para1: ACComponentName); overload;
  end;

  ACSharedPreferences = interface external 'android.content' name 'SharedPreferences' 
    type
      InnerOnSharedPreferenceChangeListener = interface;
      Arr1InnerOnSharedPreferenceChangeListener = array of InnerOnSharedPreferenceChangeListener;
      Arr2InnerOnSharedPreferenceChangeListener = array of Arr1InnerOnSharedPreferenceChangeListener;
      Arr3InnerOnSharedPreferenceChangeListener = array of Arr2InnerOnSharedPreferenceChangeListener;
      InnerEditor = interface;
      Arr1InnerEditor = array of InnerEditor;
      Arr2InnerEditor = array of Arr1InnerEditor;
      Arr3InnerEditor = array of Arr2InnerEditor;
      InnerOnSharedPreferenceChangeListener = interface external 'android.content' name 'OnSharedPreferenceChangeListener' 
        procedure onSharedPreferenceChanged(para1: ACSharedPreferences; para2: JLString); overload;
      end;

      InnerEditor = interface external 'android.content' name 'Editor' 
        function putString(para1: JLString; para2: JLString): ACSharedPreferences.InnerEditor; overload;
        function putStringSet(para1: JLString; para2: JUSet): ACSharedPreferences.InnerEditor; overload;
        function putInt(para1: JLString; para2: jint): ACSharedPreferences.InnerEditor; overload;
        function putLong(para1: JLString; para2: jlong): ACSharedPreferences.InnerEditor; overload;
        function putFloat(para1: JLString; para2: jfloat): ACSharedPreferences.InnerEditor; overload;
        function putBoolean(para1: JLString; para2: jboolean): ACSharedPreferences.InnerEditor; overload;
        function remove(para1: JLString): ACSharedPreferences.InnerEditor; overload;
        function clear(): ACSharedPreferences.InnerEditor; overload;
        function commit(): jboolean; overload;
        procedure apply(); overload;
      end;

    function getAll(): JUMap; overload;
    function getString(para1: JLString; para2: JLString): JLString; overload;
    function getStringSet(para1: JLString; para2: JUSet): JUSet; overload;
    function getInt(para1: JLString; para2: jint): jint; overload;
    function getLong(para1: JLString; para2: jlong): jlong; overload;
    function getFloat(para1: JLString; para2: jfloat): jfloat; overload;
    function getBoolean(para1: JLString; para2: jboolean): jboolean; overload;
    function contains(para1: JLString): jboolean; overload;
    function edit(): ACSharedPreferences.InnerEditor; overload;
    procedure registerOnSharedPreferenceChangeListener(para1: ACSharedPreferences.InnerOnSharedPreferenceChangeListener); overload;
    procedure unregisterOnSharedPreferenceChangeListener(para1: ACSharedPreferences.InnerOnSharedPreferenceChangeListener); overload;
  end;

  ACSyncContext = class external 'android.content' name 'SyncContext' (JLObject)
  public
    procedure onFinished(para1: ACSyncResult); overload; virtual;
    function getSyncContextBinder(): AOIBinder; overload; virtual;
  end;

  ACSyncStatusObserver = interface external 'android.content' name 'SyncStatusObserver' 
    procedure onStatusChanged(para1: jint); overload;
  end;

  ACUriMatcher = class external 'android.content' name 'UriMatcher' (JLObject)
  public
    const
      NO_MATCH = -1;
  public
    constructor create(para1: jint); overload;
    procedure addURI(para1: JLString; para2: JLString; para3: jint); overload; virtual;
    function match(para1: ANUri): jint; overload; virtual;
  end;

  JLAutoCloseable = interface external 'java.lang' name 'AutoCloseable' 
    procedure close(); overload;  // throws java.lang.Exception
  end;

  ACRAssetManager = class sealed external 'android.content.res' name 'AssetManager' (JLObject, JLAutoCloseable)
  public
    type
      InnerAssetInputStream = class;
      Arr1InnerAssetInputStream = array of InnerAssetInputStream;
      Arr2InnerAssetInputStream = array of Arr1InnerAssetInputStream;
      Arr3InnerAssetInputStream = array of Arr2InnerAssetInputStream;
      InnerAssetInputStream = class sealed external 'android.content.res' name 'AssetInputStream' 
      end;

  public
    const
      ACCESS_BUFFER = 3;
      ACCESS_RANDOM = 1;
      ACCESS_STREAMING = 2;
      ACCESS_UNKNOWN = 0;
  public
    procedure close(); overload; virtual;
    function open(para1: JLString): JIInputStream; overload; virtual; final;  // throws java.io.IOException
    function open(para1: JLString; para2: jint): JIInputStream; overload; virtual; final;  // throws java.io.IOException
    function openFd(para1: JLString): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.IOException
    function list(para1: JLString): Arr1JLString; overload; virtual; final;  // throws java.io.IOException
    function openNonAssetFd(para1: JLString): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.IOException
    function openNonAssetFd(para1: jint; para2: JLString): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.IOException
    function openXmlResourceParser(para1: JLString): ACRXmlResourceParser; overload; virtual; final;  // throws java.io.IOException
    function openXmlResourceParser(para1: jint; para2: JLString): ACRXmlResourceParser; overload; virtual; final;  // throws java.io.IOException
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function getLocales(): Arr1JLString; overload; virtual; final;
  end;

  ACRObbScanner = class external 'android.content.res' name 'ObbScanner' (JLObject)
  public
    class function getObbInfo(para1: JLString): ACRObbInfo; static; overload;  // throws java.io.IOException
  end;

  ACRTypedArray = class external 'android.content.res' name 'TypedArray' (JLObject)
  public
    function length(): jint; overload; virtual;
    function getIndexCount(): jint; overload; virtual;
    function getIndex(para1: jint): jint; overload; virtual;
    function getResources(): ACRResources; overload; virtual;
    function getText(para1: jint): JLCharSequence; overload; virtual;
    function getString(para1: jint): JLString; overload; virtual;
    function getNonResourceString(para1: jint): JLString; overload; virtual;
    function getBoolean(para1: jint; para2: jboolean): jboolean; overload; virtual;
    function getInt(para1: jint; para2: jint): jint; overload; virtual;
    function getFloat(para1: jint; para2: jfloat): jfloat; overload; virtual;
    function getColor(para1: jint; para2: jint): jint; overload; virtual;
    function getColorStateList(para1: jint): ACRColorStateList; overload; virtual;
    function getInteger(para1: jint; para2: jint): jint; overload; virtual;
    function getDimension(para1: jint; para2: jfloat): jfloat; overload; virtual;
    function getDimensionPixelOffset(para1: jint; para2: jint): jint; overload; virtual;
    function getDimensionPixelSize(para1: jint; para2: jint): jint; overload; virtual;
    function getLayoutDimension(para1: jint; para2: JLString): jint; overload; virtual;
    function getLayoutDimension(para1: jint; para2: jint): jint; overload; virtual;
    function getFraction(para1: jint; para2: jint; para3: jint; para4: jfloat): jfloat; overload; virtual;
    function getResourceId(para1: jint; para2: jint): jint; overload; virtual;
    function getDrawable(para1: jint): AGDDrawable; overload; virtual;
    function getTextArray(para1: jint): Arr1JLCharSequence; overload; virtual;
    function getValue(para1: jint; para2: AUTypedValue): jboolean; overload; virtual;
    function getType(para1: jint): jint; overload; virtual;
    function hasValue(para1: jint): jboolean; overload; virtual;
    function peekValue(para1: jint): AUTypedValue; overload; virtual;
    function getPositionDescription(): JLString; overload; virtual;
    procedure recycle(); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ADCharArrayBuffer = class sealed external 'android.database' name 'CharArrayBuffer' (JLObject)
  public
    var
      fdata: Arr1jchar; external name 'data';
      fsizeCopied: jint; external name 'sizeCopied';
  public
    constructor create(para1: jint); overload;
    constructor create(para1: Arr1jchar); overload;
    constructor create(const para1: array of jchar); overload;
  end;

  ADContentObserver = class abstract external 'android.database' name 'ContentObserver' (JLObject)
  public
    constructor create(para1: AOHandler); overload;
    function deliverSelfNotifications(): jboolean; overload; virtual;
    procedure onChange(para1: jboolean); overload; virtual;
    procedure onChange(para1: jboolean; para2: ANUri); overload; virtual;
    procedure dispatchChange(para1: jboolean); overload; virtual; final;
    procedure dispatchChange(para1: jboolean; para2: ANUri); overload; virtual; final;
  end;

  JICloseable = interface external 'java.io' name 'Closeable' (JLAutoCloseable)
    procedure close(); overload;  // throws java.io.IOException
  end;

  ADCursor = interface external 'android.database' name 'Cursor' (JICloseable)
    const
      FIELD_TYPE_BLOB = 4;
      FIELD_TYPE_FLOAT = 2;
      FIELD_TYPE_INTEGER = 1;
      FIELD_TYPE_NULL = 0;
      FIELD_TYPE_STRING = 3;
    function getCount(): jint; overload;
    function getPosition(): jint; overload;
    function move(para1: jint): jboolean; overload;
    function moveToPosition(para1: jint): jboolean; overload;
    function moveToFirst(): jboolean; overload;
    function moveToLast(): jboolean; overload;
    function moveToNext(): jboolean; overload;
    function moveToPrevious(): jboolean; overload;
    function isFirst(): jboolean; overload;
    function isLast(): jboolean; overload;
    function isBeforeFirst(): jboolean; overload;
    function isAfterLast(): jboolean; overload;
    function getColumnIndex(para1: JLString): jint; overload;
    function getColumnIndexOrThrow(para1: JLString): jint; overload;  // throws java.lang.IllegalArgumentException
    function getColumnName(para1: jint): JLString; overload;
    function getColumnNames(): Arr1JLString; overload;
    function getColumnCount(): jint; overload;
    function getBlob(para1: jint): Arr1jbyte; overload;
    function getString(para1: jint): JLString; overload;
    procedure copyStringToBuffer(para1: jint; para2: ADCharArrayBuffer); overload;
    function getShort(para1: jint): jshort; overload;
    function getInt(para1: jint): jint; overload;
    function getLong(para1: jint): jlong; overload;
    function getFloat(para1: jint): jfloat; overload;
    function getDouble(para1: jint): jdouble; overload;
    function getType(para1: jint): jint; overload;
    function isNull(para1: jint): jboolean; overload;
    procedure deactivate(); overload;
    function requery(): jboolean; overload;
    procedure close(); overload;
    function isClosed(): jboolean; overload;
    procedure registerContentObserver(para1: ADContentObserver); overload;
    procedure unregisterContentObserver(para1: ADContentObserver); overload;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload;
    procedure setNotificationUri(para1: ACContentResolver; para2: ANUri); overload;
    function getNotificationUri(): ANUri; overload;
    function getWantsAllOnMoveCalls(): jboolean; overload;
    function getExtras(): AOBundle; overload;
    function respond(para1: AOBundle): AOBundle; overload;
  end;

  ADDataSetObserver = class abstract external 'android.database' name 'DataSetObserver' (JLObject)
  public
    constructor create(); overload;
    procedure onChanged(); overload; virtual;
    procedure onInvalidated(); overload; virtual;
  end;

  ADDatabaseErrorHandler = interface external 'android.database' name 'DatabaseErrorHandler' 
    procedure onCorruption(para1: ADSSQLiteDatabase); overload;
  end;

  ADDatabaseUtils = class external 'android.database' name 'DatabaseUtils' (JLObject)
  public
    type
      InnerInsertHelper = class;
      Arr1InnerInsertHelper = array of InnerInsertHelper;
      Arr2InnerInsertHelper = array of Arr1InnerInsertHelper;
      Arr3InnerInsertHelper = array of Arr2InnerInsertHelper;
      InnerInsertHelper = class external 'android.database' name 'InsertHelper' (JLObject)
      public
        constructor create(para1: ADSSQLiteDatabase; para2: JLString); overload;
        function getColumnIndex(para1: JLString): jint; overload; virtual;
        procedure bind(para1: jint; para2: jdouble); overload; virtual;
        procedure bind(para1: jint; para2: jfloat); overload; virtual;
        procedure bind(para1: jint; para2: jlong); overload; virtual;
        procedure bind(para1: jint; para2: jint); overload; virtual;
        procedure bind(para1: jint; para2: jboolean); overload; virtual;
        procedure bindNull(para1: jint); overload; virtual;
        procedure bind(para1: jint; para2: Arr1jbyte); overload; virtual;
        procedure bind(para1: jint; var para2: array of jbyte); overload; virtual;
        procedure bind(para1: jint; para2: JLString); overload; virtual;
        function insert(para1: ACContentValues): jlong; overload; virtual;
        function execute(): jlong; overload; virtual;
        procedure prepareForInsert(); overload; virtual;
        procedure prepareForReplace(); overload; virtual;
        function replace(para1: ACContentValues): jlong; overload; virtual;
        procedure close(); overload; virtual;
      end;

  public
    const
      STATEMENT_ABORT = 6;
      STATEMENT_ATTACH = 3;
      STATEMENT_BEGIN = 4;
      STATEMENT_COMMIT = 5;
      STATEMENT_DDL = 8;
      STATEMENT_OTHER = 99;
      STATEMENT_PRAGMA = 7;
      STATEMENT_SELECT = 1;
      STATEMENT_UNPREPARED = 9;
      STATEMENT_UPDATE = 2;
  public
    constructor create(); overload;
    class procedure writeExceptionToParcel(para1: AOParcel; para2: JLException); static; overload; final;
    class procedure readExceptionFromParcel(para1: AOParcel); static; overload; final;
    class procedure readExceptionWithFileNotFoundExceptionFromParcel(para1: AOParcel); static; overload;  // throws java.io.FileNotFoundException
    class procedure readExceptionWithOperationApplicationExceptionFromParcel(para1: AOParcel); static; overload;  // throws android.content.OperationApplicationException
    class procedure bindObjectToProgram(para1: ADSSQLiteProgram; para2: jint; para3: JLObject); static; overload;
    class procedure appendEscapedSQLString(para1: JLStringBuilder; para2: JLString); static; overload;
    class function sqlEscapeString(para1: JLString): JLString; static; overload;
    class procedure appendValueToSql(para1: JLStringBuilder; para2: JLObject); static; overload; final;
    class function concatenateWhere(para1: JLString; para2: JLString): JLString; static; overload;
    class function getCollationKey(para1: JLString): JLString; static; overload;
    class function getHexCollationKey(para1: JLString): JLString; static; overload;
    class procedure dumpCursor(para1: ADCursor); static; overload;
    class procedure dumpCursor(para1: ADCursor; para2: JIPrintStream); static; overload;
    class procedure dumpCursor(para1: ADCursor; para2: JLStringBuilder); static; overload;
    class function dumpCursorToString(para1: ADCursor): JLString; static; overload;
    class procedure dumpCurrentRow(para1: ADCursor); static; overload;
    class procedure dumpCurrentRow(para1: ADCursor; para2: JIPrintStream); static; overload;
    class procedure dumpCurrentRow(para1: ADCursor; para2: JLStringBuilder); static; overload;
    class function dumpCurrentRowToString(para1: ADCursor): JLString; static; overload;
    class procedure cursorStringToContentValues(para1: ADCursor; para2: JLString; para3: ACContentValues); static; overload;
    class procedure cursorStringToInsertHelper(para1: ADCursor; para2: JLString; para3: ADDatabaseUtils.InnerInsertHelper; para4: jint); static; overload;
    class procedure cursorStringToContentValues(para1: ADCursor; para2: JLString; para3: ACContentValues; para4: JLString); static; overload;
    class procedure cursorIntToContentValues(para1: ADCursor; para2: JLString; para3: ACContentValues); static; overload;
    class procedure cursorIntToContentValues(para1: ADCursor; para2: JLString; para3: ACContentValues; para4: JLString); static; overload;
    class procedure cursorLongToContentValues(para1: ADCursor; para2: JLString; para3: ACContentValues); static; overload;
    class procedure cursorLongToContentValues(para1: ADCursor; para2: JLString; para3: ACContentValues; para4: JLString); static; overload;
    class procedure cursorDoubleToCursorValues(para1: ADCursor; para2: JLString; para3: ACContentValues); static; overload;
    class procedure cursorDoubleToContentValues(para1: ADCursor; para2: JLString; para3: ACContentValues; para4: JLString); static; overload;
    class procedure cursorRowToContentValues(para1: ADCursor; para2: ACContentValues); static; overload;
    class function queryNumEntries(para1: ADSSQLiteDatabase; para2: JLString): jlong; static; overload;
    class function queryNumEntries(para1: ADSSQLiteDatabase; para2: JLString; para3: JLString): jlong; static; overload;
    class function queryNumEntries(para1: ADSSQLiteDatabase; para2: JLString; para3: JLString; para4: Arr1JLString): jlong; static; overload;
    class function queryNumEntries(para1: ADSSQLiteDatabase; para2: JLString; para3: JLString; var para4: array of JLString): jlong; static; overload;
    class function longForQuery(para1: ADSSQLiteDatabase; para2: JLString; para3: Arr1JLString): jlong; static; overload;
    class function longForQuery(para1: ADSSQLiteDatabase; para2: JLString; var para3: array of JLString): jlong; static; overload;
    class function longForQuery(para1: ADSSQLiteStatement; para2: Arr1JLString): jlong; static; overload;
    class function longForQuery(para1: ADSSQLiteStatement; var para2: array of JLString): jlong; static; overload;
    class function stringForQuery(para1: ADSSQLiteDatabase; para2: JLString; para3: Arr1JLString): JLString; static; overload;
    class function stringForQuery(para1: ADSSQLiteDatabase; para2: JLString; var para3: array of JLString): JLString; static; overload;
    class function stringForQuery(para1: ADSSQLiteStatement; para2: Arr1JLString): JLString; static; overload;
    class function stringForQuery(para1: ADSSQLiteStatement; var para2: array of JLString): JLString; static; overload;
    class function blobFileDescriptorForQuery(para1: ADSSQLiteDatabase; para2: JLString; para3: Arr1JLString): AOParcelFileDescriptor; static; overload;
    class function blobFileDescriptorForQuery(para1: ADSSQLiteDatabase; para2: JLString; var para3: array of JLString): AOParcelFileDescriptor; static; overload;
    class function blobFileDescriptorForQuery(para1: ADSSQLiteStatement; para2: Arr1JLString): AOParcelFileDescriptor; static; overload;
    class function blobFileDescriptorForQuery(para1: ADSSQLiteStatement; var para2: array of JLString): AOParcelFileDescriptor; static; overload;
    class procedure cursorStringToContentValuesIfPresent(para1: ADCursor; para2: ACContentValues; para3: JLString); static; overload;
    class procedure cursorLongToContentValuesIfPresent(para1: ADCursor; para2: ACContentValues; para3: JLString); static; overload;
    class procedure cursorShortToContentValuesIfPresent(para1: ADCursor; para2: ACContentValues; para3: JLString); static; overload;
    class procedure cursorIntToContentValuesIfPresent(para1: ADCursor; para2: ACContentValues; para3: JLString); static; overload;
    class procedure cursorFloatToContentValuesIfPresent(para1: ADCursor; para2: ACContentValues; para3: JLString); static; overload;
    class procedure cursorDoubleToContentValuesIfPresent(para1: ADCursor; para2: ACContentValues; para3: JLString); static; overload;
    class procedure createDbFromSqlStatements(para1: ACContext; para2: JLString; para3: jint; para4: JLString); static; overload;
    class function getSqlStatementType(para1: JLString): jint; static; overload;
    class function appendSelectionArgs(para1: Arr1JLString; para2: Arr1JLString): Arr1JLString; static; overload;
    class function appendSelectionArgs(var para1: array of JLString; var para2: array of JLString): Arr1JLString; static; overload;
  end;

  ADObservable = class abstract external 'android.database' name 'Observable' (JLObject)
  strict protected
    final var
      fmObservers: JUArrayList; external name 'mObservers';
  public
    constructor create(); overload;
    procedure registerObserver(para1: JLObject); overload; virtual;
    procedure unregisterObserver(para1: JLObject); overload; virtual;
    procedure unregisterAll(); overload; virtual;
  end;

  ADSSQLiteClosable = class abstract external 'android.database.sqlite' name 'SQLiteClosable' (JLObject, JICloseable)
  public
    constructor create(); overload;
  strict protected
    procedure onAllReferencesReleased(); overload; virtual; abstract;
    procedure onAllReferencesReleasedFromContainer(); overload; virtual;
  public
    procedure acquireReference(); overload; virtual;
    procedure releaseReference(); overload; virtual;
    procedure releaseReferenceFromContainer(); overload; virtual;
    procedure close(); overload; virtual;
  end;

  ADSSQLiteTransactionListener = interface external 'android.database.sqlite' name 'SQLiteTransactionListener' 
    procedure onBegin(); overload;
    procedure onCommit(); overload;
    procedure onRollback(); overload;
  end;

  ADDrmConvertedStatus = class external 'android.drm' name 'DrmConvertedStatus' (JLObject)
  public
    const
      STATUS_ERROR = 3;
      STATUS_INPUTDATA_ERROR = 2;
      STATUS_OK = 1;
  public
    final var
      fconvertedData: Arr1jbyte; external name 'convertedData';
      foffset: jint; external name 'offset';
      fstatusCode: jint; external name 'statusCode';
  public
    constructor create(para1: jint; para2: Arr1jbyte; para3: jint); overload;
    constructor create(para1: jint; const para2: array of jbyte; para3: jint); overload;
  end;

  ADDrmEvent = class external 'android.drm' name 'DrmEvent' (JLObject)
  public
    const
      DRM_INFO_OBJECT = 'drm_info_object';
      DRM_INFO_STATUS_OBJECT = 'drm_info_status_object';
      TYPE_ALL_RIGHTS_REMOVED = 1001;
      TYPE_DRM_INFO_PROCESSED = 1002;
  strict protected
    constructor create(para1: jint; para2: jint; para3: JLString; para4: JUHashMap); overload;
    constructor create(para1: jint; para2: jint; para3: JLString); overload;
  public
    function getUniqueId(): jint; overload; virtual;
    function getType(): jint; overload; virtual;
    function getMessage(): JLString; overload; virtual;
    function getAttribute(para1: JLString): JLObject; overload; virtual;
  end;

  ADDrmInfo = class external 'android.drm' name 'DrmInfo' (JLObject)
  public
    constructor create(para1: jint; para2: Arr1jbyte; para3: JLString); overload;
    constructor create(para1: jint; const para2: array of jbyte; para3: JLString); overload;
    constructor create(para1: jint; para2: JLString; para3: JLString); overload;
    procedure put(para1: JLString; para2: JLObject); overload; virtual;
    function get(para1: JLString): JLObject; overload; virtual;
    function keyIterator(): JUIterator; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function getData(): Arr1jbyte; overload; virtual;
    function getMimeType(): JLString; overload; virtual;
    function getInfoType(): jint; overload; virtual;
  end;

  ADDrmInfoRequest = class external 'android.drm' name 'DrmInfoRequest' (JLObject)
  public
    const
      ACCOUNT_ID = 'account_id';
      SUBSCRIPTION_ID = 'subscription_id';
      TYPE_REGISTRATION_INFO = 1;
      TYPE_RIGHTS_ACQUISITION_INFO = 3;
      TYPE_RIGHTS_ACQUISITION_PROGRESS_INFO = 4;
      TYPE_UNREGISTRATION_INFO = 2;
  public
    constructor create(para1: jint; para2: JLString); overload;
    function getMimeType(): JLString; overload; virtual;
    function getInfoType(): jint; overload; virtual;
    procedure put(para1: JLString; para2: JLObject); overload; virtual;
    function get(para1: JLString): JLObject; overload; virtual;
    function keyIterator(): JUIterator; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
  end;

  ADDrmInfoStatus = class external 'android.drm' name 'DrmInfoStatus' (JLObject)
  public
    const
      STATUS_ERROR = 2;
      STATUS_OK = 1;
  public
    final var
      fdata: ADProcessedData; external name 'data';
      finfoType: jint; external name 'infoType';
      fmimeType: JLString; external name 'mimeType';
      fstatusCode: jint; external name 'statusCode';
  public
    constructor create(para1: jint; para2: jint; para3: ADProcessedData; para4: JLString); overload;
  end;

  ADDrmManagerClient = class external 'android.drm' name 'DrmManagerClient' (JLObject)
  public
    type
      InnerOnErrorListener = interface;
      Arr1InnerOnErrorListener = array of InnerOnErrorListener;
      Arr2InnerOnErrorListener = array of Arr1InnerOnErrorListener;
      Arr3InnerOnErrorListener = array of Arr2InnerOnErrorListener;
      InnerOnEventListener = interface;
      Arr1InnerOnEventListener = array of InnerOnEventListener;
      Arr2InnerOnEventListener = array of Arr1InnerOnEventListener;
      Arr3InnerOnEventListener = array of Arr2InnerOnEventListener;
      InnerOnInfoListener = interface;
      Arr1InnerOnInfoListener = array of InnerOnInfoListener;
      Arr2InnerOnInfoListener = array of Arr1InnerOnInfoListener;
      Arr3InnerOnInfoListener = array of Arr2InnerOnInfoListener;
      InnerOnErrorListener = interface external 'android.drm' name 'OnErrorListener' 
        procedure onError(para1: ADDrmManagerClient; para2: ADDrmErrorEvent); overload;
      end;

      InnerOnEventListener = interface external 'android.drm' name 'OnEventListener' 
        procedure onEvent(para1: ADDrmManagerClient; para2: ADDrmEvent); overload;
      end;

      InnerOnInfoListener = interface external 'android.drm' name 'OnInfoListener' 
        procedure onInfo(para1: ADDrmManagerClient; para2: ADDrmInfoEvent); overload;
      end;

  public
    const
      ERROR_NONE = 0;
      ERROR_UNKNOWN = -2000;
  public
    constructor create(para1: ACContext); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    procedure release(); overload; virtual;
    procedure setOnInfoListener(para1: ADDrmManagerClient.InnerOnInfoListener); overload; virtual;
    procedure setOnEventListener(para1: ADDrmManagerClient.InnerOnEventListener); overload; virtual;
    procedure setOnErrorListener(para1: ADDrmManagerClient.InnerOnErrorListener); overload; virtual;
    function getAvailableDrmEngines(): Arr1JLString; overload; virtual;
    function getConstraints(para1: JLString; para2: jint): ACContentValues; overload; virtual;
    function getMetadata(para1: JLString): ACContentValues; overload; virtual;
    function getConstraints(para1: ANUri; para2: jint): ACContentValues; overload; virtual;
    function getMetadata(para1: ANUri): ACContentValues; overload; virtual;
    function saveRights(para1: ADDrmRights; para2: JLString; para3: JLString): jint; overload; virtual;  // throws java.io.IOException
    function canHandle(para1: JLString; para2: JLString): jboolean; overload; virtual;
    function canHandle(para1: ANUri; para2: JLString): jboolean; overload; virtual;
    function processDrmInfo(para1: ADDrmInfo): jint; overload; virtual;
    function acquireDrmInfo(para1: ADDrmInfoRequest): ADDrmInfo; overload; virtual;
    function acquireRights(para1: ADDrmInfoRequest): jint; overload; virtual;
    function getDrmObjectType(para1: JLString; para2: JLString): jint; overload; virtual;
    function getDrmObjectType(para1: ANUri; para2: JLString): jint; overload; virtual;
    function getOriginalMimeType(para1: JLString): JLString; overload; virtual;
    function getOriginalMimeType(para1: ANUri): JLString; overload; virtual;
    function checkRightsStatus(para1: JLString): jint; overload; virtual;
    function checkRightsStatus(para1: ANUri): jint; overload; virtual;
    function checkRightsStatus(para1: JLString; para2: jint): jint; overload; virtual;
    function checkRightsStatus(para1: ANUri; para2: jint): jint; overload; virtual;
    function removeRights(para1: JLString): jint; overload; virtual;
    function removeRights(para1: ANUri): jint; overload; virtual;
    function removeAllRights(): jint; overload; virtual;
    function openConvertSession(para1: JLString): jint; overload; virtual;
    function convertData(para1: jint; para2: Arr1jbyte): ADDrmConvertedStatus; overload; virtual;
    function convertData(para1: jint; var para2: array of jbyte): ADDrmConvertedStatus; overload; virtual;
    function closeConvertSession(para1: jint): ADDrmConvertedStatus; overload; virtual;
  end;

  ADDrmRights = class external 'android.drm' name 'DrmRights' (JLObject)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload;
    constructor create(para1: JIFile; para2: JLString); overload;
    constructor create(para1: ADProcessedData; para2: JLString); overload;
    function getData(): Arr1jbyte; overload; virtual;
    function getMimeType(): JLString; overload; virtual;
    function getAccountId(): JLString; overload; virtual;
    function getSubscriptionId(): JLString; overload; virtual;
  end;

  ADDrmStore = class external 'android.drm' name 'DrmStore' (JLObject)
  public
    type
      InnerRightsStatus = class;
      Arr1InnerRightsStatus = array of InnerRightsStatus;
      Arr2InnerRightsStatus = array of Arr1InnerRightsStatus;
      Arr3InnerRightsStatus = array of Arr2InnerRightsStatus;
      InnerAction = class;
      Arr1InnerAction = array of InnerAction;
      Arr2InnerAction = array of Arr1InnerAction;
      Arr3InnerAction = array of Arr2InnerAction;
      InnerPlayback = class;
      Arr1InnerPlayback = array of InnerPlayback;
      Arr2InnerPlayback = array of Arr1InnerPlayback;
      Arr3InnerPlayback = array of Arr2InnerPlayback;
      InnerDrmObjectType = class;
      Arr1InnerDrmObjectType = array of InnerDrmObjectType;
      Arr2InnerDrmObjectType = array of Arr1InnerDrmObjectType;
      Arr3InnerDrmObjectType = array of Arr2InnerDrmObjectType;
      InnerConstraintsColumns = interface;
      Arr1InnerConstraintsColumns = array of InnerConstraintsColumns;
      Arr2InnerConstraintsColumns = array of Arr1InnerConstraintsColumns;
      Arr3InnerConstraintsColumns = array of Arr2InnerConstraintsColumns;
      InnerRightsStatus = class external 'android.drm' name 'RightsStatus' (JLObject)
      public
        const
          RIGHTS_EXPIRED = 2;
          RIGHTS_INVALID = 1;
          RIGHTS_NOT_ACQUIRED = 3;
          RIGHTS_VALID = 0;
      public
        constructor create(); overload;
      end;

      InnerAction = class external 'android.drm' name 'Action' (JLObject)
      public
        const
          DEFAULT = 0;
          DISPLAY = 7;
          EXECUTE = 6;
          OUTPUT = 4;
          PLAY = 1;
          PREVIEW = 5;
          RINGTONE = 2;
          TRANSFER = 3;
      public
        constructor create(); overload;
      end;

      InnerPlayback = class external 'android.drm' name 'Playback' (JLObject)
      public
        const
          PAUSE = 2;
          RESUME = 3;
          START = 0;
          STOP = 1;
      public
        constructor create(); overload;
      end;

      InnerDrmObjectType = class external 'android.drm' name 'DrmObjectType' (JLObject)
      public
        const
          CONTENT = 1;
          RIGHTS_OBJECT = 2;
          TRIGGER_OBJECT = 3;
          UNKNOWN = 0;
      public
        constructor create(); overload;
      end;

      InnerConstraintsColumns = interface external 'android.drm' name 'ConstraintsColumns' 
        const
          EXTENDED_METADATA = 'extended_metadata';
          LICENSE_AVAILABLE_TIME = 'license_available_time';
          LICENSE_EXPIRY_TIME = 'license_expiry_time';
          LICENSE_START_TIME = 'license_start_time';
          MAX_REPEAT_COUNT = 'max_repeat_count';
          REMAINING_REPEAT_COUNT = 'remaining_repeat_count';
      end;

  public
    constructor create(); overload;
  end;

  ADDrmSupportInfo = class external 'android.drm' name 'DrmSupportInfo' (JLObject)
  public
    constructor create(); overload;
    procedure addMimeType(para1: JLString); overload; virtual;
    procedure addFileSuffix(para1: JLString); overload; virtual;
    function getMimeTypeIterator(): JUIterator; overload; virtual;
    function getFileSuffixIterator(): JUIterator; overload; virtual;
    procedure setDescription(para1: JLString); overload; virtual;
    function getDescriprition(): JLString; overload; virtual;
    function getDescription(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  ADDrmUtils = class external 'android.drm' name 'DrmUtils' (JLObject)
  public
    type
      InnerExtendedMetadataParser = class;
      Arr1InnerExtendedMetadataParser = array of InnerExtendedMetadataParser;
      Arr2InnerExtendedMetadataParser = array of Arr1InnerExtendedMetadataParser;
      Arr3InnerExtendedMetadataParser = array of Arr2InnerExtendedMetadataParser;
      InnerExtendedMetadataParser = class external 'android.drm' name 'ExtendedMetadataParser' (JLObject)
      public
        function iterator(): JUIterator; overload; virtual;
        function keyIterator(): JUIterator; overload; virtual;
        function get(para1: JLString): JLString; overload; virtual;
      end;

  public
    constructor create(); overload;
    class function getExtendedMetadataParser(para1: Arr1jbyte): ADDrmUtils.InnerExtendedMetadataParser; static; overload;
    class function getExtendedMetadataParser(var para1: array of jbyte): ADDrmUtils.InnerExtendedMetadataParser; static; overload;
  end;

  ADProcessedData = class external 'android.drm' name 'ProcessedData' (JLObject)
  public
    function getData(): Arr1jbyte; overload; virtual;
    function getAccountId(): JLString; overload; virtual;
    function getSubscriptionId(): JLString; overload; virtual;
  end;

  AGGestureLibraries = class sealed external 'android.gesture' name 'GestureLibraries' (JLObject)
  public
    class function fromFile(para1: JLString): AGGestureLibrary; static; overload;
    class function fromFile(para1: JIFile): AGGestureLibrary; static; overload;
    class function fromPrivateFile(para1: ACContext; para2: JLString): AGGestureLibrary; static; overload;
    class function fromRawResource(para1: ACContext; para2: jint): AGGestureLibrary; static; overload;
  end;

  AGGestureLibrary = class abstract external 'android.gesture' name 'GestureLibrary' (JLObject)
  strict protected
    final var
      fmStore: AGGestureStore; external name 'mStore';
  strict protected
    constructor create(); overload;
  public
    function save(): jboolean; overload; virtual; abstract;
    function load(): jboolean; overload; virtual; abstract;
    function isReadOnly(): jboolean; overload; virtual;
    procedure setOrientationStyle(para1: jint); overload; virtual;
    function getOrientationStyle(): jint; overload; virtual;
    procedure setSequenceType(para1: jint); overload; virtual;
    function getSequenceType(): jint; overload; virtual;
    function getGestureEntries(): JUSet; overload; virtual;
    function recognize(para1: AGGesture): JUArrayList; overload; virtual;
    procedure addGesture(para1: JLString; para2: AGGesture); overload; virtual;
    procedure removeGesture(para1: JLString; para2: AGGesture); overload; virtual;
    procedure removeEntry(para1: JLString); overload; virtual;
    function getGestures(para1: JLString): JUArrayList; overload; virtual;
  end;

  AGGesturePoint = class external 'android.gesture' name 'GesturePoint' (JLObject)
  public
    final var
      ftimestamp: jlong; external name 'timestamp';
      fx: jfloat; external name 'x';
      fy: jfloat; external name 'y';
  public
    constructor create(para1: jfloat; para2: jfloat; para3: jlong); overload;
    function clone(): JLObject; overload; virtual;
  end;

  AGGestureStore = class external 'android.gesture' name 'GestureStore' (JLObject)
  public
    const
      ORIENTATION_INVARIANT = 1;
      ORIENTATION_SENSITIVE = 2;
      SEQUENCE_INVARIANT = 1;
      SEQUENCE_SENSITIVE = 2;
  public
    constructor create(); overload;
    procedure setOrientationStyle(para1: jint); overload; virtual;
    function getOrientationStyle(): jint; overload; virtual;
    procedure setSequenceType(para1: jint); overload; virtual;
    function getSequenceType(): jint; overload; virtual;
    function getGestureEntries(): JUSet; overload; virtual;
    function recognize(para1: AGGesture): JUArrayList; overload; virtual;
    procedure addGesture(para1: JLString; para2: AGGesture); overload; virtual;
    procedure removeGesture(para1: JLString; para2: AGGesture); overload; virtual;
    procedure removeEntry(para1: JLString); overload; virtual;
    function getGestures(para1: JLString): JUArrayList; overload; virtual;
    function hasChanged(): jboolean; overload; virtual;
    procedure save(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    procedure save(para1: JIOutputStream; para2: jboolean); overload; virtual;  // throws java.io.IOException
    procedure load(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    procedure load(para1: JIInputStream; para2: jboolean); overload; virtual;  // throws java.io.IOException
  end;

  AGGestureStroke = class external 'android.gesture' name 'GestureStroke' (JLObject)
  public
    final var
      fboundingBox: AGRectF; external name 'boundingBox';
      flength: jfloat; external name 'length';
      fpoints: Arr1jfloat; external name 'points';
  public
    constructor create(para1: JUArrayList); overload;
    function clone(): JLObject; overload; virtual;
    function getPath(): AGPath; overload; virtual;
    function toPath(para1: jfloat; para2: jfloat; para3: jint): AGPath; overload; virtual;
    procedure clearPath(); overload; virtual;
    function computeOrientedBoundingBox(): AGOrientedBoundingBox; overload; virtual;
  end;

  AGGestureUtils = class sealed external 'android.gesture' name 'GestureUtils' (JLObject)
  public
    class function spatialSampling(para1: AGGesture; para2: jint): Arr1jfloat; static; overload;
    class function spatialSampling(para1: AGGesture; para2: jint; para3: jboolean): Arr1jfloat; static; overload;
    class function temporalSampling(para1: AGGestureStroke; para2: jint): Arr1jfloat; static; overload;
    class function computeOrientedBoundingBox(para1: JUArrayList): AGOrientedBoundingBox; static; overload;
    class function computeOrientedBoundingBox(para1: Arr1jfloat): AGOrientedBoundingBox; static; overload;
    class function computeOrientedBoundingBox(var para1: array of jfloat): AGOrientedBoundingBox; static; overload;
  end;

  AGOrientedBoundingBox = class external 'android.gesture' name 'OrientedBoundingBox' (JLObject)
  public
    final var
      fcenterX: jfloat; external name 'centerX';
      fcenterY: jfloat; external name 'centerY';
      fheight: jfloat; external name 'height';
      forientation: jfloat; external name 'orientation';
      fsquareness: jfloat; external name 'squareness';
      fwidth: jfloat; external name 'width';
  end;

  AGPrediction = class external 'android.gesture' name 'Prediction' (JLObject)
  public
    final var
      fname: JLString; external name 'name';
  public
    var
      fscore: jdouble; external name 'score';
  public
    function toString(): JLString; overload; virtual;
  end;

  AGCamera = class external 'android.graphics' name 'Camera' (JLObject)
  public
    constructor create(); overload;
    procedure save(); overload; virtual;
    procedure restore(); overload; virtual;
    procedure translate(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    procedure rotateX(para1: jfloat); overload; virtual;
    procedure rotateY(para1: jfloat); overload; virtual;
    procedure rotateZ(para1: jfloat); overload; virtual;
    procedure rotate(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    function getLocationX(): jfloat; overload; virtual;
    function getLocationY(): jfloat; overload; virtual;
    function getLocationZ(): jfloat; overload; virtual;
    procedure setLocation(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    procedure getMatrix(para1: AGMatrix); overload; virtual;
    procedure applyToCanvas(para1: AGCanvas); overload; virtual;
    function dotWithNormal(para1: jfloat; para2: jfloat; para3: jfloat): jfloat; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGColor = class external 'android.graphics' name 'Color' (JLObject)
  public
    const
      BLACK = -16777216;
      BLUE = -16776961;
      CYAN = -16711681;
      DKGRAY = -12303292;
      GRAY = -7829368;
      GREEN = -16711936;
      LTGRAY = -3355444;
      MAGENTA = -65281;
      RED = -65536;
      TRANSPARENT = 0;
      WHITE = -1;
      YELLOW = -256;
  public
    constructor create(); overload;
    class function alpha(para1: jint): jint; static; overload;
    class function red_(para1: jint): jint; static; external name 'red'; overload;
    class function green_(para1: jint): jint; static; external name 'green'; overload;
    class function blue_(para1: jint): jint; static; external name 'blue'; overload;
    class function rgb(para1: jint; para2: jint; para3: jint): jint; static; overload;
    class function argb(para1: jint; para2: jint; para3: jint; para4: jint): jint; static; overload;
    class function parseColor(para1: JLString): jint; static; overload;
    class procedure RGBToHSV(para1: jint; para2: jint; para3: jint; para4: Arr1jfloat); static; overload;
    class procedure RGBToHSV(para1: jint; para2: jint; para3: jint; var para4: array of jfloat); static; overload;
    class procedure colorToHSV(para1: jint; para2: Arr1jfloat); static; overload;
    class procedure colorToHSV(para1: jint; var para2: array of jfloat); static; overload;
    class function HSVToColor(para1: Arr1jfloat): jint; static; overload;
    class function HSVToColor(var para1: array of jfloat): jint; static; overload;
    class function HSVToColor(para1: jint; para2: Arr1jfloat): jint; static; overload;
    class function HSVToColor(para1: jint; var para2: array of jfloat): jint; static; overload;
  end;

  AGColorFilter = class external 'android.graphics' name 'ColorFilter' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGColorMatrix = class external 'android.graphics' name 'ColorMatrix' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: Arr1jfloat); overload;
    constructor create(const para1: array of jfloat); overload;
    constructor create(para1: AGColorMatrix); overload;
    function getArray(): Arr1jfloat; overload; virtual; final;
    procedure reset(); overload; virtual;
    procedure &set(para1: AGColorMatrix); overload; virtual;
    procedure &set(para1: Arr1jfloat); overload; virtual;
    procedure &set(var para1: array of jfloat); overload; virtual;
    procedure setScale(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure setRotate(para1: jint; para2: jfloat); overload; virtual;
    procedure setConcat(para1: AGColorMatrix; para2: AGColorMatrix); overload; virtual;
    procedure preConcat(para1: AGColorMatrix); overload; virtual;
    procedure postConcat(para1: AGColorMatrix); overload; virtual;
    procedure setSaturation(para1: jfloat); overload; virtual;
    procedure setRGB2YUV(); overload; virtual;
    procedure setYUV2RGB(); overload; virtual;
  end;

  AGDrawFilter = class external 'android.graphics' name 'DrawFilter' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGImageFormat = class external 'android.graphics' name 'ImageFormat' (JLObject)
  public
    const
      JPEG = 256;
      NV16 = 16;
      NV21 = 17;
      RAW10 = 37;
      RAW_SENSOR = 32;
      RGB_565 = 4;
      UNKNOWN = 0;
      YUV_420_888 = 35;
      YUY2 = 20;
      YV12 = 842094169;
  public
    constructor create(); overload;
    class function getBitsPerPixel(para1: jint): jint; static; overload;
  end;

  AGMaskFilter = class external 'android.graphics' name 'MaskFilter' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGMovie = class external 'android.graphics' name 'Movie' (JLObject)
  public
    function width(): jint; overload; virtual;
    function height(): jint; overload; virtual;
    function isOpaque(): jboolean; overload; virtual;
    function duration(): jint; overload; virtual;
    function setTime(para1: jint): jboolean; overload; virtual;
    procedure draw(para1: AGCanvas; para2: jfloat; para3: jfloat; para4: AGPaint); overload; virtual;
    procedure draw(para1: AGCanvas; para2: jfloat; para3: jfloat); overload; virtual;
    class function decodeStream(para1: JIInputStream): AGMovie; static; overload;
    class function decodeByteArray(para1: Arr1jbyte; para2: jint; para3: jint): AGMovie; static; overload;
    class function decodeByteArray(var para1: array of jbyte; para2: jint; para3: jint): AGMovie; static; overload;
    class function decodeFile(para1: JLString): AGMovie; static; overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGNinePatch = class external 'android.graphics' name 'NinePatch' (JLObject)
  public
    constructor create(para1: AGBitmap; para2: Arr1jbyte); overload;
    constructor create(para1: AGBitmap; const para2: array of jbyte); overload;
    constructor create(para1: AGBitmap; para2: Arr1jbyte; para3: JLString); overload;
    constructor create(para1: AGBitmap; const para2: array of jbyte; para3: JLString); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function getName(): JLString; overload; virtual;
    function getPaint(): AGPaint; overload; virtual;
    procedure setPaint(para1: AGPaint); overload; virtual;
    function getBitmap(): AGBitmap; overload; virtual;
    procedure draw(para1: AGCanvas; para2: AGRectF); overload; virtual;
    procedure draw(para1: AGCanvas; para2: AGRect); overload; virtual;
    procedure draw(para1: AGCanvas; para2: AGRect; para3: AGPaint); overload; virtual;
    function getDensity(): jint; overload; virtual;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
    function hasAlpha(): jboolean; overload; virtual; final;
    function getTransparentRegion(para1: AGRect): AGRegion; overload; virtual; final;
    class function isNinePatchChunk(para1: Arr1jbyte): jboolean; static; overload;
    class function isNinePatchChunk(var para1: array of jbyte): jboolean; static; overload;
  end;

  AGPathEffect = class external 'android.graphics' name 'PathEffect' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGPathMeasure = class external 'android.graphics' name 'PathMeasure' (JLObject)
  public
    const
      POSITION_MATRIX_FLAG = 1;
      TANGENT_MATRIX_FLAG = 2;
  public
    constructor create(); overload;
    constructor create(para1: AGPath; para2: jboolean); overload;
    procedure setPath(para1: AGPath; para2: jboolean); overload; virtual;
    function getLength(): jfloat; overload; virtual;
    function getPosTan(para1: jfloat; para2: Arr1jfloat; para3: Arr1jfloat): jboolean; overload; virtual;
    function getPosTan(para1: jfloat; var para2: array of jfloat; var para3: array of jfloat): jboolean; overload; virtual;
    function getMatrix(para1: jfloat; para2: AGMatrix; para3: jint): jboolean; overload; virtual;
    function getSegment(para1: jfloat; para2: jfloat; para3: AGPath; para4: jboolean): jboolean; overload; virtual;
    function isClosed(): jboolean; overload; virtual;
    function nextContour(): jboolean; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGPicture = class external 'android.graphics' name 'Picture' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: AGPicture); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function beginRecording(para1: jint; para2: jint): AGCanvas; overload; virtual;
    procedure endRecording(); overload; virtual;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    class function createFromStream(para1: JIInputStream): AGPicture; static; overload;
    procedure writeToStream(para1: JIOutputStream); overload; virtual;
  end;

  AGPixelFormat = class external 'android.graphics' name 'PixelFormat' (JLObject)
  public
    const
      A_8 = 8 deprecated;
      JPEG = 256 deprecated;
      LA_88 = 10 deprecated;
      L_8 = 9 deprecated;
      OPAQUE = -1;
      RGBA_4444 = 7 deprecated;
      RGBA_5551 = 6 deprecated;
      RGBA_8888 = 1;
      RGBX_8888 = 2;
      RGB_332 = 11 deprecated;
      RGB_565 = 4;
      RGB_888 = 3;
      TRANSLUCENT = -3;
      TRANSPARENT = -2;
      UNKNOWN = 0;
      YCbCr_420_SP = 17 deprecated;
      YCbCr_422_I = 20 deprecated;
      YCbCr_422_SP = 16 deprecated;
  public
    var
      fbitsPerPixel: jint; external name 'bitsPerPixel';
      fbytesPerPixel: jint; external name 'bytesPerPixel';
  public
    constructor create(); overload;
    class procedure getPixelFormatInfo(para1: jint; para2: AGPixelFormat); static; overload;
    class function formatHasAlpha(para1: jint): jboolean; static; overload;
  end;

  AGRasterizer = class external 'android.graphics' name 'Rasterizer' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGRegionIterator = class external 'android.graphics' name 'RegionIterator' (JLObject)
  public
    constructor create(para1: AGRegion); overload;
    function next(para1: AGRect): jboolean; overload; virtual; final;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGTypeface = class external 'android.graphics' name 'Typeface' (JLObject)
  public
    const
      BOLD = 1;
      BOLD_ITALIC = 3;
  public
    final class var
      fDEFAULT: AGTypeface; external name 'DEFAULT';
      fDEFAULT_BOLD: AGTypeface; external name 'DEFAULT_BOLD';
  public
    const
      ITALIC = 2;
  public
    final class var
      fMONOSPACE: AGTypeface; external name 'MONOSPACE';
  public
    const
      NORMAL = 0;
  public
    final class var
      fSANS_SERIF: AGTypeface; external name 'SANS_SERIF';
      fSERIF: AGTypeface; external name 'SERIF';
  public
    function getStyle(): jint; overload; virtual;
    function isBold(): jboolean; overload; virtual; final;
    function isItalic(): jboolean; overload; virtual; final;
    class function create_(para1: JLString; para2: jint): AGTypeface; static; external name 'create'; overload;
    class function create_(para1: AGTypeface; para2: jint): AGTypeface; static; external name 'create'; overload;
    class function defaultFromStyle(para1: jint): AGTypeface; static; overload;
    class function createFromAsset(para1: ACRAssetManager; para2: JLString): AGTypeface; static; overload;
    class function createFromFile(para1: JIFile): AGTypeface; static; overload;
    class function createFromFile(para1: JLString): AGTypeface; static; overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  AGXfermode = class external 'android.graphics' name 'Xfermode' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGYuvImage = class external 'android.graphics' name 'YuvImage' (JLObject)
  public
    constructor create(para1: Arr1jbyte; para2: jint; para3: jint; para4: jint; para5: Arr1jint); overload;
    constructor create(const para1: array of jbyte; para2: jint; para3: jint; para4: jint; const para5: array of jint); overload;
    function compressToJpeg(para1: AGRect; para2: jint; para3: JIOutputStream): jboolean; overload; virtual;
    function getYuvData(): Arr1jbyte; overload; virtual;
    function getYuvFormat(): jint; overload; virtual;
    function getStrides(): Arr1jint; overload; virtual;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
  end;

  AGDAnimatable = interface external 'android.graphics.drawable' name 'Animatable' 
    procedure start(); overload;
    procedure stop(); overload;
    function isRunning(): jboolean; overload;
  end;

  AHCamera = class external 'android.hardware' name 'Camera' (JLObject)
  public
    type
      InnerArea = class;
      Arr1InnerArea = array of InnerArea;
      Arr2InnerArea = array of Arr1InnerArea;
      Arr3InnerArea = array of Arr2InnerArea;
      InnerSize = class;
      Arr1InnerSize = array of InnerSize;
      Arr2InnerSize = array of Arr1InnerSize;
      Arr3InnerSize = array of Arr2InnerSize;
      InnerErrorCallback = interface;
      Arr1InnerErrorCallback = array of InnerErrorCallback;
      Arr2InnerErrorCallback = array of Arr1InnerErrorCallback;
      Arr3InnerErrorCallback = array of Arr2InnerErrorCallback;
      InnerFace = class;
      Arr1InnerFace = array of InnerFace;
      Arr2InnerFace = array of Arr1InnerFace;
      Arr3InnerFace = array of Arr2InnerFace;
      InnerOnZoomChangeListener = interface;
      Arr1InnerOnZoomChangeListener = array of InnerOnZoomChangeListener;
      Arr2InnerOnZoomChangeListener = array of Arr1InnerOnZoomChangeListener;
      Arr3InnerOnZoomChangeListener = array of Arr2InnerOnZoomChangeListener;
      InnerPictureCallback = interface;
      Arr1InnerPictureCallback = array of InnerPictureCallback;
      Arr2InnerPictureCallback = array of Arr1InnerPictureCallback;
      Arr3InnerPictureCallback = array of Arr2InnerPictureCallback;
      InnerShutterCallback = interface;
      Arr1InnerShutterCallback = array of InnerShutterCallback;
      Arr2InnerShutterCallback = array of Arr1InnerShutterCallback;
      Arr3InnerShutterCallback = array of Arr2InnerShutterCallback;
      InnerAutoFocusMoveCallback = interface;
      Arr1InnerAutoFocusMoveCallback = array of InnerAutoFocusMoveCallback;
      Arr2InnerAutoFocusMoveCallback = array of Arr1InnerAutoFocusMoveCallback;
      Arr3InnerAutoFocusMoveCallback = array of Arr2InnerAutoFocusMoveCallback;
      InnerAutoFocusCallback = interface;
      Arr1InnerAutoFocusCallback = array of InnerAutoFocusCallback;
      Arr2InnerAutoFocusCallback = array of Arr1InnerAutoFocusCallback;
      Arr3InnerAutoFocusCallback = array of Arr2InnerAutoFocusCallback;
      InnerPreviewCallback = interface;
      Arr1InnerPreviewCallback = array of InnerPreviewCallback;
      Arr2InnerPreviewCallback = array of Arr1InnerPreviewCallback;
      Arr3InnerPreviewCallback = array of Arr2InnerPreviewCallback;
      InnerCameraInfo = class;
      Arr1InnerCameraInfo = array of InnerCameraInfo;
      Arr2InnerCameraInfo = array of Arr1InnerCameraInfo;
      Arr3InnerCameraInfo = array of Arr2InnerCameraInfo;
      InnerParameters = class;
      Arr1InnerParameters = array of InnerParameters;
      Arr2InnerParameters = array of Arr1InnerParameters;
      Arr3InnerParameters = array of Arr2InnerParameters;
      InnerFaceDetectionListener = interface;
      Arr1InnerFaceDetectionListener = array of InnerFaceDetectionListener;
      Arr2InnerFaceDetectionListener = array of Arr1InnerFaceDetectionListener;
      Arr3InnerFaceDetectionListener = array of Arr2InnerFaceDetectionListener;
      InnerArea = class external 'android.hardware' name 'Area' (JLObject)
      public
        var
          frect: AGRect; external name 'rect';
          fweight: jint; external name 'weight';
      public
        constructor create(para1: AGRect; para2: jint); overload;
        function equals(para1: JLObject): jboolean; overload; virtual;
      end;

      InnerSize = class external 'android.hardware' name 'Size' 
      end;

      InnerErrorCallback = interface external 'android.hardware' name 'ErrorCallback' 
        procedure onError(para1: jint; para2: AHCamera); overload;
      end;

      InnerFace = class external 'android.hardware' name 'Face' (JLObject)
      public
        var
          fid: jint; external name 'id';
          fleftEye: AGPoint; external name 'leftEye';
          fmouth: AGPoint; external name 'mouth';
          frect: AGRect; external name 'rect';
          frightEye: AGPoint; external name 'rightEye';
          fscore: jint; external name 'score';
      public
        constructor create(); overload;
      end;

      InnerOnZoomChangeListener = interface external 'android.hardware' name 'OnZoomChangeListener' 
        procedure onZoomChange(para1: jint; para2: jboolean; para3: AHCamera); overload;
      end;

      InnerPictureCallback = interface external 'android.hardware' name 'PictureCallback' 
        procedure onPictureTaken(para1: Arr1jbyte; para2: AHCamera); overload;
        procedure onPictureTaken(var para1: array of jbyte; para2: AHCamera); overload;
      end;

      InnerShutterCallback = interface external 'android.hardware' name 'ShutterCallback' 
        procedure onShutter(); overload;
      end;

      InnerAutoFocusMoveCallback = interface external 'android.hardware' name 'AutoFocusMoveCallback' 
        procedure onAutoFocusMoving(para1: jboolean; para2: AHCamera); overload;
      end;

      InnerAutoFocusCallback = interface external 'android.hardware' name 'AutoFocusCallback' 
        procedure onAutoFocus(para1: jboolean; para2: AHCamera); overload;
      end;

      InnerPreviewCallback = interface external 'android.hardware' name 'PreviewCallback' 
        procedure onPreviewFrame(para1: Arr1jbyte; para2: AHCamera); overload;
        procedure onPreviewFrame(var para1: array of jbyte; para2: AHCamera); overload;
      end;

      InnerCameraInfo = class external 'android.hardware' name 'CameraInfo' (JLObject)
      public
        const
          CAMERA_FACING_BACK = 0;
          CAMERA_FACING_FRONT = 1;
      public
        var
          fcanDisableShutterSound: jboolean; external name 'canDisableShutterSound';
          ffacing: jint; external name 'facing';
          forientation: jint; external name 'orientation';
      public
        constructor create(); overload;
      end;

      InnerParameters = class external 'android.hardware' name 'Parameters' 
      end;

      InnerFaceDetectionListener = interface external 'android.hardware' name 'FaceDetectionListener' 
        procedure onFaceDetection(para1: AHCamera.Arr1InnerFace; para2: AHCamera); overload;
        procedure onFaceDetection(var para1: array of AHCamera.InnerFace; para2: AHCamera); overload;
      end;

  public
    const
      ACTION_NEW_PICTURE = 'android.hardware.action.NEW_PICTURE';
      ACTION_NEW_VIDEO = 'android.hardware.action.NEW_VIDEO';
      CAMERA_ERROR_SERVER_DIED = 100;
      CAMERA_ERROR_UNKNOWN = 1;
  public
    class function getNumberOfCameras(): jint; static; overload;
    class procedure getCameraInfo(para1: jint; para2: AHCamera.InnerCameraInfo); static; overload;
    class function open(para1: jint): AHCamera; static; overload;
    class function open(): AHCamera; static; overload;
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure release(); overload; virtual; final;
    procedure unlock(); overload; virtual; final;
    procedure lock(); overload; virtual; final;
    procedure reconnect(); overload; virtual; final;  // throws java.io.IOException
    procedure setPreviewDisplay(para1: AVSurfaceHolder); overload; virtual; final;  // throws java.io.IOException
    procedure setPreviewTexture(para1: AGSurfaceTexture); overload; virtual; final;  // throws java.io.IOException
    procedure startPreview(); overload; virtual; final;
    procedure stopPreview(); overload; virtual; final;
    procedure setPreviewCallback(para1: AHCamera.InnerPreviewCallback); overload; virtual; final;
    procedure setOneShotPreviewCallback(para1: AHCamera.InnerPreviewCallback); overload; virtual; final;
    procedure setPreviewCallbackWithBuffer(para1: AHCamera.InnerPreviewCallback); overload; virtual; final;
    procedure addCallbackBuffer(para1: Arr1jbyte); overload; virtual; final;
    procedure addCallbackBuffer(var para1: array of jbyte); overload; virtual; final;
    procedure autoFocus(para1: AHCamera.InnerAutoFocusCallback); overload; virtual; final;
    procedure cancelAutoFocus(); overload; virtual; final;
    procedure setAutoFocusMoveCallback(para1: AHCamera.InnerAutoFocusMoveCallback); overload; virtual;
    procedure takePicture(para1: AHCamera.InnerShutterCallback; para2: AHCamera.InnerPictureCallback; para3: AHCamera.InnerPictureCallback); overload; virtual; final;
    procedure takePicture(para1: AHCamera.InnerShutterCallback; para2: AHCamera.InnerPictureCallback; para3: AHCamera.InnerPictureCallback; para4: AHCamera.InnerPictureCallback); overload; virtual; final;
    procedure startSmoothZoom(para1: jint); overload; virtual; final;
    procedure stopSmoothZoom(); overload; virtual; final;
    procedure setDisplayOrientation(para1: jint); overload; virtual; final;
    function enableShutterSound(para1: jboolean): jboolean; overload; virtual; final;
    procedure setZoomChangeListener(para1: AHCamera.InnerOnZoomChangeListener); overload; virtual; final;
    procedure setFaceDetectionListener(para1: AHCamera.InnerFaceDetectionListener); overload; virtual; final;
    procedure startFaceDetection(); overload; virtual; final;
    procedure stopFaceDetection(); overload; virtual; final;
    procedure setErrorCallback(para1: AHCamera.InnerErrorCallback); overload; virtual; final;
    procedure setParameters(para1: AHCamera.InnerParameters); overload; virtual;
    function getParameters(): AHCamera.InnerParameters; overload; virtual;
  end;

  AHGeomagneticField = class external 'android.hardware' name 'GeomagneticField' (JLObject)
  public
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jlong); overload;
    function getX(): jfloat; overload; virtual;
    function getY(): jfloat; overload; virtual;
    function getZ(): jfloat; overload; virtual;
    function getDeclination(): jfloat; overload; virtual;
    function getInclination(): jfloat; overload; virtual;
    function getHorizontalStrength(): jfloat; overload; virtual;
    function getFieldStrength(): jfloat; overload; virtual;
  end;

  AHSensor = class sealed external 'android.hardware' name 'Sensor' (JLObject)
  public
    const
      REPORTING_MODE_CONTINUOUS = 0;
      REPORTING_MODE_ONE_SHOT = 2;
      REPORTING_MODE_ON_CHANGE = 1;
      REPORTING_MODE_SPECIAL_TRIGGER = 3;
      STRING_TYPE_ACCELEROMETER = 'android.sensor.accelerometer';
      STRING_TYPE_AMBIENT_TEMPERATURE = 'android.sensor.ambient_temperature';
      STRING_TYPE_GAME_ROTATION_VECTOR = 'android.sensor.game_rotation_vector';
      STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR = 'android.sensor.geomagnetic_rotation_vector';
      STRING_TYPE_GRAVITY = 'android.sensor.gravity';
      STRING_TYPE_GYROSCOPE = 'android.sensor.gyroscope';
      STRING_TYPE_GYROSCOPE_UNCALIBRATED = 'android.sensor.gyroscope_uncalibrated';
      STRING_TYPE_HEART_RATE = 'android.sensor.heart_rate';
      STRING_TYPE_LIGHT = 'android.sensor.light';
      STRING_TYPE_LINEAR_ACCELERATION = 'android.sensor.linear_acceleration';
      STRING_TYPE_MAGNETIC_FIELD = 'android.sensor.magnetic_field';
      STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED = 'android.sensor.magnetic_field_uncalibrated';
      STRING_TYPE_ORIENTATION = 'android.sensor.orientation' deprecated;
      STRING_TYPE_PRESSURE = 'android.sensor.pressure';
      STRING_TYPE_PROXIMITY = 'android.sensor.proximity';
      STRING_TYPE_RELATIVE_HUMIDITY = 'android.sensor.relative_humidity';
      STRING_TYPE_ROTATION_VECTOR = 'android.sensor.rotation_vector';
      STRING_TYPE_SIGNIFICANT_MOTION = 'android.sensor.significant_motion';
      STRING_TYPE_STEP_COUNTER = 'android.sensor.step_counter';
      STRING_TYPE_STEP_DETECTOR = 'android.sensor.step_detector';
      STRING_TYPE_TEMPERATURE = 'android.sensor.temperature' deprecated;
      TYPE_ACCELEROMETER = 1;
      TYPE_ALL = -1;
      TYPE_AMBIENT_TEMPERATURE = 13;
      TYPE_GAME_ROTATION_VECTOR = 15;
      TYPE_GEOMAGNETIC_ROTATION_VECTOR = 20;
      TYPE_GRAVITY = 9;
      TYPE_GYROSCOPE = 4;
      TYPE_GYROSCOPE_UNCALIBRATED = 16;
      TYPE_HEART_RATE = 21;
      TYPE_LIGHT = 5;
      TYPE_LINEAR_ACCELERATION = 10;
      TYPE_MAGNETIC_FIELD = 2;
      TYPE_MAGNETIC_FIELD_UNCALIBRATED = 14;
      TYPE_ORIENTATION = 3 deprecated;
      TYPE_PRESSURE = 6;
      TYPE_PROXIMITY = 8;
      TYPE_RELATIVE_HUMIDITY = 12;
      TYPE_ROTATION_VECTOR = 11;
      TYPE_SIGNIFICANT_MOTION = 17;
      TYPE_STEP_COUNTER = 19;
      TYPE_STEP_DETECTOR = 18;
      TYPE_TEMPERATURE = 7 deprecated;
  public
    function getReportingMode(): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getVendor(): JLString; overload; virtual;
    function getType(): jint; overload; virtual;
    function getVersion(): jint; overload; virtual;
    function getMaximumRange(): jfloat; overload; virtual;
    function getResolution(): jfloat; overload; virtual;
    function getPower(): jfloat; overload; virtual;
    function getMinDelay(): jint; overload; virtual;
    function getFifoReservedEventCount(): jint; overload; virtual;
    function getFifoMaxEventCount(): jint; overload; virtual;
    function getStringType(): JLString; overload; virtual;
    function getMaxDelay(): jint; overload; virtual;
    function isWakeUpSensor(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AHSensorEvent = class external 'android.hardware' name 'SensorEvent' (JLObject)
  public
    var
      faccuracy: jint; external name 'accuracy';
      fsensor: AHSensor; external name 'sensor';
      ftimestamp: jlong; external name 'timestamp';
  public
    final var
      fvalues: Arr1jfloat; external name 'values';
  end;

  AHSensorEventListener = interface external 'android.hardware' name 'SensorEventListener' 
    procedure onSensorChanged(para1: AHSensorEvent); overload;
    procedure onAccuracyChanged(para1: AHSensor; para2: jint); overload;
  end;

  AHSensorListener = interface external 'android.hardware' name 'SensorListener' 
    procedure onSensorChanged(para1: jint; para2: Arr1jfloat); overload;
    procedure onSensorChanged(para1: jint; var para2: array of jfloat); overload;
    procedure onAccuracyChanged(para1: jint; para2: jint); overload;
  end;

  AHSensorManager = class abstract external 'android.hardware' name 'SensorManager' (JLObject)
  public
    const
      AXIS_MINUS_X = 129;
      AXIS_MINUS_Y = 130;
      AXIS_MINUS_Z = 131;
      AXIS_X = 1;
      AXIS_Y = 2;
      AXIS_Z = 3;
      DATA_X = 0 deprecated;
      DATA_Y = 1 deprecated;
      DATA_Z = 2 deprecated;
      GRAVITY_DEATH_STAR_I = jfloat(3.5303614E-7);
      GRAVITY_EARTH = jfloat(9.80665);
      GRAVITY_JUPITER = jfloat(23.12);
      GRAVITY_MARS = jfloat(3.71);
      GRAVITY_MERCURY = jfloat(3.7);
      GRAVITY_MOON = jfloat(1.6);
      GRAVITY_NEPTUNE = jfloat(11.0);
      GRAVITY_PLUTO = jfloat(0.6);
      GRAVITY_SATURN = jfloat(8.96);
      GRAVITY_SUN = jfloat(275.0);
      GRAVITY_THE_ISLAND = jfloat(4.815162);
      GRAVITY_URANUS = jfloat(8.69);
      GRAVITY_VENUS = jfloat(8.87);
      LIGHT_CLOUDY = jfloat(100.0);
      LIGHT_FULLMOON = jfloat(0.25);
      LIGHT_NO_MOON = jfloat(0.001);
      LIGHT_OVERCAST = jfloat(10000.0);
      LIGHT_SHADE = jfloat(20000.0);
      LIGHT_SUNLIGHT = jfloat(110000.0);
      LIGHT_SUNLIGHT_MAX = jfloat(120000.0);
      LIGHT_SUNRISE = jfloat(400.0);
      MAGNETIC_FIELD_EARTH_MAX = jfloat(60.0);
      MAGNETIC_FIELD_EARTH_MIN = jfloat(30.0);
      PRESSURE_STANDARD_ATMOSPHERE = jfloat(1013.25);
      RAW_DATA_INDEX = 3 deprecated;
      RAW_DATA_X = 3 deprecated;
      RAW_DATA_Y = 4 deprecated;
      RAW_DATA_Z = 5 deprecated;
      SENSOR_ACCELEROMETER = 2 deprecated;
      SENSOR_ALL = 127 deprecated;
      SENSOR_DELAY_FASTEST = 0;
      SENSOR_DELAY_GAME = 1;
      SENSOR_DELAY_NORMAL = 3;
      SENSOR_DELAY_UI = 2;
      SENSOR_LIGHT = 16 deprecated;
      SENSOR_MAGNETIC_FIELD = 8 deprecated;
      SENSOR_MAX = 64 deprecated;
      SENSOR_MIN = 1 deprecated;
      SENSOR_ORIENTATION = 1 deprecated;
      SENSOR_ORIENTATION_RAW = 128 deprecated;
      SENSOR_PROXIMITY = 32 deprecated;
      SENSOR_STATUS_ACCURACY_HIGH = 3;
      SENSOR_STATUS_ACCURACY_LOW = 1;
      SENSOR_STATUS_ACCURACY_MEDIUM = 2;
      SENSOR_STATUS_NO_CONTACT = -1;
      SENSOR_STATUS_UNRELIABLE = 0;
      SENSOR_TEMPERATURE = 4 deprecated;
      SENSOR_TRICORDER = 64 deprecated;
      STANDARD_GRAVITY = jfloat(9.80665);
  public
    function getSensors(): jint; overload; virtual;
    function getSensorList(para1: jint): JUList; overload; virtual;
    function getDefaultSensor(para1: jint): AHSensor; overload; virtual;
    function getDefaultSensor(para1: jint; para2: jboolean): AHSensor; overload; virtual;
    function registerListener(para1: AHSensorListener; para2: jint): jboolean; overload; virtual;
    function registerListener(para1: AHSensorListener; para2: jint; para3: jint): jboolean; overload; virtual;
    procedure unregisterListener(para1: AHSensorListener); overload; virtual;
    procedure unregisterListener(para1: AHSensorListener; para2: jint); overload; virtual;
    procedure unregisterListener(para1: AHSensorEventListener; para2: AHSensor); overload; virtual;
    procedure unregisterListener(para1: AHSensorEventListener); overload; virtual;
    function registerListener(para1: AHSensorEventListener; para2: AHSensor; para3: jint): jboolean; overload; virtual;
    function registerListener(para1: AHSensorEventListener; para2: AHSensor; para3: jint; para4: jint): jboolean; overload; virtual;
    function registerListener(para1: AHSensorEventListener; para2: AHSensor; para3: jint; para4: AOHandler): jboolean; overload; virtual;
    function registerListener(para1: AHSensorEventListener; para2: AHSensor; para3: jint; para4: jint; para5: AOHandler): jboolean; overload; virtual;
    function flush(para1: AHSensorEventListener): jboolean; overload; virtual;
    class function getRotationMatrix(para1: Arr1jfloat; para2: Arr1jfloat; para3: Arr1jfloat; para4: Arr1jfloat): jboolean; static; overload;
    class function getRotationMatrix(var para1: array of jfloat; var para2: array of jfloat; var para3: array of jfloat; var para4: array of jfloat): jboolean; static; overload;
    class function getInclination(para1: Arr1jfloat): jfloat; static; overload;
    class function getInclination(var para1: array of jfloat): jfloat; static; overload;
    class function remapCoordinateSystem(para1: Arr1jfloat; para2: jint; para3: jint; para4: Arr1jfloat): jboolean; static; overload;
    class function remapCoordinateSystem(var para1: array of jfloat; para2: jint; para3: jint; var para4: array of jfloat): jboolean; static; overload;
    class function getOrientation(para1: Arr1jfloat; para2: Arr1jfloat): Arr1jfloat; static; overload;
    class function getOrientation(var para1: array of jfloat; var para2: array of jfloat): Arr1jfloat; static; overload;
    class function getAltitude(para1: jfloat; para2: jfloat): jfloat; static; overload;
    class procedure getAngleChange(para1: Arr1jfloat; para2: Arr1jfloat; para3: Arr1jfloat); static; overload;
    class procedure getAngleChange(var para1: array of jfloat; var para2: array of jfloat; var para3: array of jfloat); static; overload;
    class procedure getRotationMatrixFromVector(para1: Arr1jfloat; para2: Arr1jfloat); static; overload;
    class procedure getRotationMatrixFromVector(var para1: array of jfloat; var para2: array of jfloat); static; overload;
    class procedure getQuaternionFromVector(para1: Arr1jfloat; para2: Arr1jfloat); static; overload;
    class procedure getQuaternionFromVector(var para1: array of jfloat; var para2: array of jfloat); static; overload;
    function requestTriggerSensor(para1: AHTriggerEventListener; para2: AHSensor): jboolean; overload; virtual;
    function cancelTriggerSensor(para1: AHTriggerEventListener; para2: AHSensor): jboolean; overload; virtual;
  end;

  AHUUsbConstants = class sealed external 'android.hardware.usb' name 'UsbConstants' (JLObject)
  public
    const
      USB_CLASS_APP_SPEC = 254;
      USB_CLASS_AUDIO = 1;
      USB_CLASS_CDC_DATA = 10;
      USB_CLASS_COMM = 2;
      USB_CLASS_CONTENT_SEC = 13;
      USB_CLASS_CSCID = 11;
      USB_CLASS_HID = 3;
      USB_CLASS_HUB = 9;
      USB_CLASS_MASS_STORAGE = 8;
      USB_CLASS_MISC = 239;
      USB_CLASS_PER_INTERFACE = 0;
      USB_CLASS_PHYSICA = 5;
      USB_CLASS_PRINTER = 7;
      USB_CLASS_STILL_IMAGE = 6;
      USB_CLASS_VENDOR_SPEC = 255;
      USB_CLASS_VIDEO = 14;
      USB_CLASS_WIRELESS_CONTROLLER = 224;
      USB_DIR_IN = 128;
      USB_DIR_OUT = 0;
      USB_ENDPOINT_DIR_MASK = 128;
      USB_ENDPOINT_NUMBER_MASK = 15;
      USB_ENDPOINT_XFERTYPE_MASK = 3;
      USB_ENDPOINT_XFER_BULK = 2;
      USB_ENDPOINT_XFER_CONTROL = 0;
      USB_ENDPOINT_XFER_INT = 3;
      USB_ENDPOINT_XFER_ISOC = 1;
      USB_INTERFACE_SUBCLASS_BOOT = 1;
      USB_SUBCLASS_VENDOR_SPEC = 255;
      USB_TYPE_CLASS = 32;
      USB_TYPE_MASK = 96;
      USB_TYPE_RESERVED = 96;
      USB_TYPE_STANDARD = 0;
      USB_TYPE_VENDOR = 64;
  public
    constructor create(); overload;
  end;

  AHUUsbDeviceConnection = class external 'android.hardware.usb' name 'UsbDeviceConnection' (JLObject)
  public
    procedure close(); overload; virtual;
    function getFileDescriptor(): jint; overload; virtual;
    function getRawDescriptors(): Arr1jbyte; overload; virtual;
    function claimInterface(para1: AHUUsbInterface; para2: jboolean): jboolean; overload; virtual;
    function releaseInterface(para1: AHUUsbInterface): jboolean; overload; virtual;
    function setInterface(para1: AHUUsbInterface): jboolean; overload; virtual;
    function setConfiguration(para1: AHUUsbConfiguration): jboolean; overload; virtual;
    function controlTransfer(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jbyte; para6: jint; para7: jint): jint; overload; virtual;
    function controlTransfer(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jbyte; para6: jint; para7: jint): jint; overload; virtual;
    function controlTransfer(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jbyte; para6: jint; para7: jint; para8: jint): jint; overload; virtual;
    function controlTransfer(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jbyte; para6: jint; para7: jint; para8: jint): jint; overload; virtual;
    function bulkTransfer(para1: AHUUsbEndpoint; para2: Arr1jbyte; para3: jint; para4: jint): jint; overload; virtual;
    function bulkTransfer(para1: AHUUsbEndpoint; var para2: array of jbyte; para3: jint; para4: jint): jint; overload; virtual;
    function bulkTransfer(para1: AHUUsbEndpoint; para2: Arr1jbyte; para3: jint; para4: jint; para5: jint): jint; overload; virtual;
    function bulkTransfer(para1: AHUUsbEndpoint; var para2: array of jbyte; para3: jint; para4: jint; para5: jint): jint; overload; virtual;
    function requestWait(): AHUUsbRequest; overload; virtual;
    function getSerial(): JLString; overload; virtual;
  end;

  AHUUsbManager = class external 'android.hardware.usb' name 'UsbManager' (JLObject)
  public
    const
      ACTION_USB_ACCESSORY_ATTACHED = 'android.hardware.usb.action.USB_ACCESSORY_ATTACHED';
      ACTION_USB_ACCESSORY_DETACHED = 'android.hardware.usb.action.USB_ACCESSORY_DETACHED';
      ACTION_USB_DEVICE_ATTACHED = 'android.hardware.usb.action.USB_DEVICE_ATTACHED';
      ACTION_USB_DEVICE_DETACHED = 'android.hardware.usb.action.USB_DEVICE_DETACHED';
      EXTRA_ACCESSORY = 'accessory';
      EXTRA_DEVICE = 'device';
      EXTRA_PERMISSION_GRANTED = 'permission';
  public
    function getDeviceList(): JUHashMap; overload; virtual;
    function openDevice(para1: AHUUsbDevice): AHUUsbDeviceConnection; overload; virtual;
    function getAccessoryList(): Arr1AHUUsbAccessory; overload; virtual;
    function openAccessory(para1: AHUUsbAccessory): AOParcelFileDescriptor; overload; virtual;
    function hasPermission(para1: AHUUsbDevice): jboolean; overload; virtual;
    function hasPermission(para1: AHUUsbAccessory): jboolean; overload; virtual;
    procedure requestPermission(para1: AHUUsbDevice; para2: AAPendingIntent); overload; virtual;
    procedure requestPermission(para1: AHUUsbAccessory; para2: AAPendingIntent); overload; virtual;
  end;

  AHUUsbRequest = class external 'android.hardware.usb' name 'UsbRequest' (JLObject)
  public
    constructor create(); overload;
    function initialize(para1: AHUUsbDeviceConnection; para2: AHUUsbEndpoint): jboolean; overload; virtual;
    procedure close(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function getEndpoint(): AHUUsbEndpoint; overload; virtual;
    function getClientData(): JLObject; overload; virtual;
    procedure setClientData(para1: JLObject); overload; virtual;
    function queue(para1: JNByteBuffer; para2: jint): jboolean; overload; virtual;
    function cancel(): jboolean; overload; virtual;
  end;

  AIKeyboard = class external 'android.inputmethodservice' name 'Keyboard' (JLObject)
  public
    type
      InnerRow = class;
      Arr1InnerRow = array of InnerRow;
      Arr2InnerRow = array of Arr1InnerRow;
      Arr3InnerRow = array of Arr2InnerRow;
      InnerKey = class;
      Arr1InnerKey = array of InnerKey;
      Arr2InnerKey = array of Arr1InnerKey;
      Arr3InnerKey = array of Arr2InnerKey;
      InnerRow = class external 'android.inputmethodservice' name 'Row' (JLObject)
      public
        var
          fdefaultHeight: jint; external name 'defaultHeight';
          fdefaultHorizontalGap: jint; external name 'defaultHorizontalGap';
          fdefaultWidth: jint; external name 'defaultWidth';
          fmode: jint; external name 'mode';
          frowEdgeFlags: jint; external name 'rowEdgeFlags';
          fverticalGap: jint; external name 'verticalGap';
      public
        constructor create(para1: AIKeyboard); overload;
        constructor create(para1: ACRResources; para2: AIKeyboard; para3: ACRXmlResourceParser); overload;
      end;

      InnerKey = class external 'android.inputmethodservice' name 'Key' (JLObject)
      public
        var
          fcodes: Arr1jint; external name 'codes';
          fedgeFlags: jint; external name 'edgeFlags';
          fgap: jint; external name 'gap';
          fheight: jint; external name 'height';
          ficon: AGDDrawable; external name 'icon';
          ficonPreview: AGDDrawable; external name 'iconPreview';
          flabel: JLCharSequence; external name 'label';
          fmodifier: jboolean; external name 'modifier';
          fon: jboolean; external name 'on';
          fpopupCharacters: JLCharSequence; external name 'popupCharacters';
          fpopupResId: jint; external name 'popupResId';
          fpressed: jboolean; external name 'pressed';
          frepeatable: jboolean; external name 'repeatable';
          fsticky: jboolean; external name 'sticky';
          ftext: JLCharSequence; external name 'text';
          fwidth: jint; external name 'width';
          fx: jint; external name 'x';
          fy: jint; external name 'y';
      public
        constructor create(para1: AIKeyboard.InnerRow); overload;
        constructor create(para1: ACRResources; para2: AIKeyboard.InnerRow; para3: jint; para4: jint; para5: ACRXmlResourceParser); overload;
        procedure onPressed(); overload; virtual;
        procedure onReleased(para1: jboolean); overload; virtual;
        function isInside(para1: jint; para2: jint): jboolean; overload; virtual;
        function squaredDistanceFrom(para1: jint; para2: jint): jint; overload; virtual;
        function getCurrentDrawableState(): Arr1jint; overload; virtual;
      end;

  public
    const
      EDGE_BOTTOM = 8;
      EDGE_LEFT = 1;
      EDGE_RIGHT = 2;
      EDGE_TOP = 4;
      KEYCODE_ALT = -6;
      KEYCODE_CANCEL = -3;
      KEYCODE_DELETE = -5;
      KEYCODE_DONE = -4;
      KEYCODE_MODE_CHANGE = -2;
      KEYCODE_SHIFT = -1;
  public
    constructor create(para1: ACContext; para2: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: JLCharSequence; para4: jint; para5: jint); overload;
    function getKeys(): JUList; overload; virtual;
    function getModifierKeys(): JUList; overload; virtual;
  strict protected
    function getHorizontalGap(): jint; overload; virtual;
    procedure setHorizontalGap(para1: jint); overload; virtual;
    function getVerticalGap(): jint; overload; virtual;
    procedure setVerticalGap(para1: jint); overload; virtual;
    function getKeyHeight(): jint; overload; virtual;
    procedure setKeyHeight(para1: jint); overload; virtual;
    function getKeyWidth(): jint; overload; virtual;
    procedure setKeyWidth(para1: jint); overload; virtual;
  public
    function getHeight(): jint; overload; virtual;
    function getMinWidth(): jint; overload; virtual;
    function setShifted(para1: jboolean): jboolean; overload; virtual;
    function isShifted(): jboolean; overload; virtual;
    function getShiftKeyIndex(): jint; overload; virtual;
    function getNearestKeys(para1: jint; para2: jint): Arr1jint; overload; virtual;
  strict protected
    function createRowFromXml(para1: ACRResources; para2: ACRXmlResourceParser): AIKeyboard.InnerRow; overload; virtual;
    function createKeyFromXml(para1: ACRResources; para2: AIKeyboard.InnerRow; para3: jint; para4: jint; para5: ACRXmlResourceParser): AIKeyboard.InnerKey; overload; virtual;
  end;

  ALGeocoder = class sealed external 'android.location' name 'Geocoder' (JLObject)
  public
    constructor create(para1: ACContext; para2: JULocale); overload;
    constructor create(para1: ACContext); overload;
    class function isPresent(): jboolean; static; overload;
    function getFromLocation(para1: jdouble; para2: jdouble; para3: jint): JUList; overload; virtual;  // throws java.io.IOException
    function getFromLocationName(para1: JLString; para2: jint): JUList; overload; virtual;  // throws java.io.IOException
    function getFromLocationName(para1: JLString; para2: jint; para3: jdouble; para4: jdouble; para5: jdouble; para6: jdouble): JUList; overload; virtual;  // throws java.io.IOException
  end;

  ALGpsSatellite = class sealed external 'android.location' name 'GpsSatellite' (JLObject)
  public
    function getPrn(): jint; overload; virtual;
    function getSnr(): jfloat; overload; virtual;
    function getElevation(): jfloat; overload; virtual;
    function getAzimuth(): jfloat; overload; virtual;
    function hasEphemeris(): jboolean; overload; virtual;
    function hasAlmanac(): jboolean; overload; virtual;
    function usedInFix(): jboolean; overload; virtual;
  end;

  ALGpsStatus = class sealed external 'android.location' name 'GpsStatus' (JLObject)
  public
    type
      InnerNmeaListener = interface;
      Arr1InnerNmeaListener = array of InnerNmeaListener;
      Arr2InnerNmeaListener = array of Arr1InnerNmeaListener;
      Arr3InnerNmeaListener = array of Arr2InnerNmeaListener;
      InnerListener = interface;
      Arr1InnerListener = array of InnerListener;
      Arr2InnerListener = array of Arr1InnerListener;
      Arr3InnerListener = array of Arr2InnerListener;
      InnerNmeaListener = interface external 'android.location' name 'NmeaListener' 
        procedure onNmeaReceived(para1: jlong; para2: JLString); overload;
      end;

      InnerListener = interface external 'android.location' name 'Listener' 
        procedure onGpsStatusChanged(para1: jint); overload;
      end;

  public
    const
      GPS_EVENT_FIRST_FIX = 3;
      GPS_EVENT_SATELLITE_STATUS = 4;
      GPS_EVENT_STARTED = 1;
      GPS_EVENT_STOPPED = 2;
  public
    function getTimeToFirstFix(): jint; overload; virtual;
    function getSatellites(): JLIterable; overload; virtual;
    function getMaxSatellites(): jint; overload; virtual;
  end;

  ALLocationListener = interface external 'android.location' name 'LocationListener' 
    procedure onLocationChanged(para1: ALLocation); overload;
    procedure onStatusChanged(para1: JLString; para2: jint; para3: AOBundle); overload;
    procedure onProviderEnabled(para1: JLString); overload;
    procedure onProviderDisabled(para1: JLString); overload;
  end;

  ALLocationProvider = class external 'android.location' name 'LocationProvider' (JLObject)
  public
    const
      AVAILABLE = 2;
      OUT_OF_SERVICE = 0;
      TEMPORARILY_UNAVAILABLE = 1;
  public
    function getName(): JLString; overload; virtual;
    function meetsCriteria(para1: ALCriteria): jboolean; overload; virtual;
    function requiresNetwork(): jboolean; overload; virtual;
    function requiresSatellite(): jboolean; overload; virtual;
    function requiresCell(): jboolean; overload; virtual;
    function hasMonetaryCost(): jboolean; overload; virtual;
    function supportsAltitude(): jboolean; overload; virtual;
    function supportsSpeed(): jboolean; overload; virtual;
    function supportsBearing(): jboolean; overload; virtual;
    function getPowerRequirement(): jint; overload; virtual;
    function getAccuracy(): jint; overload; virtual;
  end;

  AMAsyncPlayer = class external 'android.media' name 'AsyncPlayer' (JLObject)
  public
    constructor create(para1: JLString); overload;
    procedure play(para1: ACContext; para2: ANUri; para3: jboolean; para4: jint); overload; virtual;
    procedure stop(); overload; virtual;
  end;

  AMAudioFormat = class external 'android.media' name 'AudioFormat' (JLObject)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.media' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        constructor create(para1: AMAudioFormat); overload;
        function build(): AMAudioFormat; overload; virtual;
        function setEncoding(para1: jint): AMAudioFormat.InnerBuilder; overload; virtual;  // throws java.lang.IllegalArgumentException
        function setChannelMask(para1: jint): AMAudioFormat.InnerBuilder; overload; virtual;
        function setSampleRate(para1: jint): AMAudioFormat.InnerBuilder; overload; virtual;  // throws java.lang.IllegalArgumentException
      end;

  public
    const
      CHANNEL_CONFIGURATION_DEFAULT = 1 deprecated;
      CHANNEL_CONFIGURATION_INVALID = 0 deprecated;
      CHANNEL_CONFIGURATION_MONO = 2 deprecated;
      CHANNEL_CONFIGURATION_STEREO = 3 deprecated;
      CHANNEL_INVALID = 0;
      CHANNEL_IN_BACK = 32;
      CHANNEL_IN_BACK_PROCESSED = 512;
      CHANNEL_IN_DEFAULT = 1;
      CHANNEL_IN_FRONT = 16;
      CHANNEL_IN_FRONT_PROCESSED = 256;
      CHANNEL_IN_LEFT = 4;
      CHANNEL_IN_LEFT_PROCESSED = 64;
      CHANNEL_IN_MONO = 16;
      CHANNEL_IN_PRESSURE = 1024;
      CHANNEL_IN_RIGHT = 8;
      CHANNEL_IN_RIGHT_PROCESSED = 128;
      CHANNEL_IN_STEREO = 12;
      CHANNEL_IN_VOICE_DNLINK = 32768;
      CHANNEL_IN_VOICE_UPLINK = 16384;
      CHANNEL_IN_X_AXIS = 2048;
      CHANNEL_IN_Y_AXIS = 4096;
      CHANNEL_IN_Z_AXIS = 8192;
      CHANNEL_OUT_5POINT1 = 252;
      CHANNEL_OUT_7POINT1 = 1020;
      CHANNEL_OUT_BACK_CENTER = 1024;
      CHANNEL_OUT_BACK_LEFT = 64;
      CHANNEL_OUT_BACK_RIGHT = 128;
      CHANNEL_OUT_DEFAULT = 1;
      CHANNEL_OUT_FRONT_CENTER = 16;
      CHANNEL_OUT_FRONT_LEFT = 4;
      CHANNEL_OUT_FRONT_LEFT_OF_CENTER = 256;
      CHANNEL_OUT_FRONT_RIGHT = 8;
      CHANNEL_OUT_FRONT_RIGHT_OF_CENTER = 512;
      CHANNEL_OUT_LOW_FREQUENCY = 32;
      CHANNEL_OUT_MONO = 4;
      CHANNEL_OUT_QUAD = 204;
      CHANNEL_OUT_SIDE_LEFT = 2048;
      CHANNEL_OUT_SIDE_RIGHT = 4096;
      CHANNEL_OUT_STEREO = 12;
      CHANNEL_OUT_SURROUND = 1052;
      ENCODING_AC3 = 5;
      ENCODING_DEFAULT = 1;
      ENCODING_E_AC3 = 6;
      ENCODING_INVALID = 0;
      ENCODING_PCM_16BIT = 2;
      ENCODING_PCM_8BIT = 3;
      ENCODING_PCM_FLOAT = 4;
  public
    function getEncoding(): jint; overload; virtual;
    function getSampleRate(): jint; overload; virtual;
    function getChannelMask(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AMAudioManager = class external 'android.media' name 'AudioManager' (JLObject)
  public
    type
      InnerOnAudioFocusChangeListener = interface;
      Arr1InnerOnAudioFocusChangeListener = array of InnerOnAudioFocusChangeListener;
      Arr2InnerOnAudioFocusChangeListener = array of Arr1InnerOnAudioFocusChangeListener;
      Arr3InnerOnAudioFocusChangeListener = array of Arr2InnerOnAudioFocusChangeListener;
      InnerOnAudioFocusChangeListener = interface external 'android.media' name 'OnAudioFocusChangeListener' 
        procedure onAudioFocusChange(para1: jint); overload;
      end;

  public
    const
      ACTION_AUDIO_BECOMING_NOISY = 'android.media.AUDIO_BECOMING_NOISY';
      ACTION_HDMI_AUDIO_PLUG = 'android.media.action.HDMI_AUDIO_PLUG';
      ACTION_HEADSET_PLUG = 'android.intent.action.HEADSET_PLUG';
      ACTION_SCO_AUDIO_STATE_CHANGED = 'android.media.SCO_AUDIO_STATE_CHANGED' deprecated;
      ACTION_SCO_AUDIO_STATE_UPDATED = 'android.media.ACTION_SCO_AUDIO_STATE_UPDATED';
      ADJUST_LOWER = -1;
      ADJUST_RAISE = 1;
      ADJUST_SAME = 0;
      AUDIOFOCUS_GAIN = 1;
      AUDIOFOCUS_GAIN_TRANSIENT = 2;
      AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE = 4;
      AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK = 3;
      AUDIOFOCUS_LOSS = -1;
      AUDIOFOCUS_LOSS_TRANSIENT = -2;
      AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK = -3;
      AUDIOFOCUS_REQUEST_FAILED = 0;
      AUDIOFOCUS_REQUEST_GRANTED = 1;
      AUDIO_SESSION_ID_GENERATE = 0;
      ERROR = -1;
      ERROR_DEAD_OBJECT = -6;
      EXTRA_AUDIO_PLUG_STATE = 'android.media.extra.AUDIO_PLUG_STATE';
      EXTRA_ENCODINGS = 'android.media.extra.ENCODINGS';
      EXTRA_MAX_CHANNEL_COUNT = 'android.media.extra.MAX_CHANNEL_COUNT';
      EXTRA_RINGER_MODE = 'android.media.EXTRA_RINGER_MODE';
      EXTRA_SCO_AUDIO_PREVIOUS_STATE = 'android.media.extra.SCO_AUDIO_PREVIOUS_STATE';
      EXTRA_SCO_AUDIO_STATE = 'android.media.extra.SCO_AUDIO_STATE';
      EXTRA_VIBRATE_SETTING = 'android.media.EXTRA_VIBRATE_SETTING' deprecated;
      EXTRA_VIBRATE_TYPE = 'android.media.EXTRA_VIBRATE_TYPE' deprecated;
      FLAG_ALLOW_RINGER_MODES = 2;
      FLAG_PLAY_SOUND = 4;
      FLAG_REMOVE_SOUND_AND_VIBRATE = 8;
      FLAG_SHOW_UI = 1;
      FLAG_VIBRATE = 16;
      FX_FOCUS_NAVIGATION_DOWN = 2;
      FX_FOCUS_NAVIGATION_LEFT = 3;
      FX_FOCUS_NAVIGATION_RIGHT = 4;
      FX_FOCUS_NAVIGATION_UP = 1;
      FX_KEYPRESS_DELETE = 7;
      FX_KEYPRESS_INVALID = 9;
      FX_KEYPRESS_RETURN = 8;
      FX_KEYPRESS_SPACEBAR = 6;
      FX_KEYPRESS_STANDARD = 5;
      FX_KEY_CLICK = 0;
      MODE_CURRENT = -1;
      MODE_INVALID = -2;
      MODE_IN_CALL = 2;
      MODE_IN_COMMUNICATION = 3;
      MODE_NORMAL = 0;
      MODE_RINGTONE = 1;
      NUM_STREAMS = 5 deprecated;
      PROPERTY_OUTPUT_FRAMES_PER_BUFFER = 'android.media.property.OUTPUT_FRAMES_PER_BUFFER';
      PROPERTY_OUTPUT_SAMPLE_RATE = 'android.media.property.OUTPUT_SAMPLE_RATE';
      RINGER_MODE_CHANGED_ACTION = 'android.media.RINGER_MODE_CHANGED';
      RINGER_MODE_NORMAL = 2;
      RINGER_MODE_SILENT = 0;
      RINGER_MODE_VIBRATE = 1;
      ROUTE_ALL = -1 deprecated;
      ROUTE_BLUETOOTH = 4 deprecated;
      ROUTE_BLUETOOTH_A2DP = 16 deprecated;
      ROUTE_BLUETOOTH_SCO = 4 deprecated;
      ROUTE_EARPIECE = 1 deprecated;
      ROUTE_HEADSET = 8 deprecated;
      ROUTE_SPEAKER = 2 deprecated;
      SCO_AUDIO_STATE_CONNECTED = 1;
      SCO_AUDIO_STATE_CONNECTING = 2;
      SCO_AUDIO_STATE_DISCONNECTED = 0;
      SCO_AUDIO_STATE_ERROR = -1;
      STREAM_ALARM = 4;
      STREAM_DTMF = 8;
      STREAM_MUSIC = 3;
      STREAM_NOTIFICATION = 5;
      STREAM_RING = 2;
      STREAM_SYSTEM = 1;
      STREAM_VOICE_CALL = 0;
      USE_DEFAULT_STREAM_TYPE = -2147483648;
      VIBRATE_SETTING_CHANGED_ACTION = 'android.media.VIBRATE_SETTING_CHANGED' deprecated;
      VIBRATE_SETTING_OFF = 0 deprecated;
      VIBRATE_SETTING_ON = 1 deprecated;
      VIBRATE_SETTING_ONLY_SILENT = 2 deprecated;
      VIBRATE_TYPE_NOTIFICATION = 1 deprecated;
      VIBRATE_TYPE_RINGER = 0 deprecated;
  public
    procedure dispatchMediaKeyEvent(para1: AVKeyEvent); overload; virtual;
    function isVolumeFixed(): jboolean; overload; virtual;
    procedure adjustStreamVolume(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure adjustVolume(para1: jint; para2: jint); overload; virtual;
    procedure adjustSuggestedStreamVolume(para1: jint; para2: jint; para3: jint); overload; virtual;
    function getRingerMode(): jint; overload; virtual;
    function getStreamMaxVolume(para1: jint): jint; overload; virtual;
    function getStreamVolume(para1: jint): jint; overload; virtual;
    procedure setRingerMode(para1: jint); overload; virtual;
    procedure setStreamVolume(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure setStreamSolo(para1: jint; para2: jboolean); overload; virtual;
    procedure setStreamMute(para1: jint; para2: jboolean); overload; virtual;
    function shouldVibrate(para1: jint): jboolean; overload; virtual;
    function getVibrateSetting(para1: jint): jint; overload; virtual;
    procedure setVibrateSetting(para1: jint; para2: jint); overload; virtual;
    procedure setSpeakerphoneOn(para1: jboolean); overload; virtual;
    function isSpeakerphoneOn(): jboolean; overload; virtual;
    function isBluetoothScoAvailableOffCall(): jboolean; overload; virtual;
    procedure startBluetoothSco(); overload; virtual;
    procedure stopBluetoothSco(); overload; virtual;
    procedure setBluetoothScoOn(para1: jboolean); overload; virtual;
    function isBluetoothScoOn(): jboolean; overload; virtual;
    procedure setBluetoothA2dpOn(para1: jboolean); overload; virtual;
    function isBluetoothA2dpOn(): jboolean; overload; virtual;
    procedure setWiredHeadsetOn(para1: jboolean); overload; virtual;
    function isWiredHeadsetOn(): jboolean; overload; virtual;
    procedure setMicrophoneMute(para1: jboolean); overload; virtual;
    function isMicrophoneMute(): jboolean; overload; virtual;
    procedure setMode(para1: jint); overload; virtual;
    function getMode(): jint; overload; virtual;
    procedure setRouting(para1: jint; para2: jint; para3: jint); overload; virtual;
    function getRouting(para1: jint): jint; overload; virtual;
    function isMusicActive(): jboolean; overload; virtual;
    function generateAudioSessionId(): jint; overload; virtual;
    procedure setParameters(para1: JLString); overload; virtual;
    function getParameters(para1: JLString): JLString; overload; virtual;
    procedure playSoundEffect(para1: jint); overload; virtual;
    procedure playSoundEffect(para1: jint; para2: jfloat); overload; virtual;
    procedure loadSoundEffects(); overload; virtual;
    procedure unloadSoundEffects(); overload; virtual;
    function requestAudioFocus(para1: AMAudioManager.InnerOnAudioFocusChangeListener; para2: jint; para3: jint): jint; overload; virtual;
    function abandonAudioFocus(para1: AMAudioManager.InnerOnAudioFocusChangeListener): jint; overload; virtual;
    procedure registerMediaButtonEventReceiver(para1: ACComponentName); overload; virtual;
    procedure registerMediaButtonEventReceiver(para1: AAPendingIntent); overload; virtual;
    procedure unregisterMediaButtonEventReceiver(para1: ACComponentName); overload; virtual;
    procedure unregisterMediaButtonEventReceiver(para1: AAPendingIntent); overload; virtual;
    procedure registerRemoteControlClient(para1: AMRemoteControlClient); overload; virtual;
    procedure unregisterRemoteControlClient(para1: AMRemoteControlClient); overload; virtual;
    function registerRemoteController(para1: AMRemoteController): jboolean; overload; virtual;
    procedure unregisterRemoteController(para1: AMRemoteController); overload; virtual;
    function getProperty(para1: JLString): JLString; overload; virtual;
  end;

  AMAudioRecord = class external 'android.media' name 'AudioRecord' (JLObject)
  public
    type
      InnerOnRecordPositionUpdateListener = interface;
      Arr1InnerOnRecordPositionUpdateListener = array of InnerOnRecordPositionUpdateListener;
      Arr2InnerOnRecordPositionUpdateListener = array of Arr1InnerOnRecordPositionUpdateListener;
      Arr3InnerOnRecordPositionUpdateListener = array of Arr2InnerOnRecordPositionUpdateListener;
      InnerOnRecordPositionUpdateListener = interface external 'android.media' name 'OnRecordPositionUpdateListener' 
        procedure onMarkerReached(para1: AMAudioRecord); overload;
        procedure onPeriodicNotification(para1: AMAudioRecord); overload;
      end;

  public
    const
      ERROR = -1;
      ERROR_BAD_VALUE = -2;
      ERROR_INVALID_OPERATION = -3;
      RECORDSTATE_RECORDING = 3;
      RECORDSTATE_STOPPED = 1;
      STATE_INITIALIZED = 1;
      STATE_UNINITIALIZED = 0;
      SUCCESS = 0;
  public
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;  // throws java.lang.IllegalArgumentException
    procedure release(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    function getSampleRate(): jint; overload; virtual;
    function getAudioSource(): jint; overload; virtual;
    function getAudioFormat(): jint; overload; virtual;
    function getChannelConfiguration(): jint; overload; virtual;
    function getChannelCount(): jint; overload; virtual;
    function getState(): jint; overload; virtual;
    function getRecordingState(): jint; overload; virtual;
    function getNotificationMarkerPosition(): jint; overload; virtual;
    function getPositionNotificationPeriod(): jint; overload; virtual;
    class function getMinBufferSize(para1: jint; para2: jint; para3: jint): jint; static; overload;
    function getAudioSessionId(): jint; overload; virtual;
    procedure startRecording(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure startRecording(para1: AMMediaSyncEvent); overload; virtual;  // throws java.lang.IllegalStateException
    procedure stop(); overload; virtual;  // throws java.lang.IllegalStateException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;
    function read(para1: Arr1jshort; para2: jint; para3: jint): jint; overload; virtual;
    function read(var para1: array of jshort; para2: jint; para3: jint): jint; overload; virtual;
    function read(para1: JNByteBuffer; para2: jint): jint; overload; virtual;
    procedure setRecordPositionUpdateListener(para1: AMAudioRecord.InnerOnRecordPositionUpdateListener); overload; virtual;
    procedure setRecordPositionUpdateListener(para1: AMAudioRecord.InnerOnRecordPositionUpdateListener; para2: AOHandler); overload; virtual;
    function setNotificationMarkerPosition(para1: jint): jint; overload; virtual;
    function setPositionNotificationPeriod(para1: jint): jint; overload; virtual;
  end;

  AMAudioTrack = class external 'android.media' name 'AudioTrack' (JLObject)
  public
    type
      InnerOnPlaybackPositionUpdateListener = interface;
      Arr1InnerOnPlaybackPositionUpdateListener = array of InnerOnPlaybackPositionUpdateListener;
      Arr2InnerOnPlaybackPositionUpdateListener = array of Arr1InnerOnPlaybackPositionUpdateListener;
      Arr3InnerOnPlaybackPositionUpdateListener = array of Arr2InnerOnPlaybackPositionUpdateListener;
      InnerOnPlaybackPositionUpdateListener = interface external 'android.media' name 'OnPlaybackPositionUpdateListener' 
        procedure onMarkerReached(para1: AMAudioTrack); overload;
        procedure onPeriodicNotification(para1: AMAudioTrack); overload;
      end;

  public
    const
      ERROR = -1;
      ERROR_BAD_VALUE = -2;
      ERROR_INVALID_OPERATION = -3;
      MODE_STATIC = 0;
      MODE_STREAM = 1;
      PLAYSTATE_PAUSED = 2;
      PLAYSTATE_PLAYING = 3;
      PLAYSTATE_STOPPED = 1;
      STATE_INITIALIZED = 1;
      STATE_NO_STATIC_DATA = 2;
      STATE_UNINITIALIZED = 0;
      SUCCESS = 0;
      WRITE_BLOCKING = 0;
      WRITE_NON_BLOCKING = 1;
  public
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload;  // throws java.lang.IllegalArgumentException
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint); overload;  // throws java.lang.IllegalArgumentException
    constructor create(para1: AMAudioAttributes; para2: AMAudioFormat; para3: jint; para4: jint; para5: jint); overload;  // throws java.lang.IllegalArgumentException
    procedure release(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    class function getMinVolume(): jfloat; static; overload;
    class function getMaxVolume(): jfloat; static; overload;
    function getSampleRate(): jint; overload; virtual;
    function getPlaybackRate(): jint; overload; virtual;
    function getAudioFormat(): jint; overload; virtual;
    function getStreamType(): jint; overload; virtual;
    function getChannelConfiguration(): jint; overload; virtual;
    function getChannelCount(): jint; overload; virtual;
    function getState(): jint; overload; virtual;
    function getPlayState(): jint; overload; virtual;
  strict protected
    function getNativeFrameCount(): jint; overload; virtual;
  public
    function getNotificationMarkerPosition(): jint; overload; virtual;
    function getPositionNotificationPeriod(): jint; overload; virtual;
    function getPlaybackHeadPosition(): jint; overload; virtual;
    class function getNativeOutputSampleRate(para1: jint): jint; static; overload;
    class function getMinBufferSize(para1: jint; para2: jint; para3: jint): jint; static; overload;
    function getAudioSessionId(): jint; overload; virtual;
    function getTimestamp(para1: AMAudioTimestamp): jboolean; overload; virtual;
    procedure setPlaybackPositionUpdateListener(para1: AMAudioTrack.InnerOnPlaybackPositionUpdateListener); overload; virtual;
    procedure setPlaybackPositionUpdateListener(para1: AMAudioTrack.InnerOnPlaybackPositionUpdateListener; para2: AOHandler); overload; virtual;
    function setStereoVolume(para1: jfloat; para2: jfloat): jint; overload; virtual;
    function setVolume(para1: jfloat): jint; overload; virtual;
    function setPlaybackRate(para1: jint): jint; overload; virtual;
    function setNotificationMarkerPosition(para1: jint): jint; overload; virtual;
    function setPositionNotificationPeriod(para1: jint): jint; overload; virtual;
    function setPlaybackHeadPosition(para1: jint): jint; overload; virtual;
    function setLoopPoints(para1: jint; para2: jint; para3: jint): jint; overload; virtual;
  strict protected
    procedure setState(para1: jint); overload; virtual;
  public
    procedure play(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure stop(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure pause(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure flush(); overload; virtual;
    function write(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;
    function write(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;
    function write(para1: Arr1jshort; para2: jint; para3: jint): jint; overload; virtual;
    function write(var para1: array of jshort; para2: jint; para3: jint): jint; overload; virtual;
    function write(para1: Arr1jfloat; para2: jint; para3: jint; para4: jint): jint; overload; virtual;
    function write(var para1: array of jfloat; para2: jint; para3: jint; para4: jint): jint; overload; virtual;
    function write(para1: JNByteBuffer; para2: jint; para3: jint): jint; overload; virtual;
    function reloadStaticData(): jint; overload; virtual;
    function attachAuxEffect(para1: jint): jint; overload; virtual;
    function setAuxEffectSendLevel(para1: jfloat): jint; overload; virtual;
  end;

  AMCamcorderProfile = class external 'android.media' name 'CamcorderProfile' (JLObject)
  public
    const
      QUALITY_1080P = 6;
      QUALITY_2160P = 8;
      QUALITY_480P = 4;
      QUALITY_720P = 5;
      QUALITY_CIF = 3;
      QUALITY_HIGH = 1;
      QUALITY_HIGH_SPEED_1080P = 2004;
      QUALITY_HIGH_SPEED_2160P = 2005;
      QUALITY_HIGH_SPEED_480P = 2002;
      QUALITY_HIGH_SPEED_720P = 2003;
      QUALITY_HIGH_SPEED_HIGH = 2001;
      QUALITY_HIGH_SPEED_LOW = 2000;
      QUALITY_LOW = 0;
      QUALITY_QCIF = 2;
      QUALITY_QVGA = 7;
      QUALITY_TIME_LAPSE_1080P = 1006;
      QUALITY_TIME_LAPSE_2160P = 1008;
      QUALITY_TIME_LAPSE_480P = 1004;
      QUALITY_TIME_LAPSE_720P = 1005;
      QUALITY_TIME_LAPSE_CIF = 1003;
      QUALITY_TIME_LAPSE_HIGH = 1001;
      QUALITY_TIME_LAPSE_LOW = 1000;
      QUALITY_TIME_LAPSE_QCIF = 1002;
      QUALITY_TIME_LAPSE_QVGA = 1007;
  public
    var
      faudioBitRate: jint; external name 'audioBitRate';
      faudioChannels: jint; external name 'audioChannels';
      faudioCodec: jint; external name 'audioCodec';
      faudioSampleRate: jint; external name 'audioSampleRate';
      fduration: jint; external name 'duration';
      ffileFormat: jint; external name 'fileFormat';
      fquality: jint; external name 'quality';
      fvideoBitRate: jint; external name 'videoBitRate';
      fvideoCodec: jint; external name 'videoCodec';
      fvideoFrameHeight: jint; external name 'videoFrameHeight';
      fvideoFrameRate: jint; external name 'videoFrameRate';
      fvideoFrameWidth: jint; external name 'videoFrameWidth';
  public
    class function get(para1: jint): AMCamcorderProfile; static; overload;
    class function get(para1: jint; para2: jint): AMCamcorderProfile; static; overload;
    class function hasProfile(para1: jint): jboolean; static; overload;
    class function hasProfile(para1: jint; para2: jint): jboolean; static; overload;
  end;

  AMCameraProfile = class external 'android.media' name 'CameraProfile' (JLObject)
  public
    const
      QUALITY_HIGH = 2;
      QUALITY_LOW = 0;
      QUALITY_MEDIUM = 1;
  public
    constructor create(); overload;
    class function getJpegEncodingQualityParameter(para1: jint): jint; static; overload;
    class function getJpegEncodingQualityParameter(para1: jint; para2: jint): jint; static; overload;
  end;

  AMExifInterface = class external 'android.media' name 'ExifInterface' (JLObject)
  public
    const
      ORIENTATION_FLIP_HORIZONTAL = 2;
      ORIENTATION_FLIP_VERTICAL = 4;
      ORIENTATION_NORMAL = 1;
      ORIENTATION_ROTATE_180 = 3;
      ORIENTATION_ROTATE_270 = 8;
      ORIENTATION_ROTATE_90 = 6;
      ORIENTATION_TRANSPOSE = 5;
      ORIENTATION_TRANSVERSE = 7;
      ORIENTATION_UNDEFINED = 0;
      TAG_APERTURE = 'FNumber';
      TAG_DATETIME = 'DateTime';
      TAG_EXPOSURE_TIME = 'ExposureTime';
      TAG_FLASH = 'Flash';
      TAG_FOCAL_LENGTH = 'FocalLength';
      TAG_GPS_ALTITUDE = 'GPSAltitude';
      TAG_GPS_ALTITUDE_REF = 'GPSAltitudeRef';
      TAG_GPS_DATESTAMP = 'GPSDateStamp';
      TAG_GPS_LATITUDE = 'GPSLatitude';
      TAG_GPS_LATITUDE_REF = 'GPSLatitudeRef';
      TAG_GPS_LONGITUDE = 'GPSLongitude';
      TAG_GPS_LONGITUDE_REF = 'GPSLongitudeRef';
      TAG_GPS_PROCESSING_METHOD = 'GPSProcessingMethod';
      TAG_GPS_TIMESTAMP = 'GPSTimeStamp';
      TAG_IMAGE_LENGTH = 'ImageLength';
      TAG_IMAGE_WIDTH = 'ImageWidth';
      TAG_ISO = 'ISOSpeedRatings';
      TAG_MAKE = 'Make';
      TAG_MODEL = 'Model';
      TAG_ORIENTATION = 'Orientation';
      TAG_WHITE_BALANCE = 'WhiteBalance';
      WHITEBALANCE_AUTO = 0;
      WHITEBALANCE_MANUAL = 1;
  public
    constructor create(para1: JLString); overload;  // throws java.io.IOException
    function getAttribute(para1: JLString): JLString; overload; virtual;
    function getAttributeInt(para1: JLString; para2: jint): jint; overload; virtual;
    function getAttributeDouble(para1: JLString; para2: jdouble): jdouble; overload; virtual;
    procedure setAttribute(para1: JLString; para2: JLString); overload; virtual;
    procedure saveAttributes(); overload; virtual;  // throws java.io.IOException
    function hasThumbnail(): jboolean; overload; virtual;
    function getThumbnail(): Arr1jbyte; overload; virtual;
    function getLatLong(para1: Arr1jfloat): jboolean; overload; virtual;
    function getLatLong(var para1: array of jfloat): jboolean; overload; virtual;
    function getAltitude(para1: jdouble): jdouble; overload; virtual;
  end;

  AMFaceDetector = class external 'android.media' name 'FaceDetector' (JLObject)
  public
    type
      InnerFace = class;
      Arr1InnerFace = array of InnerFace;
      Arr2InnerFace = array of Arr1InnerFace;
      Arr3InnerFace = array of Arr2InnerFace;
      InnerFace = class external 'android.media' name 'Face' 
      end;

  public
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    function findFaces(para1: AGBitmap; para2: AMFaceDetector.Arr1InnerFace): jint; overload; virtual;
    function findFaces(para1: AGBitmap; var para2: array of AMFaceDetector.InnerFace): jint; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AMJetPlayer = class external 'android.media' name 'JetPlayer' (JLObject)
  public
    type
      InnerOnJetEventListener = interface;
      Arr1InnerOnJetEventListener = array of InnerOnJetEventListener;
      Arr2InnerOnJetEventListener = array of Arr1InnerOnJetEventListener;
      Arr3InnerOnJetEventListener = array of Arr2InnerOnJetEventListener;
      InnerOnJetEventListener = interface external 'android.media' name 'OnJetEventListener' 
        procedure onJetEvent(para1: AMJetPlayer; para2: jshort; para3: jbyte; para4: jbyte; para5: jbyte; para6: jbyte); overload;
        procedure onJetUserIdUpdate(para1: AMJetPlayer; para2: jint; para3: jint); overload;
        procedure onJetNumQueuedSegmentUpdate(para1: AMJetPlayer; para2: jint); overload;
        procedure onJetPauseUpdate(para1: AMJetPlayer; para2: jint); overload;
      end;

  public
    class function getJetPlayer(): AMJetPlayer; static; overload;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure release(); overload; virtual;
    class function getMaxTracks(): jint; static; overload;
    function loadJetFile(para1: JLString): jboolean; overload; virtual;
    function loadJetFile(para1: ACRAssetFileDescriptor): jboolean; overload; virtual;
    function closeJetFile(): jboolean; overload; virtual;
    function play(): jboolean; overload; virtual;
    function pause(): jboolean; overload; virtual;
    function queueJetSegment(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jbyte): jboolean; overload; virtual;
    function queueJetSegmentMuteArray(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jboolean; para6: jbyte): jboolean; overload; virtual;
    function queueJetSegmentMuteArray(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jboolean; para6: jbyte): jboolean; overload; virtual;
    function setMuteFlags(para1: jint; para2: jboolean): jboolean; overload; virtual;
    function setMuteArray(para1: Arr1jboolean; para2: jboolean): jboolean; overload; virtual;
    function setMuteArray(var para1: array of jboolean; para2: jboolean): jboolean; overload; virtual;
    function setMuteFlag(para1: jint; para2: jboolean; para3: jboolean): jboolean; overload; virtual;
    function triggerClip(para1: jint): jboolean; overload; virtual;
    function clearQueue(): jboolean; overload; virtual;
    procedure setEventListener(para1: AMJetPlayer.InnerOnJetEventListener); overload; virtual;
    procedure setEventListener(para1: AMJetPlayer.InnerOnJetEventListener; para2: AOHandler); overload; virtual;
  end;

  AMMediaMetadataRetriever = class external 'android.media' name 'MediaMetadataRetriever' (JLObject)
  public
    const
      METADATA_KEY_ALBUM = 1;
      METADATA_KEY_ALBUMARTIST = 13;
      METADATA_KEY_ARTIST = 2;
      METADATA_KEY_AUTHOR = 3;
      METADATA_KEY_BITRATE = 20;
      METADATA_KEY_CD_TRACK_NUMBER = 0;
      METADATA_KEY_COMPILATION = 15;
      METADATA_KEY_COMPOSER = 4;
      METADATA_KEY_DATE = 5;
      METADATA_KEY_DISC_NUMBER = 14;
      METADATA_KEY_DURATION = 9;
      METADATA_KEY_GENRE = 6;
      METADATA_KEY_HAS_AUDIO = 16;
      METADATA_KEY_HAS_VIDEO = 17;
      METADATA_KEY_LOCATION = 23;
      METADATA_KEY_MIMETYPE = 12;
      METADATA_KEY_NUM_TRACKS = 10;
      METADATA_KEY_TITLE = 7;
      METADATA_KEY_VIDEO_HEIGHT = 19;
      METADATA_KEY_VIDEO_ROTATION = 24;
      METADATA_KEY_VIDEO_WIDTH = 18;
      METADATA_KEY_WRITER = 11;
      METADATA_KEY_YEAR = 8;
      OPTION_CLOSEST = 3;
      OPTION_CLOSEST_SYNC = 2;
      OPTION_NEXT_SYNC = 1;
      OPTION_PREVIOUS_SYNC = 0;
  public
    constructor create(); overload;
    procedure setDataSource(para1: JLString); overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setDataSource(para1: JLString; para2: JUMap); overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setDataSource(para1: JIFileDescriptor; para2: jlong; para3: jlong); overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setDataSource(para1: JIFileDescriptor); overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setDataSource(para1: ACContext; para2: ANUri); overload; virtual;  // throws java.lang.IllegalArgumentException, java.lang.SecurityException
    function extractMetadata(para1: jint): JLString; overload; virtual;
    function getFrameAtTime(para1: jlong; para2: jint): AGBitmap; overload; virtual;
    function getFrameAtTime(para1: jlong): AGBitmap; overload; virtual;
    function getFrameAtTime(): AGBitmap; overload; virtual;
    function getEmbeddedPicture(): Arr1jbyte; overload; virtual;
    procedure release(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AMMediaPlayer = class external 'android.media' name 'MediaPlayer' (JLObject)
  public
    type
      InnerOnInfoListener = interface;
      Arr1InnerOnInfoListener = array of InnerOnInfoListener;
      Arr2InnerOnInfoListener = array of Arr1InnerOnInfoListener;
      Arr3InnerOnInfoListener = array of Arr2InnerOnInfoListener;
      InnerOnErrorListener = interface;
      Arr1InnerOnErrorListener = array of InnerOnErrorListener;
      Arr2InnerOnErrorListener = array of Arr1InnerOnErrorListener;
      Arr3InnerOnErrorListener = array of Arr2InnerOnErrorListener;
      InnerOnTimedTextListener = interface;
      Arr1InnerOnTimedTextListener = array of InnerOnTimedTextListener;
      Arr2InnerOnTimedTextListener = array of Arr1InnerOnTimedTextListener;
      Arr3InnerOnTimedTextListener = array of Arr2InnerOnTimedTextListener;
      InnerOnVideoSizeChangedListener = interface;
      Arr1InnerOnVideoSizeChangedListener = array of InnerOnVideoSizeChangedListener;
      Arr2InnerOnVideoSizeChangedListener = array of Arr1InnerOnVideoSizeChangedListener;
      Arr3InnerOnVideoSizeChangedListener = array of Arr2InnerOnVideoSizeChangedListener;
      InnerOnSeekCompleteListener = interface;
      Arr1InnerOnSeekCompleteListener = array of InnerOnSeekCompleteListener;
      Arr2InnerOnSeekCompleteListener = array of Arr1InnerOnSeekCompleteListener;
      Arr3InnerOnSeekCompleteListener = array of Arr2InnerOnSeekCompleteListener;
      InnerOnBufferingUpdateListener = interface;
      Arr1InnerOnBufferingUpdateListener = array of InnerOnBufferingUpdateListener;
      Arr2InnerOnBufferingUpdateListener = array of Arr1InnerOnBufferingUpdateListener;
      Arr3InnerOnBufferingUpdateListener = array of Arr2InnerOnBufferingUpdateListener;
      InnerOnCompletionListener = interface;
      Arr1InnerOnCompletionListener = array of InnerOnCompletionListener;
      Arr2InnerOnCompletionListener = array of Arr1InnerOnCompletionListener;
      Arr3InnerOnCompletionListener = array of Arr2InnerOnCompletionListener;
      InnerOnPreparedListener = interface;
      Arr1InnerOnPreparedListener = array of InnerOnPreparedListener;
      Arr2InnerOnPreparedListener = array of Arr1InnerOnPreparedListener;
      Arr3InnerOnPreparedListener = array of Arr2InnerOnPreparedListener;
      InnerTrackInfo = class;
      Arr1InnerTrackInfo = array of InnerTrackInfo;
      Arr2InnerTrackInfo = array of Arr1InnerTrackInfo;
      Arr3InnerTrackInfo = array of Arr2InnerTrackInfo;
      InnerOnInfoListener = interface external 'android.media' name 'OnInfoListener' 
        function onInfo(para1: AMMediaPlayer; para2: jint; para3: jint): jboolean; overload;
      end;

      InnerOnErrorListener = interface external 'android.media' name 'OnErrorListener' 
        function onError(para1: AMMediaPlayer; para2: jint; para3: jint): jboolean; overload;
      end;

      InnerOnTimedTextListener = interface external 'android.media' name 'OnTimedTextListener' 
        procedure onTimedText(para1: AMMediaPlayer; para2: AMTimedText); overload;
      end;

      InnerOnVideoSizeChangedListener = interface external 'android.media' name 'OnVideoSizeChangedListener' 
        procedure onVideoSizeChanged(para1: AMMediaPlayer; para2: jint; para3: jint); overload;
      end;

      InnerOnSeekCompleteListener = interface external 'android.media' name 'OnSeekCompleteListener' 
        procedure onSeekComplete(para1: AMMediaPlayer); overload;
      end;

      InnerOnBufferingUpdateListener = interface external 'android.media' name 'OnBufferingUpdateListener' 
        procedure onBufferingUpdate(para1: AMMediaPlayer; para2: jint); overload;
      end;

      InnerOnCompletionListener = interface external 'android.media' name 'OnCompletionListener' 
        procedure onCompletion(para1: AMMediaPlayer); overload;
      end;

      InnerOnPreparedListener = interface external 'android.media' name 'OnPreparedListener' 
        procedure onPrepared(para1: AMMediaPlayer); overload;
      end;

      InnerTrackInfo = class external 'android.media' name 'TrackInfo' (JLObject, AOParcelable)
      public
        const
          MEDIA_TRACK_TYPE_AUDIO = 2;
          MEDIA_TRACK_TYPE_SUBTITLE = 4;
          MEDIA_TRACK_TYPE_TIMEDTEXT = 3;
          MEDIA_TRACK_TYPE_UNKNOWN = 0;
          MEDIA_TRACK_TYPE_VIDEO = 1;
      public
        function getTrackType(): jint; overload; virtual;
        function getLanguage(): JLString; overload; virtual;
        function getFormat(): AMMediaFormat; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  public
    const
      MEDIA_ERROR_IO = -1004;
      MEDIA_ERROR_MALFORMED = -1007;
      MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK = 200;
      MEDIA_ERROR_SERVER_DIED = 100;
      MEDIA_ERROR_TIMED_OUT = -110;
      MEDIA_ERROR_UNKNOWN = 1;
      MEDIA_ERROR_UNSUPPORTED = -1010;
      MEDIA_INFO_BAD_INTERLEAVING = 800;
      MEDIA_INFO_BUFFERING_END = 702;
      MEDIA_INFO_BUFFERING_START = 701;
      MEDIA_INFO_METADATA_UPDATE = 802;
      MEDIA_INFO_NOT_SEEKABLE = 801;
      MEDIA_INFO_SUBTITLE_TIMED_OUT = 902;
      MEDIA_INFO_UNKNOWN = 1;
      MEDIA_INFO_UNSUPPORTED_SUBTITLE = 901;
      MEDIA_INFO_VIDEO_RENDERING_START = 3;
      MEDIA_INFO_VIDEO_TRACK_LAGGING = 700;
      MEDIA_MIMETYPE_TEXT_SUBRIP = 'application/x-subrip';
      VIDEO_SCALING_MODE_SCALE_TO_FIT = 1;
      VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING = 2;
  public
    constructor create(); overload;
    procedure setDisplay(para1: AVSurfaceHolder); overload; virtual;
    procedure setSurface(para1: AVSurface); overload; virtual;
    procedure setVideoScalingMode(para1: jint); overload; virtual;
    class function create_(para1: ACContext; para2: ANUri): AMMediaPlayer; static; external name 'create'; overload;
    class function create_(para1: ACContext; para2: ANUri; para3: AVSurfaceHolder): AMMediaPlayer; static; external name 'create'; overload;
    class function create_(para1: ACContext; para2: ANUri; para3: AVSurfaceHolder; para4: AMAudioAttributes; para5: jint): AMMediaPlayer; static; external name 'create'; overload;
    class function create_(para1: ACContext; para2: jint): AMMediaPlayer; static; external name 'create'; overload;
    class function create_(para1: ACContext; para2: jint; para3: AMAudioAttributes; para4: jint): AMMediaPlayer; static; external name 'create'; overload;
    procedure setDataSource(para1: ACContext; para2: ANUri); overload; virtual;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    procedure setDataSource(para1: ACContext; para2: ANUri; para3: JUMap); overload; virtual;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    procedure setDataSource(para1: JLString); overload; virtual;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    procedure setDataSource(para1: JIFileDescriptor); overload; virtual;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure setDataSource(para1: JIFileDescriptor; para2: jlong; para3: jlong); overload; virtual;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure prepare(); overload; virtual;  // throws java.io.IOException, java.lang.IllegalStateException
    procedure prepareAsync(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure start(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure stop(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure pause(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure setWakeMode(para1: ACContext; para2: jint); overload; virtual;
    procedure setScreenOnWhilePlaying(para1: jboolean); overload; virtual;
    function getVideoWidth(): jint; overload; virtual;
    function getVideoHeight(): jint; overload; virtual;
    function isPlaying(): jboolean; overload; virtual;
    procedure seekTo(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
    function getCurrentPosition(): jint; overload; virtual;
    function getDuration(): jint; overload; virtual;
    procedure setNextMediaPlayer(para1: AMMediaPlayer); overload; virtual;
    procedure release(); overload; virtual;
    procedure reset(); overload; virtual;
    procedure setAudioStreamType(para1: jint); overload; virtual;
    procedure setAudioAttributes(para1: AMAudioAttributes); overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setLooping(para1: jboolean); overload; virtual;
    function isLooping(): jboolean; overload; virtual;
    procedure setVolume(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setAudioSessionId(para1: jint); overload; virtual;  // throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function getAudioSessionId(): jint; overload; virtual;
    procedure attachAuxEffect(para1: jint); overload; virtual;
    procedure setAuxEffectSendLevel(para1: jfloat); overload; virtual;
    function getTrackInfo(): AMMediaPlayer.Arr1InnerTrackInfo; overload; virtual;  // throws java.lang.IllegalStateException
    procedure addTimedTextSource(para1: JLString; para2: JLString); overload; virtual;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure addTimedTextSource(para1: ACContext; para2: ANUri; para3: JLString); overload; virtual;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure addTimedTextSource(para1: JIFileDescriptor; para2: JLString); overload; virtual;  // throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure addTimedTextSource(para1: JIFileDescriptor; para2: jlong; para3: jlong; para4: JLString); overload; virtual;  // throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function getSelectedTrack(para1: jint): jint; overload; virtual;  // throws java.lang.IllegalStateException
    procedure selectTrack(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
    procedure deselectTrack(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure setOnPreparedListener(para1: AMMediaPlayer.InnerOnPreparedListener); overload; virtual;
    procedure setOnCompletionListener(para1: AMMediaPlayer.InnerOnCompletionListener); overload; virtual;
    procedure setOnBufferingUpdateListener(para1: AMMediaPlayer.InnerOnBufferingUpdateListener); overload; virtual;
    procedure setOnSeekCompleteListener(para1: AMMediaPlayer.InnerOnSeekCompleteListener); overload; virtual;
    procedure setOnVideoSizeChangedListener(para1: AMMediaPlayer.InnerOnVideoSizeChangedListener); overload; virtual;
    procedure setOnTimedTextListener(para1: AMMediaPlayer.InnerOnTimedTextListener); overload; virtual;
    procedure setOnErrorListener(para1: AMMediaPlayer.InnerOnErrorListener); overload; virtual;
    procedure setOnInfoListener(para1: AMMediaPlayer.InnerOnInfoListener); overload; virtual;
  end;

  AMMediaRecorder = class external 'android.media' name 'MediaRecorder' (JLObject)
  public
    type
      InnerOnInfoListener = interface;
      Arr1InnerOnInfoListener = array of InnerOnInfoListener;
      Arr2InnerOnInfoListener = array of Arr1InnerOnInfoListener;
      Arr3InnerOnInfoListener = array of Arr2InnerOnInfoListener;
      InnerOnErrorListener = interface;
      Arr1InnerOnErrorListener = array of InnerOnErrorListener;
      Arr2InnerOnErrorListener = array of Arr1InnerOnErrorListener;
      Arr3InnerOnErrorListener = array of Arr2InnerOnErrorListener;
      InnerVideoEncoder = class;
      Arr1InnerVideoEncoder = array of InnerVideoEncoder;
      Arr2InnerVideoEncoder = array of Arr1InnerVideoEncoder;
      Arr3InnerVideoEncoder = array of Arr2InnerVideoEncoder;
      InnerAudioEncoder = class;
      Arr1InnerAudioEncoder = array of InnerAudioEncoder;
      Arr2InnerAudioEncoder = array of Arr1InnerAudioEncoder;
      Arr3InnerAudioEncoder = array of Arr2InnerAudioEncoder;
      InnerOutputFormat = class;
      Arr1InnerOutputFormat = array of InnerOutputFormat;
      Arr2InnerOutputFormat = array of Arr1InnerOutputFormat;
      Arr3InnerOutputFormat = array of Arr2InnerOutputFormat;
      InnerVideoSource = class;
      Arr1InnerVideoSource = array of InnerVideoSource;
      Arr2InnerVideoSource = array of Arr1InnerVideoSource;
      Arr3InnerVideoSource = array of Arr2InnerVideoSource;
      InnerAudioSource = class;
      Arr1InnerAudioSource = array of InnerAudioSource;
      Arr2InnerAudioSource = array of Arr1InnerAudioSource;
      Arr3InnerAudioSource = array of Arr2InnerAudioSource;
      InnerOnInfoListener = interface external 'android.media' name 'OnInfoListener' 
        procedure onInfo(para1: AMMediaRecorder; para2: jint; para3: jint); overload;
      end;

      InnerOnErrorListener = interface external 'android.media' name 'OnErrorListener' 
        procedure onError(para1: AMMediaRecorder; para2: jint; para3: jint); overload;
      end;

      InnerVideoEncoder = class sealed external 'android.media' name 'VideoEncoder' 
      end;

      InnerAudioEncoder = class sealed external 'android.media' name 'AudioEncoder' 
      end;

      InnerOutputFormat = class sealed external 'android.media' name 'OutputFormat' 
      end;

      InnerVideoSource = class sealed external 'android.media' name 'VideoSource' 
      end;

      InnerAudioSource = class sealed external 'android.media' name 'AudioSource' 
      end;

  public
    const
      MEDIA_ERROR_SERVER_DIED = 100;
      MEDIA_RECORDER_ERROR_UNKNOWN = 1;
      MEDIA_RECORDER_INFO_MAX_DURATION_REACHED = 800;
      MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED = 801;
      MEDIA_RECORDER_INFO_UNKNOWN = 1;
  public
    constructor create(); overload;
    procedure setCamera(para1: AHCamera); overload; virtual;
    function getSurface(): AVSurface; overload; virtual;
    procedure setPreviewDisplay(para1: AVSurface); overload; virtual;
    procedure setAudioSource(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
    class function getAudioSourceMax(): jint; static; overload; final;
    procedure setVideoSource(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
    procedure setProfile(para1: AMCamcorderProfile); overload; virtual;
    procedure setCaptureRate(para1: jdouble); overload; virtual;
    procedure setOrientationHint(para1: jint); overload; virtual;
    procedure setLocation(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setOutputFormat(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
    procedure setVideoSize(para1: jint; para2: jint); overload; virtual;  // throws java.lang.IllegalStateException
    procedure setVideoFrameRate(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
    procedure setMaxDuration(para1: jint); overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setMaxFileSize(para1: jlong); overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setAudioEncoder(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
    procedure setVideoEncoder(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException
    procedure setAudioSamplingRate(para1: jint); overload; virtual;
    procedure setAudioChannels(para1: jint); overload; virtual;
    procedure setAudioEncodingBitRate(para1: jint); overload; virtual;
    procedure setVideoEncodingBitRate(para1: jint); overload; virtual;
    procedure setOutputFile(para1: JIFileDescriptor); overload; virtual;  // throws java.lang.IllegalStateException
    procedure setOutputFile(para1: JLString); overload; virtual;  // throws java.lang.IllegalStateException
    procedure prepare(); overload; virtual;  // throws java.lang.IllegalStateException, java.io.IOException
    procedure start(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure stop(); overload; virtual;  // throws java.lang.IllegalStateException
    procedure reset(); overload; virtual;
    function getMaxAmplitude(): jint; overload; virtual;  // throws java.lang.IllegalStateException
    procedure setOnErrorListener(para1: AMMediaRecorder.InnerOnErrorListener); overload; virtual;
    procedure setOnInfoListener(para1: AMMediaRecorder.InnerOnInfoListener); overload; virtual;
    procedure release(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  end;

  AMRemoteControlClient = class external 'android.media' name 'RemoteControlClient' (JLObject)
  public
    type
      InnerOnGetPlaybackPositionListener = interface;
      Arr1InnerOnGetPlaybackPositionListener = array of InnerOnGetPlaybackPositionListener;
      Arr2InnerOnGetPlaybackPositionListener = array of Arr1InnerOnGetPlaybackPositionListener;
      Arr3InnerOnGetPlaybackPositionListener = array of Arr2InnerOnGetPlaybackPositionListener;
      InnerOnPlaybackPositionUpdateListener = interface;
      Arr1InnerOnPlaybackPositionUpdateListener = array of InnerOnPlaybackPositionUpdateListener;
      Arr2InnerOnPlaybackPositionUpdateListener = array of Arr1InnerOnPlaybackPositionUpdateListener;
      Arr3InnerOnPlaybackPositionUpdateListener = array of Arr2InnerOnPlaybackPositionUpdateListener;
      InnerOnMetadataUpdateListener = interface;
      Arr1InnerOnMetadataUpdateListener = array of InnerOnMetadataUpdateListener;
      Arr2InnerOnMetadataUpdateListener = array of Arr1InnerOnMetadataUpdateListener;
      Arr3InnerOnMetadataUpdateListener = array of Arr2InnerOnMetadataUpdateListener;
      InnerMetadataEditor = class;
      Arr1InnerMetadataEditor = array of InnerMetadataEditor;
      Arr2InnerMetadataEditor = array of Arr1InnerMetadataEditor;
      Arr3InnerMetadataEditor = array of Arr2InnerMetadataEditor;
      InnerOnGetPlaybackPositionListener = interface external 'android.media' name 'OnGetPlaybackPositionListener' 
        function onGetPlaybackPosition(): jlong; overload;
      end;

      InnerOnPlaybackPositionUpdateListener = interface external 'android.media' name 'OnPlaybackPositionUpdateListener' 
        procedure onPlaybackPositionUpdate(para1: jlong); overload;
      end;

      InnerOnMetadataUpdateListener = interface external 'android.media' name 'OnMetadataUpdateListener' 
        procedure onMetadataUpdate(para1: jint; para2: JLObject); overload;
      end;

      InnerMetadataEditor = class external 'android.media' name 'MetadataEditor' 
      end;

  public
    const
      FLAG_KEY_MEDIA_FAST_FORWARD = 64;
      FLAG_KEY_MEDIA_NEXT = 128;
      FLAG_KEY_MEDIA_PAUSE = 16;
      FLAG_KEY_MEDIA_PLAY = 4;
      FLAG_KEY_MEDIA_PLAY_PAUSE = 8;
      FLAG_KEY_MEDIA_POSITION_UPDATE = 256;
      FLAG_KEY_MEDIA_PREVIOUS = 1;
      FLAG_KEY_MEDIA_RATING = 512;
      FLAG_KEY_MEDIA_REWIND = 2;
      FLAG_KEY_MEDIA_STOP = 32;
      PLAYSTATE_BUFFERING = 8;
      PLAYSTATE_ERROR = 9;
      PLAYSTATE_FAST_FORWARDING = 4;
      PLAYSTATE_PAUSED = 2;
      PLAYSTATE_PLAYING = 3;
      PLAYSTATE_REWINDING = 5;
      PLAYSTATE_SKIPPING_BACKWARDS = 7;
      PLAYSTATE_SKIPPING_FORWARDS = 6;
      PLAYSTATE_STOPPED = 1;
  public
    constructor create(para1: AAPendingIntent); overload;
    constructor create(para1: AAPendingIntent; para2: AOLooper); overload;
    function getMediaSession(): AMSMediaSession; overload; virtual;
    function editMetadata(para1: jboolean): AMRemoteControlClient.InnerMetadataEditor; overload; virtual;
    procedure setPlaybackState(para1: jint); overload; virtual;
    procedure setPlaybackState(para1: jint; para2: jlong; para3: jfloat); overload; virtual;
    procedure setTransportControlFlags(para1: jint); overload; virtual;
    procedure setMetadataUpdateListener(para1: AMRemoteControlClient.InnerOnMetadataUpdateListener); overload; virtual;
    procedure setPlaybackPositionUpdateListener(para1: AMRemoteControlClient.InnerOnPlaybackPositionUpdateListener); overload; virtual;
    procedure setOnGetPlaybackPositionListener(para1: AMRemoteControlClient.InnerOnGetPlaybackPositionListener); overload; virtual;
  end;

  AMRingtone = class external 'android.media' name 'Ringtone' (JLObject)
  public
    procedure setStreamType(para1: jint); overload; virtual;
    function getStreamType(): jint; overload; virtual;
    procedure setAudioAttributes(para1: AMAudioAttributes); overload; virtual;  // throws java.lang.IllegalArgumentException
    function getAudioAttributes(): AMAudioAttributes; overload; virtual;
    function getTitle(para1: ACContext): JLString; overload; virtual;
    procedure play(); overload; virtual;
    procedure stop(); overload; virtual;
    function isPlaying(): jboolean; overload; virtual;
  end;

  AMRingtoneManager = class external 'android.media' name 'RingtoneManager' (JLObject)
  public
    const
      ACTION_RINGTONE_PICKER = 'android.intent.action.RINGTONE_PICKER';
      EXTRA_RINGTONE_DEFAULT_URI = 'android.intent.extra.ringtone.DEFAULT_URI';
      EXTRA_RINGTONE_EXISTING_URI = 'android.intent.extra.ringtone.EXISTING_URI';
      EXTRA_RINGTONE_INCLUDE_DRM = 'android.intent.extra.ringtone.INCLUDE_DRM' deprecated;
      EXTRA_RINGTONE_PICKED_URI = 'android.intent.extra.ringtone.PICKED_URI';
      EXTRA_RINGTONE_SHOW_DEFAULT = 'android.intent.extra.ringtone.SHOW_DEFAULT';
      EXTRA_RINGTONE_SHOW_SILENT = 'android.intent.extra.ringtone.SHOW_SILENT';
      EXTRA_RINGTONE_TITLE = 'android.intent.extra.ringtone.TITLE';
      EXTRA_RINGTONE_TYPE = 'android.intent.extra.ringtone.TYPE';
      ID_COLUMN_INDEX = 0;
      TITLE_COLUMN_INDEX = 1;
      TYPE_ALARM = 4;
      TYPE_ALL = 7;
      TYPE_NOTIFICATION = 2;
      TYPE_RINGTONE = 1;
      URI_COLUMN_INDEX = 2;
  public
    constructor create(para1: AAActivity); overload;
    constructor create(para1: ACContext); overload;
    procedure setType(para1: jint); overload; virtual;
    function inferStreamType(): jint; overload; virtual;
    procedure setStopPreviousRingtone(para1: jboolean); overload; virtual;
    function getStopPreviousRingtone(): jboolean; overload; virtual;
    procedure stopPreviousRingtone(); overload; virtual;
    function getIncludeDrm(): jboolean; overload; virtual;
    procedure setIncludeDrm(para1: jboolean); overload; virtual;
    function getCursor(): ADCursor; overload; virtual;
    function getRingtone(para1: jint): AMRingtone; overload; virtual;
    function getRingtoneUri(para1: jint): ANUri; overload; virtual;
    function getRingtonePosition(para1: ANUri): jint; overload; virtual;
    class function getValidRingtoneUri(para1: ACContext): ANUri; static; overload;
    class function getRingtone(para1: ACContext; para2: ANUri): AMRingtone; static; overload;
    class function getActualDefaultRingtoneUri(para1: ACContext; para2: jint): ANUri; static; overload;
    class procedure setActualDefaultRingtoneUri(para1: ACContext; para2: jint; para3: ANUri); static; overload;
    class function isDefault(para1: ANUri): jboolean; static; overload;
    class function getDefaultType(para1: ANUri): jint; static; overload;
    class function getDefaultUri(para1: jint): ANUri; static; overload;
  end;

  AMSoundPool = class external 'android.media' name 'SoundPool' (JLObject)
  public
    type
      InnerOnLoadCompleteListener = interface;
      Arr1InnerOnLoadCompleteListener = array of InnerOnLoadCompleteListener;
      Arr2InnerOnLoadCompleteListener = array of Arr1InnerOnLoadCompleteListener;
      Arr3InnerOnLoadCompleteListener = array of Arr2InnerOnLoadCompleteListener;
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerOnLoadCompleteListener = interface external 'android.media' name 'OnLoadCompleteListener' 
        procedure onLoadComplete(para1: AMSoundPool; para2: jint; para3: jint); overload;
      end;

      InnerBuilder = class external 'android.media' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function setMaxStreams(para1: jint): AMSoundPool.InnerBuilder; overload; virtual;  // throws java.lang.IllegalArgumentException
        function setAudioAttributes(para1: AMAudioAttributes): AMSoundPool.InnerBuilder; overload; virtual;  // throws java.lang.IllegalArgumentException
        function build(): AMSoundPool; overload; virtual;
      end;

  public
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    function load(para1: JLString; para2: jint): jint; overload; virtual;
    function load(para1: ACContext; para2: jint; para3: jint): jint; overload; virtual;
    function load(para1: ACRAssetFileDescriptor; para2: jint): jint; overload; virtual;
    function load(para1: JIFileDescriptor; para2: jlong; para3: jlong; para4: jint): jint; overload; virtual;
    function unload(para1: jint): jboolean; overload; virtual; final;
    function play(para1: jint; para2: jfloat; para3: jfloat; para4: jint; para5: jint; para6: jfloat): jint; overload; virtual; final;
    procedure pause(para1: jint); overload; virtual; final;
    procedure resume(para1: jint); overload; virtual; final;
    procedure autoPause(); overload; virtual; final;
    procedure autoResume(); overload; virtual; final;
    procedure stop(para1: jint); overload; virtual; final;
    procedure setVolume(para1: jint; para2: jfloat; para3: jfloat); overload; virtual; final;
    procedure setPriority(para1: jint; para2: jint); overload; virtual; final;
    procedure setLoop(para1: jint; para2: jint); overload; virtual; final;
    procedure setRate(para1: jint; para2: jfloat); overload; virtual; final;
    procedure setOnLoadCompleteListener(para1: AMSoundPool.InnerOnLoadCompleteListener); overload; virtual;
    procedure release(); overload; virtual; final;
  end;

  AMThumbnailUtils = class external 'android.media' name 'ThumbnailUtils' (JLObject)
  public
    const
      OPTIONS_RECYCLE_INPUT = 2;
  public
    constructor create(); overload;
    class function createVideoThumbnail(para1: JLString; para2: jint): AGBitmap; static; overload;
    class function extractThumbnail(para1: AGBitmap; para2: jint; para3: jint): AGBitmap; static; overload;
    class function extractThumbnail(para1: AGBitmap; para2: jint; para3: jint; para4: jint): AGBitmap; static; overload;
  end;

  AMToneGenerator = class external 'android.media' name 'ToneGenerator' (JLObject)
  public
    const
      MAX_VOLUME = 100;
      MIN_VOLUME = 0;
      TONE_CDMA_ABBR_ALERT = 97;
      TONE_CDMA_ABBR_INTERCEPT = 37;
      TONE_CDMA_ABBR_REORDER = 39;
      TONE_CDMA_ALERT_AUTOREDIAL_LITE = 87;
      TONE_CDMA_ALERT_CALL_GUARD = 93;
      TONE_CDMA_ALERT_INCALL_LITE = 91;
      TONE_CDMA_ALERT_NETWORK_LITE = 86;
      TONE_CDMA_ANSWER = 42;
      TONE_CDMA_CALLDROP_LITE = 95;
      TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP = 46;
      TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL = 45;
      TONE_CDMA_CALL_SIGNAL_ISDN_PAT3 = 48;
      TONE_CDMA_CALL_SIGNAL_ISDN_PAT5 = 50;
      TONE_CDMA_CALL_SIGNAL_ISDN_PAT6 = 51;
      TONE_CDMA_CALL_SIGNAL_ISDN_PAT7 = 52;
      TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING = 49;
      TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI = 47;
      TONE_CDMA_CONFIRM = 41;
      TONE_CDMA_DIAL_TONE_LITE = 34;
      TONE_CDMA_EMERGENCY_RINGBACK = 92;
      TONE_CDMA_HIGH_L = 53;
      TONE_CDMA_HIGH_PBX_L = 71;
      TONE_CDMA_HIGH_PBX_SLS = 80;
      TONE_CDMA_HIGH_PBX_SS = 74;
      TONE_CDMA_HIGH_PBX_SSL = 77;
      TONE_CDMA_HIGH_PBX_S_X4 = 83;
      TONE_CDMA_HIGH_SLS = 65;
      TONE_CDMA_HIGH_SS = 56;
      TONE_CDMA_HIGH_SSL = 59;
      TONE_CDMA_HIGH_SS_2 = 62;
      TONE_CDMA_HIGH_S_X4 = 68;
      TONE_CDMA_INTERCEPT = 36;
      TONE_CDMA_KEYPAD_VOLUME_KEY_LITE = 89;
      TONE_CDMA_LOW_L = 55;
      TONE_CDMA_LOW_PBX_L = 73;
      TONE_CDMA_LOW_PBX_SLS = 82;
      TONE_CDMA_LOW_PBX_SS = 76;
      TONE_CDMA_LOW_PBX_SSL = 79;
      TONE_CDMA_LOW_PBX_S_X4 = 85;
      TONE_CDMA_LOW_SLS = 67;
      TONE_CDMA_LOW_SS = 58;
      TONE_CDMA_LOW_SSL = 61;
      TONE_CDMA_LOW_SS_2 = 64;
      TONE_CDMA_LOW_S_X4 = 70;
      TONE_CDMA_MED_L = 54;
      TONE_CDMA_MED_PBX_L = 72;
      TONE_CDMA_MED_PBX_SLS = 81;
      TONE_CDMA_MED_PBX_SS = 75;
      TONE_CDMA_MED_PBX_SSL = 78;
      TONE_CDMA_MED_PBX_S_X4 = 84;
      TONE_CDMA_MED_SLS = 66;
      TONE_CDMA_MED_SS = 57;
      TONE_CDMA_MED_SSL = 60;
      TONE_CDMA_MED_SS_2 = 63;
      TONE_CDMA_MED_S_X4 = 69;
      TONE_CDMA_NETWORK_BUSY = 40;
      TONE_CDMA_NETWORK_BUSY_ONE_SHOT = 96;
      TONE_CDMA_NETWORK_CALLWAITING = 43;
      TONE_CDMA_NETWORK_USA_RINGBACK = 35;
      TONE_CDMA_ONE_MIN_BEEP = 88;
      TONE_CDMA_PIP = 44;
      TONE_CDMA_PRESSHOLDKEY_LITE = 90;
      TONE_CDMA_REORDER = 38;
      TONE_CDMA_SIGNAL_OFF = 98;
      TONE_CDMA_SOFT_ERROR_LITE = 94;
      TONE_DTMF_0 = 0;
      TONE_DTMF_1 = 1;
      TONE_DTMF_2 = 2;
      TONE_DTMF_3 = 3;
      TONE_DTMF_4 = 4;
      TONE_DTMF_5 = 5;
      TONE_DTMF_6 = 6;
      TONE_DTMF_7 = 7;
      TONE_DTMF_8 = 8;
      TONE_DTMF_9 = 9;
      TONE_DTMF_A = 12;
      TONE_DTMF_B = 13;
      TONE_DTMF_C = 14;
      TONE_DTMF_D = 15;
      TONE_DTMF_P = 11;
      TONE_DTMF_S = 10;
      TONE_PROP_ACK = 25;
      TONE_PROP_BEEP = 24;
      TONE_PROP_BEEP2 = 28;
      TONE_PROP_NACK = 26;
      TONE_PROP_PROMPT = 27;
      TONE_SUP_BUSY = 17;
      TONE_SUP_CALL_WAITING = 22;
      TONE_SUP_CONFIRM = 32;
      TONE_SUP_CONGESTION = 18;
      TONE_SUP_CONGESTION_ABBREV = 31;
      TONE_SUP_DIAL = 16;
      TONE_SUP_ERROR = 21;
      TONE_SUP_INTERCEPT = 29;
      TONE_SUP_INTERCEPT_ABBREV = 30;
      TONE_SUP_PIP = 33;
      TONE_SUP_RADIO_ACK = 19;
      TONE_SUP_RADIO_NOTAVAIL = 20;
      TONE_SUP_RINGTONE = 23;
  public
    constructor create(para1: jint; para2: jint); overload;
    function startTone(para1: jint): jboolean; overload; virtual;
    function startTone(para1: jint; para2: jint): jboolean; overload; virtual;
    procedure stopTone(); overload; virtual;
    procedure release(); overload; virtual;
    function getAudioSessionId(): jint; overload; virtual; final;
  strict protected
    procedure finalize(); overload; virtual;
  end;

  AMAAudioEffect = class external 'android.media.audiofx' name 'AudioEffect' (JLObject)
  public
    type
      InnerOnControlStatusChangeListener = interface;
      Arr1InnerOnControlStatusChangeListener = array of InnerOnControlStatusChangeListener;
      Arr2InnerOnControlStatusChangeListener = array of Arr1InnerOnControlStatusChangeListener;
      Arr3InnerOnControlStatusChangeListener = array of Arr2InnerOnControlStatusChangeListener;
      InnerOnEnableStatusChangeListener = interface;
      Arr1InnerOnEnableStatusChangeListener = array of InnerOnEnableStatusChangeListener;
      Arr2InnerOnEnableStatusChangeListener = array of Arr1InnerOnEnableStatusChangeListener;
      Arr3InnerOnEnableStatusChangeListener = array of Arr2InnerOnEnableStatusChangeListener;
      InnerDescriptor = class;
      Arr1InnerDescriptor = array of InnerDescriptor;
      Arr2InnerDescriptor = array of Arr1InnerDescriptor;
      Arr3InnerDescriptor = array of Arr2InnerDescriptor;
      InnerOnControlStatusChangeListener = interface external 'android.media.audiofx' name 'OnControlStatusChangeListener' 
        procedure onControlStatusChange(para1: AMAAudioEffect; para2: jboolean); overload;
      end;

      InnerOnEnableStatusChangeListener = interface external 'android.media.audiofx' name 'OnEnableStatusChangeListener' 
        procedure onEnableStatusChange(para1: AMAAudioEffect; para2: jboolean); overload;
      end;

      InnerDescriptor = class external 'android.media.audiofx' name 'Descriptor' (JLObject)
      public
        var
          fconnectMode: JLString; external name 'connectMode';
          fimplementor: JLString; external name 'implementor';
          fname: JLString; external name 'name';
          ftype: JUUUID; external name 'type';
          fuuid: JUUUID; external name 'uuid';
      public
        constructor create(); overload;
        constructor create(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload;
      end;

  public
    const
      ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION = 'android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION';
      ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL = 'android.media.action.DISPLAY_AUDIO_EFFECT_CONTROL_PANEL';
      ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION = 'android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION';
      ALREADY_EXISTS = -2;
      CONTENT_TYPE_GAME = 2;
      CONTENT_TYPE_MOVIE = 1;
      CONTENT_TYPE_MUSIC = 0;
      CONTENT_TYPE_VOICE = 3;
      EFFECT_AUXILIARY = 'Auxiliary';
      EFFECT_INSERT = 'Insert';
  public
    final class var
      fEFFECT_TYPE_AEC: JUUUID; external name 'EFFECT_TYPE_AEC';
      fEFFECT_TYPE_AGC: JUUUID; external name 'EFFECT_TYPE_AGC';
      fEFFECT_TYPE_BASS_BOOST: JUUUID; external name 'EFFECT_TYPE_BASS_BOOST';
      fEFFECT_TYPE_ENV_REVERB: JUUUID; external name 'EFFECT_TYPE_ENV_REVERB';
      fEFFECT_TYPE_EQUALIZER: JUUUID; external name 'EFFECT_TYPE_EQUALIZER';
      fEFFECT_TYPE_LOUDNESS_ENHANCER: JUUUID; external name 'EFFECT_TYPE_LOUDNESS_ENHANCER';
      fEFFECT_TYPE_NS: JUUUID; external name 'EFFECT_TYPE_NS';
      fEFFECT_TYPE_PRESET_REVERB: JUUUID; external name 'EFFECT_TYPE_PRESET_REVERB';
      fEFFECT_TYPE_VIRTUALIZER: JUUUID; external name 'EFFECT_TYPE_VIRTUALIZER';
  public
    const
      ERROR = -1;
      ERROR_BAD_VALUE = -4;
      ERROR_DEAD_OBJECT = -7;
      ERROR_INVALID_OPERATION = -5;
      ERROR_NO_INIT = -3;
      ERROR_NO_MEMORY = -6;
      EXTRA_AUDIO_SESSION = 'android.media.extra.AUDIO_SESSION';
      EXTRA_CONTENT_TYPE = 'android.media.extra.CONTENT_TYPE';
      EXTRA_PACKAGE_NAME = 'android.media.extra.PACKAGE_NAME';
      SUCCESS = 0;
  public
    procedure release(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    function getDescriptor(): AMAAudioEffect.InnerDescriptor; overload; virtual;  // throws java.lang.IllegalStateException
    class function queryEffects(): AMAAudioEffect.Arr1InnerDescriptor; static; overload;
    function setEnabled(para1: jboolean): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getId(): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getEnabled(): jboolean; overload; virtual;  // throws java.lang.IllegalStateException
    function hasControl(): jboolean; overload; virtual;  // throws java.lang.IllegalStateException
    procedure setEnableStatusListener(para1: AMAAudioEffect.InnerOnEnableStatusChangeListener); overload; virtual;
    procedure setControlStatusListener(para1: AMAAudioEffect.InnerOnControlStatusChangeListener); overload; virtual;
  end;

  AMAVisualizer = class external 'android.media.audiofx' name 'Visualizer' (JLObject)
  public
    type
      InnerOnDataCaptureListener = interface;
      Arr1InnerOnDataCaptureListener = array of InnerOnDataCaptureListener;
      Arr2InnerOnDataCaptureListener = array of Arr1InnerOnDataCaptureListener;
      Arr3InnerOnDataCaptureListener = array of Arr2InnerOnDataCaptureListener;
      InnerMeasurementPeakRms = class;
      Arr1InnerMeasurementPeakRms = array of InnerMeasurementPeakRms;
      Arr2InnerMeasurementPeakRms = array of Arr1InnerMeasurementPeakRms;
      Arr3InnerMeasurementPeakRms = array of Arr2InnerMeasurementPeakRms;
      InnerOnDataCaptureListener = interface external 'android.media.audiofx' name 'OnDataCaptureListener' 
        procedure onWaveFormDataCapture(para1: AMAVisualizer; para2: Arr1jbyte; para3: jint); overload;
        procedure onWaveFormDataCapture(para1: AMAVisualizer; var para2: array of jbyte; para3: jint); overload;
        procedure onFftDataCapture(para1: AMAVisualizer; para2: Arr1jbyte; para3: jint); overload;
        procedure onFftDataCapture(para1: AMAVisualizer; var para2: array of jbyte; para3: jint); overload;
      end;

      InnerMeasurementPeakRms = class sealed external 'android.media.audiofx' name 'MeasurementPeakRms' (JLObject)
      public
        var
          fmPeak: jint; external name 'mPeak';
          fmRms: jint; external name 'mRms';
      public
        constructor create(); overload;
      end;

  public
    const
      ALREADY_EXISTS = -2;
      ERROR = -1;
      ERROR_BAD_VALUE = -4;
      ERROR_DEAD_OBJECT = -7;
      ERROR_INVALID_OPERATION = -5;
      ERROR_NO_INIT = -3;
      ERROR_NO_MEMORY = -6;
      MEASUREMENT_MODE_NONE = 0;
      MEASUREMENT_MODE_PEAK_RMS = 1;
      SCALING_MODE_AS_PLAYED = 1;
      SCALING_MODE_NORMALIZED = 0;
      STATE_ENABLED = 2;
      STATE_INITIALIZED = 1;
      STATE_UNINITIALIZED = 0;
      SUCCESS = 0;
  public
    constructor create(para1: jint); overload;  // throws java.lang.UnsupportedOperationException, java.lang.RuntimeException
    procedure release(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    function setEnabled(para1: jboolean): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getEnabled(): jboolean; overload; virtual;
    class function getCaptureSizeRange(): Arr1jint; static; overload;
    class function getMaxCaptureRate(): jint; static; overload;
    function setCaptureSize(para1: jint): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getCaptureSize(): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function setScalingMode(para1: jint): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getScalingMode(): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function setMeasurementMode(para1: jint): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getMeasurementMode(): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getSamplingRate(): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getWaveForm(para1: Arr1jbyte): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getWaveForm(var para1: array of jbyte): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getFft(para1: Arr1jbyte): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getFft(var para1: array of jbyte): jint; overload; virtual;  // throws java.lang.IllegalStateException
    function getMeasurementPeakRms(para1: AMAVisualizer.InnerMeasurementPeakRms): jint; overload; virtual;
    function setDataCaptureListener(para1: AMAVisualizer.InnerOnDataCaptureListener; para2: jint; para3: jboolean; para4: jboolean): jint; overload; virtual;
  end;

  AMEEffect = class abstract external 'android.media.effect' name 'Effect' (JLObject)
  public
    constructor create(); overload;
    function getName(): JLString; overload; virtual; abstract;
    procedure apply(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual; abstract;
    procedure setParameter(para1: JLString; para2: JLObject); overload; virtual; abstract;
    procedure setUpdateListener(para1: AMEEffectUpdateListener); overload; virtual;
    procedure release(); overload; virtual; abstract;
  end;

  AMEEffectContext = class external 'android.media.effect' name 'EffectContext' (JLObject)
  public
    class function createWithCurrentGlContext(): AMEEffectContext; static; overload;
    function getFactory(): AMEEffectFactory; overload; virtual;
    procedure release(); overload; virtual;
  end;

  AMEEffectFactory = class external 'android.media.effect' name 'EffectFactory' (JLObject)
  public
    const
      EFFECT_AUTOFIX = 'android.media.effect.effects.AutoFixEffect';
      EFFECT_BACKDROPPER = 'android.media.effect.effects.BackDropperEffect';
      EFFECT_BITMAPOVERLAY = 'android.media.effect.effects.BitmapOverlayEffect';
      EFFECT_BLACKWHITE = 'android.media.effect.effects.BlackWhiteEffect';
      EFFECT_BRIGHTNESS = 'android.media.effect.effects.BrightnessEffect';
      EFFECT_CONTRAST = 'android.media.effect.effects.ContrastEffect';
      EFFECT_CROP = 'android.media.effect.effects.CropEffect';
      EFFECT_CROSSPROCESS = 'android.media.effect.effects.CrossProcessEffect';
      EFFECT_DOCUMENTARY = 'android.media.effect.effects.DocumentaryEffect';
      EFFECT_DUOTONE = 'android.media.effect.effects.DuotoneEffect';
      EFFECT_FILLLIGHT = 'android.media.effect.effects.FillLightEffect';
      EFFECT_FISHEYE = 'android.media.effect.effects.FisheyeEffect';
      EFFECT_FLIP = 'android.media.effect.effects.FlipEffect';
      EFFECT_GRAIN = 'android.media.effect.effects.GrainEffect';
      EFFECT_GRAYSCALE = 'android.media.effect.effects.GrayscaleEffect';
      EFFECT_LOMOISH = 'android.media.effect.effects.LomoishEffect';
      EFFECT_NEGATIVE = 'android.media.effect.effects.NegativeEffect';
      EFFECT_POSTERIZE = 'android.media.effect.effects.PosterizeEffect';
      EFFECT_REDEYE = 'android.media.effect.effects.RedEyeEffect';
      EFFECT_ROTATE = 'android.media.effect.effects.RotateEffect';
      EFFECT_SATURATE = 'android.media.effect.effects.SaturateEffect';
      EFFECT_SEPIA = 'android.media.effect.effects.SepiaEffect';
      EFFECT_SHARPEN = 'android.media.effect.effects.SharpenEffect';
      EFFECT_STRAIGHTEN = 'android.media.effect.effects.StraightenEffect';
      EFFECT_TEMPERATURE = 'android.media.effect.effects.ColorTemperatureEffect';
      EFFECT_TINT = 'android.media.effect.effects.TintEffect';
      EFFECT_VIGNETTE = 'android.media.effect.effects.VignetteEffect';
  public
    function createEffect(para1: JLString): AMEEffect; overload; virtual;
    class function isEffectSupported(para1: JLString): jboolean; static; overload;
  end;

  AMEEffectUpdateListener = interface external 'android.media.effect' name 'EffectUpdateListener' 
    procedure onEffectUpdated(para1: AMEEffect; para2: JLObject); overload;
  end;

  AMMtpConstants = class sealed external 'android.mtp' name 'MtpConstants' (JLObject)
  public
    const
      ASSOCIATION_TYPE_GENERIC_FOLDER = 1;
      FORMAT_3GP_CONTAINER = 47492;
      FORMAT_AAC = 47363;
      FORMAT_ABSTRACT_AUDIO_ALBUM = 47619;
      FORMAT_ABSTRACT_AUDIO_PLAYLIST = 47625;
      FORMAT_ABSTRACT_AV_PLAYLIST = 47621;
      FORMAT_ABSTRACT_DOCUMENT = 47745;
      FORMAT_ABSTRACT_IMAGE_ALBUM = 47618;
      FORMAT_ABSTRACT_MEDIACAST = 47627;
      FORMAT_ABSTRACT_MULTIMEDIA_ALBUM = 47617;
      FORMAT_ABSTRACT_VIDEO_ALBUM = 47620;
      FORMAT_ABSTRACT_VIDEO_PLAYLIST = 47626;
      FORMAT_AIFF = 12295;
      FORMAT_ASF = 12300;
      FORMAT_ASSOCIATION = 12289;
      FORMAT_ASX_PLAYLIST = 47635;
      FORMAT_AUDIBLE = 47364;
      FORMAT_AVI = 12298;
      FORMAT_BMP = 14340;
      FORMAT_DPOF = 12294;
      FORMAT_EXECUTABLE = 12291;
      FORMAT_EXIF_JPEG = 14337;
      FORMAT_FLAC = 47366;
      FORMAT_GIF = 14343;
      FORMAT_HTML = 12293;
      FORMAT_JFIF = 14344;
      FORMAT_JP2 = 14351;
      FORMAT_JPX = 14352;
      FORMAT_M3U_PLAYLIST = 47633;
      FORMAT_MP2 = 47491;
      FORMAT_MP3 = 12297;
      FORMAT_MP4_CONTAINER = 47490;
      FORMAT_MPEG = 12299;
      FORMAT_MPL_PLAYLIST = 47634;
      FORMAT_MS_EXCEL_SPREADSHEET = 47749;
      FORMAT_MS_POWERPOINT_PRESENTATION = 47750;
      FORMAT_MS_WORD_DOCUMENT = 47747;
      FORMAT_OGG = 47362;
      FORMAT_PICT = 14346;
      FORMAT_PLS_PLAYLIST = 47636;
      FORMAT_PNG = 14347;
      FORMAT_SCRIPT = 12290;
      FORMAT_TEXT = 12292;
      FORMAT_TIFF = 14349;
      FORMAT_TIFF_EP = 14338;
      FORMAT_UNDEFINED = 12288;
      FORMAT_UNDEFINED_AUDIO = 47360;
      FORMAT_UNDEFINED_COLLECTION = 47616;
      FORMAT_UNDEFINED_DOCUMENT = 47744;
      FORMAT_UNDEFINED_FIRMWARE = 47106;
      FORMAT_UNDEFINED_VIDEO = 47488;
      FORMAT_WAV = 12296;
      FORMAT_WINDOWS_IMAGE_FORMAT = 47233;
      FORMAT_WMA = 47361;
      FORMAT_WMV = 47489;
      FORMAT_WPL_PLAYLIST = 47632;
      FORMAT_XML_DOCUMENT = 47746;
      PROTECTION_STATUS_NONE = 0;
      PROTECTION_STATUS_NON_TRANSFERABLE_DATA = 32771;
      PROTECTION_STATUS_READ_ONLY = 32769;
      PROTECTION_STATUS_READ_ONLY_DATA = 32770;
  public
    constructor create(); overload;
    class function isAbstractObject(para1: jint): jboolean; static; overload;
  end;

  AMMtpDevice = class sealed external 'android.mtp' name 'MtpDevice' (JLObject)
  public
    constructor create(para1: AHUUsbDevice); overload;
    function open(para1: AHUUsbDeviceConnection): jboolean; overload; virtual;
    procedure close(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function getDeviceName(): JLString; overload; virtual;
    function getDeviceId(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function getDeviceInfo(): AMMtpDeviceInfo; overload; virtual;
    function getStorageIds(): Arr1jint; overload; virtual;
    function getObjectHandles(para1: jint; para2: jint; para3: jint): Arr1jint; overload; virtual;
    function getObject(para1: jint; para2: jint): Arr1jbyte; overload; virtual;
    function getThumbnail(para1: jint): Arr1jbyte; overload; virtual;
    function getStorageInfo(para1: jint): AMMtpStorageInfo; overload; virtual;
    function getObjectInfo(para1: jint): AMMtpObjectInfo; overload; virtual;
    function deleteObject(para1: jint): jboolean; overload; virtual;
    function getParent(para1: jint): jlong; overload; virtual;
    function getStorageId(para1: jint): jlong; overload; virtual;
    function importFile(para1: jint; para2: JLString): jboolean; overload; virtual;
  end;

  AMMtpDeviceInfo = class external 'android.mtp' name 'MtpDeviceInfo' (JLObject)
  public
    function getManufacturer(): JLString; overload; virtual; final;
    function getModel(): JLString; overload; virtual; final;
    function getVersion(): JLString; overload; virtual; final;
    function getSerialNumber(): JLString; overload; virtual; final;
  end;

  AMMtpObjectInfo = class sealed external 'android.mtp' name 'MtpObjectInfo' (JLObject)
  public
    function getObjectHandle(): jint; overload; virtual; final;
    function getStorageId(): jint; overload; virtual; final;
    function getFormat(): jint; overload; virtual; final;
    function getProtectionStatus(): jint; overload; virtual; final;
    function getCompressedSize(): jint; overload; virtual; final;
    function getThumbFormat(): jint; overload; virtual; final;
    function getThumbCompressedSize(): jint; overload; virtual; final;
    function getThumbPixWidth(): jint; overload; virtual; final;
    function getThumbPixHeight(): jint; overload; virtual; final;
    function getImagePixWidth(): jint; overload; virtual; final;
    function getImagePixHeight(): jint; overload; virtual; final;
    function getImagePixDepth(): jint; overload; virtual; final;
    function getParent(): jint; overload; virtual; final;
    function getAssociationType(): jint; overload; virtual; final;
    function getAssociationDesc(): jint; overload; virtual; final;
    function getSequenceNumber(): jint; overload; virtual; final;
    function getName(): JLString; overload; virtual; final;
    function getDateCreated(): jlong; overload; virtual; final;
    function getDateModified(): jlong; overload; virtual; final;
    function getKeywords(): JLString; overload; virtual; final;
  end;

  AMMtpStorageInfo = class sealed external 'android.mtp' name 'MtpStorageInfo' (JLObject)
  public
    function getStorageId(): jint; overload; virtual; final;
    function getMaxCapacity(): jlong; overload; virtual; final;
    function getFreeSpace(): jlong; overload; virtual; final;
    function getDescription(): JLString; overload; virtual; final;
    function getVolumeIdentifier(): JLString; overload; virtual; final;
  end;

  ANConnectivityManager = class external 'android.net' name 'ConnectivityManager' (JLObject)
  public
    type
      InnerNetworkCallback = class;
      Arr1InnerNetworkCallback = array of InnerNetworkCallback;
      Arr2InnerNetworkCallback = array of Arr1InnerNetworkCallback;
      Arr3InnerNetworkCallback = array of Arr2InnerNetworkCallback;
      InnerOnNetworkActiveListener = interface;
      Arr1InnerOnNetworkActiveListener = array of InnerOnNetworkActiveListener;
      Arr2InnerOnNetworkActiveListener = array of Arr1InnerOnNetworkActiveListener;
      Arr3InnerOnNetworkActiveListener = array of Arr2InnerOnNetworkActiveListener;
      InnerNetworkCallback = class external 'android.net' name 'NetworkCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onAvailable(para1: ANNetwork); overload; virtual;
        procedure onLosing(para1: ANNetwork; para2: jint); overload; virtual;
        procedure onLost(para1: ANNetwork); overload; virtual;
        procedure onCapabilitiesChanged(para1: ANNetwork; para2: ANNetworkCapabilities); overload; virtual;
        procedure onLinkPropertiesChanged(para1: ANNetwork; para2: ANLinkProperties); overload; virtual;
      end;

      InnerOnNetworkActiveListener = interface external 'android.net' name 'OnNetworkActiveListener' 
        procedure onNetworkActive(); overload;
      end;

  public
    const
      ACTION_BACKGROUND_DATA_SETTING_CHANGED = 'android.net.conn.BACKGROUND_DATA_SETTING_CHANGED' deprecated;
      CONNECTIVITY_ACTION = 'android.net.conn.CONNECTIVITY_CHANGE';
      DEFAULT_NETWORK_PREFERENCE = 1 deprecated;
      EXTRA_EXTRA_INFO = 'extraInfo';
      EXTRA_IS_FAILOVER = 'isFailover';
      EXTRA_NETWORK_INFO = 'networkInfo' deprecated;
      EXTRA_NETWORK_TYPE = 'networkType';
      EXTRA_NO_CONNECTIVITY = 'noConnectivity';
      EXTRA_OTHER_NETWORK_INFO = 'otherNetwork';
      EXTRA_REASON = 'reason';
      TYPE_BLUETOOTH = 7;
      TYPE_DUMMY = 8;
      TYPE_ETHERNET = 9;
      TYPE_MOBILE = 0;
      TYPE_MOBILE_DUN = 4;
      TYPE_MOBILE_HIPRI = 5;
      TYPE_MOBILE_MMS = 2;
      TYPE_MOBILE_SUPL = 3;
      TYPE_VPN = 17;
      TYPE_WIFI = 1;
      TYPE_WIMAX = 6;
  public
    class function isNetworkTypeValid(para1: jint): jboolean; static; overload;
    procedure setNetworkPreference(para1: jint); overload; virtual;
    function getNetworkPreference(): jint; overload; virtual;
    function getActiveNetworkInfo(): ANNetworkInfo; overload; virtual;
    function getNetworkInfo(para1: jint): ANNetworkInfo; overload; virtual;
    function getNetworkInfo(para1: ANNetwork): ANNetworkInfo; overload; virtual;
    function getAllNetworkInfo(): Arr1ANNetworkInfo; overload; virtual;
    function getAllNetworks(): Arr1ANNetwork; overload; virtual;
    function getLinkProperties(para1: ANNetwork): ANLinkProperties; overload; virtual;
    function getNetworkCapabilities(para1: ANNetwork): ANNetworkCapabilities; overload; virtual;
    function startUsingNetworkFeature(para1: jint; para2: JLString): jint; overload; virtual;
    function stopUsingNetworkFeature(para1: jint; para2: JLString): jint; overload; virtual;
    function requestRouteToHost(para1: jint; para2: jint): jboolean; overload; virtual;
    function getBackgroundDataSetting(): jboolean; overload; virtual;
    procedure addDefaultNetworkActiveListener(para1: ANConnectivityManager.InnerOnNetworkActiveListener); overload; virtual;
    procedure removeDefaultNetworkActiveListener(para1: ANConnectivityManager.InnerOnNetworkActiveListener); overload; virtual;
    function isDefaultNetworkActive(): jboolean; overload; virtual;
    procedure reportBadNetwork(para1: ANNetwork); overload; virtual;
    function isActiveNetworkMetered(): jboolean; overload; virtual;
    procedure requestNetwork(para1: ANNetworkRequest; para2: ANConnectivityManager.InnerNetworkCallback); overload; virtual;
    procedure registerNetworkCallback(para1: ANNetworkRequest; para2: ANConnectivityManager.InnerNetworkCallback); overload; virtual;
    procedure unregisterNetworkCallback(para1: ANConnectivityManager.InnerNetworkCallback); overload; virtual;
    class function setProcessDefaultNetwork(para1: ANNetwork): jboolean; static; overload;
    class function getProcessDefaultNetwork(): ANNetwork; static; overload;
  end;

  ANCredentials = class external 'android.net' name 'Credentials' (JLObject)
  public
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    function getPid(): jint; overload; virtual;
    function getUid(): jint; overload; virtual;
    function getGid(): jint; overload; virtual;
  end;

  ANLocalServerSocket = class external 'android.net' name 'LocalServerSocket' (JLObject)
  public
    constructor create(para1: JLString); overload;  // throws java.io.IOException
    constructor create(para1: JIFileDescriptor); overload;  // throws java.io.IOException
    function getLocalSocketAddress(): ANLocalSocketAddress; overload; virtual;
    function accept(): ANLocalSocket; overload; virtual;  // throws java.io.IOException
    function getFileDescriptor(): JIFileDescriptor; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  ANLocalSocket = class external 'android.net' name 'LocalSocket' (JLObject, JICloseable)
  public
    const
      SOCKET_DGRAM = 1;
      SOCKET_SEQPACKET = 3;
      SOCKET_STREAM = 2;
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    function toString(): JLString; overload; virtual;
    procedure connect(para1: ANLocalSocketAddress); overload; virtual;  // throws java.io.IOException
    procedure bind(para1: ANLocalSocketAddress); overload; virtual;  // throws java.io.IOException
    function getLocalSocketAddress(): ANLocalSocketAddress; overload; virtual;
    function getInputStream(): JIInputStream; overload; virtual;  // throws java.io.IOException
    function getOutputStream(): JIOutputStream; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure shutdownInput(); overload; virtual;  // throws java.io.IOException
    procedure shutdownOutput(); overload; virtual;  // throws java.io.IOException
    procedure setReceiveBufferSize(para1: jint); overload; virtual;  // throws java.io.IOException
    function getReceiveBufferSize(): jint; overload; virtual;  // throws java.io.IOException
    procedure setSoTimeout(para1: jint); overload; virtual;  // throws java.io.IOException
    function getSoTimeout(): jint; overload; virtual;  // throws java.io.IOException
    procedure setSendBufferSize(para1: jint); overload; virtual;  // throws java.io.IOException
    function getSendBufferSize(): jint; overload; virtual;  // throws java.io.IOException
    function getRemoteSocketAddress(): ANLocalSocketAddress; overload; virtual;
    function isConnected(): jboolean; overload; virtual;
    function isClosed(): jboolean; overload; virtual;
    function isBound(): jboolean; overload; virtual;
    function isOutputShutdown(): jboolean; overload; virtual;
    function isInputShutdown(): jboolean; overload; virtual;
    procedure connect(para1: ANLocalSocketAddress; para2: jint); overload; virtual;  // throws java.io.IOException
    procedure setFileDescriptorsForSend(para1: Arr1JIFileDescriptor); overload; virtual;
    procedure setFileDescriptorsForSend(var para1: array of JIFileDescriptor); overload; virtual;
    function getAncillaryFileDescriptors(): Arr1JIFileDescriptor; overload; virtual;  // throws java.io.IOException
    function getPeerCredentials(): ANCredentials; overload; virtual;  // throws java.io.IOException
    function getFileDescriptor(): JIFileDescriptor; overload; virtual;
  end;

  ANMailTo = class external 'android.net' name 'MailTo' (JLObject)
  public
    const
      MAILTO_SCHEME = 'mailto:';
  public
    class function isMailTo(para1: JLString): jboolean; static; overload;
    class function parse(para1: JLString): ANMailTo; static; overload;  // throws android.net.ParseException
    function getTo(): JLString; overload; virtual;
    function getCc(): JLString; overload; virtual;
    function getSubject(): JLString; overload; virtual;
    function getBody(): JLString; overload; virtual;
    function getHeaders(): JUMap; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ANProxy = class sealed external 'android.net' name 'Proxy' (JLObject)
  public
    const
      EXTRA_PROXY_INFO = 'android.intent.extra.PROXY_INFO';
      PROXY_CHANGE_ACTION = 'android.intent.action.PROXY_CHANGE';
  public
    constructor create(); overload;
    class function getHost(para1: ACContext): JLString; static; overload; final;
    class function getPort(para1: ACContext): jint; static; overload; final;
    class function getDefaultHost(): JLString; static; overload; final;
    class function getDefaultPort(): jint; static; overload; final;
  end;

  ANSSLSessionCache = class sealed external 'android.net' name 'SSLSessionCache' (JLObject)
  public
    constructor create(para1: JIFile); overload;  // throws java.io.IOException
    constructor create(para1: ACContext); overload;
  end;

  ANTrafficStats = class external 'android.net' name 'TrafficStats' (JLObject)
  public
    const
      UNSUPPORTED = -1;
  public
    constructor create(); overload;
    class procedure setThreadStatsTag(para1: jint); static; overload;
    class function getThreadStatsTag(): jint; static; overload;
    class procedure clearThreadStatsTag(); static; overload;
    class procedure tagSocket(para1: JNSocket); static; overload;  // throws java.net.SocketException
    class procedure untagSocket(para1: JNSocket); static; overload;  // throws java.net.SocketException
    class procedure incrementOperationCount(para1: jint); static; overload;
    class procedure incrementOperationCount(para1: jint; para2: jint); static; overload;
    class function getMobileTxPackets(): jlong; static; overload;
    class function getMobileRxPackets(): jlong; static; overload;
    class function getMobileTxBytes(): jlong; static; overload;
    class function getMobileRxBytes(): jlong; static; overload;
    class function getTotalTxPackets(): jlong; static; overload;
    class function getTotalRxPackets(): jlong; static; overload;
    class function getTotalTxBytes(): jlong; static; overload;
    class function getTotalRxBytes(): jlong; static; overload;
    class function getUidTxBytes(para1: jint): jlong; static; overload;
    class function getUidRxBytes(para1: jint): jlong; static; overload;
    class function getUidTxPackets(para1: jint): jlong; static; overload;
    class function getUidRxPackets(para1: jint): jlong; static; overload;
    class function getUidTcpTxBytes(para1: jint): jlong; static; overload;
    class function getUidTcpRxBytes(para1: jint): jlong; static; overload;
    class function getUidUdpTxBytes(para1: jint): jlong; static; overload;
    class function getUidUdpRxBytes(para1: jint): jlong; static; overload;
    class function getUidTcpTxSegments(para1: jint): jlong; static; overload;
    class function getUidTcpRxSegments(para1: jint): jlong; static; overload;
    class function getUidUdpTxPackets(para1: jint): jlong; static; overload;
    class function getUidUdpRxPackets(para1: jint): jlong; static; overload;
  end;

  ANUrlQuerySanitizer = class external 'android.net' name 'UrlQuerySanitizer' (JLObject)
  public
    type
      InnerValueSanitizer = interface;
      Arr1InnerValueSanitizer = array of InnerValueSanitizer;
      Arr2InnerValueSanitizer = array of Arr1InnerValueSanitizer;
      Arr3InnerValueSanitizer = array of Arr2InnerValueSanitizer;
      InnerParameterValuePair = class;
      Arr1InnerParameterValuePair = array of InnerParameterValuePair;
      Arr2InnerParameterValuePair = array of Arr1InnerParameterValuePair;
      Arr3InnerParameterValuePair = array of Arr2InnerParameterValuePair;
      InnerIllegalCharacterValueSanitizer = class;
      Arr1InnerIllegalCharacterValueSanitizer = array of InnerIllegalCharacterValueSanitizer;
      Arr2InnerIllegalCharacterValueSanitizer = array of Arr1InnerIllegalCharacterValueSanitizer;
      Arr3InnerIllegalCharacterValueSanitizer = array of Arr2InnerIllegalCharacterValueSanitizer;
      InnerValueSanitizer = interface external 'android.net' name 'ValueSanitizer' 
        function sanitize(para1: JLString): JLString; overload;
      end;

      InnerParameterValuePair = class external 'android.net' name 'ParameterValuePair' 
      end;

      InnerIllegalCharacterValueSanitizer = class external 'android.net' name 'IllegalCharacterValueSanitizer' (JLObject, ANUrlQuerySanitizer.InnerValueSanitizer)
      public
        const
          ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL = 1439;
          ALL_BUT_NUL_LEGAL = 1535;
          ALL_BUT_WHITESPACE_LEGAL = 1532;
          ALL_ILLEGAL = 0;
          ALL_OK = 2047;
          ALL_WHITESPACE_OK = 3;
          AMP_AND_SPACE_LEGAL = 129;
          AMP_LEGAL = 128;
          AMP_OK = 128;
          DQUOTE_OK = 8;
          GT_OK = 64;
          LT_OK = 32;
          NON_7_BIT_ASCII_OK = 4;
          NUL_OK = 512;
          OTHER_WHITESPACE_OK = 2;
          PCT_OK = 256;
          SCRIPT_URL_OK = 1024;
          SPACE_LEGAL = 1;
          SPACE_OK = 1;
          SQUOTE_OK = 16;
          URL_AND_SPACE_LEGAL = 405;
          URL_LEGAL = 404;
      public
        constructor create(para1: jint); overload;
        function sanitize(para1: JLString): JLString; overload; virtual;
      end;

  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    function getUnregisteredParameterValueSanitizer(): ANUrlQuerySanitizer.InnerValueSanitizer; overload; virtual;
    procedure setUnregisteredParameterValueSanitizer(para1: ANUrlQuerySanitizer.InnerValueSanitizer); overload; virtual;
    class function getAllIllegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    class function getAllButNulLegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    class function getAllButWhitespaceLegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    class function getUrlLegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    class function getUrlAndSpaceLegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    class function getAmpLegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    class function getAmpAndSpaceLegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    class function getSpaceLegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    class function getAllButNulAndAngleBracketsLegal(): ANUrlQuerySanitizer.InnerValueSanitizer; static; overload; final;
    procedure parseUrl(para1: JLString); overload; virtual;
    procedure parseQuery(para1: JLString); overload; virtual;
    function getParameterSet(): JUSet; overload; virtual;
    function getParameterList(): JUList; overload; virtual;
    function hasParameter(para1: JLString): jboolean; overload; virtual;
    function getValue(para1: JLString): JLString; overload; virtual;
    procedure registerParameter(para1: JLString; para2: ANUrlQuerySanitizer.InnerValueSanitizer); overload; virtual;
    procedure registerParameters(para1: Arr1JLString; para2: ANUrlQuerySanitizer.InnerValueSanitizer); overload; virtual;
    procedure registerParameters(var para1: array of JLString; para2: ANUrlQuerySanitizer.InnerValueSanitizer); overload; virtual;
    procedure setAllowUnregisteredParamaters(para1: jboolean); overload; virtual;
    function getAllowUnregisteredParamaters(): jboolean; overload; virtual;
    procedure setPreferFirstRepeatedParameter(para1: jboolean); overload; virtual;
    function getPreferFirstRepeatedParameter(): jboolean; overload; virtual;
  strict protected
    procedure parseEntry(para1: JLString; para2: JLString); overload; virtual;
    procedure addSanitizedEntry(para1: JLString; para2: JLString); overload; virtual;
  public
    function getValueSanitizer(para1: JLString): ANUrlQuerySanitizer.InnerValueSanitizer; overload; virtual;
    function getEffectiveValueSanitizer(para1: JLString): ANUrlQuerySanitizer.InnerValueSanitizer; overload; virtual;
    function unescape(para1: JLString): JLString; overload; virtual;
  strict protected
    function isHexDigit(para1: jchar): jboolean; overload; virtual;
    function decodeHexDigit(para1: jchar): jint; overload; virtual;
    procedure clear(); overload; virtual;
  end;

  ANHSslCertificate = class external 'android.net.http' name 'SslCertificate' (JLObject)
  public
    type
      InnerDName = class;
      Arr1InnerDName = array of InnerDName;
      Arr2InnerDName = array of Arr1InnerDName;
      Arr3InnerDName = array of Arr2InnerDName;
      InnerDName = class external 'android.net.http' name 'DName' 
      end;

  public
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: JUDate; para4: JUDate); overload;
    constructor create(para1: JSCX509Certificate); overload;
    class function saveState(para1: ANHSslCertificate): AOBundle; static; overload;
    class function restoreState(para1: AOBundle): ANHSslCertificate; static; overload;
    function getValidNotBeforeDate(): JUDate; overload; virtual;
    function getValidNotBefore(): JLString; overload; virtual;
    function getValidNotAfterDate(): JUDate; overload; virtual;
    function getValidNotAfter(): JLString; overload; virtual;
    function getIssuedTo(): ANHSslCertificate.InnerDName; overload; virtual;
    function getIssuedBy(): ANHSslCertificate.InnerDName; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ANHSslError = class external 'android.net.http' name 'SslError' (JLObject)
  public
    const
      SSL_DATE_INVALID = 4;
      SSL_EXPIRED = 1;
      SSL_IDMISMATCH = 2;
      SSL_INVALID = 5;
      SSL_MAX_ERROR = 6 deprecated;
      SSL_NOTYETVALID = 0;
      SSL_UNTRUSTED = 3;
  public
    constructor create(para1: jint; para2: ANHSslCertificate); overload;
    constructor create(para1: jint; para2: JSCX509Certificate); overload;
    constructor create(para1: jint; para2: ANHSslCertificate; para3: JLString); overload;
    constructor create(para1: jint; para2: JSCX509Certificate; para3: JLString); overload;
    function getCertificate(): ANHSslCertificate; overload; virtual;
    function getUrl(): JLString; overload; virtual;
    function addError(para1: jint): jboolean; overload; virtual;
    function hasError(para1: jint): jboolean; overload; virtual;
    function getPrimaryError(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ANRAudioCodec = class external 'android.net.rtp' name 'AudioCodec' (JLObject)
  public
    final class var
      fAMR: ANRAudioCodec; external name 'AMR';
      fGSM: ANRAudioCodec; external name 'GSM';
      fGSM_EFR: ANRAudioCodec; external name 'GSM_EFR';
      fPCMA: ANRAudioCodec; external name 'PCMA';
      fPCMU: ANRAudioCodec; external name 'PCMU';
  public
    final var
      ffmtp: JLString; external name 'fmtp';
      frtpmap: JLString; external name 'rtpmap';
      ftype: jint; external name 'type';
  public
    class function getCodecs(): Arr1ANRAudioCodec; static; overload;
    class function getCodec(para1: jint; para2: JLString; para3: JLString): ANRAudioCodec; static; overload;
  end;

  ANRAudioGroup = class external 'android.net.rtp' name 'AudioGroup' (JLObject)
  public
    const
      MODE_ECHO_SUPPRESSION = 3;
      MODE_MUTED = 1;
      MODE_NORMAL = 2;
      MODE_ON_HOLD = 0;
  public
    constructor create(); overload;
    function getStreams(): Arr1ANRAudioStream; overload; virtual;
    function getMode(): jint; overload; virtual;
    procedure setMode(para1: jint); overload; virtual;
    procedure sendDtmf(para1: jint); overload; virtual;
    procedure clear(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  ANRRtpStream = class external 'android.net.rtp' name 'RtpStream' (JLObject)
  public
    const
      MODE_NORMAL = 0;
      MODE_RECEIVE_ONLY = 2;
      MODE_SEND_ONLY = 1;
  public
    function getLocalAddress(): JNInetAddress; overload; virtual;
    function getLocalPort(): jint; overload; virtual;
    function getRemoteAddress(): JNInetAddress; overload; virtual;
    function getRemotePort(): jint; overload; virtual;
    function isBusy(): jboolean; overload; virtual;
    function getMode(): jint; overload; virtual;
    procedure setMode(para1: jint); overload; virtual;
    procedure associate(para1: JNInetAddress; para2: jint); overload; virtual;
    procedure release(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  ANSSipAudioCall = class external 'android.net.sip' name 'SipAudioCall' (JLObject)
  public
    type
      InnerListener = class;
      Arr1InnerListener = array of InnerListener;
      Arr2InnerListener = array of Arr1InnerListener;
      Arr3InnerListener = array of Arr2InnerListener;
      InnerListener = class external 'android.net.sip' name 'Listener' (JLObject)
      public
        constructor create(); overload;
        procedure onReadyToCall(para1: ANSSipAudioCall); overload; virtual;
        procedure onCalling(para1: ANSSipAudioCall); overload; virtual;
        procedure onRinging(para1: ANSSipAudioCall; para2: ANSSipProfile); overload; virtual;
        procedure onRingingBack(para1: ANSSipAudioCall); overload; virtual;
        procedure onCallEstablished(para1: ANSSipAudioCall); overload; virtual;
        procedure onCallEnded(para1: ANSSipAudioCall); overload; virtual;
        procedure onCallBusy(para1: ANSSipAudioCall); overload; virtual;
        procedure onCallHeld(para1: ANSSipAudioCall); overload; virtual;
        procedure onError(para1: ANSSipAudioCall; para2: jint; para3: JLString); overload; virtual;
        procedure onChanged(para1: ANSSipAudioCall); overload; virtual;
      end;

  public
    constructor create(para1: ACContext; para2: ANSSipProfile); overload;
    procedure setListener(para1: ANSSipAudioCall.InnerListener); overload; virtual;
    procedure setListener(para1: ANSSipAudioCall.InnerListener; para2: jboolean); overload; virtual;
    function isInCall(): jboolean; overload; virtual;
    function isOnHold(): jboolean; overload; virtual;
    procedure close(); overload; virtual;
    function getLocalProfile(): ANSSipProfile; overload; virtual;
    function getPeerProfile(): ANSSipProfile; overload; virtual;
    function getState(): jint; overload; virtual;
    procedure attachCall(para1: ANSSipSession; para2: JLString); overload; virtual;  // throws android.net.sip.SipException
    procedure makeCall(para1: ANSSipProfile; para2: ANSSipSession; para3: jint); overload; virtual;  // throws android.net.sip.SipException
    procedure endCall(); overload; virtual;  // throws android.net.sip.SipException
    procedure holdCall(para1: jint); overload; virtual;  // throws android.net.sip.SipException
    procedure answerCall(para1: jint); overload; virtual;  // throws android.net.sip.SipException
    procedure continueCall(para1: jint); overload; virtual;  // throws android.net.sip.SipException
    procedure toggleMute(); overload; virtual;
    function isMuted(): jboolean; overload; virtual;
    procedure setSpeakerMode(para1: jboolean); overload; virtual;
    procedure sendDtmf(para1: jint); overload; virtual;
    procedure sendDtmf(para1: jint; para2: AOMessage); overload; virtual;
    procedure startAudio(); overload; virtual;
  end;

  ANSSipErrorCode = class external 'android.net.sip' name 'SipErrorCode' (JLObject)
  public
    const
      CLIENT_ERROR = -4;
      CROSS_DOMAIN_AUTHENTICATION = -11;
      DATA_CONNECTION_LOST = -10;
      INVALID_CREDENTIALS = -8;
      INVALID_REMOTE_URI = -6;
      IN_PROGRESS = -9;
      NO_ERROR = 0;
      PEER_NOT_REACHABLE = -7;
      SERVER_ERROR = -2;
      SERVER_UNREACHABLE = -12;
      SOCKET_ERROR = -1;
      TIME_OUT = -5;
      TRANSACTION_TERMINTED = -3;
  public
    class function toString(para1: jint): JLString; static; overload;
  end;

  ANSSipRegistrationListener = interface external 'android.net.sip' name 'SipRegistrationListener' 
    procedure onRegistering(para1: JLString); overload;
    procedure onRegistrationDone(para1: JLString; para2: jlong); overload;
    procedure onRegistrationFailed(para1: JLString; para2: jint; para3: JLString); overload;
  end;

  ANSSipSession = class sealed external 'android.net.sip' name 'SipSession' (JLObject)
  public
    type
      InnerListener = class;
      Arr1InnerListener = array of InnerListener;
      Arr2InnerListener = array of Arr1InnerListener;
      Arr3InnerListener = array of Arr2InnerListener;
      InnerState = class;
      Arr1InnerState = array of InnerState;
      Arr2InnerState = array of Arr1InnerState;
      Arr3InnerState = array of Arr2InnerState;
      InnerListener = class external 'android.net.sip' name 'Listener' (JLObject)
      public
        constructor create(); overload;
        procedure onCalling(para1: ANSSipSession); overload; virtual;
        procedure onRinging(para1: ANSSipSession; para2: ANSSipProfile; para3: JLString); overload; virtual;
        procedure onRingingBack(para1: ANSSipSession); overload; virtual;
        procedure onCallEstablished(para1: ANSSipSession; para2: JLString); overload; virtual;
        procedure onCallEnded(para1: ANSSipSession); overload; virtual;
        procedure onCallBusy(para1: ANSSipSession); overload; virtual;
        procedure onError(para1: ANSSipSession; para2: jint; para3: JLString); overload; virtual;
        procedure onCallChangeFailed(para1: ANSSipSession; para2: jint; para3: JLString); overload; virtual;
        procedure onRegistering(para1: ANSSipSession); overload; virtual;
        procedure onRegistrationDone(para1: ANSSipSession; para2: jint); overload; virtual;
        procedure onRegistrationFailed(para1: ANSSipSession; para2: jint; para3: JLString); overload; virtual;
        procedure onRegistrationTimeout(para1: ANSSipSession); overload; virtual;
      end;

      InnerState = class external 'android.net.sip' name 'State' (JLObject)
      public
        const
          DEREGISTERING = 2;
          INCOMING_CALL = 3;
          INCOMING_CALL_ANSWERING = 4;
          IN_CALL = 8;
          NOT_DEFINED = 101;
          OUTGOING_CALL = 5;
          OUTGOING_CALL_CANCELING = 7;
          OUTGOING_CALL_RING_BACK = 6;
          PINGING = 9;
          READY_TO_CALL = 0;
          REGISTERING = 1;
      public
        class function toString(para1: jint): JLString; static; overload;
      end;

  public
    function getLocalIp(): JLString; overload; virtual;
    function getLocalProfile(): ANSSipProfile; overload; virtual;
    function getPeerProfile(): ANSSipProfile; overload; virtual;
    function getState(): jint; overload; virtual;
    function isInCall(): jboolean; overload; virtual;
    function getCallId(): JLString; overload; virtual;
    procedure setListener(para1: ANSSipSession.InnerListener); overload; virtual;
    procedure register(para1: jint); overload; virtual;
    procedure unregister(); overload; virtual;
    procedure makeCall(para1: ANSSipProfile; para2: JLString; para3: jint); overload; virtual;
    procedure answerCall(para1: JLString; para2: jint); overload; virtual;
    procedure endCall(); overload; virtual;
    procedure changeCall(para1: JLString; para2: jint); overload; virtual;
  end;

  ANWWifiManager = class external 'android.net.wifi' name 'WifiManager' (JLObject)
  public
    type
      InnerMulticastLock = class;
      Arr1InnerMulticastLock = array of InnerMulticastLock;
      Arr2InnerMulticastLock = array of Arr1InnerMulticastLock;
      Arr3InnerMulticastLock = array of Arr2InnerMulticastLock;
      InnerWifiLock = class;
      Arr1InnerWifiLock = array of InnerWifiLock;
      Arr2InnerWifiLock = array of Arr1InnerWifiLock;
      Arr3InnerWifiLock = array of Arr2InnerWifiLock;
      InnerWpsCallback = class;
      Arr1InnerWpsCallback = array of InnerWpsCallback;
      Arr2InnerWpsCallback = array of Arr1InnerWpsCallback;
      Arr3InnerWpsCallback = array of Arr2InnerWpsCallback;
      InnerMulticastLock = class external 'android.net.wifi' name 'MulticastLock' 
      end;

      InnerWifiLock = class external 'android.net.wifi' name 'WifiLock' 
      end;

      InnerWpsCallback = class abstract external 'android.net.wifi' name 'WpsCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onStarted(para1: JLString); overload; virtual; abstract;
        procedure onSucceeded(); overload; virtual; abstract;
        procedure onFailed(para1: jint); overload; virtual; abstract;
      end;

  public
    const
      ACTION_PICK_WIFI_NETWORK = 'android.net.wifi.PICK_WIFI_NETWORK';
      ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE = 'android.net.wifi.action.REQUEST_SCAN_ALWAYS_AVAILABLE';
      ERROR_AUTHENTICATING = 1;
      EXTRA_BSSID = 'bssid';
      EXTRA_NETWORK_INFO = 'networkInfo';
      EXTRA_NEW_RSSI = 'newRssi';
      EXTRA_NEW_STATE = 'newState';
      EXTRA_PREVIOUS_WIFI_STATE = 'previous_wifi_state';
      EXTRA_SUPPLICANT_CONNECTED = 'connected';
      EXTRA_SUPPLICANT_ERROR = 'supplicantError';
      EXTRA_WIFI_INFO = 'wifiInfo';
      EXTRA_WIFI_STATE = 'wifi_state';
      NETWORK_IDS_CHANGED_ACTION = 'android.net.wifi.NETWORK_IDS_CHANGED';
      NETWORK_STATE_CHANGED_ACTION = 'android.net.wifi.STATE_CHANGE';
      RSSI_CHANGED_ACTION = 'android.net.wifi.RSSI_CHANGED';
      SCAN_RESULTS_AVAILABLE_ACTION = 'android.net.wifi.SCAN_RESULTS';
      SUPPLICANT_CONNECTION_CHANGE_ACTION = 'android.net.wifi.supplicant.CONNECTION_CHANGE';
      SUPPLICANT_STATE_CHANGED_ACTION = 'android.net.wifi.supplicant.STATE_CHANGE';
      WIFI_MODE_FULL = 1;
      WIFI_MODE_FULL_HIGH_PERF = 3;
      WIFI_MODE_SCAN_ONLY = 2;
      WIFI_STATE_CHANGED_ACTION = 'android.net.wifi.WIFI_STATE_CHANGED';
      WIFI_STATE_DISABLED = 1;
      WIFI_STATE_DISABLING = 0;
      WIFI_STATE_ENABLED = 3;
      WIFI_STATE_ENABLING = 2;
      WIFI_STATE_UNKNOWN = 4;
      WPS_AUTH_FAILURE = 6;
      WPS_OVERLAP_ERROR = 3;
      WPS_TIMED_OUT = 7;
      WPS_TKIP_ONLY_PROHIBITED = 5;
      WPS_WEP_PROHIBITED = 4;
  public
    function getConfiguredNetworks(): JUList; overload; virtual;
    function addNetwork(para1: ANWWifiConfiguration): jint; overload; virtual;
    function updateNetwork(para1: ANWWifiConfiguration): jint; overload; virtual;
    function removeNetwork(para1: jint): jboolean; overload; virtual;
    function enableNetwork(para1: jint; para2: jboolean): jboolean; overload; virtual;
    function disableNetwork(para1: jint): jboolean; overload; virtual;
    function disconnect(): jboolean; overload; virtual;
    function reconnect(): jboolean; overload; virtual;
    function reassociate(): jboolean; overload; virtual;
    function pingSupplicant(): jboolean; overload; virtual;
    function is5GHzBandSupported(): jboolean; overload; virtual;
    function isP2pSupported(): jboolean; overload; virtual;
    function isDeviceToApRttSupported(): jboolean; overload; virtual;
    function isPreferredNetworkOffloadSupported(): jboolean; overload; virtual;
    function isTdlsSupported(): jboolean; overload; virtual;
    function isEnhancedPowerReportingSupported(): jboolean; overload; virtual;
    function startScan(): jboolean; overload; virtual;
    function getConnectionInfo(): ANWWifiInfo; overload; virtual;
    function getScanResults(): JUList; overload; virtual;
    function isScanAlwaysAvailable(): jboolean; overload; virtual;
    function saveConfiguration(): jboolean; overload; virtual;
    function getDhcpInfo(): ANDhcpInfo; overload; virtual;
    function setWifiEnabled(para1: jboolean): jboolean; overload; virtual;
    function getWifiState(): jint; overload; virtual;
    function isWifiEnabled(): jboolean; overload; virtual;
    class function calculateSignalLevel(para1: jint; para2: jint): jint; static; overload;
    class function compareSignalLevel(para1: jint; para2: jint): jint; static; overload;
    procedure setTdlsEnabled(para1: JNInetAddress; para2: jboolean); overload; virtual;
    procedure setTdlsEnabledWithMacAddress(para1: JLString; para2: jboolean); overload; virtual;
    procedure startWps(para1: ANWWpsInfo; para2: ANWWifiManager.InnerWpsCallback); overload; virtual;
    procedure cancelWps(para1: ANWWifiManager.InnerWpsCallback); overload; virtual;
    function createWifiLock(para1: jint; para2: JLString): ANWWifiManager.InnerWifiLock; overload; virtual;
    function createWifiLock(para1: JLString): ANWWifiManager.InnerWifiLock; overload; virtual;
    function createMulticastLock(para1: JLString): ANWWifiManager.InnerMulticastLock; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  ANWPWifiP2pManager = class external 'android.net.wifi.p2p' name 'WifiP2pManager' (JLObject)
  public
    type
      InnerChannel = class;
      Arr1InnerChannel = array of InnerChannel;
      Arr2InnerChannel = array of Arr1InnerChannel;
      Arr3InnerChannel = array of Arr2InnerChannel;
      InnerUpnpServiceResponseListener = interface;
      Arr1InnerUpnpServiceResponseListener = array of InnerUpnpServiceResponseListener;
      Arr2InnerUpnpServiceResponseListener = array of Arr1InnerUpnpServiceResponseListener;
      Arr3InnerUpnpServiceResponseListener = array of Arr2InnerUpnpServiceResponseListener;
      InnerDnsSdTxtRecordListener = interface;
      Arr1InnerDnsSdTxtRecordListener = array of InnerDnsSdTxtRecordListener;
      Arr2InnerDnsSdTxtRecordListener = array of Arr1InnerDnsSdTxtRecordListener;
      Arr3InnerDnsSdTxtRecordListener = array of Arr2InnerDnsSdTxtRecordListener;
      InnerDnsSdServiceResponseListener = interface;
      Arr1InnerDnsSdServiceResponseListener = array of InnerDnsSdServiceResponseListener;
      Arr2InnerDnsSdServiceResponseListener = array of Arr1InnerDnsSdServiceResponseListener;
      Arr3InnerDnsSdServiceResponseListener = array of Arr2InnerDnsSdServiceResponseListener;
      InnerServiceResponseListener = interface;
      Arr1InnerServiceResponseListener = array of InnerServiceResponseListener;
      Arr2InnerServiceResponseListener = array of Arr1InnerServiceResponseListener;
      Arr3InnerServiceResponseListener = array of Arr2InnerServiceResponseListener;
      InnerGroupInfoListener = interface;
      Arr1InnerGroupInfoListener = array of InnerGroupInfoListener;
      Arr2InnerGroupInfoListener = array of Arr1InnerGroupInfoListener;
      Arr3InnerGroupInfoListener = array of Arr2InnerGroupInfoListener;
      InnerConnectionInfoListener = interface;
      Arr1InnerConnectionInfoListener = array of InnerConnectionInfoListener;
      Arr2InnerConnectionInfoListener = array of Arr1InnerConnectionInfoListener;
      Arr3InnerConnectionInfoListener = array of Arr2InnerConnectionInfoListener;
      InnerPeerListListener = interface;
      Arr1InnerPeerListListener = array of InnerPeerListListener;
      Arr2InnerPeerListListener = array of Arr1InnerPeerListListener;
      Arr3InnerPeerListListener = array of Arr2InnerPeerListListener;
      InnerActionListener = interface;
      Arr1InnerActionListener = array of InnerActionListener;
      Arr2InnerActionListener = array of Arr1InnerActionListener;
      Arr3InnerActionListener = array of Arr2InnerActionListener;
      InnerChannelListener = interface;
      Arr1InnerChannelListener = array of InnerChannelListener;
      Arr2InnerChannelListener = array of Arr1InnerChannelListener;
      Arr3InnerChannelListener = array of Arr2InnerChannelListener;
      InnerChannel = class external 'android.net.wifi.p2p' name 'Channel' (JLObject)
      end;

      InnerUpnpServiceResponseListener = interface external 'android.net.wifi.p2p' name 'UpnpServiceResponseListener' 
        procedure onUpnpServiceAvailable(para1: JUList; para2: ANWPWifiP2pDevice); overload;
      end;

      InnerDnsSdTxtRecordListener = interface external 'android.net.wifi.p2p' name 'DnsSdTxtRecordListener' 
        procedure onDnsSdTxtRecordAvailable(para1: JLString; para2: JUMap; para3: ANWPWifiP2pDevice); overload;
      end;

      InnerDnsSdServiceResponseListener = interface external 'android.net.wifi.p2p' name 'DnsSdServiceResponseListener' 
        procedure onDnsSdServiceAvailable(para1: JLString; para2: JLString; para3: ANWPWifiP2pDevice); overload;
      end;

      InnerServiceResponseListener = interface external 'android.net.wifi.p2p' name 'ServiceResponseListener' 
        procedure onServiceAvailable(para1: jint; para2: Arr1jbyte; para3: ANWPWifiP2pDevice); overload;
        procedure onServiceAvailable(para1: jint; var para2: array of jbyte; para3: ANWPWifiP2pDevice); overload;
      end;

      InnerGroupInfoListener = interface external 'android.net.wifi.p2p' name 'GroupInfoListener' 
        procedure onGroupInfoAvailable(para1: ANWPWifiP2pGroup); overload;
      end;

      InnerConnectionInfoListener = interface external 'android.net.wifi.p2p' name 'ConnectionInfoListener' 
        procedure onConnectionInfoAvailable(para1: ANWPWifiP2pInfo); overload;
      end;

      InnerPeerListListener = interface external 'android.net.wifi.p2p' name 'PeerListListener' 
        procedure onPeersAvailable(para1: ANWPWifiP2pDeviceList); overload;
      end;

      InnerActionListener = interface external 'android.net.wifi.p2p' name 'ActionListener' 
        procedure onSuccess(); overload;
        procedure onFailure(para1: jint); overload;
      end;

      InnerChannelListener = interface external 'android.net.wifi.p2p' name 'ChannelListener' 
        procedure onChannelDisconnected(); overload;
      end;

  public
    const
      BUSY = 2;
      ERROR = 0;
      EXTRA_DISCOVERY_STATE = 'discoveryState';
      EXTRA_NETWORK_INFO = 'networkInfo';
      EXTRA_P2P_DEVICE_LIST = 'wifiP2pDeviceList';
      EXTRA_WIFI_P2P_DEVICE = 'wifiP2pDevice';
      EXTRA_WIFI_P2P_GROUP = 'p2pGroupInfo';
      EXTRA_WIFI_P2P_INFO = 'wifiP2pInfo';
      EXTRA_WIFI_STATE = 'wifi_p2p_state';
      NO_SERVICE_REQUESTS = 3;
      P2P_UNSUPPORTED = 1;
      WIFI_P2P_CONNECTION_CHANGED_ACTION = 'android.net.wifi.p2p.CONNECTION_STATE_CHANGE';
      WIFI_P2P_DISCOVERY_CHANGED_ACTION = 'android.net.wifi.p2p.DISCOVERY_STATE_CHANGE';
      WIFI_P2P_DISCOVERY_STARTED = 2;
      WIFI_P2P_DISCOVERY_STOPPED = 1;
      WIFI_P2P_PEERS_CHANGED_ACTION = 'android.net.wifi.p2p.PEERS_CHANGED';
      WIFI_P2P_STATE_CHANGED_ACTION = 'android.net.wifi.p2p.STATE_CHANGED';
      WIFI_P2P_STATE_DISABLED = 1;
      WIFI_P2P_STATE_ENABLED = 2;
      WIFI_P2P_THIS_DEVICE_CHANGED_ACTION = 'android.net.wifi.p2p.THIS_DEVICE_CHANGED';
  public
    function initialize(para1: ACContext; para2: AOLooper; para3: ANWPWifiP2pManager.InnerChannelListener): ANWPWifiP2pManager.InnerChannel; overload; virtual;
    procedure discoverPeers(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure stopPeerDiscovery(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure connect(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pConfig; para3: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure cancelConnect(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure createGroup(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure removeGroup(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure addLocalService(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPNWifiP2pServiceInfo; para3: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure removeLocalService(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPNWifiP2pServiceInfo; para3: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure clearLocalServices(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure setServiceResponseListener(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerServiceResponseListener); overload; virtual;
    procedure setDnsSdResponseListeners(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerDnsSdServiceResponseListener; para3: ANWPWifiP2pManager.InnerDnsSdTxtRecordListener); overload; virtual;
    procedure setUpnpServiceResponseListener(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerUpnpServiceResponseListener); overload; virtual;
    procedure discoverServices(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure addServiceRequest(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPNWifiP2pServiceRequest; para3: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure removeServiceRequest(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPNWifiP2pServiceRequest; para3: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure clearServiceRequests(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerActionListener); overload; virtual;
    procedure requestPeers(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerPeerListListener); overload; virtual;
    procedure requestConnectionInfo(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerConnectionInfoListener); overload; virtual;
    procedure requestGroupInfo(para1: ANWPWifiP2pManager.InnerChannel; para2: ANWPWifiP2pManager.InnerGroupInfoListener); overload; virtual;
  end;

  ANNfcAdapter = class sealed external 'android.nfc' name 'NfcAdapter' (JLObject)
  public
    type
      InnerCreateBeamUrisCallback = interface;
      Arr1InnerCreateBeamUrisCallback = array of InnerCreateBeamUrisCallback;
      Arr2InnerCreateBeamUrisCallback = array of Arr1InnerCreateBeamUrisCallback;
      Arr3InnerCreateBeamUrisCallback = array of Arr2InnerCreateBeamUrisCallback;
      InnerCreateNdefMessageCallback = interface;
      Arr1InnerCreateNdefMessageCallback = array of InnerCreateNdefMessageCallback;
      Arr2InnerCreateNdefMessageCallback = array of Arr1InnerCreateNdefMessageCallback;
      Arr3InnerCreateNdefMessageCallback = array of Arr2InnerCreateNdefMessageCallback;
      InnerOnNdefPushCompleteCallback = interface;
      Arr1InnerOnNdefPushCompleteCallback = array of InnerOnNdefPushCompleteCallback;
      Arr2InnerOnNdefPushCompleteCallback = array of Arr1InnerOnNdefPushCompleteCallback;
      Arr3InnerOnNdefPushCompleteCallback = array of Arr2InnerOnNdefPushCompleteCallback;
      InnerReaderCallback = interface;
      Arr1InnerReaderCallback = array of InnerReaderCallback;
      Arr2InnerReaderCallback = array of Arr1InnerReaderCallback;
      Arr3InnerReaderCallback = array of Arr2InnerReaderCallback;
      InnerCreateBeamUrisCallback = interface external 'android.nfc' name 'CreateBeamUrisCallback' 
        function createBeamUris(para1: ANNfcEvent): Arr1ANUri; overload;
      end;

      InnerCreateNdefMessageCallback = interface external 'android.nfc' name 'CreateNdefMessageCallback' 
        function createNdefMessage(para1: ANNfcEvent): ANNdefMessage; overload;
      end;

      InnerOnNdefPushCompleteCallback = interface external 'android.nfc' name 'OnNdefPushCompleteCallback' 
        procedure onNdefPushComplete(para1: ANNfcEvent); overload;
      end;

      InnerReaderCallback = interface external 'android.nfc' name 'ReaderCallback' 
        procedure onTagDiscovered(para1: ANTag); overload;
      end;

  public
    const
      ACTION_ADAPTER_STATE_CHANGED = 'android.nfc.action.ADAPTER_STATE_CHANGED';
      ACTION_NDEF_DISCOVERED = 'android.nfc.action.NDEF_DISCOVERED';
      ACTION_TAG_DISCOVERED = 'android.nfc.action.TAG_DISCOVERED';
      ACTION_TECH_DISCOVERED = 'android.nfc.action.TECH_DISCOVERED';
      EXTRA_ADAPTER_STATE = 'android.nfc.extra.ADAPTER_STATE';
      EXTRA_ID = 'android.nfc.extra.ID';
      EXTRA_NDEF_MESSAGES = 'android.nfc.extra.NDEF_MESSAGES';
      EXTRA_READER_PRESENCE_CHECK_DELAY = 'presence';
      EXTRA_TAG = 'android.nfc.extra.TAG';
      FLAG_READER_NFC_A = 1;
      FLAG_READER_NFC_B = 2;
      FLAG_READER_NFC_BARCODE = 16;
      FLAG_READER_NFC_F = 4;
      FLAG_READER_NFC_V = 8;
      FLAG_READER_NO_PLATFORM_SOUNDS = 256;
      FLAG_READER_SKIP_NDEF_CHECK = 128;
      STATE_OFF = 1;
      STATE_ON = 3;
      STATE_TURNING_OFF = 4;
      STATE_TURNING_ON = 2;
  public
    class function getDefaultAdapter(para1: ACContext): ANNfcAdapter; static; overload;
    function isEnabled(): jboolean; overload; virtual;
    procedure setBeamPushUris(para1: Arr1ANUri; para2: AAActivity); overload; virtual;
    procedure setBeamPushUris(var para1: array of ANUri; para2: AAActivity); overload; virtual;
    procedure setBeamPushUrisCallback(para1: ANNfcAdapter.InnerCreateBeamUrisCallback; para2: AAActivity); overload; virtual;
    procedure setNdefPushMessage(para1: ANNdefMessage; para2: AAActivity; para3: Arr1AAActivity); overload; virtual;
    procedure setNdefPushMessage(para1: ANNdefMessage; para2: AAActivity; const para3: array of AAActivity); overload; virtual;
    procedure setNdefPushMessageCallback(para1: ANNfcAdapter.InnerCreateNdefMessageCallback; para2: AAActivity; para3: Arr1AAActivity); overload; virtual;
    procedure setNdefPushMessageCallback(para1: ANNfcAdapter.InnerCreateNdefMessageCallback; para2: AAActivity; const para3: array of AAActivity); overload; virtual;
    procedure setOnNdefPushCompleteCallback(para1: ANNfcAdapter.InnerOnNdefPushCompleteCallback; para2: AAActivity; para3: Arr1AAActivity); overload; virtual;
    procedure setOnNdefPushCompleteCallback(para1: ANNfcAdapter.InnerOnNdefPushCompleteCallback; para2: AAActivity; const para3: array of AAActivity); overload; virtual;
    procedure enableForegroundDispatch(para1: AAActivity; para2: AAPendingIntent; para3: Arr1ACIntentFilter; para4: Arr2JLString); overload; virtual;
    procedure enableForegroundDispatch(para1: AAActivity; para2: AAPendingIntent; var para3: array of ACIntentFilter; para4: Arr2JLString); overload; virtual;
    procedure disableForegroundDispatch(para1: AAActivity); overload; virtual;
    procedure enableReaderMode(para1: AAActivity; para2: ANNfcAdapter.InnerReaderCallback; para3: jint; para4: AOBundle); overload; virtual;
    procedure disableReaderMode(para1: AAActivity); overload; virtual;
    function invokeBeam(para1: AAActivity): jboolean; overload; virtual;
    procedure enableForegroundNdefPush(para1: AAActivity; para2: ANNdefMessage); overload; virtual;
    procedure disableForegroundNdefPush(para1: AAActivity); overload; virtual;
    function isNdefPushEnabled(): jboolean; overload; virtual;
  end;

  ANNfcEvent = class sealed external 'android.nfc' name 'NfcEvent' (JLObject)
  public
    final var
      fnfcAdapter: ANNfcAdapter; external name 'nfcAdapter';
  end;

  ANNfcManager = class sealed external 'android.nfc' name 'NfcManager' (JLObject)
  public
    function getDefaultAdapter(): ANNfcAdapter; overload; virtual;
  end;

  AOETC1 = class external 'android.opengl' name 'ETC1' (JLObject)
  public
    const
      DECODED_BLOCK_SIZE = 48;
      ENCODED_BLOCK_SIZE = 8;
      ETC1_RGB8_OES = 36196;
      ETC_PKM_HEADER_SIZE = 16;
  public
    constructor create(); overload;
    class procedure encodeBlock(para1: JNBuffer; para2: jint; para3: JNBuffer); static; overload;
    class procedure decodeBlock(para1: JNBuffer; para2: JNBuffer); static; overload;
    class function getEncodedDataSize(para1: jint; para2: jint): jint; static; overload;
    class procedure encodeImage(para1: JNBuffer; para2: jint; para3: jint; para4: jint; para5: jint; para6: JNBuffer); static; overload;
    class procedure decodeImage(para1: JNBuffer; para2: JNBuffer; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure formatHeader(para1: JNBuffer; para2: jint; para3: jint); static; overload;
    class function isValid(para1: JNBuffer): jboolean; static; overload;
    class function getWidth(para1: JNBuffer): jint; static; overload;
    class function getHeight(para1: JNBuffer): jint; static; overload;
  end;

  AOETC1Util = class external 'android.opengl' name 'ETC1Util' (JLObject)
  public
    type
      InnerETC1Texture = class;
      Arr1InnerETC1Texture = array of InnerETC1Texture;
      Arr2InnerETC1Texture = array of Arr1InnerETC1Texture;
      Arr3InnerETC1Texture = array of Arr2InnerETC1Texture;
      InnerETC1Texture = class external 'android.opengl' name 'ETC1Texture' (JLObject)
      public
        constructor create(para1: jint; para2: jint; para3: JNByteBuffer); overload;
        function getWidth(): jint; overload; virtual;
        function getHeight(): jint; overload; virtual;
        function getData(): JNByteBuffer; overload; virtual;
      end;

  public
    constructor create(); overload;
    class procedure loadTexture(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: JIInputStream); static; overload;  // throws java.io.IOException
    class procedure loadTexture(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: AOETC1Util.InnerETC1Texture); static; overload;
    class function isETC1Supported(): jboolean; static; overload;
    class function createTexture(para1: JIInputStream): AOETC1Util.InnerETC1Texture; static; overload;  // throws java.io.IOException
    class function compressTexture(para1: JNBuffer; para2: jint; para3: jint; para4: jint; para5: jint): AOETC1Util.InnerETC1Texture; static; overload;
    class procedure writeTexture(para1: AOETC1Util.InnerETC1Texture; para2: JIOutputStream); static; overload;  // throws java.io.IOException
  end;

  AOGLDebugHelper = class external 'android.opengl' name 'GLDebugHelper' (JLObject)
  public
    const
      CONFIG_CHECK_GL_ERROR = 1;
      CONFIG_CHECK_THREAD = 2;
      CONFIG_LOG_ARGUMENT_NAMES = 4;
      ERROR_WRONG_THREAD = 28672;
  public
    constructor create(); overload;
    class function wrap(para1: JMKOGL; para2: jint; para3: JIWriter): JMKOGL; static; overload;
    class function wrap(para1: JMKEEGL; para2: jint; para3: JIWriter): JMKEEGL; static; overload;
  end;

  AOGLES10 = class external 'android.opengl' name 'GLES10' (JLObject)
  public
    const
      GL_ADD = 260;
      GL_ALIASED_LINE_WIDTH_RANGE = 33902;
      GL_ALIASED_POINT_SIZE_RANGE = 33901;
      GL_ALPHA = 6406;
      GL_ALPHA_BITS = 3413;
      GL_ALPHA_TEST = 3008;
      GL_ALWAYS = 519;
      GL_AMBIENT = 4608;
      GL_AMBIENT_AND_DIFFUSE = 5634;
      GL_AND = 5377;
      GL_AND_INVERTED = 5380;
      GL_AND_REVERSE = 5378;
      GL_BACK = 1029;
      GL_BLEND = 3042;
      GL_BLUE_BITS = 3412;
      GL_BYTE = 5120;
      GL_CCW = 2305;
      GL_CLAMP_TO_EDGE = 33071;
      GL_CLEAR = 5376;
      GL_COLOR_ARRAY = 32886;
      GL_COLOR_BUFFER_BIT = 16384;
      GL_COLOR_LOGIC_OP = 3058;
      GL_COLOR_MATERIAL = 2903;
      GL_COMPRESSED_TEXTURE_FORMATS = 34467;
      GL_CONSTANT_ATTENUATION = 4615;
      GL_COPY = 5379;
      GL_COPY_INVERTED = 5388;
      GL_CULL_FACE = 2884;
      GL_CW = 2304;
      GL_DECAL = 8449;
      GL_DECR = 7683;
      GL_DEPTH_BITS = 3414;
      GL_DEPTH_BUFFER_BIT = 256;
      GL_DEPTH_TEST = 2929;
      GL_DIFFUSE = 4609;
      GL_DITHER = 3024;
      GL_DONT_CARE = 4352;
      GL_DST_ALPHA = 772;
      GL_DST_COLOR = 774;
      GL_EMISSION = 5632;
      GL_EQUAL = 514;
      GL_EQUIV = 5385;
      GL_EXP = 2048;
      GL_EXP2 = 2049;
      GL_EXTENSIONS = 7939;
      GL_FALSE = 0;
      GL_FASTEST = 4353;
      GL_FIXED = 5132;
      GL_FLAT = 7424;
      GL_FLOAT = 5126;
      GL_FOG = 2912;
      GL_FOG_COLOR = 2918;
      GL_FOG_DENSITY = 2914;
      GL_FOG_END = 2916;
      GL_FOG_HINT = 3156;
      GL_FOG_MODE = 2917;
      GL_FOG_START = 2915;
      GL_FRONT = 1028;
      GL_FRONT_AND_BACK = 1032;
      GL_GEQUAL = 518;
      GL_GREATER = 516;
      GL_GREEN_BITS = 3411;
      GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739;
      GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738;
      GL_INCR = 7682;
      GL_INVALID_ENUM = 1280;
      GL_INVALID_OPERATION = 1282;
      GL_INVALID_VALUE = 1281;
      GL_INVERT = 5386;
      GL_KEEP = 7680;
      GL_LEQUAL = 515;
      GL_LESS = 513;
      GL_LIGHT0 = 16384;
      GL_LIGHT1 = 16385;
      GL_LIGHT2 = 16386;
      GL_LIGHT3 = 16387;
      GL_LIGHT4 = 16388;
      GL_LIGHT5 = 16389;
      GL_LIGHT6 = 16390;
      GL_LIGHT7 = 16391;
      GL_LIGHTING = 2896;
      GL_LIGHT_MODEL_AMBIENT = 2899;
      GL_LIGHT_MODEL_TWO_SIDE = 2898;
      GL_LINEAR = 9729;
      GL_LINEAR_ATTENUATION = 4616;
      GL_LINEAR_MIPMAP_LINEAR = 9987;
      GL_LINEAR_MIPMAP_NEAREST = 9985;
      GL_LINES = 1;
      GL_LINE_LOOP = 2;
      GL_LINE_SMOOTH = 2848;
      GL_LINE_SMOOTH_HINT = 3154;
      GL_LINE_STRIP = 3;
      GL_LUMINANCE = 6409;
      GL_LUMINANCE_ALPHA = 6410;
      GL_MAX_ELEMENTS_INDICES = 33001;
      GL_MAX_ELEMENTS_VERTICES = 33000;
      GL_MAX_LIGHTS = 3377;
      GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
      GL_MAX_PROJECTION_STACK_DEPTH = 3384;
      GL_MAX_TEXTURE_SIZE = 3379;
      GL_MAX_TEXTURE_STACK_DEPTH = 3385;
      GL_MAX_TEXTURE_UNITS = 34018;
      GL_MAX_VIEWPORT_DIMS = 3386;
      GL_MODELVIEW = 5888;
      GL_MODULATE = 8448;
      GL_MULTISAMPLE = 32925;
      GL_NAND = 5390;
      GL_NEAREST = 9728;
      GL_NEAREST_MIPMAP_LINEAR = 9986;
      GL_NEAREST_MIPMAP_NEAREST = 9984;
      GL_NEVER = 512;
      GL_NICEST = 4354;
      GL_NOOP = 5381;
      GL_NOR = 5384;
      GL_NORMALIZE = 2977;
      GL_NORMAL_ARRAY = 32885;
      GL_NOTEQUAL = 517;
      GL_NO_ERROR = 0;
      GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
      GL_ONE = 1;
      GL_ONE_MINUS_DST_ALPHA = 773;
      GL_ONE_MINUS_DST_COLOR = 775;
      GL_ONE_MINUS_SRC_ALPHA = 771;
      GL_ONE_MINUS_SRC_COLOR = 769;
      GL_OR = 5383;
      GL_OR_INVERTED = 5389;
      GL_OR_REVERSE = 5387;
      GL_OUT_OF_MEMORY = 1285;
      GL_PACK_ALIGNMENT = 3333;
      GL_PALETTE4_R5_G6_B5_OES = 35730;
      GL_PALETTE4_RGB5_A1_OES = 35732;
      GL_PALETTE4_RGB8_OES = 35728;
      GL_PALETTE4_RGBA4_OES = 35731;
      GL_PALETTE4_RGBA8_OES = 35729;
      GL_PALETTE8_R5_G6_B5_OES = 35735;
      GL_PALETTE8_RGB5_A1_OES = 35737;
      GL_PALETTE8_RGB8_OES = 35733;
      GL_PALETTE8_RGBA4_OES = 35736;
      GL_PALETTE8_RGBA8_OES = 35734;
      GL_PERSPECTIVE_CORRECTION_HINT = 3152;
      GL_POINTS = 0;
      GL_POINT_FADE_THRESHOLD_SIZE = 33064;
      GL_POINT_SIZE = 2833;
      GL_POINT_SMOOTH = 2832;
      GL_POINT_SMOOTH_HINT = 3153;
      GL_POLYGON_OFFSET_FILL = 32823;
      GL_POLYGON_SMOOTH_HINT = 3155;
      GL_POSITION = 4611;
      GL_PROJECTION = 5889;
      GL_QUADRATIC_ATTENUATION = 4617;
      GL_RED_BITS = 3410;
      GL_RENDERER = 7937;
      GL_REPEAT = 10497;
      GL_REPLACE = 7681;
      GL_RESCALE_NORMAL = 32826;
      GL_RGB = 6407;
      GL_RGBA = 6408;
      GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
      GL_SAMPLE_ALPHA_TO_ONE = 32927;
      GL_SAMPLE_COVERAGE = 32928;
      GL_SCISSOR_TEST = 3089;
      GL_SET = 5391;
      GL_SHININESS = 5633;
      GL_SHORT = 5122;
      GL_SMOOTH = 7425;
      GL_SMOOTH_LINE_WIDTH_RANGE = 2850;
      GL_SMOOTH_POINT_SIZE_RANGE = 2834;
      GL_SPECULAR = 4610;
      GL_SPOT_CUTOFF = 4614;
      GL_SPOT_DIRECTION = 4612;
      GL_SPOT_EXPONENT = 4613;
      GL_SRC_ALPHA = 770;
      GL_SRC_ALPHA_SATURATE = 776;
      GL_SRC_COLOR = 768;
      GL_STACK_OVERFLOW = 1283;
      GL_STACK_UNDERFLOW = 1284;
      GL_STENCIL_BITS = 3415;
      GL_STENCIL_BUFFER_BIT = 1024;
      GL_STENCIL_TEST = 2960;
      GL_SUBPIXEL_BITS = 3408;
      GL_TEXTURE = 5890;
      GL_TEXTURE0 = 33984;
      GL_TEXTURE1 = 33985;
      GL_TEXTURE10 = 33994;
      GL_TEXTURE11 = 33995;
      GL_TEXTURE12 = 33996;
      GL_TEXTURE13 = 33997;
      GL_TEXTURE14 = 33998;
      GL_TEXTURE15 = 33999;
      GL_TEXTURE16 = 34000;
      GL_TEXTURE17 = 34001;
      GL_TEXTURE18 = 34002;
      GL_TEXTURE19 = 34003;
      GL_TEXTURE2 = 33986;
      GL_TEXTURE20 = 34004;
      GL_TEXTURE21 = 34005;
      GL_TEXTURE22 = 34006;
      GL_TEXTURE23 = 34007;
      GL_TEXTURE24 = 34008;
      GL_TEXTURE25 = 34009;
      GL_TEXTURE26 = 34010;
      GL_TEXTURE27 = 34011;
      GL_TEXTURE28 = 34012;
      GL_TEXTURE29 = 34013;
      GL_TEXTURE3 = 33987;
      GL_TEXTURE30 = 34014;
      GL_TEXTURE31 = 34015;
      GL_TEXTURE4 = 33988;
      GL_TEXTURE5 = 33989;
      GL_TEXTURE6 = 33990;
      GL_TEXTURE7 = 33991;
      GL_TEXTURE8 = 33992;
      GL_TEXTURE9 = 33993;
      GL_TEXTURE_2D = 3553;
      GL_TEXTURE_COORD_ARRAY = 32888;
      GL_TEXTURE_ENV = 8960;
      GL_TEXTURE_ENV_COLOR = 8705;
      GL_TEXTURE_ENV_MODE = 8704;
      GL_TEXTURE_MAG_FILTER = 10240;
      GL_TEXTURE_MIN_FILTER = 10241;
      GL_TEXTURE_WRAP_S = 10242;
      GL_TEXTURE_WRAP_T = 10243;
      GL_TRIANGLES = 4;
      GL_TRIANGLE_FAN = 6;
      GL_TRIANGLE_STRIP = 5;
      GL_TRUE = 1;
      GL_UNPACK_ALIGNMENT = 3317;
      GL_UNSIGNED_BYTE = 5121;
      GL_UNSIGNED_SHORT = 5123;
      GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
      GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
      GL_UNSIGNED_SHORT_5_6_5 = 33635;
      GL_VENDOR = 7936;
      GL_VERSION = 7938;
      GL_VERTEX_ARRAY = 32884;
      GL_XOR = 5382;
      GL_ZERO = 0;
  public
    constructor create(); overload;
    class procedure glActiveTexture(para1: jint); static; overload;
    class procedure glAlphaFunc(para1: jint; para2: jfloat); static; overload;
    class procedure glAlphaFuncx(para1: jint; para2: jint); static; overload;
    class procedure glBindTexture(para1: jint; para2: jint); static; overload;
    class procedure glBlendFunc(para1: jint; para2: jint); static; overload;
    class procedure glClear(para1: jint); static; overload;
    class procedure glClearColor(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); static; overload;
    class procedure glClearColorx(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glClearDepthf(para1: jfloat); static; overload;
    class procedure glClearDepthx(para1: jint); static; overload;
    class procedure glClearStencil(para1: jint); static; overload;
    class procedure glClientActiveTexture(para1: jint); static; overload;
    class procedure glColor4f(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); static; overload;
    class procedure glColor4x(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glColorMask(para1: jboolean; para2: jboolean; para3: jboolean; para4: jboolean); static; overload;
    class procedure glColorPointer(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class procedure glCompressedTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JNBuffer); static; overload;
    class procedure glCompressedTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); static; overload;
    class procedure glCopyTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); static; overload;
    class procedure glCopyTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); static; overload;
    class procedure glCullFace(para1: jint); static; overload;
    class procedure glDeleteTextures(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteTextures(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteTextures(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glDepthFunc(para1: jint); static; overload;
    class procedure glDepthMask(para1: jboolean); static; overload;
    class procedure glDepthRangef(para1: jfloat; para2: jfloat); static; overload;
    class procedure glDepthRangex(para1: jint; para2: jint); static; overload;
    class procedure glDisable(para1: jint); static; overload;
    class procedure glDisableClientState(para1: jint); static; overload;
    class procedure glDrawArrays(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glDrawElements(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class procedure glEnable(para1: jint); static; overload;
    class procedure glEnableClientState(para1: jint); static; overload;
    class procedure glFinish(); static; overload;
    class procedure glFlush(); static; overload;
    class procedure glFogf(para1: jint; para2: jfloat); static; overload;
    class procedure glFogfv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glFogfv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glFogfv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glFogx(para1: jint; para2: jint); static; overload;
    class procedure glFogxv(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glFogxv(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glFogxv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glFrontFace(para1: jint); static; overload;
    class procedure glFrustumf(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure glFrustumx(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure glGenTextures(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenTextures(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenTextures(para1: jint; para2: JNIntBuffer); static; overload;
    class function glGetError(): jint; static; overload;
    class procedure glGetIntegerv(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGetIntegerv(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGetIntegerv(para1: jint; para2: JNIntBuffer); static; overload;
    class function glGetString(para1: jint): JLString; static; overload;
    class procedure glHint(para1: jint; para2: jint); static; overload;
    class procedure glLightModelf(para1: jint; para2: jfloat); static; overload;
    class procedure glLightModelfv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glLightModelfv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glLightModelfv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glLightModelx(para1: jint; para2: jint); static; overload;
    class procedure glLightModelxv(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glLightModelxv(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glLightModelxv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glLightf(para1: jint; para2: jint; para3: jfloat); static; overload;
    class procedure glLightfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glLightfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glLightfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glLightx(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glLightxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glLightxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glLightxv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glLineWidth(para1: jfloat); static; overload;
    class procedure glLineWidthx(para1: jint); static; overload;
    class procedure glLoadIdentity(); static; overload;
    class procedure glLoadMatrixf(para1: Arr1jfloat; para2: jint); static; overload;
    class procedure glLoadMatrixf(var para1: array of jfloat; para2: jint); static; overload;
    class procedure glLoadMatrixf(para1: JNFloatBuffer); static; overload;
    class procedure glLoadMatrixx(para1: Arr1jint; para2: jint); static; overload;
    class procedure glLoadMatrixx(var para1: array of jint; para2: jint); static; overload;
    class procedure glLoadMatrixx(para1: JNIntBuffer); static; overload;
    class procedure glLogicOp(para1: jint); static; overload;
    class procedure glMaterialf(para1: jint; para2: jint; para3: jfloat); static; overload;
    class procedure glMaterialfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glMaterialfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glMaterialfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glMaterialx(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glMaterialxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glMaterialxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glMaterialxv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glMatrixMode(para1: jint); static; overload;
    class procedure glMultMatrixf(para1: Arr1jfloat; para2: jint); static; overload;
    class procedure glMultMatrixf(var para1: array of jfloat; para2: jint); static; overload;
    class procedure glMultMatrixf(para1: JNFloatBuffer); static; overload;
    class procedure glMultMatrixx(para1: Arr1jint; para2: jint); static; overload;
    class procedure glMultMatrixx(var para1: array of jint; para2: jint); static; overload;
    class procedure glMultMatrixx(para1: JNIntBuffer); static; overload;
    class procedure glMultiTexCoord4f(para1: jint; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure glMultiTexCoord4x(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glNormal3f(para1: jfloat; para2: jfloat; para3: jfloat); static; overload;
    class procedure glNormal3x(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glNormalPointer(para1: jint; para2: jint; para3: JNBuffer); static; overload;
    class procedure glOrthof(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure glOrthox(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure glPixelStorei(para1: jint; para2: jint); static; overload;
    class procedure glPointSize(para1: jfloat); static; overload;
    class procedure glPointSizex(para1: jint); static; overload;
    class procedure glPolygonOffset(para1: jfloat; para2: jfloat); static; overload;
    class procedure glPolygonOffsetx(para1: jint; para2: jint); static; overload;
    class procedure glPopMatrix(); static; overload;
    class procedure glPushMatrix(); static; overload;
    class procedure glReadPixels(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: JNBuffer); static; overload;
    class procedure glRotatef(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); static; overload;
    class procedure glRotatex(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glSampleCoverage(para1: jfloat; para2: jboolean); static; overload;
    class procedure glSampleCoveragex(para1: jint; para2: jboolean); static; overload;
    class procedure glScalef(para1: jfloat; para2: jfloat; para3: jfloat); static; overload;
    class procedure glScalex(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glScissor(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glShadeModel(para1: jint); static; overload;
    class procedure glStencilFunc(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glStencilMask(para1: jint); static; overload;
    class procedure glStencilOp(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexCoordPointer(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class procedure glTexEnvf(para1: jint; para2: jint; para3: jfloat); static; overload;
    class procedure glTexEnvfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glTexEnvfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glTexEnvfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glTexEnvx(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexEnvxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexEnvxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexEnvxv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); static; overload;
    class procedure glTexParameterf(para1: jint; para2: jint; para3: jfloat); static; overload;
    class procedure glTexParameterx(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); static; overload;
    class procedure glTranslatef(para1: jfloat; para2: jfloat; para3: jfloat); static; overload;
    class procedure glTranslatex(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glVertexPointer(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class procedure glViewport(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
  end;

  AOGLES10Ext = class external 'android.opengl' name 'GLES10Ext' (JLObject)
  public
    constructor create(); overload;
    class function glQueryMatrixxOES(para1: Arr1jint; para2: jint; para3: Arr1jint; para4: jint): jint; static; overload;
    class function glQueryMatrixxOES(var para1: array of jint; para2: jint; var para3: array of jint; para4: jint): jint; static; overload;
    class function glQueryMatrixxOES(para1: JNIntBuffer; para2: JNIntBuffer): jint; static; overload;
  end;

  AOGLES11Ext = class external 'android.opengl' name 'GLES11Ext' (JLObject)
  public
    const
      GL_3DC_XY_AMD = 34810;
      GL_3DC_X_AMD = 34809;
      GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;
      GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 34798;
      GL_ATC_RGB_AMD = 35986;
      GL_BGRA = 32993;
      GL_BLEND_DST_ALPHA_OES = 32970;
      GL_BLEND_DST_RGB_OES = 32968;
      GL_BLEND_EQUATION_ALPHA_OES = 34877;
      GL_BLEND_EQUATION_OES = 32777;
      GL_BLEND_EQUATION_RGB_OES = 32777;
      GL_BLEND_SRC_ALPHA_OES = 32971;
      GL_BLEND_SRC_RGB_OES = 32969;
      GL_BUFFER_ACCESS_OES = 35003;
      GL_BUFFER_MAPPED_OES = 35004;
      GL_BUFFER_MAP_POINTER_OES = 35005;
      GL_COLOR_ATTACHMENT0_OES = 36064;
      GL_CURRENT_PALETTE_MATRIX_OES = 34883;
      GL_DECR_WRAP_OES = 34056;
      GL_DEPTH24_STENCIL8_OES = 35056;
      GL_DEPTH_ATTACHMENT_OES = 36096;
      GL_DEPTH_COMPONENT16_OES = 33189;
      GL_DEPTH_COMPONENT24_OES = 33190;
      GL_DEPTH_COMPONENT32_OES = 33191;
      GL_DEPTH_STENCIL_OES = 34041;
      GL_ETC1_RGB8_OES = 36196;
      GL_FIXED_OES = 5132;
      GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 36049;
      GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 36048;
      GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 36051;
      GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 36050;
      GL_FRAMEBUFFER_BINDING_OES = 36006;
      GL_FRAMEBUFFER_COMPLETE_OES = 36053;
      GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 36054;
      GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 36057;
      GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 36058;
      GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 36055;
      GL_FRAMEBUFFER_OES = 36160;
      GL_FRAMEBUFFER_UNSUPPORTED_OES = 36061;
      GL_FUNC_ADD_OES = 32774;
      GL_FUNC_REVERSE_SUBTRACT_OES = 32779;
      GL_FUNC_SUBTRACT_OES = 32778;
      GL_INCR_WRAP_OES = 34055;
      GL_INVALID_FRAMEBUFFER_OPERATION_OES = 1286;
      GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 35742;
      GL_MATRIX_INDEX_ARRAY_OES = 34884;
      GL_MATRIX_INDEX_ARRAY_POINTER_OES = 34889;
      GL_MATRIX_INDEX_ARRAY_SIZE_OES = 34886;
      GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 34888;
      GL_MATRIX_INDEX_ARRAY_TYPE_OES = 34887;
      GL_MATRIX_PALETTE_OES = 34880;
      GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 34076;
      GL_MAX_PALETTE_MATRICES_OES = 34882;
      GL_MAX_RENDERBUFFER_SIZE_OES = 34024;
      GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
      GL_MAX_VERTEX_UNITS_OES = 34468;
      GL_MIRRORED_REPEAT_OES = 33648;
      GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 35213;
      GL_NONE_OES = 0;
      GL_NORMAL_MAP_OES = 34065;
      GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 35214;
      GL_REFLECTION_MAP_OES = 34066;
      GL_RENDERBUFFER_ALPHA_SIZE_OES = 36179;
      GL_RENDERBUFFER_BINDING_OES = 36007;
      GL_RENDERBUFFER_BLUE_SIZE_OES = 36178;
      GL_RENDERBUFFER_DEPTH_SIZE_OES = 36180;
      GL_RENDERBUFFER_GREEN_SIZE_OES = 36177;
      GL_RENDERBUFFER_HEIGHT_OES = 36163;
      GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 36164;
      GL_RENDERBUFFER_OES = 36161;
      GL_RENDERBUFFER_RED_SIZE_OES = 36176;
      GL_RENDERBUFFER_STENCIL_SIZE_OES = 36181;
      GL_RENDERBUFFER_WIDTH_OES = 36162;
      GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 36200;
      GL_RGB565_OES = 36194;
      GL_RGB5_A1_OES = 32855;
      GL_RGB8_OES = 32849;
      GL_RGBA4_OES = 32854;
      GL_RGBA8_OES = 32856;
      GL_SAMPLER_EXTERNAL_OES = 36198;
      GL_STENCIL_ATTACHMENT_OES = 36128;
      GL_STENCIL_INDEX1_OES = 36166;
      GL_STENCIL_INDEX4_OES = 36167;
      GL_STENCIL_INDEX8_OES = 36168;
      GL_TEXTURE_BINDING_CUBE_MAP_OES = 34068;
      GL_TEXTURE_BINDING_EXTERNAL_OES = 36199;
      GL_TEXTURE_CROP_RECT_OES = 35741;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 34070;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 34072;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 34074;
      GL_TEXTURE_CUBE_MAP_OES = 34067;
      GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 34069;
      GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 34071;
      GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 34073;
      GL_TEXTURE_EXTERNAL_OES = 36197;
      GL_TEXTURE_GEN_MODE_OES = 9472;
      GL_TEXTURE_GEN_STR_OES = 36192;
      GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 35215;
      GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
      GL_UNSIGNED_INT_24_8_OES = 34042;
      GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 34974;
      GL_WEIGHT_ARRAY_OES = 34477;
      GL_WEIGHT_ARRAY_POINTER_OES = 34476;
      GL_WEIGHT_ARRAY_SIZE_OES = 34475;
      GL_WEIGHT_ARRAY_STRIDE_OES = 34474;
      GL_WEIGHT_ARRAY_TYPE_OES = 34473;
      GL_WRITE_ONLY_OES = 35001;
  public
    constructor create(); overload;
    class procedure glBlendEquationSeparateOES(para1: jint; para2: jint); static; overload;
    class procedure glBlendFuncSeparateOES(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glBlendEquationOES(para1: jint); static; overload;
    class procedure glDrawTexsOES(para1: jshort; para2: jshort; para3: jshort; para4: jshort; para5: jshort); static; overload;
    class procedure glDrawTexiOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glDrawTexxOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glDrawTexsvOES(para1: Arr1jshort; para2: jint); static; overload;
    class procedure glDrawTexsvOES(var para1: array of jshort; para2: jint); static; overload;
    class procedure glDrawTexsvOES(para1: JNShortBuffer); static; overload;
    class procedure glDrawTexivOES(para1: Arr1jint; para2: jint); static; overload;
    class procedure glDrawTexivOES(var para1: array of jint; para2: jint); static; overload;
    class procedure glDrawTexivOES(para1: JNIntBuffer); static; overload;
    class procedure glDrawTexxvOES(para1: Arr1jint; para2: jint); static; overload;
    class procedure glDrawTexxvOES(var para1: array of jint; para2: jint); static; overload;
    class procedure glDrawTexxvOES(para1: JNIntBuffer); static; overload;
    class procedure glDrawTexfOES(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure glDrawTexfvOES(para1: Arr1jfloat; para2: jint); static; overload;
    class procedure glDrawTexfvOES(var para1: array of jfloat; para2: jint); static; overload;
    class procedure glDrawTexfvOES(para1: JNFloatBuffer); static; overload;
    class procedure glEGLImageTargetTexture2DOES(para1: jint; para2: JNBuffer); static; overload;
    class procedure glEGLImageTargetRenderbufferStorageOES(para1: jint; para2: JNBuffer); static; overload;
    class procedure glAlphaFuncxOES(para1: jint; para2: jint); static; overload;
    class procedure glClearColorxOES(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glClearDepthxOES(para1: jint); static; overload;
    class procedure glClipPlanexOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glClipPlanexOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glClipPlanexOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glColor4xOES(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glDepthRangexOES(para1: jint; para2: jint); static; overload;
    class procedure glFogxOES(para1: jint; para2: jint); static; overload;
    class procedure glFogxvOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glFogxvOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glFogxvOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glFrustumxOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure glGetClipPlanexOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGetClipPlanexOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGetClipPlanexOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetFixedvOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGetFixedvOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGetFixedvOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetLightxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetLightxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetLightxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetMaterialxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetMaterialxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetMaterialxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexEnvxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexEnvxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexEnvxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexParameterxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexParameterxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexParameterxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glLightModelxOES(para1: jint; para2: jint); static; overload;
    class procedure glLightModelxvOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glLightModelxvOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glLightModelxvOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glLightxOES(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glLightxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glLightxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glLightxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glLineWidthxOES(para1: jint); static; overload;
    class procedure glLoadMatrixxOES(para1: Arr1jint; para2: jint); static; overload;
    class procedure glLoadMatrixxOES(var para1: array of jint; para2: jint); static; overload;
    class procedure glLoadMatrixxOES(para1: JNIntBuffer); static; overload;
    class procedure glMaterialxOES(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glMaterialxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glMaterialxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glMaterialxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glMultMatrixxOES(para1: Arr1jint; para2: jint); static; overload;
    class procedure glMultMatrixxOES(var para1: array of jint; para2: jint); static; overload;
    class procedure glMultMatrixxOES(para1: JNIntBuffer); static; overload;
    class procedure glMultiTexCoord4xOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glNormal3xOES(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glOrthoxOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure glPointParameterxOES(para1: jint; para2: jint); static; overload;
    class procedure glPointParameterxvOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glPointParameterxvOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glPointParameterxvOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glPointSizexOES(para1: jint); static; overload;
    class procedure glPolygonOffsetxOES(para1: jint; para2: jint); static; overload;
    class procedure glRotatexOES(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glSampleCoveragexOES(para1: jint; para2: jboolean); static; overload;
    class procedure glScalexOES(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexEnvxOES(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexEnvxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexEnvxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexEnvxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTexParameterxOES(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexParameterxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexParameterxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexParameterxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTranslatexOES(para1: jint; para2: jint; para3: jint); static; overload;
    class function glIsRenderbufferOES(para1: jint): jboolean; static; overload;
    class procedure glBindRenderbufferOES(para1: jint; para2: jint); static; overload;
    class procedure glDeleteRenderbuffersOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteRenderbuffersOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteRenderbuffersOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGenRenderbuffersOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenRenderbuffersOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenRenderbuffersOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glRenderbufferStorageOES(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glGetRenderbufferParameterivOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetRenderbufferParameterivOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetRenderbufferParameterivOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class function glIsFramebufferOES(para1: jint): jboolean; static; overload;
    class procedure glBindFramebufferOES(para1: jint; para2: jint); static; overload;
    class procedure glDeleteFramebuffersOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteFramebuffersOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteFramebuffersOES(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGenFramebuffersOES(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenFramebuffersOES(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenFramebuffersOES(para1: jint; para2: JNIntBuffer); static; overload;
    class function glCheckFramebufferStatusOES(para1: jint): jint; static; overload;
    class procedure glFramebufferRenderbufferOES(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glFramebufferTexture2DOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glGetFramebufferAttachmentParameterivOES(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glGetFramebufferAttachmentParameterivOES(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glGetFramebufferAttachmentParameterivOES(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glGenerateMipmapOES(para1: jint); static; overload;
    class procedure glCurrentPaletteMatrixOES(para1: jint); static; overload;
    class procedure glLoadPaletteFromModelViewMatrixOES(); static; overload;
    class procedure glMatrixIndexPointerOES(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class procedure glWeightPointerOES(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class procedure glDepthRangefOES(para1: jfloat; para2: jfloat); static; overload;
    class procedure glFrustumfOES(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure glOrthofOES(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure glClipPlanefOES(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glClipPlanefOES(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glClipPlanefOES(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glGetClipPlanefOES(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glGetClipPlanefOES(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glGetClipPlanefOES(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glClearDepthfOES(para1: jfloat); static; overload;
    class procedure glTexGenfOES(para1: jint; para2: jint; para3: jfloat); static; overload;
    class procedure glTexGenfvOES(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glTexGenfvOES(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glTexGenfvOES(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glTexGeniOES(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexGenivOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexGenivOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexGenivOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTexGenxOES(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexGenxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexGenxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexGenxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexGenfvOES(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetTexGenfvOES(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetTexGenfvOES(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetTexGenivOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexGenivOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexGenivOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexGenxvOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexGenxvOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexGenxvOES(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
  end;

  AOGLES20 = class external 'android.opengl' name 'GLES20' (JLObject)
  public
    const
      GL_ACTIVE_ATTRIBUTES = 35721;
      GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;
      GL_ACTIVE_TEXTURE = 34016;
      GL_ACTIVE_UNIFORMS = 35718;
      GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;
      GL_ALIASED_LINE_WIDTH_RANGE = 33902;
      GL_ALIASED_POINT_SIZE_RANGE = 33901;
      GL_ALPHA = 6406;
      GL_ALPHA_BITS = 3413;
      GL_ALWAYS = 519;
      GL_ARRAY_BUFFER = 34962;
      GL_ARRAY_BUFFER_BINDING = 34964;
      GL_ATTACHED_SHADERS = 35717;
      GL_BACK = 1029;
      GL_BLEND = 3042;
      GL_BLEND_COLOR = 32773;
      GL_BLEND_DST_ALPHA = 32970;
      GL_BLEND_DST_RGB = 32968;
      GL_BLEND_EQUATION = 32777;
      GL_BLEND_EQUATION_ALPHA = 34877;
      GL_BLEND_EQUATION_RGB = 32777;
      GL_BLEND_SRC_ALPHA = 32971;
      GL_BLEND_SRC_RGB = 32969;
      GL_BLUE_BITS = 3412;
      GL_BOOL = 35670;
      GL_BOOL_VEC2 = 35671;
      GL_BOOL_VEC3 = 35672;
      GL_BOOL_VEC4 = 35673;
      GL_BUFFER_SIZE = 34660;
      GL_BUFFER_USAGE = 34661;
      GL_BYTE = 5120;
      GL_CCW = 2305;
      GL_CLAMP_TO_EDGE = 33071;
      GL_COLOR_ATTACHMENT0 = 36064;
      GL_COLOR_BUFFER_BIT = 16384;
      GL_COLOR_CLEAR_VALUE = 3106;
      GL_COLOR_WRITEMASK = 3107;
      GL_COMPILE_STATUS = 35713;
      GL_COMPRESSED_TEXTURE_FORMATS = 34467;
      GL_CONSTANT_ALPHA = 32771;
      GL_CONSTANT_COLOR = 32769;
      GL_CULL_FACE = 2884;
      GL_CULL_FACE_MODE = 2885;
      GL_CURRENT_PROGRAM = 35725;
      GL_CURRENT_VERTEX_ATTRIB = 34342;
      GL_CW = 2304;
      GL_DECR = 7683;
      GL_DECR_WRAP = 34056;
      GL_DELETE_STATUS = 35712;
      GL_DEPTH_ATTACHMENT = 36096;
      GL_DEPTH_BITS = 3414;
      GL_DEPTH_BUFFER_BIT = 256;
      GL_DEPTH_CLEAR_VALUE = 2931;
      GL_DEPTH_COMPONENT = 6402;
      GL_DEPTH_COMPONENT16 = 33189;
      GL_DEPTH_FUNC = 2932;
      GL_DEPTH_RANGE = 2928;
      GL_DEPTH_TEST = 2929;
      GL_DEPTH_WRITEMASK = 2930;
      GL_DITHER = 3024;
      GL_DONT_CARE = 4352;
      GL_DST_ALPHA = 772;
      GL_DST_COLOR = 774;
      GL_DYNAMIC_DRAW = 35048;
      GL_ELEMENT_ARRAY_BUFFER = 34963;
      GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
      GL_EQUAL = 514;
      GL_EXTENSIONS = 7939;
      GL_FALSE = 0;
      GL_FASTEST = 4353;
      GL_FIXED = 5132;
      GL_FLOAT = 5126;
      GL_FLOAT_MAT2 = 35674;
      GL_FLOAT_MAT3 = 35675;
      GL_FLOAT_MAT4 = 35676;
      GL_FLOAT_VEC2 = 35664;
      GL_FLOAT_VEC3 = 35665;
      GL_FLOAT_VEC4 = 35666;
      GL_FRAGMENT_SHADER = 35632;
      GL_FRAMEBUFFER = 36160;
      GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
      GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
      GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
      GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
      GL_FRAMEBUFFER_BINDING = 36006;
      GL_FRAMEBUFFER_COMPLETE = 36053;
      GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
      GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
      GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
      GL_FRAMEBUFFER_UNSUPPORTED = 36061;
      GL_FRONT = 1028;
      GL_FRONT_AND_BACK = 1032;
      GL_FRONT_FACE = 2886;
      GL_FUNC_ADD = 32774;
      GL_FUNC_REVERSE_SUBTRACT = 32779;
      GL_FUNC_SUBTRACT = 32778;
      GL_GENERATE_MIPMAP_HINT = 33170;
      GL_GEQUAL = 518;
      GL_GREATER = 516;
      GL_GREEN_BITS = 3411;
      GL_HIGH_FLOAT = 36338;
      GL_HIGH_INT = 36341;
      GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
      GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;
      GL_INCR = 7682;
      GL_INCR_WRAP = 34055;
      GL_INFO_LOG_LENGTH = 35716;
      GL_INT = 5124;
      GL_INT_VEC2 = 35667;
      GL_INT_VEC3 = 35668;
      GL_INT_VEC4 = 35669;
      GL_INVALID_ENUM = 1280;
      GL_INVALID_FRAMEBUFFER_OPERATION = 1286;
      GL_INVALID_OPERATION = 1282;
      GL_INVALID_VALUE = 1281;
      GL_INVERT = 5386;
      GL_KEEP = 7680;
      GL_LEQUAL = 515;
      GL_LESS = 513;
      GL_LINEAR = 9729;
      GL_LINEAR_MIPMAP_LINEAR = 9987;
      GL_LINEAR_MIPMAP_NEAREST = 9985;
      GL_LINES = 1;
      GL_LINE_LOOP = 2;
      GL_LINE_STRIP = 3;
      GL_LINE_WIDTH = 2849;
      GL_LINK_STATUS = 35714;
      GL_LOW_FLOAT = 36336;
      GL_LOW_INT = 36339;
      GL_LUMINANCE = 6409;
      GL_LUMINANCE_ALPHA = 6410;
      GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
      GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
      GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
      GL_MAX_RENDERBUFFER_SIZE = 34024;
      GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
      GL_MAX_TEXTURE_SIZE = 3379;
      GL_MAX_VARYING_VECTORS = 36348;
      GL_MAX_VERTEX_ATTRIBS = 34921;
      GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
      GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
      GL_MAX_VIEWPORT_DIMS = 3386;
      GL_MEDIUM_FLOAT = 36337;
      GL_MEDIUM_INT = 36340;
      GL_MIRRORED_REPEAT = 33648;
      GL_NEAREST = 9728;
      GL_NEAREST_MIPMAP_LINEAR = 9986;
      GL_NEAREST_MIPMAP_NEAREST = 9984;
      GL_NEVER = 512;
      GL_NICEST = 4354;
      GL_NONE = 0;
      GL_NOTEQUAL = 517;
      GL_NO_ERROR = 0;
      GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
      GL_NUM_SHADER_BINARY_FORMATS = 36345;
      GL_ONE = 1;
      GL_ONE_MINUS_CONSTANT_ALPHA = 32772;
      GL_ONE_MINUS_CONSTANT_COLOR = 32770;
      GL_ONE_MINUS_DST_ALPHA = 773;
      GL_ONE_MINUS_DST_COLOR = 775;
      GL_ONE_MINUS_SRC_ALPHA = 771;
      GL_ONE_MINUS_SRC_COLOR = 769;
      GL_OUT_OF_MEMORY = 1285;
      GL_PACK_ALIGNMENT = 3333;
      GL_POINTS = 0;
      GL_POLYGON_OFFSET_FACTOR = 32824;
      GL_POLYGON_OFFSET_FILL = 32823;
      GL_POLYGON_OFFSET_UNITS = 10752;
      GL_RED_BITS = 3410;
      GL_RENDERBUFFER = 36161;
      GL_RENDERBUFFER_ALPHA_SIZE = 36179;
      GL_RENDERBUFFER_BINDING = 36007;
      GL_RENDERBUFFER_BLUE_SIZE = 36178;
      GL_RENDERBUFFER_DEPTH_SIZE = 36180;
      GL_RENDERBUFFER_GREEN_SIZE = 36177;
      GL_RENDERBUFFER_HEIGHT = 36163;
      GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;
      GL_RENDERBUFFER_RED_SIZE = 36176;
      GL_RENDERBUFFER_STENCIL_SIZE = 36181;
      GL_RENDERBUFFER_WIDTH = 36162;
      GL_RENDERER = 7937;
      GL_REPEAT = 10497;
      GL_REPLACE = 7681;
      GL_RGB = 6407;
      GL_RGB565 = 36194;
      GL_RGB5_A1 = 32855;
      GL_RGBA = 6408;
      GL_RGBA4 = 32854;
      GL_SAMPLER_2D = 35678;
      GL_SAMPLER_CUBE = 35680;
      GL_SAMPLES = 32937;
      GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
      GL_SAMPLE_BUFFERS = 32936;
      GL_SAMPLE_COVERAGE = 32928;
      GL_SAMPLE_COVERAGE_INVERT = 32939;
      GL_SAMPLE_COVERAGE_VALUE = 32938;
      GL_SCISSOR_BOX = 3088;
      GL_SCISSOR_TEST = 3089;
      GL_SHADER_BINARY_FORMATS = 36344;
      GL_SHADER_COMPILER = 36346;
      GL_SHADER_SOURCE_LENGTH = 35720;
      GL_SHADER_TYPE = 35663;
      GL_SHADING_LANGUAGE_VERSION = 35724;
      GL_SHORT = 5122;
      GL_SRC_ALPHA = 770;
      GL_SRC_ALPHA_SATURATE = 776;
      GL_SRC_COLOR = 768;
      GL_STATIC_DRAW = 35044;
      GL_STENCIL_ATTACHMENT = 36128;
      GL_STENCIL_BACK_FAIL = 34817;
      GL_STENCIL_BACK_FUNC = 34816;
      GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
      GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;
      GL_STENCIL_BACK_REF = 36003;
      GL_STENCIL_BACK_VALUE_MASK = 36004;
      GL_STENCIL_BACK_WRITEMASK = 36005;
      GL_STENCIL_BITS = 3415;
      GL_STENCIL_BUFFER_BIT = 1024;
      GL_STENCIL_CLEAR_VALUE = 2961;
      GL_STENCIL_FAIL = 2964;
      GL_STENCIL_FUNC = 2962;
      GL_STENCIL_INDEX = 6401 deprecated;
      GL_STENCIL_INDEX8 = 36168;
      GL_STENCIL_PASS_DEPTH_FAIL = 2965;
      GL_STENCIL_PASS_DEPTH_PASS = 2966;
      GL_STENCIL_REF = 2967;
      GL_STENCIL_TEST = 2960;
      GL_STENCIL_VALUE_MASK = 2963;
      GL_STENCIL_WRITEMASK = 2968;
      GL_STREAM_DRAW = 35040;
      GL_SUBPIXEL_BITS = 3408;
      GL_TEXTURE = 5890;
      GL_TEXTURE0 = 33984;
      GL_TEXTURE1 = 33985;
      GL_TEXTURE10 = 33994;
      GL_TEXTURE11 = 33995;
      GL_TEXTURE12 = 33996;
      GL_TEXTURE13 = 33997;
      GL_TEXTURE14 = 33998;
      GL_TEXTURE15 = 33999;
      GL_TEXTURE16 = 34000;
      GL_TEXTURE17 = 34001;
      GL_TEXTURE18 = 34002;
      GL_TEXTURE19 = 34003;
      GL_TEXTURE2 = 33986;
      GL_TEXTURE20 = 34004;
      GL_TEXTURE21 = 34005;
      GL_TEXTURE22 = 34006;
      GL_TEXTURE23 = 34007;
      GL_TEXTURE24 = 34008;
      GL_TEXTURE25 = 34009;
      GL_TEXTURE26 = 34010;
      GL_TEXTURE27 = 34011;
      GL_TEXTURE28 = 34012;
      GL_TEXTURE29 = 34013;
      GL_TEXTURE3 = 33987;
      GL_TEXTURE30 = 34014;
      GL_TEXTURE31 = 34015;
      GL_TEXTURE4 = 33988;
      GL_TEXTURE5 = 33989;
      GL_TEXTURE6 = 33990;
      GL_TEXTURE7 = 33991;
      GL_TEXTURE8 = 33992;
      GL_TEXTURE9 = 33993;
      GL_TEXTURE_2D = 3553;
      GL_TEXTURE_BINDING_2D = 32873;
      GL_TEXTURE_BINDING_CUBE_MAP = 34068;
      GL_TEXTURE_CUBE_MAP = 34067;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
      GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
      GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
      GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
      GL_TEXTURE_MAG_FILTER = 10240;
      GL_TEXTURE_MIN_FILTER = 10241;
      GL_TEXTURE_WRAP_S = 10242;
      GL_TEXTURE_WRAP_T = 10243;
      GL_TRIANGLES = 4;
      GL_TRIANGLE_FAN = 6;
      GL_TRIANGLE_STRIP = 5;
      GL_TRUE = 1;
      GL_UNPACK_ALIGNMENT = 3317;
      GL_UNSIGNED_BYTE = 5121;
      GL_UNSIGNED_INT = 5125;
      GL_UNSIGNED_SHORT = 5123;
      GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
      GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
      GL_UNSIGNED_SHORT_5_6_5 = 33635;
      GL_VALIDATE_STATUS = 35715;
      GL_VENDOR = 7936;
      GL_VERSION = 7938;
      GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
      GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
      GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
      GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;
      GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;
      GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
      GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;
      GL_VERTEX_SHADER = 35633;
      GL_VIEWPORT = 2978;
      GL_ZERO = 0;
  public
    constructor create(); overload;
    class procedure glActiveTexture(para1: jint); static; overload;
    class procedure glAttachShader(para1: jint; para2: jint); static; overload;
    class procedure glBindAttribLocation(para1: jint; para2: jint; para3: JLString); static; overload;
    class procedure glBindBuffer(para1: jint; para2: jint); static; overload;
    class procedure glBindFramebuffer(para1: jint; para2: jint); static; overload;
    class procedure glBindRenderbuffer(para1: jint; para2: jint); static; overload;
    class procedure glBindTexture(para1: jint; para2: jint); static; overload;
    class procedure glBlendColor(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); static; overload;
    class procedure glBlendEquation(para1: jint); static; overload;
    class procedure glBlendEquationSeparate(para1: jint; para2: jint); static; overload;
    class procedure glBlendFunc(para1: jint; para2: jint); static; overload;
    class procedure glBlendFuncSeparate(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glBufferData(para1: jint; para2: jint; para3: JNBuffer; para4: jint); static; overload;
    class procedure glBufferSubData(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class function glCheckFramebufferStatus(para1: jint): jint; static; overload;
    class procedure glClear(para1: jint); static; overload;
    class procedure glClearColor(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); static; overload;
    class procedure glClearDepthf(para1: jfloat); static; overload;
    class procedure glClearStencil(para1: jint); static; overload;
    class procedure glColorMask(para1: jboolean; para2: jboolean; para3: jboolean; para4: jboolean); static; overload;
    class procedure glCompileShader(para1: jint); static; overload;
    class procedure glCompressedTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JNBuffer); static; overload;
    class procedure glCompressedTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); static; overload;
    class procedure glCopyTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); static; overload;
    class procedure glCopyTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); static; overload;
    class function glCreateProgram(): jint; static; overload;
    class function glCreateShader(para1: jint): jint; static; overload;
    class procedure glCullFace(para1: jint); static; overload;
    class procedure glDeleteBuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteBuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteBuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glDeleteFramebuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteFramebuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteFramebuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glDeleteProgram(para1: jint); static; overload;
    class procedure glDeleteRenderbuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteRenderbuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteRenderbuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glDeleteShader(para1: jint); static; overload;
    class procedure glDeleteTextures(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteTextures(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteTextures(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glDepthFunc(para1: jint); static; overload;
    class procedure glDepthMask(para1: jboolean); static; overload;
    class procedure glDepthRangef(para1: jfloat; para2: jfloat); static; overload;
    class procedure glDetachShader(para1: jint; para2: jint); static; overload;
    class procedure glDisable(para1: jint); static; overload;
    class procedure glDisableVertexAttribArray(para1: jint); static; overload;
    class procedure glDrawArrays(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glDrawElements(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glDrawElements(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class procedure glEnable(para1: jint); static; overload;
    class procedure glEnableVertexAttribArray(para1: jint); static; overload;
    class procedure glFinish(); static; overload;
    class procedure glFlush(); static; overload;
    class procedure glFramebufferRenderbuffer(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glFramebufferTexture2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glFrontFace(para1: jint); static; overload;
    class procedure glGenBuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenBuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenBuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGenerateMipmap(para1: jint); static; overload;
    class procedure glGenFramebuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenFramebuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenFramebuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGenRenderbuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenRenderbuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenRenderbuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGenTextures(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenTextures(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenTextures(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetActiveAttrib(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint; para6: Arr1jint; para7: jint; para8: Arr1jint; para9: jint; para10: Arr1jbyte; para11: jint); static; overload;
    class procedure glGetActiveAttrib(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint; var para6: array of jint; para7: jint; var para8: array of jint; para9: jint; var para10: array of jbyte; para11: jint); static; overload;
    class function glGetActiveAttrib(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: Arr1jint; para6: jint): JLString; static; overload;
    class function glGetActiveAttrib(para1: jint; para2: jint; var para3: array of jint; para4: jint; var para5: array of jint; para6: jint): JLString; static; overload;
    class function glGetActiveAttrib(para1: jint; para2: jint; para3: JNIntBuffer; para4: JNIntBuffer): JLString; static; overload;
    class procedure glGetActiveUniform(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint; para6: Arr1jint; para7: jint; para8: Arr1jint; para9: jint; para10: Arr1jbyte; para11: jint); static; overload;
    class procedure glGetActiveUniform(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint; var para6: array of jint; para7: jint; var para8: array of jint; para9: jint; var para10: array of jbyte; para11: jint); static; overload;
    class function glGetActiveUniform(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: Arr1jint; para6: jint): JLString; static; overload;
    class function glGetActiveUniform(para1: jint; para2: jint; var para3: array of jint; para4: jint; var para5: array of jint; para6: jint): JLString; static; overload;
    class function glGetActiveUniform(para1: jint; para2: jint; para3: JNIntBuffer; para4: JNIntBuffer): JLString; static; overload;
    class procedure glGetAttachedShaders(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: Arr1jint; para6: jint); static; overload;
    class procedure glGetAttachedShaders(para1: jint; para2: jint; var para3: array of jint; para4: jint; var para5: array of jint; para6: jint); static; overload;
    class procedure glGetAttachedShaders(para1: jint; para2: jint; para3: JNIntBuffer; para4: JNIntBuffer); static; overload;
    class function glGetAttribLocation(para1: jint; para2: JLString): jint; static; overload;
    class procedure glGetBooleanv(para1: jint; para2: Arr1jboolean; para3: jint); static; overload;
    class procedure glGetBooleanv(para1: jint; var para2: array of jboolean; para3: jint); static; overload;
    class procedure glGetBooleanv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetBufferParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetBufferParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetBufferParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class function glGetError(): jint; static; overload;
    class procedure glGetFloatv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glGetFloatv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glGetFloatv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glGetFramebufferAttachmentParameteriv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glGetFramebufferAttachmentParameteriv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glGetFramebufferAttachmentParameteriv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glGetIntegerv(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGetIntegerv(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGetIntegerv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetProgramiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetProgramiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetProgramiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class function glGetProgramInfoLog(para1: jint): JLString; static; overload;
    class procedure glGetRenderbufferParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetRenderbufferParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetRenderbufferParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetShaderiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetShaderiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetShaderiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class function glGetShaderInfoLog(para1: jint): JLString; static; overload;
    class procedure glGetShaderPrecisionFormat(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: Arr1jint; para6: jint); static; overload;
    class procedure glGetShaderPrecisionFormat(para1: jint; para2: jint; var para3: array of jint; para4: jint; var para5: array of jint; para6: jint); static; overload;
    class procedure glGetShaderPrecisionFormat(para1: jint; para2: jint; para3: JNIntBuffer; para4: JNIntBuffer); static; overload;
    class procedure glGetShaderSource(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: Arr1jbyte; para6: jint); static; overload;
    class procedure glGetShaderSource(para1: jint; para2: jint; var para3: array of jint; para4: jint; var para5: array of jbyte; para6: jint); static; overload;
    class function glGetShaderSource(para1: jint): JLString; static; overload;
    class function glGetString(para1: jint): JLString; static; overload;
    class procedure glGetTexParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetTexParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetTexParameterfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetTexParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetUniformfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetUniformfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetUniformfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetUniformiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetUniformiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetUniformiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class function glGetUniformLocation(para1: jint; para2: JLString): jint; static; overload;
    class procedure glGetVertexAttribfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetVertexAttribfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetVertexAttribfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetVertexAttribiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetVertexAttribiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetVertexAttribiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glHint(para1: jint; para2: jint); static; overload;
    class function glIsBuffer(para1: jint): jboolean; static; overload;
    class function glIsEnabled(para1: jint): jboolean; static; overload;
    class function glIsFramebuffer(para1: jint): jboolean; static; overload;
    class function glIsProgram(para1: jint): jboolean; static; overload;
    class function glIsRenderbuffer(para1: jint): jboolean; static; overload;
    class function glIsShader(para1: jint): jboolean; static; overload;
    class function glIsTexture(para1: jint): jboolean; static; overload;
    class procedure glLineWidth(para1: jfloat); static; overload;
    class procedure glLinkProgram(para1: jint); static; overload;
    class procedure glPixelStorei(para1: jint; para2: jint); static; overload;
    class procedure glPolygonOffset(para1: jfloat; para2: jfloat); static; overload;
    class procedure glReadPixels(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: JNBuffer); static; overload;
    class procedure glReleaseShaderCompiler(); static; overload;
    class procedure glRenderbufferStorage(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glSampleCoverage(para1: jfloat; para2: jboolean); static; overload;
    class procedure glScissor(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glShaderBinary(para1: jint; para2: Arr1jint; para3: jint; para4: jint; para5: JNBuffer; para6: jint); static; overload;
    class procedure glShaderBinary(para1: jint; var para2: array of jint; para3: jint; para4: jint; para5: JNBuffer; para6: jint); static; overload;
    class procedure glShaderBinary(para1: jint; para2: JNIntBuffer; para3: jint; para4: JNBuffer; para5: jint); static; overload;
    class procedure glShaderSource(para1: jint; para2: JLString); static; overload;
    class procedure glStencilFunc(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glStencilFuncSeparate(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glStencilMask(para1: jint); static; overload;
    class procedure glStencilMaskSeparate(para1: jint; para2: jint); static; overload;
    class procedure glStencilOp(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glStencilOpSeparate(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); static; overload;
    class procedure glTexParameterf(para1: jint; para2: jint; para3: jfloat); static; overload;
    class procedure glTexParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glTexParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glTexParameterfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glTexParameteri(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); static; overload;
    class procedure glUniform1f(para1: jint; para2: jfloat); static; overload;
    class procedure glUniform1fv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glUniform1fv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glUniform1fv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glUniform1i(para1: jint; para2: jint); static; overload;
    class procedure glUniform1iv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glUniform1iv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glUniform1iv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glUniform2f(para1: jint; para2: jfloat; para3: jfloat); static; overload;
    class procedure glUniform2fv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glUniform2fv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glUniform2fv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glUniform2i(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glUniform2iv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glUniform2iv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glUniform2iv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glUniform3f(para1: jint; para2: jfloat; para3: jfloat; para4: jfloat); static; overload;
    class procedure glUniform3fv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glUniform3fv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glUniform3fv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glUniform3i(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glUniform3iv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glUniform3iv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glUniform3iv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glUniform4f(para1: jint; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure glUniform4fv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glUniform4fv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glUniform4fv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glUniform4i(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glUniform4iv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glUniform4iv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glUniform4iv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glUniformMatrix2fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix2fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix2fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glUniformMatrix3fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix3fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix3fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glUniformMatrix4fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix4fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix4fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glUseProgram(para1: jint); static; overload;
    class procedure glValidateProgram(para1: jint); static; overload;
    class procedure glVertexAttrib1f(para1: jint; para2: jfloat); static; overload;
    class procedure glVertexAttrib1fv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glVertexAttrib1fv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glVertexAttrib1fv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glVertexAttrib2f(para1: jint; para2: jfloat; para3: jfloat); static; overload;
    class procedure glVertexAttrib2fv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glVertexAttrib2fv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glVertexAttrib2fv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glVertexAttrib3f(para1: jint; para2: jfloat; para3: jfloat; para4: jfloat); static; overload;
    class procedure glVertexAttrib3fv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glVertexAttrib3fv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glVertexAttrib3fv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glVertexAttrib4f(para1: jint; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure glVertexAttrib4fv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glVertexAttrib4fv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glVertexAttrib4fv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glVertexAttribPointer(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: jint; para6: jint); static; overload;
    class procedure glVertexAttribPointer(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: jint; para6: JNBuffer); static; overload;
    class procedure glViewport(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
  end;

  AOGLU = class external 'android.opengl' name 'GLU' (JLObject)
  public
    constructor create(); overload;
    class function gluErrorString(para1: jint): JLString; static; overload;
    class procedure gluLookAt(para1: JMKOGL10; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat; para9: jfloat; para10: jfloat); static; overload;
    class procedure gluOrtho2D(para1: JMKOGL10; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure gluPerspective(para1: JMKOGL10; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class function gluProject(para1: jfloat; para2: jfloat; para3: jfloat; para4: Arr1jfloat; para5: jint; para6: Arr1jfloat; para7: jint; para8: Arr1jint; para9: jint; para10: Arr1jfloat; para11: jint): jint; static; overload;
    class function gluProject(para1: jfloat; para2: jfloat; para3: jfloat; var para4: array of jfloat; para5: jint; var para6: array of jfloat; para7: jint; var para8: array of jint; para9: jint; var para10: array of jfloat; para11: jint): jint; static; overload;
    class function gluUnProject(para1: jfloat; para2: jfloat; para3: jfloat; para4: Arr1jfloat; para5: jint; para6: Arr1jfloat; para7: jint; para8: Arr1jint; para9: jint; para10: Arr1jfloat; para11: jint): jint; static; overload;
    class function gluUnProject(para1: jfloat; para2: jfloat; para3: jfloat; var para4: array of jfloat; para5: jint; var para6: array of jfloat; para7: jint; var para8: array of jint; para9: jint; var para10: array of jfloat; para11: jint): jint; static; overload;
  end;

  AOGLUtils = class sealed external 'android.opengl' name 'GLUtils' (JLObject)
  public
    class function getInternalFormat(para1: AGBitmap): jint; static; overload;
    class function getType(para1: AGBitmap): jint; static; overload;
    class procedure texImage2D(para1: jint; para2: jint; para3: jint; para4: AGBitmap; para5: jint); static; overload;
    class procedure texImage2D(para1: jint; para2: jint; para3: jint; para4: AGBitmap; para5: jint; para6: jint); static; overload;
    class procedure texImage2D(para1: jint; para2: jint; para3: AGBitmap; para4: jint); static; overload;
    class procedure texSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: AGBitmap); static; overload;
    class procedure texSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: AGBitmap; para6: jint; para7: jint); static; overload;
    class function getEGLErrorString(para1: jint): JLString; static; overload;
  end;

  AOMatrix = class external 'android.opengl' name 'Matrix' (JLObject)
  public
    constructor create(); overload;
    class procedure multiplyMM(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure multiplyMM(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; var para5: array of jfloat; para6: jint); static; overload;
    class procedure multiplyMV(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure multiplyMV(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; var para5: array of jfloat; para6: jint); static; overload;
    class procedure transposeM(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure transposeM(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class function invertM(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint): jboolean; static; overload;
    class function invertM(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint): jboolean; static; overload;
    class procedure orthoM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat); static; overload;
    class procedure orthoM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat); static; overload;
    class procedure frustumM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat); static; overload;
    class procedure frustumM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat); static; overload;
    class procedure perspectiveM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure perspectiveM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class function length(para1: jfloat; para2: jfloat; para3: jfloat): jfloat; static; overload;
    class procedure setIdentityM(para1: Arr1jfloat; para2: jint); static; overload;
    class procedure setIdentityM(var para1: array of jfloat; para2: jint); static; overload;
    class procedure scaleM(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: jfloat; para6: jfloat; para7: jfloat); static; overload;
    class procedure scaleM(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; para5: jfloat; para6: jfloat; para7: jfloat); static; overload;
    class procedure scaleM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure scaleM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure translateM(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: jfloat; para6: jfloat; para7: jfloat); static; overload;
    class procedure translateM(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; para5: jfloat; para6: jfloat; para7: jfloat); static; overload;
    class procedure translateM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure translateM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure rotateM(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat); static; overload;
    class procedure rotateM(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat); static; overload;
    class procedure rotateM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure rotateM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure setRotateM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure setRotateM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure setRotateEulerM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure setRotateEulerM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure setLookAtM(para1: Arr1jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat; para9: jfloat; para10: jfloat; para11: jfloat); static; overload;
    class procedure setLookAtM(var para1: array of jfloat; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat; para9: jfloat; para10: jfloat; para11: jfloat); static; overload;
  end;

  AOVisibility = class external 'android.opengl' name 'Visibility' (JLObject)
  public
    constructor create(); overload;
    class function visibilityTest(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: Arr1jchar; para6: jint; para7: jint): jint; static; overload;
    class function visibilityTest(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; var para5: array of jchar; para6: jint; para7: jint): jint; static; overload;
    class function frustumCullSpheres(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: jint; para6: Arr1jint; para7: jint; para8: jint): jint; static; overload;
    class function frustumCullSpheres(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; para5: jint; var para6: array of jint; para7: jint; para8: jint): jint; static; overload;
    class procedure computeBoundingSphere(para1: Arr1jfloat; para2: jint; para3: jint; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure computeBoundingSphere(var para1: array of jfloat; para2: jint; para3: jint; var para4: array of jfloat; para5: jint); static; overload;
  end;

  AOBatteryManager = class external 'android.os' name 'BatteryManager' (JLObject)
  public
    const
      BATTERY_HEALTH_COLD = 7;
      BATTERY_HEALTH_DEAD = 4;
      BATTERY_HEALTH_GOOD = 2;
      BATTERY_HEALTH_OVERHEAT = 3;
      BATTERY_HEALTH_OVER_VOLTAGE = 5;
      BATTERY_HEALTH_UNKNOWN = 1;
      BATTERY_HEALTH_UNSPECIFIED_FAILURE = 6;
      BATTERY_PLUGGED_AC = 1;
      BATTERY_PLUGGED_USB = 2;
      BATTERY_PLUGGED_WIRELESS = 4;
      BATTERY_PROPERTY_CAPACITY = 4;
      BATTERY_PROPERTY_CHARGE_COUNTER = 1;
      BATTERY_PROPERTY_CURRENT_AVERAGE = 3;
      BATTERY_PROPERTY_CURRENT_NOW = 2;
      BATTERY_PROPERTY_ENERGY_COUNTER = 5;
      BATTERY_STATUS_CHARGING = 2;
      BATTERY_STATUS_DISCHARGING = 3;
      BATTERY_STATUS_FULL = 5;
      BATTERY_STATUS_NOT_CHARGING = 4;
      BATTERY_STATUS_UNKNOWN = 1;
      EXTRA_HEALTH = 'health';
      EXTRA_ICON_SMALL = 'icon-small';
      EXTRA_LEVEL = 'level';
      EXTRA_PLUGGED = 'plugged';
      EXTRA_PRESENT = 'present';
      EXTRA_SCALE = 'scale';
      EXTRA_STATUS = 'status';
      EXTRA_TECHNOLOGY = 'technology';
      EXTRA_TEMPERATURE = 'temperature';
      EXTRA_VOLTAGE = 'voltage';
  public
    constructor create(); overload;
    function getIntProperty(para1: jint): jint; overload; virtual;
    function getLongProperty(para1: jint): jlong; overload; virtual;
  end;

  AOBuild = class external 'android.os' name 'Build' (JLObject)
  public
    type
      InnerVERSION_CODES = class;
      Arr1InnerVERSION_CODES = array of InnerVERSION_CODES;
      Arr2InnerVERSION_CODES = array of Arr1InnerVERSION_CODES;
      Arr3InnerVERSION_CODES = array of Arr2InnerVERSION_CODES;
      InnerVERSION = class;
      Arr1InnerVERSION = array of InnerVERSION;
      Arr2InnerVERSION = array of Arr1InnerVERSION;
      Arr3InnerVERSION = array of Arr2InnerVERSION;
      InnerVERSION_CODES = class external 'android.os' name 'VERSION_CODES' (JLObject)
      public
        const
          BASE = 1;
          BASE_1_1 = 2;
          CUPCAKE = 3;
          CUR_DEVELOPMENT = 10000;
          DONUT = 4;
          ECLAIR = 5;
          ECLAIR_0_1 = 6;
          ECLAIR_MR1 = 7;
          FROYO = 8;
          GINGERBREAD = 9;
          GINGERBREAD_MR1 = 10;
          HONEYCOMB = 11;
          HONEYCOMB_MR1 = 12;
          HONEYCOMB_MR2 = 13;
          ICE_CREAM_SANDWICH = 14;
          ICE_CREAM_SANDWICH_MR1 = 15;
          JELLY_BEAN = 16;
          JELLY_BEAN_MR1 = 17;
          JELLY_BEAN_MR2 = 18;
          KITKAT = 19;
          KITKAT_WATCH = 20;
          LOLLIPOP = 21;
      public
        constructor create(); overload;
      end;

      InnerVERSION = class external 'android.os' name 'VERSION' (JLObject)
      public
        final class var
          fCODENAME: JLString; external name 'CODENAME';
          fINCREMENTAL: JLString; external name 'INCREMENTAL';
          fRELEASE: JLString; external name 'RELEASE';
          fSDK: JLString deprecated; external name 'SDK';
          fSDK_INT: jint; external name 'SDK_INT';
      public
        constructor create(); overload;
      end;

  public
    final class var
      fBOARD: JLString; external name 'BOARD';
      fBOOTLOADER: JLString; external name 'BOOTLOADER';
      fBRAND: JLString; external name 'BRAND';
      fCPU_ABI: JLString deprecated; external name 'CPU_ABI';
      fCPU_ABI2: JLString deprecated; external name 'CPU_ABI2';
      fDEVICE: JLString; external name 'DEVICE';
      fDISPLAY: JLString; external name 'DISPLAY';
      fFINGERPRINT: JLString; external name 'FINGERPRINT';
      fHARDWARE: JLString; external name 'HARDWARE';
      fHOST: JLString; external name 'HOST';
      fID: JLString; external name 'ID';
      fMANUFACTURER: JLString; external name 'MANUFACTURER';
      fMODEL: JLString; external name 'MODEL';
      fPRODUCT: JLString; external name 'PRODUCT';
      fRADIO: JLString deprecated; external name 'RADIO';
      fSERIAL: JLString; external name 'SERIAL';
      fSUPPORTED_32_BIT_ABIS: Arr1JLString; external name 'SUPPORTED_32_BIT_ABIS';
      fSUPPORTED_64_BIT_ABIS: Arr1JLString; external name 'SUPPORTED_64_BIT_ABIS';
      fSUPPORTED_ABIS: Arr1JLString; external name 'SUPPORTED_ABIS';
      fTAGS: JLString; external name 'TAGS';
      fTIME: jlong; external name 'TIME';
      fTYPE: JLString; external name 'TYPE';
  public
    const
      UNKNOWN = 'unknown';
  public
    final class var
      fUSER: JLString; external name 'USER';
  public
    constructor create(); overload;
    class function getRadioVersion(): JLString; static; overload;
  end;

  AOConditionVariable = class external 'android.os' name 'ConditionVariable' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: jboolean); overload;
    procedure open(); overload; virtual;
    procedure close(); overload; virtual;
    procedure block(); overload; virtual;
    function block(para1: jlong): jboolean; overload; virtual;
  end;

  AOCountDownTimer = class abstract external 'android.os' name 'CountDownTimer' (JLObject)
  public
    constructor create(para1: jlong; para2: jlong); overload;
    procedure cancel(); overload; virtual; final;
    function start(): AOCountDownTimer; overload; virtual; final;
    procedure onTick(para1: jlong); overload; virtual; abstract;
    procedure onFinish(); overload; virtual; abstract;
  end;

  AOEnvironment = class external 'android.os' name 'Environment' (JLObject)
  public
    class var
      fDIRECTORY_ALARMS: JLString; external name 'DIRECTORY_ALARMS';
      fDIRECTORY_DCIM: JLString; external name 'DIRECTORY_DCIM';
      fDIRECTORY_DOCUMENTS: JLString; external name 'DIRECTORY_DOCUMENTS';
      fDIRECTORY_DOWNLOADS: JLString; external name 'DIRECTORY_DOWNLOADS';
      fDIRECTORY_MOVIES: JLString; external name 'DIRECTORY_MOVIES';
      fDIRECTORY_MUSIC: JLString; external name 'DIRECTORY_MUSIC';
      fDIRECTORY_NOTIFICATIONS: JLString; external name 'DIRECTORY_NOTIFICATIONS';
      fDIRECTORY_PICTURES: JLString; external name 'DIRECTORY_PICTURES';
      fDIRECTORY_PODCASTS: JLString; external name 'DIRECTORY_PODCASTS';
      fDIRECTORY_RINGTONES: JLString; external name 'DIRECTORY_RINGTONES';
  public
    const
      MEDIA_BAD_REMOVAL = 'bad_removal';
      MEDIA_CHECKING = 'checking';
      MEDIA_MOUNTED = 'mounted';
      MEDIA_MOUNTED_READ_ONLY = 'mounted_ro';
      MEDIA_NOFS = 'nofs';
      MEDIA_REMOVED = 'removed';
      MEDIA_SHARED = 'shared';
      MEDIA_UNKNOWN = 'unknown';
      MEDIA_UNMOUNTABLE = 'unmountable';
      MEDIA_UNMOUNTED = 'unmounted';
  public
    constructor create(); overload;
    class function getRootDirectory(): JIFile; static; overload;
    class function getDataDirectory(): JIFile; static; overload;
    class function getExternalStorageDirectory(): JIFile; static; overload;
    class function getExternalStoragePublicDirectory(para1: JLString): JIFile; static; overload;
    class function getDownloadCacheDirectory(): JIFile; static; overload;
    class function getExternalStorageState(): JLString; static; overload;
    class function getStorageState(para1: JIFile): JLString; static; overload;
    class function getExternalStorageState(para1: JIFile): JLString; static; overload;
    class function isExternalStorageRemovable(): jboolean; static; overload;
    class function isExternalStorageRemovable(para1: JIFile): jboolean; static; overload;
    class function isExternalStorageEmulated(): jboolean; static; overload;
    class function isExternalStorageEmulated(para1: JIFile): jboolean; static; overload;
  end;

  AOFileObserver = class abstract external 'android.os' name 'FileObserver' (JLObject)
  public
    const
      ACCESS = 1;
      MODIFY = 2;
      ATTRIB = 4;
      CLOSE_WRITE = 8;
      CLOSE_NOWRITE = 16;
      OPEN = 32;
      MOVED_FROM = 64;
      MOVED_TO = 128;
      CREATE_ = 256;
      DELETE = 512;
      DELETE_SELF = 1024;
      MOVE_SELF = 2048;
      ALL_EVENTS = 4095;
  public
    procedure Create(para1: JLString); overload; virtual;
    procedure Create(para1: JLString; para2: jint); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure startWatching(); overload; virtual;
    procedure stopWatching(); overload; virtual;
    procedure onEvent(para1: jint; para2: JLString); overload; virtual; abstract;
  end;

  AOHandler = class external 'android.os' name 'Handler' (JLObject)
  public
    type
      InnerCallback = interface;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = interface external 'android.os' name 'Callback' 
        function handleMessage(para1: AOMessage): jboolean; overload;
      end;

  public
    constructor create(); overload;
    constructor create(para1: AOHandler.InnerCallback); overload;
    constructor create(para1: AOLooper); overload;
    constructor create(para1: AOLooper; para2: AOHandler.InnerCallback); overload;
    procedure handleMessage(para1: AOMessage); overload; virtual;
    procedure dispatchMessage(para1: AOMessage); overload; virtual;
    function getMessageName(para1: AOMessage): JLString; overload; virtual;
    function obtainMessage(): AOMessage; overload; virtual; final;
    function obtainMessage(para1: jint): AOMessage; overload; virtual; final;
    function obtainMessage(para1: jint; para2: JLObject): AOMessage; overload; virtual; final;
    function obtainMessage(para1: jint; para2: jint; para3: jint): AOMessage; overload; virtual; final;
    function obtainMessage(para1: jint; para2: jint; para3: jint; para4: JLObject): AOMessage; overload; virtual; final;
    function post(para1: JLRunnable): jboolean; overload; virtual; final;
    function postAtTime(para1: JLRunnable; para2: jlong): jboolean; overload; virtual; final;
    function postAtTime(para1: JLRunnable; para2: JLObject; para3: jlong): jboolean; overload; virtual; final;
    function postDelayed(para1: JLRunnable; para2: jlong): jboolean; overload; virtual; final;
    function postAtFrontOfQueue(para1: JLRunnable): jboolean; overload; virtual; final;
    procedure removeCallbacks(para1: JLRunnable); overload; virtual; final;
    procedure removeCallbacks(para1: JLRunnable; para2: JLObject); overload; virtual; final;
    function sendMessage(para1: AOMessage): jboolean; overload; virtual; final;
    function sendEmptyMessage(para1: jint): jboolean; overload; virtual; final;
    function sendEmptyMessageDelayed(para1: jint; para2: jlong): jboolean; overload; virtual; final;
    function sendEmptyMessageAtTime(para1: jint; para2: jlong): jboolean; overload; virtual; final;
    function sendMessageDelayed(para1: AOMessage; para2: jlong): jboolean; overload; virtual; final;
    function sendMessageAtTime(para1: AOMessage; para2: jlong): jboolean; overload; virtual;
    function sendMessageAtFrontOfQueue(para1: AOMessage): jboolean; overload; virtual; final;
    procedure removeMessages(para1: jint); overload; virtual; final;
    procedure removeMessages(para1: jint; para2: JLObject); overload; virtual; final;
    procedure removeCallbacksAndMessages(para1: JLObject); overload; virtual; final;
    function hasMessages(para1: jint): jboolean; overload; virtual; final;
    function hasMessages(para1: jint; para2: JLObject): jboolean; overload; virtual; final;
    function getLooper(): AOLooper; overload; virtual; final;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual; final;
    function toString(): JLString; overload; virtual;
  end;

  AOIBinder = interface external 'android.os' name 'IBinder' 
    type
      InnerDeathRecipient = interface;
      Arr1InnerDeathRecipient = array of InnerDeathRecipient;
      Arr2InnerDeathRecipient = array of Arr1InnerDeathRecipient;
      Arr3InnerDeathRecipient = array of Arr2InnerDeathRecipient;
      InnerDeathRecipient = interface external 'android.os' name 'DeathRecipient' 
        procedure binderDied(); overload;
      end;

    const
      DUMP_TRANSACTION = 1598311760;
      FIRST_CALL_TRANSACTION = 1;
      FLAG_ONEWAY = 1;
      INTERFACE_TRANSACTION = 1598968902;
      LAST_CALL_TRANSACTION = 16777215;
      LIKE_TRANSACTION = 1598835019;
      PING_TRANSACTION = 1599098439;
      TWEET_TRANSACTION = 1599362900;
    function getInterfaceDescriptor(): JLString; overload;  // throws android.os.RemoteException
    function pingBinder(): jboolean; overload;
    function isBinderAlive(): jboolean; overload;
    function queryLocalInterface(para1: JLString): AOIInterface; overload;
    procedure dump(para1: JIFileDescriptor; para2: Arr1JLString); overload;  // throws android.os.RemoteException
    procedure dump(para1: JIFileDescriptor; var para2: array of JLString); overload;  // throws android.os.RemoteException
    procedure dumpAsync(para1: JIFileDescriptor; para2: Arr1JLString); overload;  // throws android.os.RemoteException
    procedure dumpAsync(para1: JIFileDescriptor; var para2: array of JLString); overload;  // throws android.os.RemoteException
    function transact(para1: jint; para2: AOParcel; para3: AOParcel; para4: jint): jboolean; overload;  // throws android.os.RemoteException
    procedure linkToDeath(para1: AOIBinder.InnerDeathRecipient; para2: jint); overload;  // throws android.os.RemoteException
    function unlinkToDeath(para1: AOIBinder.InnerDeathRecipient; para2: jint): jboolean; overload;
  end;

  AOIInterface = interface external 'android.os' name 'IInterface' 
    function asBinder(): AOIBinder; overload;
  end;

  AOLooper = class sealed external 'android.os' name 'Looper' (JLObject)
  public
    class procedure prepare(); static; overload;
    class procedure prepareMainLooper(); static; overload;
    class function getMainLooper(): AOLooper; static; overload;
    class procedure loop(); static; overload;
    class function myLooper(): AOLooper; static; overload;
    procedure setMessageLogging(para1: AUPrinter); overload; virtual;
    class function myQueue(): AOMessageQueue; static; overload;
    procedure quit(); overload; virtual;
    procedure quitSafely(); overload; virtual;
    function getThread(): JLThread; overload; virtual;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AOMemoryFile = class external 'android.os' name 'MemoryFile' (JLObject)
  public
    constructor create(para1: JLString; para2: jint); overload;  // throws java.io.IOException
    procedure close(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    function length(): jint; overload; virtual;
    function isPurgingAllowed(): jboolean; overload; virtual;
    function allowPurging(para1: jboolean): jboolean; overload; virtual;  // throws java.io.IOException
    function getInputStream(): JIInputStream; overload; virtual;
    function getOutputStream(): JIOutputStream; overload; virtual;
    function readBytes(para1: Arr1jbyte; para2: jint; para3: jint; para4: jint): jint; overload; virtual;  // throws java.io.IOException
    function readBytes(var para1: array of jbyte; para2: jint; para3: jint; para4: jint): jint; overload; virtual;  // throws java.io.IOException
    procedure writeBytes(para1: Arr1jbyte; para2: jint; para3: jint; para4: jint); overload; virtual;  // throws java.io.IOException
    procedure writeBytes(var para1: array of jbyte; para2: jint; para3: jint; para4: jint); overload; virtual;  // throws java.io.IOException
  end;

  AOMessageQueue = class sealed external 'android.os' name 'MessageQueue' (JLObject)
  public
    type
      InnerIdleHandler = interface;
      Arr1InnerIdleHandler = array of InnerIdleHandler;
      Arr2InnerIdleHandler = array of Arr1InnerIdleHandler;
      Arr3InnerIdleHandler = array of Arr2InnerIdleHandler;
      InnerIdleHandler = interface external 'android.os' name 'IdleHandler' 
        function queueIdle(): jboolean; overload;
      end;

  public
    procedure addIdleHandler(para1: AOMessageQueue.InnerIdleHandler); overload; virtual;
    procedure removeIdleHandler(para1: AOMessageQueue.InnerIdleHandler); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AOPowerManager = class sealed external 'android.os' name 'PowerManager' (JLObject)
  public
    type
      InnerWakeLock = class;
      Arr1InnerWakeLock = array of InnerWakeLock;
      Arr2InnerWakeLock = array of Arr1InnerWakeLock;
      Arr3InnerWakeLock = array of Arr2InnerWakeLock;
      InnerWakeLock = class sealed external 'android.os' name 'WakeLock' 
      end;

  public
    const
      ACQUIRE_CAUSES_WAKEUP = 268435456;
      ACTION_POWER_SAVE_MODE_CHANGED = 'android.os.action.POWER_SAVE_MODE_CHANGED';
      FULL_WAKE_LOCK = 26 deprecated;
      ON_AFTER_RELEASE = 536870912;
      PARTIAL_WAKE_LOCK = 1;
      PROXIMITY_SCREEN_OFF_WAKE_LOCK = 32;
      RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY = 1;
      SCREEN_BRIGHT_WAKE_LOCK = 10 deprecated;
      SCREEN_DIM_WAKE_LOCK = 6 deprecated;
  public
    function newWakeLock(para1: jint; para2: JLString): AOPowerManager.InnerWakeLock; overload; virtual;
    function isWakeLockLevelSupported(para1: jint): jboolean; overload; virtual;
    function isScreenOn(): jboolean; overload; virtual;
    function isInteractive(): jboolean; overload; virtual;
    procedure reboot(para1: JLString); overload; virtual;
    function isPowerSaveMode(): jboolean; overload; virtual;
  end;

  AOProcess = class external 'android.os' name 'Process' (JLObject)
  public
    const
      FIRST_APPLICATION_UID = 10000;
      LAST_APPLICATION_UID = 19999;
      PHONE_UID = 1001;
      SIGNAL_KILL = 9;
      SIGNAL_QUIT = 3;
      SIGNAL_USR1 = 10;
      SYSTEM_UID = 1000;
      THREAD_PRIORITY_AUDIO = -16;
      THREAD_PRIORITY_BACKGROUND = 10;
      THREAD_PRIORITY_DEFAULT = 0;
      THREAD_PRIORITY_DISPLAY = -4;
      THREAD_PRIORITY_FOREGROUND = -2;
      THREAD_PRIORITY_LESS_FAVORABLE = 1;
      THREAD_PRIORITY_LOWEST = 19;
      THREAD_PRIORITY_MORE_FAVORABLE = -1;
      THREAD_PRIORITY_URGENT_AUDIO = -19;
      THREAD_PRIORITY_URGENT_DISPLAY = -8;
  public
    constructor create(); overload;
    class function getElapsedCpuTime(): jlong; static; overload; final;
    class function myPid(): jint; static; overload; final;
    class function myTid(): jint; static; overload; final;
    class function myUid(): jint; static; overload; final;
    class function myUserHandle(): AOUserHandle; static; overload; final;
    class function getUidForName(para1: JLString): jint; static; overload; final;
    class function getGidForName(para1: JLString): jint; static; overload; final;
    class procedure setThreadPriority(para1: jint; para2: jint); static; overload; final;  // throws java.lang.IllegalArgumentException, java.lang.SecurityException
    class procedure setThreadPriority(para1: jint); static; overload; final;  // throws java.lang.IllegalArgumentException, java.lang.SecurityException
    class function getThreadPriority(para1: jint): jint; static; overload; final;  // throws java.lang.IllegalArgumentException
    class function supportsProcesses(): jboolean; static; overload; final;
    class procedure killProcess(para1: jint); static; overload; final;
    class procedure sendSignal(para1: jint; para2: jint); static; overload; final;
  end;

  AORecoverySystem = class external 'android.os' name 'RecoverySystem' (JLObject)
  public
    type
      InnerProgressListener = interface;
      Arr1InnerProgressListener = array of InnerProgressListener;
      Arr2InnerProgressListener = array of Arr1InnerProgressListener;
      Arr3InnerProgressListener = array of Arr2InnerProgressListener;
      InnerProgressListener = interface external 'android.os' name 'ProgressListener' 
        procedure onProgress(para1: jint); overload;
      end;

  public
    constructor create(); overload;
    class procedure verifyPackage(para1: JIFile; para2: AORecoverySystem.InnerProgressListener; para3: JIFile); static; overload;  // throws java.io.IOException, java.security.GeneralSecurityException
    class procedure installPackage(para1: ACContext; para2: JIFile); static; overload;  // throws java.io.IOException
    class procedure rebootWipeUserData(para1: ACContext); static; overload;  // throws java.io.IOException
    class procedure rebootWipeCache(para1: ACContext); static; overload;  // throws java.io.IOException
  end;

  AORemoteCallbackList = class external 'android.os' name 'RemoteCallbackList' (JLObject)
  public
    constructor create(); overload;
    function register(para1: AOIInterface): jboolean; overload; virtual;
    function register(para1: AOIInterface; para2: JLObject): jboolean; overload; virtual;
    function unregister(para1: AOIInterface): jboolean; overload; virtual;
    procedure kill(); overload; virtual;
    procedure onCallbackDied(para1: AOIInterface); overload; virtual;
    procedure onCallbackDied(para1: AOIInterface; para2: JLObject); overload; virtual;
    function beginBroadcast(): jint; overload; virtual;
    function getBroadcastItem(para1: jint): AOIInterface; overload; virtual;
    function getBroadcastCookie(para1: jint): JLObject; overload; virtual;
    procedure finishBroadcast(); overload; virtual;
    function getRegisteredCallbackCount(): jint; overload; virtual;
  end;

  AOStatFs = class external 'android.os' name 'StatFs' (JLObject)
  public
    constructor create(para1: JLString); overload;
    procedure restat(para1: JLString); overload; virtual;
    function getBlockSize(): jint; overload; virtual;
    function getBlockSizeLong(): jlong; overload; virtual;
    function getBlockCount(): jint; overload; virtual;
    function getBlockCountLong(): jlong; overload; virtual;
    function getFreeBlocks(): jint; overload; virtual;
    function getFreeBlocksLong(): jlong; overload; virtual;
    function getFreeBytes(): jlong; overload; virtual;
    function getAvailableBlocks(): jint; overload; virtual;
    function getAvailableBlocksLong(): jlong; overload; virtual;
    function getAvailableBytes(): jlong; overload; virtual;
    function getTotalBytes(): jlong; overload; virtual;
  end;

  AOStrictMode = class sealed external 'android.os' name 'StrictMode' (JLObject)
  public
    type
      InnerVmPolicy = class;
      Arr1InnerVmPolicy = array of InnerVmPolicy;
      Arr2InnerVmPolicy = array of Arr1InnerVmPolicy;
      Arr3InnerVmPolicy = array of Arr2InnerVmPolicy;
      InnerThreadPolicy = class;
      Arr1InnerThreadPolicy = array of InnerThreadPolicy;
      Arr2InnerThreadPolicy = array of Arr1InnerThreadPolicy;
      Arr3InnerThreadPolicy = array of Arr2InnerThreadPolicy;
      InnerVmPolicy = class sealed external 'android.os' name 'VmPolicy' (JLObject)
      public
        type
          InnerBuilder = class;
          Arr1InnerBuilder = array of InnerBuilder;
          Arr2InnerBuilder = array of Arr1InnerBuilder;
          Arr3InnerBuilder = array of Arr2InnerBuilder;
          InnerBuilder = class sealed external 'android.os' name 'Builder' (JLObject)
          public
            constructor create(); overload;
            constructor create(para1: AOStrictMode.InnerVmPolicy); overload;
            function setClassInstanceLimit(para1: JLClass; para2: jint): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function detectActivityLeaks(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function detectAll(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function detectLeakedSqlLiteObjects(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function detectLeakedClosableObjects(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function detectLeakedRegistrationObjects(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function detectFileUriExposure(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function penaltyDeath(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function penaltyLog(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function penaltyDropBox(): AOStrictMode.InnerVmPolicy.InnerBuilder; overload; virtual;
            function build(): AOStrictMode.InnerVmPolicy; overload; virtual;
          end;

      public
        final class var
          fLAX: AOStrictMode.InnerVmPolicy; external name 'LAX';
      public
        function toString(): JLString; overload; virtual;
      end;

      InnerThreadPolicy = class sealed external 'android.os' name 'ThreadPolicy' (JLObject)
      public
        type
          InnerBuilder = class;
          Arr1InnerBuilder = array of InnerBuilder;
          Arr2InnerBuilder = array of Arr1InnerBuilder;
          Arr3InnerBuilder = array of Arr2InnerBuilder;
          InnerBuilder = class sealed external 'android.os' name 'Builder' (JLObject)
          public
            constructor create(); overload;
            constructor create(para1: AOStrictMode.InnerThreadPolicy); overload;
            function detectAll(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function permitAll(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function detectNetwork(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function permitNetwork(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function detectDiskReads(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function permitDiskReads(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function detectCustomSlowCalls(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function permitCustomSlowCalls(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function detectDiskWrites(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function permitDiskWrites(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function penaltyDialog(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function penaltyDeath(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function penaltyDeathOnNetwork(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function penaltyFlashScreen(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function penaltyLog(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function penaltyDropBox(): AOStrictMode.InnerThreadPolicy.InnerBuilder; overload; virtual;
            function build(): AOStrictMode.InnerThreadPolicy; overload; virtual;
          end;

      public
        final class var
          fLAX: AOStrictMode.InnerThreadPolicy; external name 'LAX';
      public
        function toString(): JLString; overload; virtual;
      end;

  public
    class procedure setThreadPolicy(para1: AOStrictMode.InnerThreadPolicy); static; overload;
    class function getThreadPolicy(): AOStrictMode.InnerThreadPolicy; static; overload;
    class function allowThreadDiskWrites(): AOStrictMode.InnerThreadPolicy; static; overload;
    class function allowThreadDiskReads(): AOStrictMode.InnerThreadPolicy; static; overload;
    class procedure setVmPolicy(para1: AOStrictMode.InnerVmPolicy); static; overload;
    class function getVmPolicy(): AOStrictMode.InnerVmPolicy; static; overload;
    class procedure enableDefaults(); static; overload;
    class procedure noteSlowCall(para1: JLString); static; overload;
  end;

  AOSystemClock = class sealed external 'android.os' name 'SystemClock' (JLObject)
  public
    class procedure sleep(para1: jlong); static; overload;
    class function setCurrentTimeMillis(para1: jlong): jboolean; static; overload;
    class function uptimeMillis(): jlong; static; overload;
    class function elapsedRealtime(): jlong; static; overload;
    class function elapsedRealtimeNanos(): jlong; static; overload;
    class function currentThreadTimeMillis(): jlong; static; overload;
  end;

  AOTokenWatcher = class abstract external 'android.os' name 'TokenWatcher' (JLObject)
  public
    constructor create(para1: AOHandler; para2: JLString); overload;
    procedure acquired(); overload; virtual; abstract;
    procedure released(); overload; virtual; abstract;
    procedure acquire(para1: AOIBinder; para2: JLString); overload; virtual;
    procedure cleanup(para1: AOIBinder; para2: jboolean); overload; virtual;
    procedure release(para1: AOIBinder); overload; virtual;
    function isAcquired(): jboolean; overload; virtual;
    procedure dump(); overload; virtual;
    procedure dump(para1: JIPrintWriter); overload; virtual;
  end;

  AOVibrator = class abstract external 'android.os' name 'Vibrator' (JLObject)
  public
    function hasVibrator(): jboolean; overload; virtual; abstract;
    procedure vibrate(para1: jlong); overload; virtual;
    procedure vibrate(para1: jlong; para2: AMAudioAttributes); overload; virtual;
    procedure vibrate(para1: Arr1jlong; para2: jint); overload; virtual;
    procedure vibrate(var para1: array of jlong; para2: jint); overload; virtual;
    procedure vibrate(para1: Arr1jlong; para2: jint; para3: AMAudioAttributes); overload; virtual;
    procedure vibrate(var para1: array of jlong; para2: jint; para3: AMAudioAttributes); overload; virtual;
    procedure cancel(); overload; virtual; abstract;
  end;

  AOSOnObbStateChangeListener = class abstract external 'android.os.storage' name 'OnObbStateChangeListener' (JLObject)
  public
    const
      ERROR_ALREADY_MOUNTED = 24;
      ERROR_COULD_NOT_MOUNT = 21;
      ERROR_COULD_NOT_UNMOUNT = 22;
      ERROR_INTERNAL = 20;
      ERROR_NOT_MOUNTED = 23;
      ERROR_PERMISSION_DENIED = 25;
      MOUNTED = 1;
      UNMOUNTED = 2;
  public
    constructor create(); overload;
    procedure onObbStateChange(para1: JLString; para2: jint); overload; virtual;
  end;

  AOSStorageManager = class external 'android.os.storage' name 'StorageManager' (JLObject)
  public
    function mountObb(para1: JLString; para2: JLString; para3: AOSOnObbStateChangeListener): jboolean; overload; virtual;
    function unmountObb(para1: JLString; para2: jboolean; para3: AOSOnObbStateChangeListener): jboolean; overload; virtual;
    function isObbMounted(para1: JLString): jboolean; overload; virtual;
    function getMountedObbPath(para1: JLString): JLString; overload; virtual;
  end;

  APPreferenceManager = class external 'android.preference' name 'PreferenceManager' (JLObject)
  public
    type
      InnerOnActivityDestroyListener = interface;
      Arr1InnerOnActivityDestroyListener = array of InnerOnActivityDestroyListener;
      Arr2InnerOnActivityDestroyListener = array of Arr1InnerOnActivityDestroyListener;
      Arr3InnerOnActivityDestroyListener = array of Arr2InnerOnActivityDestroyListener;
      InnerOnActivityStopListener = interface;
      Arr1InnerOnActivityStopListener = array of InnerOnActivityStopListener;
      Arr2InnerOnActivityStopListener = array of Arr1InnerOnActivityStopListener;
      Arr3InnerOnActivityStopListener = array of Arr2InnerOnActivityStopListener;
      InnerOnActivityResultListener = interface;
      Arr1InnerOnActivityResultListener = array of InnerOnActivityResultListener;
      Arr2InnerOnActivityResultListener = array of Arr1InnerOnActivityResultListener;
      Arr3InnerOnActivityResultListener = array of Arr2InnerOnActivityResultListener;
      InnerOnActivityDestroyListener = interface external 'android.preference' name 'OnActivityDestroyListener' 
        procedure onActivityDestroy(); overload;
      end;

      InnerOnActivityStopListener = interface external 'android.preference' name 'OnActivityStopListener' 
        procedure onActivityStop(); overload;
      end;

      InnerOnActivityResultListener = interface external 'android.preference' name 'OnActivityResultListener' 
        function onActivityResult(para1: jint; para2: jint; para3: ACIntent): jboolean; overload;
      end;

  public
    const
      KEY_HAS_SET_DEFAULT_VALUES = '_has_set_default_values';
      METADATA_KEY_PREFERENCES = 'android.preference';
  public
    function createPreferenceScreen(para1: ACContext): APPreferenceScreen; overload; virtual;
    function getSharedPreferencesName(): JLString; overload; virtual;
    procedure setSharedPreferencesName(para1: JLString); overload; virtual;
    function getSharedPreferencesMode(): jint; overload; virtual;
    procedure setSharedPreferencesMode(para1: jint); overload; virtual;
    function getSharedPreferences(): ACSharedPreferences; overload; virtual;
    class function getDefaultSharedPreferences(para1: ACContext): ACSharedPreferences; static; overload;
    function findPreference(para1: JLCharSequence): APPreference; overload; virtual;
    class procedure setDefaultValues(para1: ACContext; para2: jint; para3: jboolean); static; overload;
    class procedure setDefaultValues(para1: ACContext; para2: JLString; para3: jint; para4: jint; para5: jboolean); static; overload;
  end;

  APAlarmClock = class sealed external 'android.provider' name 'AlarmClock' (JLObject)
  public
    const
      ACTION_SET_ALARM = 'android.intent.action.SET_ALARM';
      ACTION_SET_TIMER = 'android.intent.action.SET_TIMER';
      ACTION_SHOW_ALARMS = 'android.intent.action.SHOW_ALARMS';
      EXTRA_DAYS = 'android.intent.extra.alarm.DAYS';
      EXTRA_HOUR = 'android.intent.extra.alarm.HOUR';
      EXTRA_LENGTH = 'android.intent.extra.alarm.LENGTH';
      EXTRA_MESSAGE = 'android.intent.extra.alarm.MESSAGE';
      EXTRA_MINUTES = 'android.intent.extra.alarm.MINUTES';
      EXTRA_RINGTONE = 'android.intent.extra.alarm.RINGTONE';
      EXTRA_SKIP_UI = 'android.intent.extra.alarm.SKIP_UI';
      EXTRA_VIBRATE = 'android.intent.extra.alarm.VIBRATE';
      VALUE_RINGTONE_SILENT = 'silent';
  public
    constructor create(); overload;
  end;

  APBaseColumns = interface external 'android.provider' name 'BaseColumns' 
    const
      _COUNT = '_count';
      _ID = '_id';
  end;

  APOpenableColumns = interface external 'android.provider' name 'OpenableColumns' 
    const
      DISPLAY_NAME = '_display_name';
      SIZE = '_size';
  end;

  APSearchRecentSuggestions = class external 'android.provider' name 'SearchRecentSuggestions' (JLObject)
  public
    final class var
      fQUERIES_PROJECTION_1LINE: Arr1JLString; external name 'QUERIES_PROJECTION_1LINE';
      fQUERIES_PROJECTION_2LINE: Arr1JLString; external name 'QUERIES_PROJECTION_2LINE';
  public
    const
      QUERIES_PROJECTION_DATE_INDEX = 1;
      QUERIES_PROJECTION_DISPLAY1_INDEX = 3;
      QUERIES_PROJECTION_DISPLAY2_INDEX = 4;
      QUERIES_PROJECTION_QUERY_INDEX = 2;
  public
    constructor create(para1: ACContext; para2: JLString; para3: jint); overload;
    procedure saveRecentQuery(para1: JLString; para2: JLString); overload; virtual;
    procedure clearHistory(); overload; virtual;
  strict protected
    procedure truncateHistory(para1: ACContentResolver; para2: jint); overload; virtual;
  end;

  ARBaseObj = class external 'android.renderscript' name 'BaseObj' (JLObject)
  public
    procedure setName(para1: JLString); overload; virtual;
    function getName(): JLString; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    procedure destroy(); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  ARByte2 = class external 'android.renderscript' name 'Byte2' (JLObject)
  public
    var
      fx: jbyte; external name 'x';
      fy: jbyte; external name 'y';
  public
    constructor create(); overload;
    constructor create(para1: jbyte; para2: jbyte); overload;
  end;

  ARByte3 = class external 'android.renderscript' name 'Byte3' (JLObject)
  public
    var
      fx: jbyte; external name 'x';
      fy: jbyte; external name 'y';
      fz: jbyte; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jbyte; para2: jbyte; para3: jbyte); overload;
  end;

  ARByte4 = class external 'android.renderscript' name 'Byte4' (JLObject)
  public
    var
      fw: jbyte; external name 'w';
      fx: jbyte; external name 'x';
      fy: jbyte; external name 'y';
      fz: jbyte; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jbyte; para2: jbyte; para3: jbyte; para4: jbyte); overload;
  end;

  ARDouble2 = class external 'android.renderscript' name 'Double2' (JLObject)
  public
    var
      fx: jdouble; external name 'x';
      fy: jdouble; external name 'y';
  public
    constructor create(); overload;
    constructor create(para1: jdouble; para2: jdouble); overload;
  end;

  ARDouble3 = class external 'android.renderscript' name 'Double3' (JLObject)
  public
    var
      fx: jdouble; external name 'x';
      fy: jdouble; external name 'y';
      fz: jdouble; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jdouble; para2: jdouble; para3: jdouble); overload;
  end;

  ARDouble4 = class external 'android.renderscript' name 'Double4' (JLObject)
  public
    var
      fw: jdouble; external name 'w';
      fx: jdouble; external name 'x';
      fy: jdouble; external name 'y';
      fz: jdouble; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jdouble; para2: jdouble; para3: jdouble; para4: jdouble); overload;
  end;

  ARFieldPacker = class external 'android.renderscript' name 'FieldPacker' (JLObject)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    procedure align(para1: jint); overload; virtual;
    procedure subalign(para1: jint); overload; virtual;
    procedure reset(); overload; virtual;
    procedure reset(para1: jint); overload; virtual;
    procedure skip(para1: jint); overload; virtual;
    procedure addI8(para1: jbyte); overload; virtual;
    function subI8(): jbyte; overload; virtual;
    procedure addI16(para1: jshort); overload; virtual;
    function subI16(): jshort; overload; virtual;
    procedure addI32(para1: jint); overload; virtual;
    function subI32(): jint; overload; virtual;
    procedure addI64(para1: jlong); overload; virtual;
    function subI64(): jlong; overload; virtual;
    procedure addU8(para1: jshort); overload; virtual;
    procedure addU16(para1: jint); overload; virtual;
    procedure addU32(para1: jlong); overload; virtual;
    procedure addU64(para1: jlong); overload; virtual;
    procedure addF32(para1: jfloat); overload; virtual;
    function subF32(): jfloat; overload; virtual;
    procedure addF64(para1: jdouble); overload; virtual;
    function subF64(): jdouble; overload; virtual;
    procedure addObj(para1: ARBaseObj); overload; virtual;
    procedure addF32(para1: ARFloat2); overload; virtual;
    procedure addF32(para1: ARFloat3); overload; virtual;
    procedure addF32(para1: ARFloat4); overload; virtual;
    procedure addF64(para1: ARDouble2); overload; virtual;
    procedure addF64(para1: ARDouble3); overload; virtual;
    procedure addF64(para1: ARDouble4); overload; virtual;
    procedure addI8(para1: ARByte2); overload; virtual;
    procedure addI8(para1: ARByte3); overload; virtual;
    procedure addI8(para1: ARByte4); overload; virtual;
    procedure addU8(para1: ARShort2); overload; virtual;
    procedure addU8(para1: ARShort3); overload; virtual;
    procedure addU8(para1: ARShort4); overload; virtual;
    procedure addI16(para1: ARShort2); overload; virtual;
    procedure addI16(para1: ARShort3); overload; virtual;
    procedure addI16(para1: ARShort4); overload; virtual;
    procedure addU16(para1: ARInt2); overload; virtual;
    procedure addU16(para1: ARInt3); overload; virtual;
    procedure addU16(para1: ARInt4); overload; virtual;
    procedure addI32(para1: ARInt2); overload; virtual;
    procedure addI32(para1: ARInt3); overload; virtual;
    procedure addI32(para1: ARInt4); overload; virtual;
    procedure addU32(para1: ARLong2); overload; virtual;
    procedure addU32(para1: ARLong3); overload; virtual;
    procedure addU32(para1: ARLong4); overload; virtual;
    procedure addI64(para1: ARLong2); overload; virtual;
    procedure addI64(para1: ARLong3); overload; virtual;
    procedure addI64(para1: ARLong4); overload; virtual;
    procedure addU64(para1: ARLong2); overload; virtual;
    procedure addU64(para1: ARLong3); overload; virtual;
    procedure addU64(para1: ARLong4); overload; virtual;
    function subFloat2(): ARFloat2; overload; virtual;
    function subFloat3(): ARFloat3; overload; virtual;
    function subFloat4(): ARFloat4; overload; virtual;
    function subDouble2(): ARDouble2; overload; virtual;
    function subDouble3(): ARDouble3; overload; virtual;
    function subDouble4(): ARDouble4; overload; virtual;
    function subByte2(): ARByte2; overload; virtual;
    function subByte3(): ARByte3; overload; virtual;
    function subByte4(): ARByte4; overload; virtual;
    function subShort2(): ARShort2; overload; virtual;
    function subShort3(): ARShort3; overload; virtual;
    function subShort4(): ARShort4; overload; virtual;
    function subInt2(): ARInt2; overload; virtual;
    function subInt3(): ARInt3; overload; virtual;
    function subInt4(): ARInt4; overload; virtual;
    function subLong2(): ARLong2; overload; virtual;
    function subLong3(): ARLong3; overload; virtual;
    function subLong4(): ARLong4; overload; virtual;
    procedure addMatrix(para1: ARMatrix4f); overload; virtual;
    function subMatrix4f(): ARMatrix4f; overload; virtual;
    procedure addMatrix(para1: ARMatrix3f); overload; virtual;
    function subMatrix3f(): ARMatrix3f; overload; virtual;
    procedure addMatrix(para1: ARMatrix2f); overload; virtual;
    function subMatrix2f(): ARMatrix2f; overload; virtual;
    procedure addBoolean(para1: jboolean); overload; virtual;
    function subBoolean(): jboolean; overload; virtual;
    function getData(): Arr1jbyte; overload; virtual; final;
  end;

  ARFloat2 = class external 'android.renderscript' name 'Float2' (JLObject)
  public
    var
      fx: jfloat; external name 'x';
      fy: jfloat; external name 'y';
  public
    constructor create(); overload;
    constructor create(para1: jfloat; para2: jfloat); overload;
  end;

  ARFloat3 = class external 'android.renderscript' name 'Float3' (JLObject)
  public
    var
      fx: jfloat; external name 'x';
      fy: jfloat; external name 'y';
      fz: jfloat; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat); overload;
  end;

  ARFloat4 = class external 'android.renderscript' name 'Float4' (JLObject)
  public
    var
      fw: jfloat; external name 'w';
      fx: jfloat; external name 'x';
      fy: jfloat; external name 'y';
      fz: jfloat; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
  end;

  ARInt2 = class external 'android.renderscript' name 'Int2' (JLObject)
  public
    var
      fx: jint; external name 'x';
      fy: jint; external name 'y';
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: jint); overload;
  end;

  ARInt3 = class external 'android.renderscript' name 'Int3' (JLObject)
  public
    var
      fx: jint; external name 'x';
      fy: jint; external name 'y';
      fz: jint; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: jint; para3: jint); overload;
  end;

  ARInt4 = class external 'android.renderscript' name 'Int4' (JLObject)
  public
    var
      fw: jint; external name 'w';
      fx: jint; external name 'x';
      fy: jint; external name 'y';
      fz: jint; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint); overload;
  end;

  ARLong2 = class external 'android.renderscript' name 'Long2' (JLObject)
  public
    var
      fx: jlong; external name 'x';
      fy: jlong; external name 'y';
  public
    constructor create(); overload;
    constructor create(para1: jlong; para2: jlong); overload;
  end;

  ARLong3 = class external 'android.renderscript' name 'Long3' (JLObject)
  public
    var
      fx: jlong; external name 'x';
      fy: jlong; external name 'y';
      fz: jlong; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jlong; para2: jlong; para3: jlong); overload;
  end;

  ARLong4 = class external 'android.renderscript' name 'Long4' (JLObject)
  public
    var
      fw: jlong; external name 'w';
      fx: jlong; external name 'x';
      fy: jlong; external name 'y';
      fz: jlong; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jlong; para2: jlong; para3: jlong; para4: jlong); overload;
  end;

  ARMatrix2f = class external 'android.renderscript' name 'Matrix2f' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: Arr1jfloat); overload;
    constructor create(const para1: array of jfloat); overload;
    function getArray(): Arr1jfloat; overload; virtual;
    function get(para1: jint; para2: jint): jfloat; overload; virtual;
    procedure &set(para1: jint; para2: jint; para3: jfloat); overload; virtual;
    procedure loadIdentity(); overload; virtual;
    procedure load(para1: ARMatrix2f); overload; virtual;
    procedure loadRotate(para1: jfloat); overload; virtual;
    procedure loadScale(para1: jfloat; para2: jfloat); overload; virtual;
    procedure loadMultiply(para1: ARMatrix2f; para2: ARMatrix2f); overload; virtual;
    procedure multiply(para1: ARMatrix2f); overload; virtual;
    procedure rotate(para1: jfloat); overload; virtual;
    procedure scale(para1: jfloat; para2: jfloat); overload; virtual;
    procedure transpose(); overload; virtual;
  end;

  ARMatrix3f = class external 'android.renderscript' name 'Matrix3f' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: Arr1jfloat); overload;
    constructor create(const para1: array of jfloat); overload;
    function getArray(): Arr1jfloat; overload; virtual;
    function get(para1: jint; para2: jint): jfloat; overload; virtual;
    procedure &set(para1: jint; para2: jint; para3: jfloat); overload; virtual;
    procedure loadIdentity(); overload; virtual;
    procedure load(para1: ARMatrix3f); overload; virtual;
    procedure loadRotate(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure loadRotate(para1: jfloat); overload; virtual;
    procedure loadScale(para1: jfloat; para2: jfloat); overload; virtual;
    procedure loadScale(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    procedure loadTranslate(para1: jfloat; para2: jfloat); overload; virtual;
    procedure loadMultiply(para1: ARMatrix3f; para2: ARMatrix3f); overload; virtual;
    procedure multiply(para1: ARMatrix3f); overload; virtual;
    procedure rotate(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure rotate(para1: jfloat); overload; virtual;
    procedure scale(para1: jfloat; para2: jfloat); overload; virtual;
    procedure scale(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    procedure translate(para1: jfloat; para2: jfloat); overload; virtual;
    procedure transpose(); overload; virtual;
  end;

  ARMatrix4f = class external 'android.renderscript' name 'Matrix4f' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: Arr1jfloat); overload;
    constructor create(const para1: array of jfloat); overload;
    function getArray(): Arr1jfloat; overload; virtual;
    function get(para1: jint; para2: jint): jfloat; overload; virtual;
    procedure &set(para1: jint; para2: jint; para3: jfloat); overload; virtual;
    procedure loadIdentity(); overload; virtual;
    procedure load(para1: ARMatrix4f); overload; virtual;
    procedure loadRotate(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure loadScale(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    procedure loadTranslate(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    procedure loadMultiply(para1: ARMatrix4f; para2: ARMatrix4f); overload; virtual;
    procedure loadOrtho(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); overload; virtual;
    procedure loadOrthoWindow(para1: jint; para2: jint); overload; virtual;
    procedure loadFrustum(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); overload; virtual;
    procedure loadPerspective(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure loadProjectionNormalized(para1: jint; para2: jint); overload; virtual;
    procedure multiply(para1: ARMatrix4f); overload; virtual;
    procedure rotate(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure scale(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    procedure translate(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    function inverse(): jboolean; overload; virtual;
    function inverseTranspose(): jboolean; overload; virtual;
    procedure transpose(); overload; virtual;
  end;

  ARShort2 = class external 'android.renderscript' name 'Short2' (JLObject)
  public
    var
      fx: jshort; external name 'x';
      fy: jshort; external name 'y';
  public
    constructor create(); overload;
    constructor create(para1: jshort; para2: jshort); overload;
  end;

  ARShort3 = class external 'android.renderscript' name 'Short3' (JLObject)
  public
    var
      fx: jshort; external name 'x';
      fy: jshort; external name 'y';
      fz: jshort; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jshort; para2: jshort; para3: jshort); overload;
  end;

  ARShort4 = class external 'android.renderscript' name 'Short4' (JLObject)
  public
    var
      fw: jshort; external name 'w';
      fx: jshort; external name 'x';
      fy: jshort; external name 'y';
      fz: jshort; external name 'z';
  public
    constructor create(); overload;
    constructor create(para1: jshort; para2: jshort; para3: jshort; para4: jshort); overload;
  end;

  ASElement = class external 'android.sax' name 'Element' (JLObject)
  public
    function getChild(para1: JLString): ASElement; overload; virtual;
    function getChild(para1: JLString; para2: JLString): ASElement; overload; virtual;
    function requireChild(para1: JLString): ASElement; overload; virtual;
    function requireChild(para1: JLString; para2: JLString): ASElement; overload; virtual;
    procedure setElementListener(para1: ASElementListener); overload; virtual;
    procedure setTextElementListener(para1: ASTextElementListener); overload; virtual;
    procedure setStartElementListener(para1: ASStartElementListener); overload; virtual;
    procedure setEndElementListener(para1: ASEndElementListener); overload; virtual;
    procedure setEndTextElementListener(para1: ASEndTextElementListener); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ASEndElementListener = interface external 'android.sax' name 'EndElementListener' 
    procedure &end(); overload;
  end;

  ASEndTextElementListener = interface external 'android.sax' name 'EndTextElementListener' 
    procedure &end(para1: JLString); overload;
  end;

  ASStartElementListener = interface external 'android.sax' name 'StartElementListener' 
    procedure start(para1: OXSAttributes); overload;
  end;

  ASKeyChain = class sealed external 'android.security' name 'KeyChain' (JLObject)
  public
    const
      ACTION_STORAGE_CHANGED = 'android.security.STORAGE_CHANGED';
      EXTRA_CERTIFICATE = 'CERT';
      EXTRA_NAME = 'name';
      EXTRA_PKCS12 = 'PKCS12';
  public
    constructor create(); overload;
    class function createInstallIntent(): ACIntent; static; overload;
    class procedure choosePrivateKeyAlias(para1: AAActivity; para2: ASKeyChainAliasCallback; para3: Arr1JLString; para4: Arr1JSPrincipal; para5: JLString; para6: jint; para7: JLString); static; overload;
    class procedure choosePrivateKeyAlias(para1: AAActivity; para2: ASKeyChainAliasCallback; var para3: array of JLString; var para4: array of JSPrincipal; para5: JLString; para6: jint; para7: JLString); static; overload;
    class function getPrivateKey(para1: ACContext; para2: JLString): JSPrivateKey; static; overload;  // throws android.security.KeyChainException, java.lang.InterruptedException
    class function getCertificateChain(para1: ACContext; para2: JLString): Arr1JSCX509Certificate; static; overload;  // throws android.security.KeyChainException, java.lang.InterruptedException
    class function isKeyAlgorithmSupported(para1: JLString): jboolean; static; overload;
    class function isBoundKeyAlgorithm(para1: JLString): jboolean; static; overload;
  end;

  ASKeyChainAliasCallback = interface external 'android.security' name 'KeyChainAliasCallback' 
    procedure alias(para1: JLString); overload;
  end;

  ASRecognitionListener = interface external 'android.speech' name 'RecognitionListener' 
    procedure onReadyForSpeech(para1: AOBundle); overload;
    procedure onBeginningOfSpeech(); overload;
    procedure onRmsChanged(para1: jfloat); overload;
    procedure onBufferReceived(para1: Arr1jbyte); overload;
    procedure onBufferReceived(var para1: array of jbyte); overload;
    procedure onEndOfSpeech(); overload;
    procedure onError(para1: jint); overload;
    procedure onResults(para1: AOBundle); overload;
    procedure onPartialResults(para1: AOBundle); overload;
    procedure onEvent(para1: jint; para2: AOBundle); overload;
  end;

  ASRecognizerIntent = class external 'android.speech' name 'RecognizerIntent' (JLObject)
  public
    const
      ACTION_GET_LANGUAGE_DETAILS = 'android.speech.action.GET_LANGUAGE_DETAILS';
      ACTION_RECOGNIZE_SPEECH = 'android.speech.action.RECOGNIZE_SPEECH';
      ACTION_VOICE_SEARCH_HANDS_FREE = 'android.speech.action.VOICE_SEARCH_HANDS_FREE';
      ACTION_WEB_SEARCH = 'android.speech.action.WEB_SEARCH';
      DETAILS_META_DATA = 'android.speech.DETAILS';
      EXTRA_CALLING_PACKAGE = 'calling_package';
      EXTRA_CONFIDENCE_SCORES = 'android.speech.extra.CONFIDENCE_SCORES';
      EXTRA_LANGUAGE = 'android.speech.extra.LANGUAGE';
      EXTRA_LANGUAGE_MODEL = 'android.speech.extra.LANGUAGE_MODEL';
      EXTRA_LANGUAGE_PREFERENCE = 'android.speech.extra.LANGUAGE_PREFERENCE';
      EXTRA_MAX_RESULTS = 'android.speech.extra.MAX_RESULTS';
      EXTRA_ONLY_RETURN_LANGUAGE_PREFERENCE = 'android.speech.extra.ONLY_RETURN_LANGUAGE_PREFERENCE';
      EXTRA_ORIGIN = 'android.speech.extra.ORIGIN';
      EXTRA_PARTIAL_RESULTS = 'android.speech.extra.PARTIAL_RESULTS';
      EXTRA_PROMPT = 'android.speech.extra.PROMPT';
      EXTRA_RESULTS = 'android.speech.extra.RESULTS';
      EXTRA_RESULTS_PENDINGINTENT = 'android.speech.extra.RESULTS_PENDINGINTENT';
      EXTRA_RESULTS_PENDINGINTENT_BUNDLE = 'android.speech.extra.RESULTS_PENDINGINTENT_BUNDLE';
      EXTRA_SECURE = 'android.speech.extras.EXTRA_SECURE';
      EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS = 'android.speech.extras.SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS';
      EXTRA_SPEECH_INPUT_MINIMUM_LENGTH_MILLIS = 'android.speech.extras.SPEECH_INPUT_MINIMUM_LENGTH_MILLIS';
      EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS = 'android.speech.extras.SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS';
      EXTRA_SUPPORTED_LANGUAGES = 'android.speech.extra.SUPPORTED_LANGUAGES';
      EXTRA_WEB_SEARCH_ONLY = 'android.speech.extra.WEB_SEARCH_ONLY';
      LANGUAGE_MODEL_FREE_FORM = 'free_form';
      LANGUAGE_MODEL_WEB_SEARCH = 'web_search';
      RESULT_AUDIO_ERROR = 5;
      RESULT_CLIENT_ERROR = 2;
      RESULT_NETWORK_ERROR = 4;
      RESULT_NO_MATCH = 1;
      RESULT_SERVER_ERROR = 3;
  public
    class function getVoiceDetailsIntent(para1: ACContext): ACIntent; static; overload; final;
  end;

  ASRecognizerResultsIntent = class external 'android.speech' name 'RecognizerResultsIntent' (JLObject)
  public
    const
      ACTION_VOICE_SEARCH_RESULTS = 'android.speech.action.VOICE_SEARCH_RESULTS';
      EXTRA_VOICE_SEARCH_RESULT_HTML = 'android.speech.extras.VOICE_SEARCH_RESULT_HTML';
      EXTRA_VOICE_SEARCH_RESULT_HTML_BASE_URLS = 'android.speech.extras.VOICE_SEARCH_RESULT_HTML_BASE_URLS';
      EXTRA_VOICE_SEARCH_RESULT_HTTP_HEADERS = 'android.speech.extras.EXTRA_VOICE_SEARCH_RESULT_HTTP_HEADERS';
      EXTRA_VOICE_SEARCH_RESULT_STRINGS = 'android.speech.extras.VOICE_SEARCH_RESULT_STRINGS';
      EXTRA_VOICE_SEARCH_RESULT_URLS = 'android.speech.extras.VOICE_SEARCH_RESULT_URLS';
      URI_SCHEME_INLINE = 'inline';
  end;

  ASSpeechRecognizer = class external 'android.speech' name 'SpeechRecognizer' (JLObject)
  public
    const
      CONFIDENCE_SCORES = 'confidence_scores';
      ERROR_AUDIO = 3;
      ERROR_CLIENT = 5;
      ERROR_INSUFFICIENT_PERMISSIONS = 9;
      ERROR_NETWORK = 2;
      ERROR_NETWORK_TIMEOUT = 1;
      ERROR_NO_MATCH = 7;
      ERROR_RECOGNIZER_BUSY = 8;
      ERROR_SERVER = 4;
      ERROR_SPEECH_TIMEOUT = 6;
      RESULTS_RECOGNITION = 'results_recognition';
  public
    class function isRecognitionAvailable(para1: ACContext): jboolean; static; overload;
    class function createSpeechRecognizer(para1: ACContext): ASSpeechRecognizer; static; overload;
    class function createSpeechRecognizer(para1: ACContext; para2: ACComponentName): ASSpeechRecognizer; static; overload;
    procedure setRecognitionListener(para1: ASRecognitionListener); overload; virtual;
    procedure startListening(para1: ACIntent); overload; virtual;
    procedure stopListening(); overload; virtual;
    procedure cancel(); overload; virtual;
    procedure destroy(); overload; virtual;
  end;

  ASTSynthesisCallback = interface external 'android.speech.tts' name 'SynthesisCallback' 
    function getMaxBufferSize(): jint; overload;
    function start(para1: jint; para2: jint; para3: jint): jint; overload;
    function audioAvailable(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload;
    function audioAvailable(var para1: array of jbyte; para2: jint; para3: jint): jint; overload;
    function done(): jint; overload;
    procedure error(); overload;
    procedure error(para1: jint); overload;
    function hasStarted(): jboolean; overload;
    function hasFinished(): jboolean; overload;
  end;

  ASTSynthesisRequest = class sealed external 'android.speech.tts' name 'SynthesisRequest' (JLObject)
  public
    constructor create(para1: JLString; para2: AOBundle); overload;
    constructor create(para1: JLCharSequence; para2: AOBundle); overload;
    function getText(): JLString; overload; virtual;
    function getCharSequenceText(): JLCharSequence; overload; virtual;
    function getVoiceName(): JLString; overload; virtual;
    function getLanguage(): JLString; overload; virtual;
    function getCountry(): JLString; overload; virtual;
    function getVariant(): JLString; overload; virtual;
    function getSpeechRate(): jint; overload; virtual;
    function getPitch(): jint; overload; virtual;
    function getParams(): AOBundle; overload; virtual;
    function getCallerUid(): jint; overload; virtual;
  end;

  ASTTextToSpeech = class external 'android.speech.tts' name 'TextToSpeech' (JLObject)
  public
    type
      InnerEngineInfo = class;
      Arr1InnerEngineInfo = array of InnerEngineInfo;
      Arr2InnerEngineInfo = array of Arr1InnerEngineInfo;
      Arr3InnerEngineInfo = array of Arr2InnerEngineInfo;
      InnerEngine = class;
      Arr1InnerEngine = array of InnerEngine;
      Arr2InnerEngine = array of Arr1InnerEngine;
      Arr3InnerEngine = array of Arr2InnerEngine;
      InnerOnUtteranceCompletedListener = interface;
      Arr1InnerOnUtteranceCompletedListener = array of InnerOnUtteranceCompletedListener;
      Arr2InnerOnUtteranceCompletedListener = array of Arr1InnerOnUtteranceCompletedListener;
      Arr3InnerOnUtteranceCompletedListener = array of Arr2InnerOnUtteranceCompletedListener;
      InnerOnInitListener = interface;
      Arr1InnerOnInitListener = array of InnerOnInitListener;
      Arr2InnerOnInitListener = array of Arr1InnerOnInitListener;
      Arr3InnerOnInitListener = array of Arr2InnerOnInitListener;
      InnerEngineInfo = class external 'android.speech.tts' name 'EngineInfo' (JLObject)
      public
        var
          ficon: jint; external name 'icon';
          flabel: JLString; external name 'label';
          fname: JLString; external name 'name';
      public
        constructor create(); overload;
        function toString(): JLString; overload; virtual;
      end;

      InnerEngine = class external 'android.speech.tts' name 'Engine' 
      end;

      InnerOnUtteranceCompletedListener = interface external 'android.speech.tts' name 'OnUtteranceCompletedListener' 
        procedure onUtteranceCompleted(para1: JLString); overload;
      end;

      InnerOnInitListener = interface external 'android.speech.tts' name 'OnInitListener' 
        procedure onInit(para1: jint); overload;
      end;

  public
    const
      ACTION_TTS_QUEUE_PROCESSING_COMPLETED = 'android.speech.tts.TTS_QUEUE_PROCESSING_COMPLETED';
      ERROR = -1;
      ERROR_INVALID_REQUEST = -8;
      ERROR_NETWORK = -6;
      ERROR_NETWORK_TIMEOUT = -7;
      ERROR_NOT_INSTALLED_YET = -9;
      ERROR_OUTPUT = -5;
      ERROR_SERVICE = -4;
      ERROR_SYNTHESIS = -3;
      LANG_AVAILABLE = 0;
      LANG_COUNTRY_AVAILABLE = 1;
      LANG_COUNTRY_VAR_AVAILABLE = 2;
      LANG_MISSING_DATA = -1;
      LANG_NOT_SUPPORTED = -2;
      QUEUE_ADD = 1;
      QUEUE_FLUSH = 0;
      STOPPED = -2;
      SUCCESS = 0;
  public
    constructor create(para1: ACContext; para2: ASTTextToSpeech.InnerOnInitListener); overload;
    constructor create(para1: ACContext; para2: ASTTextToSpeech.InnerOnInitListener; para3: JLString); overload;
    procedure shutdown(); overload; virtual;
    function addSpeech(para1: JLString; para2: JLString; para3: jint): jint; overload; virtual;
    function addSpeech(para1: JLCharSequence; para2: JLString; para3: jint): jint; overload; virtual;
    function addSpeech(para1: JLString; para2: JLString): jint; overload; virtual;
    function addSpeech(para1: JLCharSequence; para2: JIFile): jint; overload; virtual;
    function addEarcon(para1: JLString; para2: JLString; para3: jint): jint; overload; virtual;
    function addEarcon(para1: JLString; para2: JLString): jint; overload; virtual;
    function addEarcon(para1: JLString; para2: JIFile): jint; overload; virtual;
    function speak(para1: JLCharSequence; para2: jint; para3: AOBundle; para4: JLString): jint; overload; virtual;
    function speak(para1: JLString; para2: jint; para3: JUHashMap): jint; overload; virtual;
    function playEarcon(para1: JLString; para2: jint; para3: AOBundle; para4: JLString): jint; overload; virtual;
    function playEarcon(para1: JLString; para2: jint; para3: JUHashMap): jint; overload; virtual;
    function playSilentUtterance(para1: jlong; para2: jint; para3: JLString): jint; overload; virtual;
    function playSilence(para1: jlong; para2: jint; para3: JUHashMap): jint; overload; virtual;
    function getFeatures(para1: JULocale): JUSet; overload; virtual;
    function isSpeaking(): jboolean; overload; virtual;
    function stop(): jint; overload; virtual;
    function setSpeechRate(para1: jfloat): jint; overload; virtual;
    function setPitch(para1: jfloat): jint; overload; virtual;
    function setAudioAttributes(para1: AMAudioAttributes): jint; overload; virtual;
    function getDefaultLanguage(): JULocale; overload; virtual;
    function setLanguage(para1: JULocale): jint; overload; virtual;
    function getLanguage(): JULocale; overload; virtual;
    function getAvailableLanguages(): JUSet; overload; virtual;
    function getVoices(): JUSet; overload; virtual;
    function setVoice(para1: ASTVoice): jint; overload; virtual;
    function getVoice(): ASTVoice; overload; virtual;
    function getDefaultVoice(): ASTVoice; overload; virtual;
    function isLanguageAvailable(para1: JULocale): jint; overload; virtual;
    function synthesizeToFile(para1: JLCharSequence; para2: AOBundle; para3: JIFile; para4: JLString): jint; overload; virtual;
    function synthesizeToFile(para1: JLString; para2: JUHashMap; para3: JLString): jint; overload; virtual;
    function setOnUtteranceCompletedListener(para1: ASTTextToSpeech.InnerOnUtteranceCompletedListener): jint; overload; virtual;
    function setOnUtteranceProgressListener(para1: ASTUtteranceProgressListener): jint; overload; virtual;
    function setEngineByPackageName(para1: JLString): jint; overload; virtual;
    function getDefaultEngine(): JLString; overload; virtual;
    function areDefaultsEnforced(): jboolean; overload; virtual;
    function getEngines(): JUList; overload; virtual;
    class function getMaxSpeechInputLength(): jint; static; overload;
  end;

  ASTUtteranceProgressListener = class abstract external 'android.speech.tts' name 'UtteranceProgressListener' (JLObject)
  public
    constructor create(); overload;
    procedure onStart(para1: JLString); overload; virtual; abstract;
    procedure onDone(para1: JLString); overload; virtual; abstract;
    procedure onError(para1: JLString); overload; virtual; abstract;
    procedure onError(para1: JLString; para2: jint); overload; virtual;
  end;

  ATCellLocation = class abstract external 'android.telephony' name 'CellLocation' (JLObject)
  public
    constructor create(); overload;
    class procedure requestLocationUpdate(); static; overload;
    class function getEmpty(): ATCellLocation; static; overload;
  end;

  ATPhoneNumberUtils = class external 'android.telephony' name 'PhoneNumberUtils' (JLObject)
  public
    const
      FORMAT_JAPAN = 2;
      FORMAT_NANP = 1;
      FORMAT_UNKNOWN = 0;
      PAUSE = 44;
      TOA_International = 145;
      TOA_Unknown = 129;
      WAIT = 59;
      WILD = 78;
  public
    constructor create(); overload;
    class function isISODigit(para1: jchar): jboolean; static; overload;
    class function is12Key(para1: jchar): jboolean; static; overload; final;
    class function isDialable(para1: jchar): jboolean; static; overload; final;
    class function isReallyDialable(para1: jchar): jboolean; static; overload; final;
    class function isNonSeparator(para1: jchar): jboolean; static; overload; final;
    class function isStartsPostDial(para1: jchar): jboolean; static; overload; final;
    class function getNumberFromIntent(para1: ACIntent; para2: ACContext): JLString; static; overload;
    class function extractNetworkPortion(para1: JLString): JLString; static; overload;
    class function stripSeparators(para1: JLString): JLString; static; overload;
    class function extractPostDialPortion(para1: JLString): JLString; static; overload;
    class function compare(para1: JLString; para2: JLString): jboolean; static; overload;
    class function compare(para1: ACContext; para2: JLString; para3: JLString): jboolean; static; overload;
    class function toCallerIDMinMatch(para1: JLString): JLString; static; overload;
    class function getStrippedReversed(para1: JLString): JLString; static; overload;
    class function stringFromStringAndTOA(para1: JLString; para2: jint): JLString; static; overload;
    class function toaFromString(para1: JLString): jint; static; overload;
    class function calledPartyBCDToString(para1: Arr1jbyte; para2: jint; para3: jint): JLString; static; overload;
    class function calledPartyBCDToString(var para1: array of jbyte; para2: jint; para3: jint): JLString; static; overload;
    class function calledPartyBCDFragmentToString(para1: Arr1jbyte; para2: jint; para3: jint): JLString; static; overload;
    class function calledPartyBCDFragmentToString(var para1: array of jbyte; para2: jint; para3: jint): JLString; static; overload;
    class function isWellFormedSmsAddress(para1: JLString): jboolean; static; overload;
    class function isGlobalPhoneNumber(para1: JLString): jboolean; static; overload;
    class function networkPortionToCalledPartyBCD(para1: JLString): Arr1jbyte; static; overload;
    class function networkPortionToCalledPartyBCDWithLength(para1: JLString): Arr1jbyte; static; overload;
    class function numberToCalledPartyBCD(para1: JLString): Arr1jbyte; static; overload;
    class function formatNumber(para1: JLString): JLString; static; overload;
    class function getFormatTypeForLocale(para1: JULocale): jint; static; overload;
    class procedure formatNumber(para1: ATEditable; para2: jint); static; overload;
    class procedure formatNanpNumber(para1: ATEditable); static; overload;
    class procedure formatJapaneseNumber(para1: ATEditable); static; overload;
    class function formatNumberToE164(para1: JLString; para2: JLString): JLString; static; overload;
    class function formatNumber(para1: JLString; para2: JLString): JLString; static; overload;
    class function formatNumber(para1: JLString; para2: JLString; para3: JLString): JLString; static; overload;
    class function normalizeNumber(para1: JLString): JLString; static; overload;
    class function replaceUnicodeDigits(para1: JLString): JLString; static; overload;
    class function isEmergencyNumber(para1: JLString): jboolean; static; overload;
    class function isLocalEmergencyNumber(para1: ACContext; para2: JLString): jboolean; static; overload;
    class function isVoiceMailNumber(para1: JLString): jboolean; static; overload;
    class function convertKeypadLettersToDigits(para1: JLString): JLString; static; overload;
  end;

  ATPhoneStateListener = class external 'android.telephony' name 'PhoneStateListener' (JLObject)
  public
    const
      LISTEN_CALL_FORWARDING_INDICATOR = 8;
      LISTEN_CALL_STATE = 32;
      LISTEN_CELL_INFO = 1024;
      LISTEN_CELL_LOCATION = 16;
      LISTEN_DATA_ACTIVITY = 128;
      LISTEN_DATA_CONNECTION_STATE = 64;
      LISTEN_MESSAGE_WAITING_INDICATOR = 4;
      LISTEN_NONE = 0;
      LISTEN_SERVICE_STATE = 1;
      LISTEN_SIGNAL_STRENGTH = 2 deprecated;
      LISTEN_SIGNAL_STRENGTHS = 256;
  public
    constructor create(); overload;
    procedure onServiceStateChanged(para1: ATServiceState); overload; virtual;
    procedure onSignalStrengthChanged(para1: jint); overload; virtual;
    procedure onMessageWaitingIndicatorChanged(para1: jboolean); overload; virtual;
    procedure onCallForwardingIndicatorChanged(para1: jboolean); overload; virtual;
    procedure onCellLocationChanged(para1: ATCellLocation); overload; virtual;
    procedure onCallStateChanged(para1: jint; para2: JLString); overload; virtual;
    procedure onDataConnectionStateChanged(para1: jint); overload; virtual;
    procedure onDataConnectionStateChanged(para1: jint; para2: jint); overload; virtual;
    procedure onDataActivity(para1: jint); overload; virtual;
    procedure onSignalStrengthsChanged(para1: ATSignalStrength); overload; virtual;
    procedure onCellInfoChanged(para1: JUList); overload; virtual;
  end;

  ATSmsManager = class sealed external 'android.telephony' name 'SmsManager' (JLObject)
  public
    const
      EXTRA_MMS_DATA = 'android.telephony.extra.MMS_DATA';
      MMS_CONFIG_ALIAS_ENABLED = 'aliasEnabled';
      MMS_CONFIG_ALIAS_MAX_CHARS = 'aliasMaxChars';
      MMS_CONFIG_ALIAS_MIN_CHARS = 'aliasMinChars';
      MMS_CONFIG_ALLOW_ATTACH_AUDIO = 'allowAttachAudio';
      MMS_CONFIG_APPEND_TRANSACTION_ID = 'enabledTransID';
      MMS_CONFIG_EMAIL_GATEWAY_NUMBER = 'emailGatewayNumber';
      MMS_CONFIG_GROUP_MMS_ENABLED = 'enableGroupMms';
      MMS_CONFIG_HTTP_PARAMS = 'httpParams';
      MMS_CONFIG_HTTP_SOCKET_TIMEOUT = 'httpSocketTimeout';
      MMS_CONFIG_MAX_IMAGE_HEIGHT = 'maxImageHeight';
      MMS_CONFIG_MAX_IMAGE_WIDTH = 'maxImageWidth';
      MMS_CONFIG_MAX_MESSAGE_SIZE = 'maxMessageSize';
      MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE = 'maxMessageTextSize';
      MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED = 'enableMMSDeliveryReports';
      MMS_CONFIG_MMS_ENABLED = 'enabledMMS';
      MMS_CONFIG_MMS_READ_REPORT_ENABLED = 'enableMMSReadReports';
      MMS_CONFIG_MULTIPART_SMS_ENABLED = 'enableMultipartSMS';
      MMS_CONFIG_NAI_SUFFIX = 'naiSuffix';
      MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED = 'enabledNotifyWapMMSC';
      MMS_CONFIG_RECIPIENT_LIMIT = 'recipientLimit';
      MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES = 'sendMultipartSmsAsSeparateMessages';
      MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED = 'enableSMSDeliveryReports';
      MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD = 'smsToMmsTextLengthThreshold';
      MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD = 'smsToMmsTextThreshold';
      MMS_CONFIG_SUBJECT_MAX_LENGTH = 'maxSubjectLength';
      MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION = 'supportMmsContentDisposition';
      MMS_CONFIG_UA_PROF_TAG_NAME = 'uaProfTagName';
      MMS_CONFIG_UA_PROF_URL = 'uaProfUrl';
      MMS_CONFIG_USER_AGENT = 'userAgent';
      MMS_ERROR_CONFIGURATION_ERROR = 7;
      MMS_ERROR_HTTP_FAILURE = 4;
      MMS_ERROR_INVALID_APN = 2;
      MMS_ERROR_IO_ERROR = 5;
      MMS_ERROR_RETRY = 6;
      MMS_ERROR_UNABLE_CONNECT_MMS = 3;
      MMS_ERROR_UNSPECIFIED = 1;
      RESULT_ERROR_GENERIC_FAILURE = 1;
      RESULT_ERROR_NO_SERVICE = 4;
      RESULT_ERROR_NULL_PDU = 3;
      RESULT_ERROR_RADIO_OFF = 2;
      STATUS_ON_ICC_FREE = 0;
      STATUS_ON_ICC_READ = 1;
      STATUS_ON_ICC_SENT = 5;
      STATUS_ON_ICC_UNREAD = 3;
      STATUS_ON_ICC_UNSENT = 7;
  public
    procedure sendTextMessage(para1: JLString; para2: JLString; para3: JLString; para4: AAPendingIntent; para5: AAPendingIntent); overload; virtual;
    function divideMessage(para1: JLString): JUArrayList; overload; virtual;
    procedure sendMultipartTextMessage(para1: JLString; para2: JLString; para3: JUArrayList; para4: JUArrayList; para5: JUArrayList); overload; virtual;
    procedure sendDataMessage(para1: JLString; para2: JLString; para3: jshort; para4: Arr1jbyte; para5: AAPendingIntent; para6: AAPendingIntent); overload; virtual;
    procedure sendDataMessage(para1: JLString; para2: JLString; para3: jshort; var para4: array of jbyte; para5: AAPendingIntent; para6: AAPendingIntent); overload; virtual;
    class function getDefault(): ATSmsManager; static; overload;
    procedure sendMultimediaMessage(para1: ACContext; para2: ANUri; para3: JLString; para4: AOBundle; para5: AAPendingIntent); overload; virtual;
    procedure downloadMultimediaMessage(para1: ACContext; para2: JLString; para3: ANUri; para4: AOBundle; para5: AAPendingIntent); overload; virtual;
    function getCarrierConfigValues(): AOBundle; overload; virtual;
  end;

  ATTelephonyManager = class external 'android.telephony' name 'TelephonyManager' (JLObject)
  public
    const
      ACTION_PHONE_STATE_CHANGED = 'android.intent.action.PHONE_STATE';
      ACTION_RESPOND_VIA_MESSAGE = 'android.intent.action.RESPOND_VIA_MESSAGE';
      CALL_STATE_IDLE = 0;
      CALL_STATE_OFFHOOK = 2;
      CALL_STATE_RINGING = 1;
      DATA_ACTIVITY_DORMANT = 4;
      DATA_ACTIVITY_IN = 1;
      DATA_ACTIVITY_INOUT = 3;
      DATA_ACTIVITY_NONE = 0;
      DATA_ACTIVITY_OUT = 2;
      DATA_CONNECTED = 2;
      DATA_CONNECTING = 1;
      DATA_DISCONNECTED = 0;
      DATA_SUSPENDED = 3;
      EXTRA_INCOMING_NUMBER = 'incoming_number';
      EXTRA_STATE = 'state';
  public
    final class var
      fEXTRA_STATE_IDLE: JLString; external name 'EXTRA_STATE_IDLE';
      fEXTRA_STATE_OFFHOOK: JLString; external name 'EXTRA_STATE_OFFHOOK';
      fEXTRA_STATE_RINGING: JLString; external name 'EXTRA_STATE_RINGING';
  public
    const
      NETWORK_TYPE_1xRTT = 7;
      NETWORK_TYPE_CDMA = 4;
      NETWORK_TYPE_EDGE = 2;
      NETWORK_TYPE_EHRPD = 14;
      NETWORK_TYPE_EVDO_0 = 5;
      NETWORK_TYPE_EVDO_A = 6;
      NETWORK_TYPE_EVDO_B = 12;
      NETWORK_TYPE_GPRS = 1;
      NETWORK_TYPE_HSDPA = 8;
      NETWORK_TYPE_HSPA = 10;
      NETWORK_TYPE_HSPAP = 15;
      NETWORK_TYPE_HSUPA = 9;
      NETWORK_TYPE_IDEN = 11;
      NETWORK_TYPE_LTE = 13;
      NETWORK_TYPE_UMTS = 3;
      NETWORK_TYPE_UNKNOWN = 0;
      PHONE_TYPE_CDMA = 2;
      PHONE_TYPE_GSM = 1;
      PHONE_TYPE_NONE = 0;
      PHONE_TYPE_SIP = 3;
      SIM_STATE_ABSENT = 1;
      SIM_STATE_NETWORK_LOCKED = 4;
      SIM_STATE_PIN_REQUIRED = 2;
      SIM_STATE_PUK_REQUIRED = 3;
      SIM_STATE_READY = 5;
      SIM_STATE_UNKNOWN = 0;
  public
    function getDeviceSoftwareVersion(): JLString; overload; virtual;
    function getDeviceId(): JLString; overload; virtual;
    function getCellLocation(): ATCellLocation; overload; virtual;
    function getNeighboringCellInfo(): JUList; overload; virtual;
    function getPhoneType(): jint; overload; virtual;
    function getNetworkOperatorName(): JLString; overload; virtual;
    function getNetworkOperator(): JLString; overload; virtual;
    function isNetworkRoaming(): jboolean; overload; virtual;
    function getNetworkCountryIso(): JLString; overload; virtual;
    function getNetworkType(): jint; overload; virtual;
    function hasIccCard(): jboolean; overload; virtual;
    function getSimState(): jint; overload; virtual;
    function getSimOperator(): JLString; overload; virtual;
    function getSimOperatorName(): JLString; overload; virtual;
    function getSimCountryIso(): JLString; overload; virtual;
    function getSimSerialNumber(): JLString; overload; virtual;
    function getSubscriberId(): JLString; overload; virtual;
    function getGroupIdLevel1(): JLString; overload; virtual;
    function getLine1Number(): JLString; overload; virtual;
    function getVoiceMailNumber(): JLString; overload; virtual;
    function getVoiceMailAlphaTag(): JLString; overload; virtual;
    function getCallState(): jint; overload; virtual;
    function getDataActivity(): jint; overload; virtual;
    function getDataState(): jint; overload; virtual;
    procedure listen(para1: ATPhoneStateListener; para2: jint); overload; virtual;
    function isSmsCapable(): jboolean; overload; virtual;
    function getAllCellInfo(): JUList; overload; virtual;
    function getMmsUserAgent(): JLString; overload; virtual;
    function getMmsUAProfUrl(): JLString; overload; virtual;
    function iccOpenLogicalChannel(para1: JLString): ATIccOpenLogicalChannelResponse; overload; virtual;
    function iccCloseLogicalChannel(para1: jint): jboolean; overload; virtual;
    function iccTransmitApduLogicalChannel(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: JLString): JLString; overload; virtual;
    function iccTransmitApduBasicChannel(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: JLString): JLString; overload; virtual;
    function iccExchangeSimIO(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: JLString): Arr1jbyte; overload; virtual;
    function sendEnvelopeWithStatus(para1: JLString): JLString; overload; virtual;
  end;

  ATGSmsManager = class sealed external 'android.telephony.gsm' name 'SmsManager' (JLObject)
  public
    const
      RESULT_ERROR_GENERIC_FAILURE = 1 deprecated;
      RESULT_ERROR_NO_SERVICE = 4 deprecated;
      RESULT_ERROR_NULL_PDU = 3 deprecated;
      RESULT_ERROR_RADIO_OFF = 2 deprecated;
      STATUS_ON_SIM_FREE = 0 deprecated;
      STATUS_ON_SIM_READ = 1 deprecated;
      STATUS_ON_SIM_SENT = 5 deprecated;
      STATUS_ON_SIM_UNREAD = 3 deprecated;
      STATUS_ON_SIM_UNSENT = 7 deprecated;
  public
    class function getDefault(): ATGSmsManager; static; overload; final;
    procedure sendTextMessage(para1: JLString; para2: JLString; para3: JLString; para4: AAPendingIntent; para5: AAPendingIntent); overload; virtual; final;
    function divideMessage(para1: JLString): JUArrayList; overload; virtual; final;
    procedure sendMultipartTextMessage(para1: JLString; para2: JLString; para3: JUArrayList; para4: JUArrayList; para5: JUArrayList); overload; virtual; final;
    procedure sendDataMessage(para1: JLString; para2: JLString; para3: jshort; para4: Arr1jbyte; para5: AAPendingIntent; para6: AAPendingIntent); overload; virtual; final;
    procedure sendDataMessage(para1: JLString; para2: JLString; para3: jshort; var para4: array of jbyte; para5: AAPendingIntent; para6: AAPendingIntent); overload; virtual; final;
  end;

  ATMoreAsserts = class sealed external 'android.test' name 'MoreAsserts' (JLObject)
  public
    class procedure assertAssignableFrom(para1: JLClass; para2: JLObject); static; overload;
    class procedure assertAssignableFrom(para1: JLClass; para2: JLClass); static; overload;
    class procedure assertNotEqual(para1: JLString; para2: JLObject; para3: JLObject); static; overload;
    class procedure assertNotEqual(para1: JLObject; para2: JLObject); static; overload;
    class procedure assertEquals(para1: JLString; para2: Arr1jbyte; para3: Arr1jbyte); static; overload;
    class procedure assertEquals(para1: JLString; var para2: array of jbyte; var para3: array of jbyte); static; overload;
    class procedure assertEquals(para1: Arr1jbyte; para2: Arr1jbyte); static; overload;
    class procedure assertEquals(var para1: array of jbyte; var para2: array of jbyte); static; overload;
    class procedure assertEquals(para1: JLString; para2: Arr1jint; para3: Arr1jint); static; overload;
    class procedure assertEquals(para1: JLString; var para2: array of jint; var para3: array of jint); static; overload;
    class procedure assertEquals(para1: Arr1jint; para2: Arr1jint); static; overload;
    class procedure assertEquals(var para1: array of jint; var para2: array of jint); static; overload;
    class procedure assertEquals(para1: JLString; para2: Arr1jdouble; para3: Arr1jdouble); static; overload;
    class procedure assertEquals(para1: JLString; var para2: array of jdouble; var para3: array of jdouble); static; overload;
    class procedure assertEquals(para1: Arr1jdouble; para2: Arr1jdouble); static; overload;
    class procedure assertEquals(var para1: array of jdouble; var para2: array of jdouble); static; overload;
    class procedure assertEquals(para1: JLString; para2: Arr1JLObject; para3: Arr1JLObject); static; overload;
    class procedure assertEquals(para1: JLString; var para2: array of JLObject; var para3: array of JLObject); static; overload;
    class procedure assertEquals(para1: Arr1JLObject; para2: Arr1JLObject); static; overload;
    class procedure assertEquals(var para1: array of JLObject; var para2: array of JLObject); static; overload;
    class procedure assertEquals(para1: JLString; para2: JUSet; para3: JUSet); static; overload;
    class procedure assertEquals(para1: JUSet; para2: JUSet); static; overload;
    class function assertMatchesRegex(para1: JLString; para2: JLString; para3: JLString): JURMatchResult; static; overload;
    class function assertMatchesRegex(para1: JLString; para2: JLString): JURMatchResult; static; overload;
    class function assertContainsRegex(para1: JLString; para2: JLString; para3: JLString): JURMatchResult; static; overload;
    class function assertContainsRegex(para1: JLString; para2: JLString): JURMatchResult; static; overload;
    class procedure assertNotMatchesRegex(para1: JLString; para2: JLString; para3: JLString); static; overload;
    class procedure assertNotMatchesRegex(para1: JLString; para2: JLString); static; overload;
    class procedure assertNotContainsRegex(para1: JLString; para2: JLString; para3: JLString); static; overload;
    class procedure assertNotContainsRegex(para1: JLString; para2: JLString); static; overload;
    class procedure assertContentsInOrder(para1: JLString; para2: JLIterable; para3: Arr1JLObject); static; overload;
    class procedure assertContentsInOrder(para1: JLString; para2: JLIterable; const para3: array of JLObject); static; overload;
    class procedure assertContentsInOrder(para1: JLIterable; para2: Arr1JLObject); static; overload;
    class procedure assertContentsInOrder(para1: JLIterable; const para2: array of JLObject); static; overload;
    class procedure assertContentsInAnyOrder(para1: JLString; para2: JLIterable; para3: Arr1JLObject); static; overload;
    class procedure assertContentsInAnyOrder(para1: JLString; para2: JLIterable; const para3: array of JLObject); static; overload;
    class procedure assertContentsInAnyOrder(para1: JLIterable; para2: Arr1JLObject); static; overload;
    class procedure assertContentsInAnyOrder(para1: JLIterable; const para2: array of JLObject); static; overload;
    class procedure assertEmpty(para1: JLString; para2: JLIterable); static; overload;
    class procedure assertEmpty(para1: JLIterable); static; overload;
    class procedure assertEmpty(para1: JLString; para2: JUMap); static; overload;
    class procedure assertEmpty(para1: JUMap); static; overload;
    class procedure assertNotEmpty(para1: JLString; para2: JLIterable); static; overload;
    class procedure assertNotEmpty(para1: JLIterable); static; overload;
    class procedure assertNotEmpty(para1: JLString; para2: JUMap); static; overload;
    class procedure assertNotEmpty(para1: JUMap); static; overload;
    class procedure checkEqualsAndHashCodeMethods(para1: JLString; para2: JLObject; para3: JLObject; para4: jboolean); static; overload;
    class procedure checkEqualsAndHashCodeMethods(para1: JLObject; para2: JLObject; para3: jboolean); static; overload;
  end;

  ATPerformanceTestCase = interface external 'android.test' name 'PerformanceTestCase' 
    type
      InnerIntermediates = interface;
      Arr1InnerIntermediates = array of InnerIntermediates;
      Arr2InnerIntermediates = array of Arr1InnerIntermediates;
      Arr3InnerIntermediates = array of Arr2InnerIntermediates;
      InnerIntermediates = interface external 'android.test' name 'Intermediates' 
        procedure setInternalIterations(para1: jint); overload;
        procedure startTiming(para1: jboolean); overload;
        procedure addIntermediate(para1: JLString); overload;
        procedure addIntermediate(para1: JLString; para2: jlong); overload;
        procedure finishTiming(para1: jboolean); overload;
      end;

    function startPerformance(para1: ATPerformanceTestCase.InnerIntermediates): jint; overload;
    function isPerformanceOnly(): jboolean; overload;
  end;

  ATTestSuiteProvider = interface external 'android.test' name 'TestSuiteProvider' 
    function getTestSuite(): JFTestSuite; overload;
  end;

  ATTouchUtils = class external 'android.test' name 'TouchUtils' (JLObject)
  public
    constructor create(); overload;
    class procedure dragQuarterScreenDown(para1: ATActivityInstrumentationTestCase); static; overload;
    class procedure dragQuarterScreenDown(para1: ATInstrumentationTestCase; para2: AAActivity); static; overload;
    class procedure dragQuarterScreenUp(para1: ATActivityInstrumentationTestCase); static; overload;
    class procedure dragQuarterScreenUp(para1: ATInstrumentationTestCase; para2: AAActivity); static; overload;
    class procedure scrollToBottom(para1: ATActivityInstrumentationTestCase; para2: AVViewGroup); static; overload;
    class procedure scrollToBottom(para1: ATInstrumentationTestCase; para2: AAActivity; para3: AVViewGroup); static; overload;
    class procedure scrollToTop(para1: ATActivityInstrumentationTestCase; para2: AVViewGroup); static; overload;
    class procedure scrollToTop(para1: ATInstrumentationTestCase; para2: AAActivity; para3: AVViewGroup); static; overload;
    class procedure dragViewToBottom(para1: ATActivityInstrumentationTestCase; para2: AVView); static; overload;
    class procedure dragViewToBottom(para1: ATInstrumentationTestCase; para2: AAActivity; para3: AVView); static; overload;
    class procedure dragViewToBottom(para1: ATActivityInstrumentationTestCase; para2: AVView; para3: jint); static; overload;
    class procedure dragViewToBottom(para1: ATInstrumentationTestCase; para2: AAActivity; para3: AVView; para4: jint); static; overload;
    class procedure tapView(para1: ATInstrumentationTestCase; para2: AVView); static; overload;
    class procedure touchAndCancelView(para1: ATInstrumentationTestCase; para2: AVView); static; overload;
    class procedure clickView(para1: ATInstrumentationTestCase; para2: AVView); static; overload;
    class procedure longClickView(para1: ATActivityInstrumentationTestCase; para2: AVView); static; overload;
    class procedure longClickView(para1: ATInstrumentationTestCase; para2: AVView); static; overload;
    class procedure dragViewToTop(para1: ATActivityInstrumentationTestCase; para2: AVView); static; overload;
    class procedure dragViewToTop(para1: ATActivityInstrumentationTestCase; para2: AVView; para3: jint); static; overload;
    class procedure dragViewToTop(para1: ATInstrumentationTestCase; para2: AVView); static; overload;
    class procedure dragViewToTop(para1: ATInstrumentationTestCase; para2: AVView; para3: jint); static; overload;
    class function dragViewBy(para1: ATActivityInstrumentationTestCase; para2: AVView; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function dragViewBy(para1: ATInstrumentationTestCase; para2: AVView; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function dragViewTo(para1: ATActivityInstrumentationTestCase; para2: AVView; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function dragViewTo(para1: ATInstrumentationTestCase; para2: AVView; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function dragViewToX(para1: ATActivityInstrumentationTestCase; para2: AVView; para3: jint; para4: jint): jint; static; overload;
    class function dragViewToX(para1: ATInstrumentationTestCase; para2: AVView; para3: jint; para4: jint): jint; static; overload;
    class function dragViewToY(para1: ATActivityInstrumentationTestCase; para2: AVView; para3: jint; para4: jint): jint; static; overload;
    class function dragViewToY(para1: ATInstrumentationTestCase; para2: AVView; para3: jint; para4: jint): jint; static; overload;
    class procedure drag(para1: ATActivityInstrumentationTestCase; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jint); static; overload;
    class procedure drag(para1: ATInstrumentationTestCase; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jint); static; overload;
  end;

  ATViewAsserts = class external 'android.test' name 'ViewAsserts' (JLObject)
  public
    class procedure assertOnScreen(para1: AVView; para2: AVView); static; overload;
    class procedure assertOffScreenBelow(para1: AVView; para2: AVView); static; overload;
    class procedure assertOffScreenAbove(para1: AVView; para2: AVView); static; overload;
    class procedure assertHasScreenCoordinates(para1: AVView; para2: AVView; para3: jint; para4: jint); static; overload;
    class procedure assertBaselineAligned(para1: AVView; para2: AVView); static; overload;
    class procedure assertRightAligned(para1: AVView; para2: AVView); static; overload;
    class procedure assertRightAligned(para1: AVView; para2: AVView; para3: jint); static; overload;
    class procedure assertLeftAligned(para1: AVView; para2: AVView); static; overload;
    class procedure assertLeftAligned(para1: AVView; para2: AVView; para3: jint); static; overload;
    class procedure assertBottomAligned(para1: AVView; para2: AVView); static; overload;
    class procedure assertBottomAligned(para1: AVView; para2: AVView; para3: jint); static; overload;
    class procedure assertTopAligned(para1: AVView; para2: AVView); static; overload;
    class procedure assertTopAligned(para1: AVView; para2: AVView; para3: jint); static; overload;
    class procedure assertHorizontalCenterAligned(para1: AVView; para2: AVView); static; overload;
    class procedure assertVerticalCenterAligned(para1: AVView; para2: AVView); static; overload;
    class procedure assertGroupIntegrity(para1: AVViewGroup); static; overload;
    class procedure assertGroupContains(para1: AVViewGroup; para2: AVView); static; overload;
    class procedure assertGroupNotContains(para1: AVViewGroup; para2: AVView); static; overload;
  end;

  ATSTestMethod = class external 'android.test.suitebuilder' name 'TestMethod' (JLObject)
  public
    constructor create(para1: JLRMethod; para2: JLClass); overload;
    constructor create(para1: JLString; para2: JLClass); overload;
    constructor create(para1: JFTestCase); overload;
    function getName(): JLString; overload; virtual;
    function getEnclosingClassname(): JLString; overload; virtual;
    function getAnnotation(para1: JLClass): JLAAnnotation; overload; virtual;
    function getEnclosingClass(): JLClass; overload; virtual;
    function createTest(): JFTestCase; overload; virtual;  // throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException, java.lang.InstantiationException
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ATAndroidCharacter = class external 'android.text' name 'AndroidCharacter' (JLObject)
  public
    const
      EAST_ASIAN_WIDTH_AMBIGUOUS = 1;
      EAST_ASIAN_WIDTH_FULL_WIDTH = 3;
      EAST_ASIAN_WIDTH_HALF_WIDTH = 2;
      EAST_ASIAN_WIDTH_NARROW = 4;
      EAST_ASIAN_WIDTH_NEUTRAL = 0;
      EAST_ASIAN_WIDTH_WIDE = 5;
  public
    constructor create(); overload;
    class procedure getDirectionalities(para1: Arr1jchar; para2: Arr1jbyte; para3: jint); static; overload;
    class procedure getDirectionalities(var para1: array of jchar; var para2: array of jbyte; para3: jint); static; overload;
    class function getEastAsianWidth(para1: jchar): jint; static; overload;
    class procedure getEastAsianWidths(para1: Arr1jchar; para2: jint; para3: jint; para4: Arr1jbyte); static; overload;
    class procedure getEastAsianWidths(var para1: array of jchar; para2: jint; para3: jint; var para4: array of jbyte); static; overload;
    class function mirror(para1: Arr1jchar; para2: jint; para3: jint): jboolean; static; overload;
    class function mirror(var para1: array of jchar; para2: jint; para3: jint): jboolean; static; overload;
    class function getMirror(para1: jchar): jchar; static; overload;
  end;

  ATAutoText = class external 'android.text' name 'AutoText' (JLObject)
  public
    class function get(para1: JLCharSequence; para2: jint; para3: jint; para4: AVView): JLString; static; overload;
    class function getSize(para1: AVView): jint; static; overload;
  end;

  ATClipboardManager = class abstract external 'android.text' name 'ClipboardManager' (JLObject)
  public
    constructor create(); overload;
    function getText(): JLCharSequence; overload; virtual; abstract;
    procedure setText(para1: JLCharSequence); overload; virtual; abstract;
    function hasText(): jboolean; overload; virtual; abstract;
  end;

  ATHtml = class external 'android.text' name 'Html' (JLObject)
  public
    type
      InnerTagHandler = interface;
      Arr1InnerTagHandler = array of InnerTagHandler;
      Arr2InnerTagHandler = array of Arr1InnerTagHandler;
      Arr3InnerTagHandler = array of Arr2InnerTagHandler;
      InnerImageGetter = interface;
      Arr1InnerImageGetter = array of InnerImageGetter;
      Arr2InnerImageGetter = array of Arr1InnerImageGetter;
      Arr3InnerImageGetter = array of Arr2InnerImageGetter;
      InnerTagHandler = interface external 'android.text' name 'TagHandler' 
        procedure handleTag(para1: jboolean; para2: JLString; para3: ATEditable; para4: OXSXMLReader); overload;
      end;

      InnerImageGetter = interface external 'android.text' name 'ImageGetter' 
        function getDrawable(para1: JLString): AGDDrawable; overload;
      end;

  public
    class function fromHtml(para1: JLString): ATSpanned; static; overload;
    class function fromHtml(para1: JLString; para2: ATHtml.InnerImageGetter; para3: ATHtml.InnerTagHandler): ATSpanned; static; overload;
    class function toHtml(para1: ATSpanned): JLString; static; overload;
    class function escapeHtml(para1: JLCharSequence): JLString; static; overload;
  end;

  ATInputFilter = interface external 'android.text' name 'InputFilter' 
    type
      InnerLengthFilter = class;
      Arr1InnerLengthFilter = array of InnerLengthFilter;
      Arr2InnerLengthFilter = array of Arr1InnerLengthFilter;
      Arr3InnerLengthFilter = array of Arr2InnerLengthFilter;
      InnerAllCaps = class;
      Arr1InnerAllCaps = array of InnerAllCaps;
      Arr2InnerAllCaps = array of Arr1InnerAllCaps;
      Arr3InnerAllCaps = array of Arr2InnerAllCaps;
      InnerLengthFilter = class external 'android.text' name 'LengthFilter' (JLObject, ATInputFilter)
      public
        constructor create(para1: jint); overload;
        function filter(para1: JLCharSequence; para2: jint; para3: jint; para4: ATSpanned; para5: jint; para6: jint): JLCharSequence; overload; virtual;
        function getMax(): jint; overload; virtual;
      end;

      InnerAllCaps = class external 'android.text' name 'AllCaps' (JLObject, ATInputFilter)
      public
        constructor create(); overload;
        function filter(para1: JLCharSequence; para2: jint; para3: jint; para4: ATSpanned; para5: jint; para6: jint): JLCharSequence; overload; virtual;
      end;

    function filter(para1: JLCharSequence; para2: jint; para3: jint; para4: ATSpanned; para5: jint; para6: jint): JLCharSequence; overload;
  end;

  ATInputType = interface external 'android.text' name 'InputType' 
    const
      TYPE_CLASS_DATETIME = 4;
      TYPE_CLASS_NUMBER = 2;
      TYPE_CLASS_PHONE = 3;
      TYPE_CLASS_TEXT = 1;
      TYPE_DATETIME_VARIATION_DATE = 16;
      TYPE_DATETIME_VARIATION_NORMAL = 0;
      TYPE_DATETIME_VARIATION_TIME = 32;
      TYPE_MASK_CLASS = 15;
      TYPE_MASK_FLAGS = 16773120;
      TYPE_MASK_VARIATION = 4080;
      TYPE_NULL = 0;
      TYPE_NUMBER_FLAG_DECIMAL = 8192;
      TYPE_NUMBER_FLAG_SIGNED = 4096;
      TYPE_NUMBER_VARIATION_NORMAL = 0;
      TYPE_NUMBER_VARIATION_PASSWORD = 16;
      TYPE_TEXT_FLAG_AUTO_COMPLETE = 65536;
      TYPE_TEXT_FLAG_AUTO_CORRECT = 32768;
      TYPE_TEXT_FLAG_CAP_CHARACTERS = 4096;
      TYPE_TEXT_FLAG_CAP_SENTENCES = 16384;
      TYPE_TEXT_FLAG_CAP_WORDS = 8192;
      TYPE_TEXT_FLAG_IME_MULTI_LINE = 262144;
      TYPE_TEXT_FLAG_MULTI_LINE = 131072;
      TYPE_TEXT_FLAG_NO_SUGGESTIONS = 524288;
      TYPE_TEXT_VARIATION_EMAIL_ADDRESS = 32;
      TYPE_TEXT_VARIATION_EMAIL_SUBJECT = 48;
      TYPE_TEXT_VARIATION_FILTER = 176;
      TYPE_TEXT_VARIATION_LONG_MESSAGE = 80;
      TYPE_TEXT_VARIATION_NORMAL = 0;
      TYPE_TEXT_VARIATION_PASSWORD = 128;
      TYPE_TEXT_VARIATION_PERSON_NAME = 96;
      TYPE_TEXT_VARIATION_PHONETIC = 192;
      TYPE_TEXT_VARIATION_POSTAL_ADDRESS = 112;
      TYPE_TEXT_VARIATION_SHORT_MESSAGE = 64;
      TYPE_TEXT_VARIATION_URI = 16;
      TYPE_TEXT_VARIATION_VISIBLE_PASSWORD = 144;
      TYPE_TEXT_VARIATION_WEB_EDIT_TEXT = 160;
      TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS = 208;
      TYPE_TEXT_VARIATION_WEB_PASSWORD = 224;
  end;

  ATNoCopySpan = interface external 'android.text' name 'NoCopySpan' 
    type
      InnerConcrete = class;
      Arr1InnerConcrete = array of InnerConcrete;
      Arr2InnerConcrete = array of Arr1InnerConcrete;
      Arr3InnerConcrete = array of Arr2InnerConcrete;
      InnerConcrete = class external 'android.text' name 'Concrete' (JLObject, ATNoCopySpan)
      public
        constructor create(); overload;
      end;

  end;

  ATSelection = class external 'android.text' name 'Selection' (JLObject)
  public
    final class var
      fSELECTION_END: JLObject; external name 'SELECTION_END';
      fSELECTION_START: JLObject; external name 'SELECTION_START';
  public
    class function getSelectionStart(para1: JLCharSequence): jint; static; overload; final;
    class function getSelectionEnd(para1: JLCharSequence): jint; static; overload; final;
    class procedure setSelection(para1: ATSpannable; para2: jint; para3: jint); static; overload;
    class procedure setSelection(para1: ATSpannable; para2: jint); static; overload; final;
    class procedure selectAll(para1: ATSpannable); static; overload; final;
    class procedure extendSelection(para1: ATSpannable; para2: jint); static; overload; final;
    class procedure removeSelection(para1: ATSpannable); static; overload; final;
    class function moveUp(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function moveDown(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function moveLeft(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function moveRight(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function extendUp(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function extendDown(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function extendLeft(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function extendRight(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function extendToLeftEdge(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function extendToRightEdge(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function moveToLeftEdge(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
    class function moveToRightEdge(para1: ATSpannable; para2: ATLayout): jboolean; static; overload;
  end;

  ATSpannableStringInternal = class abstract external 'android.text' name 'SpannableStringInternal' (JLObject)
  public
    function length(): jint; overload; virtual; final;
    function charAt(para1: jint): jchar; overload; virtual; final;
    function toString(): JLString; overload; virtual; final;
    procedure getChars(para1: jint; para2: jint; para3: Arr1jchar; para4: jint); overload; virtual; final;
    procedure getChars(para1: jint; para2: jint; var para3: array of jchar; para4: jint); overload; virtual; final;
    function getSpanStart(para1: JLObject): jint; overload; virtual;
    function getSpanEnd(para1: JLObject): jint; overload; virtual;
    function getSpanFlags(para1: JLObject): jint; overload; virtual;
    function getSpans(para1: jint; para2: jint; para3: JLClass): Arr1JLObject; overload; virtual;
    function nextSpanTransition(para1: jint; para2: jint; para3: JLClass): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  ATFDateFormat = class external 'android.text.format' name 'DateFormat' (JLObject)
  public
    const
      AM_PM = 97 deprecated;
      CAPITAL_AM_PM = 65 deprecated;
      DATE = 100 deprecated;
      DAY = 69 deprecated;
      HOUR = 104 deprecated;
      HOUR_OF_DAY = 107 deprecated;
      MINUTE = 109 deprecated;
      MONTH = 77 deprecated;
      QUOTE = 39 deprecated;
      SECONDS = 115 deprecated;
      STANDALONE_MONTH = 76 deprecated;
      TIME_ZONE = 122 deprecated;
      YEAR = 121 deprecated;
  public
    constructor create(); overload;
    class function is24HourFormat(para1: ACContext): jboolean; static; overload;
    class function getBestDateTimePattern(para1: JULocale; para2: JLString): JLString; static; overload;
    class function getTimeFormat(para1: ACContext): JTDateFormat; static; overload;
    class function getDateFormat(para1: ACContext): JTDateFormat; static; overload;
    class function getLongDateFormat(para1: ACContext): JTDateFormat; static; overload;
    class function getMediumDateFormat(para1: ACContext): JTDateFormat; static; overload;
    class function getDateFormatOrder(para1: ACContext): Arr1jchar; static; overload;
    class function format(para1: JLCharSequence; para2: jlong): JLCharSequence; static; overload;
    class function format(para1: JLCharSequence; para2: JUDate): JLCharSequence; static; overload;
    class function format(para1: JLCharSequence; para2: JUCalendar): JLCharSequence; static; overload;
  end;

  ATFDateUtils = class external 'android.text.format' name 'DateUtils' (JLObject)
  public
    const
      ABBREV_MONTH_FORMAT = '%b' deprecated;
      ABBREV_WEEKDAY_FORMAT = '%a';
      DAY_IN_MILLIS = jlong(86400000);
      FORMAT_12HOUR = 64 deprecated;
      FORMAT_24HOUR = 128 deprecated;
      FORMAT_ABBREV_ALL = 524288;
      FORMAT_ABBREV_MONTH = 65536;
      FORMAT_ABBREV_RELATIVE = 262144;
      FORMAT_ABBREV_TIME = 16384;
      FORMAT_ABBREV_WEEKDAY = 32768;
      FORMAT_CAP_AMPM = 256 deprecated;
      FORMAT_CAP_MIDNIGHT = 4096 deprecated;
      FORMAT_CAP_NOON = 1024 deprecated;
      FORMAT_CAP_NOON_MIDNIGHT = 5120 deprecated;
      FORMAT_NO_MIDNIGHT = 2048;
      FORMAT_NO_MONTH_DAY = 32;
      FORMAT_NO_NOON = 512;
      FORMAT_NO_NOON_MIDNIGHT = 2560 deprecated;
      FORMAT_NO_YEAR = 8;
      FORMAT_NUMERIC_DATE = 131072;
      FORMAT_SHOW_DATE = 16;
      FORMAT_SHOW_TIME = 1;
      FORMAT_SHOW_WEEKDAY = 2;
      FORMAT_SHOW_YEAR = 4;
      FORMAT_UTC = 8192 deprecated;
      HOUR_IN_MILLIS = jlong(3600000);
      HOUR_MINUTE_24 = '%H:%M' deprecated;
      LENGTH_LONG = 10 deprecated;
      LENGTH_MEDIUM = 20 deprecated;
      LENGTH_SHORT = 30 deprecated;
      LENGTH_SHORTER = 40 deprecated;
      LENGTH_SHORTEST = 50 deprecated;
      MINUTE_IN_MILLIS = jlong(60000);
      MONTH_DAY_FORMAT = '%-d';
      MONTH_FORMAT = '%B';
      NUMERIC_MONTH_FORMAT = '%m';
      SECOND_IN_MILLIS = jlong(1000);
      WEEKDAY_FORMAT = '%A';
      WEEK_IN_MILLIS = jlong(604800000);
      YEAR_FORMAT = '%Y';
      YEAR_FORMAT_TWO_DIGITS = '%g';
      YEAR_IN_MILLIS = jlong(31449600000);
  public
    final class var
      fsameMonthTable: Arr1jint deprecated; external name 'sameMonthTable';
      fsameYearTable: Arr1jint deprecated; external name 'sameYearTable';
  public
    constructor create(); overload;
    class function getDayOfWeekString(para1: jint; para2: jint): JLString; static; overload;
    class function getAMPMString(para1: jint): JLString; static; overload;
    class function getMonthString(para1: jint; para2: jint): JLString; static; overload;
    class function getRelativeTimeSpanString(para1: jlong): JLCharSequence; static; overload;
    class function getRelativeTimeSpanString(para1: jlong; para2: jlong; para3: jlong): JLCharSequence; static; overload;
    class function getRelativeTimeSpanString(para1: jlong; para2: jlong; para3: jlong; para4: jint): JLCharSequence; static; overload;
    class function getRelativeDateTimeString(para1: ACContext; para2: jlong; para3: jlong; para4: jlong; para5: jint): JLCharSequence; static; overload;
    class function formatElapsedTime(para1: jlong): JLString; static; overload;
    class function formatElapsedTime(para1: JLStringBuilder; para2: jlong): JLString; static; overload;
    class function formatSameDayTime(para1: jlong; para2: jlong; para3: jint; para4: jint): JLCharSequence; static; overload; final;
    class function isToday(para1: jlong): jboolean; static; overload;
    class function formatDateRange(para1: ACContext; para2: jlong; para3: jlong; para4: jint): JLString; static; overload;
    class function formatDateRange(para1: ACContext; para2: JUFormatter; para3: jlong; para4: jlong; para5: jint): JUFormatter; static; overload;
    class function formatDateRange(para1: ACContext; para2: JUFormatter; para3: jlong; para4: jlong; para5: jint; para6: JLString): JUFormatter; static; overload;
    class function formatDateTime(para1: ACContext; para2: jlong; para3: jint): JLString; static; overload;
    class function getRelativeTimeSpanString(para1: ACContext; para2: jlong; para3: jboolean): JLCharSequence; static; overload;
    class function getRelativeTimeSpanString(para1: ACContext; para2: jlong): JLCharSequence; static; overload;
  end;

  ATFFormatter = class sealed external 'android.text.format' name 'Formatter' (JLObject)
  public
    constructor create(); overload;
    class function formatFileSize(para1: ACContext; para2: jlong): JLString; static; overload;
    class function formatShortFileSize(para1: ACContext; para2: jlong): JLString; static; overload;
    class function formatIpAddress(para1: jint): JLString; static; overload;
  end;

  ATFTime = class external 'android.text.format' name 'Time' (JLObject)
  public
    const
      EPOCH_JULIAN_DAY = 2440588;
      FRIDAY = 5;
      HOUR = 3;
      MINUTE = 2;
      MONDAY = 1;
      MONDAY_BEFORE_JULIAN_EPOCH = 2440585;
      MONTH = 5;
      MONTH_DAY = 4;
      SATURDAY = 6;
      SECOND = 1;
      SUNDAY = 0;
      THURSDAY = 4;
      TIMEZONE_UTC = 'UTC';
      TUESDAY = 2;
      WEDNESDAY = 3;
      WEEK_DAY = 7;
      WEEK_NUM = 9;
      YEAR = 6;
      YEAR_DAY = 8;
  public
    var
      fallDay: jboolean; external name 'allDay';
      fgmtoff: jlong; external name 'gmtoff';
      fhour: jint; external name 'hour';
      fisDst: jint; external name 'isDst';
      fminute: jint; external name 'minute';
      fmonth: jint; external name 'month';
      fmonthDay: jint; external name 'monthDay';
      fsecond: jint; external name 'second';
      ftimezone: JLString; external name 'timezone';
      fweekDay: jint; external name 'weekDay';
      fyear: jint; external name 'year';
      fyearDay: jint; external name 'yearDay';
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: ATFTime); overload;
    function normalize(para1: jboolean): jlong; overload; virtual;
    procedure switchTimezone(para1: JLString); overload; virtual;
    function getActualMaximum(para1: jint): jint; overload; virtual;
    procedure clear(para1: JLString); overload; virtual;
    class function compare(para1: ATFTime; para2: ATFTime): jint; static; overload;
    function format(para1: JLString): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function parse(para1: JLString): jboolean; overload; virtual;
    function parse3339(para1: JLString): jboolean; overload; virtual;
    class function getCurrentTimezone(): JLString; static; overload;
    procedure setToNow(); overload; virtual;
    function toMillis(para1: jboolean): jlong; overload; virtual;
    procedure &set(para1: jlong); overload; virtual;
    function format2445(): JLString; overload; virtual;
    procedure &set(para1: ATFTime); overload; virtual;
    procedure &set(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload; virtual;
    procedure &set(para1: jint; para2: jint; para3: jint); overload; virtual;
    function before(para1: ATFTime): jboolean; overload; virtual;
    function after(para1: ATFTime): jboolean; overload; virtual;
    function getWeekNumber(): jint; overload; virtual;
    function format3339(para1: jboolean): JLString; overload; virtual;
    class function isEpoch(para1: ATFTime): jboolean; static; overload;
    class function getJulianDay(para1: jlong; para2: jlong): jint; static; overload;
    function setJulianDay(para1: jint): jlong; overload; virtual;
    class function getWeeksSinceEpochFromJulianDay(para1: jint; para2: jint): jint; static; overload;
    class function getJulianMondayFromWeeksSinceEpoch(para1: jint): jint; static; overload;
  end;

  ATMKeyListener = interface external 'android.text.method' name 'KeyListener' 
    function getInputType(): jint; overload;
    function onKeyDown(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload;
    function onKeyUp(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload;
    function onKeyOther(para1: AVView; para2: ATEditable; para3: AVKeyEvent): jboolean; overload;
    procedure clearMetaKeyState(para1: AVView; para2: ATEditable; para3: jint); overload;
  end;

  ATMMetaKeyKeyListener = class abstract external 'android.text.method' name 'MetaKeyKeyListener' (JLObject)
  public
    const
      META_ALT_LOCKED = 512;
      META_ALT_ON = 2;
      META_CAP_LOCKED = 256;
      META_SHIFT_ON = 1;
      META_SYM_LOCKED = 1024;
      META_SYM_ON = 4;
  public
    constructor create(); overload;
    class procedure resetMetaState(para1: ATSpannable); static; overload;
    class function getMetaState(para1: JLCharSequence): jint; static; overload; final;
    class function getMetaState(para1: JLCharSequence; para2: AVKeyEvent): jint; static; overload; final;
    class function getMetaState(para1: JLCharSequence; para2: jint): jint; static; overload; final;
    class function getMetaState(para1: JLCharSequence; para2: jint; para3: AVKeyEvent): jint; static; overload; final;
    class procedure adjustMetaAfterKeypress(para1: ATSpannable); static; overload;
    class function isMetaTracker(para1: JLCharSequence; para2: JLObject): jboolean; static; overload;
    class function isSelectingMetaTracker(para1: JLCharSequence; para2: JLObject): jboolean; static; overload;
  strict protected
    class procedure resetLockedMeta(para1: ATSpannable); static; overload;
  public
    function onKeyDown(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    procedure clearMetaKeyState(para1: AVView; para2: ATEditable; para3: jint); overload; virtual;
    class procedure clearMetaKeyState(para1: ATEditable; para2: jint); static; overload;
    class function resetLockedMeta(para1: jlong): jlong; static; overload;
    class function getMetaState(para1: jlong): jint; static; overload; final;
    class function getMetaState(para1: jlong; para2: jint): jint; static; overload; final;
    class function adjustMetaAfterKeypress(para1: jlong): jlong; static; overload;
    class function handleKeyDown(para1: jlong; para2: jint; para3: AVKeyEvent): jlong; static; overload;
    class function handleKeyUp(para1: jlong; para2: jint; para3: AVKeyEvent): jlong; static; overload;
    function clearMetaKeyState(para1: jlong; para2: jint): jlong; overload; virtual;
  end;

  ATMMovementMethod = interface external 'android.text.method' name 'MovementMethod' 
    procedure initialize(para1: AWTextView; para2: ATSpannable); overload;
    function onKeyDown(para1: AWTextView; para2: ATSpannable; para3: jint; para4: AVKeyEvent): jboolean; overload;
    function onKeyUp(para1: AWTextView; para2: ATSpannable; para3: jint; para4: AVKeyEvent): jboolean; overload;
    function onKeyOther(para1: AWTextView; para2: ATSpannable; para3: AVKeyEvent): jboolean; overload;
    procedure onTakeFocus(para1: AWTextView; para2: ATSpannable; para3: jint); overload;
    function onTrackballEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload;
    function onTouchEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload;
    function onGenericMotionEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload;
    function canSelectArbitrarily(): jboolean; overload;
  end;

  ATMTouch = class external 'android.text.method' name 'Touch' (JLObject)
  public
    class procedure scrollTo(para1: AWTextView; para2: ATLayout; para3: jint; para4: jint); static; overload;
    class function onTouchEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; static; overload;
    class function getInitialScrollX(para1: AWTextView; para2: ATSpannable): jint; static; overload;
    class function getInitialScrollY(para1: AWTextView; para2: ATSpannable): jint; static; overload;
  end;

  ATMTransformationMethod = interface external 'android.text.method' name 'TransformationMethod' 
    function getTransformation(para1: JLCharSequence; para2: AVView): JLCharSequence; overload;
    procedure onFocusChanged(para1: AVView; para2: JLCharSequence; para3: jboolean; para4: jint; para5: AGRect); overload;
  end;

  ATSCharacterStyle = class abstract external 'android.text.style' name 'CharacterStyle' (JLObject)
  public
    constructor create(); overload;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual; abstract;
    class function wrap(para1: ATSCharacterStyle): ATSCharacterStyle; static; overload;
    function getUnderlying(): ATSCharacterStyle; overload; virtual;
  end;

  ATSParagraphStyle = interface external 'android.text.style' name 'ParagraphStyle' 
  end;

  ATSUpdateAppearance = interface external 'android.text.style' name 'UpdateAppearance' 
  end;

  ATULinkify = class external 'android.text.util' name 'Linkify' (JLObject)
  public
    type
      InnerTransformFilter = interface;
      Arr1InnerTransformFilter = array of InnerTransformFilter;
      Arr2InnerTransformFilter = array of Arr1InnerTransformFilter;
      Arr3InnerTransformFilter = array of Arr2InnerTransformFilter;
      InnerMatchFilter = interface;
      Arr1InnerMatchFilter = array of InnerMatchFilter;
      Arr2InnerMatchFilter = array of Arr1InnerMatchFilter;
      Arr3InnerMatchFilter = array of Arr2InnerMatchFilter;
      InnerTransformFilter = interface external 'android.text.util' name 'TransformFilter' 
        function transformUrl(para1: JURMatcher; para2: JLString): JLString; overload;
      end;

      InnerMatchFilter = interface external 'android.text.util' name 'MatchFilter' 
        function acceptMatch(para1: JLCharSequence; para2: jint; para3: jint): jboolean; overload;
      end;

  public
    const
      ALL = 15;
      EMAIL_ADDRESSES = 2;
      MAP_ADDRESSES = 8;
      PHONE_NUMBERS = 4;
      WEB_URLS = 1;
  public
    final class var
      fsPhoneNumberMatchFilter: ATULinkify.InnerMatchFilter; external name 'sPhoneNumberMatchFilter';
      fsPhoneNumberTransformFilter: ATULinkify.InnerTransformFilter; external name 'sPhoneNumberTransformFilter';
      fsUrlMatchFilter: ATULinkify.InnerMatchFilter; external name 'sUrlMatchFilter';
  public
    constructor create(); overload;
    class function addLinks(para1: ATSpannable; para2: jint): jboolean; static; overload; final;
    class function addLinks(para1: AWTextView; para2: jint): jboolean; static; overload; final;
    class procedure addLinks(para1: AWTextView; para2: JURPattern; para3: JLString); static; overload; final;
    class procedure addLinks(para1: AWTextView; para2: JURPattern; para3: JLString; para4: ATULinkify.InnerMatchFilter; para5: ATULinkify.InnerTransformFilter); static; overload; final;
    class function addLinks(para1: ATSpannable; para2: JURPattern; para3: JLString): jboolean; static; overload; final;
    class function addLinks(para1: ATSpannable; para2: JURPattern; para3: JLString; para4: ATULinkify.InnerMatchFilter; para5: ATULinkify.InnerTransformFilter): jboolean; static; overload; final;
  end;

  ATURfc822Token = class external 'android.text.util' name 'Rfc822Token' (JLObject)
  public
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;
    function getName(): JLString; overload; virtual;
    function getAddress(): JLString; overload; virtual;
    function getComment(): JLString; overload; virtual;
    procedure setName(para1: JLString); overload; virtual;
    procedure setAddress(para1: JLString); overload; virtual;
    procedure setComment(para1: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
    class function quoteNameIfNecessary(para1: JLString): JLString; static; overload;
    class function quoteName(para1: JLString): JLString; static; overload;
    class function quoteComment(para1: JLString): JLString; static; overload;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  AUAttributeSet = interface external 'android.util' name 'AttributeSet' 
    function getAttributeCount(): jint; overload;
    function getAttributeName(para1: jint): JLString; overload;
    function getAttributeValue(para1: jint): JLString; overload;
    function getAttributeValue(para1: JLString; para2: JLString): JLString; overload;
    function getPositionDescription(): JLString; overload;
    function getAttributeNameResource(para1: jint): jint; overload;
    function getAttributeListValue(para1: JLString; para2: JLString; para3: Arr1JLString; para4: jint): jint; overload;
    function getAttributeListValue(para1: JLString; para2: JLString; var para3: array of JLString; para4: jint): jint; overload;
    function getAttributeBooleanValue(para1: JLString; para2: JLString; para3: jboolean): jboolean; overload;
    function getAttributeResourceValue(para1: JLString; para2: JLString; para3: jint): jint; overload;
    function getAttributeIntValue(para1: JLString; para2: JLString; para3: jint): jint; overload;
    function getAttributeUnsignedIntValue(para1: JLString; para2: JLString; para3: jint): jint; overload;
    function getAttributeFloatValue(para1: JLString; para2: JLString; para3: jfloat): jfloat; overload;
    function getAttributeListValue(para1: jint; para2: Arr1JLString; para3: jint): jint; overload;
    function getAttributeListValue(para1: jint; var para2: array of JLString; para3: jint): jint; overload;
    function getAttributeBooleanValue(para1: jint; para2: jboolean): jboolean; overload;
    function getAttributeResourceValue(para1: jint; para2: jint): jint; overload;
    function getAttributeIntValue(para1: jint; para2: jint): jint; overload;
    function getAttributeUnsignedIntValue(para1: jint; para2: jint): jint; overload;
    function getAttributeFloatValue(para1: jint; para2: jfloat): jfloat; overload;
    function getIdAttribute(): JLString; overload;
    function getClassAttribute(): JLString; overload;
    function getIdAttributeResourceValue(para1: jint): jint; overload;
    function getStyleAttribute(): jint; overload;
  end;

  AUBase64 = class external 'android.util' name 'Base64' (JLObject)
  public
    const
      CRLF = 4;
      DEFAULT = 0;
      NO_CLOSE = 16;
      NO_PADDING = 1;
      NO_WRAP = 2;
      URL_SAFE = 8;
  public
    class function decode(para1: JLString; para2: jint): Arr1jbyte; static; overload;
    class function decode(para1: Arr1jbyte; para2: jint): Arr1jbyte; static; overload;
    class function decode(var para1: array of jbyte; para2: jint): Arr1jbyte; static; overload;
    class function decode(para1: Arr1jbyte; para2: jint; para3: jint; para4: jint): Arr1jbyte; static; overload;
    class function decode(var para1: array of jbyte; para2: jint; para3: jint; para4: jint): Arr1jbyte; static; overload;
    class function encodeToString(para1: Arr1jbyte; para2: jint): JLString; static; overload;
    class function encodeToString(var para1: array of jbyte; para2: jint): JLString; static; overload;
    class function encodeToString(para1: Arr1jbyte; para2: jint; para3: jint; para4: jint): JLString; static; overload;
    class function encodeToString(var para1: array of jbyte; para2: jint; para3: jint; para4: jint): JLString; static; overload;
    class function encode(para1: Arr1jbyte; para2: jint): Arr1jbyte; static; overload;
    class function encode(var para1: array of jbyte; para2: jint): Arr1jbyte; static; overload;
    class function encode(para1: Arr1jbyte; para2: jint; para3: jint; para4: jint): Arr1jbyte; static; overload;
    class function encode(var para1: array of jbyte; para2: jint; para3: jint; para4: jint): Arr1jbyte; static; overload;
  end;

  AUConfig = class sealed external 'android.util' name 'Config' (JLObject)
  public
    const
      DEBUG = 0 deprecated;
      LOGD = 1 deprecated;
      LOGV = 0 deprecated;
      PROFILE = 0 deprecated;
      RELEASE = 1 deprecated;
  end;

  AUDebugUtils = class external 'android.util' name 'DebugUtils' (JLObject)
  public
    class function isObjectSelected(para1: JLObject): jboolean; static; overload;
  end;

  AUDisplayMetrics = class external 'android.util' name 'DisplayMetrics' (JLObject)
  public
    const
      DENSITY_400 = 400;
      DENSITY_560 = 560;
      DENSITY_DEFAULT = 160;
      DENSITY_HIGH = 240;
      DENSITY_LOW = 120;
      DENSITY_MEDIUM = 160;
      DENSITY_TV = 213;
      DENSITY_XHIGH = 320;
      DENSITY_XXHIGH = 480;
      DENSITY_XXXHIGH = 640;
  public
    var
      fdensity: jfloat; external name 'density';
      fdensityDpi: jint; external name 'densityDpi';
      fheightPixels: jint; external name 'heightPixels';
      fscaledDensity: jfloat; external name 'scaledDensity';
      fwidthPixels: jint; external name 'widthPixels';
      fxdpi: jfloat; external name 'xdpi';
      fydpi: jfloat; external name 'ydpi';
  public
    constructor create(); overload;
    procedure setTo(para1: AUDisplayMetrics); overload; virtual;
    procedure setToDefaults(); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function equals(para1: AUDisplayMetrics): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AUEventLog = class external 'android.util' name 'EventLog' (JLObject)
  public
    type
      InnerEvent = class;
      Arr1InnerEvent = array of InnerEvent;
      Arr2InnerEvent = array of Arr1InnerEvent;
      Arr3InnerEvent = array of Arr2InnerEvent;
      InnerEvent = class sealed external 'android.util' name 'Event' (JLObject)
      public
        function getProcessId(): jint; overload; virtual;
        function getThreadId(): jint; overload; virtual;
        function getTimeNanos(): jlong; overload; virtual;
        function getTag(): jint; overload; virtual;
        function getData(): JLObject; overload; virtual;
      end;

  public
    class function writeEvent(para1: jint; para2: jint): jint; static; overload;
    class function writeEvent(para1: jint; para2: jlong): jint; static; overload;
    class function writeEvent(para1: jint; para2: JLString): jint; static; overload;
    class function writeEvent(para1: jint; para2: Arr1JLObject): jint; static; overload;
    class function writeEvent(para1: jint; const para2: array of JLObject): jint; static; overload;
    class procedure readEvents(para1: Arr1jint; para2: JUCollection); static; overload;  // throws java.io.IOException
    class procedure readEvents(var para1: array of jint; para2: JUCollection); static; overload;  // throws java.io.IOException
    class function getTagName(para1: jint): JLString; static; overload;
    class function getTagCode(para1: JLString): jint; static; overload;
  end;

  AUEventLogTags = class external 'android.util' name 'EventLogTags' (JLObject)
  public
    type
      InnerDescription = class;
      Arr1InnerDescription = array of InnerDescription;
      Arr2InnerDescription = array of Arr1InnerDescription;
      Arr3InnerDescription = array of Arr2InnerDescription;
      InnerDescription = class external 'android.util' name 'Description' (JLObject)
      public
        final var
          fmName: JLString; external name 'mName';
          fmTag: jint; external name 'mTag';
      end;

  public
    constructor create(); overload;  // throws java.io.IOException
    constructor create(para1: JIBufferedReader); overload;  // throws java.io.IOException
    function get(para1: JLString): AUEventLogTags.InnerDescription; overload; virtual;
    function get(para1: jint): AUEventLogTags.InnerDescription; overload; virtual;
  end;

  AUFloatMath = class external 'android.util' name 'FloatMath' (JLObject)
  public
    class function floor(para1: jfloat): jfloat; static; overload;
    class function ceil(para1: jfloat): jfloat; static; overload;
    class function sin(para1: jfloat): jfloat; static; overload;
    class function cos(para1: jfloat): jfloat; static; overload;
    class function sqrt(para1: jfloat): jfloat; static; overload;
    class function exp(para1: jfloat): jfloat; static; overload;
    class function pow(para1: jfloat; para2: jfloat): jfloat; static; overload;
    class function hypot(para1: jfloat; para2: jfloat): jfloat; static; overload;
  end;

  AULog = class sealed external 'android.util' name 'Log' (JLObject)
  public
    const
      ASSERT = 7;
      DEBUG = 3;
      ERROR = 6;
      INFO = 4;
      VERBOSE = 2;
      WARN = 5;
  public
    class function v(para1: JLString; para2: JLString): jint; static; overload;
    class function v(para1: JLString; para2: JLString; para3: JLThrowable): jint; static; overload;
    class function d(para1: JLString; para2: JLString): jint; static; overload;
    class function d(para1: JLString; para2: JLString; para3: JLThrowable): jint; static; overload;
    class function i(para1: JLString; para2: JLString): jint; static; overload;
    class function i(para1: JLString; para2: JLString; para3: JLThrowable): jint; static; overload;
    class function w(para1: JLString; para2: JLString): jint; static; overload;
    class function w(para1: JLString; para2: JLString; para3: JLThrowable): jint; static; overload;
    class function isLoggable(para1: JLString; para2: jint): jboolean; static; overload;
    class function w(para1: JLString; para2: JLThrowable): jint; static; overload;
    class function e(para1: JLString; para2: JLString): jint; static; overload;
    class function e(para1: JLString; para2: JLString; para3: JLThrowable): jint; static; overload;
    class function wtf(para1: JLString; para2: JLString): jint; static; overload;
    class function wtf(para1: JLString; para2: JLThrowable): jint; static; overload;
    class function wtf(para1: JLString; para2: JLString; para3: JLThrowable): jint; static; overload;
    class function getStackTraceString(para1: JLThrowable): JLString; static; overload;
    class function println(para1: jint; para2: JLString; para3: JLString): jint; static; overload;
  end;

  AULruCache = class external 'android.util' name 'LruCache' (JLObject)
  public
    constructor create(para1: jint); overload;
    procedure resize(para1: jint); overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual; final;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual; final;
    procedure trimToSize(para1: jint); overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual; final;
  strict protected
    procedure entryRemoved(para1: jboolean; para2: JLObject; para3: JLObject; para4: JLObject); overload; virtual;
    function create_(para1: JLObject): JLObject; external name 'create'; overload; virtual;
    function sizeOf(para1: JLObject; para2: JLObject): jint; overload; virtual;
  public
    procedure evictAll(); overload; virtual; final;
    function size(): jint; overload; virtual; final;
    function maxSize(): jint; overload; virtual; final;
    function hitCount(): jint; overload; virtual; final;
    function missCount(): jint; overload; virtual; final;
    function createCount(): jint; overload; virtual; final;
    function putCount(): jint; overload; virtual; final;
    function evictionCount(): jint; overload; virtual; final;
    function snapshot(): JUMap; overload; virtual; final;
    function toString(): JLString; overload; virtual; final;
  end;

  AUMonthDisplayHelper = class external 'android.util' name 'MonthDisplayHelper' (JLObject)
  public
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    constructor create(para1: jint; para2: jint); overload;
    function getYear(): jint; overload; virtual;
    function getMonth(): jint; overload; virtual;
    function getWeekStartDay(): jint; overload; virtual;
    function getFirstDayOfMonth(): jint; overload; virtual;
    function getNumberOfDaysInMonth(): jint; overload; virtual;
    function getOffset(): jint; overload; virtual;
    function getDigitsForRow(para1: jint): Arr1jint; overload; virtual;
    function getDayAt(para1: jint; para2: jint): jint; overload; virtual;
    function getRowOf(para1: jint): jint; overload; virtual;
    function getColumnOf(para1: jint): jint; overload; virtual;
    procedure previousMonth(); overload; virtual;
    procedure nextMonth(); overload; virtual;
    function isWithinCurrentMonth(para1: jint; para2: jint): jboolean; overload; virtual;
  end;

  AUPair = class external 'android.util' name 'Pair' (JLObject)
  public
    final var
      ffirst: JLObject; external name 'first';
      fsecond: JLObject; external name 'second';
  public
    constructor create(para1: JLObject; para2: JLObject); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    class function create_(para1: JLObject; para2: JLObject): AUPair; static; external name 'create'; overload;
  end;

  AUPatterns = class external 'android.util' name 'Patterns' (JLObject)
  public
    final class var
      fDOMAIN_NAME: JURPattern; external name 'DOMAIN_NAME';
      fEMAIL_ADDRESS: JURPattern; external name 'EMAIL_ADDRESS';
  public
    const
      GOOD_IRI_CHAR = 'a-zA-Z0-9'#$00a0'-'#$d7ff''#$f900'-'#$fdcf''#$fdf0'-'#$ffef'';
  public
    final class var
      fIP_ADDRESS: JURPattern; external name 'IP_ADDRESS';
      fPHONE: JURPattern; external name 'PHONE';
      fTOP_LEVEL_DOMAIN: JURPattern deprecated; external name 'TOP_LEVEL_DOMAIN';
  public
    const
      TOP_LEVEL_DOMAIN_STR = '((aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(biz|b[abdefghijmnorstvwyz])|(cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(edu|e[cegrstu])|f[ijkmor]|(gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(info|int|i[delmnoqrst])|(jobs|j[emop])|k[eghimnprwyz]|l[abcikrstuvy]|(mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])|(name|net|n[acefgilopruz])|(org|om)|(pro|p[aefghklmnrstwy])|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|(tel|travel|t[cdfghjklmnoprtvwz])|u[agksyz]|v[aceginu]|w[fs]|('#$03b4''#$03bf''#$03ba''#$03b9''#$03bc''#$03ae'|'#$0438''#$0441''#$043f''#$044b''#$0442''#$0430''#$043d''#$0438''#$0435'|'#$0440''#$0444'|'#$0441''#$0440''#$0431'|'#$05d8''#$05e2''#$05e1''#$05d8'|'#$0622''#$0632''#$0645''#$0627''#$06cc''#$0634''#$06cc'|'#$0625''#$062e''#$062a''#$0628''#$0627''#$0631'|'#$0627''#$0644''#$0627''#$0631''#$062f''#$0646'|'#$0627''#$0644''#$062c''#$0632''#$0627''#$0626''#$0631'|'#$0627''#$0644''#$0633''#$0639''#$0648''#$062f''#$064a''#$0629'|'#$0627''#$0644''#$0645''#$063a''#$0631''#$0628'|'#$0627''#$0645''#$0627''#$0631''#$0627''#$062a'|'#$0628''#$06be''#$0627''#$0631''#$062a'|'#$062a''#$0648''#$0646''#$0633'|'#$0633''#$0648''#$0631''#$064a''#$0629'|'#$0641''#$0644''#$0633''#$0637''#$064a''#$0646'|'#$0642''#$0637''#$0631'|'#$0645''#$0635''#$0631'|'#$092a''#$0930''#$0940''#$0915''#$094d''#$0937''#$093e'|'#$092d''#$093e''#$0930''#$0924'|'#$09ad''#$09be''#$09b0''#$09a4'|'#$0a2d''#$0a3e''#$0a30''#$0a24'|'#$0aad''#$0abe''#$0ab0''#$0aa4'|'#$0b87''#$0ba8''#$0bcd''#$0ba4''#$0bbf''#$0baf''#$0bbe'|'#$0b87''#$0bb2''#$0b99''#$0bcd''#$0b95''#$0bc8'|'#$0b9a''#$0bbf''#$0b99''#$0bcd''#$0b95''#$0baa''#$0bcd''#$0baa''#$0bc2''#$0bb0''#$0bcd'|'#$0baa''#$0bb0''#$0bbf''#$0b9f''#$0bcd''#$0b9a''#$0bc8'|'#$0c2d''#$0c3e''#$0c30''#$0c24''#$0c4d'|'#$0dbd''#$0d82''#$0d9a''#$0dcf'|'#$0e44''#$0e17''#$0e22'|'#$30c6''#$30b9''#$30c8'|'#$4e2d''#$56fd'|'#$4e2d''#$570b'|'#$53f0''#$6e7e'|'#$53f0''#$7063'|'#$65b0''#$52a0''#$5761'|'#$6d4b''#$8bd5'|'#$6e2c''#$8a66'|'#$9999''#$6e2f'|'#$d14c''#$c2a4''#$d2b8'|'#$d55c''#$ad6d'|xn\-\-0zwm56d|xn\-\-11b5bs3a9aj6g|xn\-\-3e0b707e|xn\-\-45brj9c|xn\-\-80akhbyknj4f|xn\-\-90a3ac|xn\-\-9t4b11yi5a|xn\-\-clchc0ea0b2g2a9gcd|xn\-\-deba0ad|xn\-\-fiqs8s|xn\-\-fiqz9s|xn\-\-fpcrj9c3d|xn\-\-fzc2c9e2c|xn\-\-g6w251d|xn\-\-gecrj9c|xn\-\-h2brj9c|xn\-\-hgbk6aj7f53bba|xn\-\-hlcj6aya9esc7a|xn\-\-j6w193g|xn\-\-jxalpdlp|xn\-\-kgbechtv|xn\-\-kprw13d|xn\-\-kpry57d|xn\-\-lgbbat1ad8j|xn\-\-mgbaam7a8h|xn\-\-mgbayh7gpa|xn\-\-mgbbh1a71e|xn\-\-mgbc0a9azcg|xn\-\-mgberp4a5d4ar|xn\-\-o3cw4h|xn\-\-ogbpf8fl|xn\-\-p1ai|xn\-\-pgbs0dh|xn\-\-s9brj9c|xn\-\-wgbh1c|xn\-\-wgbl6a|xn\-\-xkc2al3hye2a|xn\-\-xkc2dl3a5ee0h|xn\-\-yfro4i67o|xn\-\-ygbi2ammx|xn\-\-zckzah|xxx)|y[et]|z[amw])' deprecated;
      TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL = '(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnprwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agksyz]|v[aceginu]|w[fs]|(?:'#$03b4''#$03bf''#$03ba''#$03b9''#$03bc''#$03ae'|'#$0438''#$0441''#$043f''#$044b''#$0442''#$0430''#$043d''#$0438''#$0435'|'#$0440''#$0444'|'#$0441''#$0440''#$0431'|'#$05d8''#$05e2''#$05e1''#$05d8'|'#$0622''#$0632''#$0645''#$0627''#$06cc''#$0634''#$06cc'|'#$0625''#$062e''#$062a''#$0628''#$0627''#$0631'|'#$0627''#$0644''#$0627''#$0631''#$062f''#$0646'|'#$0627''#$0644''#$062c''#$0632''#$0627''#$0626''#$0631'|'#$0627''#$0644''#$0633''#$0639''#$0648''#$062f''#$064a''#$0629'|'#$0627''#$0644''#$0645''#$063a''#$0631''#$0628'|'#$0627''#$0645''#$0627''#$0631''#$0627''#$062a'|'#$0628''#$06be''#$0627''#$0631''#$062a'|'#$062a''#$0648''#$0646''#$0633'|'#$0633''#$0648''#$0631''#$064a''#$0629'|'#$0641''#$0644''#$0633''#$0637''#$064a''#$0646'|'#$0642''#$0637''#$0631'|'#$0645''#$0635''#$0631'|'#$092a''#$0930''#$0940''#$0915''#$094d''#$0937''#$093e'|'#$092d''#$093e''#$0930''#$0924'|'#$09ad''#$09be''#$09b0''#$09a4'|'#$0a2d''#$0a3e''#$0a30''#$0a24'|'#$0aad''#$0abe''#$0ab0''#$0aa4'|'#$0b87''#$0ba8''#$0bcd''#$0ba4''#$0bbf''#$0baf''#$0bbe'|'#$0b87''#$0bb2''#$0b99''#$0bcd''#$0b95''#$0bc8'|'#$0b9a''#$0bbf''#$0b99''#$0bcd''#$0b95''#$0baa''#$0bcd''#$0baa''#$0bc2''#$0bb0''#$0bcd'|'#$0baa''#$0bb0''#$0bbf''#$0b9f''#$0bcd''#$0b9a''#$0bc8'|'#$0c2d''#$0c3e''#$0c30''#$0c24''#$0c4d'|'#$0dbd''#$0d82''#$0d9a''#$0dcf'|'#$0e44''#$0e17''#$0e22'|'#$30c6''#$30b9''#$30c8'|'#$4e2d''#$56fd'|'#$4e2d''#$570b'|'#$53f0''#$6e7e'|'#$53f0''#$7063'|'#$65b0''#$52a0''#$5761'|'#$6d4b''#$8bd5'|'#$6e2c''#$8a66'|'#$9999''#$6e2f'|'#$d14c''#$c2a4''#$d2b8'|'#$d55c''#$ad6d'|xn\-\-0zwm56d|xn\-\-11b5bs3a9aj6g|xn\-\-3e0b707e|xn\-\-45brj9c|xn\-\-80akhbyknj4f|xn\-\-90a3ac|xn\-\-9t4b11yi5a|xn\-\-clchc0ea0b2g2a9gcd|xn\-\-deba0ad|xn\-\-fiqs8s|xn\-\-fiqz9s|xn\-\-fpcrj9c3d|xn\-\-fzc2c9e2c|xn\-\-g6w251d|xn\-\-gecrj9c|xn\-\-h2brj9c|xn\-\-hgbk6aj7f53bba|xn\-\-hlcj6aya9esc7a|xn\-\-j6w193g|xn\-\-jxalpdlp|xn\-\-kgbechtv|xn\-\-kprw13d|xn\-\-kpry57d|xn\-\-lgbbat1ad8j|xn\-\-mgbaam7a8h|xn\-\-mgbayh7gpa|xn\-\-mgbbh1a71e|xn\-\-mgbc0a9azcg|xn\-\-mgberp4a5d4ar|xn\-\-o3cw4h|xn\-\-ogbpf8fl|xn\-\-p1ai|xn\-\-pgbs0dh|xn\-\-s9brj9c|xn\-\-wgbh1c|xn\-\-wgbl6a|xn\-\-xkc2al3hye2a|xn\-\-xkc2dl3a5ee0h|xn\-\-yfro4i67o|xn\-\-ygbi2ammx|xn\-\-zckzah|xxx)|y[et]|z[amw]))' deprecated;
  public
    final class var
      fWEB_URL: JURPattern; external name 'WEB_URL';
  public
    class function concatGroups(para1: JURMatcher): JLString; static; overload; final;
    class function digitsAndPlusOnly(para1: JURMatcher): JLString; static; overload; final;
  end;

  AUPrinter = interface external 'android.util' name 'Printer' 
    procedure println(para1: JLString); overload;
  end;

  AUProperty = class abstract external 'android.util' name 'Property' (JLObject)
  public
    constructor create(para1: JLClass; para2: JLString); overload;
    class function &of(para1: JLClass; para2: JLClass; para3: JLString): AUProperty; static; overload;
    function isReadOnly(): jboolean; overload; virtual;
    procedure &set(para1: JLObject; para2: JLObject); overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual; abstract;
    function getName(): JLString; overload; virtual;
    function getType(): JLClass; overload; virtual;
  end;

  AUStateSet = class external 'android.util' name 'StateSet' (JLObject)
  public
    final class var
      fNOTHING: Arr1jint; external name 'NOTHING';
      fWILD_CARD: Arr1jint; external name 'WILD_CARD';
  public
    class function isWildCard(para1: Arr1jint): jboolean; static; overload;
    class function isWildCard(var para1: array of jint): jboolean; static; overload;
    class function stateSetMatches(para1: Arr1jint; para2: Arr1jint): jboolean; static; overload;
    class function stateSetMatches(var para1: array of jint; var para2: array of jint): jboolean; static; overload;
    class function stateSetMatches(para1: Arr1jint; para2: jint): jboolean; static; overload;
    class function stateSetMatches(var para1: array of jint; para2: jint): jboolean; static; overload;
    class function trimStateSet(para1: Arr1jint; para2: jint): Arr1jint; static; overload;
    class function trimStateSet(var para1: array of jint; para2: jint): Arr1jint; static; overload;
    class function dump(para1: Arr1jint): JLString; static; overload;
    class function dump(var para1: array of jint): JLString; static; overload;
  end;

  AUTimeUtils = class external 'android.util' name 'TimeUtils' (JLObject)
  public
    class function getTimeZone(para1: jint; para2: jboolean; para3: jlong; para4: JLString): JUTimeZone; static; overload;
    class function getTimeZoneDatabaseVersion(): JLString; static; overload;
  end;

  AUTimingLogger = class external 'android.util' name 'TimingLogger' (JLObject)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    procedure reset(para1: JLString; para2: JLString); overload; virtual;
    procedure reset(); overload; virtual;
    procedure addSplit(para1: JLString); overload; virtual;
    procedure dumpToLog(); overload; virtual;
  end;

  AUTypedValue = class external 'android.util' name 'TypedValue' (JLObject)
  public
    const
      COMPLEX_MANTISSA_MASK = 16777215;
      COMPLEX_MANTISSA_SHIFT = 8;
      COMPLEX_RADIX_0p23 = 3;
      COMPLEX_RADIX_16p7 = 1;
      COMPLEX_RADIX_23p0 = 0;
      COMPLEX_RADIX_8p15 = 2;
      COMPLEX_RADIX_MASK = 3;
      COMPLEX_RADIX_SHIFT = 4;
      COMPLEX_UNIT_DIP = 1;
      COMPLEX_UNIT_FRACTION = 0;
      COMPLEX_UNIT_FRACTION_PARENT = 1;
      COMPLEX_UNIT_IN = 4;
      COMPLEX_UNIT_MASK = 15;
      COMPLEX_UNIT_MM = 5;
      COMPLEX_UNIT_PT = 3;
      COMPLEX_UNIT_PX = 0;
      COMPLEX_UNIT_SHIFT = 0;
      COMPLEX_UNIT_SP = 2;
      DENSITY_DEFAULT = 0;
      DENSITY_NONE = 65535;
      TYPE_ATTRIBUTE = 2;
      TYPE_DIMENSION = 5;
      TYPE_FIRST_COLOR_INT = 28;
      TYPE_FIRST_INT = 16;
      TYPE_FLOAT = 4;
      TYPE_FRACTION = 6;
      TYPE_INT_BOOLEAN = 18;
      TYPE_INT_COLOR_ARGB4 = 30;
      TYPE_INT_COLOR_ARGB8 = 28;
      TYPE_INT_COLOR_RGB4 = 31;
      TYPE_INT_COLOR_RGB8 = 29;
      TYPE_INT_DEC = 16;
      TYPE_INT_HEX = 17;
      TYPE_LAST_COLOR_INT = 31;
      TYPE_LAST_INT = 31;
      TYPE_NULL = 0;
      TYPE_REFERENCE = 1;
      TYPE_STRING = 3;
  public
    var
      fassetCookie: jint; external name 'assetCookie';
      fchangingConfigurations: jint; external name 'changingConfigurations';
      fdata: jint; external name 'data';
      fdensity: jint; external name 'density';
      fresourceId: jint; external name 'resourceId';
      fstring: JLCharSequence; external name 'string';
      ftype: jint; external name 'type';
  public
    constructor create(); overload;
    function getFloat(): jfloat; overload; virtual; final;
    class function complexToFloat(para1: jint): jfloat; static; overload;
    class function complexToDimension(para1: jint; para2: AUDisplayMetrics): jfloat; static; overload;
    class function complexToDimensionPixelOffset(para1: jint; para2: AUDisplayMetrics): jint; static; overload;
    class function complexToDimensionPixelSize(para1: jint; para2: AUDisplayMetrics): jint; static; overload;
    class function applyDimension(para1: jint; para2: jfloat; para3: AUDisplayMetrics): jfloat; static; overload;
    function getDimension(para1: AUDisplayMetrics): jfloat; overload; virtual;
    class function complexToFraction(para1: jint; para2: jfloat; para3: jfloat): jfloat; static; overload;
    function getFraction(para1: jfloat; para2: jfloat): jfloat; overload; virtual;
    function coerceToString(): JLCharSequence; overload; virtual; final;
    class function coerceToString(para1: jint; para2: jint): JLString; static; overload; final;
    procedure setTo(para1: AUTypedValue); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVActionMode = class abstract external 'android.view' name 'ActionMode' (JLObject)
  public
    type
      InnerCallback = interface;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = interface external 'android.view' name 'Callback' 
        function onCreateActionMode(para1: AVActionMode; para2: AVMenu): jboolean; overload;
        function onPrepareActionMode(para1: AVActionMode; para2: AVMenu): jboolean; overload;
        function onActionItemClicked(para1: AVActionMode; para2: AVMenuItem): jboolean; overload;
        procedure onDestroyActionMode(para1: AVActionMode); overload;
      end;

  public
    constructor create(); overload;
    procedure setTag(para1: JLObject); overload; virtual;
    function getTag(): JLObject; overload; virtual;
    procedure setTitle(para1: JLCharSequence); overload; virtual; abstract;
    procedure setTitle(para1: jint); overload; virtual; abstract;
    procedure setSubtitle(para1: JLCharSequence); overload; virtual; abstract;
    procedure setSubtitle(para1: jint); overload; virtual; abstract;
    procedure setTitleOptionalHint(para1: jboolean); overload; virtual;
    function getTitleOptionalHint(): jboolean; overload; virtual;
    function isTitleOptional(): jboolean; overload; virtual;
    procedure setCustomView(para1: AVView); overload; virtual; abstract;
    procedure invalidate(); overload; virtual; abstract;
    procedure finish(); overload; virtual; abstract;
    function getMenu(): AVMenu; overload; virtual; abstract;
    function getTitle(): JLCharSequence; overload; virtual; abstract;
    function getSubtitle(): JLCharSequence; overload; virtual; abstract;
    function getCustomView(): AVView; overload; virtual; abstract;
    function getMenuInflater(): AVMenuInflater; overload; virtual; abstract;
  end;

  AVActionProvider = class abstract external 'android.view' name 'ActionProvider' (JLObject)
  public
    type
      InnerVisibilityListener = interface;
      Arr1InnerVisibilityListener = array of InnerVisibilityListener;
      Arr2InnerVisibilityListener = array of Arr1InnerVisibilityListener;
      Arr3InnerVisibilityListener = array of Arr2InnerVisibilityListener;
      InnerVisibilityListener = interface external 'android.view' name 'VisibilityListener' 
        procedure onActionProviderVisibilityChanged(para1: jboolean); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    function onCreateActionView(): AVView; overload; virtual; abstract;
    function onCreateActionView(para1: AVMenuItem): AVView; overload; virtual;
    function overridesItemVisibility(): jboolean; overload; virtual;
    function isVisible(): jboolean; overload; virtual;
    procedure refreshVisibility(); overload; virtual;
    function onPerformDefaultAction(): jboolean; overload; virtual;
    function hasSubMenu(): jboolean; overload; virtual;
    procedure onPrepareSubMenu(para1: AVSubMenu); overload; virtual;
    procedure setVisibilityListener(para1: AVActionProvider.InnerVisibilityListener); overload; virtual;
  end;

  AVCollapsibleActionView = interface external 'android.view' name 'CollapsibleActionView' 
    procedure onActionViewExpanded(); overload;
    procedure onActionViewCollapsed(); overload;
  end;

  AVDisplay = class sealed external 'android.view' name 'Display' (JLObject)
  public
    const
      DEFAULT_DISPLAY = 0;
      FLAG_PRESENTATION = 8;
      FLAG_PRIVATE = 4;
      FLAG_SECURE = 2;
      FLAG_SUPPORTS_PROTECTED_BUFFERS = 1;
      STATE_DOZE = 3;
      STATE_DOZE_SUSPEND = 4;
      STATE_OFF = 1;
      STATE_ON = 2;
      STATE_UNKNOWN = 0;
  public
    function getDisplayId(): jint; overload; virtual;
    function isValid(): jboolean; overload; virtual;
    function getFlags(): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    procedure getSize(para1: AGPoint); overload; virtual;
    procedure getRectSize(para1: AGRect); overload; virtual;
    procedure getCurrentSizeRange(para1: AGPoint; para2: AGPoint); overload; virtual;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
    function getRotation(): jint; overload; virtual;
    function getOrientation(): jint; overload; virtual;
    function getPixelFormat(): jint; overload; virtual;
    function getRefreshRate(): jfloat; overload; virtual;
    function getSupportedRefreshRates(): Arr1jfloat; overload; virtual;
    function getAppVsyncOffsetNanos(): jlong; overload; virtual;
    function getPresentationDeadlineNanos(): jlong; overload; virtual;
    procedure getMetrics(para1: AUDisplayMetrics); overload; virtual;
    procedure getRealSize(para1: AGPoint); overload; virtual;
    procedure getRealMetrics(para1: AUDisplayMetrics); overload; virtual;
    function getState(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVFocusFinder = class external 'android.view' name 'FocusFinder' (JLObject)
  public
    class function getInstance(): AVFocusFinder; static; overload;
    function findNextFocus(para1: AVViewGroup; para2: AVView; para3: jint): AVView; overload; virtual; final;
    function findNextFocusFromRect(para1: AVViewGroup; para2: AGRect; para3: jint): AVView; overload; virtual;
    function findNearestTouchable(para1: AVViewGroup; para2: jint; para3: jint; para4: jint; para5: Arr1jint): AVView; overload; virtual;
    function findNearestTouchable(para1: AVViewGroup; para2: jint; para3: jint; para4: jint; var para5: array of jint): AVView; overload; virtual;
  end;

  AVGestureDetector = class external 'android.view' name 'GestureDetector' (JLObject)
  public
    type
      InnerOnDoubleTapListener = interface;
      Arr1InnerOnDoubleTapListener = array of InnerOnDoubleTapListener;
      Arr2InnerOnDoubleTapListener = array of Arr1InnerOnDoubleTapListener;
      Arr3InnerOnDoubleTapListener = array of Arr2InnerOnDoubleTapListener;
      InnerOnGestureListener = interface;
      Arr1InnerOnGestureListener = array of InnerOnGestureListener;
      Arr2InnerOnGestureListener = array of Arr1InnerOnGestureListener;
      Arr3InnerOnGestureListener = array of Arr2InnerOnGestureListener;
      InnerSimpleOnGestureListener = class;
      Arr1InnerSimpleOnGestureListener = array of InnerSimpleOnGestureListener;
      Arr2InnerSimpleOnGestureListener = array of Arr1InnerSimpleOnGestureListener;
      Arr3InnerSimpleOnGestureListener = array of Arr2InnerSimpleOnGestureListener;
      InnerOnDoubleTapListener = interface external 'android.view' name 'OnDoubleTapListener' 
        function onSingleTapConfirmed(para1: AVMotionEvent): jboolean; overload;
        function onDoubleTap(para1: AVMotionEvent): jboolean; overload;
        function onDoubleTapEvent(para1: AVMotionEvent): jboolean; overload;
      end;

      InnerOnGestureListener = interface external 'android.view' name 'OnGestureListener' 
        function onDown(para1: AVMotionEvent): jboolean; overload;
        procedure onShowPress(para1: AVMotionEvent); overload;
        function onSingleTapUp(para1: AVMotionEvent): jboolean; overload;
        function onScroll(para1: AVMotionEvent; para2: AVMotionEvent; para3: jfloat; para4: jfloat): jboolean; overload;
        procedure onLongPress(para1: AVMotionEvent); overload;
        function onFling(para1: AVMotionEvent; para2: AVMotionEvent; para3: jfloat; para4: jfloat): jboolean; overload;
      end;

      InnerSimpleOnGestureListener = class external 'android.view' name 'SimpleOnGestureListener' (JLObject, AVGestureDetector.InnerOnGestureListener, AVGestureDetector.InnerOnDoubleTapListener)
      public
        constructor create(); overload;
        function onSingleTapUp(para1: AVMotionEvent): jboolean; overload; virtual;
        procedure onLongPress(para1: AVMotionEvent); overload; virtual;
        function onScroll(para1: AVMotionEvent; para2: AVMotionEvent; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
        function onFling(para1: AVMotionEvent; para2: AVMotionEvent; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
        procedure onShowPress(para1: AVMotionEvent); overload; virtual;
        function onDown(para1: AVMotionEvent): jboolean; overload; virtual;
        function onDoubleTap(para1: AVMotionEvent): jboolean; overload; virtual;
        function onDoubleTapEvent(para1: AVMotionEvent): jboolean; overload; virtual;
        function onSingleTapConfirmed(para1: AVMotionEvent): jboolean; overload; virtual;
      end;

  public
    constructor create(para1: AVGestureDetector.InnerOnGestureListener; para2: AOHandler); overload;
    constructor create(para1: AVGestureDetector.InnerOnGestureListener); overload;
    constructor create(para1: ACContext; para2: AVGestureDetector.InnerOnGestureListener); overload;
    constructor create(para1: ACContext; para2: AVGestureDetector.InnerOnGestureListener; para3: AOHandler); overload;
    constructor create(para1: ACContext; para2: AVGestureDetector.InnerOnGestureListener; para3: AOHandler; para4: jboolean); overload;
    procedure setOnDoubleTapListener(para1: AVGestureDetector.InnerOnDoubleTapListener); overload; virtual;
    procedure setIsLongpressEnabled(para1: jboolean); overload; virtual;
    function isLongpressEnabled(): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  end;

  AVGravity = class external 'android.view' name 'Gravity' (JLObject)
  public
    const
      AXIS_CLIP = 8;
      AXIS_PULL_AFTER = 4;
      AXIS_PULL_BEFORE = 2;
      AXIS_SPECIFIED = 1;
      AXIS_X_SHIFT = 0;
      AXIS_Y_SHIFT = 4;
      BOTTOM = 80;
      CENTER = 17;
      CENTER_HORIZONTAL = 1;
      CENTER_VERTICAL = 16;
      CLIP_HORIZONTAL = 8;
      CLIP_VERTICAL = 128;
      DISPLAY_CLIP_HORIZONTAL = 16777216;
      DISPLAY_CLIP_VERTICAL = 268435456;
      &END = 8388613;
      FILL = 119;
      FILL_HORIZONTAL = 7;
      FILL_VERTICAL = 112;
      HORIZONTAL_GRAVITY_MASK = 7;
      LEFT = 3;
      NO_GRAVITY = 0;
      RELATIVE_HORIZONTAL_GRAVITY_MASK = 8388615;
      RELATIVE_LAYOUT_DIRECTION = 8388608;
      RIGHT = 5;
      START = 8388611;
      TOP = 48;
      VERTICAL_GRAVITY_MASK = 112;
  public
    constructor create(); overload;
    class procedure apply(para1: jint; para2: jint; para3: jint; para4: AGRect; para5: AGRect); static; overload;
    class procedure apply(para1: jint; para2: jint; para3: jint; para4: AGRect; para5: AGRect; para6: jint); static; overload;
    class procedure apply(para1: jint; para2: jint; para3: jint; para4: AGRect; para5: jint; para6: jint; para7: AGRect); static; overload;
    class procedure apply(para1: jint; para2: jint; para3: jint; para4: AGRect; para5: jint; para6: jint; para7: AGRect; para8: jint); static; overload;
    class procedure applyDisplay(para1: jint; para2: AGRect; para3: AGRect); static; overload;
    class procedure applyDisplay(para1: jint; para2: AGRect; para3: AGRect; para4: jint); static; overload;
    class function isVertical(para1: jint): jboolean; static; overload;
    class function isHorizontal(para1: jint): jboolean; static; overload;
    class function getAbsoluteGravity(para1: jint; para2: jint): jint; static; overload;
  end;

  AVHapticFeedbackConstants = class external 'android.view' name 'HapticFeedbackConstants' (JLObject)
  public
    const
      CLOCK_TICK = 4;
      FLAG_IGNORE_GLOBAL_SETTING = 2;
      FLAG_IGNORE_VIEW_SETTING = 1;
      KEYBOARD_TAP = 3;
      LONG_PRESS = 0;
      VIRTUAL_KEY = 1;
  end;

  AVInputQueue = class sealed external 'android.view' name 'InputQueue' (JLObject)
  public
    type
      InnerCallback = interface;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = interface external 'android.view' name 'Callback' 
        procedure onInputQueueCreated(para1: AVInputQueue); overload;
        procedure onInputQueueDestroyed(para1: AVInputQueue); overload;
      end;

  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AVLayoutInflater = class abstract external 'android.view' name 'LayoutInflater' (JLObject)
  public
    type
      InnerFactory = interface;
      Arr1InnerFactory = array of InnerFactory;
      Arr2InnerFactory = array of Arr1InnerFactory;
      Arr3InnerFactory = array of Arr2InnerFactory;
      InnerFilter = interface;
      Arr1InnerFilter = array of InnerFilter;
      Arr2InnerFilter = array of Arr1InnerFilter;
      Arr3InnerFilter = array of Arr2InnerFilter;
      InnerFactory2 = interface;
      Arr1InnerFactory2 = array of InnerFactory2;
      Arr2InnerFactory2 = array of Arr1InnerFactory2;
      Arr3InnerFactory2 = array of Arr2InnerFactory2;
      InnerFactory = interface external 'android.view' name 'Factory' 
        function onCreateView(para1: JLString; para2: ACContext; para3: AUAttributeSet): AVView; overload;
      end;

      InnerFilter = interface external 'android.view' name 'Filter' 
        function onLoadClass(para1: JLClass): jboolean; overload;
      end;

      InnerFactory2 = interface external 'android.view' name 'Factory2' (AVLayoutInflater.InnerFactory)
        function onCreateView(para1: AVView; para2: JLString; para3: ACContext; para4: AUAttributeSet): AVView; overload;
      end;

  strict protected
    constructor create(para1: ACContext); overload;
    constructor create(para1: AVLayoutInflater; para2: ACContext); overload;
  public
    class function from(para1: ACContext): AVLayoutInflater; static; overload;
    function cloneInContext(para1: ACContext): AVLayoutInflater; overload; virtual; abstract;
    function getContext(): ACContext; overload; virtual;
    function getFactory(): AVLayoutInflater.InnerFactory; overload; virtual; final;
    function getFactory2(): AVLayoutInflater.InnerFactory2; overload; virtual; final;
    procedure setFactory(para1: AVLayoutInflater.InnerFactory); overload; virtual;
    procedure setFactory2(para1: AVLayoutInflater.InnerFactory2); overload; virtual;
    function getFilter(): AVLayoutInflater.InnerFilter; overload; virtual;
    procedure setFilter(para1: AVLayoutInflater.InnerFilter); overload; virtual;
    function inflate(para1: jint; para2: AVViewGroup): AVView; overload; virtual;
    function inflate(para1: OXVXmlPullParser; para2: AVViewGroup): AVView; overload; virtual;
    function inflate(para1: jint; para2: AVViewGroup; para3: jboolean): AVView; overload; virtual;
    function inflate(para1: OXVXmlPullParser; para2: AVViewGroup; para3: jboolean): AVView; overload; virtual;
    function createView(para1: JLString; para2: JLString; para3: AUAttributeSet): AVView; overload; virtual; final;  // throws java.lang.ClassNotFoundException, android.view.InflateException
  strict protected
    function onCreateView(para1: JLString; para2: AUAttributeSet): AVView; overload; virtual;  // throws java.lang.ClassNotFoundException
    function onCreateView(para1: AVView; para2: JLString; para3: AUAttributeSet): AVView; overload; virtual;  // throws java.lang.ClassNotFoundException
  end;

  AVMenu = interface external 'android.view' name 'Menu' 
    const
      CATEGORY_ALTERNATIVE = 262144;
      CATEGORY_CONTAINER = 65536;
      CATEGORY_SECONDARY = 196608;
      CATEGORY_SYSTEM = 131072;
      FIRST = 1;
      FLAG_ALWAYS_PERFORM_CLOSE = 2;
      FLAG_APPEND_TO_GROUP = 1;
      FLAG_PERFORM_NO_CLOSE = 1;
      NONE = 0;
    function add(para1: JLCharSequence): AVMenuItem; overload;
    function add(para1: jint): AVMenuItem; overload;
    function add(para1: jint; para2: jint; para3: jint; para4: JLCharSequence): AVMenuItem; overload;
    function add(para1: jint; para2: jint; para3: jint; para4: jint): AVMenuItem; overload;
    function addSubMenu(para1: JLCharSequence): AVSubMenu; overload;
    function addSubMenu(para1: jint): AVSubMenu; overload;
    function addSubMenu(para1: jint; para2: jint; para3: jint; para4: JLCharSequence): AVSubMenu; overload;
    function addSubMenu(para1: jint; para2: jint; para3: jint; para4: jint): AVSubMenu; overload;
    function addIntentOptions(para1: jint; para2: jint; para3: jint; para4: ACComponentName; para5: Arr1ACIntent; para6: ACIntent; para7: jint; para8: Arr1AVMenuItem): jint; overload;
    function addIntentOptions(para1: jint; para2: jint; para3: jint; para4: ACComponentName; var para5: array of ACIntent; para6: ACIntent; para7: jint; var para8: array of AVMenuItem): jint; overload;
    procedure removeItem(para1: jint); overload;
    procedure removeGroup(para1: jint); overload;
    procedure clear(); overload;
    procedure setGroupCheckable(para1: jint; para2: jboolean; para3: jboolean); overload;
    procedure setGroupVisible(para1: jint; para2: jboolean); overload;
    procedure setGroupEnabled(para1: jint; para2: jboolean); overload;
    function hasVisibleItems(): jboolean; overload;
    function findItem(para1: jint): AVMenuItem; overload;
    function size(): jint; overload;
    function getItem(para1: jint): AVMenuItem; overload;
    procedure close(); overload;
    function performShortcut(para1: jint; para2: AVKeyEvent; para3: jint): jboolean; overload;
    function isShortcutKey(para1: jint; para2: AVKeyEvent): jboolean; overload;
    function performIdentifierAction(para1: jint; para2: jint): jboolean; overload;
    procedure setQwertyMode(para1: jboolean); overload;
  end;

  AVMenuInflater = class external 'android.view' name 'MenuInflater' (JLObject)
  public
    constructor create(para1: ACContext); overload;
    procedure inflate(para1: jint; para2: AVMenu); overload; virtual;
  end;

  AVOrientationEventListener = class abstract external 'android.view' name 'OrientationEventListener' (JLObject)
  public
    const
      ORIENTATION_UNKNOWN = -1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: jint); overload;
    procedure enable(); overload; virtual;
    procedure disable(); overload; virtual;
    function canDetectOrientation(): jboolean; overload; virtual;
    procedure onOrientationChanged(para1: jint); overload; virtual; abstract;
  end;

  AVScaleGestureDetector = class external 'android.view' name 'ScaleGestureDetector' (JLObject)
  public
    type
      InnerOnScaleGestureListener = interface;
      Arr1InnerOnScaleGestureListener = array of InnerOnScaleGestureListener;
      Arr2InnerOnScaleGestureListener = array of Arr1InnerOnScaleGestureListener;
      Arr3InnerOnScaleGestureListener = array of Arr2InnerOnScaleGestureListener;
      InnerSimpleOnScaleGestureListener = class;
      Arr1InnerSimpleOnScaleGestureListener = array of InnerSimpleOnScaleGestureListener;
      Arr2InnerSimpleOnScaleGestureListener = array of Arr1InnerSimpleOnScaleGestureListener;
      Arr3InnerSimpleOnScaleGestureListener = array of Arr2InnerSimpleOnScaleGestureListener;
      InnerOnScaleGestureListener = interface external 'android.view' name 'OnScaleGestureListener' 
        function onScale(para1: AVScaleGestureDetector): jboolean; overload;
        function onScaleBegin(para1: AVScaleGestureDetector): jboolean; overload;
        procedure onScaleEnd(para1: AVScaleGestureDetector); overload;
      end;

      InnerSimpleOnScaleGestureListener = class external 'android.view' name 'SimpleOnScaleGestureListener' (JLObject, AVScaleGestureDetector.InnerOnScaleGestureListener)
      public
        constructor create(); overload;
        function onScale(para1: AVScaleGestureDetector): jboolean; overload; virtual;
        function onScaleBegin(para1: AVScaleGestureDetector): jboolean; overload; virtual;
        procedure onScaleEnd(para1: AVScaleGestureDetector); overload; virtual;
      end;

  public
    constructor create(para1: ACContext; para2: AVScaleGestureDetector.InnerOnScaleGestureListener); overload;
    constructor create(para1: ACContext; para2: AVScaleGestureDetector.InnerOnScaleGestureListener; para3: AOHandler); overload;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure setQuickScaleEnabled(para1: jboolean); overload; virtual;
    function isQuickScaleEnabled(): jboolean; overload; virtual;
    function isInProgress(): jboolean; overload; virtual;
    function getFocusX(): jfloat; overload; virtual;
    function getFocusY(): jfloat; overload; virtual;
    function getCurrentSpan(): jfloat; overload; virtual;
    function getCurrentSpanX(): jfloat; overload; virtual;
    function getCurrentSpanY(): jfloat; overload; virtual;
    function getPreviousSpan(): jfloat; overload; virtual;
    function getPreviousSpanX(): jfloat; overload; virtual;
    function getPreviousSpanY(): jfloat; overload; virtual;
    function getScaleFactor(): jfloat; overload; virtual;
    function getTimeDelta(): jlong; overload; virtual;
    function getEventTime(): jlong; overload; virtual;
  end;

  AVSoundEffectConstants = class external 'android.view' name 'SoundEffectConstants' (JLObject)
  public
    const
      CLICK = 0;
      NAVIGATION_DOWN = 4;
      NAVIGATION_LEFT = 1;
      NAVIGATION_RIGHT = 3;
      NAVIGATION_UP = 2;
  public
    class function getContantForFocusDirection(para1: jint): jint; static; overload;
  end;

  AVTouchDelegate = class external 'android.view' name 'TouchDelegate' (JLObject)
  public
    const
      ABOVE = 1;
      BELOW = 2;
      TO_LEFT = 4;
      TO_RIGHT = 8;
  public
    constructor create(para1: AGRect; para2: AVView); overload;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  end;

  AVVelocityTracker = class sealed external 'android.view' name 'VelocityTracker' (JLObject)
  public
    class function obtain(): AVVelocityTracker; static; overload;
    procedure recycle(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    procedure clear(); overload; virtual;
    procedure addMovement(para1: AVMotionEvent); overload; virtual;
    procedure computeCurrentVelocity(para1: jint); overload; virtual;
    procedure computeCurrentVelocity(para1: jint; para2: jfloat); overload; virtual;
    function getXVelocity(): jfloat; overload; virtual;
    function getYVelocity(): jfloat; overload; virtual;
    function getXVelocity(para1: jint): jfloat; overload; virtual;
    function getYVelocity(para1: jint): jfloat; overload; virtual;
  end;

  AVViewConfiguration = class external 'android.view' name 'ViewConfiguration' (JLObject)
  public
    constructor create(); overload;
    class function get(para1: ACContext): AVViewConfiguration; static; overload;
    class function getScrollBarSize(): jint; static; overload;
    function getScaledScrollBarSize(): jint; overload; virtual;
    class function getScrollBarFadeDuration(): jint; static; overload;
    class function getScrollDefaultDelay(): jint; static; overload;
    class function getFadingEdgeLength(): jint; static; overload;
    function getScaledFadingEdgeLength(): jint; overload; virtual;
    class function getPressedStateDuration(): jint; static; overload;
    class function getLongPressTimeout(): jint; static; overload;
    class function getKeyRepeatTimeout(): jint; static; overload;
    class function getKeyRepeatDelay(): jint; static; overload;
    class function getTapTimeout(): jint; static; overload;
    class function getJumpTapTimeout(): jint; static; overload;
    class function getDoubleTapTimeout(): jint; static; overload;
    class function getEdgeSlop(): jint; static; overload;
    function getScaledEdgeSlop(): jint; overload; virtual;
    class function getTouchSlop(): jint; static; overload;
    function getScaledTouchSlop(): jint; overload; virtual;
    function getScaledPagingTouchSlop(): jint; overload; virtual;
    function getScaledDoubleTapSlop(): jint; overload; virtual;
    class function getWindowTouchSlop(): jint; static; overload;
    function getScaledWindowTouchSlop(): jint; overload; virtual;
    class function getMinimumFlingVelocity(): jint; static; overload;
    function getScaledMinimumFlingVelocity(): jint; overload; virtual;
    class function getMaximumFlingVelocity(): jint; static; overload;
    function getScaledMaximumFlingVelocity(): jint; overload; virtual;
    class function getMaximumDrawingCacheSize(): jint; static; overload;
    function getScaledMaximumDrawingCacheSize(): jint; overload; virtual;
    function getScaledOverscrollDistance(): jint; overload; virtual;
    function getScaledOverflingDistance(): jint; overload; virtual;
    class function getZoomControlsTimeout(): jlong; static; overload;
    class function getGlobalActionKeyTimeout(): jlong; static; overload;
    class function getScrollFriction(): jfloat; static; overload;
    function hasPermanentMenuKey(): jboolean; overload; virtual;
  end;

  AVViewManager = interface external 'android.view' name 'ViewManager' 
    procedure addView(para1: AVView; para2: AVViewGroup_LayoutParams); overload;
    procedure updateViewLayout(para1: AVView; para2: AVViewGroup_LayoutParams); overload;
    procedure removeView(para1: AVView); overload;
  end;

  AVViewTreeObserver = class sealed external 'android.view' name 'ViewTreeObserver' (JLObject)
  public
    type
      InnerOnScrollChangedListener = interface;
      Arr1InnerOnScrollChangedListener = array of InnerOnScrollChangedListener;
      Arr2InnerOnScrollChangedListener = array of Arr1InnerOnScrollChangedListener;
      Arr3InnerOnScrollChangedListener = array of Arr2InnerOnScrollChangedListener;
      InnerOnTouchModeChangeListener = interface;
      Arr1InnerOnTouchModeChangeListener = array of InnerOnTouchModeChangeListener;
      Arr2InnerOnTouchModeChangeListener = array of Arr1InnerOnTouchModeChangeListener;
      Arr3InnerOnTouchModeChangeListener = array of Arr2InnerOnTouchModeChangeListener;
      InnerOnDrawListener = interface;
      Arr1InnerOnDrawListener = array of InnerOnDrawListener;
      Arr2InnerOnDrawListener = array of Arr1InnerOnDrawListener;
      Arr3InnerOnDrawListener = array of Arr2InnerOnDrawListener;
      InnerOnPreDrawListener = interface;
      Arr1InnerOnPreDrawListener = array of InnerOnPreDrawListener;
      Arr2InnerOnPreDrawListener = array of Arr1InnerOnPreDrawListener;
      Arr3InnerOnPreDrawListener = array of Arr2InnerOnPreDrawListener;
      InnerOnGlobalLayoutListener = interface;
      Arr1InnerOnGlobalLayoutListener = array of InnerOnGlobalLayoutListener;
      Arr2InnerOnGlobalLayoutListener = array of Arr1InnerOnGlobalLayoutListener;
      Arr3InnerOnGlobalLayoutListener = array of Arr2InnerOnGlobalLayoutListener;
      InnerOnGlobalFocusChangeListener = interface;
      Arr1InnerOnGlobalFocusChangeListener = array of InnerOnGlobalFocusChangeListener;
      Arr2InnerOnGlobalFocusChangeListener = array of Arr1InnerOnGlobalFocusChangeListener;
      Arr3InnerOnGlobalFocusChangeListener = array of Arr2InnerOnGlobalFocusChangeListener;
      InnerOnWindowFocusChangeListener = interface;
      Arr1InnerOnWindowFocusChangeListener = array of InnerOnWindowFocusChangeListener;
      Arr2InnerOnWindowFocusChangeListener = array of Arr1InnerOnWindowFocusChangeListener;
      Arr3InnerOnWindowFocusChangeListener = array of Arr2InnerOnWindowFocusChangeListener;
      InnerOnWindowAttachListener = interface;
      Arr1InnerOnWindowAttachListener = array of InnerOnWindowAttachListener;
      Arr2InnerOnWindowAttachListener = array of Arr1InnerOnWindowAttachListener;
      Arr3InnerOnWindowAttachListener = array of Arr2InnerOnWindowAttachListener;
      InnerOnScrollChangedListener = interface external 'android.view' name 'OnScrollChangedListener' 
        procedure onScrollChanged(); overload;
      end;

      InnerOnTouchModeChangeListener = interface external 'android.view' name 'OnTouchModeChangeListener' 
        procedure onTouchModeChanged(para1: jboolean); overload;
      end;

      InnerOnDrawListener = interface external 'android.view' name 'OnDrawListener' 
        procedure onDraw(); overload;
      end;

      InnerOnPreDrawListener = interface external 'android.view' name 'OnPreDrawListener' 
        function onPreDraw(): jboolean; overload;
      end;

      InnerOnGlobalLayoutListener = interface external 'android.view' name 'OnGlobalLayoutListener' 
        procedure onGlobalLayout(); overload;
      end;

      InnerOnGlobalFocusChangeListener = interface external 'android.view' name 'OnGlobalFocusChangeListener' 
        procedure onGlobalFocusChanged(para1: AVView; para2: AVView); overload;
      end;

      InnerOnWindowFocusChangeListener = interface external 'android.view' name 'OnWindowFocusChangeListener' 
        procedure onWindowFocusChanged(para1: jboolean); overload;
      end;

      InnerOnWindowAttachListener = interface external 'android.view' name 'OnWindowAttachListener' 
        procedure onWindowAttached(); overload;
        procedure onWindowDetached(); overload;
      end;

  public
    procedure addOnWindowAttachListener(para1: AVViewTreeObserver.InnerOnWindowAttachListener); overload; virtual;
    procedure removeOnWindowAttachListener(para1: AVViewTreeObserver.InnerOnWindowAttachListener); overload; virtual;
    procedure addOnWindowFocusChangeListener(para1: AVViewTreeObserver.InnerOnWindowFocusChangeListener); overload; virtual;
    procedure removeOnWindowFocusChangeListener(para1: AVViewTreeObserver.InnerOnWindowFocusChangeListener); overload; virtual;
    procedure addOnGlobalFocusChangeListener(para1: AVViewTreeObserver.InnerOnGlobalFocusChangeListener); overload; virtual;
    procedure removeOnGlobalFocusChangeListener(para1: AVViewTreeObserver.InnerOnGlobalFocusChangeListener); overload; virtual;
    procedure addOnGlobalLayoutListener(para1: AVViewTreeObserver.InnerOnGlobalLayoutListener); overload; virtual;
    procedure removeGlobalOnLayoutListener(para1: AVViewTreeObserver.InnerOnGlobalLayoutListener); overload; virtual;
    procedure removeOnGlobalLayoutListener(para1: AVViewTreeObserver.InnerOnGlobalLayoutListener); overload; virtual;
    procedure addOnPreDrawListener(para1: AVViewTreeObserver.InnerOnPreDrawListener); overload; virtual;
    procedure removeOnPreDrawListener(para1: AVViewTreeObserver.InnerOnPreDrawListener); overload; virtual;
    procedure addOnDrawListener(para1: AVViewTreeObserver.InnerOnDrawListener); overload; virtual;
    procedure removeOnDrawListener(para1: AVViewTreeObserver.InnerOnDrawListener); overload; virtual;
    procedure addOnScrollChangedListener(para1: AVViewTreeObserver.InnerOnScrollChangedListener); overload; virtual;
    procedure removeOnScrollChangedListener(para1: AVViewTreeObserver.InnerOnScrollChangedListener); overload; virtual;
    procedure addOnTouchModeChangeListener(para1: AVViewTreeObserver.InnerOnTouchModeChangeListener); overload; virtual;
    procedure removeOnTouchModeChangeListener(para1: AVViewTreeObserver.InnerOnTouchModeChangeListener); overload; virtual;
    function isAlive(): jboolean; overload; virtual;
    procedure dispatchOnGlobalLayout(); overload; virtual; final;
    function dispatchOnPreDraw(): jboolean; overload; virtual; final;
    procedure dispatchOnDraw(); overload; virtual; final;
  end;

  AVAAccessibilityEventSource = interface external 'android.view.accessibility' name 'AccessibilityEventSource' 
    procedure sendAccessibilityEvent(para1: jint); overload;
    procedure sendAccessibilityEventUnchecked(para1: AVAAccessibilityEvent); overload;
  end;

  AVAAccessibilityManager = class sealed external 'android.view.accessibility' name 'AccessibilityManager' (JLObject)
  public
    type
      InnerTouchExplorationStateChangeListener = interface;
      Arr1InnerTouchExplorationStateChangeListener = array of InnerTouchExplorationStateChangeListener;
      Arr2InnerTouchExplorationStateChangeListener = array of Arr1InnerTouchExplorationStateChangeListener;
      Arr3InnerTouchExplorationStateChangeListener = array of Arr2InnerTouchExplorationStateChangeListener;
      InnerAccessibilityStateChangeListener = interface;
      Arr1InnerAccessibilityStateChangeListener = array of InnerAccessibilityStateChangeListener;
      Arr2InnerAccessibilityStateChangeListener = array of Arr1InnerAccessibilityStateChangeListener;
      Arr3InnerAccessibilityStateChangeListener = array of Arr2InnerAccessibilityStateChangeListener;
      InnerTouchExplorationStateChangeListener = interface external 'android.view.accessibility' name 'TouchExplorationStateChangeListener' 
        procedure onTouchExplorationStateChanged(para1: jboolean); overload;
      end;

      InnerAccessibilityStateChangeListener = interface external 'android.view.accessibility' name 'AccessibilityStateChangeListener' 
        procedure onAccessibilityStateChanged(para1: jboolean); overload;
      end;

  public
    function isEnabled(): jboolean; overload; virtual;
    function isTouchExplorationEnabled(): jboolean; overload; virtual;
    procedure sendAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure interrupt(); overload; virtual;
    function getAccessibilityServiceList(): JUList; overload; virtual;
    function getInstalledAccessibilityServiceList(): JUList; overload; virtual;
    function getEnabledAccessibilityServiceList(para1: jint): JUList; overload; virtual;
    function addAccessibilityStateChangeListener(para1: AVAAccessibilityManager.InnerAccessibilityStateChangeListener): jboolean; overload; virtual;
    function removeAccessibilityStateChangeListener(para1: AVAAccessibilityManager.InnerAccessibilityStateChangeListener): jboolean; overload; virtual;
    function addTouchExplorationStateChangeListener(para1: AVAAccessibilityManager.InnerTouchExplorationStateChangeListener): jboolean; overload; virtual;
    function removeTouchExplorationStateChangeListener(para1: AVAAccessibilityManager.InnerTouchExplorationStateChangeListener): jboolean; overload; virtual;
  end;

  AVAAccessibilityRecord = class external 'android.view.accessibility' name 'AccessibilityRecord' (JLObject)
  public
    procedure setSource(para1: AVView); overload; virtual;
    procedure setSource(para1: AVView; para2: jint); overload; virtual;
    function getSource(): AVAAccessibilityNodeInfo; overload; virtual;
    function getWindowId(): jint; overload; virtual;
    function isChecked(): jboolean; overload; virtual;
    procedure setChecked(para1: jboolean); overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    function isPassword(): jboolean; overload; virtual;
    procedure setPassword(para1: jboolean); overload; virtual;
    function isFullScreen(): jboolean; overload; virtual;
    procedure setFullScreen(para1: jboolean); overload; virtual;
    function isScrollable(): jboolean; overload; virtual;
    procedure setScrollable(para1: jboolean); overload; virtual;
    function getItemCount(): jint; overload; virtual;
    procedure setItemCount(para1: jint); overload; virtual;
    function getCurrentItemIndex(): jint; overload; virtual;
    procedure setCurrentItemIndex(para1: jint); overload; virtual;
    function getFromIndex(): jint; overload; virtual;
    procedure setFromIndex(para1: jint); overload; virtual;
    function getToIndex(): jint; overload; virtual;
    procedure setToIndex(para1: jint); overload; virtual;
    function getScrollX(): jint; overload; virtual;
    procedure setScrollX(para1: jint); overload; virtual;
    function getScrollY(): jint; overload; virtual;
    procedure setScrollY(para1: jint); overload; virtual;
    function getMaxScrollX(): jint; overload; virtual;
    procedure setMaxScrollX(para1: jint); overload; virtual;
    function getMaxScrollY(): jint; overload; virtual;
    procedure setMaxScrollY(para1: jint); overload; virtual;
    function getAddedCount(): jint; overload; virtual;
    procedure setAddedCount(para1: jint); overload; virtual;
    function getRemovedCount(): jint; overload; virtual;
    procedure setRemovedCount(para1: jint); overload; virtual;
    function getClassName(): JLCharSequence; overload; virtual;
    procedure setClassName(para1: JLCharSequence); overload; virtual;
    function getText(): JUList; overload; virtual;
    function getBeforeText(): JLCharSequence; overload; virtual;
    procedure setBeforeText(para1: JLCharSequence); overload; virtual;
    function getContentDescription(): JLCharSequence; overload; virtual;
    procedure setContentDescription(para1: JLCharSequence); overload; virtual;
    function getParcelableData(): AOParcelable; overload; virtual;
    procedure setParcelableData(para1: AOParcelable); overload; virtual;
    class function obtain(para1: AVAAccessibilityRecord): AVAAccessibilityRecord; static; overload;
    class function obtain(): AVAAccessibilityRecord; static; overload;
    procedure recycle(); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVAAnimationUtils = class external 'android.view.animation' name 'AnimationUtils' (JLObject)
  public
    constructor create(); overload;
    class function currentAnimationTimeMillis(): jlong; static; overload;
    class function loadAnimation(para1: ACContext; para2: jint): AVAAnimation; static; overload;  // throws android.content.res.Resources$NotFoundException
    class function loadLayoutAnimation(para1: ACContext; para2: jint): AVALayoutAnimationController; static; overload;  // throws android.content.res.Resources$NotFoundException
    class function makeInAnimation(para1: ACContext; para2: jboolean): AVAAnimation; static; overload;
    class function makeOutAnimation(para1: ACContext; para2: jboolean): AVAAnimation; static; overload;
    class function makeInChildBottomAnimation(para1: ACContext): AVAAnimation; static; overload;
    class function loadInterpolator(para1: ACContext; para2: jint): AVAInterpolator; static; overload;  // throws android.content.res.Resources$NotFoundException
  end;

  AVALayoutAnimationController = class external 'android.view.animation' name 'LayoutAnimationController' (JLObject)
  public
    type
      InnerAnimationParameters = class;
      Arr1InnerAnimationParameters = array of InnerAnimationParameters;
      Arr2InnerAnimationParameters = array of Arr1InnerAnimationParameters;
      Arr3InnerAnimationParameters = array of Arr2InnerAnimationParameters;
      InnerAnimationParameters = class external 'android.view.animation' name 'AnimationParameters' (JLObject)
      public
        var
          fcount: jint; external name 'count';
          findex: jint; external name 'index';
      public
        constructor create(); overload;
      end;

  public
    const
      ORDER_NORMAL = 0;
      ORDER_RANDOM = 2;
      ORDER_REVERSE = 1;
  strict protected
    var
      fmAnimation: AVAAnimation; external name 'mAnimation';
      fmInterpolator: AVAInterpolator; external name 'mInterpolator';
      fmRandomizer: JURandom; external name 'mRandomizer';
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: AVAAnimation); overload;
    constructor create(para1: AVAAnimation; para2: jfloat); overload;
    function getOrder(): jint; overload; virtual;
    procedure setOrder(para1: jint); overload; virtual;
    procedure setAnimation(para1: ACContext; para2: jint); overload; virtual;
    procedure setAnimation(para1: AVAAnimation); overload; virtual;
    function getAnimation(): AVAAnimation; overload; virtual;
    procedure setInterpolator(para1: ACContext; para2: jint); overload; virtual;
    procedure setInterpolator(para1: AVAInterpolator); overload; virtual;
    function getInterpolator(): AVAInterpolator; overload; virtual;
    function getDelay(): jfloat; overload; virtual;
    procedure setDelay(para1: jfloat); overload; virtual;
    function willOverlap(): jboolean; overload; virtual;
    procedure start(); overload; virtual;
    function getAnimationForView(para1: AVView): AVAAnimation; overload; virtual; final;
    function isDone(): jboolean; overload; virtual;
  strict protected
    function getDelayForView(para1: AVView): jlong; overload; virtual;
    function getTransformedIndex(para1: AVALayoutAnimationController.InnerAnimationParameters): jint; overload; virtual;
  end;

  AVATransformation = class external 'android.view.animation' name 'Transformation' (JLObject)
  public
    const
      TYPE_ALPHA = 1;
      TYPE_BOTH = 3;
      TYPE_IDENTITY = 0;
      TYPE_MATRIX = 2;
  strict protected
    var
      fmAlpha: jfloat; external name 'mAlpha';
      fmMatrix: AGMatrix; external name 'mMatrix';
      fmTransformationType: jint; external name 'mTransformationType';
  public
    constructor create(); overload;
    procedure clear(); overload; virtual;
    function getTransformationType(): jint; overload; virtual;
    procedure setTransformationType(para1: jint); overload; virtual;
    procedure &set(para1: AVATransformation); overload; virtual;
    procedure compose(para1: AVATransformation); overload; virtual;
    function getMatrix(): AGMatrix; overload; virtual;
    procedure setAlpha(para1: jfloat); overload; virtual;
    function getAlpha(): jfloat; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toShortString(): JLString; overload; virtual;
  end;

  AVIInputConnection = interface external 'android.view.inputmethod' name 'InputConnection' 
    const
      CURSOR_UPDATE_IMMEDIATE = 1;
      CURSOR_UPDATE_MONITOR = 2;
      GET_EXTRACTED_TEXT_MONITOR = 1;
      GET_TEXT_WITH_STYLES = 1;
    function getTextBeforeCursor(para1: jint; para2: jint): JLCharSequence; overload;
    function getTextAfterCursor(para1: jint; para2: jint): JLCharSequence; overload;
    function getSelectedText(para1: jint): JLCharSequence; overload;
    function getCursorCapsMode(para1: jint): jint; overload;
    function getExtractedText(para1: AVIExtractedTextRequest; para2: jint): AVIExtractedText; overload;
    function deleteSurroundingText(para1: jint; para2: jint): jboolean; overload;
    function setComposingText(para1: JLCharSequence; para2: jint): jboolean; overload;
    function setComposingRegion(para1: jint; para2: jint): jboolean; overload;
    function finishComposingText(): jboolean; overload;
    function commitText(para1: JLCharSequence; para2: jint): jboolean; overload;
    function commitCompletion(para1: AVICompletionInfo): jboolean; overload;
    function commitCorrection(para1: AVICorrectionInfo): jboolean; overload;
    function setSelection(para1: jint; para2: jint): jboolean; overload;
    function performEditorAction(para1: jint): jboolean; overload;
    function performContextMenuAction(para1: jint): jboolean; overload;
    function beginBatchEdit(): jboolean; overload;
    function endBatchEdit(): jboolean; overload;
    function sendKeyEvent(para1: AVKeyEvent): jboolean; overload;
    function clearMetaKeyStates(para1: jint): jboolean; overload;
    function reportFullscreenMode(para1: jboolean): jboolean; overload;
    function performPrivateCommand(para1: JLString; para2: AOBundle): jboolean; overload;
    function requestCursorUpdates(para1: jint): jboolean; overload;
  end;

  AVIInputMethod = interface external 'android.view.inputmethod' name 'InputMethod' 
    type
      InnerSessionCallback = interface;
      Arr1InnerSessionCallback = array of InnerSessionCallback;
      Arr2InnerSessionCallback = array of Arr1InnerSessionCallback;
      Arr3InnerSessionCallback = array of Arr2InnerSessionCallback;
      InnerSessionCallback = interface external 'android.view.inputmethod' name 'SessionCallback' 
        procedure sessionCreated(para1: AVIInputMethodSession); overload;
      end;

    const
      SERVICE_INTERFACE = 'android.view.InputMethod';
      SERVICE_META_DATA = 'android.view.im';
      SHOW_EXPLICIT = 1;
      SHOW_FORCED = 2;
    procedure attachToken(para1: AOIBinder); overload;
    procedure bindInput(para1: AVIInputBinding); overload;
    procedure unbindInput(); overload;
    procedure startInput(para1: AVIInputConnection; para2: AVIEditorInfo); overload;
    procedure restartInput(para1: AVIInputConnection; para2: AVIEditorInfo); overload;
    procedure createSession(para1: AVIInputMethod.InnerSessionCallback); overload;
    procedure setSessionEnabled(para1: AVIInputMethodSession; para2: jboolean); overload;
    procedure revokeSession(para1: AVIInputMethodSession); overload;
    procedure showSoftInput(para1: jint; para2: AOResultReceiver); overload;
    procedure hideSoftInput(para1: jint; para2: AOResultReceiver); overload;
    procedure changeInputMethodSubtype(para1: AVIInputMethodSubtype); overload;
  end;

  AVIInputMethodManager = class sealed external 'android.view.inputmethod' name 'InputMethodManager' (JLObject)
  public
    const
      HIDE_IMPLICIT_ONLY = 1;
      HIDE_NOT_ALWAYS = 2;
      RESULT_HIDDEN = 3;
      RESULT_SHOWN = 2;
      RESULT_UNCHANGED_HIDDEN = 1;
      RESULT_UNCHANGED_SHOWN = 0;
      SHOW_FORCED = 2;
      SHOW_IMPLICIT = 1;
  public
    function getInputMethodList(): JUList; overload; virtual;
    function getEnabledInputMethodList(): JUList; overload; virtual;
    function getEnabledInputMethodSubtypeList(para1: AVIInputMethodInfo; para2: jboolean): JUList; overload; virtual;
    procedure showStatusIcon(para1: AOIBinder; para2: JLString; para3: jint); overload; virtual;
    procedure hideStatusIcon(para1: AOIBinder); overload; virtual;
    function isFullscreenMode(): jboolean; overload; virtual;
    function isActive(para1: AVView): jboolean; overload; virtual;
    function isActive(): jboolean; overload; virtual;
    function isAcceptingText(): jboolean; overload; virtual;
    procedure displayCompletions(para1: AVView; para2: Arr1AVICompletionInfo); overload; virtual;
    procedure displayCompletions(para1: AVView; var para2: array of AVICompletionInfo); overload; virtual;
    procedure updateExtractedText(para1: AVView; para2: jint; para3: AVIExtractedText); overload; virtual;
    function showSoftInput(para1: AVView; para2: jint): jboolean; overload; virtual;
    function showSoftInput(para1: AVView; para2: jint; para3: AOResultReceiver): jboolean; overload; virtual;
    function hideSoftInputFromWindow(para1: AOIBinder; para2: jint): jboolean; overload; virtual;
    function hideSoftInputFromWindow(para1: AOIBinder; para2: jint; para3: AOResultReceiver): jboolean; overload; virtual;
    procedure toggleSoftInputFromWindow(para1: AOIBinder; para2: jint; para3: jint); overload; virtual;
    procedure toggleSoftInput(para1: jint; para2: jint); overload; virtual;
    procedure restartInput(para1: AVView); overload; virtual;
    procedure updateSelection(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure viewClicked(para1: AVView); overload; virtual;
    function isWatchingCursor(para1: AVView): jboolean; overload; virtual;
    procedure updateCursor(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure updateCursorAnchorInfo(para1: AVView; para2: AVICursorAnchorInfo); overload; virtual;
    procedure sendAppPrivateCommand(para1: AVView; para2: JLString; para3: AOBundle); overload; virtual;
    procedure setInputMethod(para1: AOIBinder; para2: JLString); overload; virtual;
    procedure setInputMethodAndSubtype(para1: AOIBinder; para2: JLString; para3: AVIInputMethodSubtype); overload; virtual;
    procedure hideSoftInputFromInputMethod(para1: AOIBinder; para2: jint); overload; virtual;
    procedure showSoftInputFromInputMethod(para1: AOIBinder; para2: jint); overload; virtual;
    procedure showInputMethodPicker(); overload; virtual;
    procedure showInputMethodAndSubtypeEnabler(para1: JLString); overload; virtual;
    function getCurrentInputMethodSubtype(): AVIInputMethodSubtype; overload; virtual;
    function setCurrentInputMethodSubtype(para1: AVIInputMethodSubtype): jboolean; overload; virtual;
    function getShortcutInputMethodsAndSubtypes(): JUMap; overload; virtual;
    function switchToLastInputMethod(para1: AOIBinder): jboolean; overload; virtual;
    function switchToNextInputMethod(para1: AOIBinder; para2: jboolean): jboolean; overload; virtual;
    function shouldOfferSwitchingToNextInputMethod(para1: AOIBinder): jboolean; overload; virtual;
    procedure setAdditionalInputMethodSubtypes(para1: JLString; para2: Arr1AVIInputMethodSubtype); overload; virtual;
    procedure setAdditionalInputMethodSubtypes(para1: JLString; var para2: array of AVIInputMethodSubtype); overload; virtual;
    function getLastInputMethodSubtype(): AVIInputMethodSubtype; overload; virtual;
  end;

  AVIInputMethodSession = interface external 'android.view.inputmethod' name 'InputMethodSession' 
    type
      InnerEventCallback = interface;
      Arr1InnerEventCallback = array of InnerEventCallback;
      Arr2InnerEventCallback = array of Arr1InnerEventCallback;
      Arr3InnerEventCallback = array of Arr2InnerEventCallback;
      InnerEventCallback = interface external 'android.view.inputmethod' name 'EventCallback' 
        procedure finishedEvent(para1: jint; para2: jboolean); overload;
      end;

    procedure finishInput(); overload;
    procedure updateSelection(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload;
    procedure viewClicked(para1: jboolean); overload;
    procedure updateCursor(para1: AGRect); overload;
    procedure displayCompletions(para1: Arr1AVICompletionInfo); overload;
    procedure displayCompletions(var para1: array of AVICompletionInfo); overload;
    procedure updateExtractedText(para1: jint; para2: AVIExtractedText); overload;
    procedure dispatchKeyEvent(para1: jint; para2: AVKeyEvent; para3: AVIInputMethodSession.InnerEventCallback); overload;
    procedure dispatchTrackballEvent(para1: jint; para2: AVMotionEvent; para3: AVIInputMethodSession.InnerEventCallback); overload;
    procedure dispatchGenericMotionEvent(para1: jint; para2: AVMotionEvent; para3: AVIInputMethodSession.InnerEventCallback); overload;
    procedure appPrivateCommand(para1: JLString; para2: AOBundle); overload;
    procedure toggleSoftInput(para1: jint; para2: jint); overload;
    procedure updateCursorAnchorInfo(para1: AVICursorAnchorInfo); overload;
  end;

  AVTSpellCheckerSession = class external 'android.view.textservice' name 'SpellCheckerSession' (JLObject)
  public
    type
      InnerSpellCheckerSessionListener = interface;
      Arr1InnerSpellCheckerSessionListener = array of InnerSpellCheckerSessionListener;
      Arr2InnerSpellCheckerSessionListener = array of Arr1InnerSpellCheckerSessionListener;
      Arr3InnerSpellCheckerSessionListener = array of Arr2InnerSpellCheckerSessionListener;
      InnerSpellCheckerSessionListener = interface external 'android.view.textservice' name 'SpellCheckerSessionListener' 
        procedure onGetSuggestions(para1: Arr1AVTSuggestionsInfo); overload;
        procedure onGetSuggestions(var para1: array of AVTSuggestionsInfo); overload;
        procedure onGetSentenceSuggestions(para1: Arr1AVTSentenceSuggestionsInfo); overload;
        procedure onGetSentenceSuggestions(var para1: array of AVTSentenceSuggestionsInfo); overload;
      end;

  public
    const
      SERVICE_META_DATA = 'android.view.textservice.scs';
  public
    function isSessionDisconnected(): jboolean; overload; virtual;
    function getSpellChecker(): AVTSpellCheckerInfo; overload; virtual;
    procedure cancel(); overload; virtual;
    procedure close(); overload; virtual;
    procedure getSentenceSuggestions(para1: Arr1AVTTextInfo; para2: jint); overload; virtual;
    procedure getSentenceSuggestions(var para1: array of AVTTextInfo; para2: jint); overload; virtual;
    procedure getSuggestions(para1: AVTTextInfo; para2: jint); overload; virtual;
    procedure getSuggestions(para1: Arr1AVTTextInfo; para2: jint; para3: jboolean); overload; virtual;
    procedure getSuggestions(var para1: array of AVTTextInfo; para2: jint; para3: jboolean); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AWCookieManager = class external 'android.webkit' name 'CookieManager' (JLObject)
  strict protected
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  public
    class function getInstance(): AWCookieManager; static; overload;
    procedure setAcceptCookie(para1: jboolean); overload; virtual;
    function acceptCookie(): jboolean; overload; virtual;
    procedure setAcceptThirdPartyCookies(para1: AWWebView; para2: jboolean); overload; virtual;
    function acceptThirdPartyCookies(para1: AWWebView): jboolean; overload; virtual;
    procedure setCookie(para1: JLString; para2: JLString); overload; virtual;
    procedure setCookie(para1: JLString; para2: JLString; para3: AWValueCallback); overload; virtual;
    function getCookie(para1: JLString): JLString; overload; virtual;
    procedure removeSessionCookie(); overload; virtual;
    procedure removeSessionCookies(para1: AWValueCallback); overload; virtual;
    procedure removeAllCookie(); overload; virtual;
    procedure removeAllCookies(para1: AWValueCallback); overload; virtual;
    function hasCookies(): jboolean; overload; virtual;
    procedure removeExpiredCookie(); overload; virtual;
    procedure flush(); overload; virtual;
    class function allowFileSchemeCookies(): jboolean; static; overload;
    class procedure setAcceptFileSchemeCookies(para1: jboolean); static; overload;
  end;

  AWDateSorter = class external 'android.webkit' name 'DateSorter' (JLObject)
  public
    const
      DAY_COUNT = 5;
  public
    constructor create(para1: ACContext); overload;
    function getIndex(para1: jlong): jint; overload; virtual;
    function getLabel(para1: jint): JLString; overload; virtual;
    function getBoundary(para1: jint): jlong; overload; virtual;
  end;

  AWDownloadListener = interface external 'android.webkit' name 'DownloadListener' 
    procedure onDownloadStart(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: jlong); overload;
  end;

  AWGeolocationPermissions = class external 'android.webkit' name 'GeolocationPermissions' (JLObject)
  public
    type
      InnerCallback = interface;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = interface external 'android.webkit' name 'Callback' 
        procedure invoke(para1: JLString; para2: jboolean; para3: jboolean); overload;
      end;

  public
    class function getInstance(): AWGeolocationPermissions; static; overload;
    procedure getOrigins(para1: AWValueCallback); overload; virtual;
    procedure getAllowed(para1: JLString; para2: AWValueCallback); overload; virtual;
    procedure clear(para1: JLString); overload; virtual;
    procedure allow(para1: JLString); overload; virtual;
    procedure clearAll(); overload; virtual;
  end;

  AWJsResult = class external 'android.webkit' name 'JsResult' (JLObject)
  public
    procedure cancel(); overload; virtual; final;
    procedure confirm(); overload; virtual; final;
  end;

  AWMimeTypeMap = class external 'android.webkit' name 'MimeTypeMap' (JLObject)
  public
    class function getFileExtensionFromUrl(para1: JLString): JLString; static; overload;
    function hasMimeType(para1: JLString): jboolean; overload; virtual;
    function getMimeTypeFromExtension(para1: JLString): JLString; overload; virtual;
    function hasExtension(para1: JLString): jboolean; overload; virtual;
    function getExtensionFromMimeType(para1: JLString): JLString; overload; virtual;
    class function getSingleton(): AWMimeTypeMap; static; overload;
  end;

  AWPluginStub = interface external 'android.webkit' name 'PluginStub' 
    function getEmbeddedView(para1: jint; para2: ACContext): AVView; overload;
    function getFullScreenView(para1: jint; para2: ACContext): AVView; overload;
  end;

  AWURLUtil = class sealed external 'android.webkit' name 'URLUtil' (JLObject)
  public
    constructor create(); overload;
    class function guessUrl(para1: JLString): JLString; static; overload;
    class function composeSearchUrl(para1: JLString; para2: JLString; para3: JLString): JLString; static; overload;
    class function decode(para1: Arr1jbyte): Arr1jbyte; static; overload;  // throws java.lang.IllegalArgumentException
    class function decode(var para1: array of jbyte): Arr1jbyte; static; overload;  // throws java.lang.IllegalArgumentException
    class function isAssetUrl(para1: JLString): jboolean; static; overload;
    class function isCookielessProxyUrl(para1: JLString): jboolean; static; overload;
    class function isFileUrl(para1: JLString): jboolean; static; overload;
    class function isAboutUrl(para1: JLString): jboolean; static; overload;
    class function isDataUrl(para1: JLString): jboolean; static; overload;
    class function isJavaScriptUrl(para1: JLString): jboolean; static; overload;
    class function isHttpUrl(para1: JLString): jboolean; static; overload;
    class function isHttpsUrl(para1: JLString): jboolean; static; overload;
    class function isNetworkUrl(para1: JLString): jboolean; static; overload;
    class function isContentUrl(para1: JLString): jboolean; static; overload;
    class function isValidUrl(para1: JLString): jboolean; static; overload;
    class function stripAnchor(para1: JLString): JLString; static; overload;
    class function guessFileName(para1: JLString; para2: JLString; para3: JLString): JLString; static; overload; final;
  end;

  AWValueCallback = interface external 'android.webkit' name 'ValueCallback' 
    procedure onReceiveValue(para1: JLObject); overload;
  end;

  AWWebIconDatabase = class external 'android.webkit' name 'WebIconDatabase' (JLObject)
  public
    type
      InnerIconListener = interface;
      Arr1InnerIconListener = array of InnerIconListener;
      Arr2InnerIconListener = array of Arr1InnerIconListener;
      Arr3InnerIconListener = array of Arr2InnerIconListener;
      InnerIconListener = interface external 'android.webkit' name 'IconListener' 
        procedure onReceivedIcon(para1: JLString; para2: AGBitmap); overload;
      end;

  public
    procedure open(para1: JLString); overload; virtual;
    procedure close(); overload; virtual;
    procedure removeAllIcons(); overload; virtual;
    procedure requestIconForPageUrl(para1: JLString; para2: AWWebIconDatabase.InnerIconListener); overload; virtual;
    procedure retainIconForPageUrl(para1: JLString); overload; virtual;
    procedure releaseIconForPageUrl(para1: JLString); overload; virtual;
    class function getInstance(): AWWebIconDatabase; static; overload;
  end;

  AWWebResourceResponse = class external 'android.webkit' name 'WebResourceResponse' (JLObject)
  public
    constructor create(para1: JLString; para2: JLString; para3: JIInputStream); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLString; para5: JUMap; para6: JIInputStream); overload;
    procedure setMimeType(para1: JLString); overload; virtual;
    function getMimeType(): JLString; overload; virtual;
    procedure setEncoding(para1: JLString); overload; virtual;
    function getEncoding(): JLString; overload; virtual;
    procedure setStatusCodeAndReasonPhrase(para1: jint; para2: JLString); overload; virtual;
    function getStatusCode(): jint; overload; virtual;
    function getReasonPhrase(): JLString; overload; virtual;
    procedure setResponseHeaders(para1: JUMap); overload; virtual;
    function getResponseHeaders(): JUMap; overload; virtual;
    procedure setData(para1: JIInputStream); overload; virtual;
    function getData(): JIInputStream; overload; virtual;
  end;

  AWWebStorage = class external 'android.webkit' name 'WebStorage' (JLObject)
  public
    type
      InnerOrigin = class;
      Arr1InnerOrigin = array of InnerOrigin;
      Arr2InnerOrigin = array of Arr1InnerOrigin;
      Arr3InnerOrigin = array of Arr2InnerOrigin;
      InnerQuotaUpdater = interface;
      Arr1InnerQuotaUpdater = array of InnerQuotaUpdater;
      Arr2InnerQuotaUpdater = array of Arr1InnerQuotaUpdater;
      Arr3InnerQuotaUpdater = array of Arr2InnerQuotaUpdater;
      InnerOrigin = class external 'android.webkit' name 'Origin' (JLObject)
      public
        function getOrigin(): JLString; overload; virtual;
        function getQuota(): jlong; overload; virtual;
        function getUsage(): jlong; overload; virtual;
      end;

      InnerQuotaUpdater = interface external 'android.webkit' name 'QuotaUpdater' 
        procedure updateQuota(para1: jlong); overload;
      end;

  public
    procedure getOrigins(para1: AWValueCallback); overload; virtual;
    procedure getUsageForOrigin(para1: JLString; para2: AWValueCallback); overload; virtual;
    procedure getQuotaForOrigin(para1: JLString; para2: AWValueCallback); overload; virtual;
    procedure setQuotaForOrigin(para1: JLString; para2: jlong); overload; virtual;
    procedure deleteOrigin(para1: JLString); overload; virtual;
    procedure deleteAllData(); overload; virtual;
    class function getInstance(): AWWebStorage; static; overload;
  end;

  AWWebViewClient = class external 'android.webkit' name 'WebViewClient' (JLObject)
  public
    const
      ERROR_AUTHENTICATION = -4;
      ERROR_BAD_URL = -12;
      ERROR_CONNECT = -6;
      ERROR_FAILED_SSL_HANDSHAKE = -11;
      ERROR_FILE = -13;
      ERROR_FILE_NOT_FOUND = -14;
      ERROR_HOST_LOOKUP = -2;
      ERROR_IO = -7;
      ERROR_PROXY_AUTHENTICATION = -5;
      ERROR_REDIRECT_LOOP = -9;
      ERROR_TIMEOUT = -8;
      ERROR_TOO_MANY_REQUESTS = -15;
      ERROR_UNKNOWN = -1;
      ERROR_UNSUPPORTED_AUTH_SCHEME = -3;
      ERROR_UNSUPPORTED_SCHEME = -10;
  public
    constructor create(); overload;
    function shouldOverrideUrlLoading(para1: AWWebView; para2: JLString): jboolean; overload; virtual;
    procedure onPageStarted(para1: AWWebView; para2: JLString; para3: AGBitmap); overload; virtual;
    procedure onPageFinished(para1: AWWebView; para2: JLString); overload; virtual;
    procedure onLoadResource(para1: AWWebView; para2: JLString); overload; virtual;
    function shouldInterceptRequest(para1: AWWebView; para2: JLString): AWWebResourceResponse; overload; virtual;
    function shouldInterceptRequest(para1: AWWebView; para2: AWWebResourceRequest): AWWebResourceResponse; overload; virtual;
    procedure onTooManyRedirects(para1: AWWebView; para2: AOMessage; para3: AOMessage); overload; virtual;
    procedure onReceivedError(para1: AWWebView; para2: jint; para3: JLString; para4: JLString); overload; virtual;
    procedure onFormResubmission(para1: AWWebView; para2: AOMessage; para3: AOMessage); overload; virtual;
    procedure doUpdateVisitedHistory(para1: AWWebView; para2: JLString; para3: jboolean); overload; virtual;
    procedure onReceivedSslError(para1: AWWebView; para2: AWSslErrorHandler; para3: ANHSslError); overload; virtual;
    procedure onReceivedClientCertRequest(para1: AWWebView; para2: AWClientCertRequest); overload; virtual;
    procedure onReceivedHttpAuthRequest(para1: AWWebView; para2: AWHttpAuthHandler; para3: JLString; para4: JLString); overload; virtual;
    function shouldOverrideKeyEvent(para1: AWWebView; para2: AVKeyEvent): jboolean; overload; virtual;
    procedure onUnhandledKeyEvent(para1: AWWebView; para2: AVKeyEvent); overload; virtual;
    procedure onUnhandledInputEvent(para1: AWWebView; para2: AVInputEvent); overload; virtual;
    procedure onScaleChanged(para1: AWWebView; para2: jfloat; para3: jfloat); overload; virtual;
    procedure onReceivedLoginRequest(para1: AWWebView; para2: JLString; para3: JLString; para4: JLString); overload; virtual;
  end;

  AWWebViewDatabase = class external 'android.webkit' name 'WebViewDatabase' (JLObject)
  public
    class function getInstance(para1: ACContext): AWWebViewDatabase; static; overload;
    function hasUsernamePassword(): jboolean; overload; virtual;
    procedure clearUsernamePassword(); overload; virtual;
    function hasHttpAuthUsernamePassword(): jboolean; overload; virtual;
    procedure clearHttpAuthUsernamePassword(); overload; virtual;
    function hasFormData(): jboolean; overload; virtual;
    procedure clearFormData(); overload; virtual;
  end;

  AWAdapter = interface external 'android.widget' name 'Adapter' 
    const
      IGNORE_ITEM_VIEW_TYPE = -1;
      NO_SELECTION = -2147483648;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload;
    function getCount(): jint; overload;
    function getItem(para1: jint): JLObject; overload;
    function getItemId(para1: jint): jlong; overload;
    function hasStableIds(): jboolean; overload;
    function getView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload;
    function getItemViewType(para1: jint): jint; overload;
    function getViewTypeCount(): jint; overload;
    function isEmpty(): jboolean; overload;
  end;

  AWCheckable = interface external 'android.widget' name 'Checkable' 
    procedure setChecked(para1: jboolean); overload;
    function isChecked(): jboolean; overload;
    procedure toggle(); overload;
  end;

  AWEdgeEffect = class external 'android.widget' name 'EdgeEffect' (JLObject)
  public
    constructor create(para1: ACContext); overload;
    procedure setSize(para1: jint; para2: jint); overload; virtual;
    function isFinished(): jboolean; overload; virtual;
    procedure finish(); overload; virtual;
    procedure onPull(para1: jfloat); overload; virtual;
    procedure onPull(para1: jfloat; para2: jfloat); overload; virtual;
    procedure onRelease(); overload; virtual;
    procedure onAbsorb(para1: jint); overload; virtual;
    procedure setColor(para1: jint); overload; virtual;
    function getColor(): jint; overload; virtual;
    function draw(para1: AGCanvas): jboolean; overload; virtual;
    function getMaxHeight(): jint; overload; virtual;
  end;

  AWExpandableListAdapter = interface external 'android.widget' name 'ExpandableListAdapter' 
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload;
    function getGroupCount(): jint; overload;
    function getChildrenCount(para1: jint): jint; overload;
    function getGroup(para1: jint): JLObject; overload;
    function getChild(para1: jint; para2: jint): JLObject; overload;
    function getGroupId(para1: jint): jlong; overload;
    function getChildId(para1: jint; para2: jint): jlong; overload;
    function hasStableIds(): jboolean; overload;
    function getGroupView(para1: jint; para2: jboolean; para3: AVView; para4: AVViewGroup): AVView; overload;
    function getChildView(para1: jint; para2: jint; para3: jboolean; para4: AVView; para5: AVViewGroup): AVView; overload;
    function isChildSelectable(para1: jint; para2: jint): jboolean; overload;
    function areAllItemsEnabled(): jboolean; overload;
    function isEmpty(): jboolean; overload;
    procedure onGroupExpanded(para1: jint); overload;
    procedure onGroupCollapsed(para1: jint); overload;
    function getCombinedChildId(para1: jlong; para2: jlong): jlong; overload;
    function getCombinedGroupId(para1: jlong): jlong; overload;
  end;

  AWFilter = class abstract external 'android.widget' name 'Filter' (JLObject)
  public
    type
      InnerFilterListener = interface;
      Arr1InnerFilterListener = array of InnerFilterListener;
      Arr2InnerFilterListener = array of Arr1InnerFilterListener;
      Arr3InnerFilterListener = array of Arr2InnerFilterListener;
      InnerFilterResults = class;
      Arr1InnerFilterResults = array of InnerFilterResults;
      Arr2InnerFilterResults = array of Arr1InnerFilterResults;
      Arr3InnerFilterResults = array of Arr2InnerFilterResults;
      InnerFilterListener = interface external 'android.widget' name 'FilterListener' 
        procedure onFilterComplete(para1: jint); overload;
      end;

      InnerFilterResults = class external 'android.widget' name 'FilterResults' (JLObject)
      public
        var
          fcount: jint; external name 'count';
          fvalues: JLObject; external name 'values';
      public
        constructor create(); overload;
      end;

  public
    constructor create(); overload;
    procedure filter(para1: JLCharSequence); overload; virtual; final;
    procedure filter(para1: JLCharSequence; para2: AWFilter.InnerFilterListener); overload; virtual; final;
  strict protected
    function performFiltering(para1: JLCharSequence): AWFilter.InnerFilterResults; overload; virtual; abstract;
    procedure publishResults(para1: JLCharSequence; para2: AWFilter.InnerFilterResults); overload; virtual; abstract;
  public
    function convertResultToString(para1: JLObject): JLCharSequence; overload; virtual;
  end;

  AWFilterQueryProvider = interface external 'android.widget' name 'FilterQueryProvider' 
    function runQuery(para1: JLCharSequence): ADCursor; overload;
  end;

  AWFilterable = interface external 'android.widget' name 'Filterable' 
    function getFilter(): AWFilter; overload;
  end;

  AWHeterogeneousExpandableList = interface external 'android.widget' name 'HeterogeneousExpandableList' 
    function getGroupType(para1: jint): jint; overload;
    function getChildType(para1: jint; para2: jint): jint; overload;
    function getGroupTypeCount(): jint; overload;
    function getChildTypeCount(): jint; overload;
  end;

  AWOverScroller = class external 'android.widget' name 'OverScroller' (JLObject)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AVAInterpolator); overload;
    constructor create(para1: ACContext; para2: AVAInterpolator; para3: jfloat; para4: jfloat); overload;
    constructor create(para1: ACContext; para2: AVAInterpolator; para3: jfloat; para4: jfloat; para5: jboolean); overload;
    procedure setFriction(para1: jfloat); overload; virtual; final;
    function isFinished(): jboolean; overload; virtual; final;
    procedure forceFinished(para1: jboolean); overload; virtual; final;
    function getCurrX(): jint; overload; virtual; final;
    function getCurrY(): jint; overload; virtual; final;
    function getCurrVelocity(): jfloat; overload; virtual;
    function getStartX(): jint; overload; virtual; final;
    function getStartY(): jint; overload; virtual; final;
    function getFinalX(): jint; overload; virtual; final;
    function getFinalY(): jint; overload; virtual; final;
    function computeScrollOffset(): jboolean; overload; virtual;
    procedure startScroll(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure startScroll(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    function springBack(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint): jboolean; overload; virtual;
    procedure fling(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); overload; virtual;
    procedure fling(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint); overload; virtual;
    procedure notifyHorizontalEdgeReached(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure notifyVerticalEdgeReached(para1: jint; para2: jint; para3: jint); overload; virtual;
    function isOverScrolled(): jboolean; overload; virtual;
    procedure abortAnimation(); overload; virtual;
  end;

  AWScroller = class external 'android.widget' name 'Scroller' (JLObject)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AVAInterpolator); overload;
    constructor create(para1: ACContext; para2: AVAInterpolator; para3: jboolean); overload;
    procedure setFriction(para1: jfloat); overload; virtual; final;
    function isFinished(): jboolean; overload; virtual; final;
    procedure forceFinished(para1: jboolean); overload; virtual; final;
    function getDuration(): jint; overload; virtual; final;
    function getCurrX(): jint; overload; virtual; final;
    function getCurrY(): jint; overload; virtual; final;
    function getCurrVelocity(): jfloat; overload; virtual;
    function getStartX(): jint; overload; virtual; final;
    function getStartY(): jint; overload; virtual; final;
    function getFinalX(): jint; overload; virtual; final;
    function getFinalY(): jint; overload; virtual; final;
    function computeScrollOffset(): jboolean; overload; virtual;
    procedure startScroll(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure startScroll(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure fling(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); overload; virtual;
    procedure abortAnimation(); overload; virtual;
    procedure extendDuration(para1: jint); overload; virtual;
    function timePassed(): jint; overload; virtual;
    procedure setFinalX(para1: jint); overload; virtual;
    procedure setFinalY(para1: jint); overload; virtual;
  end;

  AWSectionIndexer = interface external 'android.widget' name 'SectionIndexer' 
    function getSections(): Arr1JLObject; overload;
    function getPositionForSection(para1: jint): jint; overload;
    function getSectionForPosition(para1: jint): jint; overload;
  end;

  AWToast = class external 'android.widget' name 'Toast' (JLObject)
  public
    const
      LENGTH_LONG = 1;
      LENGTH_SHORT = 0;
  public
    constructor create(para1: ACContext); overload;
    procedure show(); overload; virtual;
    procedure cancel(); overload; virtual;
    procedure setView(para1: AVView); overload; virtual;
    function getView(): AVView; overload; virtual;
    procedure setDuration(para1: jint); overload; virtual;
    function getDuration(): jint; overload; virtual;
    procedure setMargin(para1: jfloat; para2: jfloat); overload; virtual;
    function getHorizontalMargin(): jfloat; overload; virtual;
    function getVerticalMargin(): jfloat; overload; virtual;
    procedure setGravity(para1: jint; para2: jint; para3: jint); overload; virtual;
    function getGravity(): jint; overload; virtual;
    function getXOffset(): jint; overload; virtual;
    function getYOffset(): jint; overload; virtual;
    class function makeText(para1: ACContext; para2: JLCharSequence; para3: jint): AWToast; static; overload;
    class function makeText(para1: ACContext; para2: jint; para3: jint): AWToast; static; overload;  // throws android.content.res.Resources$NotFoundException
    procedure setText(para1: jint); overload; virtual;
    procedure setText(para1: JLCharSequence); overload; virtual;
  end;

  JIDataInput = interface external 'java.io' name 'DataInput' 
    function readBoolean(): jboolean; overload;  // throws java.io.IOException
    function readByte(): jbyte; overload;  // throws java.io.IOException
    function readChar(): jchar; overload;  // throws java.io.IOException
    function readDouble(): jdouble; overload;  // throws java.io.IOException
    function readFloat(): jfloat; overload;  // throws java.io.IOException
    procedure readFully(para1: Arr1jbyte); overload;  // throws java.io.IOException
    procedure readFully(var para1: array of jbyte); overload;  // throws java.io.IOException
    procedure readFully(para1: Arr1jbyte; para2: jint; para3: jint); overload;  // throws java.io.IOException
    procedure readFully(var para1: array of jbyte; para2: jint; para3: jint); overload;  // throws java.io.IOException
    function readInt(): jint; overload;  // throws java.io.IOException
    function readLine(): JLString; overload;  // throws java.io.IOException
    function readLong(): jlong; overload;  // throws java.io.IOException
    function readShort(): jshort; overload;  // throws java.io.IOException
    function readUnsignedByte(): jint; overload;  // throws java.io.IOException
    function readUnsignedShort(): jint; overload;  // throws java.io.IOException
    function readUTF(): JLString; overload;  // throws java.io.IOException
    function skipBytes(para1: jint): jint; overload;  // throws java.io.IOException
  end;

  JIDataOutput = interface external 'java.io' name 'DataOutput' 
    procedure write(para1: Arr1jbyte); overload;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload;  // throws java.io.IOException
    procedure write(para1: jint); overload;  // throws java.io.IOException
    procedure writeBoolean(para1: jboolean); overload;  // throws java.io.IOException
    procedure writeByte(para1: jint); overload;  // throws java.io.IOException
    procedure writeBytes(para1: JLString); overload;  // throws java.io.IOException
    procedure writeChar(para1: jint); overload;  // throws java.io.IOException
    procedure writeChars(para1: JLString); overload;  // throws java.io.IOException
    procedure writeDouble(para1: jdouble); overload;  // throws java.io.IOException
    procedure writeFloat(para1: jfloat); overload;  // throws java.io.IOException
    procedure writeInt(para1: jint); overload;  // throws java.io.IOException
    procedure writeLong(para1: jlong); overload;  // throws java.io.IOException
    procedure writeShort(para1: jint); overload;  // throws java.io.IOException
    procedure writeUTF(para1: JLString); overload;  // throws java.io.IOException
  end;

  JIFileDescriptor = class sealed external 'java.io' name 'FileDescriptor' (JLObject)
  public
    final class var
      ferr: JIFileDescriptor; external name 'err';
      fin: JIFileDescriptor; external name 'in';
      fout: JIFileDescriptor; external name 'out';
  public
    constructor create(); overload;
    procedure sync(); overload; virtual;  // throws java.io.SyncFailedException
    function valid(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JIFileFilter = interface external 'java.io' name 'FileFilter' 
    function accept(para1: JIFile): jboolean; overload;
  end;

  JIFilenameFilter = interface external 'java.io' name 'FilenameFilter' 
    function accept(para1: JIFile; para2: JLString): jboolean; overload;
  end;

  JIFlushable = interface external 'java.io' name 'Flushable' 
    procedure flush(); overload;  // throws java.io.IOException
  end;

  JIObjectInputValidation = interface external 'java.io' name 'ObjectInputValidation' 
    procedure validateObject(); overload;  // throws java.io.InvalidObjectException
  end;

  JIObjectStreamConstants = interface external 'java.io' name 'ObjectStreamConstants' 
    const
      PROTOCOL_VERSION_1 = 1;
      PROTOCOL_VERSION_2 = 2;
      SC_BLOCK_DATA = 8;
      SC_ENUM = 16;
      SC_EXTERNALIZABLE = 4;
      SC_SERIALIZABLE = 2;
      SC_WRITE_METHOD = 1;
      STREAM_MAGIC = -21267;
      STREAM_VERSION = 5;
    final class var
      fSUBCLASS_IMPLEMENTATION_PERMISSION: JISerializablePermission; external name 'SUBCLASS_IMPLEMENTATION_PERMISSION';
      fSUBSTITUTION_PERMISSION: JISerializablePermission; external name 'SUBSTITUTION_PERMISSION';
    const
      TC_ARRAY = 117;
      TC_BASE = 112;
      TC_BLOCKDATA = 119;
      TC_BLOCKDATALONG = 122;
      TC_CLASS = 118;
      TC_CLASSDESC = 114;
      TC_ENDBLOCKDATA = 120;
      TC_ENUM = 126;
      TC_EXCEPTION = 123;
      TC_LONGSTRING = 124;
      TC_MAX = 126;
      TC_NULL = 112;
      TC_OBJECT = 115;
      TC_PROXYCLASSDESC = 125;
      TC_REFERENCE = 113;
      TC_RESET = 121;
      TC_STRING = 116;
      baseWireHandle = 8257536;
  end;

  JIStreamTokenizer = class external 'java.io' name 'StreamTokenizer' (JLObject)
  public
    const
      TT_EOF = -1;
      TT_EOL = 10;
      TT_NUMBER = -2;
      TT_WORD = -3;
  public
    var
      fnval: jdouble; external name 'nval';
      fsval: JLString; external name 'sval';
      fttype: jint; external name 'ttype';
  public
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIReader); overload;
    procedure commentChar(para1: jint); overload; virtual;
    procedure eolIsSignificant(para1: jboolean); overload; virtual;
    function lineno(): jint; overload; virtual;
    procedure lowerCaseMode(para1: jboolean); overload; virtual;
    function nextToken(): jint; overload; virtual;  // throws java.io.IOException
    procedure ordinaryChar(para1: jint); overload; virtual;
    procedure ordinaryChars(para1: jint; para2: jint); overload; virtual;
    procedure parseNumbers(); overload; virtual;
    procedure pushBack(); overload; virtual;
    procedure quoteChar(para1: jint); overload; virtual;
    procedure resetSyntax(); overload; virtual;
    procedure slashSlashComments(para1: jboolean); overload; virtual;
    procedure slashStarComments(para1: jboolean); overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure whitespaceChars(para1: jint; para2: jint); overload; virtual;
    procedure wordChars(para1: jint; para2: jint); overload; virtual;
  end;

  JLClassLoader = class abstract external 'java.lang' name 'ClassLoader' (JLObject)
  strict protected
    constructor create(); overload;
    constructor create(para1: JLClassLoader); overload;
  public
    class function getSystemClassLoader(): JLClassLoader; static; overload;
    class function getSystemResource(para1: JLString): JNURL; static; overload;
    class function getSystemResources(para1: JLString): JUEnumeration; static; overload;  // throws java.io.IOException
    class function getSystemResourceAsStream(para1: JLString): JIInputStream; static; overload;
  strict protected
    function defineClass(para1: Arr1jbyte; para2: jint; para3: jint): JLClass; overload; virtual; final;  // throws java.lang.ClassFormatError
    function defineClass(var para1: array of jbyte; para2: jint; para3: jint): JLClass; overload; virtual; final;  // throws java.lang.ClassFormatError
    function defineClass(para1: JLString; para2: Arr1jbyte; para3: jint; para4: jint): JLClass; overload; virtual; final;  // throws java.lang.ClassFormatError
    function defineClass(para1: JLString; var para2: array of jbyte; para3: jint; para4: jint): JLClass; overload; virtual; final;  // throws java.lang.ClassFormatError
    function defineClass(para1: JLString; para2: Arr1jbyte; para3: jint; para4: jint; para5: JSProtectionDomain): JLClass; overload; virtual; final;  // throws java.lang.ClassFormatError
    function defineClass(para1: JLString; var para2: array of jbyte; para3: jint; para4: jint; para5: JSProtectionDomain): JLClass; overload; virtual; final;  // throws java.lang.ClassFormatError
    function defineClass(para1: JLString; para2: JNByteBuffer; para3: JSProtectionDomain): JLClass; overload; virtual; final;  // throws java.lang.ClassFormatError
    function findClass(para1: JLString): JLClass; overload; virtual;  // throws java.lang.ClassNotFoundException
    function findLoadedClass(para1: JLString): JLClass; overload; virtual; final;
    function findSystemClass(para1: JLString): JLClass; overload; virtual; final;  // throws java.lang.ClassNotFoundException
  public
    function getParent(): JLClassLoader; overload; virtual; final;
    function getResource(para1: JLString): JNURL; overload; virtual;
    function getResources(para1: JLString): JUEnumeration; overload; virtual;  // throws java.io.IOException
    function getResourceAsStream(para1: JLString): JIInputStream; overload; virtual;
    function loadClass(para1: JLString): JLClass; overload; virtual;  // throws java.lang.ClassNotFoundException
  strict protected
    function loadClass(para1: JLString; para2: jboolean): JLClass; overload; virtual;  // throws java.lang.ClassNotFoundException
    procedure resolveClass(para1: JLClass); overload; virtual; final;
    function findResource(para1: JLString): JNURL; overload; virtual;
    function findResources(para1: JLString): JUEnumeration; overload; virtual;  // throws java.io.IOException
    function findLibrary(para1: JLString): JLString; overload; virtual;
    function getPackage(para1: JLString): JLPackage; overload; virtual;
    function getPackages(): Arr1JLPackage; overload; virtual;
    function definePackage(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString; para6: JLString; para7: JLString; para8: JNURL): JLPackage; overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setSigners(para1: JLClass; para2: Arr1JLObject); overload; virtual; final;
    procedure setSigners(para1: JLClass; var para2: array of JLObject); overload; virtual; final;
  public
    procedure setClassAssertionStatus(para1: JLString; para2: jboolean); overload; virtual;
    procedure setPackageAssertionStatus(para1: JLString; para2: jboolean); overload; virtual;
    procedure setDefaultAssertionStatus(para1: jboolean); overload; virtual;
    procedure clearAssertionStatus(); overload; virtual;
  end;

  JLCompiler = class sealed external 'java.lang' name 'Compiler' (JLObject)
  public
    class function command(para1: JLObject): JLObject; static; overload;
    class function compileClass(para1: JLClass): jboolean; static; overload;
    class function compileClasses(para1: JLString): jboolean; static; overload;
    class procedure disable(); static; overload;
    class procedure enable(); static; overload;
  end;

  JLProcess = class abstract external 'java.lang' name 'Process' (JLObject)
  public
    constructor create(); overload;
    procedure destroy(); overload; virtual; abstract;
    function exitValue(): jint; overload; virtual; abstract;
    function getErrorStream(): JIInputStream; overload; virtual; abstract;
    function getInputStream(): JIInputStream; overload; virtual; abstract;
    function getOutputStream(): JIOutputStream; overload; virtual; abstract;
    function waitFor(): jint; overload; virtual; abstract;  // throws java.lang.InterruptedException
  end;

  JLProcessBuilder = class sealed external 'java.lang' name 'ProcessBuilder' (JLObject)
  public
    constructor create(para1: Arr1JLString); overload;
    constructor create(const para1: array of JLString); overload;
    constructor create(para1: JUList); overload;
    function command(): JUList; overload; virtual;
    function command(para1: Arr1JLString): JLProcessBuilder; overload; virtual;
    function command(const para1: array of JLString): JLProcessBuilder; overload; virtual;
    function command(para1: JUList): JLProcessBuilder; overload; virtual;
    function directory(): JIFile; overload; virtual;
    function directory(para1: JIFile): JLProcessBuilder; overload; virtual;
    function environment(): JUMap; overload; virtual;
    function redirectErrorStream(): jboolean; overload; virtual;
    function redirectErrorStream(para1: jboolean): JLProcessBuilder; overload; virtual;
    function start(): JLProcess; overload; virtual;  // throws java.io.IOException
  end;

  JLRunnable = interface external 'java.lang' name 'Runnable' 
    procedure run(); overload;
  end;

  JLSecurityManager = class external 'java.lang' name 'SecurityManager' (JLObject)
  strict protected
    var
      finCheck: jboolean deprecated; external name 'inCheck';
  public
    constructor create(); overload;
    procedure checkAccept(para1: JLString; para2: jint); overload; virtual;
    procedure checkAccess(para1: JLThread); overload; virtual;
    procedure checkAccess(para1: JLThreadGroup); overload; virtual;
    procedure checkConnect(para1: JLString; para2: jint); overload; virtual;
    procedure checkConnect(para1: JLString; para2: jint; para3: JLObject); overload; virtual;
    procedure checkCreateClassLoader(); overload; virtual;
    procedure checkDelete(para1: JLString); overload; virtual;
    procedure checkExec(para1: JLString); overload; virtual;
    procedure checkExit(para1: jint); overload; virtual;
    procedure checkLink(para1: JLString); overload; virtual;
    procedure checkListen(para1: jint); overload; virtual;
    procedure checkMemberAccess(para1: JLClass; para2: jint); overload; virtual;
    procedure checkMulticast(para1: JNInetAddress); overload; virtual;
    procedure checkMulticast(para1: JNInetAddress; para2: jbyte); overload; virtual;
    procedure checkPackageAccess(para1: JLString); overload; virtual;
    procedure checkPackageDefinition(para1: JLString); overload; virtual;
    procedure checkPropertiesAccess(); overload; virtual;
    procedure checkPropertyAccess(para1: JLString); overload; virtual;
    procedure checkRead(para1: JIFileDescriptor); overload; virtual;
    procedure checkRead(para1: JLString); overload; virtual;
    procedure checkRead(para1: JLString; para2: JLObject); overload; virtual;
    procedure checkSecurityAccess(para1: JLString); overload; virtual;
    procedure checkSetFactory(); overload; virtual;
    function checkTopLevelWindow(para1: JLObject): jboolean; overload; virtual;
    procedure checkSystemClipboardAccess(); overload; virtual;
    procedure checkAwtEventQueueAccess(); overload; virtual;
    procedure checkPrintJobAccess(); overload; virtual;
    procedure checkWrite(para1: JIFileDescriptor); overload; virtual;
    procedure checkWrite(para1: JLString); overload; virtual;
    function getInCheck(): jboolean; overload; virtual;
  strict protected
    function getClassContext(): Arr1JLClass; overload; virtual;
    function currentClassLoader(): JLClassLoader; overload; virtual;
    function classLoaderDepth(): jint; overload; virtual;
    function currentLoadedClass(): JLClass; overload; virtual;
    function classDepth(para1: JLString): jint; overload; virtual;
    function inClass(para1: JLString): jboolean; overload; virtual;
    function inClassLoader(): jboolean; overload; virtual;
  public
    function getThreadGroup(): JLThreadGroup; overload; virtual;
    function getSecurityContext(): JLObject; overload; virtual;
    procedure checkPermission(para1: JSPermission); overload; virtual;
    procedure checkPermission(para1: JSPermission; para2: JLObject); overload; virtual;
  end;

  JLStrictMath = class sealed external 'java.lang' name 'StrictMath' (JLObject)
  public
    const
      E = jdouble(2.718281828459045);
      PI = jdouble(3.141592653589793);
  public
    class function abs(para1: jdouble): jdouble; static; overload;
    class function abs(para1: jfloat): jfloat; static; overload;
    class function abs(para1: jint): jint; static; overload;
    class function abs(para1: jlong): jlong; static; overload;
    class function acos(para1: jdouble): jdouble; static; overload;
    class function asin(para1: jdouble): jdouble; static; overload;
    class function atan(para1: jdouble): jdouble; static; overload;
    class function atan2(para1: jdouble; para2: jdouble): jdouble; static; overload;
    class function cbrt(para1: jdouble): jdouble; static; overload;
    class function ceil(para1: jdouble): jdouble; static; overload;
    class function cosh(para1: jdouble): jdouble; static; overload;
    class function cos(para1: jdouble): jdouble; static; overload;
    class function exp(para1: jdouble): jdouble; static; overload;
    class function expm1(para1: jdouble): jdouble; static; overload;
    class function floor(para1: jdouble): jdouble; static; overload;
    class function hypot(para1: jdouble; para2: jdouble): jdouble; static; overload;
    class function IEEEremainder(para1: jdouble; para2: jdouble): jdouble; static; overload;
    class function log(para1: jdouble): jdouble; static; overload;
    class function log10(para1: jdouble): jdouble; static; overload;
    class function log1p(para1: jdouble): jdouble; static; overload;
    class function max(para1: jdouble; para2: jdouble): jdouble; static; overload;
    class function max(para1: jfloat; para2: jfloat): jfloat; static; overload;
    class function max(para1: jint; para2: jint): jint; static; overload;
    class function max(para1: jlong; para2: jlong): jlong; static; overload;
    class function min(para1: jdouble; para2: jdouble): jdouble; static; overload;
    class function min(para1: jfloat; para2: jfloat): jfloat; static; overload;
    class function min(para1: jint; para2: jint): jint; static; overload;
    class function min(para1: jlong; para2: jlong): jlong; static; overload;
    class function pow(para1: jdouble; para2: jdouble): jdouble; static; overload;
    class function random(): jdouble; static; overload;
    class function rint(para1: jdouble): jdouble; static; overload;
    class function round(para1: jdouble): jlong; static; overload;
    class function round(para1: jfloat): jint; static; overload;
    class function signum(para1: jdouble): jdouble; static; overload;
    class function signum(para1: jfloat): jfloat; static; overload;
    class function sinh(para1: jdouble): jdouble; static; overload;
    class function sin(para1: jdouble): jdouble; static; overload;
    class function sqrt(para1: jdouble): jdouble; static; overload;
    class function tan(para1: jdouble): jdouble; static; overload;
    class function tanh(para1: jdouble): jdouble; static; overload;
    class function toDegrees(para1: jdouble): jdouble; static; overload;
    class function toRadians(para1: jdouble): jdouble; static; overload;
    class function ulp(para1: jdouble): jdouble; static; overload;
    class function ulp(para1: jfloat): jfloat; static; overload;
    class function copySign(para1: jdouble; para2: jdouble): jdouble; static; overload;
    class function copySign(para1: jfloat; para2: jfloat): jfloat; static; overload;
    class function getExponent(para1: jfloat): jint; static; overload;
    class function getExponent(para1: jdouble): jint; static; overload;
    class function nextAfter(para1: jdouble; para2: jdouble): jdouble; static; overload;
    class function nextAfter(para1: jfloat; para2: jdouble): jfloat; static; overload;
    class function nextUp(para1: jdouble): jdouble; static; overload;
    class function nextUp(para1: jfloat): jfloat; static; overload;
    class function scalb(para1: jdouble; para2: jint): jdouble; static; overload;
    class function scalb(para1: jfloat; para2: jint): jfloat; static; overload;
  end;

  JLVoid = class sealed external 'java.lang' name 'Void' (JLObject)
  public
    final class var
      fTYPE: JLClass; external name 'TYPE';
  end;

  JLAAnnotation = interface external 'java.lang.annotation' name 'Annotation' 
    function annotationType(): JLClass; overload;
    function equals(para1: JLObject): jboolean; overload;
    function hashCode(): jint; overload;
    function toString(): JLString; overload;
  end;

  JLRReference = class abstract external 'java.lang.ref' name 'Reference' (JLObject)
  public
    procedure clear(); overload; virtual;
    function enqueue(): jboolean; overload; virtual;
    function get(): JLObject; overload; virtual;
    function isEnqueued(): jboolean; overload; virtual;
  end;

  JLRReferenceQueue = class external 'java.lang.ref' name 'ReferenceQueue' (JLObject)
  public
    constructor create(); overload;
    function poll(): JLRReference; overload; virtual;
    function remove(): JLRReference; overload; virtual;  // throws java.lang.InterruptedException
    function remove(para1: jlong): JLRReference; overload; virtual;  // throws java.lang.InterruptedException
  end;

  JLRInvocationHandler = interface external 'java.lang.reflect' name 'InvocationHandler' 
    function invoke(para1: JLObject; para2: JLRMethod; para3: Arr1JLObject): JLObject; overload;  // throws java.lang.Throwable
    function invoke(para1: JLObject; para2: JLRMethod; var para3: array of JLObject): JLObject; overload;  // throws java.lang.Throwable
  end;

  JLRModifier = class external 'java.lang.reflect' name 'Modifier' (JLObject)
  public
    const
      &ABSTRACT = 1024;
      &FINAL = 16;
      &INTERFACE = 512;
      NATIVE = 256;
      &PRIVATE = 2;
      &PROTECTED = 4;
      &PUBLIC = 1;
      STATIC = 8;
      &STRICT = 2048;
      SYNCHRONIZED = 32;
      TRANSIENT = 128;
      VOLATILE = 64;
  public
    constructor create(); overload;
    class function classModifiers(): jint; static; overload;
    class function constructorModifiers(): jint; static; overload;
    class function fieldModifiers(): jint; static; overload;
    class function interfaceModifiers(): jint; static; overload;
    class function methodModifiers(): jint; static; overload;
    class function isAbstract(para1: jint): jboolean; static; overload;
    class function isFinal(para1: jint): jboolean; static; overload;
    class function isInterface(para1: jint): jboolean; static; overload;
    class function isNative(para1: jint): jboolean; static; overload;
    class function isPrivate(para1: jint): jboolean; static; overload;
    class function isProtected(para1: jint): jboolean; static; overload;
    class function isPublic(para1: jint): jboolean; static; overload;
    class function isStatic(para1: jint): jboolean; static; overload;
    class function isStrict(para1: jint): jboolean; static; overload;
    class function isSynchronized(para1: jint): jboolean; static; overload;
    class function isTransient(para1: jint): jboolean; static; overload;
    class function isVolatile(para1: jint): jboolean; static; overload;
    class function toString(para1: jint): JLString; static; overload;
  end;

  JNCacheRequest = class abstract external 'java.net' name 'CacheRequest' (JLObject)
  public
    constructor create(); overload;
    procedure abort(); overload; virtual; abstract;
    function getBody(): JIOutputStream; overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNCacheResponse = class abstract external 'java.net' name 'CacheResponse' (JLObject)
  public
    constructor create(); overload;
    function getBody(): JIInputStream; overload; virtual; abstract;  // throws java.io.IOException
    function getHeaders(): JUMap; overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNContentHandler = class abstract external 'java.net' name 'ContentHandler' (JLObject)
  public
    constructor create(); overload;
    function getContent(para1: JNURLConnection): JLObject; overload; virtual; abstract;  // throws java.io.IOException
    function getContent(para1: JNURLConnection; para2: Arr1JLClass): JLObject; overload; virtual;  // throws java.io.IOException
    function getContent(para1: JNURLConnection; var para2: array of JLClass): JLObject; overload; virtual;  // throws java.io.IOException
  end;

  JNContentHandlerFactory = interface external 'java.net' name 'ContentHandlerFactory' 
    function createContentHandler(para1: JLString): JNContentHandler; overload;
  end;

  JNCookieHandler = class abstract external 'java.net' name 'CookieHandler' (JLObject)
  public
    constructor create(); overload;
    class function getDefault(): JNCookieHandler; static; overload;
    class procedure setDefault(para1: JNCookieHandler); static; overload;
    function get(para1: JNURI; para2: JUMap): JUMap; overload; virtual; abstract;  // throws java.io.IOException
    procedure put(para1: JNURI; para2: JUMap); overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNCookiePolicy = interface external 'java.net' name 'CookiePolicy' 
    final class var
      fACCEPT_ALL: JNCookiePolicy; external name 'ACCEPT_ALL';
      fACCEPT_NONE: JNCookiePolicy; external name 'ACCEPT_NONE';
      fACCEPT_ORIGINAL_SERVER: JNCookiePolicy; external name 'ACCEPT_ORIGINAL_SERVER';
    function shouldAccept(para1: JNURI; para2: JNHttpCookie): jboolean; overload;
  end;

  JNCookieStore = interface external 'java.net' name 'CookieStore' 
    procedure add(para1: JNURI; para2: JNHttpCookie); overload;
    function get(para1: JNURI): JUList; overload;
    function getCookies(): JUList; overload;
    function getURIs(): JUList; overload;
    function remove(para1: JNURI; para2: JNHttpCookie): jboolean; overload;
    function removeAll(): jboolean; overload;
  end;

  JNDatagramPacket = class sealed external 'java.net' name 'DatagramPacket' (JLObject)
  public
    constructor create(para1: Arr1jbyte; para2: jint); overload;
    constructor create(const para1: array of jbyte; para2: jint); overload;
    constructor create(para1: Arr1jbyte; para2: jint; para3: jint); overload;
    constructor create(const para1: array of jbyte; para2: jint; para3: jint); overload;
    constructor create(para1: Arr1jbyte; para2: jint; para3: jint; para4: JNInetAddress; para5: jint); overload;
    constructor create(const para1: array of jbyte; para2: jint; para3: jint; para4: JNInetAddress; para5: jint); overload;
    constructor create(para1: Arr1jbyte; para2: jint; para3: JNInetAddress; para4: jint); overload;
    constructor create(const para1: array of jbyte; para2: jint; para3: JNInetAddress; para4: jint); overload;
    constructor create(para1: Arr1jbyte; para2: jint; para3: JNSocketAddress); overload;  // throws java.net.SocketException
    constructor create(const para1: array of jbyte; para2: jint; para3: JNSocketAddress); overload;  // throws java.net.SocketException
    constructor create(para1: Arr1jbyte; para2: jint; para3: jint; para4: JNSocketAddress); overload;  // throws java.net.SocketException
    constructor create(const para1: array of jbyte; para2: jint; para3: jint; para4: JNSocketAddress); overload;  // throws java.net.SocketException
    function getAddress(): JNInetAddress; overload; virtual;
    function getData(): Arr1jbyte; overload; virtual;
    function getLength(): jint; overload; virtual;
    function getOffset(): jint; overload; virtual;
    function getPort(): jint; overload; virtual;
    procedure setAddress(para1: JNInetAddress); overload; virtual;
    procedure setData(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setData(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setData(para1: Arr1jbyte); overload; virtual;
    procedure setData(var para1: array of jbyte); overload; virtual;
    procedure setLength(para1: jint); overload; virtual;
    procedure setPort(para1: jint); overload; virtual;
    function getSocketAddress(): JNSocketAddress; overload; virtual;
    procedure setSocketAddress(para1: JNSocketAddress); overload; virtual;
  end;

  JNDatagramSocket = class external 'java.net' name 'DatagramSocket' (JLObject, JICloseable)
  public
    constructor create(); overload;  // throws java.net.SocketException
    constructor create(para1: jint); overload;  // throws java.net.SocketException
    constructor create(para1: jint; para2: JNInetAddress); overload;  // throws java.net.SocketException
  strict protected
    constructor create(para1: JNDatagramSocketImpl); overload;
  public
    constructor create(para1: JNSocketAddress); overload;  // throws java.net.SocketException
    procedure close(); overload; virtual;
    procedure disconnect(); overload; virtual;
    function getInetAddress(): JNInetAddress; overload; virtual;
    function getLocalAddress(): JNInetAddress; overload; virtual;
    function getLocalPort(): jint; overload; virtual;
    function getPort(): jint; overload; virtual;
    function getReceiveBufferSize(): jint; overload; virtual;  // throws java.net.SocketException
    function getSendBufferSize(): jint; overload; virtual;  // throws java.net.SocketException
    function getSoTimeout(): jint; overload; virtual;  // throws java.net.SocketException
    procedure receive(para1: JNDatagramPacket); overload; virtual;  // throws java.io.IOException
    procedure send(para1: JNDatagramPacket); overload; virtual;  // throws java.io.IOException
    procedure setSendBufferSize(para1: jint); overload; virtual;  // throws java.net.SocketException
    procedure setReceiveBufferSize(para1: jint); overload; virtual;  // throws java.net.SocketException
    procedure setSoTimeout(para1: jint); overload; virtual;  // throws java.net.SocketException
    class procedure setDatagramSocketImplFactory(para1: JNDatagramSocketImplFactory); static; overload;  // throws java.io.IOException
    procedure bind(para1: JNSocketAddress); overload; virtual;  // throws java.net.SocketException
    procedure connect(para1: JNSocketAddress); overload; virtual;  // throws java.net.SocketException
    procedure connect(para1: JNInetAddress; para2: jint); overload; virtual;
    function isBound(): jboolean; overload; virtual;
    function isConnected(): jboolean; overload; virtual;
    function getRemoteSocketAddress(): JNSocketAddress; overload; virtual;
    function getLocalSocketAddress(): JNSocketAddress; overload; virtual;
    procedure setReuseAddress(para1: jboolean); overload; virtual;  // throws java.net.SocketException
    function getReuseAddress(): jboolean; overload; virtual;  // throws java.net.SocketException
    procedure setBroadcast(para1: jboolean); overload; virtual;  // throws java.net.SocketException
    function getBroadcast(): jboolean; overload; virtual;  // throws java.net.SocketException
    procedure setTrafficClass(para1: jint); overload; virtual;  // throws java.net.SocketException
    function getTrafficClass(): jint; overload; virtual;  // throws java.net.SocketException
    function isClosed(): jboolean; overload; virtual;
    function getChannel(): JNCDatagramChannel; overload; virtual;
  end;

  JNDatagramSocketImplFactory = interface external 'java.net' name 'DatagramSocketImplFactory' 
    function createDatagramSocketImpl(): JNDatagramSocketImpl; overload;
  end;

  JNFileNameMap = interface external 'java.net' name 'FileNameMap' 
    function getContentTypeFor(para1: JLString): JLString; overload;
  end;

  JNIDN = class sealed external 'java.net' name 'IDN' (JLObject)
  public
    const
      ALLOW_UNASSIGNED = 1;
      USE_STD3_ASCII_RULES = 2;
  public
    class function toASCII(para1: JLString; para2: jint): JLString; static; overload;
    class function toASCII(para1: JLString): JLString; static; overload;
    class function toUnicode(para1: JLString; para2: jint): JLString; static; overload;
    class function toUnicode(para1: JLString): JLString; static; overload;
  end;

  JNInterfaceAddress = class external 'java.net' name 'InterfaceAddress' (JLObject)
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function getAddress(): JNInetAddress; overload; virtual;
    function getBroadcast(): JNInetAddress; overload; virtual;
    function getNetworkPrefixLength(): jshort; overload; virtual;
  end;

  JNNetworkInterface = class sealed external 'java.net' name 'NetworkInterface' (JLObject)
  public
    function getIndex(): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getInetAddresses(): JUEnumeration; overload; virtual;
    function getDisplayName(): JLString; overload; virtual;
    class function getByName(para1: JLString): JNNetworkInterface; static; overload;  // throws java.net.SocketException
    class function getByInetAddress(para1: JNInetAddress): JNNetworkInterface; static; overload;  // throws java.net.SocketException
    class function getByIndex(para1: jint): JNNetworkInterface; static; overload;  // throws java.net.SocketException
    class function getNetworkInterfaces(): JUEnumeration; static; overload;  // throws java.net.SocketException
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function getInterfaceAddresses(): JUList; overload; virtual;
    function getSubInterfaces(): JUEnumeration; overload; virtual;
    function getParent(): JNNetworkInterface; overload; virtual;
    function isUp(): jboolean; overload; virtual;  // throws java.net.SocketException
    function isLoopback(): jboolean; overload; virtual;  // throws java.net.SocketException
    function isPointToPoint(): jboolean; overload; virtual;  // throws java.net.SocketException
    function supportsMulticast(): jboolean; overload; virtual;  // throws java.net.SocketException
    function getHardwareAddress(): Arr1jbyte; overload; virtual;  // throws java.net.SocketException
    function getMTU(): jint; overload; virtual;  // throws java.net.SocketException
    function isVirtual(): jboolean; overload; virtual;
  end;

  JNPasswordAuthentication = class sealed external 'java.net' name 'PasswordAuthentication' (JLObject)
  public
    constructor create(para1: JLString; para2: Arr1jchar); overload;
    constructor create(para1: JLString; const para2: array of jchar); overload;
    function getPassword(): Arr1jchar; overload; virtual;
    function getUserName(): JLString; overload; virtual;
  end;

  JNProxySelector = class abstract external 'java.net' name 'ProxySelector' (JLObject)
  public
    constructor create(); overload;
    class function getDefault(): JNProxySelector; static; overload;
    class procedure setDefault(para1: JNProxySelector); static; overload;
    function select(para1: JNURI): JUList; overload; virtual; abstract;
    procedure connectFailed(para1: JNURI; para2: JNSocketAddress; para3: JIIOException); overload; virtual; abstract;
  end;

  JNResponseCache = class abstract external 'java.net' name 'ResponseCache' (JLObject)
  public
    constructor create(); overload;
    class function getDefault(): JNResponseCache; static; overload;
    class procedure setDefault(para1: JNResponseCache); static; overload;
    function get(para1: JNURI; para2: JLString; para3: JUMap): JNCacheResponse; overload; virtual; abstract;  // throws java.io.IOException
    function put(para1: JNURI; para2: JNURLConnection): JNCacheRequest; overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNServerSocket = class external 'java.net' name 'ServerSocket' (JLObject, JICloseable)
  public
    constructor create(); overload;  // throws java.io.IOException
    constructor create(para1: jint); overload;  // throws java.io.IOException
    constructor create(para1: jint; para2: jint); overload;  // throws java.io.IOException
    constructor create(para1: jint; para2: jint; para3: JNInetAddress); overload;  // throws java.io.IOException
    function accept(): JNSocket; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    function getInetAddress(): JNInetAddress; overload; virtual;
    function getLocalPort(): jint; overload; virtual;
    function getSoTimeout(): jint; overload; virtual;  // throws java.io.IOException
  strict protected
    procedure implAccept(para1: JNSocket); overload; virtual; final;  // throws java.io.IOException
  public
    class procedure setSocketFactory(para1: JNSocketImplFactory); static; overload;  // throws java.io.IOException
    procedure setSoTimeout(para1: jint); overload; virtual;  // throws java.net.SocketException
    function toString(): JLString; overload; virtual;
    procedure bind(para1: JNSocketAddress); overload; virtual;  // throws java.io.IOException
    procedure bind(para1: JNSocketAddress; para2: jint); overload; virtual;  // throws java.io.IOException
    function getLocalSocketAddress(): JNSocketAddress; overload; virtual;
    function isBound(): jboolean; overload; virtual;
    function isClosed(): jboolean; overload; virtual;
    procedure setReuseAddress(para1: jboolean); overload; virtual;  // throws java.net.SocketException
    function getReuseAddress(): jboolean; overload; virtual;  // throws java.net.SocketException
    procedure setReceiveBufferSize(para1: jint); overload; virtual;  // throws java.net.SocketException
    function getReceiveBufferSize(): jint; overload; virtual;  // throws java.net.SocketException
    function getChannel(): JNCServerSocketChannel; overload; virtual;
    procedure setPerformancePreferences(para1: jint; para2: jint; para3: jint); overload; virtual;
  end;

  JNSocket = class external 'java.net' name 'Socket' (JLObject, JICloseable)
  public
    constructor create(); overload;
    constructor create(para1: JNProxy); overload;
    constructor create(para1: JLString; para2: jint); overload;  // throws java.net.UnknownHostException, java.io.IOException
    constructor create(para1: JLString; para2: jint; para3: JNInetAddress; para4: jint); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: jint; para3: jboolean); overload;  // throws java.io.IOException
    constructor create(para1: JNInetAddress; para2: jint); overload;  // throws java.io.IOException
    constructor create(para1: JNInetAddress; para2: jint; para3: JNInetAddress; para4: jint); overload;  // throws java.io.IOException
    constructor create(para1: JNInetAddress; para2: jint; para3: jboolean); overload;  // throws java.io.IOException
  strict protected
    constructor create(para1: JNSocketImpl); overload;  // throws java.net.SocketException
  public
    procedure close(); overload; virtual;  // throws java.io.IOException
    function getInetAddress(): JNInetAddress; overload; virtual;
    function getInputStream(): JIInputStream; overload; virtual;  // throws java.io.IOException
    function getKeepAlive(): jboolean; overload; virtual;  // throws java.net.SocketException
    function getLocalAddress(): JNInetAddress; overload; virtual;
    function getLocalPort(): jint; overload; virtual;
    function getOutputStream(): JIOutputStream; overload; virtual;  // throws java.io.IOException
    function getPort(): jint; overload; virtual;
    function getSoLinger(): jint; overload; virtual;  // throws java.net.SocketException
    function getReceiveBufferSize(): jint; overload; virtual;  // throws java.net.SocketException
    function getSendBufferSize(): jint; overload; virtual;  // throws java.net.SocketException
    function getSoTimeout(): jint; overload; virtual;  // throws java.net.SocketException
    function getTcpNoDelay(): jboolean; overload; virtual;  // throws java.net.SocketException
    procedure setKeepAlive(para1: jboolean); overload; virtual;  // throws java.net.SocketException
    class procedure setSocketImplFactory(para1: JNSocketImplFactory); static; overload;  // throws java.io.IOException
    procedure setSendBufferSize(para1: jint); overload; virtual;  // throws java.net.SocketException
    procedure setReceiveBufferSize(para1: jint); overload; virtual;  // throws java.net.SocketException
    procedure setSoLinger(para1: jboolean; para2: jint); overload; virtual;  // throws java.net.SocketException
    procedure setSoTimeout(para1: jint); overload; virtual;  // throws java.net.SocketException
    procedure setTcpNoDelay(para1: jboolean); overload; virtual;  // throws java.net.SocketException
    function toString(): JLString; overload; virtual;
    procedure shutdownInput(); overload; virtual;  // throws java.io.IOException
    procedure shutdownOutput(); overload; virtual;  // throws java.io.IOException
    function getLocalSocketAddress(): JNSocketAddress; overload; virtual;
    function getRemoteSocketAddress(): JNSocketAddress; overload; virtual;
    function isBound(): jboolean; overload; virtual;
    function isConnected(): jboolean; overload; virtual;
    function isClosed(): jboolean; overload; virtual;
    procedure bind(para1: JNSocketAddress); overload; virtual;  // throws java.io.IOException
    procedure connect(para1: JNSocketAddress); overload; virtual;  // throws java.io.IOException
    procedure connect(para1: JNSocketAddress; para2: jint); overload; virtual;  // throws java.io.IOException
    function isInputShutdown(): jboolean; overload; virtual;
    function isOutputShutdown(): jboolean; overload; virtual;
    procedure setReuseAddress(para1: jboolean); overload; virtual;  // throws java.net.SocketException
    function getReuseAddress(): jboolean; overload; virtual;  // throws java.net.SocketException
    procedure setOOBInline(para1: jboolean); overload; virtual;  // throws java.net.SocketException
    function getOOBInline(): jboolean; overload; virtual;  // throws java.net.SocketException
    procedure setTrafficClass(para1: jint); overload; virtual;  // throws java.net.SocketException
    function getTrafficClass(): jint; overload; virtual;  // throws java.net.SocketException
    procedure sendUrgentData(para1: jint); overload; virtual;  // throws java.io.IOException
    function getChannel(): JNCSocketChannel; overload; virtual;
    procedure setPerformancePreferences(para1: jint; para2: jint; para3: jint); overload; virtual;
  end;

  JNSocketImplFactory = interface external 'java.net' name 'SocketImplFactory' 
    function createSocketImpl(): JNSocketImpl; overload;
  end;

  JNSocketOptions = interface external 'java.net' name 'SocketOptions' 
    const
      IP_MULTICAST_IF = 16;
      IP_MULTICAST_IF2 = 31;
      IP_MULTICAST_LOOP = 18;
      IP_TOS = 3;
      SO_BINDADDR = 15;
      SO_BROADCAST = 32;
      SO_KEEPALIVE = 8;
      SO_LINGER = 128;
      SO_OOBINLINE = 4099;
      SO_RCVBUF = 4098;
      SO_REUSEADDR = 4;
      SO_SNDBUF = 4097;
      SO_TIMEOUT = 4102;
      TCP_NODELAY = 1;
    function getOption(para1: jint): JLObject; overload;  // throws java.net.SocketException
    procedure setOption(para1: jint; para2: JLObject); overload;  // throws java.net.SocketException
  end;

  JNURLConnection = class abstract external 'java.net' name 'URLConnection' (JLObject)
  strict protected
    var
      fallowUserInteraction: jboolean; external name 'allowUserInteraction';
      fconnected: jboolean; external name 'connected';
      fdoInput: jboolean; external name 'doInput';
      fdoOutput: jboolean; external name 'doOutput';
      fifModifiedSince: jlong; external name 'ifModifiedSince';
      furl: JNURL; external name 'url';
      fuseCaches: jboolean; external name 'useCaches';
  strict protected
    constructor create(para1: JNURL); overload;
  public
    procedure connect(); overload; virtual; abstract;  // throws java.io.IOException
    function getAllowUserInteraction(): jboolean; overload; virtual;
    function getContent(): JLObject; overload; virtual;  // throws java.io.IOException
    function getContent(para1: Arr1JLClass): JLObject; overload; virtual;  // throws java.io.IOException
    function getContent(var para1: array of JLClass): JLObject; overload; virtual;  // throws java.io.IOException
    function getContentEncoding(): JLString; overload; virtual;
    function getContentLength(): jint; overload; virtual;
    function getContentType(): JLString; overload; virtual;
    function getDate(): jlong; overload; virtual;
    class function getDefaultAllowUserInteraction(): jboolean; static; overload;
    class function getDefaultRequestProperty(para1: JLString): JLString; static; overload;
    function getDefaultUseCaches(): jboolean; overload; virtual;
    function getDoInput(): jboolean; overload; virtual;
    function getDoOutput(): jboolean; overload; virtual;
    function getExpiration(): jlong; overload; virtual;
    class function getFileNameMap(): JNFileNameMap; static; overload;
    function getHeaderField(para1: jint): JLString; overload; virtual;
    function getHeaderFields(): JUMap; overload; virtual;
    function getRequestProperties(): JUMap; overload; virtual;
    procedure addRequestProperty(para1: JLString; para2: JLString); overload; virtual;
    function getHeaderField(para1: JLString): JLString; overload; virtual;
    function getHeaderFieldDate(para1: JLString; para2: jlong): jlong; overload; virtual;
    function getHeaderFieldInt(para1: JLString; para2: jint): jint; overload; virtual;
    function getHeaderFieldKey(para1: jint): JLString; overload; virtual;
    function getIfModifiedSince(): jlong; overload; virtual;
    function getInputStream(): JIInputStream; overload; virtual;  // throws java.io.IOException
    function getLastModified(): jlong; overload; virtual;
    function getOutputStream(): JIOutputStream; overload; virtual;  // throws java.io.IOException
    function getPermission(): JSPermission; overload; virtual;  // throws java.io.IOException
    function getRequestProperty(para1: JLString): JLString; overload; virtual;
    function getURL(): JNURL; overload; virtual;
    function getUseCaches(): jboolean; overload; virtual;
    class function guessContentTypeFromName(para1: JLString): JLString; static; overload;
    class function guessContentTypeFromStream(para1: JIInputStream): JLString; static; overload;  // throws java.io.IOException
    procedure setAllowUserInteraction(para1: jboolean); overload; virtual;
    class procedure setContentHandlerFactory(para1: JNContentHandlerFactory); static; overload;
    class procedure setDefaultAllowUserInteraction(para1: jboolean); static; overload;
    class procedure setDefaultRequestProperty(para1: JLString; para2: JLString); static; overload;
    procedure setDefaultUseCaches(para1: jboolean); overload; virtual;
    procedure setDoInput(para1: jboolean); overload; virtual;
    procedure setDoOutput(para1: jboolean); overload; virtual;
    class procedure setFileNameMap(para1: JNFileNameMap); static; overload;
    procedure setIfModifiedSince(para1: jlong); overload; virtual;
    procedure setRequestProperty(para1: JLString; para2: JLString); overload; virtual;
    procedure setUseCaches(para1: jboolean); overload; virtual;
    procedure setConnectTimeout(para1: jint); overload; virtual;
    function getConnectTimeout(): jint; overload; virtual;
    procedure setReadTimeout(para1: jint); overload; virtual;
    function getReadTimeout(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JNURLDecoder = class external 'java.net' name 'URLDecoder' (JLObject)
  public
    constructor create(); overload;
    class function decode(para1: JLString): JLString; static; overload;
    class function decode(para1: JLString; para2: JLString): JLString; static; overload;  // throws java.io.UnsupportedEncodingException
  end;

  JNURLEncoder = class external 'java.net' name 'URLEncoder' (JLObject)
  public
    class function encode(para1: JLString): JLString; static; overload;
    class function encode(para1: JLString; para2: JLString): JLString; static; overload;  // throws java.io.UnsupportedEncodingException
  end;

  JNURLStreamHandler = class abstract external 'java.net' name 'URLStreamHandler' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function openConnection(para1: JNURL): JNURLConnection; overload; virtual; abstract;  // throws java.io.IOException
    function openConnection(para1: JNURL; para2: JNProxy): JNURLConnection; overload; virtual;  // throws java.io.IOException
    procedure parseURL(para1: JNURL; para2: JLString; para3: jint; para4: jint); overload; virtual;
    procedure setURL(para1: JNURL; para2: JLString; para3: JLString; para4: jint; para5: JLString; para6: JLString); overload; virtual;
    procedure setURL(para1: JNURL; para2: JLString; para3: JLString; para4: jint; para5: JLString; para6: JLString; para7: JLString; para8: JLString; para9: JLString); overload; virtual;
    function toExternalForm(para1: JNURL): JLString; overload; virtual;
    function equals(para1: JNURL; para2: JNURL): jboolean; overload; virtual;
    function getDefaultPort(): jint; overload; virtual;
    function getHostAddress(para1: JNURL): JNInetAddress; overload; virtual;
    function hashCode(para1: JNURL): jint; overload; virtual;
    function hostsEqual(para1: JNURL; para2: JNURL): jboolean; overload; virtual;
    function sameFile(para1: JNURL; para2: JNURL): jboolean; overload; virtual;
  end;

  JNURLStreamHandlerFactory = interface external 'java.net' name 'URLStreamHandlerFactory' 
    function createURLStreamHandler(para1: JLString): JNURLStreamHandler; overload;
  end;

  JNByteOrder = class sealed external 'java.nio' name 'ByteOrder' (JLObject)
  public
    final class var
      fBIG_ENDIAN: JNByteOrder; external name 'BIG_ENDIAN';
      fLITTLE_ENDIAN: JNByteOrder; external name 'LITTLE_ENDIAN';
  public
    class function nativeOrder(): JNByteOrder; static; overload;
    function toString(): JLString; overload; virtual;
  end;

  JNCChannels = class sealed external 'java.nio.channels' name 'Channels' (JLObject)
  public
    class function newInputStream(para1: JNCReadableByteChannel): JIInputStream; static; overload;
    class function newOutputStream(para1: JNCWritableByteChannel): JIOutputStream; static; overload;
    class function newChannel(para1: JIInputStream): JNCReadableByteChannel; static; overload;
    class function newChannel(para1: JIOutputStream): JNCWritableByteChannel; static; overload;
    class function newReader(para1: JNCReadableByteChannel; para2: JNCCharsetDecoder; para3: jint): JIReader; static; overload;
    class function newReader(para1: JNCReadableByteChannel; para2: JLString): JIReader; static; overload;
    class function newWriter(para1: JNCWritableByteChannel; para2: JNCCharsetEncoder; para3: jint): JIWriter; static; overload;
    class function newWriter(para1: JNCWritableByteChannel; para2: JLString): JIWriter; static; overload;
  end;

  JNCFileLock = class abstract external 'java.nio.channels' name 'FileLock' (JLObject, JLAutoCloseable)
  strict protected
    constructor create(para1: JNCFileChannel; para2: jlong; para3: jlong; para4: jboolean); overload;
  public
    function channel(): JNCFileChannel; overload; virtual; final;
    function position(): jlong; overload; virtual; final;
    function size(): jlong; overload; virtual; final;
    function isShared(): jboolean; overload; virtual; final;
    function overlaps(para1: jlong; para2: jlong): jboolean; overload; virtual; final;
    function isValid(): jboolean; overload; virtual; abstract;
    procedure release(); overload; virtual; abstract;  // throws java.io.IOException
    procedure close(); overload; virtual; final;  // throws java.io.IOException
    function toString(): JLString; overload; virtual; final;
  end;

  JNCSelectionKey = class abstract external 'java.nio.channels' name 'SelectionKey' (JLObject)
  public
    const
      OP_ACCEPT = 16;
      OP_CONNECT = 8;
      OP_READ = 1;
      OP_WRITE = 4;
  strict protected
    constructor create(); overload;
  public
    function attach(para1: JLObject): JLObject; overload; virtual; final;
    function attachment(): JLObject; overload; virtual; final;
    procedure cancel(); overload; virtual; abstract;
    function channel(): JNCSelectableChannel; overload; virtual; abstract;
    function interestOps(): jint; overload; virtual; abstract;
    function interestOps(para1: jint): JNCSelectionKey; overload; virtual; abstract;
    function isAcceptable(): jboolean; overload; virtual; final;
    function isConnectable(): jboolean; overload; virtual; final;
    function isReadable(): jboolean; overload; virtual; final;
    function isValid(): jboolean; overload; virtual; abstract;
    function isWritable(): jboolean; overload; virtual; final;
    function readyOps(): jint; overload; virtual; abstract;
    function selector(): JNCSelector; overload; virtual; abstract;
  end;

  JNCSelector = class abstract external 'java.nio.channels' name 'Selector' (JLObject, JICloseable)
  strict protected
    constructor create(); overload;
  public
    class function open(): JNCSelector; static; overload;  // throws java.io.IOException
    procedure close(); overload; virtual; abstract;  // throws java.io.IOException
    function isOpen(): jboolean; overload; virtual; abstract;
    function keys(): JUSet; overload; virtual; abstract;
    function provider(): JNCSSelectorProvider; overload; virtual; abstract;
    function select(): jint; overload; virtual; abstract;  // throws java.io.IOException
    function select(para1: jlong): jint; overload; virtual; abstract;  // throws java.io.IOException
    function selectedKeys(): JUSet; overload; virtual; abstract;
    function selectNow(): jint; overload; virtual; abstract;  // throws java.io.IOException
    function wakeup(): JNCSelector; overload; virtual; abstract;
  end;

  JNCSSelectorProvider = class abstract external 'java.nio.channels.spi' name 'SelectorProvider' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function provider(): JNCSSelectorProvider; static; overload;
    function openDatagramChannel(): JNCDatagramChannel; overload; virtual; abstract;  // throws java.io.IOException
    function openPipe(): JNCPipe; overload; virtual; abstract;  // throws java.io.IOException
    function openSelector(): JNCSAbstractSelector; overload; virtual; abstract;  // throws java.io.IOException
    function openServerSocketChannel(): JNCServerSocketChannel; overload; virtual; abstract;  // throws java.io.IOException
    function openSocketChannel(): JNCSocketChannel; overload; virtual; abstract;  // throws java.io.IOException
    function inheritedChannel(): JNCChannel; overload; virtual;  // throws java.io.IOException
  end;

  JSAccessControlContext = class sealed external 'java.security' name 'AccessControlContext' (JLObject)
  public
    constructor create(para1: JSAccessControlContext; para2: JSDomainCombiner); overload;
    constructor create(para1: Arr1JSProtectionDomain); overload;
    constructor create(const para1: array of JSProtectionDomain); overload;
    procedure checkPermission(para1: JSPermission); overload; virtual;  // throws java.security.AccessControlException
    function getDomainCombiner(): JSDomainCombiner; overload; virtual;
  end;

  JSAccessController = class sealed external 'java.security' name 'AccessController' (JLObject)
  public
    class function doPrivileged(para1: JSPrivilegedAction): JLObject; static; overload;
    class function doPrivileged(para1: JSPrivilegedAction; para2: JSAccessControlContext): JLObject; static; overload;
    class function doPrivileged(para1: JSPrivilegedExceptionAction): JLObject; static; overload;  // throws java.security.PrivilegedActionException
    class function doPrivileged(para1: JSPrivilegedExceptionAction; para2: JSAccessControlContext): JLObject; static; overload;  // throws java.security.PrivilegedActionException
    class function doPrivilegedWithCombiner(para1: JSPrivilegedAction): JLObject; static; overload;
    class function doPrivilegedWithCombiner(para1: JSPrivilegedExceptionAction): JLObject; static; overload;  // throws java.security.PrivilegedActionException
    class procedure checkPermission(para1: JSPermission); static; overload;  // throws java.security.AccessControlException
    class function getContext(): JSAccessControlContext; static; overload;
  end;

  JSAlgorithmParameterGenerator = class external 'java.security' name 'AlgorithmParameterGenerator' (JLObject)
  strict protected
    constructor create(para1: JSAlgorithmParameterGeneratorSpi; para2: JSProvider; para3: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual; final;
    class function getInstance(para1: JLString): JSAlgorithmParameterGenerator; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSAlgorithmParameterGenerator; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSAlgorithmParameterGenerator; static; overload;  // throws java.security.NoSuchAlgorithmException
    function getProvider(): JSProvider; overload; virtual; final;
    procedure init(para1: jint); overload; virtual; final;
    procedure init(para1: jint; para2: JSSecureRandom); overload; virtual; final;
    procedure init(para1: JSSAlgorithmParameterSpec); overload; virtual; final;  // throws java.security.InvalidAlgorithmParameterException
    procedure init(para1: JSSAlgorithmParameterSpec; para2: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidAlgorithmParameterException
    function generateParameters(): JSAlgorithmParameters; overload; virtual; final;
  end;

  JSAlgorithmParameterGeneratorSpi = class abstract external 'java.security' name 'AlgorithmParameterGeneratorSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure engineInit(para1: jint; para2: JSSecureRandom); overload; virtual; abstract;
    procedure engineInit(para1: JSSAlgorithmParameterSpec; para2: JSSecureRandom); overload; virtual; abstract;  // throws java.security.InvalidAlgorithmParameterException
    function engineGenerateParameters(): JSAlgorithmParameters; overload; virtual; abstract;
  end;

  JSAlgorithmParameters = class external 'java.security' name 'AlgorithmParameters' (JLObject)
  strict protected
    constructor create(para1: JSAlgorithmParametersSpi; para2: JSProvider; para3: JLString); overload;
  public
    class function getInstance(para1: JLString): JSAlgorithmParameters; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSAlgorithmParameters; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSAlgorithmParameters; static; overload;  // throws java.security.NoSuchAlgorithmException
    function getProvider(): JSProvider; overload; virtual; final;
    function getAlgorithm(): JLString; overload; virtual; final;
    procedure init(para1: JSSAlgorithmParameterSpec); overload; virtual; final;  // throws java.security.spec.InvalidParameterSpecException
    procedure init(para1: Arr1jbyte); overload; virtual; final;  // throws java.io.IOException
    procedure init(var para1: array of jbyte); overload; virtual; final;  // throws java.io.IOException
    procedure init(para1: Arr1jbyte; para2: JLString); overload; virtual; final;  // throws java.io.IOException
    procedure init(var para1: array of jbyte; para2: JLString); overload; virtual; final;  // throws java.io.IOException
    function getParameterSpec(para1: JLClass): JSSAlgorithmParameterSpec; overload; virtual; final;  // throws java.security.spec.InvalidParameterSpecException
    function getEncoded(): Arr1jbyte; overload; virtual; final;  // throws java.io.IOException
    function getEncoded(para1: JLString): Arr1jbyte; overload; virtual; final;  // throws java.io.IOException
    function toString(): JLString; overload; virtual; final;
  end;

  JSAlgorithmParametersSpi = class abstract external 'java.security' name 'AlgorithmParametersSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure engineInit(para1: JSSAlgorithmParameterSpec); overload; virtual; abstract;  // throws java.security.spec.InvalidParameterSpecException
    procedure engineInit(para1: Arr1jbyte); overload; virtual; abstract;  // throws java.io.IOException
    procedure engineInit(var para1: array of jbyte); overload; virtual; abstract;  // throws java.io.IOException
    procedure engineInit(para1: Arr1jbyte; para2: JLString); overload; virtual; abstract;  // throws java.io.IOException
    procedure engineInit(var para1: array of jbyte; para2: JLString); overload; virtual; abstract;  // throws java.io.IOException
    function engineGetParameterSpec(para1: JLClass): JSSAlgorithmParameterSpec; overload; virtual; abstract;  // throws java.security.spec.InvalidParameterSpecException
    function engineGetEncoded(): Arr1jbyte; overload; virtual; abstract;  // throws java.io.IOException
    function engineGetEncoded(para1: JLString): Arr1jbyte; overload; virtual; abstract;  // throws java.io.IOException
    function engineToString(): JLString; overload; virtual; abstract;
  end;

  JSCertificate = interface external 'java.security' name 'Certificate' 
    procedure decode(para1: JIInputStream); overload;  // throws java.security.KeyException, java.io.IOException
    procedure encode(para1: JIOutputStream); overload;  // throws java.security.KeyException, java.io.IOException
    function getFormat(): JLString; overload;
    function getGuarantor(): JSPrincipal; overload;
    function getPrincipal(): JSPrincipal; overload;
    function getPublicKey(): JSPublicKey; overload;
    function toString(para1: jboolean): JLString; overload;
  end;

  JSDomainCombiner = interface external 'java.security' name 'DomainCombiner' 
    function combine(para1: Arr1JSProtectionDomain; para2: Arr1JSProtectionDomain): Arr1JSProtectionDomain; overload;
    function combine(var para1: array of JSProtectionDomain; var para2: array of JSProtectionDomain): Arr1JSProtectionDomain; overload;
  end;

  JSGuard = interface external 'java.security' name 'Guard' 
    procedure checkGuard(para1: JLObject); overload;  // throws java.lang.SecurityException
  end;

  JSKeyFactory = class external 'java.security' name 'KeyFactory' (JLObject)
  strict protected
    constructor create(para1: JSKeyFactorySpi; para2: JSProvider; para3: JLString); overload;
  public
    class function getInstance(para1: JLString): JSKeyFactory; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSKeyFactory; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSKeyFactory; static; overload;  // throws java.security.NoSuchAlgorithmException
    function getProvider(): JSProvider; overload; virtual; final;
    function getAlgorithm(): JLString; overload; virtual; final;
    function generatePublic(para1: JSSKeySpec): JSPublicKey; overload; virtual; final;  // throws java.security.spec.InvalidKeySpecException
    function generatePrivate(para1: JSSKeySpec): JSPrivateKey; overload; virtual; final;  // throws java.security.spec.InvalidKeySpecException
    function getKeySpec(para1: JSKey; para2: JLClass): JSSKeySpec; overload; virtual; final;  // throws java.security.spec.InvalidKeySpecException
    function translateKey(para1: JSKey): JSKey; overload; virtual; final;  // throws java.security.InvalidKeyException
  end;

  JSKeyFactorySpi = class abstract external 'java.security' name 'KeyFactorySpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function engineGeneratePublic(para1: JSSKeySpec): JSPublicKey; overload; virtual; abstract;  // throws java.security.spec.InvalidKeySpecException
    function engineGeneratePrivate(para1: JSSKeySpec): JSPrivateKey; overload; virtual; abstract;  // throws java.security.spec.InvalidKeySpecException
    function engineGetKeySpec(para1: JSKey; para2: JLClass): JSSKeySpec; overload; virtual; abstract;  // throws java.security.spec.InvalidKeySpecException
    function engineTranslateKey(para1: JSKey): JSKey; overload; virtual; abstract;  // throws java.security.InvalidKeyException
  end;

  JSKeyPairGeneratorSpi = class abstract external 'java.security' name 'KeyPairGeneratorSpi' (JLObject)
  public
    constructor create(); overload;
    function generateKeyPair(): JSKeyPair; overload; virtual; abstract;
    procedure initialize(para1: jint; para2: JSSecureRandom); overload; virtual; abstract;
    procedure initialize(para1: JSSAlgorithmParameterSpec; para2: JSSecureRandom); overload; virtual;  // throws java.security.InvalidAlgorithmParameterException
  end;

  JSMessageDigestSpi = class abstract external 'java.security' name 'MessageDigestSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function engineGetDigestLength(): jint; overload; virtual;
    procedure engineUpdate(para1: jbyte); overload; virtual; abstract;
    procedure engineUpdate(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; abstract;
    procedure engineUpdate(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; abstract;
    procedure engineUpdate(para1: JNByteBuffer); overload; virtual;
    function engineDigest(): Arr1jbyte; overload; virtual; abstract;
    function engineDigest(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.security.DigestException
    function engineDigest(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.security.DigestException
    procedure engineReset(); overload; virtual; abstract;
  public
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JSPolicy = class abstract external 'java.security' name 'Policy' (JLObject)
  public
    type
      InnerParameters = interface;
      Arr1InnerParameters = array of InnerParameters;
      Arr2InnerParameters = array of Arr1InnerParameters;
      Arr3InnerParameters = array of Arr2InnerParameters;
      InnerParameters = interface external 'java.security' name 'Parameters' 
      end;

  public
    final class var
      fUNSUPPORTED_EMPTY_COLLECTION: JSPermissionCollection; external name 'UNSUPPORTED_EMPTY_COLLECTION';
  public
    constructor create(); overload;
    class function getInstance(para1: JLString; para2: JSPolicy.InnerParameters): JSPolicy; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JSPolicy.InnerParameters; para3: JLString): JSPolicy; static; overload;  // throws java.security.NoSuchProviderException, java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JSPolicy.InnerParameters; para3: JSProvider): JSPolicy; static; overload;  // throws java.security.NoSuchAlgorithmException
    function getParameters(): JSPolicy.InnerParameters; overload; virtual;
    function getProvider(): JSProvider; overload; virtual;
    function getType(): JLString; overload; virtual;
    function getPermissions(para1: JSCodeSource): JSPermissionCollection; overload; virtual;
    procedure refresh(); overload; virtual;
    function getPermissions(para1: JSProtectionDomain): JSPermissionCollection; overload; virtual;
    function implies(para1: JSProtectionDomain; para2: JSPermission): jboolean; overload; virtual;
    class function getPolicy(): JSPolicy; static; overload;
    class procedure setPolicy(para1: JSPolicy); static; overload;
  end;

  JSPolicySpi = class abstract external 'java.security' name 'PolicySpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function engineImplies(para1: JSProtectionDomain; para2: JSPermission): jboolean; overload; virtual; abstract;
    procedure engineRefresh(); overload; virtual;
    function engineGetPermissions(para1: JSCodeSource): JSPermissionCollection; overload; virtual;
    function engineGetPermissions(para1: JSProtectionDomain): JSPermissionCollection; overload; virtual;
  end;

  JSPrincipal = interface external 'java.security' name 'Principal' 
    function equals(para1: JLObject): jboolean; overload;
    function getName(): JLString; overload;
    function hashCode(): jint; overload;
    function toString(): JLString; overload;
  end;

  JSPrivilegedAction = interface external 'java.security' name 'PrivilegedAction' 
    function run(): JLObject; overload;
  end;

  JSPrivilegedExceptionAction = interface external 'java.security' name 'PrivilegedExceptionAction' 
    function run(): JLObject; overload;  // throws java.lang.Exception
  end;

  JSProtectionDomain = class external 'java.security' name 'ProtectionDomain' (JLObject)
  public
    constructor create(para1: JSCodeSource; para2: JSPermissionCollection); overload;
    constructor create(para1: JSCodeSource; para2: JSPermissionCollection; para3: JLClassLoader; para4: Arr1JSPrincipal); overload;
    constructor create(para1: JSCodeSource; para2: JSPermissionCollection; para3: JLClassLoader; const para4: array of JSPrincipal); overload;
    function getClassLoader(): JLClassLoader; overload; virtual; final;
    function getCodeSource(): JSCodeSource; overload; virtual; final;
    function getPermissions(): JSPermissionCollection; overload; virtual; final;
    function getPrincipals(): Arr1JSPrincipal; overload; virtual; final;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSSecurity = class sealed external 'java.security' name 'Security' (JLObject)
  public
    class function getAlgorithmProperty(para1: JLString; para2: JLString): JLString; static; overload;
    class function insertProviderAt(para1: JSProvider; para2: jint): jint; static; overload;
    class function addProvider(para1: JSProvider): jint; static; overload;
    class procedure removeProvider(para1: JLString); static; overload;
    class function getProviders(): Arr1JSProvider; static; overload;
    class function getProvider(para1: JLString): JSProvider; static; overload;
    class function getProviders(para1: JLString): Arr1JSProvider; static; overload;
    class function getProviders(para1: JUMap): Arr1JSProvider; static; overload;
    class function getProperty(para1: JLString): JLString; static; overload;
    class procedure setProperty(para1: JLString; para2: JLString); static; overload;
    class function getAlgorithms(para1: JLString): JUSet; static; overload;
  end;

  JSSignatureSpi = class abstract external 'java.security' name 'SignatureSpi' (JLObject)
  strict protected
    var
      fappRandom: JSSecureRandom; external name 'appRandom';
  public
    constructor create(); overload;
  strict protected
    procedure engineInitVerify(para1: JSPublicKey); overload; virtual; abstract;  // throws java.security.InvalidKeyException
    procedure engineInitSign(para1: JSPrivateKey); overload; virtual; abstract;  // throws java.security.InvalidKeyException
    procedure engineInitSign(para1: JSPrivateKey; para2: JSSecureRandom); overload; virtual;  // throws java.security.InvalidKeyException
    procedure engineUpdate(para1: jbyte); overload; virtual; abstract;  // throws java.security.SignatureException
    procedure engineUpdate(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; abstract;  // throws java.security.SignatureException
    procedure engineUpdate(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; abstract;  // throws java.security.SignatureException
    procedure engineUpdate(para1: JNByteBuffer); overload; virtual;
    function engineSign(): Arr1jbyte; overload; virtual; abstract;  // throws java.security.SignatureException
    function engineSign(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.security.SignatureException
    function engineSign(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.security.SignatureException
    function engineVerify(para1: Arr1jbyte): jboolean; overload; virtual; abstract;  // throws java.security.SignatureException
    function engineVerify(var para1: array of jbyte): jboolean; overload; virtual; abstract;  // throws java.security.SignatureException
    function engineVerify(para1: Arr1jbyte; para2: jint; para3: jint): jboolean; overload; virtual;  // throws java.security.SignatureException
    function engineVerify(var para1: array of jbyte; para2: jint; para3: jint): jboolean; overload; virtual;  // throws java.security.SignatureException
    procedure engineSetParameter(para1: JLString; para2: JLObject); overload; virtual; abstract;  // throws java.security.InvalidParameterException
    procedure engineSetParameter(para1: JSSAlgorithmParameterSpec); overload; virtual;  // throws java.security.InvalidAlgorithmParameterException
    function engineGetParameters(): JSAlgorithmParameters; overload; virtual;
    function engineGetParameter(para1: JLString): JLObject; overload; virtual; abstract;  // throws java.security.InvalidParameterException
  public
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JSAOwner = interface external 'java.security.acl' name 'Owner' 
    function addOwner(para1: JSPrincipal; para2: JSPrincipal): jboolean; overload;  // throws java.security.acl.NotOwnerException
    function deleteOwner(para1: JSPrincipal; para2: JSPrincipal): jboolean; overload;  // throws java.security.acl.NotOwnerException, java.security.acl.LastOwnerException
    function isOwner(para1: JSPrincipal): jboolean; overload;
  end;

  JSAPermission = interface external 'java.security.acl' name 'Permission' 
    function equals(para1: JLObject): jboolean; overload;
    function toString(): JLString; overload;
  end;

  JSCCRL = class abstract external 'java.security.cert' name 'CRL' (JLObject)
  strict protected
    constructor create(para1: JLString); overload;
  public
    function getType(): JLString; overload; virtual; final;
    function isRevoked(para1: JSCCertificate): jboolean; overload; virtual; abstract;
    function toString(): JLString; overload; virtual; abstract;
  end;

  JSCCertPathBuilder = class external 'java.security.cert' name 'CertPathBuilder' (JLObject)
  strict protected
    constructor create(para1: JSCCertPathBuilderSpi; para2: JSProvider; para3: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    class function getInstance(para1: JLString): JSCCertPathBuilder; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSCCertPathBuilder; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSCCertPathBuilder; static; overload;  // throws java.security.NoSuchAlgorithmException
    function build(para1: JSCCertPathParameters): JSCCertPathBuilderResult; overload; virtual; final;  // throws java.security.cert.CertPathBuilderException, java.security.InvalidAlgorithmParameterException
    class function getDefaultType(): JLString; static; overload; final;
  end;

  JSCCertPathBuilderSpi = class abstract external 'java.security.cert' name 'CertPathBuilderSpi' (JLObject)
  public
    constructor create(); overload;
    function engineBuild(para1: JSCCertPathParameters): JSCCertPathBuilderResult; overload; virtual; abstract;  // throws java.security.cert.CertPathBuilderException, java.security.InvalidAlgorithmParameterException
  end;

  JSCCertPathValidator = class external 'java.security.cert' name 'CertPathValidator' (JLObject)
  strict protected
    constructor create(para1: JSCCertPathValidatorSpi; para2: JSProvider; para3: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    class function getInstance(para1: JLString): JSCCertPathValidator; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSCCertPathValidator; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSCCertPathValidator; static; overload;  // throws java.security.NoSuchAlgorithmException
    function validate(para1: JSCCertPath; para2: JSCCertPathParameters): JSCCertPathValidatorResult; overload; virtual; final;  // throws java.security.cert.CertPathValidatorException, java.security.InvalidAlgorithmParameterException
    class function getDefaultType(): JLString; static; overload; final;
  end;

  JSCCertPathValidatorSpi = class abstract external 'java.security.cert' name 'CertPathValidatorSpi' (JLObject)
  public
    constructor create(); overload;
    function engineValidate(para1: JSCCertPath; para2: JSCCertPathParameters): JSCCertPathValidatorResult; overload; virtual; abstract;  // throws java.security.cert.CertPathValidatorException, java.security.InvalidAlgorithmParameterException
  end;

  JSCCertStore = class external 'java.security.cert' name 'CertStore' (JLObject)
  strict protected
    constructor create(para1: JSCCertStoreSpi; para2: JSProvider; para3: JLString; para4: JSCCertStoreParameters); overload;
  public
    class function getInstance(para1: JLString; para2: JSCCertStoreParameters): JSCCertStore; static; overload;  // throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JSCCertStoreParameters; para3: JLString): JSCCertStore; static; overload;  // throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSCCertStoreParameters; para3: JSProvider): JSCCertStore; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.InvalidAlgorithmParameterException
    function getType(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    function getCertStoreParameters(): JSCCertStoreParameters; overload; virtual; final;
    function getCertificates(para1: JSCCertSelector): JUCollection; overload; virtual; final;  // throws java.security.cert.CertStoreException
    function getCRLs(para1: JSCCRLSelector): JUCollection; overload; virtual; final;  // throws java.security.cert.CertStoreException
    class function getDefaultType(): JLString; static; overload; final;
  end;

  JSCCertStoreSpi = class abstract external 'java.security.cert' name 'CertStoreSpi' (JLObject)
  public
    constructor create(para1: JSCCertStoreParameters); overload;  // throws java.security.InvalidAlgorithmParameterException
    function engineGetCertificates(para1: JSCCertSelector): JUCollection; overload; virtual; abstract;  // throws java.security.cert.CertStoreException
    function engineGetCRLs(para1: JSCCRLSelector): JUCollection; overload; virtual; abstract;  // throws java.security.cert.CertStoreException
  end;

  JSCCertificateFactory = class external 'java.security.cert' name 'CertificateFactory' (JLObject)
  strict protected
    constructor create(para1: JSCCertificateFactorySpi; para2: JSProvider; para3: JLString); overload;
  public
    class function getInstance(para1: JLString): JSCCertificateFactory; static; overload; final;  // throws java.security.cert.CertificateException
    class function getInstance(para1: JLString; para2: JLString): JSCCertificateFactory; static; overload; final;  // throws java.security.cert.CertificateException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSCCertificateFactory; static; overload; final;  // throws java.security.cert.CertificateException
    function getProvider(): JSProvider; overload; virtual; final;
    function getType(): JLString; overload; virtual; final;
    function generateCertificate(para1: JIInputStream): JSCCertificate; overload; virtual; final;  // throws java.security.cert.CertificateException
    function getCertPathEncodings(): JUIterator; overload; virtual; final;
    function generateCertPath(para1: JIInputStream): JSCCertPath; overload; virtual; final;  // throws java.security.cert.CertificateException
    function generateCertPath(para1: JIInputStream; para2: JLString): JSCCertPath; overload; virtual; final;  // throws java.security.cert.CertificateException
    function generateCertPath(para1: JUList): JSCCertPath; overload; virtual; final;  // throws java.security.cert.CertificateException
    function generateCertificates(para1: JIInputStream): JUCollection; overload; virtual; final;  // throws java.security.cert.CertificateException
    function generateCRL(para1: JIInputStream): JSCCRL; overload; virtual; final;  // throws java.security.cert.CRLException
    function generateCRLs(para1: JIInputStream): JUCollection; overload; virtual; final;  // throws java.security.cert.CRLException
  end;

  JSCCertificateFactorySpi = class abstract external 'java.security.cert' name 'CertificateFactorySpi' (JLObject)
  public
    constructor create(); overload;
    function engineGenerateCertificate(para1: JIInputStream): JSCCertificate; overload; virtual; abstract;  // throws java.security.cert.CertificateException
    function engineGenerateCertificates(para1: JIInputStream): JUCollection; overload; virtual; abstract;  // throws java.security.cert.CertificateException
    function engineGenerateCRL(para1: JIInputStream): JSCCRL; overload; virtual; abstract;  // throws java.security.cert.CRLException
    function engineGenerateCRLs(para1: JIInputStream): JUCollection; overload; virtual; abstract;  // throws java.security.cert.CRLException
    function engineGenerateCertPath(para1: JIInputStream): JSCCertPath; overload; virtual;  // throws java.security.cert.CertificateException
    function engineGenerateCertPath(para1: JIInputStream; para2: JLString): JSCCertPath; overload; virtual;  // throws java.security.cert.CertificateException
    function engineGenerateCertPath(para1: JUList): JSCCertPath; overload; virtual;  // throws java.security.cert.CertificateException
    function engineGetCertPathEncodings(): JUIterator; overload; virtual;
  end;

  JSCPolicyNode = interface external 'java.security.cert' name 'PolicyNode' 
    function getChildren(): JUIterator; overload;
    function getDepth(): jint; overload;
    function getExpectedPolicies(): JUSet; overload;
    function getParent(): JSCPolicyNode; overload;
    function getPolicyQualifiers(): JUSet; overload;
    function getValidPolicy(): JLString; overload;
    function isCritical(): jboolean; overload;
  end;

  JSCPolicyQualifierInfo = class external 'java.security.cert' name 'PolicyQualifierInfo' (JLObject)
  public
    constructor create(para1: Arr1jbyte); overload;  // throws java.io.IOException
    constructor create(const para1: array of jbyte); overload;  // throws java.io.IOException
    function getEncoded(): Arr1jbyte; overload; virtual; final;
    function getPolicyQualifierId(): JLString; overload; virtual; final;
    function getPolicyQualifier(): Arr1jbyte; overload; virtual; final;
    function toString(): JLString; overload; virtual;
  end;

  JSCTrustAnchor = class external 'java.security.cert' name 'TrustAnchor' (JLObject)
  public
    constructor create(para1: JSCX509Certificate; para2: Arr1jbyte); overload;
    constructor create(para1: JSCX509Certificate; const para2: array of jbyte); overload;
    constructor create(para1: JLString; para2: JSPublicKey; para3: Arr1jbyte); overload;
    constructor create(para1: JLString; para2: JSPublicKey; const para3: array of jbyte); overload;
    constructor create(para1: JSAXX500Principal; para2: JSPublicKey; para3: Arr1jbyte); overload;
    constructor create(para1: JSAXX500Principal; para2: JSPublicKey; const para3: array of jbyte); overload;
    function getNameConstraints(): Arr1jbyte; overload; virtual; final;
    function getTrustedCert(): JSCX509Certificate; overload; virtual; final;
    function getCA(): JSAXX500Principal; overload; virtual; final;
    function getCAName(): JLString; overload; virtual; final;
    function getCAPublicKey(): JSPublicKey; overload; virtual; final;
    function toString(): JLString; overload; virtual;
  end;

  JSCX509Extension = interface external 'java.security.cert' name 'X509Extension' 
    function getCriticalExtensionOIDs(): JUSet; overload;
    function getExtensionValue(para1: JLString): Arr1jbyte; overload;
    function getNonCriticalExtensionOIDs(): JUSet; overload;
    function hasUnsupportedCriticalExtension(): jboolean; overload;
  end;

  JSIDSAKey = interface external 'java.security.interfaces' name 'DSAKey' 
    function getParams(): JSIDSAParams; overload;
  end;

  JSIDSAKeyPairGenerator = interface external 'java.security.interfaces' name 'DSAKeyPairGenerator' 
    procedure initialize(para1: JSIDSAParams; para2: JSSecureRandom); overload;  // throws java.security.InvalidParameterException
    procedure initialize(para1: jint; para2: jboolean; para3: JSSecureRandom); overload;  // throws java.security.InvalidParameterException
  end;

  JSIDSAParams = interface external 'java.security.interfaces' name 'DSAParams' 
    function getG(): JMBigInteger; overload;
    function getP(): JMBigInteger; overload;
    function getQ(): JMBigInteger; overload;
  end;

  JSIECKey = interface external 'java.security.interfaces' name 'ECKey' 
    function getParams(): JSSECParameterSpec; overload;
  end;

  JSIRSAKey = interface external 'java.security.interfaces' name 'RSAKey' 
    function getModulus(): JMBigInteger; overload;
  end;

  JSSAlgorithmParameterSpec = interface external 'java.security.spec' name 'AlgorithmParameterSpec' 
  end;

  JSSECField = interface external 'java.security.spec' name 'ECField' 
    function getFieldSize(): jint; overload;
  end;

  JSSECPoint = class external 'java.security.spec' name 'ECPoint' (JLObject)
  public
    final class var
      fPOINT_INFINITY: JSSECPoint; external name 'POINT_INFINITY';
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger); overload;
    function getAffineX(): JMBigInteger; overload; virtual;
    function getAffineY(): JMBigInteger; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  JSSEllipticCurve = class external 'java.security.spec' name 'EllipticCurve' (JLObject)
  public
    constructor create(para1: JSSECField; para2: JMBigInteger; para3: JMBigInteger; para4: Arr1jbyte); overload;
    constructor create(para1: JSSECField; para2: JMBigInteger; para3: JMBigInteger; const para4: array of jbyte); overload;
    constructor create(para1: JSSECField; para2: JMBigInteger; para3: JMBigInteger); overload;
    function getA(): JMBigInteger; overload; virtual;
    function getB(): JMBigInteger; overload; virtual;
    function getField(): JSSECField; overload; virtual;
    function getSeed(): Arr1jbyte; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  JSSKeySpec = interface external 'java.security.spec' name 'KeySpec' 
  end;

  JSSRSAOtherPrimeInfo = class external 'java.security.spec' name 'RSAOtherPrimeInfo' (JLObject)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger); overload;
    function getCrtCoefficient(): JMBigInteger; overload; virtual; final;
    function getPrime(): JMBigInteger; overload; virtual; final;
    function getExponent(): JMBigInteger; overload; virtual; final;
  end;

  JSArray = interface external 'java.sql' name 'Array' 
    function getArray(): JLObject; overload;  // throws java.sql.SQLException
    function getArray(para1: jlong; para2: jint): JLObject; overload;  // throws java.sql.SQLException
    function getArray(para1: jlong; para2: jint; para3: JUMap): JLObject; overload;  // throws java.sql.SQLException
    function getArray(para1: JUMap): JLObject; overload;  // throws java.sql.SQLException
    function getBaseType(): jint; overload;  // throws java.sql.SQLException
    function getBaseTypeName(): JLString; overload;  // throws java.sql.SQLException
    function getResultSet(): JSResultSet; overload;  // throws java.sql.SQLException
    function getResultSet(para1: jlong; para2: jint): JSResultSet; overload;  // throws java.sql.SQLException
    function getResultSet(para1: jlong; para2: jint; para3: JUMap): JSResultSet; overload;  // throws java.sql.SQLException
    function getResultSet(para1: JUMap): JSResultSet; overload;  // throws java.sql.SQLException
    procedure free(); overload;  // throws java.sql.SQLException
  end;

  JSBlob = interface external 'java.sql' name 'Blob' 
    function getBinaryStream(): JIInputStream; overload;  // throws java.sql.SQLException
    function getBinaryStream(para1: jlong; para2: jlong): JIInputStream; overload;  // throws java.sql.SQLException
    function getBytes(para1: jlong; para2: jint): Arr1jbyte; overload;  // throws java.sql.SQLException
    function length(): jlong; overload;  // throws java.sql.SQLException
    function position(para1: JSBlob; para2: jlong): jlong; overload;  // throws java.sql.SQLException
    function position(para1: Arr1jbyte; para2: jlong): jlong; overload;  // throws java.sql.SQLException
    function position(var para1: array of jbyte; para2: jlong): jlong; overload;  // throws java.sql.SQLException
    function setBinaryStream(para1: jlong): JIOutputStream; overload;  // throws java.sql.SQLException
    function setBytes(para1: jlong; para2: Arr1jbyte): jint; overload;  // throws java.sql.SQLException
    function setBytes(para1: jlong; var para2: array of jbyte): jint; overload;  // throws java.sql.SQLException
    function setBytes(para1: jlong; para2: Arr1jbyte; para3: jint; para4: jint): jint; overload;  // throws java.sql.SQLException
    function setBytes(para1: jlong; var para2: array of jbyte; para3: jint; para4: jint): jint; overload;  // throws java.sql.SQLException
    procedure truncate(para1: jlong); overload;  // throws java.sql.SQLException
    procedure free(); overload;  // throws java.sql.SQLException
  end;

  JSClob = interface external 'java.sql' name 'Clob' 
    function getAsciiStream(): JIInputStream; overload;  // throws java.sql.SQLException
    function getCharacterStream(): JIReader; overload;  // throws java.sql.SQLException
    function getSubString(para1: jlong; para2: jint): JLString; overload;  // throws java.sql.SQLException
    function length(): jlong; overload;  // throws java.sql.SQLException
    function position(para1: JSClob; para2: jlong): jlong; overload;  // throws java.sql.SQLException
    function position(para1: JLString; para2: jlong): jlong; overload;  // throws java.sql.SQLException
    function setAsciiStream(para1: jlong): JIOutputStream; overload;  // throws java.sql.SQLException
    function setCharacterStream(para1: jlong): JIWriter; overload;  // throws java.sql.SQLException
    function setString(para1: jlong; para2: JLString): jint; overload;  // throws java.sql.SQLException
    function setString(para1: jlong; para2: JLString; para3: jint; para4: jint): jint; overload;  // throws java.sql.SQLException
    procedure truncate(para1: jlong); overload;  // throws java.sql.SQLException
    procedure free(); overload;  // throws java.sql.SQLException
    function getCharacterStream(para1: jlong; para2: jlong): JIReader; overload;  // throws java.sql.SQLException
  end;

  JSDriver = interface external 'java.sql' name 'Driver' 
    function acceptsURL(para1: JLString): jboolean; overload;  // throws java.sql.SQLException
    function connect(para1: JLString; para2: JUProperties): JSConnection; overload;  // throws java.sql.SQLException
    function getMajorVersion(): jint; overload;
    function getMinorVersion(): jint; overload;
    function getPropertyInfo(para1: JLString; para2: JUProperties): Arr1JSDriverPropertyInfo; overload;  // throws java.sql.SQLException
    function jdbcCompliant(): jboolean; overload;
  end;

  JSDriverManager = class external 'java.sql' name 'DriverManager' (JLObject)
  public
    class procedure deregisterDriver(para1: JSDriver); static; overload;  // throws java.sql.SQLException
    class function getConnection(para1: JLString): JSConnection; static; overload;  // throws java.sql.SQLException
    class function getConnection(para1: JLString; para2: JUProperties): JSConnection; static; overload;  // throws java.sql.SQLException
    class function getConnection(para1: JLString; para2: JLString; para3: JLString): JSConnection; static; overload;  // throws java.sql.SQLException
    class function getDriver(para1: JLString): JSDriver; static; overload;  // throws java.sql.SQLException
    class function getDrivers(): JUEnumeration; static; overload;
    class function getLoginTimeout(): jint; static; overload;
    class function getLogStream(): JIPrintStream; static; overload;
    class function getLogWriter(): JIPrintWriter; static; overload;
    class procedure println(para1: JLString); static; overload;
    class procedure registerDriver(para1: JSDriver); static; overload;  // throws java.sql.SQLException
    class procedure setLoginTimeout(para1: jint); static; overload;
    class procedure setLogStream(para1: JIPrintStream); static; overload;
    class procedure setLogWriter(para1: JIPrintWriter); static; overload;
  end;

  JSDriverPropertyInfo = class external 'java.sql' name 'DriverPropertyInfo' (JLObject)
  public
    var
      fchoices: Arr1JLString; external name 'choices';
      fdescription: JLString; external name 'description';
      fname: JLString; external name 'name';
      frequired: jboolean; external name 'required';
      fvalue: JLString; external name 'value';
  public
    constructor create(para1: JLString; para2: JLString); overload;
  end;

  JSRef = interface external 'java.sql' name 'Ref' 
    function getBaseTypeName(): JLString; overload;  // throws java.sql.SQLException
    function getObject(): JLObject; overload;  // throws java.sql.SQLException
    function getObject(para1: JUMap): JLObject; overload;  // throws java.sql.SQLException
    procedure setObject(para1: JLObject); overload;  // throws java.sql.SQLException
  end;

  JSRowId = interface external 'java.sql' name 'RowId' 
    function equals(para1: JLObject): jboolean; overload;
    function getBytes(): Arr1jbyte; overload;
    function toString(): JLString; overload;
    function hashCode(): jint; overload;
  end;

  JSSQLData = interface external 'java.sql' name 'SQLData' 
    function getSQLTypeName(): JLString; overload;  // throws java.sql.SQLException
    procedure readSQL(para1: JSSQLInput; para2: JLString); overload;  // throws java.sql.SQLException
    procedure writeSQL(para1: JSSQLOutput); overload;  // throws java.sql.SQLException
  end;

  JSSQLInput = interface external 'java.sql' name 'SQLInput' 
    function readString(): JLString; overload;  // throws java.sql.SQLException
    function readBoolean(): jboolean; overload;  // throws java.sql.SQLException
    function readByte(): jbyte; overload;  // throws java.sql.SQLException
    function readShort(): jshort; overload;  // throws java.sql.SQLException
    function readInt(): jint; overload;  // throws java.sql.SQLException
    function readLong(): jlong; overload;  // throws java.sql.SQLException
    function readFloat(): jfloat; overload;  // throws java.sql.SQLException
    function readDouble(): jdouble; overload;  // throws java.sql.SQLException
    function readBigDecimal(): JMBigDecimal; overload;  // throws java.sql.SQLException
    function readBytes(): Arr1jbyte; overload;  // throws java.sql.SQLException
    function readDate(): JSDate; overload;  // throws java.sql.SQLException
    function readTime(): JSTime; overload;  // throws java.sql.SQLException
    function readTimestamp(): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function readCharacterStream(): JIReader; overload;  // throws java.sql.SQLException
    function readAsciiStream(): JIInputStream; overload;  // throws java.sql.SQLException
    function readBinaryStream(): JIInputStream; overload;  // throws java.sql.SQLException
    function readObject(): JLObject; overload;  // throws java.sql.SQLException
    function readRef(): JSRef; overload;  // throws java.sql.SQLException
    function readBlob(): JSBlob; overload;  // throws java.sql.SQLException
    function readClob(): JSClob; overload;  // throws java.sql.SQLException
    function readArray(): JSArray; overload;  // throws java.sql.SQLException
    function wasNull(): jboolean; overload;  // throws java.sql.SQLException
    function readURL(): JNURL; overload;  // throws java.sql.SQLException
    function readNClob(): JSNClob; overload;  // throws java.sql.SQLException
    function readNString(): JLString; overload;  // throws java.sql.SQLException
    function readSQLXML(): JSSQLXML; overload;  // throws java.sql.SQLException
    function readRowId(): JSRowId; overload;  // throws java.sql.SQLException
  end;

  JSSQLOutput = interface external 'java.sql' name 'SQLOutput' 
    procedure writeString(para1: JLString); overload;  // throws java.sql.SQLException
    procedure writeBoolean(para1: jboolean); overload;  // throws java.sql.SQLException
    procedure writeByte(para1: jbyte); overload;  // throws java.sql.SQLException
    procedure writeShort(para1: jshort); overload;  // throws java.sql.SQLException
    procedure writeInt(para1: jint); overload;  // throws java.sql.SQLException
    procedure writeLong(para1: jlong); overload;  // throws java.sql.SQLException
    procedure writeFloat(para1: jfloat); overload;  // throws java.sql.SQLException
    procedure writeDouble(para1: jdouble); overload;  // throws java.sql.SQLException
    procedure writeBigDecimal(para1: JMBigDecimal); overload;  // throws java.sql.SQLException
    procedure writeBytes(para1: Arr1jbyte); overload;  // throws java.sql.SQLException
    procedure writeBytes(var para1: array of jbyte); overload;  // throws java.sql.SQLException
    procedure writeDate(para1: JSDate); overload;  // throws java.sql.SQLException
    procedure writeTime(para1: JSTime); overload;  // throws java.sql.SQLException
    procedure writeTimestamp(para1: JSqlTimestamp); overload;  // throws java.sql.SQLException
    procedure writeCharacterStream(para1: JIReader); overload;  // throws java.sql.SQLException
    procedure writeAsciiStream(para1: JIInputStream); overload;  // throws java.sql.SQLException
    procedure writeBinaryStream(para1: JIInputStream); overload;  // throws java.sql.SQLException
    procedure writeObject(para1: JSSQLData); overload;  // throws java.sql.SQLException
    procedure writeRef(para1: JSRef); overload;  // throws java.sql.SQLException
    procedure writeBlob(para1: JSBlob); overload;  // throws java.sql.SQLException
    procedure writeClob(para1: JSClob); overload;  // throws java.sql.SQLException
    procedure writeStruct(para1: JSStruct); overload;  // throws java.sql.SQLException
    procedure writeArray(para1: JSArray); overload;  // throws java.sql.SQLException
    procedure writeURL(para1: JNURL); overload;  // throws java.sql.SQLException
    procedure writeNString(para1: JLString); overload;  // throws java.sql.SQLException
    procedure writeNClob(para1: JSNClob); overload;  // throws java.sql.SQLException
    procedure writeRowId(para1: JSRowId); overload;  // throws java.sql.SQLException
    procedure writeSQLXML(para1: JSSQLXML); overload;  // throws java.sql.SQLException
  end;

  JSSQLXML = interface external 'java.sql' name 'SQLXML' 
    procedure free(); overload;  // throws java.sql.SQLException
    function getBinaryStream(): JIInputStream; overload;  // throws java.sql.SQLException
    function setBinaryStream(): JIOutputStream; overload;  // throws java.sql.SQLException
    function getCharacterStream(): JIReader; overload;  // throws java.sql.SQLException
    function setCharacterStream(): JIWriter; overload;  // throws java.sql.SQLException
    function getString(): JLString; overload;  // throws java.sql.SQLException
    procedure setString(para1: JLString); overload;  // throws java.sql.SQLException
    function getSource(para1: JLClass): JXTSource; overload;  // throws java.sql.SQLException
    function setResult(para1: JLClass): JXTResult; overload;  // throws java.sql.SQLException
  end;

  JSSavepoint = interface external 'java.sql' name 'Savepoint' 
    function getSavepointId(): jint; overload;  // throws java.sql.SQLException
    function getSavepointName(): JLString; overload;  // throws java.sql.SQLException
  end;

  JSStruct = interface external 'java.sql' name 'Struct' 
    function getSQLTypeName(): JLString; overload;  // throws java.sql.SQLException
    function getAttributes(): Arr1JLObject; overload;  // throws java.sql.SQLException
    function getAttributes(para1: JUMap): Arr1JLObject; overload;  // throws java.sql.SQLException
  end;

  JSTypes = class external 'java.sql' name 'Types' (JLObject)
  public
    const
      &ARRAY = 2003;
      BIGINT = -5;
      BINARY = -2;
      BIT = -7;
      BLOB = 2004;
      BOOLEAN = 16;
      CHAR = 1;
      CLOB = 2005;
      DATALINK = 70;
      DATE = 91;
      DECIMAL = 3;
      DISTINCT = 2001;
      DOUBLE = 8;
      FLOAT = 6;
      INTEGER = 4;
      JAVA_OBJECT = 2000;
      LONGNVARCHAR = -16;
      LONGVARBINARY = -4;
      LONGVARCHAR = -1;
      NCHAR = -15;
      NCLOB = 2011;
      NULL = 0;
      NUMERIC = 2;
      NVARCHAR = -9;
      OTHER = 1111;
      REAL = 7;
      REF = 2006;
      ROWID = -8;
      SMALLINT = 5;
      SQLXML = 2009;
      STRUCT = 2002;
      TIME = 92;
      TIMESTAMP = 93;
      TINYINT = -6;
      VARBINARY = -3;
      VARCHAR = 12;
  end;

  JSWrapper = interface external 'java.sql' name 'Wrapper' 
    function unwrap(para1: JLClass): JLObject; overload;  // throws java.sql.SQLException
    function isWrapperFor(para1: JLClass): jboolean; overload;  // throws java.sql.SQLException
  end;

  JTAnnotation = class external 'java.text' name 'Annotation' (JLObject)
  public
    constructor create(para1: JLObject); overload;
    function getValue(): JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JTBidi = class sealed external 'java.text' name 'Bidi' (JLObject)
  public
    const
      DIRECTION_DEFAULT_LEFT_TO_RIGHT = -2;
      DIRECTION_DEFAULT_RIGHT_TO_LEFT = -1;
      DIRECTION_LEFT_TO_RIGHT = 0;
      DIRECTION_RIGHT_TO_LEFT = 1;
  public
    constructor create(para1: JTAttributedCharacterIterator); overload;
    constructor create(para1: Arr1jchar; para2: jint; para3: Arr1jbyte; para4: jint; para5: jint; para6: jint); overload;
    constructor create(const para1: array of jchar; para2: jint; const para3: array of jbyte; para4: jint; para5: jint; para6: jint); overload;
    constructor create(para1: JLString; para2: jint); overload;
    function baseIsLeftToRight(): jboolean; overload; virtual;
    function createLineBidi(para1: jint; para2: jint): JTBidi; overload; virtual;
    function getBaseLevel(): jint; overload; virtual;
    function getLength(): jint; overload; virtual;
    function getLevelAt(para1: jint): jint; overload; virtual;
    function getRunCount(): jint; overload; virtual;
    function getRunLevel(para1: jint): jint; overload; virtual;
    function getRunLimit(para1: jint): jint; overload; virtual;
    function getRunStart(para1: jint): jint; overload; virtual;
    function isLeftToRight(): jboolean; overload; virtual;
    function isMixed(): jboolean; overload; virtual;
    function isRightToLeft(): jboolean; overload; virtual;
    class procedure reorderVisually(para1: Arr1jbyte; para2: jint; para3: Arr1JLObject; para4: jint; para5: jint); static; overload;
    class procedure reorderVisually(var para1: array of jbyte; para2: jint; var para3: array of JLObject; para4: jint; para5: jint); static; overload;
    class function requiresBidi(para1: Arr1jchar; para2: jint; para3: jint): jboolean; static; overload;
    class function requiresBidi(var para1: array of jchar; para2: jint; para3: jint): jboolean; static; overload;
    function toString(): JLString; overload; virtual;
  end;

  JTCollationElementIterator = class sealed external 'java.text' name 'CollationElementIterator' (JLObject)
  public
    const
      NULLORDER = -1;
  public
    function getMaxExpansion(para1: jint): jint; overload; virtual;
    function getOffset(): jint; overload; virtual;
    function next(): jint; overload; virtual;
    function previous(): jint; overload; virtual;
    class function primaryOrder(para1: jint): jint; static; overload; final;
    procedure reset(); overload; virtual;
    class function secondaryOrder(para1: jint): jshort; static; overload; final;
    procedure setOffset(para1: jint); overload; virtual;
    procedure setText(para1: JTCharacterIterator); overload; virtual;
    procedure setText(para1: JLString); overload; virtual;
    class function tertiaryOrder(para1: jint): jshort; static; overload; final;
  end;

  JTParsePosition = class external 'java.text' name 'ParsePosition' (JLObject)
  public
    constructor create(para1: jint); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getErrorIndex(): jint; overload; virtual;
    function getIndex(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure setErrorIndex(para1: jint); overload; virtual;
    procedure setIndex(para1: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JUCollections = class external 'java.util' name 'Collections' (JLObject)
  public
    final class var
      fEMPTY_LIST: JUList; external name 'EMPTY_LIST';
      fEMPTY_MAP: JUMap; external name 'EMPTY_MAP';
      fEMPTY_SET: JUSet; external name 'EMPTY_SET';
  public
    class function binarySearch(para1: JUList; para2: JLObject): jint; static; overload;
    class function binarySearch(para1: JUList; para2: JLObject; para3: JUComparator): jint; static; overload;
    class procedure copy(para1: JUList; para2: JUList); static; overload;
    class function enumeration(para1: JUCollection): JUEnumeration; static; overload;
    class procedure fill(para1: JUList; para2: JLObject); static; overload;
    class function max(para1: JUCollection): JLObject; static; overload;
    class function max(para1: JUCollection; para2: JUComparator): JLObject; static; overload;
    class function min(para1: JUCollection): JLObject; static; overload;
    class function min(para1: JUCollection; para2: JUComparator): JLObject; static; overload;
    class function nCopies(para1: jint; para2: JLObject): JUList; static; overload;
    class procedure reverse(para1: JUList); static; overload;
    class function reverseOrder(): JUComparator; static; overload;
    class function reverseOrder(para1: JUComparator): JUComparator; static; overload;
    class procedure shuffle(para1: JUList); static; overload;
    class procedure shuffle(para1: JUList; para2: JURandom); static; overload;
    class function singleton(para1: JLObject): JUSet; static; overload;
    class function singletonList(para1: JLObject): JUList; static; overload;
    class function singletonMap(para1: JLObject; para2: JLObject): JUMap; static; overload;
    class procedure sort(para1: JUList); static; overload;
    class procedure sort(para1: JUList; para2: JUComparator); static; overload;
    class procedure swap(para1: JUList; para2: jint; para3: jint); static; overload;
    class function replaceAll(para1: JUList; para2: JLObject; para3: JLObject): jboolean; static; overload;
    class procedure rotate(para1: JUList; para2: jint); static; overload;
    class function indexOfSubList(para1: JUList; para2: JUList): jint; static; overload;
    class function lastIndexOfSubList(para1: JUList; para2: JUList): jint; static; overload;
    class function list(para1: JUEnumeration): JUArrayList; static; overload;
    class function synchronizedCollection(para1: JUCollection): JUCollection; static; overload;
    class function synchronizedList(para1: JUList): JUList; static; overload;
    class function synchronizedMap(para1: JUMap): JUMap; static; overload;
    class function synchronizedSet(para1: JUSet): JUSet; static; overload;
    class function synchronizedSortedMap(para1: JUSortedMap): JUSortedMap; static; overload;
    class function synchronizedSortedSet(para1: JUSortedSet): JUSortedSet; static; overload;
    class function unmodifiableCollection(para1: JUCollection): JUCollection; static; overload;
    class function unmodifiableList(para1: JUList): JUList; static; overload;
    class function unmodifiableMap(para1: JUMap): JUMap; static; overload;
    class function unmodifiableSet(para1: JUSet): JUSet; static; overload;
    class function unmodifiableSortedMap(para1: JUSortedMap): JUSortedMap; static; overload;
    class function unmodifiableSortedSet(para1: JUSortedSet): JUSortedSet; static; overload;
    class function frequency(para1: JUCollection; para2: JLObject): jint; static; overload;
    class function emptyList(): JUList; static; overload; final;
    class function emptySet(): JUSet; static; overload; final;
    class function emptyMap(): JUMap; static; overload; final;
    class function emptyEnumeration(): JUEnumeration; static; overload;
    class function emptyIterator(): JUIterator; static; overload;
    class function emptyListIterator(): JUListIterator; static; overload;
    class function checkedCollection(para1: JUCollection; para2: JLClass): JUCollection; static; overload;
    class function checkedMap(para1: JUMap; para2: JLClass; para3: JLClass): JUMap; static; overload;
    class function checkedList(para1: JUList; para2: JLClass): JUList; static; overload;
    class function checkedSet(para1: JUSet; para2: JLClass): JUSet; static; overload;
    class function checkedSortedMap(para1: JUSortedMap; para2: JLClass; para3: JLClass): JUSortedMap; static; overload;
    class function checkedSortedSet(para1: JUSortedSet; para2: JLClass): JUSortedSet; static; overload;
    class function addAll(para1: JUCollection; para2: Arr1JLObject): jboolean; static; overload;
    class function addAll(para1: JUCollection; const para2: array of JLObject): jboolean; static; overload;
    class function disjoint(para1: JUCollection; para2: JUCollection): jboolean; static; overload;
    class function newSetFromMap(para1: JUMap): JUSet; static; overload;
    class function asLifoQueue(para1: JUDeque): JUQueue; static; overload;
  end;

  JUDictionary = class abstract external 'java.util' name 'Dictionary' (JLObject)
  public
    constructor create(); overload;
    function elements(): JUEnumeration; overload; virtual; abstract;
    function get(para1: JLObject): JLObject; overload; virtual; abstract;
    function isEmpty(): jboolean; overload; virtual; abstract;
    function keys(): JUEnumeration; overload; virtual; abstract;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual; abstract;
    function remove(para1: JLObject): JLObject; overload; virtual; abstract;
    function size(): jint; overload; virtual; abstract;
  end;

  JUEnumeration = interface external 'java.util' name 'Enumeration' 
    function hasMoreElements(): jboolean; overload;
    function nextElement(): JLObject; overload;
  end;

  JUEventListener = interface external 'java.util' name 'EventListener' 
  end;

  JUFormattable = interface external 'java.util' name 'Formattable' 
    procedure formatTo(para1: JUFormatter; para2: jint; para3: jint; para4: jint); overload;  // throws java.util.IllegalFormatException
  end;

  JUFormattableFlags = class external 'java.util' name 'FormattableFlags' (JLObject)
  public
    const
      ALTERNATE = 4;
      LEFT_JUSTIFY = 1;
      UPPERCASE = 2;
  end;

  JUObservable = class external 'java.util' name 'Observable' (JLObject)
  public
    constructor create(); overload;
    procedure addObserver(para1: JUObserver); overload; virtual;
  strict protected
    procedure clearChanged(); overload; virtual;
  public
    function countObservers(): jint; overload; virtual;
    procedure deleteObserver(para1: JUObserver); overload; virtual;
    procedure deleteObservers(); overload; virtual;
    function hasChanged(): jboolean; overload; virtual;
    procedure notifyObservers(); overload; virtual;
    procedure notifyObservers(para1: JLObject); overload; virtual;
  strict protected
    procedure setChanged(); overload; virtual;
  end;

  JUObserver = interface external 'java.util' name 'Observer' 
    procedure update(para1: JUObservable; para2: JLObject); overload;
  end;

  JURandomAccess = interface external 'java.util' name 'RandomAccess' 
  end;

  JUResourceBundle = class abstract external 'java.util' name 'ResourceBundle' (JLObject)
  public
    type
      InnerControl = class;
      Arr1InnerControl = array of InnerControl;
      Arr2InnerControl = array of Arr1InnerControl;
      Arr3InnerControl = array of Arr2InnerControl;
      InnerControl = class external 'java.util' name 'Control' (JLObject)
      public
        final class var
          fFORMAT_CLASS: JUList; external name 'FORMAT_CLASS';
          fFORMAT_DEFAULT: JUList; external name 'FORMAT_DEFAULT';
          fFORMAT_PROPERTIES: JUList; external name 'FORMAT_PROPERTIES';
      public
        const
          TTL_DONT_CACHE = jlong(-1);
          TTL_NO_EXPIRATION_CONTROL = jlong(-2);
      strict protected
        constructor create(); overload;
      public
        class function getControl(para1: JUList): JUResourceBundle.InnerControl; static; overload;
        class function getNoFallbackControl(para1: JUList): JUResourceBundle.InnerControl; static; overload;
        function getCandidateLocales(para1: JLString; para2: JULocale): JUList; overload; virtual;
        function getFormats(para1: JLString): JUList; overload; virtual;
        function getFallbackLocale(para1: JLString; para2: JULocale): JULocale; overload; virtual;
        function newBundle(para1: JLString; para2: JULocale; para3: JLString; para4: JLClassLoader; para5: jboolean): JUResourceBundle; overload; virtual;  // throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.io.IOException
        function getTimeToLive(para1: JLString; para2: JULocale): jlong; overload; virtual;
        function needsReload(para1: JLString; para2: JULocale; para3: JLString; para4: JLClassLoader; para5: JUResourceBundle; para6: jlong): jboolean; overload; virtual;
        function toBundleName(para1: JLString; para2: JULocale): JLString; overload; virtual;
        function toResourceName(para1: JLString; para2: JLString): JLString; overload; virtual; final;
      end;

  strict protected
    var
      fparent: JUResourceBundle; external name 'parent';
  public
    constructor create(); overload;
    class function getBundle(para1: JLString): JUResourceBundle; static; overload;  // throws java.util.MissingResourceException
    class function getBundle(para1: JLString; para2: JULocale): JUResourceBundle; static; overload;
    class function getBundle(para1: JLString; para2: JULocale; para3: JLClassLoader): JUResourceBundle; static; overload;  // throws java.util.MissingResourceException
    class function getBundle(para1: JLString; para2: JUResourceBundle.InnerControl): JUResourceBundle; static; overload;
    class function getBundle(para1: JLString; para2: JULocale; para3: JUResourceBundle.InnerControl): JUResourceBundle; static; overload;
    class function getBundle(para1: JLString; para2: JULocale; para3: JLClassLoader; para4: JUResourceBundle.InnerControl): JUResourceBundle; static; overload;
    function getKeys(): JUEnumeration; overload; virtual; abstract;
    function getLocale(): JULocale; overload; virtual;
    function getObject(para1: JLString): JLObject; overload; virtual; final;
    function getString(para1: JLString): JLString; overload; virtual; final;
    function getStringArray(para1: JLString): Arr1JLString; overload; virtual; final;
  strict protected
    function handleGetObject(para1: JLString): JLObject; overload; virtual; abstract;
    procedure setParent(para1: JUResourceBundle); overload; virtual;
  public
    class procedure clearCache(); static; overload;
    class procedure clearCache(para1: JLClassLoader); static; overload;
    function containsKey(para1: JLString): jboolean; overload; virtual;
    function keySet(): JUSet; overload; virtual;
  strict protected
    function handleKeySet(): JUSet; overload; virtual;
  end;

  JUTimer = class external 'java.util' name 'Timer' (JLObject)
  public
    constructor create(para1: JLString; para2: jboolean); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: jboolean); overload;
    constructor create(); overload;
    procedure cancel(); overload; virtual;
    function purge(): jint; overload; virtual;
    procedure schedule(para1: JUTimerTask; para2: JUDate); overload; virtual;
    procedure schedule(para1: JUTimerTask; para2: jlong); overload; virtual;
    procedure schedule(para1: JUTimerTask; para2: jlong; para3: jlong); overload; virtual;
    procedure schedule(para1: JUTimerTask; para2: JUDate; para3: jlong); overload; virtual;
    procedure scheduleAtFixedRate(para1: JUTimerTask; para2: jlong; para3: jlong); overload; virtual;
    procedure scheduleAtFixedRate(para1: JUTimerTask; para2: JUDate; para3: jlong); overload; virtual;
  end;

  JUCCallable = interface external 'java.util.concurrent' name 'Callable' 
    function call(): JLObject; overload;  // throws java.lang.Exception
  end;

  JUCCompletionService = interface external 'java.util.concurrent' name 'CompletionService' 
    function submit(para1: JUCCallable): JUCFuture; overload;
    function submit(para1: JLRunnable; para2: JLObject): JUCFuture; overload;
    function take(): JUCFuture; overload;  // throws java.lang.InterruptedException
    function poll(): JUCFuture; overload;
    function poll(para1: jlong; para2: JUCTimeUnit): JUCFuture; overload;  // throws java.lang.InterruptedException
  end;

  JUCCountDownLatch = class external 'java.util.concurrent' name 'CountDownLatch' (JLObject)
  public
    constructor create(para1: jint); overload;
    procedure await(); overload; virtual;  // throws java.lang.InterruptedException
    function await(para1: jlong; para2: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    procedure countDown(); overload; virtual;
    function getCount(): jlong; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JUCCyclicBarrier = class external 'java.util.concurrent' name 'CyclicBarrier' (JLObject)
  public
    constructor create(para1: jint; para2: JLRunnable); overload;
    constructor create(para1: jint); overload;
    function getParties(): jint; overload; virtual;
    function await(): jint; overload; virtual;  // throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException
    function await(para1: jlong; para2: JUCTimeUnit): jint; overload; virtual;  // throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException, java.util.concurrent.TimeoutException
    function isBroken(): jboolean; overload; virtual;
    procedure reset(); overload; virtual;
    function getNumberWaiting(): jint; overload; virtual;
  end;

  JUCExchanger = class external 'java.util.concurrent' name 'Exchanger' (JLObject)
  public
    constructor create(); overload;
    function exchange(para1: JLObject): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function exchange(para1: JLObject; para2: jlong; para3: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException, java.util.concurrent.TimeoutException
  end;

  JUCExecutor = interface external 'java.util.concurrent' name 'Executor' 
    procedure execute(para1: JLRunnable); overload;
  end;

  JUCExecutors = class external 'java.util.concurrent' name 'Executors' (JLObject)
  public
    class function newFixedThreadPool(para1: jint): JUCExecutorService; static; overload;
    class function newFixedThreadPool(para1: jint; para2: JUCThreadFactory): JUCExecutorService; static; overload;
    class function newSingleThreadExecutor(): JUCExecutorService; static; overload;
    class function newSingleThreadExecutor(para1: JUCThreadFactory): JUCExecutorService; static; overload;
    class function newCachedThreadPool(): JUCExecutorService; static; overload;
    class function newCachedThreadPool(para1: JUCThreadFactory): JUCExecutorService; static; overload;
    class function newSingleThreadScheduledExecutor(): JUCScheduledExecutorService; static; overload;
    class function newSingleThreadScheduledExecutor(para1: JUCThreadFactory): JUCScheduledExecutorService; static; overload;
    class function newScheduledThreadPool(para1: jint): JUCScheduledExecutorService; static; overload;
    class function newScheduledThreadPool(para1: jint; para2: JUCThreadFactory): JUCScheduledExecutorService; static; overload;
    class function unconfigurableExecutorService(para1: JUCExecutorService): JUCExecutorService; static; overload;
    class function unconfigurableScheduledExecutorService(para1: JUCScheduledExecutorService): JUCScheduledExecutorService; static; overload;
    class function defaultThreadFactory(): JUCThreadFactory; static; overload;
    class function privilegedThreadFactory(): JUCThreadFactory; static; overload;
    class function callable(para1: JLRunnable; para2: JLObject): JUCCallable; static; overload;
    class function callable(para1: JLRunnable): JUCCallable; static; overload;
    class function callable(para1: JSPrivilegedAction): JUCCallable; static; overload;
    class function callable(para1: JSPrivilegedExceptionAction): JUCCallable; static; overload;
    class function privilegedCallable(para1: JUCCallable): JUCCallable; static; overload;
    class function privilegedCallableUsingCurrentClassLoader(para1: JUCCallable): JUCCallable; static; overload;
  end;

  JUCFuture = interface external 'java.util.concurrent' name 'Future' 
    function cancel(para1: jboolean): jboolean; overload;
    function isCancelled(): jboolean; overload;
    function isDone(): jboolean; overload;
    function get(): JLObject; overload;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    function get(para1: jlong; para2: JUCTimeUnit): JLObject; overload;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
  end;

  JUCRejectedExecutionHandler = interface external 'java.util.concurrent' name 'RejectedExecutionHandler' 
    procedure rejectedExecution(para1: JLRunnable; para2: JUCThreadPoolExecutor); overload;
  end;

  JUCThreadFactory = interface external 'java.util.concurrent' name 'ThreadFactory' 
    function newThread(para1: JLRunnable): JLThread; overload;
  end;

  JUCAAtomicIntegerFieldUpdater = class abstract external 'java.util.concurrent.atomic' name 'AtomicIntegerFieldUpdater' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function newUpdater(para1: JLClass; para2: JLString): JUCAAtomicIntegerFieldUpdater; static; overload;
    function compareAndSet(para1: JLObject; para2: jint; para3: jint): jboolean; overload; virtual; abstract;
    function weakCompareAndSet(para1: JLObject; para2: jint; para3: jint): jboolean; overload; virtual; abstract;
    procedure &set(para1: JLObject; para2: jint); overload; virtual; abstract;
    procedure lazySet(para1: JLObject; para2: jint); overload; virtual; abstract;
    function get(para1: JLObject): jint; overload; virtual; abstract;
    function getAndSet(para1: JLObject; para2: jint): jint; overload; virtual;
    function getAndIncrement(para1: JLObject): jint; overload; virtual;
    function getAndDecrement(para1: JLObject): jint; overload; virtual;
    function getAndAdd(para1: JLObject; para2: jint): jint; overload; virtual;
    function incrementAndGet(para1: JLObject): jint; overload; virtual;
    function decrementAndGet(para1: JLObject): jint; overload; virtual;
    function addAndGet(para1: JLObject; para2: jint): jint; overload; virtual;
  end;

  JUCAAtomicLongFieldUpdater = class abstract external 'java.util.concurrent.atomic' name 'AtomicLongFieldUpdater' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function newUpdater(para1: JLClass; para2: JLString): JUCAAtomicLongFieldUpdater; static; overload;
    function compareAndSet(para1: JLObject; para2: jlong; para3: jlong): jboolean; overload; virtual; abstract;
    function weakCompareAndSet(para1: JLObject; para2: jlong; para3: jlong): jboolean; overload; virtual; abstract;
    procedure &set(para1: JLObject; para2: jlong); overload; virtual; abstract;
    procedure lazySet(para1: JLObject; para2: jlong); overload; virtual; abstract;
    function get(para1: JLObject): jlong; overload; virtual; abstract;
    function getAndSet(para1: JLObject; para2: jlong): jlong; overload; virtual;
    function getAndIncrement(para1: JLObject): jlong; overload; virtual;
    function getAndDecrement(para1: JLObject): jlong; overload; virtual;
    function getAndAdd(para1: JLObject; para2: jlong): jlong; overload; virtual;
    function incrementAndGet(para1: JLObject): jlong; overload; virtual;
    function decrementAndGet(para1: JLObject): jlong; overload; virtual;
    function addAndGet(para1: JLObject; para2: jlong): jlong; overload; virtual;
  end;

  JUCAAtomicMarkableReference = class external 'java.util.concurrent.atomic' name 'AtomicMarkableReference' (JLObject)
  public
    constructor create(para1: JLObject; para2: jboolean); overload;
    function getReference(): JLObject; overload; virtual;
    function isMarked(): jboolean; overload; virtual;
    function get(para1: Arr1jboolean): JLObject; overload; virtual;
    function get(var para1: array of jboolean): JLObject; overload; virtual;
    function weakCompareAndSet(para1: JLObject; para2: JLObject; para3: jboolean; para4: jboolean): jboolean; overload; virtual;
    function compareAndSet(para1: JLObject; para2: JLObject; para3: jboolean; para4: jboolean): jboolean; overload; virtual;
    procedure &set(para1: JLObject; para2: jboolean); overload; virtual;
    function attemptMark(para1: JLObject; para2: jboolean): jboolean; overload; virtual;
  end;

  JUCAAtomicReferenceFieldUpdater = class abstract external 'java.util.concurrent.atomic' name 'AtomicReferenceFieldUpdater' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function newUpdater(para1: JLClass; para2: JLClass; para3: JLString): JUCAAtomicReferenceFieldUpdater; static; overload;
    function compareAndSet(para1: JLObject; para2: JLObject; para3: JLObject): jboolean; overload; virtual; abstract;
    function weakCompareAndSet(para1: JLObject; para2: JLObject; para3: JLObject): jboolean; overload; virtual; abstract;
    procedure &set(para1: JLObject; para2: JLObject); overload; virtual; abstract;
    procedure lazySet(para1: JLObject; para2: JLObject); overload; virtual; abstract;
    function get(para1: JLObject): JLObject; overload; virtual; abstract;
    function getAndSet(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
  end;

  JUCAAtomicStampedReference = class external 'java.util.concurrent.atomic' name 'AtomicStampedReference' (JLObject)
  public
    constructor create(para1: JLObject; para2: jint); overload;
    function getReference(): JLObject; overload; virtual;
    function getStamp(): jint; overload; virtual;
    function get(para1: Arr1jint): JLObject; overload; virtual;
    function get(var para1: array of jint): JLObject; overload; virtual;
    function weakCompareAndSet(para1: JLObject; para2: JLObject; para3: jint; para4: jint): jboolean; overload; virtual;
    function compareAndSet(para1: JLObject; para2: JLObject; para3: jint; para4: jint): jboolean; overload; virtual;
    procedure &set(para1: JLObject; para2: jint); overload; virtual;
    function attemptStamp(para1: JLObject; para2: jint): jboolean; overload; virtual;
  end;

  JUCLCondition = interface external 'java.util.concurrent.locks' name 'Condition' 
    procedure await(); overload;  // throws java.lang.InterruptedException
    procedure awaitUninterruptibly(); overload;
    function awaitNanos(para1: jlong): jlong; overload;  // throws java.lang.InterruptedException
    function await(para1: jlong; para2: JUCTimeUnit): jboolean; overload;  // throws java.lang.InterruptedException
    function awaitUntil(para1: JUDate): jboolean; overload;  // throws java.lang.InterruptedException
    procedure signal(); overload;
    procedure signalAll(); overload;
  end;

  JUCLLock = interface external 'java.util.concurrent.locks' name 'Lock' 
    procedure lock(); overload;
    procedure lockInterruptibly(); overload;  // throws java.lang.InterruptedException
    function tryLock(): jboolean; overload;
    function tryLock(para1: jlong; para2: JUCTimeUnit): jboolean; overload;  // throws java.lang.InterruptedException
    procedure unlock(); overload;
    function newCondition(): JUCLCondition; overload;
  end;

  JUCLLockSupport = class external 'java.util.concurrent.locks' name 'LockSupport' (JLObject)
  public
    class procedure unpark(para1: JLThread); static; overload;
    class procedure park(para1: JLObject); static; overload;
    class procedure parkNanos(para1: JLObject; para2: jlong); static; overload;
    class procedure parkUntil(para1: JLObject; para2: jlong); static; overload;
    class function getBlocker(para1: JLThread): JLObject; static; overload;
    class procedure park(); static; overload;
    class procedure parkNanos(para1: jlong); static; overload;
    class procedure parkUntil(para1: jlong); static; overload;
  end;

  JUCLReadWriteLock = interface external 'java.util.concurrent.locks' name 'ReadWriteLock' 
    function readLock(): JUCLLock; overload;
    function writeLock(): JUCLLock; overload;
  end;

  JUJPack200 = class abstract external 'java.util.jar' name 'Pack200' (JLObject)
  public
    type
      InnerUnpacker = interface;
      Arr1InnerUnpacker = array of InnerUnpacker;
      Arr2InnerUnpacker = array of Arr1InnerUnpacker;
      Arr3InnerUnpacker = array of Arr2InnerUnpacker;
      InnerPacker = interface;
      Arr1InnerPacker = array of InnerPacker;
      Arr2InnerPacker = array of Arr1InnerPacker;
      Arr3InnerPacker = array of Arr2InnerPacker;
      InnerUnpacker = interface external 'java.util.jar' name 'Unpacker' 
        const
          DEFLATE_HINT = 'unpack.deflate.hint';
          &FALSE = 'false';
          KEEP = 'keep';
          PROGRESS = 'unpack.progress';
          &TRUE = 'true';
        function properties(): JUSortedMap; overload;
        procedure unpack(para1: JIInputStream; para2: JUJJarOutputStream); overload;  // throws java.io.IOException
        procedure unpack(para1: JIFile; para2: JUJJarOutputStream); overload;  // throws java.io.IOException
        procedure addPropertyChangeListener(para1: JBPropertyChangeListener); overload;
        procedure removePropertyChangeListener(para1: JBPropertyChangeListener); overload;
      end;

      InnerPacker = interface external 'java.util.jar' name 'Packer' 
        const
          CLASS_ATTRIBUTE_PFX = 'pack.class.attribute.';
          CODE_ATTRIBUTE_PFX = 'pack.code.attribute.';
          DEFLATE_HINT = 'pack.deflate.hint';
          EFFORT = 'pack.effort';
          ERROR = 'error';
          &FALSE = 'false';
          FIELD_ATTRIBUTE_PFX = 'pack.field.attribute.';
          KEEP = 'keep';
          KEEP_FILE_ORDER = 'pack.keep.file.order';
          LATEST = 'latest';
          METHOD_ATTRIBUTE_PFX = 'pack.method.attribute.';
          MODIFICATION_TIME = 'pack.modification.time';
          PASS = 'pass';
          PASS_FILE_PFX = 'pack.pass.file.';
          PROGRESS = 'pack.progress';
          SEGMENT_LIMIT = 'pack.segment.limit';
          STRIP = 'strip';
          &TRUE = 'true';
          UNKNOWN_ATTRIBUTE = 'pack.unknown.attribute';
        function properties(): JUSortedMap; overload;
        procedure pack(para1: JUJJarFile; para2: JIOutputStream); overload;  // throws java.io.IOException
        procedure pack(para1: JUJJarInputStream; para2: JIOutputStream); overload;  // throws java.io.IOException
        procedure addPropertyChangeListener(para1: JBPropertyChangeListener); overload;
        procedure removePropertyChangeListener(para1: JBPropertyChangeListener); overload;
      end;

  public
    class function newPacker(): JUJPack200.InnerPacker; static; overload;
    class function newUnpacker(): JUJPack200.InnerUnpacker; static; overload;
  end;

  JULErrorManager = class external 'java.util.logging' name 'ErrorManager' (JLObject)
  public
    const
      CLOSE_FAILURE = 3;
      FLUSH_FAILURE = 2;
      FORMAT_FAILURE = 5;
      GENERIC_FAILURE = 0;
      OPEN_FAILURE = 4;
      WRITE_FAILURE = 1;
  public
    constructor create(); overload;
    procedure error(para1: JLString; para2: JLException; para3: jint); overload; virtual;
  end;

  JULFilter = interface external 'java.util.logging' name 'Filter' 
    function isLoggable(para1: JULLogRecord): jboolean; overload;
  end;

  JULFormatter = class abstract external 'java.util.logging' name 'Formatter' (JLObject)
  strict protected
    constructor create(); overload;
  public
    function format(para1: JULLogRecord): JLString; overload; virtual; abstract;
    function formatMessage(para1: JULLogRecord): JLString; overload; virtual;
    function getHead(para1: JULHandler): JLString; overload; virtual;
    function getTail(para1: JULHandler): JLString; overload; virtual;
  end;

  JULHandler = class abstract external 'java.util.logging' name 'Handler' (JLObject)
  strict protected
    constructor create(); overload;
  public
    procedure close(); overload; virtual; abstract;
    procedure flush(); overload; virtual; abstract;
    procedure publish(para1: JULLogRecord); overload; virtual; abstract;
    function getEncoding(): JLString; overload; virtual;
    function getErrorManager(): JULErrorManager; overload; virtual;
    function getFilter(): JULFilter; overload; virtual;
    function getFormatter(): JULFormatter; overload; virtual;
    function getLevel(): JULLevel; overload; virtual;
    function isLoggable(para1: JULLogRecord): jboolean; overload; virtual;
  strict protected
    procedure reportError(para1: JLString; para2: JLException; para3: jint); overload; virtual;
  public
    procedure setEncoding(para1: JLString); overload; virtual;  // throws java.io.UnsupportedEncodingException
    procedure setErrorManager(para1: JULErrorManager); overload; virtual;
    procedure setFilter(para1: JULFilter); overload; virtual;
    procedure setFormatter(para1: JULFormatter); overload; virtual;
    procedure setLevel(para1: JULLevel); overload; virtual;
  end;

  JULLogManager = class external 'java.util.logging' name 'LogManager' (JLObject)
  public
    const
      LOGGING_MXBEAN_NAME = 'java.util.logging:type=Logging';
  strict protected
    constructor create(); overload;
  public
    class function getLoggingMXBean(): JULLoggingMXBean; static; overload;
    procedure checkAccess(); overload; virtual;
    function addLogger(para1: JULLogger): jboolean; overload; virtual;
    function getLogger(para1: JLString): JULLogger; overload; virtual;
    function getLoggerNames(): JUEnumeration; overload; virtual;
    class function getLogManager(): JULLogManager; static; overload;
    function getProperty(para1: JLString): JLString; overload; virtual;
    procedure readConfiguration(); overload; virtual;  // throws java.io.IOException
    procedure readConfiguration(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;
    procedure addPropertyChangeListener(para1: JBPropertyChangeListener); overload; virtual;
    procedure removePropertyChangeListener(para1: JBPropertyChangeListener); overload; virtual;
  end;

  JULLogger = class external 'java.util.logging' name 'Logger' (JLObject)
  public
    const
      GLOBAL_LOGGER_NAME = 'global';
  public
    final class var
      fglobal: JULLogger deprecated; external name 'global';
  strict protected
    constructor create(para1: JLString; para2: JLString); overload;
  public
    class function getAnonymousLogger(): JULLogger; static; overload;
    class function getAnonymousLogger(para1: JLString): JULLogger; static; overload;
    class function getLogger(para1: JLString): JULLogger; static; overload;
    class function getLogger(para1: JLString; para2: JLString): JULLogger; static; overload;
    class function getGlobal(): JULLogger; static; overload;
    procedure addHandler(para1: JULHandler); overload; virtual;
    function getHandlers(): Arr1JULHandler; overload; virtual;
    procedure removeHandler(para1: JULHandler); overload; virtual;
    function getFilter(): JULFilter; overload; virtual;
    procedure setFilter(para1: JULFilter); overload; virtual;
    function getLevel(): JULLevel; overload; virtual;
    procedure setLevel(para1: JULLevel); overload; virtual;
    function getUseParentHandlers(): jboolean; overload; virtual;
    procedure setUseParentHandlers(para1: jboolean); overload; virtual;
    function getParent(): JULLogger; overload; virtual;
    procedure setParent(para1: JULLogger); overload; virtual;
    function getName(): JLString; overload; virtual;
    function getResourceBundle(): JUResourceBundle; overload; virtual;
    function getResourceBundleName(): JLString; overload; virtual;
    function isLoggable(para1: JULLevel): jboolean; overload; virtual;
    procedure entering(para1: JLString; para2: JLString); overload; virtual;
    procedure entering(para1: JLString; para2: JLString; para3: JLObject); overload; virtual;
    procedure entering(para1: JLString; para2: JLString; para3: Arr1JLObject); overload; virtual;
    procedure entering(para1: JLString; para2: JLString; var para3: array of JLObject); overload; virtual;
    procedure exiting(para1: JLString; para2: JLString); overload; virtual;
    procedure exiting(para1: JLString; para2: JLString; para3: JLObject); overload; virtual;
    procedure throwing(para1: JLString; para2: JLString; para3: JLThrowable); overload; virtual;
    procedure severe(para1: JLString); overload; virtual;
    procedure warning(para1: JLString); overload; virtual;
    procedure info(para1: JLString); overload; virtual;
    procedure config(para1: JLString); overload; virtual;
    procedure fine(para1: JLString); overload; virtual;
    procedure finer(para1: JLString); overload; virtual;
    procedure finest(para1: JLString); overload; virtual;
    procedure log(para1: JULLevel; para2: JLString); overload; virtual;
    procedure log(para1: JULLevel; para2: JLString; para3: JLObject); overload; virtual;
    procedure log(para1: JULLevel; para2: JLString; para3: Arr1JLObject); overload; virtual;
    procedure log(para1: JULLevel; para2: JLString; var para3: array of JLObject); overload; virtual;
    procedure log(para1: JULLevel; para2: JLString; para3: JLThrowable); overload; virtual;
    procedure log(para1: JULLogRecord); overload; virtual;
    procedure logp(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString); overload; virtual;
    procedure logp(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; para5: JLObject); overload; virtual;
    procedure logp(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; para5: Arr1JLObject); overload; virtual;
    procedure logp(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; var para5: array of JLObject); overload; virtual;
    procedure logp(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; para5: JLThrowable); overload; virtual;
    procedure logrb(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload; virtual;
    procedure logrb(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; para5: JLString; para6: JLObject); overload; virtual;
    procedure logrb(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; para5: JLString; para6: Arr1JLObject); overload; virtual;
    procedure logrb(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; para5: JLString; var para6: array of JLObject); overload; virtual;
    procedure logrb(para1: JULLevel; para2: JLString; para3: JLString; para4: JLString; para5: JLString; para6: JLThrowable); overload; virtual;
  end;

  JULLoggingMXBean = interface external 'java.util.logging' name 'LoggingMXBean' 
    function getLoggerLevel(para1: JLString): JLString; overload;
    function getLoggerNames(): JUList; overload;
    function getParentLoggerName(para1: JLString): JLString; overload;
    procedure setLoggerLevel(para1: JLString; para2: JLString); overload;
  end;

  JUPPreferences = class abstract external 'java.util.prefs' name 'Preferences' (JLObject)
  public
    const
      MAX_KEY_LENGTH = 80;
      MAX_NAME_LENGTH = 80;
      MAX_VALUE_LENGTH = 8192;
  strict protected
    constructor create(); overload;
  public
    function absolutePath(): JLString; overload; virtual; abstract;
    function childrenNames(): Arr1JLString; overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    procedure clear(); overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    procedure exportNode(para1: JIOutputStream); overload; virtual; abstract;  // throws java.io.IOException, java.util.prefs.BackingStoreException
    procedure exportSubtree(para1: JIOutputStream); overload; virtual; abstract;  // throws java.io.IOException, java.util.prefs.BackingStoreException
    procedure flush(); overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    function get(para1: JLString; para2: JLString): JLString; overload; virtual; abstract;
    function getBoolean(para1: JLString; para2: jboolean): jboolean; overload; virtual; abstract;
    function getByteArray(para1: JLString; para2: Arr1jbyte): Arr1jbyte; overload; virtual; abstract;
    function getByteArray(para1: JLString; var para2: array of jbyte): Arr1jbyte; overload; virtual; abstract;
    function getDouble(para1: JLString; para2: jdouble): jdouble; overload; virtual; abstract;
    function getFloat(para1: JLString; para2: jfloat): jfloat; overload; virtual; abstract;
    function getInt(para1: JLString; para2: jint): jint; overload; virtual; abstract;
    function getLong(para1: JLString; para2: jlong): jlong; overload; virtual; abstract;
    class procedure importPreferences(para1: JIInputStream); static; overload;  // throws java.util.prefs.InvalidPreferencesFormatException, java.io.IOException
    function isUserNode(): jboolean; overload; virtual; abstract;
    function keys(): Arr1JLString; overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    function name(): JLString; overload; virtual; abstract;
    function node(para1: JLString): JUPPreferences; overload; virtual; abstract;
    function nodeExists(para1: JLString): jboolean; overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    function parent(): JUPPreferences; overload; virtual; abstract;
    procedure put(para1: JLString; para2: JLString); overload; virtual; abstract;
    procedure putBoolean(para1: JLString; para2: jboolean); overload; virtual; abstract;
    procedure putByteArray(para1: JLString; para2: Arr1jbyte); overload; virtual; abstract;
    procedure putByteArray(para1: JLString; var para2: array of jbyte); overload; virtual; abstract;
    procedure putDouble(para1: JLString; para2: jdouble); overload; virtual; abstract;
    procedure putFloat(para1: JLString; para2: jfloat); overload; virtual; abstract;
    procedure putInt(para1: JLString; para2: jint); overload; virtual; abstract;
    procedure putLong(para1: JLString; para2: jlong); overload; virtual; abstract;
    procedure remove(para1: JLString); overload; virtual; abstract;
    procedure removeNode(); overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    procedure addNodeChangeListener(para1: JUPNodeChangeListener); overload; virtual; abstract;
    procedure addPreferenceChangeListener(para1: JUPPreferenceChangeListener); overload; virtual; abstract;
    procedure removeNodeChangeListener(para1: JUPNodeChangeListener); overload; virtual; abstract;
    procedure removePreferenceChangeListener(para1: JUPPreferenceChangeListener); overload; virtual; abstract;
    procedure sync(); overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    class function systemNodeForPackage(para1: JLClass): JUPPreferences; static; overload;
    class function systemRoot(): JUPPreferences; static; overload;
    class function userNodeForPackage(para1: JLClass): JUPPreferences; static; overload;
    class function userRoot(): JUPPreferences; static; overload;
    function toString(): JLString; overload; virtual; abstract;
  end;

  JUPPreferencesFactory = interface external 'java.util.prefs' name 'PreferencesFactory' 
    function userRoot(): JUPPreferences; overload;
    function systemRoot(): JUPPreferences; overload;
  end;

  JURMatchResult = interface external 'java.util.regex' name 'MatchResult' 
    function &end(): jint; overload;
    function &end(para1: jint): jint; overload;
    function group(): JLString; overload;
    function group(para1: jint): JLString; overload;
    function groupCount(): jint; overload;
    function start(): jint; overload;
    function start(para1: jint): jint; overload;
  end;

  JUZChecksum = interface external 'java.util.zip' name 'Checksum' 
    function getValue(): jlong; overload;
    procedure reset(); overload;
    procedure update(para1: Arr1jbyte; para2: jint; para3: jint); overload;
    procedure update(var para1: array of jbyte; para2: jint; para3: jint); overload;
    procedure update(para1: jint); overload;
  end;

  JUZDeflater = class external 'java.util.zip' name 'Deflater' (JLObject)
  public
    const
      BEST_COMPRESSION = 9;
      BEST_SPEED = 1;
      DEFAULT_COMPRESSION = -1;
      DEFAULT_STRATEGY = 0;
      DEFLATED = 8;
      FILTERED = 1;
      FULL_FLUSH = 3;
      HUFFMAN_ONLY = 2;
      NO_COMPRESSION = 0;
      NO_FLUSH = 0;
      SYNC_FLUSH = 2;
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jboolean); overload;
    function deflate(para1: Arr1jbyte): jint; overload; virtual;
    function deflate(var para1: array of jbyte): jint; overload; virtual;
    function deflate(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;
    function deflate(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;
    function deflate(para1: Arr1jbyte; para2: jint; para3: jint; para4: jint): jint; overload; virtual;
    function deflate(var para1: array of jbyte; para2: jint; para3: jint; para4: jint): jint; overload; virtual;
    procedure &end(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure finish(); overload; virtual;
    function finished(): jboolean; overload; virtual;
    function getAdler(): jint; overload; virtual;
    function getTotalIn(): jint; overload; virtual;
    function getTotalOut(): jint; overload; virtual;
    function needsInput(): jboolean; overload; virtual;
    procedure reset(); overload; virtual;
    procedure setDictionary(para1: Arr1jbyte); overload; virtual;
    procedure setDictionary(var para1: array of jbyte); overload; virtual;
    procedure setDictionary(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setDictionary(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setInput(para1: Arr1jbyte); overload; virtual;
    procedure setInput(var para1: array of jbyte); overload; virtual;
    procedure setInput(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setInput(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setLevel(para1: jint); overload; virtual;
    procedure setStrategy(para1: jint); overload; virtual;
    function getBytesRead(): jlong; overload; virtual;
    function getBytesWritten(): jlong; overload; virtual;
  end;

  JUZInflater = class external 'java.util.zip' name 'Inflater' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: jboolean); overload;
    procedure &end(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    function finished(): jboolean; overload; virtual;
    function getAdler(): jint; overload; virtual;
    function getBytesRead(): jlong; overload; virtual;
    function getBytesWritten(): jlong; overload; virtual;
    function getRemaining(): jint; overload; virtual;
    function getTotalIn(): jint; overload; virtual;
    function getTotalOut(): jint; overload; virtual;
    function inflate(para1: Arr1jbyte): jint; overload; virtual;  // throws java.util.zip.DataFormatException
    function inflate(var para1: array of jbyte): jint; overload; virtual;  // throws java.util.zip.DataFormatException
    function inflate(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.util.zip.DataFormatException
    function inflate(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.util.zip.DataFormatException
    function needsDictionary(): jboolean; overload; virtual;
    function needsInput(): jboolean; overload; virtual;
    procedure reset(); overload; virtual;
    procedure setDictionary(para1: Arr1jbyte); overload; virtual;
    procedure setDictionary(var para1: array of jbyte); overload; virtual;
    procedure setDictionary(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setDictionary(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setInput(para1: Arr1jbyte); overload; virtual;
    procedure setInput(var para1: array of jbyte); overload; virtual;
    procedure setInput(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure setInput(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
  end;

  JUZZipFile = class external 'java.util.zip' name 'ZipFile' (JLObject, JICloseable)
  public
    const
      CENATT = 36;
      CENATX = 38;
      CENCOM = 32;
      CENCRC = 16;
      CENDSK = 34;
      CENEXT = 30;
      CENFLG = 8;
      CENHDR = 46;
      CENHOW = 10;
      CENLEN = 24;
      CENNAM = 28;
      CENOFF = 42;
      CENSIG = jlong(33639248);
      CENSIZ = 20;
      CENTIM = 12;
      CENVEM = 4;
      CENVER = 6;
      ENDCOM = 20;
      ENDHDR = 22;
      ENDOFF = 16;
      ENDSIG = jlong(101010256);
      ENDSIZ = 12;
      ENDSUB = 8;
      ENDTOT = 10;
      EXTCRC = 4;
      EXTHDR = 16;
      EXTLEN = 12;
      EXTSIG = jlong(134695760);
      EXTSIZ = 8;
      LOCCRC = 14;
      LOCEXT = 28;
      LOCFLG = 6;
      LOCHDR = 30;
      LOCHOW = 8;
      LOCLEN = 22;
      LOCNAM = 26;
      LOCSIG = jlong(67324752);
      LOCSIZ = 18;
      LOCTIM = 10;
      LOCVER = 4;
      OPEN_DELETE = 4;
      OPEN_READ = 1;
  public
    constructor create(para1: JIFile); overload;  // throws java.util.zip.ZipException, java.io.IOException
    constructor create(para1: JLString); overload;  // throws java.io.IOException
    constructor create(para1: JIFile; para2: jint); overload;  // throws java.io.IOException
  strict protected
    procedure finalize(); overload; virtual;  // throws java.io.IOException
  public
    procedure close(); overload; virtual;  // throws java.io.IOException
    function entries(): JUEnumeration; overload; virtual;
    function getComment(): JLString; overload; virtual;
    function getEntry(para1: JLString): JUZZipEntry; overload; virtual;
    function getInputStream(para1: JUZZipEntry): JIInputStream; overload; virtual;  // throws java.io.IOException
    function getName(): JLString; overload; virtual;
    function size(): jint; overload; virtual;
  end;

  JCCipher = class external 'javax.crypto' name 'Cipher' (JLObject)
  public
    const
      DECRYPT_MODE = 2;
      ENCRYPT_MODE = 1;
      PRIVATE_KEY = 2;
      PUBLIC_KEY = 1;
      SECRET_KEY = 3;
      UNWRAP_MODE = 4;
      WRAP_MODE = 3;
  strict protected
    constructor create(para1: JCCipherSpi; para2: JSProvider; para3: JLString); overload;
  public
    class function getInstance(para1: JLString): JCCipher; static; overload; final;  // throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    class function getInstance(para1: JLString; para2: JLString): JCCipher; static; overload; final;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException
    class function getInstance(para1: JLString; para2: JSProvider): JCCipher; static; overload; final;  // throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    function getProvider(): JSProvider; overload; virtual; final;
    function getAlgorithm(): JLString; overload; virtual; final;
    function getBlockSize(): jint; overload; virtual; final;
    function getOutputSize(para1: jint): jint; overload; virtual; final;
    function getIV(): Arr1jbyte; overload; virtual; final;
    function getParameters(): JSAlgorithmParameters; overload; virtual; final;
    function getExemptionMechanism(): JCExemptionMechanism; overload; virtual; final;
    procedure init(para1: jint; para2: JSKey); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure init(para1: jint; para2: JSKey; para3: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure init(para1: jint; para2: JSKey; para3: JSSAlgorithmParameterSpec); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    procedure init(para1: jint; para2: JSKey; para3: JSSAlgorithmParameterSpec; para4: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    procedure init(para1: jint; para2: JSKey; para3: JSAlgorithmParameters); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    procedure init(para1: jint; para2: JSKey; para3: JSAlgorithmParameters; para4: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    procedure init(para1: jint; para2: JSCCertificate); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure init(para1: jint; para2: JSCCertificate; para3: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidKeyException
    function update(para1: Arr1jbyte): Arr1jbyte; overload; virtual; final;
    function update(var para1: array of jbyte): Arr1jbyte; overload; virtual; final;
    function update(para1: Arr1jbyte; para2: jint; para3: jint): Arr1jbyte; overload; virtual; final;
    function update(var para1: array of jbyte; para2: jint; para3: jint): Arr1jbyte; overload; virtual; final;
    function update(para1: Arr1jbyte; para2: jint; para3: jint; para4: Arr1jbyte): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException
    function update(var para1: array of jbyte; para2: jint; para3: jint; var para4: array of jbyte): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException
    function update(para1: Arr1jbyte; para2: jint; para3: jint; para4: Arr1jbyte; para5: jint): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException
    function update(var para1: array of jbyte; para2: jint; para3: jint; var para4: array of jbyte; para5: jint): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException
    function update(para1: JNByteBuffer; para2: JNByteBuffer): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException
    procedure updateAAD(para1: Arr1jbyte); overload; virtual; final;
    procedure updateAAD(var para1: array of jbyte); overload; virtual; final;
    procedure updateAAD(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; final;
    procedure updateAAD(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; final;
    procedure updateAAD(para1: JNByteBuffer); overload; virtual; final;
    function doFinal(): Arr1jbyte; overload; virtual; final;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(para1: Arr1jbyte; para2: jint): jint; overload; virtual; final;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException, javax.crypto.BadPaddingException
    function doFinal(var para1: array of jbyte; para2: jint): jint; overload; virtual; final;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException, javax.crypto.BadPaddingException
    function doFinal(para1: Arr1jbyte): Arr1jbyte; overload; virtual; final;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(var para1: array of jbyte): Arr1jbyte; overload; virtual; final;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(para1: Arr1jbyte; para2: jint; para3: jint): Arr1jbyte; overload; virtual; final;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(var para1: array of jbyte; para2: jint; para3: jint): Arr1jbyte; overload; virtual; final;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(para1: Arr1jbyte; para2: jint; para3: jint; para4: Arr1jbyte): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(var para1: array of jbyte; para2: jint; para3: jint; var para4: array of jbyte): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(para1: Arr1jbyte; para2: jint; para3: jint; para4: Arr1jbyte; para5: jint): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(var para1: array of jbyte; para2: jint; para3: jint; var para4: array of jbyte; para5: jint): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function doFinal(para1: JNByteBuffer; para2: JNByteBuffer): jint; overload; virtual; final;  // throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function wrap(para1: JSKey): Arr1jbyte; overload; virtual; final;  // throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    function unwrap(para1: Arr1jbyte; para2: JLString; para3: jint): JSKey; overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    function unwrap(var para1: array of jbyte; para2: JLString; para3: jint): JSKey; overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    class function getMaxAllowedKeyLength(para1: JLString): jint; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    class function getMaxAllowedParameterSpec(para1: JLString): JSSAlgorithmParameterSpec; static; overload; final;  // throws java.security.NoSuchAlgorithmException
  end;

  JCCipherSpi = class abstract external 'javax.crypto' name 'CipherSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure engineSetMode(para1: JLString); overload; virtual; abstract;  // throws java.security.NoSuchAlgorithmException
    procedure engineSetPadding(para1: JLString); overload; virtual; abstract;  // throws javax.crypto.NoSuchPaddingException
    function engineGetBlockSize(): jint; overload; virtual; abstract;
    function engineGetOutputSize(para1: jint): jint; overload; virtual; abstract;
    function engineGetIV(): Arr1jbyte; overload; virtual; abstract;
    function engineGetParameters(): JSAlgorithmParameters; overload; virtual; abstract;
    procedure engineInit(para1: jint; para2: JSKey; para3: JSSecureRandom); overload; virtual; abstract;  // throws java.security.InvalidKeyException
    procedure engineInit(para1: jint; para2: JSKey; para3: JSSAlgorithmParameterSpec; para4: JSSecureRandom); overload; virtual; abstract;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    procedure engineInit(para1: jint; para2: JSKey; para3: JSAlgorithmParameters; para4: JSSecureRandom); overload; virtual; abstract;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    function engineUpdate(para1: Arr1jbyte; para2: jint; para3: jint): Arr1jbyte; overload; virtual; abstract;
    function engineUpdate(var para1: array of jbyte; para2: jint; para3: jint): Arr1jbyte; overload; virtual; abstract;
    function engineUpdate(para1: Arr1jbyte; para2: jint; para3: jint; para4: Arr1jbyte; para5: jint): jint; overload; virtual; abstract;  // throws javax.crypto.ShortBufferException
    function engineUpdate(var para1: array of jbyte; para2: jint; para3: jint; var para4: array of jbyte; para5: jint): jint; overload; virtual; abstract;  // throws javax.crypto.ShortBufferException
    function engineUpdate(para1: JNByteBuffer; para2: JNByteBuffer): jint; overload; virtual;  // throws javax.crypto.ShortBufferException
    procedure engineUpdateAAD(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure engineUpdateAAD(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure engineUpdateAAD(para1: JNByteBuffer); overload; virtual;
    function engineDoFinal(para1: Arr1jbyte; para2: jint; para3: jint): Arr1jbyte; overload; virtual; abstract;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function engineDoFinal(var para1: array of jbyte; para2: jint; para3: jint): Arr1jbyte; overload; virtual; abstract;  // throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function engineDoFinal(para1: Arr1jbyte; para2: jint; para3: jint; para4: Arr1jbyte; para5: jint): jint; overload; virtual; abstract;  // throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function engineDoFinal(var para1: array of jbyte; para2: jint; para3: jint; var para4: array of jbyte; para5: jint): jint; overload; virtual; abstract;  // throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function engineDoFinal(para1: JNByteBuffer; para2: JNByteBuffer): jint; overload; virtual;  // throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function engineWrap(para1: JSKey): Arr1jbyte; overload; virtual;  // throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    function engineUnwrap(para1: Arr1jbyte; para2: JLString; para3: jint): JSKey; overload; virtual;  // throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    function engineUnwrap(var para1: array of jbyte; para2: JLString; para3: jint): JSKey; overload; virtual;  // throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    function engineGetKeySize(para1: JSKey): jint; overload; virtual;  // throws java.security.InvalidKeyException
  end;

  JCEncryptedPrivateKeyInfo = class external 'javax.crypto' name 'EncryptedPrivateKeyInfo' (JLObject)
  public
    constructor create(para1: Arr1jbyte); overload;  // throws java.io.IOException
    constructor create(const para1: array of jbyte); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: Arr1jbyte); overload;  // throws java.security.NoSuchAlgorithmException
    constructor create(para1: JLString; const para2: array of jbyte); overload;  // throws java.security.NoSuchAlgorithmException
    constructor create(para1: JSAlgorithmParameters; para2: Arr1jbyte); overload;  // throws java.security.NoSuchAlgorithmException
    constructor create(para1: JSAlgorithmParameters; const para2: array of jbyte); overload;  // throws java.security.NoSuchAlgorithmException
    function getAlgName(): JLString; overload; virtual;
    function getAlgParameters(): JSAlgorithmParameters; overload; virtual;
    function getEncryptedData(): Arr1jbyte; overload; virtual;
    function getKeySpec(para1: JCCipher): JSSPKCS8EncodedKeySpec; overload; virtual;  // throws java.security.spec.InvalidKeySpecException
    function getKeySpec(para1: JSKey): JSSPKCS8EncodedKeySpec; overload; virtual;  // throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    function getKeySpec(para1: JSKey; para2: JLString): JSSPKCS8EncodedKeySpec; overload; virtual;  // throws java.security.NoSuchProviderException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    function getKeySpec(para1: JSKey; para2: JSProvider): JSSPKCS8EncodedKeySpec; overload; virtual;  // throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    function getEncoded(): Arr1jbyte; overload; virtual;  // throws java.io.IOException
  end;

  JCExemptionMechanism = class external 'javax.crypto' name 'ExemptionMechanism' (JLObject)
  strict protected
    constructor create(para1: JCExemptionMechanismSpi; para2: JSProvider; para3: JLString); overload;
  public
    function getName(): JLString; overload; virtual; final;
    class function getInstance(para1: JLString): JCExemptionMechanism; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JCExemptionMechanism; static; overload; final;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JCExemptionMechanism; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    function getProvider(): JSProvider; overload; virtual; final;
    function isCryptoAllowed(para1: JSKey): jboolean; overload; virtual; final;  // throws javax.crypto.ExemptionMechanismException
    function getOutputSize(para1: jint): jint; overload; virtual; final;  // throws java.lang.IllegalStateException
    procedure init(para1: JSKey); overload; virtual; final;  // throws java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException
    procedure init(para1: JSKey; para2: JSAlgorithmParameters); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
    procedure init(para1: JSKey; para2: JSSAlgorithmParameterSpec); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
    function genExemptionBlob(): Arr1jbyte; overload; virtual; final;  // throws java.lang.IllegalStateException, javax.crypto.ExemptionMechanismException
    function genExemptionBlob(para1: Arr1jbyte): jint; overload; virtual; final;  // throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    function genExemptionBlob(var para1: array of jbyte): jint; overload; virtual; final;  // throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    function genExemptionBlob(para1: Arr1jbyte; para2: jint): jint; overload; virtual; final;  // throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    function genExemptionBlob(var para1: array of jbyte; para2: jint): jint; overload; virtual; final;  // throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
  strict protected
    procedure finalize(); overload; virtual;
  end;

  JCExemptionMechanismSpi = class abstract external 'javax.crypto' name 'ExemptionMechanismSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function engineGenExemptionBlob(): Arr1jbyte; overload; virtual; abstract;  // throws javax.crypto.ExemptionMechanismException
    function engineGenExemptionBlob(para1: Arr1jbyte; para2: jint): jint; overload; virtual; abstract;  // throws javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    function engineGenExemptionBlob(var para1: array of jbyte; para2: jint): jint; overload; virtual; abstract;  // throws javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    function engineGetOutputSize(para1: jint): jint; overload; virtual; abstract;
    procedure engineInit(para1: JSKey); overload; virtual; abstract;  // throws java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException
    procedure engineInit(para1: JSKey; para2: JSAlgorithmParameters); overload; virtual; abstract;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
    procedure engineInit(para1: JSKey; para2: JSSAlgorithmParameterSpec); overload; virtual; abstract;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
  end;

  JCKeyAgreement = class external 'javax.crypto' name 'KeyAgreement' (JLObject)
  strict protected
    constructor create(para1: JCKeyAgreementSpi; para2: JSProvider; para3: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    class function getInstance(para1: JLString): JCKeyAgreement; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JCKeyAgreement; static; overload; final;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JCKeyAgreement; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    procedure init(para1: JSKey); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure init(para1: JSKey; para2: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure init(para1: JSKey; para2: JSSAlgorithmParameterSpec); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    procedure init(para1: JSKey; para2: JSSAlgorithmParameterSpec; para3: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    function doPhase(para1: JSKey; para2: jboolean): JSKey; overload; virtual; final;  // throws java.security.InvalidKeyException, java.lang.IllegalStateException
    function generateSecret(): Arr1jbyte; overload; virtual; final;  // throws java.lang.IllegalStateException
    function generateSecret(para1: Arr1jbyte; para2: jint): jint; overload; virtual; final;  // throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    function generateSecret(var para1: array of jbyte; para2: jint): jint; overload; virtual; final;  // throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    function generateSecret(para1: JLString): JCSecretKey; overload; virtual; final;  // throws java.lang.IllegalStateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
  end;

  JCKeyAgreementSpi = class abstract external 'javax.crypto' name 'KeyAgreementSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function engineDoPhase(para1: JSKey; para2: jboolean): JSKey; overload; virtual; abstract;  // throws java.security.InvalidKeyException, java.lang.IllegalStateException
    function engineGenerateSecret(): Arr1jbyte; overload; virtual; abstract;  // throws java.lang.IllegalStateException
    function engineGenerateSecret(para1: Arr1jbyte; para2: jint): jint; overload; virtual; abstract;  // throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    function engineGenerateSecret(var para1: array of jbyte; para2: jint): jint; overload; virtual; abstract;  // throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    function engineGenerateSecret(para1: JLString): JCSecretKey; overload; virtual; abstract;  // throws java.lang.IllegalStateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    procedure engineInit(para1: JSKey; para2: JSSecureRandom); overload; virtual; abstract;  // throws java.security.InvalidKeyException
    procedure engineInit(para1: JSKey; para2: JSSAlgorithmParameterSpec; para3: JSSecureRandom); overload; virtual; abstract;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
  end;

  JCKeyGenerator = class external 'javax.crypto' name 'KeyGenerator' (JLObject)
  strict protected
    constructor create(para1: JCKeyGeneratorSpi; para2: JSProvider; para3: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    class function getInstance(para1: JLString): JCKeyGenerator; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JCKeyGenerator; static; overload; final;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JCKeyGenerator; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    function generateKey(): JCSecretKey; overload; virtual; final;
    procedure init(para1: JSSAlgorithmParameterSpec); overload; virtual; final;  // throws java.security.InvalidAlgorithmParameterException
    procedure init(para1: JSSAlgorithmParameterSpec; para2: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidAlgorithmParameterException
    procedure init(para1: jint); overload; virtual; final;
    procedure init(para1: jint; para2: JSSecureRandom); overload; virtual; final;
    procedure init(para1: JSSecureRandom); overload; virtual; final;
  end;

  JCKeyGeneratorSpi = class abstract external 'javax.crypto' name 'KeyGeneratorSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function engineGenerateKey(): JCSecretKey; overload; virtual; abstract;
    procedure engineInit(para1: JSSAlgorithmParameterSpec; para2: JSSecureRandom); overload; virtual; abstract;  // throws java.security.InvalidAlgorithmParameterException
    procedure engineInit(para1: jint; para2: JSSecureRandom); overload; virtual; abstract;
    procedure engineInit(para1: JSSecureRandom); overload; virtual; abstract;
  end;

  JCMacSpi = class abstract external 'javax.crypto' name 'MacSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function engineGetMacLength(): jint; overload; virtual; abstract;
    procedure engineInit(para1: JSKey; para2: JSSAlgorithmParameterSpec); overload; virtual; abstract;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    procedure engineUpdate(para1: jbyte); overload; virtual; abstract;
    procedure engineUpdate(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; abstract;
    procedure engineUpdate(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; abstract;
    procedure engineUpdate(para1: JNByteBuffer); overload; virtual;
    function engineDoFinal(): Arr1jbyte; overload; virtual; abstract;
    procedure engineReset(); overload; virtual; abstract;
  public
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JCSecretKeyFactory = class external 'javax.crypto' name 'SecretKeyFactory' (JLObject)
  strict protected
    constructor create(para1: JCSecretKeyFactorySpi; para2: JSProvider; para3: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    class function getInstance(para1: JLString): JCSecretKeyFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JCSecretKeyFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JCSecretKeyFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    function generateSecret(para1: JSSKeySpec): JCSecretKey; overload; virtual; final;  // throws java.security.spec.InvalidKeySpecException
    function getKeySpec(para1: JCSecretKey; para2: JLClass): JSSKeySpec; overload; virtual; final;  // throws java.security.spec.InvalidKeySpecException
    function translateKey(para1: JCSecretKey): JCSecretKey; overload; virtual; final;  // throws java.security.InvalidKeyException
  end;

  JCSecretKeyFactorySpi = class abstract external 'javax.crypto' name 'SecretKeyFactorySpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function engineGenerateSecret(para1: JSSKeySpec): JCSecretKey; overload; virtual; abstract;  // throws java.security.spec.InvalidKeySpecException
    function engineGetKeySpec(para1: JCSecretKey; para2: JLClass): JSSKeySpec; overload; virtual; abstract;  // throws java.security.spec.InvalidKeySpecException
    function engineTranslateKey(para1: JCSecretKey): JCSecretKey; overload; virtual; abstract;  // throws java.security.InvalidKeyException
  end;

  JCIDHKey = interface external 'javax.crypto.interfaces' name 'DHKey' 
    function getParams(): JCSDHParameterSpec; overload;
  end;

  JCSPSource = class external 'javax.crypto.spec' name 'PSource' (JLObject)
  public
    type
      InnerPSpecified = class;
      Arr1InnerPSpecified = array of InnerPSpecified;
      Arr2InnerPSpecified = array of Arr1InnerPSpecified;
      Arr3InnerPSpecified = array of Arr2InnerPSpecified;
      InnerPSpecified = class sealed external 'javax.crypto.spec' name 'PSpecified' (JCSPSource)
      public
        final class var
          fDEFAULT: JCSPSource.InnerPSpecified; external name 'DEFAULT';
      public
        constructor create(para1: Arr1jbyte); overload;
        constructor create(const para1: array of jbyte); overload;
        function getValue(): Arr1jbyte; overload; virtual;
      end;

  strict protected
    constructor create(para1: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual;
  end;

  JMKEEGL = interface external 'javax.microedition.khronos.egl' name 'EGL' 
  end;

  JMKEEGLConfig = class abstract external 'javax.microedition.khronos.egl' name 'EGLConfig' (JLObject)
  public
    constructor create(); overload;
  end;

  JMKEEGLContext = class abstract external 'javax.microedition.khronos.egl' name 'EGLContext' (JLObject)
  public
    constructor create(); overload;
    class function getEGL(): JMKEEGL; static; overload;
    function getGL(): JMKOGL; overload; virtual; abstract;
  end;

  JMKEEGLDisplay = class abstract external 'javax.microedition.khronos.egl' name 'EGLDisplay' (JLObject)
  public
    constructor create(); overload;
  end;

  JMKEEGLSurface = class abstract external 'javax.microedition.khronos.egl' name 'EGLSurface' (JLObject)
  public
    constructor create(); overload;
  end;

  JMKOGL = interface external 'javax.microedition.khronos.opengles' name 'GL' 
  end;

  JNServerSocketFactory = class abstract external 'javax.net' name 'ServerSocketFactory' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function getDefault(): JNServerSocketFactory; static; overload;
    function createServerSocket(): JNServerSocket; overload; virtual;  // throws java.io.IOException
    function createServerSocket(para1: jint): JNServerSocket; overload; virtual; abstract;  // throws java.io.IOException
    function createServerSocket(para1: jint; para2: jint): JNServerSocket; overload; virtual; abstract;  // throws java.io.IOException
    function createServerSocket(para1: jint; para2: jint; para3: JNInetAddress): JNServerSocket; overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNSocketFactory = class abstract external 'javax.net' name 'SocketFactory' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function getDefault(): JNSocketFactory; static; overload;
    function createSocket(): JNSocket; overload; virtual;  // throws java.io.IOException
    function createSocket(para1: JLString; para2: jint): JNSocket; overload; virtual; abstract;  // throws java.io.IOException, java.net.UnknownHostException
    function createSocket(para1: JLString; para2: jint; para3: JNInetAddress; para4: jint): JNSocket; overload; virtual; abstract;  // throws java.io.IOException, java.net.UnknownHostException
    function createSocket(para1: JNInetAddress; para2: jint): JNSocket; overload; virtual; abstract;  // throws java.io.IOException
    function createSocket(para1: JNInetAddress; para2: jint; para3: JNInetAddress; para4: jint): JNSocket; overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNSHostnameVerifier = interface external 'javax.net.ssl' name 'HostnameVerifier' 
    function verify(para1: JLString; para2: JNSSSLSession): jboolean; overload;
  end;

  JNSKeyManager = interface external 'javax.net.ssl' name 'KeyManager' 
  end;

  JNSKeyManagerFactory = class external 'javax.net.ssl' name 'KeyManagerFactory' (JLObject)
  strict protected
    constructor create(para1: JNSKeyManagerFactorySpi; para2: JSProvider; para3: JLString); overload;
  public
    class function getDefaultAlgorithm(): JLString; static; overload; final;
    class function getInstance(para1: JLString): JNSKeyManagerFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JNSKeyManagerFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JNSKeyManagerFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    procedure init(para1: JSKeyStore; para2: Arr1jchar); overload; virtual; final;  // throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    procedure init(para1: JSKeyStore; var para2: array of jchar); overload; virtual; final;  // throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    procedure init(para1: JNSManagerFactoryParameters); overload; virtual; final;  // throws java.security.InvalidAlgorithmParameterException
    function getKeyManagers(): Arr1JNSKeyManager; overload; virtual; final;
  end;

  JNSKeyManagerFactorySpi = class abstract external 'javax.net.ssl' name 'KeyManagerFactorySpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure engineInit(para1: JSKeyStore; para2: Arr1jchar); overload; virtual; abstract;  // throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    procedure engineInit(para1: JSKeyStore; var para2: array of jchar); overload; virtual; abstract;  // throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    procedure engineInit(para1: JNSManagerFactoryParameters); overload; virtual; abstract;  // throws java.security.InvalidAlgorithmParameterException
    function engineGetKeyManagers(): Arr1JNSKeyManager; overload; virtual; abstract;
  end;

  JNSManagerFactoryParameters = interface external 'javax.net.ssl' name 'ManagerFactoryParameters' 
  end;

  JNSSSLContext = class external 'javax.net.ssl' name 'SSLContext' (JLObject)
  strict protected
    constructor create(para1: JNSSSLContextSpi; para2: JSProvider; para3: JLString); overload;
  public
    class function getDefault(): JNSSSLContext; static; overload;  // throws java.security.NoSuchAlgorithmException
    class procedure setDefault(para1: JNSSSLContext); static; overload;
    class function getInstance(para1: JLString): JNSSSLContext; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JNSSSLContext; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JNSSSLContext; static; overload;  // throws java.security.NoSuchAlgorithmException
    function getProtocol(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    procedure init(para1: Arr1JNSKeyManager; para2: Arr1JNSTrustManager; para3: JSSecureRandom); overload; virtual; final;  // throws java.security.KeyManagementException
    procedure init(var para1: array of JNSKeyManager; var para2: array of JNSTrustManager; para3: JSSecureRandom); overload; virtual; final;  // throws java.security.KeyManagementException
    function getSocketFactory(): JNSSSLSocketFactory; overload; virtual; final;
    function getServerSocketFactory(): JNSSSLServerSocketFactory; overload; virtual; final;
    function createSSLEngine(): JNSSSLEngine; overload; virtual; final;
    function createSSLEngine(para1: JLString; para2: jint): JNSSSLEngine; overload; virtual; final;
    function getServerSessionContext(): JNSSSLSessionContext; overload; virtual; final;
    function getClientSessionContext(): JNSSSLSessionContext; overload; virtual; final;
    function getDefaultSSLParameters(): JNSSSLParameters; overload; virtual; final;
    function getSupportedSSLParameters(): JNSSSLParameters; overload; virtual; final;
  end;

  JNSSSLContextSpi = class abstract external 'javax.net.ssl' name 'SSLContextSpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure engineInit(para1: Arr1JNSKeyManager; para2: Arr1JNSTrustManager; para3: JSSecureRandom); overload; virtual; abstract;  // throws java.security.KeyManagementException
    procedure engineInit(var para1: array of JNSKeyManager; var para2: array of JNSTrustManager; para3: JSSecureRandom); overload; virtual; abstract;  // throws java.security.KeyManagementException
    function engineGetSocketFactory(): JNSSSLSocketFactory; overload; virtual; abstract;
    function engineGetServerSocketFactory(): JNSSSLServerSocketFactory; overload; virtual; abstract;
    function engineCreateSSLEngine(para1: JLString; para2: jint): JNSSSLEngine; overload; virtual; abstract;
    function engineCreateSSLEngine(): JNSSSLEngine; overload; virtual; abstract;
    function engineGetServerSessionContext(): JNSSSLSessionContext; overload; virtual; abstract;
    function engineGetClientSessionContext(): JNSSSLSessionContext; overload; virtual; abstract;
    function engineGetDefaultSSLParameters(): JNSSSLParameters; overload; virtual;
    function engineGetSupportedSSLParameters(): JNSSSLParameters; overload; virtual;
  end;

  JNSSSLParameters = class external 'javax.net.ssl' name 'SSLParameters' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: Arr1JLString); overload;
    constructor create(const para1: array of JLString); overload;
    constructor create(para1: Arr1JLString; para2: Arr1JLString); overload;
    constructor create(const para1: array of JLString; const para2: array of JLString); overload;
    function getCipherSuites(): Arr1JLString; overload; virtual;
    procedure setCipherSuites(para1: Arr1JLString); overload; virtual;
    procedure setCipherSuites(var para1: array of JLString); overload; virtual;
    function getProtocols(): Arr1JLString; overload; virtual;
    procedure setProtocols(para1: Arr1JLString); overload; virtual;
    procedure setProtocols(var para1: array of JLString); overload; virtual;
    function getNeedClientAuth(): jboolean; overload; virtual;
    procedure setNeedClientAuth(para1: jboolean); overload; virtual;
    function getWantClientAuth(): jboolean; overload; virtual;
    procedure setWantClientAuth(para1: jboolean); overload; virtual;
  end;

  JNSSSLSession = interface external 'javax.net.ssl' name 'SSLSession' 
    function getApplicationBufferSize(): jint; overload;
    function getCipherSuite(): JLString; overload;
    function getCreationTime(): jlong; overload;
    function getId(): Arr1jbyte; overload;
    function getLastAccessedTime(): jlong; overload;
    function getLocalCertificates(): Arr1JSCCertificate; overload;
    function getLocalPrincipal(): JSPrincipal; overload;
    function getPacketBufferSize(): jint; overload;
    function getPeerCertificateChain(): Arr1JxSCX509Certificate; overload;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getPeerCertificates(): Arr1JSCCertificate; overload;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getPeerHost(): JLString; overload;
    function getPeerPort(): jint; overload;
    function getPeerPrincipal(): JSPrincipal; overload;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getProtocol(): JLString; overload;
    function getSessionContext(): JNSSSLSessionContext; overload;
    function getValue(para1: JLString): JLObject; overload;
    function getValueNames(): Arr1JLString; overload;
    procedure invalidate(); overload;
    function isValid(): jboolean; overload;
    procedure putValue(para1: JLString; para2: JLObject); overload;
    procedure removeValue(para1: JLString); overload;
  end;

  JNSSSLSessionContext = interface external 'javax.net.ssl' name 'SSLSessionContext' 
    function getIds(): JUEnumeration; overload;
    function getSession(para1: Arr1jbyte): JNSSSLSession; overload;
    function getSession(var para1: array of jbyte): JNSSSLSession; overload;
    function getSessionCacheSize(): jint; overload;
    function getSessionTimeout(): jint; overload;
    procedure setSessionCacheSize(para1: jint); overload;  // throws java.lang.IllegalArgumentException
    procedure setSessionTimeout(para1: jint); overload;  // throws java.lang.IllegalArgumentException
  end;

  JNSTrustManager = interface external 'javax.net.ssl' name 'TrustManager' 
  end;

  JNSTrustManagerFactory = class external 'javax.net.ssl' name 'TrustManagerFactory' (JLObject)
  strict protected
    constructor create(para1: JNSTrustManagerFactorySpi; para2: JSProvider; para3: JLString); overload;
  public
    class function getDefaultAlgorithm(): JLString; static; overload; final;
    class function getInstance(para1: JLString): JNSTrustManagerFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JNSTrustManagerFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JNSTrustManagerFactory; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    procedure init(para1: JSKeyStore); overload; virtual; final;  // throws java.security.KeyStoreException
    procedure init(para1: JNSManagerFactoryParameters); overload; virtual; final;  // throws java.security.InvalidAlgorithmParameterException
    function getTrustManagers(): Arr1JNSTrustManager; overload; virtual; final;
  end;

  JNSTrustManagerFactorySpi = class abstract external 'javax.net.ssl' name 'TrustManagerFactorySpi' (JLObject)
  public
    constructor create(); overload;
  strict protected
    procedure engineInit(para1: JSKeyStore); overload; virtual; abstract;  // throws java.security.KeyStoreException
    procedure engineInit(para1: JNSManagerFactoryParameters); overload; virtual; abstract;  // throws java.security.InvalidAlgorithmParameterException
    function engineGetTrustManagers(): Arr1JNSTrustManager; overload; virtual; abstract;
  end;

  JSADestroyable = interface external 'javax.security.auth' name 'Destroyable' 
    procedure destroy(); overload;  // throws javax.security.auth.DestroyFailedException
    function isDestroyed(): jboolean; overload;
  end;

  JSACCallback = interface external 'javax.security.auth.callback' name 'Callback' 
  end;

  JSACCallbackHandler = interface external 'javax.security.auth.callback' name 'CallbackHandler' 
    procedure handle(para1: Arr1JSACCallback); overload;  // throws java.io.IOException, javax.security.auth.callback.UnsupportedCallbackException
    procedure handle(var para1: array of JSACCallback); overload;  // throws java.io.IOException, javax.security.auth.callback.UnsupportedCallbackException
  end;

  JxSCCertificate = class abstract external 'javax.security.cert' name 'Certificate' (JLObject)
  public
    constructor create(); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function getEncoded(): Arr1jbyte; overload; virtual; abstract;  // throws javax.security.cert.CertificateEncodingException
    procedure verify(para1: JSPublicKey); overload; virtual; abstract;  // throws javax.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    procedure verify(para1: JSPublicKey; para2: JLString); overload; virtual; abstract;  // throws javax.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    function toString(): JLString; overload; virtual; abstract;
    function getPublicKey(): JSPublicKey; overload; virtual; abstract;
  end;

  JSCommonDataSource = interface external 'javax.sql' name 'CommonDataSource' 
    function getLoginTimeout(): jint; overload;  // throws java.sql.SQLException
    function getLogWriter(): JIPrintWriter; overload;  // throws java.sql.SQLException
    procedure setLoginTimeout(para1: jint); overload;  // throws java.sql.SQLException
    procedure setLogWriter(para1: JIPrintWriter); overload;  // throws java.sql.SQLException
  end;

  JSPooledConnection = interface external 'javax.sql' name 'PooledConnection' 
    procedure addConnectionEventListener(para1: JSConnectionEventListener); overload;
    procedure close(); overload;  // throws java.sql.SQLException
    function getConnection(): JSConnection; overload;  // throws java.sql.SQLException
    procedure removeConnectionEventListener(para1: JSConnectionEventListener); overload;
    procedure addStatementEventListener(para1: JSStatementEventListener); overload;
    procedure removeStatementEventListener(para1: JSStatementEventListener); overload;
  end;

  JSRowSetInternal = interface external 'javax.sql' name 'RowSetInternal' 
    function getConnection(): JSConnection; overload;  // throws java.sql.SQLException
    function getOriginal(): JSResultSet; overload;  // throws java.sql.SQLException
    function getOriginalRow(): JSResultSet; overload;  // throws java.sql.SQLException
    function getParams(): Arr1JLObject; overload;  // throws java.sql.SQLException
    procedure setMetaData(para1: JSRowSetMetaData); overload;  // throws java.sql.SQLException
  end;

  JSRowSetReader = interface external 'javax.sql' name 'RowSetReader' 
    procedure readData(para1: JSRowSetInternal); overload;  // throws java.sql.SQLException
  end;

  JSRowSetWriter = interface external 'javax.sql' name 'RowSetWriter' 
    function writeData(para1: JSRowSetInternal): jboolean; overload;  // throws java.sql.SQLException
  end;

  JXXMLConstants = class sealed external 'javax.xml' name 'XMLConstants' (JLObject)
  public
    const
      DEFAULT_NS_PREFIX = '';
      FEATURE_SECURE_PROCESSING = 'http://javax.xml.XMLConstants/feature/secure-processing';
      NULL_NS_URI = '';
      RELAXNG_NS_URI = 'http://relaxng.org/ns/structure/1.0';
      W3C_XML_SCHEMA_INSTANCE_NS_URI = 'http://www.w3.org/2001/XMLSchema-instance';
      W3C_XML_SCHEMA_NS_URI = 'http://www.w3.org/2001/XMLSchema';
      W3C_XPATH_DATATYPE_NS_URI = 'http://www.w3.org/2003/11/xpath-datatypes';
      XMLNS_ATTRIBUTE = 'xmlns';
      XMLNS_ATTRIBUTE_NS_URI = 'http://www.w3.org/2000/xmlns/';
      XML_DTD_NS_URI = 'http://www.w3.org/TR/REC-xml';
      XML_NS_PREFIX = 'xml';
      XML_NS_URI = 'http://www.w3.org/XML/1998/namespace';
  end;

  JXDDatatypeConstants = class sealed external 'javax.xml.datatype' name 'DatatypeConstants' (JLObject)
  public
    type
      InnerField = class;
      Arr1InnerField = array of InnerField;
      Arr2InnerField = array of Arr1InnerField;
      Arr3InnerField = array of Arr2InnerField;
      InnerField = class sealed external 'javax.xml.datatype' name 'Field' (JLObject)
      public
        function toString(): JLString; overload; virtual;
        function getId(): jint; overload; virtual;
      end;

  public
    const
      APRIL = 4;
      AUGUST = 8;
  public
    final class var
      fDATE: JXNQName; external name 'DATE';
      fDATETIME: JXNQName; external name 'DATETIME';
      fDAYS: JXDDatatypeConstants.InnerField; external name 'DAYS';
  public
    const
      DECEMBER = 12;
  public
    final class var
      fDURATION: JXNQName; external name 'DURATION';
      fDURATION_DAYTIME: JXNQName; external name 'DURATION_DAYTIME';
      fDURATION_YEARMONTH: JXNQName; external name 'DURATION_YEARMONTH';
  public
    const
      EQUAL = 0;
      FEBRUARY = 2;
      FIELD_UNDEFINED = -2147483648;
  public
    final class var
      fGDAY: JXNQName; external name 'GDAY';
      fGMONTH: JXNQName; external name 'GMONTH';
      fGMONTHDAY: JXNQName; external name 'GMONTHDAY';
  public
    const
      GREATER = 1;
  public
    final class var
      fGYEAR: JXNQName; external name 'GYEAR';
      fGYEARMONTH: JXNQName; external name 'GYEARMONTH';
      fHOURS: JXDDatatypeConstants.InnerField; external name 'HOURS';
  public
    const
      INDETERMINATE = 2;
      JANUARY = 1;
      JULY = 7;
      JUNE = 6;
      LESSER = -1;
      MARCH = 3;
      MAX_TIMEZONE_OFFSET = -840;
      MAY = 5;
  public
    final class var
      fMINUTES: JXDDatatypeConstants.InnerField; external name 'MINUTES';
  public
    const
      MIN_TIMEZONE_OFFSET = 840;
  public
    final class var
      fMONTHS: JXDDatatypeConstants.InnerField; external name 'MONTHS';
  public
    const
      NOVEMBER = 11;
      OCTOBER = 10;
  public
    final class var
      fSECONDS: JXDDatatypeConstants.InnerField; external name 'SECONDS';
  public
    const
      SEPTEMBER = 9;
  public
    final class var
      fTIME: JXNQName; external name 'TIME';
      fYEARS: JXDDatatypeConstants.InnerField; external name 'YEARS';
  end;

  JXDDatatypeFactory = class abstract external 'javax.xml.datatype' name 'DatatypeFactory' (JLObject)
  public
    final class var
      fDATATYPEFACTORY_IMPLEMENTATION_CLASS: JLString; external name 'DATATYPEFACTORY_IMPLEMENTATION_CLASS';
  public
    const
      DATATYPEFACTORY_PROPERTY = 'javax.xml.datatype.DatatypeFactory';
  strict protected
    constructor create(); overload;
  public
    class function newInstance(): JXDDatatypeFactory; static; overload;  // throws javax.xml.datatype.DatatypeConfigurationException
    class function newInstance(para1: JLString; para2: JLClassLoader): JXDDatatypeFactory; static; overload;  // throws javax.xml.datatype.DatatypeConfigurationException
    function newDuration(para1: JLString): JXDDuration; overload; virtual; abstract;
    function newDuration(para1: jlong): JXDDuration; overload; virtual; abstract;
    function newDuration(para1: jboolean; para2: JMBigInteger; para3: JMBigInteger; para4: JMBigInteger; para5: JMBigInteger; para6: JMBigInteger; para7: JMBigDecimal): JXDDuration; overload; virtual; abstract;
    function newDuration(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint): JXDDuration; overload; virtual;
    function newDurationDayTime(para1: JLString): JXDDuration; overload; virtual;
    function newDurationDayTime(para1: jlong): JXDDuration; overload; virtual;
    function newDurationDayTime(para1: jboolean; para2: JMBigInteger; para3: JMBigInteger; para4: JMBigInteger; para5: JMBigInteger): JXDDuration; overload; virtual;
    function newDurationDayTime(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint): JXDDuration; overload; virtual;
    function newDurationYearMonth(para1: JLString): JXDDuration; overload; virtual;
    function newDurationYearMonth(para1: jlong): JXDDuration; overload; virtual;
    function newDurationYearMonth(para1: jboolean; para2: JMBigInteger; para3: JMBigInteger): JXDDuration; overload; virtual;
    function newDurationYearMonth(para1: jboolean; para2: jint; para3: jint): JXDDuration; overload; virtual;
    function newXMLGregorianCalendar(): JXDXMLGregorianCalendar; overload; virtual; abstract;
    function newXMLGregorianCalendar(para1: JLString): JXDXMLGregorianCalendar; overload; virtual; abstract;
    function newXMLGregorianCalendar(para1: JUGregorianCalendar): JXDXMLGregorianCalendar; overload; virtual; abstract;
    function newXMLGregorianCalendar(para1: JMBigInteger; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: JMBigDecimal; para8: jint): JXDXMLGregorianCalendar; overload; virtual; abstract;
    function newXMLGregorianCalendar(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint): JXDXMLGregorianCalendar; overload; virtual;
    function newXMLGregorianCalendarDate(para1: jint; para2: jint; para3: jint; para4: jint): JXDXMLGregorianCalendar; overload; virtual;
    function newXMLGregorianCalendarTime(para1: jint; para2: jint; para3: jint; para4: jint): JXDXMLGregorianCalendar; overload; virtual;
    function newXMLGregorianCalendarTime(para1: jint; para2: jint; para3: jint; para4: JMBigDecimal; para5: jint): JXDXMLGregorianCalendar; overload; virtual;
    function newXMLGregorianCalendarTime(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint): JXDXMLGregorianCalendar; overload; virtual;
  end;

  JXNNamespaceContext = interface external 'javax.xml.namespace' name 'NamespaceContext' 
    function getNamespaceURI(para1: JLString): JLString; overload;
    function getPrefix(para1: JLString): JLString; overload;
    function getPrefixes(para1: JLString): JUIterator; overload;
  end;

  JXPDocumentBuilder = class abstract external 'javax.xml.parsers' name 'DocumentBuilder' (JLObject)
  strict protected
    constructor create(); overload;
  public
    procedure reset(); overload; virtual;
    function parse(para1: JIInputStream): OWDDocument; overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    function parse(para1: JIInputStream; para2: JLString): OWDDocument; overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    function parse(para1: JLString): OWDDocument; overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    function parse(para1: JIFile): OWDDocument; overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    function parse(para1: OXSInputSource): OWDDocument; overload; virtual; abstract;  // throws org.xml.sax.SAXException, java.io.IOException
    function isNamespaceAware(): jboolean; overload; virtual; abstract;
    function isValidating(): jboolean; overload; virtual; abstract;
    procedure setEntityResolver(para1: OXSEntityResolver); overload; virtual; abstract;
    procedure setErrorHandler(para1: OXSErrorHandler); overload; virtual; abstract;
    function newDocument(): OWDDocument; overload; virtual; abstract;
    function getDOMImplementation(): OWDDOMImplementation; overload; virtual; abstract;
    function getSchema(): JXVSchema; overload; virtual;
    function isXIncludeAware(): jboolean; overload; virtual;
  end;

  JXPDocumentBuilderFactory = class abstract external 'javax.xml.parsers' name 'DocumentBuilderFactory' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function newInstance(): JXPDocumentBuilderFactory; static; overload;
    class function newInstance(para1: JLString; para2: JLClassLoader): JXPDocumentBuilderFactory; static; overload;
    function newDocumentBuilder(): JXPDocumentBuilder; overload; virtual; abstract;  // throws javax.xml.parsers.ParserConfigurationException
    procedure setNamespaceAware(para1: jboolean); overload; virtual;
    procedure setValidating(para1: jboolean); overload; virtual;
    procedure setIgnoringElementContentWhitespace(para1: jboolean); overload; virtual;
    procedure setExpandEntityReferences(para1: jboolean); overload; virtual;
    procedure setIgnoringComments(para1: jboolean); overload; virtual;
    procedure setCoalescing(para1: jboolean); overload; virtual;
    function isNamespaceAware(): jboolean; overload; virtual;
    function isValidating(): jboolean; overload; virtual;
    function isIgnoringElementContentWhitespace(): jboolean; overload; virtual;
    function isExpandEntityReferences(): jboolean; overload; virtual;
    function isIgnoringComments(): jboolean; overload; virtual;
    function isCoalescing(): jboolean; overload; virtual;
    procedure setAttribute(para1: JLString; para2: JLObject); overload; virtual; abstract;  // throws java.lang.IllegalArgumentException
    function getAttribute(para1: JLString): JLObject; overload; virtual; abstract;  // throws java.lang.IllegalArgumentException
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual; abstract;  // throws javax.xml.parsers.ParserConfigurationException
    function getFeature(para1: JLString): jboolean; overload; virtual; abstract;  // throws javax.xml.parsers.ParserConfigurationException
    function getSchema(): JXVSchema; overload; virtual;
    procedure setSchema(para1: JXVSchema); overload; virtual;
    procedure setXIncludeAware(para1: jboolean); overload; virtual;
    function isXIncludeAware(): jboolean; overload; virtual;
  end;

  JXPSAXParser = class abstract external 'javax.xml.parsers' name 'SAXParser' (JLObject)
  strict protected
    constructor create(); overload;
  public
    procedure reset(); overload; virtual;
    procedure parse(para1: JIInputStream; para2: OXSHandlerBase); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JIInputStream; para2: OXSHandlerBase; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JIInputStream; para2: OXSHDefaultHandler); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JIInputStream; para2: OXSHDefaultHandler; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JLString; para2: OXSHandlerBase); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JLString; para2: OXSHDefaultHandler); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JIFile; para2: OXSHandlerBase); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JIFile; para2: OXSHDefaultHandler); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: OXSInputSource; para2: OXSHandlerBase); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: OXSInputSource; para2: OXSHDefaultHandler); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    function getParser(): OXSParser; overload; virtual; abstract;  // throws org.xml.sax.SAXException
    function getXMLReader(): OXSXMLReader; overload; virtual; abstract;  // throws org.xml.sax.SAXException
    function isNamespaceAware(): jboolean; overload; virtual; abstract;
    function isValidating(): jboolean; overload; virtual; abstract;
    procedure setProperty(para1: JLString; para2: JLObject); overload; virtual; abstract;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getProperty(para1: JLString): JLObject; overload; virtual; abstract;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getSchema(): JXVSchema; overload; virtual;
    function isXIncludeAware(): jboolean; overload; virtual;
  end;

  JXPSAXParserFactory = class abstract external 'javax.xml.parsers' name 'SAXParserFactory' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function newInstance(): JXPSAXParserFactory; static; overload;
    class function newInstance(para1: JLString; para2: JLClassLoader): JXPSAXParserFactory; static; overload;
    function newSAXParser(): JXPSAXParser; overload; virtual; abstract;  // throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException
    procedure setNamespaceAware(para1: jboolean); overload; virtual;
    procedure setValidating(para1: jboolean); overload; virtual;
    function isNamespaceAware(): jboolean; overload; virtual;
    function isValidating(): jboolean; overload; virtual;
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual; abstract;  // throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getFeature(para1: JLString): jboolean; overload; virtual; abstract;  // throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getSchema(): JXVSchema; overload; virtual;
    procedure setSchema(para1: JXVSchema); overload; virtual;
    procedure setXIncludeAware(para1: jboolean); overload; virtual;
    function isXIncludeAware(): jboolean; overload; virtual;
  end;

  JXTErrorListener = interface external 'javax.xml.transform' name 'ErrorListener' 
    procedure warning(para1: JXTTransformerException); overload;  // throws javax.xml.transform.TransformerException
    procedure error(para1: JXTTransformerException); overload;  // throws javax.xml.transform.TransformerException
    procedure fatalError(para1: JXTTransformerException); overload;  // throws javax.xml.transform.TransformerException
  end;

  JXTOutputKeys = class external 'javax.xml.transform' name 'OutputKeys' (JLObject)
  public
    const
      CDATA_SECTION_ELEMENTS = 'cdata-section-elements';
      DOCTYPE_PUBLIC = 'doctype-public';
      DOCTYPE_SYSTEM = 'doctype-system';
      ENCODING = 'encoding';
      INDENT = 'indent';
      MEDIA_TYPE = 'media-type';
      METHOD = 'method';
      OMIT_XML_DECLARATION = 'omit-xml-declaration';
      STANDALONE = 'standalone';
      VERSION = 'version';
  end;

  JXTResult = interface external 'javax.xml.transform' name 'Result' 
    const
      PI_DISABLE_OUTPUT_ESCAPING = 'javax.xml.transform.disable-output-escaping';
      PI_ENABLE_OUTPUT_ESCAPING = 'javax.xml.transform.enable-output-escaping';
    procedure setSystemId(para1: JLString); overload;
    function getSystemId(): JLString; overload;
  end;

  JXTSource = interface external 'javax.xml.transform' name 'Source' 
    procedure setSystemId(para1: JLString); overload;
    function getSystemId(): JLString; overload;
  end;

  JXTSourceLocator = interface external 'javax.xml.transform' name 'SourceLocator' 
    function getPublicId(): JLString; overload;
    function getSystemId(): JLString; overload;
    function getLineNumber(): jint; overload;
    function getColumnNumber(): jint; overload;
  end;

  JXTTemplates = interface external 'javax.xml.transform' name 'Templates' 
    function newTransformer(): JXTTransformer; overload;  // throws javax.xml.transform.TransformerConfigurationException
    function getOutputProperties(): JUProperties; overload;
  end;

  JXTTransformer = class abstract external 'javax.xml.transform' name 'Transformer' (JLObject)
  strict protected
    constructor create(); overload;
  public
    procedure reset(); overload; virtual;
    procedure transform(para1: JXTSource; para2: JXTResult); overload; virtual; abstract;  // throws javax.xml.transform.TransformerException
    procedure setParameter(para1: JLString; para2: JLObject); overload; virtual; abstract;
    function getParameter(para1: JLString): JLObject; overload; virtual; abstract;
    procedure clearParameters(); overload; virtual; abstract;
    procedure setURIResolver(para1: JXTURIResolver); overload; virtual; abstract;
    function getURIResolver(): JXTURIResolver; overload; virtual; abstract;
    procedure setOutputProperties(para1: JUProperties); overload; virtual; abstract;
    function getOutputProperties(): JUProperties; overload; virtual; abstract;
    procedure setOutputProperty(para1: JLString; para2: JLString); overload; virtual; abstract;  // throws java.lang.IllegalArgumentException
    function getOutputProperty(para1: JLString): JLString; overload; virtual; abstract;  // throws java.lang.IllegalArgumentException
    procedure setErrorListener(para1: JXTErrorListener); overload; virtual; abstract;  // throws java.lang.IllegalArgumentException
    function getErrorListener(): JXTErrorListener; overload; virtual; abstract;
  end;

  JXTTransformerFactory = class abstract external 'javax.xml.transform' name 'TransformerFactory' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function newInstance(): JXTTransformerFactory; static; overload;  // throws javax.xml.transform.TransformerFactoryConfigurationError
    class function newInstance(para1: JLString; para2: JLClassLoader): JXTTransformerFactory; static; overload;  // throws javax.xml.transform.TransformerFactoryConfigurationError
    function newTransformer(para1: JXTSource): JXTTransformer; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function newTransformer(): JXTTransformer; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function newTemplates(para1: JXTSource): JXTTemplates; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function getAssociatedStylesheet(para1: JXTSource; para2: JLString; para3: JLString; para4: JLString): JXTSource; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    procedure setURIResolver(para1: JXTURIResolver); overload; virtual; abstract;
    function getURIResolver(): JXTURIResolver; overload; virtual; abstract;
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function getFeature(para1: JLString): jboolean; overload; virtual; abstract;
    procedure setAttribute(para1: JLString; para2: JLObject); overload; virtual; abstract;
    function getAttribute(para1: JLString): JLObject; overload; virtual; abstract;
    procedure setErrorListener(para1: JXTErrorListener); overload; virtual; abstract;
    function getErrorListener(): JXTErrorListener; overload; virtual; abstract;
  end;

  JXTURIResolver = interface external 'javax.xml.transform' name 'URIResolver' 
    function resolve(para1: JLString; para2: JLString): JXTSource; overload;  // throws javax.xml.transform.TransformerException
  end;

  JXVSchema = class abstract external 'javax.xml.validation' name 'Schema' (JLObject)
  strict protected
    constructor create(); overload;
  public
    function newValidator(): JXVValidator; overload; virtual; abstract;
    function newValidatorHandler(): JXVValidatorHandler; overload; virtual; abstract;
  end;

  JXVSchemaFactory = class abstract external 'javax.xml.validation' name 'SchemaFactory' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class function newInstance(para1: JLString): JXVSchemaFactory; static; overload;
    class function newInstance(para1: JLString; para2: JLString; para3: JLClassLoader): JXVSchemaFactory; static; overload;
    function isSchemaLanguageSupported(para1: JLString): jboolean; overload; virtual; abstract;
    function getFeature(para1: JLString): jboolean; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setProperty(para1: JLString; para2: JLObject); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getProperty(para1: JLString): JLObject; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setErrorHandler(para1: OXSErrorHandler); overload; virtual; abstract;
    function getErrorHandler(): OXSErrorHandler; overload; virtual; abstract;
    procedure setResourceResolver(para1: OWDLLSResourceResolver); overload; virtual; abstract;
    function getResourceResolver(): OWDLLSResourceResolver; overload; virtual; abstract;
    function newSchema(para1: JXTSource): JXVSchema; overload; virtual;  // throws org.xml.sax.SAXException
    function newSchema(para1: JIFile): JXVSchema; overload; virtual;  // throws org.xml.sax.SAXException
    function newSchema(para1: JNURL): JXVSchema; overload; virtual;  // throws org.xml.sax.SAXException
    function newSchema(para1: Arr1JXTSource): JXVSchema; overload; virtual; abstract;  // throws org.xml.sax.SAXException
    function newSchema(var para1: array of JXTSource): JXVSchema; overload; virtual; abstract;  // throws org.xml.sax.SAXException
    function newSchema(): JXVSchema; overload; virtual; abstract;  // throws org.xml.sax.SAXException
  end;

  JXVSchemaFactoryLoader = class abstract external 'javax.xml.validation' name 'SchemaFactoryLoader' (JLObject)
  strict protected
    constructor create(); overload;
  public
    function newFactory(para1: JLString): JXVSchemaFactory; overload; virtual; abstract;
  end;

  JXVTypeInfoProvider = class abstract external 'javax.xml.validation' name 'TypeInfoProvider' (JLObject)
  strict protected
    constructor create(); overload;
  public
    function getElementTypeInfo(): OWDTypeInfo; overload; virtual; abstract;
    function getAttributeTypeInfo(para1: jint): OWDTypeInfo; overload; virtual; abstract;
    function isIdAttribute(para1: jint): jboolean; overload; virtual; abstract;
    function isSpecified(para1: jint): jboolean; overload; virtual; abstract;
  end;

  JXVValidator = class abstract external 'javax.xml.validation' name 'Validator' (JLObject)
  strict protected
    constructor create(); overload;
  public
    procedure reset(); overload; virtual; abstract;
    procedure validate(para1: JXTSource); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure validate(para1: JXTSource; para2: JXTResult); overload; virtual; abstract;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure setErrorHandler(para1: OXSErrorHandler); overload; virtual; abstract;
    function getErrorHandler(): OXSErrorHandler; overload; virtual; abstract;
    procedure setResourceResolver(para1: OWDLLSResourceResolver); overload; virtual; abstract;
    function getResourceResolver(): OWDLLSResourceResolver; overload; virtual; abstract;
    function getFeature(para1: JLString): jboolean; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setProperty(para1: JLString; para2: JLObject); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getProperty(para1: JLString): JLObject; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
  end;

  JXXXPath = interface external 'javax.xml.xpath' name 'XPath' 
    procedure reset(); overload;
    procedure setXPathVariableResolver(para1: JXXXPathVariableResolver); overload;
    function getXPathVariableResolver(): JXXXPathVariableResolver; overload;
    procedure setXPathFunctionResolver(para1: JXXXPathFunctionResolver); overload;
    function getXPathFunctionResolver(): JXXXPathFunctionResolver; overload;
    procedure setNamespaceContext(para1: JXNNamespaceContext); overload;
    function getNamespaceContext(): JXNNamespaceContext; overload;
    function compile(para1: JLString): JXXXPathExpression; overload;  // throws javax.xml.xpath.XPathExpressionException
    function evaluate(para1: JLString; para2: JLObject; para3: JXNQName): JLObject; overload;  // throws javax.xml.xpath.XPathExpressionException
    function evaluate(para1: JLString; para2: JLObject): JLString; overload;  // throws javax.xml.xpath.XPathExpressionException
    function evaluate(para1: JLString; para2: OXSInputSource; para3: JXNQName): JLObject; overload;  // throws javax.xml.xpath.XPathExpressionException
    function evaluate(para1: JLString; para2: OXSInputSource): JLString; overload;  // throws javax.xml.xpath.XPathExpressionException
  end;

  JXXXPathConstants = class external 'javax.xml.xpath' name 'XPathConstants' (JLObject)
  public
    final class var
      fBOOLEAN: JXNQName; external name 'BOOLEAN';
  public
    const
      DOM_OBJECT_MODEL = 'http://java.sun.com/jaxp/xpath/dom';
  public
    final class var
      fNODE: JXNQName; external name 'NODE';
      fNODESET: JXNQName; external name 'NODESET';
      fNUMBER: JXNQName; external name 'NUMBER';
      fSTRING: JXNQName; external name 'STRING';
  end;

  JXXXPathExpression = interface external 'javax.xml.xpath' name 'XPathExpression' 
    function evaluate(para1: JLObject; para2: JXNQName): JLObject; overload;  // throws javax.xml.xpath.XPathExpressionException
    function evaluate(para1: JLObject): JLString; overload;  // throws javax.xml.xpath.XPathExpressionException
    function evaluate(para1: OXSInputSource; para2: JXNQName): JLObject; overload;  // throws javax.xml.xpath.XPathExpressionException
    function evaluate(para1: OXSInputSource): JLString; overload;  // throws javax.xml.xpath.XPathExpressionException
  end;

  JXXXPathFactory = class abstract external 'javax.xml.xpath' name 'XPathFactory' (JLObject)
  public
    const
      DEFAULT_OBJECT_MODEL_URI = 'http://java.sun.com/jaxp/xpath/dom';
      DEFAULT_PROPERTY_NAME = 'javax.xml.xpath.XPathFactory';
  strict protected
    constructor create(); overload;
  public
    class function newInstance(): JXXXPathFactory; static; overload; final;
    class function newInstance(para1: JLString): JXXXPathFactory; static; overload; final;  // throws javax.xml.xpath.XPathFactoryConfigurationException
    class function newInstance(para1: JLString; para2: JLString; para3: JLClassLoader): JXXXPathFactory; static; overload;  // throws javax.xml.xpath.XPathFactoryConfigurationException
    function isObjectModelSupported(para1: JLString): jboolean; overload; virtual; abstract;
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual; abstract;  // throws javax.xml.xpath.XPathFactoryConfigurationException
    function getFeature(para1: JLString): jboolean; overload; virtual; abstract;  // throws javax.xml.xpath.XPathFactoryConfigurationException
    procedure setXPathVariableResolver(para1: JXXXPathVariableResolver); overload; virtual; abstract;
    procedure setXPathFunctionResolver(para1: JXXXPathFunctionResolver); overload; virtual; abstract;
    function newXPath(): JXXXPath; overload; virtual; abstract;
  end;

  JXXXPathFunction = interface external 'javax.xml.xpath' name 'XPathFunction' 
    function evaluate(para1: JUList): JLObject; overload;  // throws javax.xml.xpath.XPathFunctionException
  end;

  JXXXPathFunctionResolver = interface external 'javax.xml.xpath' name 'XPathFunctionResolver' 
    function resolveFunction(para1: JXNQName; para2: jint): JXXXPathFunction; overload;
  end;

  JXXXPathVariableResolver = interface external 'javax.xml.xpath' name 'XPathVariableResolver' 
    function resolveVariable(para1: JXNQName): JLObject; overload;
  end;

  JFAssert = class external 'junit.framework' name 'Assert' (JLObject)
  strict protected
    constructor create(); overload;
  public
    class procedure assertTrue(para1: JLString; para2: jboolean); static; overload;
    class procedure assertTrue(para1: jboolean); static; overload;
    class procedure assertFalse(para1: JLString; para2: jboolean); static; overload;
    class procedure assertFalse(para1: jboolean); static; overload;
    class procedure fail(para1: JLString); static; overload;
    class procedure fail(); static; overload;
    class procedure assertEquals(para1: JLString; para2: JLObject; para3: JLObject); static; overload;
    class procedure assertEquals(para1: JLObject; para2: JLObject); static; overload;
    class procedure assertEquals(para1: JLString; para2: JLString; para3: JLString); static; overload;
    class procedure assertEquals(para1: JLString; para2: JLString); static; overload;
    class procedure assertEquals(para1: JLString; para2: jdouble; para3: jdouble; para4: jdouble); static; overload;
    class procedure assertEquals(para1: jdouble; para2: jdouble; para3: jdouble); static; overload;
    class procedure assertEquals(para1: JLString; para2: jfloat; para3: jfloat; para4: jfloat); static; overload;
    class procedure assertEquals(para1: jfloat; para2: jfloat; para3: jfloat); static; overload;
    class procedure assertEquals(para1: JLString; para2: jlong; para3: jlong); static; overload;
    class procedure assertEquals(para1: jlong; para2: jlong); static; overload;
    class procedure assertEquals(para1: JLString; para2: jboolean; para3: jboolean); static; overload;
    class procedure assertEquals(para1: jboolean; para2: jboolean); static; overload;
    class procedure assertEquals(para1: JLString; para2: jbyte; para3: jbyte); static; overload;
    class procedure assertEquals(para1: jbyte; para2: jbyte); static; overload;
    class procedure assertEquals(para1: JLString; para2: jchar; para3: jchar); static; overload;
    class procedure assertEquals(para1: jchar; para2: jchar); static; overload;
    class procedure assertEquals(para1: JLString; para2: jshort; para3: jshort); static; overload;
    class procedure assertEquals(para1: jshort; para2: jshort); static; overload;
    class procedure assertEquals(para1: JLString; para2: jint; para3: jint); static; overload;
    class procedure assertEquals(para1: jint; para2: jint); static; overload;
    class procedure assertNotNull(para1: JLObject); static; overload;
    class procedure assertNotNull(para1: JLString; para2: JLObject); static; overload;
    class procedure assertNull(para1: JLObject); static; overload;
    class procedure assertNull(para1: JLString; para2: JLObject); static; overload;
    class procedure assertSame(para1: JLString; para2: JLObject; para3: JLObject); static; overload;
    class procedure assertSame(para1: JLObject; para2: JLObject); static; overload;
    class procedure assertNotSame(para1: JLString; para2: JLObject; para3: JLObject); static; overload;
    class procedure assertNotSame(para1: JLObject; para2: JLObject); static; overload;
    class procedure failSame(para1: JLString); static; overload;
    class procedure failNotSame(para1: JLString; para2: JLObject; para3: JLObject); static; overload;
    class procedure failNotEquals(para1: JLString; para2: JLObject; para3: JLObject); static; overload;
    class function format(para1: JLString; para2: JLObject; para3: JLObject): JLString; static; overload;
  end;

  JFProtectable = interface external 'junit.framework' name 'Protectable' 
    procedure protect(); overload;  // throws java.lang.Throwable
  end;

  JFTest = interface external 'junit.framework' name 'Test' 
    function countTestCases(): jint; overload;
    procedure run(para1: JFTestResult); overload;
  end;

  JFTestFailure = class external 'junit.framework' name 'TestFailure' (JLObject)
  strict protected
    var
      ffFailedTest: JFTest; external name 'fFailedTest';
      ffThrownException: JLThrowable; external name 'fThrownException';
  public
    constructor create(para1: JFTest; para2: JLThrowable); overload;
    function failedTest(): JFTest; overload; virtual;
    function thrownException(): JLThrowable; overload; virtual;
    function toString(): JLString; overload; virtual;
    function trace(): JLString; overload; virtual;
    function exceptionMessage(): JLString; overload; virtual;
    function isFailure(): jboolean; overload; virtual;
  end;

  JFTestListener = interface external 'junit.framework' name 'TestListener' 
    procedure addError(para1: JFTest; para2: JLThrowable); overload;
    procedure addFailure(para1: JFTest; para2: JFAssertionFailedError); overload;
    procedure endTest(para1: JFTest); overload;
    procedure startTest(para1: JFTest); overload;
  end;

  JFTestResult = class external 'junit.framework' name 'TestResult' (JLObject)
  strict protected
    var
      ffErrors: JUVector; external name 'fErrors';
      ffFailures: JUVector; external name 'fFailures';
      ffListeners: JUVector; external name 'fListeners';
      ffRunTests: jint; external name 'fRunTests';
  public
    constructor create(); overload;
    procedure addError(para1: JFTest; para2: JLThrowable); overload; virtual;
    procedure addFailure(para1: JFTest; para2: JFAssertionFailedError); overload; virtual;
    procedure addListener(para1: JFTestListener); overload; virtual;
    procedure removeListener(para1: JFTestListener); overload; virtual;
    procedure endTest(para1: JFTest); overload; virtual;
    function errorCount(): jint; overload; virtual;
    function errors(): JUEnumeration; overload; virtual;
    function failureCount(): jint; overload; virtual;
    function failures(): JUEnumeration; overload; virtual;
  strict protected
    procedure run(para1: JFTestCase); overload; virtual;
  public
    function runCount(): jint; overload; virtual;
    procedure runProtected(para1: JFTest; para2: JFProtectable); overload; virtual;
    function shouldStop(): jboolean; overload; virtual;
    procedure startTest(para1: JFTest); overload; virtual;
    procedure stop(); overload; virtual;
    function wasSuccessful(): jboolean; overload; virtual;
  end;

  JRTestSuiteLoader = interface external 'junit.runner' name 'TestSuiteLoader' 
    function load(para1: JLString): JLClass; overload;  // throws java.lang.ClassNotFoundException
    function reload(para1: JLClass): JLClass; overload;  // throws java.lang.ClassNotFoundException
  end;

  JRVersion = class external 'junit.runner' name 'Version' (JLObject)
  public
    class function id(): JLString; static; overload;
  end;

  OACLLog = interface external 'org.apache.commons.logging' name 'Log' 
    function isDebugEnabled(): jboolean; overload;
    function isErrorEnabled(): jboolean; overload;
    function isFatalEnabled(): jboolean; overload;
    function isInfoEnabled(): jboolean; overload;
    function isTraceEnabled(): jboolean; overload;
    function isWarnEnabled(): jboolean; overload;
    procedure trace(para1: JLObject); overload;
    procedure trace(para1: JLObject; para2: JLThrowable); overload;
    procedure debug(para1: JLObject); overload;
    procedure debug(para1: JLObject; para2: JLThrowable); overload;
    procedure info(para1: JLObject); overload;
    procedure info(para1: JLObject; para2: JLThrowable); overload;
    procedure warn(para1: JLObject); overload;
    procedure warn(para1: JLObject; para2: JLThrowable); overload;
    procedure error(para1: JLObject); overload;
    procedure error(para1: JLObject; para2: JLThrowable); overload;
    procedure fatal(para1: JLObject); overload;
    procedure fatal(para1: JLObject; para2: JLThrowable); overload;
  end;

  OAHConnectionReuseStrategy = interface external 'org.apache.http' name 'ConnectionReuseStrategy' 
    function keepAlive(para1: OAHHttpResponse; para2: OAHPHttpContext): jboolean; overload;
  end;

  OAHHeader = interface external 'org.apache.http' name 'Header' 
    function getName(): JLString; overload;
    function getValue(): JLString; overload;
    function getElements(): Arr1OAHHeaderElement; overload;  // throws org.apache.http.ParseException
  end;

  OAHHeaderElement = interface external 'org.apache.http' name 'HeaderElement' 
    function getName(): JLString; overload;
    function getValue(): JLString; overload;
    function getParameters(): Arr1OAHNameValuePair; overload;
    function getParameterByName(para1: JLString): OAHNameValuePair; overload;
    function getParameterCount(): jint; overload;
    function getParameter(para1: jint): OAHNameValuePair; overload;
  end;

  OAHHttpConnection = interface external 'org.apache.http' name 'HttpConnection' 
    procedure close(); overload;  // throws java.io.IOException
    function isOpen(): jboolean; overload;
    function isStale(): jboolean; overload;
    procedure setSocketTimeout(para1: jint); overload;
    function getSocketTimeout(): jint; overload;
    procedure shutdown(); overload;  // throws java.io.IOException
    function getMetrics(): OAHHttpConnectionMetrics; overload;
  end;

  OAHHttpConnectionMetrics = interface external 'org.apache.http' name 'HttpConnectionMetrics' 
    function getRequestCount(): jlong; overload;
    function getResponseCount(): jlong; overload;
    function getSentBytesCount(): jlong; overload;
    function getReceivedBytesCount(): jlong; overload;
    function getMetric(para1: JLString): JLObject; overload;
    procedure reset(); overload;
  end;

  OAHHttpEntity = interface external 'org.apache.http' name 'HttpEntity' 
    function isRepeatable(): jboolean; overload;
    function isChunked(): jboolean; overload;
    function getContentLength(): jlong; overload;
    function getContentType(): OAHHeader; overload;
    function getContentEncoding(): OAHHeader; overload;
    function getContent(): JIInputStream; overload;  // throws java.io.IOException, java.lang.IllegalStateException
    procedure writeTo(para1: JIOutputStream); overload;  // throws java.io.IOException
    function isStreaming(): jboolean; overload;
    procedure consumeContent(); overload;  // throws java.io.IOException
  end;

  OAHHttpMessage = interface external 'org.apache.http' name 'HttpMessage' 
    function getProtocolVersion(): OAHProtocolVersion; overload;
    function containsHeader(para1: JLString): jboolean; overload;
    function getHeaders(para1: JLString): Arr1OAHHeader; overload;
    function getFirstHeader(para1: JLString): OAHHeader; overload;
    function getLastHeader(para1: JLString): OAHHeader; overload;
    function getAllHeaders(): Arr1OAHHeader; overload;
    procedure addHeader(para1: OAHHeader); overload;
    procedure addHeader(para1: JLString; para2: JLString); overload;
    procedure setHeader(para1: OAHHeader); overload;
    procedure setHeader(para1: JLString; para2: JLString); overload;
    procedure setHeaders(para1: Arr1OAHHeader); overload;
    procedure setHeaders(var para1: array of OAHHeader); overload;
    procedure removeHeader(para1: OAHHeader); overload;
    procedure removeHeaders(para1: JLString); overload;
    function headerIterator(): OAHHeaderIterator; overload;
    function headerIterator(para1: JLString): OAHHeaderIterator; overload;
    function getParams(): OAHPHttpParams; overload;
    procedure setParams(para1: OAHPHttpParams); overload;
  end;

  OAHHttpRequestFactory = interface external 'org.apache.http' name 'HttpRequestFactory' 
    function newHttpRequest(para1: OAHRequestLine): OAHHttpRequest; overload;  // throws org.apache.http.MethodNotSupportedException
    function newHttpRequest(para1: JLString; para2: JLString): OAHHttpRequest; overload;  // throws org.apache.http.MethodNotSupportedException
  end;

  OAHHttpRequestInterceptor = interface external 'org.apache.http' name 'HttpRequestInterceptor' 
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHHttpResponseFactory = interface external 'org.apache.http' name 'HttpResponseFactory' 
    function newHttpResponse(para1: OAHProtocolVersion; para2: jint; para3: OAHPHttpContext): OAHHttpResponse; overload;
    function newHttpResponse(para1: OAHStatusLine; para2: OAHPHttpContext): OAHHttpResponse; overload;
  end;

  OAHHttpResponseInterceptor = interface external 'org.apache.http' name 'HttpResponseInterceptor' 
    procedure process(para1: OAHHttpResponse; para2: OAHPHttpContext); overload;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHHttpStatus = interface external 'org.apache.http' name 'HttpStatus' 
    const
      SC_ACCEPTED = 202;
      SC_BAD_GATEWAY = 502;
      SC_BAD_REQUEST = 400;
      SC_CONFLICT = 409;
      SC_CONTINUE = 100;
      SC_CREATED = 201;
      SC_EXPECTATION_FAILED = 417;
      SC_FAILED_DEPENDENCY = 424;
      SC_FORBIDDEN = 403;
      SC_GATEWAY_TIMEOUT = 504;
      SC_GONE = 410;
      SC_HTTP_VERSION_NOT_SUPPORTED = 505;
      SC_INSUFFICIENT_SPACE_ON_RESOURCE = 419;
      SC_INSUFFICIENT_STORAGE = 507;
      SC_INTERNAL_SERVER_ERROR = 500;
      SC_LENGTH_REQUIRED = 411;
      SC_LOCKED = 423;
      SC_METHOD_FAILURE = 420;
      SC_METHOD_NOT_ALLOWED = 405;
      SC_MOVED_PERMANENTLY = 301;
      SC_MOVED_TEMPORARILY = 302;
      SC_MULTIPLE_CHOICES = 300;
      SC_MULTI_STATUS = 207;
      SC_NON_AUTHORITATIVE_INFORMATION = 203;
      SC_NOT_ACCEPTABLE = 406;
      SC_NOT_FOUND = 404;
      SC_NOT_IMPLEMENTED = 501;
      SC_NOT_MODIFIED = 304;
      SC_NO_CONTENT = 204;
      SC_OK = 200;
      SC_PARTIAL_CONTENT = 206;
      SC_PAYMENT_REQUIRED = 402;
      SC_PRECONDITION_FAILED = 412;
      SC_PROCESSING = 102;
      SC_PROXY_AUTHENTICATION_REQUIRED = 407;
      SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
      SC_REQUEST_TIMEOUT = 408;
      SC_REQUEST_TOO_LONG = 413;
      SC_REQUEST_URI_TOO_LONG = 414;
      SC_RESET_CONTENT = 205;
      SC_SEE_OTHER = 303;
      SC_SERVICE_UNAVAILABLE = 503;
      SC_SWITCHING_PROTOCOLS = 101;
      SC_TEMPORARY_REDIRECT = 307;
      SC_UNAUTHORIZED = 401;
      SC_UNPROCESSABLE_ENTITY = 422;
      SC_UNSUPPORTED_MEDIA_TYPE = 415;
      SC_USE_PROXY = 305;
  end;

  OAHNameValuePair = interface external 'org.apache.http' name 'NameValuePair' 
    function getName(): JLString; overload;
    function getValue(): JLString; overload;
  end;

  OAHReasonPhraseCatalog = interface external 'org.apache.http' name 'ReasonPhraseCatalog' 
    function getReason(para1: jint; para2: JULocale): JLString; overload;
  end;

  OAHRequestLine = interface external 'org.apache.http' name 'RequestLine' 
    function getMethod(): JLString; overload;
    function getProtocolVersion(): OAHProtocolVersion; overload;
    function getUri(): JLString; overload;
  end;

  OAHStatusLine = interface external 'org.apache.http' name 'StatusLine' 
    function getProtocolVersion(): OAHProtocolVersion; overload;
    function getStatusCode(): jint; overload;
    function getReasonPhrase(): JLString; overload;
  end;

  OAHAAUTH = class sealed external 'org.apache.http.auth' name 'AUTH' (JLObject)
  public
    const
      PROXY_AUTH = 'Proxy-Authenticate';
      PROXY_AUTH_RESP = 'Proxy-Authorization';
      WWW_AUTH = 'WWW-Authenticate';
      WWW_AUTH_RESP = 'Authorization';
  end;

  OAHAAuthScheme = interface external 'org.apache.http.auth' name 'AuthScheme' 
    procedure processChallenge(para1: OAHHeader); overload;  // throws org.apache.http.auth.MalformedChallengeException
    function getSchemeName(): JLString; overload;
    function getParameter(para1: JLString): JLString; overload;
    function getRealm(): JLString; overload;
    function isConnectionBased(): jboolean; overload;
    function isComplete(): jboolean; overload;
    function authenticate(para1: OAHACredentials; para2: OAHHttpRequest): OAHHeader; overload;  // throws org.apache.http.auth.AuthenticationException
  end;

  OAHAAuthSchemeFactory = interface external 'org.apache.http.auth' name 'AuthSchemeFactory' 
    function newInstance(para1: OAHPHttpParams): OAHAAuthScheme; overload;
  end;

  OAHAAuthSchemeRegistry = class sealed external 'org.apache.http.auth' name 'AuthSchemeRegistry' (JLObject)
  public
    constructor create(); overload;
    procedure register(para1: JLString; para2: OAHAAuthSchemeFactory); overload; virtual;
    procedure unregister(para1: JLString); overload; virtual;
    function getAuthScheme(para1: JLString; para2: OAHPHttpParams): OAHAAuthScheme; overload; virtual;  // throws java.lang.IllegalStateException
    function getSchemeNames(): JUList; overload; virtual;
    procedure setItems(para1: JUMap); overload; virtual;
  end;

  OAHAAuthScope = class external 'org.apache.http.auth' name 'AuthScope' (JLObject)
  public
    final class var
      fANY: OAHAAuthScope; external name 'ANY';
      fANY_HOST: JLString; external name 'ANY_HOST';
  public
    const
      ANY_PORT = -1;
  public
    final class var
      fANY_REALM: JLString; external name 'ANY_REALM';
      fANY_SCHEME: JLString; external name 'ANY_SCHEME';
  public
    constructor create(para1: JLString; para2: jint; para3: JLString; para4: JLString); overload;
    constructor create(para1: JLString; para2: jint; para3: JLString); overload;
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: OAHAAuthScope); overload;
    function getHost(): JLString; overload; virtual;
    function getPort(): jint; overload; virtual;
    function getRealm(): JLString; overload; virtual;
    function getScheme(): JLString; overload; virtual;
    function match(para1: OAHAAuthScope): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  OAHAAuthState = class external 'org.apache.http.auth' name 'AuthState' (JLObject)
  public
    constructor create(); overload;
    procedure invalidate(); overload; virtual;
    function isValid(): jboolean; overload; virtual;
    procedure setAuthScheme(para1: OAHAAuthScheme); overload; virtual;
    function getAuthScheme(): OAHAAuthScheme; overload; virtual;
    function getCredentials(): OAHACredentials; overload; virtual;
    procedure setCredentials(para1: OAHACredentials); overload; virtual;
    function getAuthScope(): OAHAAuthScope; overload; virtual;
    procedure setAuthScope(para1: OAHAAuthScope); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OAHACredentials = interface external 'org.apache.http.auth' name 'Credentials' 
    function getUserPrincipal(): JSPrincipal; overload;
    function getPassword(): JLString; overload;
  end;

  OAHAPAuthPNames = interface external 'org.apache.http.auth.params' name 'AuthPNames' 
    const
      CREDENTIAL_CHARSET = 'http.auth.credential-charset';
  end;

  OAHAPAuthParams = class sealed external 'org.apache.http.auth.params' name 'AuthParams' (JLObject)
  public
    class function getCredentialCharset(para1: OAHPHttpParams): JLString; static; overload;
    class procedure setCredentialCharset(para1: OAHPHttpParams; para2: JLString); static; overload;
  end;

  OAHCAuthenticationHandler = interface external 'org.apache.http.client' name 'AuthenticationHandler' 
    function isAuthenticationRequested(para1: OAHHttpResponse; para2: OAHPHttpContext): jboolean; overload;
    function getChallenges(para1: OAHHttpResponse; para2: OAHPHttpContext): JUMap; overload;  // throws org.apache.http.auth.MalformedChallengeException
    function selectScheme(para1: JUMap; para2: OAHHttpResponse; para3: OAHPHttpContext): OAHAAuthScheme; overload;  // throws org.apache.http.auth.AuthenticationException
  end;

  OAHCCookieStore = interface external 'org.apache.http.client' name 'CookieStore' 
    procedure addCookie(para1: OAHCCookie); overload;
    function getCookies(): JUList; overload;
    function clearExpired(para1: JUDate): jboolean; overload;
    procedure clear(); overload;
  end;

  OAHCCredentialsProvider = interface external 'org.apache.http.client' name 'CredentialsProvider' 
    procedure setCredentials(para1: OAHAAuthScope; para2: OAHACredentials); overload;
    function getCredentials(para1: OAHAAuthScope): OAHACredentials; overload;
    procedure clear(); overload;
  end;

  OAHCHttpClient = interface external 'org.apache.http.client' name 'HttpClient' 
    function getParams(): OAHPHttpParams; overload;
    function getConnectionManager(): OAHCClientConnectionManager; overload;
    function execute(para1: OAHCMHttpUriRequest): OAHHttpResponse; overload;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHCMHttpUriRequest; para2: OAHPHttpContext): OAHHttpResponse; overload;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest): OAHHttpResponse; overload;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHHttpResponse; overload;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHCMHttpUriRequest; para2: OAHCResponseHandler): JLObject; overload;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHCMHttpUriRequest; para2: OAHCResponseHandler; para3: OAHPHttpContext): JLObject; overload;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHCResponseHandler): JLObject; overload;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHCResponseHandler; para4: OAHPHttpContext): JLObject; overload;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
  end;

  OAHCHttpRequestRetryHandler = interface external 'org.apache.http.client' name 'HttpRequestRetryHandler' 
    function retryRequest(para1: JIIOException; para2: jint; para3: OAHPHttpContext): jboolean; overload;
  end;

  OAHCRedirectHandler = interface external 'org.apache.http.client' name 'RedirectHandler' 
    function isRedirectRequested(para1: OAHHttpResponse; para2: OAHPHttpContext): jboolean; overload;
    function getLocationURI(para1: OAHHttpResponse; para2: OAHPHttpContext): JNURI; overload;  // throws org.apache.http.ProtocolException
  end;

  OAHCRequestDirector = interface external 'org.apache.http.client' name 'RequestDirector' 
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHHttpResponse; overload;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHCResponseHandler = interface external 'org.apache.http.client' name 'ResponseHandler' 
    function handleResponse(para1: OAHHttpResponse): JLObject; overload;  // throws org.apache.http.client.ClientProtocolException, java.io.IOException
  end;

  OAHCUserTokenHandler = interface external 'org.apache.http.client' name 'UserTokenHandler' 
    function getUserToken(para1: OAHPHttpContext): JLObject; overload;
  end;

  OAHCMAbortableHttpRequest = interface external 'org.apache.http.client.methods' name 'AbortableHttpRequest' 
    procedure setConnectionRequest(para1: OAHCClientConnectionRequest); overload;  // throws java.io.IOException
    procedure setReleaseTrigger(para1: OAHCConnectionReleaseTrigger); overload;  // throws java.io.IOException
    procedure abort(); overload;
  end;

  OAHCPAuthPolicy = class sealed external 'org.apache.http.client.params' name 'AuthPolicy' (JLObject)
  public
    const
      BASIC = 'Basic';
      DIGEST = 'Digest';
      NTLM = 'NTLM';
  end;

  OAHCPClientPNames = interface external 'org.apache.http.client.params' name 'ClientPNames' 
    const
      ALLOW_CIRCULAR_REDIRECTS = 'http.protocol.allow-circular-redirects';
      CONNECTION_MANAGER_FACTORY = 'http.connection-manager.factory-object';
      CONNECTION_MANAGER_FACTORY_CLASS_NAME = 'http.connection-manager.factory-class-name';
      COOKIE_POLICY = 'http.protocol.cookie-policy';
      DEFAULT_HEADERS = 'http.default-headers';
      DEFAULT_HOST = 'http.default-host';
      HANDLE_AUTHENTICATION = 'http.protocol.handle-authentication';
      HANDLE_REDIRECTS = 'http.protocol.handle-redirects';
      MAX_REDIRECTS = 'http.protocol.max-redirects';
      REJECT_RELATIVE_REDIRECT = 'http.protocol.reject-relative-redirect';
      VIRTUAL_HOST = 'http.virtual-host';
  end;

  OAHCPCookiePolicy = class sealed external 'org.apache.http.client.params' name 'CookiePolicy' (JLObject)
  public
    const
      BEST_MATCH = 'best-match';
      BROWSER_COMPATIBILITY = 'compatibility';
      NETSCAPE = 'netscape';
      RFC_2109 = 'rfc2109';
      RFC_2965 = 'rfc2965';
  end;

  OAHCPHttpClientParams = class external 'org.apache.http.client.params' name 'HttpClientParams' (JLObject)
  public
    class function isRedirecting(para1: OAHPHttpParams): jboolean; static; overload;
    class procedure setRedirecting(para1: OAHPHttpParams; para2: jboolean); static; overload;
    class function isAuthenticating(para1: OAHPHttpParams): jboolean; static; overload;
    class procedure setAuthenticating(para1: OAHPHttpParams; para2: jboolean); static; overload;
    class function getCookiePolicy(para1: OAHPHttpParams): JLString; static; overload;
    class procedure setCookiePolicy(para1: OAHPHttpParams; para2: JLString); static; overload;
  end;

  OAHCPClientContext = interface external 'org.apache.http.client.protocol' name 'ClientContext' 
    const
      AUTHSCHEME_REGISTRY = 'http.authscheme-registry';
      AUTH_SCHEME_PREF = 'http.auth.scheme-pref';
      COOKIESPEC_REGISTRY = 'http.cookiespec-registry';
      COOKIE_ORIGIN = 'http.cookie-origin';
      COOKIE_SPEC = 'http.cookie-spec';
      COOKIE_STORE = 'http.cookie-store';
      CREDS_PROVIDER = 'http.auth.credentials-provider';
      PROXY_AUTH_STATE = 'http.auth.proxy-scope';
      TARGET_AUTH_STATE = 'http.auth.target-scope';
      USER_TOKEN = 'http.user-token';
  end;

  OAHCUCloneUtils = class external 'org.apache.http.client.utils' name 'CloneUtils' (JLObject)
  public
    class function clone(para1: JLObject): JLObject; static; overload;  // throws java.lang.CloneNotSupportedException
  end;

  OAHCUURIUtils = class external 'org.apache.http.client.utils' name 'URIUtils' (JLObject)
  public
    class function createURI(para1: JLString; para2: JLString; para3: jint; para4: JLString; para5: JLString; para6: JLString): JNURI; static; overload;  // throws java.net.URISyntaxException
    class function rewriteURI(para1: JNURI; para2: OAHHttpHost; para3: jboolean): JNURI; static; overload;  // throws java.net.URISyntaxException
    class function rewriteURI(para1: JNURI; para2: OAHHttpHost): JNURI; static; overload;  // throws java.net.URISyntaxException
    class function resolve(para1: JNURI; para2: JLString): JNURI; static; overload;
    class function resolve(para1: JNURI; para2: JNURI): JNURI; static; overload;
  end;

  OAHCUURLEncodedUtils = class external 'org.apache.http.client.utils' name 'URLEncodedUtils' (JLObject)
  public
    const
      CONTENT_TYPE = 'application/x-www-form-urlencoded';
  public
    constructor create(); overload;
    class function parse(para1: JNURI; para2: JLString): JUList; static; overload;
    class function parse(para1: OAHHttpEntity): JUList; static; overload;  // throws java.io.IOException
    class function isEncoded(para1: OAHHttpEntity): jboolean; static; overload;
    class procedure parse(para1: JUList; para2: JUScanner; para3: JLString); static; overload;
    class function format(para1: JUList; para2: JLString): JLString; static; overload;
  end;

  OAHCClientConnectionManager = interface external 'org.apache.http.conn' name 'ClientConnectionManager' 
    function getSchemeRegistry(): OAHCSSchemeRegistry; overload;
    function requestConnection(para1: OAHCRHttpRoute; para2: JLObject): OAHCClientConnectionRequest; overload;
    procedure releaseConnection(para1: OAHCManagedClientConnection; para2: jlong; para3: JUCTimeUnit); overload;
    procedure closeIdleConnections(para1: jlong; para2: JUCTimeUnit); overload;
    procedure closeExpiredConnections(); overload;
    procedure shutdown(); overload;
  end;

  OAHCClientConnectionManagerFactory = interface external 'org.apache.http.conn' name 'ClientConnectionManagerFactory' 
    function newInstance(para1: OAHPHttpParams; para2: OAHCSSchemeRegistry): OAHCClientConnectionManager; overload;
  end;

  OAHCClientConnectionOperator = interface external 'org.apache.http.conn' name 'ClientConnectionOperator' 
    function createConnection(): OAHCOperatedClientConnection; overload;
    procedure openConnection(para1: OAHCOperatedClientConnection; para2: OAHHttpHost; para3: JNInetAddress; para4: OAHPHttpContext; para5: OAHPHttpParams); overload;  // throws java.io.IOException
    procedure updateSecureConnection(para1: OAHCOperatedClientConnection; para2: OAHHttpHost; para3: OAHPHttpContext; para4: OAHPHttpParams); overload;  // throws java.io.IOException
  end;

  OAHCClientConnectionRequest = interface external 'org.apache.http.conn' name 'ClientConnectionRequest' 
    function getConnection(para1: jlong; para2: JUCTimeUnit): OAHCManagedClientConnection; overload;  // throws java.lang.InterruptedException, org.apache.http.conn.ConnectionPoolTimeoutException
    procedure abortRequest(); overload;
  end;

  OAHCConnectionKeepAliveStrategy = interface external 'org.apache.http.conn' name 'ConnectionKeepAliveStrategy' 
    function getKeepAliveDuration(para1: OAHHttpResponse; para2: OAHPHttpContext): jlong; overload;
  end;

  OAHCConnectionReleaseTrigger = interface external 'org.apache.http.conn' name 'ConnectionReleaseTrigger' 
    procedure releaseConnection(); overload;  // throws java.io.IOException
    procedure abortConnection(); overload;  // throws java.io.IOException
  end;

  OAHCEofSensorWatcher = interface external 'org.apache.http.conn' name 'EofSensorWatcher' 
    function eofDetected(para1: JIInputStream): jboolean; overload;  // throws java.io.IOException
    function streamClosed(para1: JIInputStream): jboolean; overload;  // throws java.io.IOException
    function streamAbort(para1: JIInputStream): jboolean; overload;  // throws java.io.IOException
  end;

  OAHCPConnConnectionPNames = interface external 'org.apache.http.conn.params' name 'ConnConnectionPNames' 
    const
      MAX_STATUS_LINE_GARBAGE = 'http.connection.max-status-line-garbage';
  end;

  OAHCPConnManagerPNames = interface external 'org.apache.http.conn.params' name 'ConnManagerPNames' 
    const
      MAX_CONNECTIONS_PER_ROUTE = 'http.conn-manager.max-per-route';
      MAX_TOTAL_CONNECTIONS = 'http.conn-manager.max-total';
      TIMEOUT = 'http.conn-manager.timeout';
  end;

  OAHCPConnPerRoute = interface external 'org.apache.http.conn.params' name 'ConnPerRoute' 
    function getMaxForRoute(para1: OAHCRHttpRoute): jint; overload;
  end;

  OAHCPConnRoutePNames = interface external 'org.apache.http.conn.params' name 'ConnRoutePNames' 
    const
      DEFAULT_PROXY = 'http.route.default-proxy';
      FORCED_ROUTE = 'http.route.forced-route';
      LOCAL_ADDRESS = 'http.route.local-address';
  end;

  OAHCRHttpRouteDirector = interface external 'org.apache.http.conn.routing' name 'HttpRouteDirector' 
    const
      COMPLETE = 0;
      CONNECT_PROXY = 2;
      CONNECT_TARGET = 1;
      LAYER_PROTOCOL = 5;
      TUNNEL_PROXY = 4;
      TUNNEL_TARGET = 3;
      UNREACHABLE = -1;
    function nextStep(para1: OAHCRRouteInfo; para2: OAHCRRouteInfo): jint; overload;
  end;

  OAHCRHttpRoutePlanner = interface external 'org.apache.http.conn.routing' name 'HttpRoutePlanner' 
    function determineRoute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHCRHttpRoute; overload;  // throws org.apache.http.HttpException
  end;

  OAHCSHostNameResolver = interface external 'org.apache.http.conn.scheme' name 'HostNameResolver' 
    function resolve(para1: JLString): JNInetAddress; overload;  // throws java.io.IOException
  end;

  OAHCSScheme = class sealed external 'org.apache.http.conn.scheme' name 'Scheme' (JLObject)
  public
    constructor create(para1: JLString; para2: OAHCSSocketFactory; para3: jint); overload;
    function getDefaultPort(): jint; overload; virtual; final;
    function getSocketFactory(): OAHCSSocketFactory; overload; virtual; final;
    function getName(): JLString; overload; virtual; final;
    function isLayered(): jboolean; overload; virtual; final;
    function resolvePort(para1: jint): jint; overload; virtual; final;
    function toString(): JLString; overload; virtual; final;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual;
  end;

  OAHCSSchemeRegistry = class sealed external 'org.apache.http.conn.scheme' name 'SchemeRegistry' (JLObject)
  public
    constructor create(); overload;
    function getScheme(para1: JLString): OAHCSScheme; overload; virtual; final;
    function getScheme(para1: OAHHttpHost): OAHCSScheme; overload; virtual; final;
    function get(para1: JLString): OAHCSScheme; overload; virtual; final;
    function register(para1: OAHCSScheme): OAHCSScheme; overload; virtual; final;
    function unregister(para1: JLString): OAHCSScheme; overload; virtual; final;
    function getSchemeNames(): JUList; overload; virtual; final;
    procedure setItems(para1: JUMap); overload; virtual;
  end;

  OAHCSSocketFactory = interface external 'org.apache.http.conn.scheme' name 'SocketFactory' 
    function createSocket(): JNSocket; overload;  // throws java.io.IOException
    function connectSocket(para1: JNSocket; para2: JLString; para3: jint; para4: JNInetAddress; para5: jint; para6: OAHPHttpParams): JNSocket; overload;  // throws java.io.IOException, java.net.UnknownHostException, org.apache.http.conn.ConnectTimeoutException
    function isSecure(para1: JNSocket): jboolean; overload;  // throws java.lang.IllegalArgumentException
  end;

  OAHCUInetAddressUtils = class external 'org.apache.http.conn.util' name 'InetAddressUtils' (JLObject)
  public
    class function isIPv4Address(para1: JLString): jboolean; static; overload;
    class function isIPv6StdAddress(para1: JLString): jboolean; static; overload;
    class function isIPv6HexCompressedAddress(para1: JLString): jboolean; static; overload;
    class function isIPv6Address(para1: JLString): jboolean; static; overload;
  end;

  OAHCCookie = interface external 'org.apache.http.cookie' name 'Cookie' 
    function getName(): JLString; overload;
    function getValue(): JLString; overload;
    function getComment(): JLString; overload;
    function getCommentURL(): JLString; overload;
    function getExpiryDate(): JUDate; overload;
    function isPersistent(): jboolean; overload;
    function getDomain(): JLString; overload;
    function getPath(): JLString; overload;
    function getPorts(): Arr1jint; overload;
    function isSecure(): jboolean; overload;
    function getVersion(): jint; overload;
    function isExpired(para1: JUDate): jboolean; overload;
  end;

  OAHCCookieAttributeHandler = interface external 'org.apache.http.cookie' name 'CookieAttributeHandler' 
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload;
  end;

  OAHCCookieOrigin = class sealed external 'org.apache.http.cookie' name 'CookieOrigin' (JLObject)
  public
    constructor create(para1: JLString; para2: jint; para3: JLString; para4: jboolean); overload;
    function getHost(): JLString; overload; virtual;
    function getPath(): JLString; overload; virtual;
    function getPort(): jint; overload; virtual;
    function isSecure(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OAHCCookieSpec = interface external 'org.apache.http.cookie' name 'CookieSpec' 
    function getVersion(): jint; overload;
    function parse(para1: OAHHeader; para2: OAHCCookieOrigin): JUList; overload;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload;
    function formatCookies(para1: JUList): JUList; overload;
    function getVersionHeader(): OAHHeader; overload;
  end;

  OAHCCookieSpecFactory = interface external 'org.apache.http.cookie' name 'CookieSpecFactory' 
    function newInstance(para1: OAHPHttpParams): OAHCCookieSpec; overload;
  end;

  OAHCCookieSpecRegistry = class sealed external 'org.apache.http.cookie' name 'CookieSpecRegistry' (JLObject)
  public
    constructor create(); overload;
    procedure register(para1: JLString; para2: OAHCCookieSpecFactory); overload; virtual;
    procedure unregister(para1: JLString); overload; virtual;
    function getCookieSpec(para1: JLString; para2: OAHPHttpParams): OAHCCookieSpec; overload; virtual;  // throws java.lang.IllegalStateException
    function getCookieSpec(para1: JLString): OAHCCookieSpec; overload; virtual;  // throws java.lang.IllegalStateException
    function getSpecNames(): JUList; overload; virtual;
    procedure setItems(para1: JUMap); overload; virtual;
  end;

  OAHCSM = interface external 'org.apache.http.cookie' name 'SM' 
    const
      COOKIE = 'Cookie';
      COOKIE2 = 'Cookie2';
      SET_COOKIE = 'Set-Cookie';
      SET_COOKIE2 = 'Set-Cookie2';
  end;

  OAHCPCookieSpecPNames = interface external 'org.apache.http.cookie.params' name 'CookieSpecPNames' 
    const
      DATE_PATTERNS = 'http.protocol.cookie-datepatterns';
      SINGLE_COOKIE_HEADER = 'http.protocol.single-cookie-header';
  end;

  OAHEContentLengthStrategy = interface external 'org.apache.http.entity' name 'ContentLengthStrategy' 
    const
      CHUNKED = -2;
      IDENTITY = -1;
    function determineLength(para1: OAHHttpMessage): jlong; overload;  // throws org.apache.http.HttpException
  end;

  OAHEContentProducer = interface external 'org.apache.http.entity' name 'ContentProducer' 
    procedure writeTo(para1: JIOutputStream); overload;  // throws java.io.IOException
  end;

  OAHIANTLMEngine = interface external 'org.apache.http.impl.auth' name 'NTLMEngine' 
    function generateType1Msg(para1: JLString; para2: JLString): JLString; overload;  // throws org.apache.http.impl.auth.NTLMEngineException
    function generateType3Msg(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString): JLString; overload;  // throws org.apache.http.impl.auth.NTLMEngineException
  end;

  OAHICRedirectLocations = class external 'org.apache.http.impl.client' name 'RedirectLocations' (JLObject)
  public
    constructor create(); overload;
    function contains(para1: JNURI): jboolean; overload; virtual;
    procedure add(para1: JNURI); overload; virtual;
    function remove(para1: JNURI): jboolean; overload; virtual;
  end;

  OAHICRoutedRequest = class external 'org.apache.http.impl.client' name 'RoutedRequest' (JLObject)
  strict protected
    final var
      frequest: OAHICRequestWrapper; external name 'request';
      froute: OAHCRHttpRoute; external name 'route';
  public
    constructor create(para1: OAHICRequestWrapper; para2: OAHCRHttpRoute); overload;
    function getRequest(): OAHICRequestWrapper; overload; virtual; final;
    function getRoute(): OAHCRHttpRoute; overload; virtual; final;
  end;

  OAHICAbstractPoolEntry = class abstract external 'org.apache.http.impl.conn' name 'AbstractPoolEntry' (JLObject)
  strict protected
    final var
      fconnOperator: OAHCClientConnectionOperator; external name 'connOperator';
      fconnection: OAHCOperatedClientConnection; external name 'connection';
  strict protected
    var
      froute: OAHCRHttpRoute; external name 'route';
      fstate: JLObject; external name 'state';
      ftracker: OAHCRRouteTracker; external name 'tracker';
  strict protected
    constructor create(para1: OAHCClientConnectionOperator; para2: OAHCRHttpRoute); overload;
  public
    function getState(): JLObject; overload; virtual;
    procedure setState(para1: JLObject); overload; virtual;
    procedure open(para1: OAHCRHttpRoute; para2: OAHPHttpContext; para3: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure tunnelTarget(para1: jboolean; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure tunnelProxy(para1: OAHHttpHost; para2: jboolean; para3: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure layerProtocol(para1: OAHPHttpContext; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure shutdownEntry(); overload; virtual;
  end;

  OAHICIdleConnectionHandler = class external 'org.apache.http.impl.conn' name 'IdleConnectionHandler' (JLObject)
  public
    constructor create(); overload;
    procedure add(para1: OAHHttpConnection; para2: jlong; para3: JUCTimeUnit); overload; virtual;
    function remove(para1: OAHHttpConnection): jboolean; overload; virtual;
    procedure removeAll(); overload; virtual;
    procedure closeIdleConnections(para1: jlong); overload; virtual;
    procedure closeExpiredConnections(); overload; virtual;
  end;

  OAHICWire = class external 'org.apache.http.impl.conn' name 'Wire' (JLObject)
  public
    constructor create(para1: OACLLog); overload;
    function enabled(): jboolean; overload; virtual;
    procedure output(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    procedure input(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    procedure output(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure output(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure input(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure input(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure output(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure output(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure input(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure input(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure output(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure input(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure output(para1: JLString); overload; virtual;  // throws java.io.IOException
    procedure input(para1: JLString); overload; virtual;  // throws java.io.IOException
  end;

  OAHICTPoolEntryRequest = interface external 'org.apache.http.impl.conn.tsccm' name 'PoolEntryRequest' 
    function getPoolEntry(para1: jlong; para2: JUCTimeUnit): OAHICTBasicPoolEntry; overload;  // throws java.lang.InterruptedException, org.apache.http.conn.ConnectionPoolTimeoutException
    procedure abortRequest(); overload;
  end;

  OAHICTRefQueueHandler = interface external 'org.apache.http.impl.conn.tsccm' name 'RefQueueHandler' 
    procedure handleReference(para1: JLRReference); overload;
  end;

  OAHICTRouteSpecificPool = class external 'org.apache.http.impl.conn.tsccm' name 'RouteSpecificPool' (JLObject)
  strict protected
    final var
      ffreeEntries: JULinkedList; external name 'freeEntries';
      fmaxEntries: jint; external name 'maxEntries';
  strict protected
    var
      fnumEntries: jint; external name 'numEntries';
  strict protected
    final var
      froute: OAHCRHttpRoute; external name 'route';
      fwaitingThreads: JUQueue; external name 'waitingThreads';
  public
    constructor create(para1: OAHCRHttpRoute; para2: jint); overload;
    function getRoute(): OAHCRHttpRoute; overload; virtual; final;
    function getMaxEntries(): jint; overload; virtual; final;
    function isUnused(): jboolean; overload; virtual;
    function getCapacity(): jint; overload; virtual;
    function getEntryCount(): jint; overload; virtual; final;
    function allocEntry(para1: JLObject): OAHICTBasicPoolEntry; overload; virtual;
    procedure freeEntry(para1: OAHICTBasicPoolEntry); overload; virtual;
    procedure createdEntry(para1: OAHICTBasicPoolEntry); overload; virtual;
    function deleteEntry(para1: OAHICTBasicPoolEntry): jboolean; overload; virtual;
    procedure dropEntry(); overload; virtual;
    procedure queueThread(para1: OAHICTWaitingThread); overload; virtual;
    function hasThread(): jboolean; overload; virtual;
    function nextThread(): OAHICTWaitingThread; overload; virtual;
    procedure removeThread(para1: OAHICTWaitingThread); overload; virtual;
  end;

  OAHICTWaitingThread = class external 'org.apache.http.impl.conn.tsccm' name 'WaitingThread' (JLObject)
  public
    constructor create(para1: JUCLCondition; para2: OAHICTRouteSpecificPool); overload;
    function getCondition(): JUCLCondition; overload; virtual; final;
    function getPool(): OAHICTRouteSpecificPool; overload; virtual; final;
    function getThread(): JLThread; overload; virtual; final;
    function await(para1: JUDate): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    procedure wakeup(); overload; virtual;
    procedure interrupt(); overload; virtual;
  end;

  OAHICTWaitingThreadAborter = class external 'org.apache.http.impl.conn.tsccm' name 'WaitingThreadAborter' (JLObject)
  public
    constructor create(); overload;
    procedure abort(); overload; virtual;
    procedure setWaitingThread(para1: OAHICTWaitingThread); overload; virtual;
  end;

  OAHICDateUtils = class sealed external 'org.apache.http.impl.cookie' name 'DateUtils' (JLObject)
  public
    final class var
      fGMT: JUTimeZone; external name 'GMT';
  public
    const
      PATTERN_ASCTIME = 'EEE MMM d HH:mm:ss yyyy';
      PATTERN_RFC1036 = 'EEEE, dd-MMM-yy HH:mm:ss zzz';
      PATTERN_RFC1123 = 'EEE, dd MMM yyyy HH:mm:ss zzz';
  public
    class function parseDate(para1: JLString): JUDate; static; overload;  // throws org.apache.http.impl.cookie.DateParseException
    class function parseDate(para1: JLString; para2: Arr1JLString): JUDate; static; overload;  // throws org.apache.http.impl.cookie.DateParseException
    class function parseDate(para1: JLString; var para2: array of JLString): JUDate; static; overload;  // throws org.apache.http.impl.cookie.DateParseException
    class function parseDate(para1: JLString; para2: Arr1JLString; para3: JUDate): JUDate; static; overload;  // throws org.apache.http.impl.cookie.DateParseException
    class function parseDate(para1: JLString; var para2: array of JLString; para3: JUDate): JUDate; static; overload;  // throws org.apache.http.impl.cookie.DateParseException
    class function formatDate(para1: JUDate): JLString; static; overload;
    class function formatDate(para1: JUDate; para2: JLString): JLString; static; overload;
  end;

  OAHICNetscapeDraftHeaderParser = class external 'org.apache.http.impl.cookie' name 'NetscapeDraftHeaderParser' (JLObject)
  public
    final class var
      fDEFAULT: OAHICNetscapeDraftHeaderParser; external name 'DEFAULT';
  public
    constructor create(); overload;
    function parseHeader(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHHeaderElement; overload; virtual;  // throws org.apache.http.ParseException
  end;

  OAHIEEntityDeserializer = class external 'org.apache.http.impl.entity' name 'EntityDeserializer' (JLObject)
  public
    constructor create(para1: OAHEContentLengthStrategy); overload;
  strict protected
    function doDeserialize(para1: OAHISessionInputBuffer; para2: OAHHttpMessage): OAHEBasicHttpEntity; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  public
    function deserialize(para1: OAHISessionInputBuffer; para2: OAHHttpMessage): OAHHttpEntity; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHIEEntitySerializer = class external 'org.apache.http.impl.entity' name 'EntitySerializer' (JLObject)
  public
    constructor create(para1: OAHEContentLengthStrategy); overload;
  strict protected
    function doSerialize(para1: OAHISessionOutputBuffer; para2: OAHHttpMessage): JIOutputStream; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  public
    procedure serialize(para1: OAHISessionOutputBuffer; para2: OAHHttpMessage; para3: OAHHttpEntity); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHIHttpMessageParser = interface external 'org.apache.http.io' name 'HttpMessageParser' 
    function parse(): OAHHttpMessage; overload;  // throws java.io.IOException, org.apache.http.HttpException
  end;

  OAHIHttpMessageWriter = interface external 'org.apache.http.io' name 'HttpMessageWriter' 
    procedure write(para1: OAHHttpMessage); overload;  // throws java.io.IOException, org.apache.http.HttpException
  end;

  OAHIHttpTransportMetrics = interface external 'org.apache.http.io' name 'HttpTransportMetrics' 
    function getBytesTransferred(): jlong; overload;
    procedure reset(); overload;
  end;

  OAHISessionInputBuffer = interface external 'org.apache.http.io' name 'SessionInputBuffer' 
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload;  // throws java.io.IOException
    function read(): jint; overload;  // throws java.io.IOException
    function readLine(para1: OAHUCharArrayBuffer): jint; overload;  // throws java.io.IOException
    function readLine(): JLString; overload;  // throws java.io.IOException
    function isDataAvailable(para1: jint): jboolean; overload;  // throws java.io.IOException
    function getMetrics(): OAHIHttpTransportMetrics; overload;
  end;

  OAHISessionOutputBuffer = interface external 'org.apache.http.io' name 'SessionOutputBuffer' 
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload;  // throws java.io.IOException
    procedure write(para1: jint); overload;  // throws java.io.IOException
    procedure writeLine(para1: JLString); overload;  // throws java.io.IOException
    procedure writeLine(para1: OAHUCharArrayBuffer); overload;  // throws java.io.IOException
    procedure flush(); overload;  // throws java.io.IOException
    function getMetrics(): OAHIHttpTransportMetrics; overload;
  end;

  OAHMHeaderValueFormatter = interface external 'org.apache.http.message' name 'HeaderValueFormatter' 
    function formatElements(para1: OAHUCharArrayBuffer; para2: Arr1OAHHeaderElement; para3: jboolean): OAHUCharArrayBuffer; overload;
    function formatElements(para1: OAHUCharArrayBuffer; var para2: array of OAHHeaderElement; para3: jboolean): OAHUCharArrayBuffer; overload;
    function formatHeaderElement(para1: OAHUCharArrayBuffer; para2: OAHHeaderElement; para3: jboolean): OAHUCharArrayBuffer; overload;
    function formatParameters(para1: OAHUCharArrayBuffer; para2: Arr1OAHNameValuePair; para3: jboolean): OAHUCharArrayBuffer; overload;
    function formatParameters(para1: OAHUCharArrayBuffer; var para2: array of OAHNameValuePair; para3: jboolean): OAHUCharArrayBuffer; overload;
    function formatNameValuePair(para1: OAHUCharArrayBuffer; para2: OAHNameValuePair; para3: jboolean): OAHUCharArrayBuffer; overload;
  end;

  OAHMHeaderValueParser = interface external 'org.apache.http.message' name 'HeaderValueParser' 
    function parseElements(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): Arr1OAHHeaderElement; overload;  // throws org.apache.http.ParseException
    function parseHeaderElement(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHHeaderElement; overload;  // throws org.apache.http.ParseException
    function parseParameters(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): Arr1OAHNameValuePair; overload;  // throws org.apache.http.ParseException
    function parseNameValuePair(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHNameValuePair; overload;  // throws org.apache.http.ParseException
  end;

  OAHMLineFormatter = interface external 'org.apache.http.message' name 'LineFormatter' 
    function appendProtocolVersion(para1: OAHUCharArrayBuffer; para2: OAHProtocolVersion): OAHUCharArrayBuffer; overload;
    function formatRequestLine(para1: OAHUCharArrayBuffer; para2: OAHRequestLine): OAHUCharArrayBuffer; overload;
    function formatStatusLine(para1: OAHUCharArrayBuffer; para2: OAHStatusLine): OAHUCharArrayBuffer; overload;
    function formatHeader(para1: OAHUCharArrayBuffer; para2: OAHHeader): OAHUCharArrayBuffer; overload;
  end;

  OAHMLineParser = interface external 'org.apache.http.message' name 'LineParser' 
    function parseProtocolVersion(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHProtocolVersion; overload;  // throws org.apache.http.ParseException
    function hasProtocolVersion(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): jboolean; overload;
    function parseRequestLine(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHRequestLine; overload;  // throws org.apache.http.ParseException
    function parseStatusLine(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHStatusLine; overload;  // throws org.apache.http.ParseException
    function parseHeader(para1: OAHUCharArrayBuffer): OAHHeader; overload;  // throws org.apache.http.ParseException
  end;

  OAHMParserCursor = class external 'org.apache.http.message' name 'ParserCursor' (JLObject)
  public
    constructor create(para1: jint; para2: jint); overload;
    function getLowerBound(): jint; overload; virtual;
    function getUpperBound(): jint; overload; virtual;
    function getPos(): jint; overload; virtual;
    procedure updatePos(para1: jint); overload; virtual;
    function atEnd(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OAHPCoreConnectionPNames = interface external 'org.apache.http.params' name 'CoreConnectionPNames' 
    const
      CONNECTION_TIMEOUT = 'http.connection.timeout';
      MAX_HEADER_COUNT = 'http.connection.max-header-count';
      MAX_LINE_LENGTH = 'http.connection.max-line-length';
      SOCKET_BUFFER_SIZE = 'http.socket.buffer-size';
      SO_LINGER = 'http.socket.linger';
      SO_TIMEOUT = 'http.socket.timeout';
      STALE_CONNECTION_CHECK = 'http.connection.stalecheck';
      TCP_NODELAY = 'http.tcp.nodelay';
  end;

  OAHPCoreProtocolPNames = interface external 'org.apache.http.params' name 'CoreProtocolPNames' 
    const
      HTTP_CONTENT_CHARSET = 'http.protocol.content-charset';
      HTTP_ELEMENT_CHARSET = 'http.protocol.element-charset';
      ORIGIN_SERVER = 'http.origin-server';
      PROTOCOL_VERSION = 'http.protocol.version';
      STRICT_TRANSFER_ENCODING = 'http.protocol.strict-transfer-encoding';
      USER_AGENT = 'http.useragent';
      USE_EXPECT_CONTINUE = 'http.protocol.expect-continue';
      WAIT_FOR_CONTINUE = 'http.protocol.wait-for-continue';
  end;

  OAHPHttpAbstractParamBean = class abstract external 'org.apache.http.params' name 'HttpAbstractParamBean' (JLObject)
  strict protected
    final var
      fparams: OAHPHttpParams; external name 'params';
  public
    constructor create(para1: OAHPHttpParams); overload;
  end;

  OAHPHttpParams = interface external 'org.apache.http.params' name 'HttpParams' 
    function getParameter(para1: JLString): JLObject; overload;
    function setParameter(para1: JLString; para2: JLObject): OAHPHttpParams; overload;
    function copy(): OAHPHttpParams; overload;
    function removeParameter(para1: JLString): jboolean; overload;
    function getLongParameter(para1: JLString; para2: jlong): jlong; overload;
    function setLongParameter(para1: JLString; para2: jlong): OAHPHttpParams; overload;
    function getIntParameter(para1: JLString; para2: jint): jint; overload;
    function setIntParameter(para1: JLString; para2: jint): OAHPHttpParams; overload;
    function getDoubleParameter(para1: JLString; para2: jdouble): jdouble; overload;
    function setDoubleParameter(para1: JLString; para2: jdouble): OAHPHttpParams; overload;
    function getBooleanParameter(para1: JLString; para2: jboolean): jboolean; overload;
    function setBooleanParameter(para1: JLString; para2: jboolean): OAHPHttpParams; overload;
    function isParameterTrue(para1: JLString): jboolean; overload;
    function isParameterFalse(para1: JLString): jboolean; overload;
  end;

  OAHPExecutionContext = interface external 'org.apache.http.protocol' name 'ExecutionContext' 
    const
      HTTP_CONNECTION = 'http.connection';
      HTTP_PROXY_HOST = 'http.proxy_host';
      HTTP_REQUEST = 'http.request';
      HTTP_REQ_SENT = 'http.request_sent';
      HTTP_RESPONSE = 'http.response';
      HTTP_TARGET_HOST = 'http.target_host';
  end;

  OAHPHTTP = class sealed external 'org.apache.http.protocol' name 'HTTP' (JLObject)
  public
    const
      ASCII = 'ASCII';
      CHARSET_PARAM = '; charset=';
      CHUNK_CODING = 'chunked';
      CONN_CLOSE = 'Close';
      CONN_DIRECTIVE = 'Connection';
      CONN_KEEP_ALIVE = 'Keep-Alive';
      CONTENT_ENCODING = 'Content-Encoding';
      CONTENT_LEN = 'Content-Length';
      CONTENT_TYPE = 'Content-Type';
      CR = 13;
      DATE_HEADER = 'Date';
      DEFAULT_CONTENT_CHARSET = 'ISO-8859-1';
      DEFAULT_CONTENT_TYPE = 'application/octet-stream';
      DEFAULT_PROTOCOL_CHARSET = 'US-ASCII';
      EXPECT_CONTINUE = '100-continue';
      EXPECT_DIRECTIVE = 'Expect';
      HT = 9;
      IDENTITY_CODING = 'identity';
      ISO_8859_1 = 'ISO-8859-1';
      LF = 10;
      OCTET_STREAM_TYPE = 'application/octet-stream';
      PLAIN_TEXT_TYPE = 'text/plain';
      SERVER_HEADER = 'Server';
      SP = 32;
      TARGET_HOST = 'Host';
      TRANSFER_ENCODING = 'Transfer-Encoding';
      USER_AGENT = 'User-Agent';
      US_ASCII = 'US-ASCII';
      UTF_16 = 'UTF-16';
      UTF_8 = 'UTF-8';
  public
    class function isWhitespace(para1: jchar): jboolean; static; overload;
  end;

  OAHPHttpContext = interface external 'org.apache.http.protocol' name 'HttpContext' 
    const
      RESERVED_PREFIX = 'http.';
    function getAttribute(para1: JLString): JLObject; overload;
    procedure setAttribute(para1: JLString; para2: JLObject); overload;
    function removeAttribute(para1: JLString): JLObject; overload;
  end;

  OAHPHttpDateGenerator = class external 'org.apache.http.protocol' name 'HttpDateGenerator' (JLObject)
  public
    final class var
      fGMT: JUTimeZone; external name 'GMT';
  public
    const
      PATTERN_RFC1123 = 'EEE, dd MMM yyyy HH:mm:ss zzz';
  public
    constructor create(); overload;
    function getCurrentDate(): JLString; overload; virtual;
  end;

  OAHPHttpExpectationVerifier = interface external 'org.apache.http.protocol' name 'HttpExpectationVerifier' 
    procedure verify(para1: OAHHttpRequest; para2: OAHHttpResponse; para3: OAHPHttpContext); overload;  // throws org.apache.http.HttpException
  end;

  OAHPHttpRequestExecutor = class external 'org.apache.http.protocol' name 'HttpRequestExecutor' (JLObject)
  public
    constructor create(); overload;
  strict protected
    function canResponseHaveBody(para1: OAHHttpRequest; para2: OAHHttpResponse): jboolean; overload; virtual;
  public
    function execute(para1: OAHHttpRequest; para2: OAHHttpClientConnection; para3: OAHPHttpContext): OAHHttpResponse; overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException
    procedure preProcess(para1: OAHHttpRequest; para2: OAHPHttpProcessor; para3: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  strict protected
    function doSendRequest(para1: OAHHttpRequest; para2: OAHHttpClientConnection; para3: OAHPHttpContext): OAHHttpResponse; overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException
    function doReceiveResponse(para1: OAHHttpRequest; para2: OAHHttpClientConnection; para3: OAHPHttpContext): OAHHttpResponse; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  public
    procedure postProcess(para1: OAHHttpResponse; para2: OAHPHttpProcessor; para3: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPHttpRequestHandler = interface external 'org.apache.http.protocol' name 'HttpRequestHandler' 
    procedure handle(para1: OAHHttpRequest; para2: OAHHttpResponse; para3: OAHPHttpContext); overload;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPHttpRequestHandlerResolver = interface external 'org.apache.http.protocol' name 'HttpRequestHandlerResolver' 
    function lookup(para1: JLString): OAHPHttpRequestHandler; overload;
  end;

  OAHPHttpRequestInterceptorList = interface external 'org.apache.http.protocol' name 'HttpRequestInterceptorList' 
    procedure addRequestInterceptor(para1: OAHHttpRequestInterceptor); overload;
    procedure addRequestInterceptor(para1: OAHHttpRequestInterceptor; para2: jint); overload;
    function getRequestInterceptorCount(): jint; overload;
    function getRequestInterceptor(para1: jint): OAHHttpRequestInterceptor; overload;
    procedure clearRequestInterceptors(); overload;
    procedure removeRequestInterceptorByClass(para1: JLClass); overload;
    procedure setInterceptors(para1: JUList); overload;
  end;

  OAHPHttpResponseInterceptorList = interface external 'org.apache.http.protocol' name 'HttpResponseInterceptorList' 
    procedure addResponseInterceptor(para1: OAHHttpResponseInterceptor); overload;
    procedure addResponseInterceptor(para1: OAHHttpResponseInterceptor; para2: jint); overload;
    function getResponseInterceptorCount(): jint; overload;
    function getResponseInterceptor(para1: jint): OAHHttpResponseInterceptor; overload;
    procedure clearResponseInterceptors(); overload;
    procedure removeResponseInterceptorByClass(para1: JLClass); overload;
    procedure setInterceptors(para1: JUList); overload;
  end;

  OAHPHttpService = class external 'org.apache.http.protocol' name 'HttpService' (JLObject)
  public
    constructor create(para1: OAHPHttpProcessor; para2: OAHConnectionReuseStrategy; para3: OAHHttpResponseFactory); overload;
    procedure setHttpProcessor(para1: OAHPHttpProcessor); overload; virtual;
    procedure setConnReuseStrategy(para1: OAHConnectionReuseStrategy); overload; virtual;
    procedure setResponseFactory(para1: OAHHttpResponseFactory); overload; virtual;
    procedure setHandlerResolver(para1: OAHPHttpRequestHandlerResolver); overload; virtual;
    procedure setExpectationVerifier(para1: OAHPHttpExpectationVerifier); overload; virtual;
    function getParams(): OAHPHttpParams; overload; virtual;
    procedure setParams(para1: OAHPHttpParams); overload; virtual;
    procedure handleRequest(para1: OAHHttpServerConnection; para2: OAHPHttpContext); overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException
  strict protected
    procedure handleException(para1: OAHHttpException; para2: OAHHttpResponse); overload; virtual;
    procedure doService(para1: OAHHttpRequest; para2: OAHHttpResponse; para3: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPUriPatternMatcher = class external 'org.apache.http.protocol' name 'UriPatternMatcher' (JLObject)
  public
    constructor create(); overload;
    procedure register(para1: JLString; para2: JLObject); overload; virtual;
    procedure unregister(para1: JLString); overload; virtual;
    procedure setHandlers(para1: JUMap); overload; virtual;
    function lookup(para1: JLString): JLObject; overload; virtual;
  strict protected
    function matchUriRequestPattern(para1: JLString; para2: JLString): jboolean; overload; virtual;
  end;

  OAHUByteArrayBuffer = class sealed external 'org.apache.http.util' name 'ByteArrayBuffer' (JLObject)
  public
    constructor create(para1: jint); overload;
    procedure append(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure append(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure append(para1: jint); overload; virtual;
    procedure append(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;
    procedure append(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;
    procedure append(para1: OAHUCharArrayBuffer; para2: jint; para3: jint); overload; virtual;
    procedure clear(); overload; virtual;
    function toByteArray(): Arr1jbyte; overload; virtual;
    function byteAt(para1: jint): jint; overload; virtual;
    function capacity(): jint; overload; virtual;
    function length(): jint; overload; virtual;
    function buffer(): Arr1jbyte; overload; virtual;
    procedure setLength(para1: jint); overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function isFull(): jboolean; overload; virtual;
  end;

  OAHUCharArrayBuffer = class sealed external 'org.apache.http.util' name 'CharArrayBuffer' (JLObject)
  public
    constructor create(para1: jint); overload;
    procedure append(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;
    procedure append(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;
    procedure append(para1: JLString); overload; virtual;
    procedure append(para1: OAHUCharArrayBuffer; para2: jint; para3: jint); overload; virtual;
    procedure append(para1: OAHUCharArrayBuffer); overload; virtual;
    procedure append(para1: jchar); overload; virtual;
    procedure append(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure append(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure append(para1: OAHUByteArrayBuffer; para2: jint; para3: jint); overload; virtual;
    procedure append(para1: JLObject); overload; virtual;
    procedure clear(); overload; virtual;
    function toCharArray(): Arr1jchar; overload; virtual;
    function charAt(para1: jint): jchar; overload; virtual;
    function buffer(): Arr1jchar; overload; virtual;
    function capacity(): jint; overload; virtual;
    function length(): jint; overload; virtual;
    procedure ensureCapacity(para1: jint); overload; virtual;
    procedure setLength(para1: jint); overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function isFull(): jboolean; overload; virtual;
    function indexOf(para1: jint; para2: jint; para3: jint): jint; overload; virtual;
    function indexOf(para1: jint): jint; overload; virtual;
    function substring(para1: jint; para2: jint): JLString; overload; virtual;
    function substringTrimmed(para1: jint; para2: jint): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OAHUEncodingUtils = class sealed external 'org.apache.http.util' name 'EncodingUtils' (JLObject)
  public
    class function getString(para1: Arr1jbyte; para2: jint; para3: jint; para4: JLString): JLString; static; overload;
    class function getString(var para1: array of jbyte; para2: jint; para3: jint; para4: JLString): JLString; static; overload;
    class function getString(para1: Arr1jbyte; para2: JLString): JLString; static; overload;
    class function getString(var para1: array of jbyte; para2: JLString): JLString; static; overload;
    class function getBytes(para1: JLString; para2: JLString): Arr1jbyte; static; overload;
    class function getAsciiBytes(para1: JLString): Arr1jbyte; static; overload;
    class function getAsciiString(para1: Arr1jbyte; para2: jint; para3: jint): JLString; static; overload;
    class function getAsciiString(var para1: array of jbyte; para2: jint; para3: jint): JLString; static; overload;
    class function getAsciiString(para1: Arr1jbyte): JLString; static; overload;
    class function getAsciiString(var para1: array of jbyte): JLString; static; overload;
  end;

  OAHUEntityUtils = class sealed external 'org.apache.http.util' name 'EntityUtils' (JLObject)
  public
    class function toByteArray(para1: OAHHttpEntity): Arr1jbyte; static; overload;  // throws java.io.IOException
    class function getContentCharSet(para1: OAHHttpEntity): JLString; static; overload;  // throws org.apache.http.ParseException
    class function toString(para1: OAHHttpEntity; para2: JLString): JLString; static; overload;  // throws java.io.IOException, org.apache.http.ParseException
    class function toString(para1: OAHHttpEntity): JLString; static; overload;  // throws java.io.IOException, org.apache.http.ParseException
  end;

  OAHUExceptionUtils = class sealed external 'org.apache.http.util' name 'ExceptionUtils' (JLObject)
  public
    class procedure initCause(para1: JLThrowable; para2: JLThrowable); static; overload;
  end;

  OAHULangUtils = class sealed external 'org.apache.http.util' name 'LangUtils' (JLObject)
  public
    const
      HASH_OFFSET = 37;
      HASH_SEED = 17;
  public
    class function hashCode(para1: jint; para2: jint): jint; static; overload;
    class function hashCode(para1: jint; para2: jboolean): jint; static; overload;
    class function hashCode(para1: jint; para2: JLObject): jint; static; overload;
    class function equals(para1: JLObject; para2: JLObject): jboolean; static; overload;
    class function equals(para1: Arr1JLObject; para2: Arr1JLObject): jboolean; static; overload;
    class function equals(var para1: array of JLObject; var para2: array of JLObject): jboolean; static; overload;
  end;

  OAHUVersionInfo = class external 'org.apache.http.util' name 'VersionInfo' (JLObject)
  public
    const
      PROPERTY_MODULE = 'info.module';
      PROPERTY_RELEASE = 'info.release';
      PROPERTY_TIMESTAMP = 'info.timestamp';
      UNAVAILABLE = 'UNAVAILABLE';
      VERSION_PROPERTY_FILE = 'version.properties';
  strict protected
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload;
  public
    function getPackage(): JLString; overload; virtual; final;
    function getModule(): JLString; overload; virtual; final;
    function getRelease(): JLString; overload; virtual; final;
    function getTimestamp(): JLString; overload; virtual; final;
    function getClassloader(): JLString; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    class function loadVersionInfo(para1: Arr1JLString; para2: JLClassLoader): Arr1OAHUVersionInfo; static; overload; final;
    class function loadVersionInfo(var para1: array of JLString; para2: JLClassLoader): Arr1OAHUVersionInfo; static; overload; final;
    class function loadVersionInfo(para1: JLString; para2: JLClassLoader): OAHUVersionInfo; static; overload; final;
  strict protected
    class function fromMap(para1: JLString; para2: JUMap; para3: JLClassLoader): OAHUVersionInfo; static; overload; final;
  end;

  OJJSONArray = class external 'org.json' name 'JSONArray' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    constructor create(para1: OJJSONTokener); overload;  // throws org.json.JSONException
    constructor create(para1: JLString); overload;  // throws org.json.JSONException
    constructor create(para1: JLObject); overload;  // throws org.json.JSONException
    function length(): jint; overload; virtual;
    function put(para1: jboolean): OJJSONArray; overload; virtual;
    function put(para1: jdouble): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function put(para1: jint): OJJSONArray; overload; virtual;
    function put(para1: jlong): OJJSONArray; overload; virtual;
    function put(para1: JLObject): OJJSONArray; overload; virtual;
    function put(para1: jint; para2: jboolean): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function put(para1: jint; para2: jdouble): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function put(para1: jint; para2: jint): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function put(para1: jint; para2: jlong): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function put(para1: jint; para2: JLObject): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function isNull(para1: jint): jboolean; overload; virtual;
    function get(para1: jint): JLObject; overload; virtual;  // throws org.json.JSONException
    function opt(para1: jint): JLObject; overload; virtual;
    function remove(para1: jint): JLObject; overload; virtual;
    function getBoolean(para1: jint): jboolean; overload; virtual;  // throws org.json.JSONException
    function optBoolean(para1: jint): jboolean; overload; virtual;
    function optBoolean(para1: jint; para2: jboolean): jboolean; overload; virtual;
    function getDouble(para1: jint): jdouble; overload; virtual;  // throws org.json.JSONException
    function optDouble(para1: jint): jdouble; overload; virtual;
    function optDouble(para1: jint; para2: jdouble): jdouble; overload; virtual;
    function getInt(para1: jint): jint; overload; virtual;  // throws org.json.JSONException
    function optInt(para1: jint): jint; overload; virtual;
    function optInt(para1: jint; para2: jint): jint; overload; virtual;
    function getLong(para1: jint): jlong; overload; virtual;  // throws org.json.JSONException
    function optLong(para1: jint): jlong; overload; virtual;
    function optLong(para1: jint; para2: jlong): jlong; overload; virtual;
    function getString(para1: jint): JLString; overload; virtual;  // throws org.json.JSONException
    function optString(para1: jint): JLString; overload; virtual;
    function optString(para1: jint; para2: JLString): JLString; overload; virtual;
    function getJSONArray(para1: jint): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function optJSONArray(para1: jint): OJJSONArray; overload; virtual;
    function getJSONObject(para1: jint): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function optJSONObject(para1: jint): OJJSONObject; overload; virtual;
    function toJSONObject(para1: OJJSONArray): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function join(para1: JLString): JLString; overload; virtual;  // throws org.json.JSONException
    function toString(): JLString; overload; virtual;
    function toString(para1: jint): JLString; overload; virtual;  // throws org.json.JSONException
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  OJJSONObject = class external 'org.json' name 'JSONObject' (JLObject)
  public
    final class var
      fNULL: JLObject; external name 'NULL';
  public
    constructor create(); overload;
    constructor create(para1: JUMap); overload;
    constructor create(para1: OJJSONTokener); overload;  // throws org.json.JSONException
    constructor create(para1: JLString); overload;  // throws org.json.JSONException
    constructor create(para1: OJJSONObject; para2: Arr1JLString); overload;  // throws org.json.JSONException
    constructor create(para1: OJJSONObject; const para2: array of JLString); overload;  // throws org.json.JSONException
    function length(): jint; overload; virtual;
    function put(para1: JLString; para2: jboolean): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function put(para1: JLString; para2: jdouble): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function put(para1: JLString; para2: jint): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function put(para1: JLString; para2: jlong): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function put(para1: JLString; para2: JLObject): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function putOpt(para1: JLString; para2: JLObject): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function accumulate(para1: JLString; para2: JLObject): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function remove(para1: JLString): JLObject; overload; virtual;
    function isNull(para1: JLString): jboolean; overload; virtual;
    function has(para1: JLString): jboolean; overload; virtual;
    function get(para1: JLString): JLObject; overload; virtual;  // throws org.json.JSONException
    function opt(para1: JLString): JLObject; overload; virtual;
    function getBoolean(para1: JLString): jboolean; overload; virtual;  // throws org.json.JSONException
    function optBoolean(para1: JLString): jboolean; overload; virtual;
    function optBoolean(para1: JLString; para2: jboolean): jboolean; overload; virtual;
    function getDouble(para1: JLString): jdouble; overload; virtual;  // throws org.json.JSONException
    function optDouble(para1: JLString): jdouble; overload; virtual;
    function optDouble(para1: JLString; para2: jdouble): jdouble; overload; virtual;
    function getInt(para1: JLString): jint; overload; virtual;  // throws org.json.JSONException
    function optInt(para1: JLString): jint; overload; virtual;
    function optInt(para1: JLString; para2: jint): jint; overload; virtual;
    function getLong(para1: JLString): jlong; overload; virtual;  // throws org.json.JSONException
    function optLong(para1: JLString): jlong; overload; virtual;
    function optLong(para1: JLString; para2: jlong): jlong; overload; virtual;
    function getString(para1: JLString): JLString; overload; virtual;  // throws org.json.JSONException
    function optString(para1: JLString): JLString; overload; virtual;
    function optString(para1: JLString; para2: JLString): JLString; overload; virtual;
    function getJSONArray(para1: JLString): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function optJSONArray(para1: JLString): OJJSONArray; overload; virtual;
    function getJSONObject(para1: JLString): OJJSONObject; overload; virtual;  // throws org.json.JSONException
    function optJSONObject(para1: JLString): OJJSONObject; overload; virtual;
    function toJSONArray(para1: OJJSONArray): OJJSONArray; overload; virtual;  // throws org.json.JSONException
    function keys(): JUIterator; overload; virtual;
    function names(): OJJSONArray; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toString(para1: jint): JLString; overload; virtual;  // throws org.json.JSONException
    class function numberToString(para1: JLNumber): JLString; static; overload;  // throws org.json.JSONException
    class function quote(para1: JLString): JLString; static; overload;
    class function wrap(para1: JLObject): JLObject; static; overload;
  end;

  OJJSONStringer = class external 'org.json' name 'JSONStringer' (JLObject)
  public
    constructor create(); overload;
    function &array(): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function endArray(): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function &object(): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function endObject(): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function value(para1: JLObject): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function value(para1: jboolean): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function value(para1: jdouble): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function value(para1: jlong): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function key(para1: JLString): OJJSONStringer; overload; virtual;  // throws org.json.JSONException
    function toString(): JLString; overload; virtual;
  end;

  OJJSONTokener = class external 'org.json' name 'JSONTokener' (JLObject)
  public
    constructor create(para1: JLString); overload;
    function nextValue(): JLObject; overload; virtual;  // throws org.json.JSONException
    function nextString(para1: jchar): JLString; overload; virtual;  // throws org.json.JSONException
    function syntaxError(para1: JLString): OJJSONException; overload; virtual;
    function toString(): JLString; overload; virtual;
    function more(): jboolean; overload; virtual;
    function next(): jchar; overload; virtual;
    function next(para1: jchar): jchar; overload; virtual;  // throws org.json.JSONException
    function nextClean(): jchar; overload; virtual;  // throws org.json.JSONException
    function next(para1: jint): JLString; overload; virtual;  // throws org.json.JSONException
    function nextTo(para1: JLString): JLString; overload; virtual;
    function nextTo(para1: jchar): JLString; overload; virtual;
    procedure skipPast(para1: JLString); overload; virtual;
    function skipTo(para1: jchar): jchar; overload; virtual;
    procedure back(); overload; virtual;
    class function dehexchar(para1: jchar): jint; static; overload;
  end;

  OWDDOMConfiguration = interface external 'org.w3c.dom' name 'DOMConfiguration' 
    procedure setParameter(para1: JLString; para2: JLObject); overload;  // throws org.w3c.dom.DOMException
    function getParameter(para1: JLString): JLObject; overload;  // throws org.w3c.dom.DOMException
    function canSetParameter(para1: JLString; para2: JLObject): jboolean; overload;
    function getParameterNames(): OWDDOMStringList; overload;
  end;

  OWDDOMError = interface external 'org.w3c.dom' name 'DOMError' 
    const
      SEVERITY_ERROR = 2;
      SEVERITY_FATAL_ERROR = 3;
      SEVERITY_WARNING = 1;
    function getSeverity(): jshort; overload;
    function getMessage(): JLString; overload;
    function getType(): JLString; overload;
    function getRelatedException(): JLObject; overload;
    function getRelatedData(): JLObject; overload;
    function getLocation(): OWDDOMLocator; overload;
  end;

  OWDDOMErrorHandler = interface external 'org.w3c.dom' name 'DOMErrorHandler' 
    function handleError(para1: OWDDOMError): jboolean; overload;
  end;

  OWDDOMImplementation = interface external 'org.w3c.dom' name 'DOMImplementation' 
    function hasFeature(para1: JLString; para2: JLString): jboolean; overload;
    function createDocumentType(para1: JLString; para2: JLString; para3: JLString): OWDDocumentType; overload;  // throws org.w3c.dom.DOMException
    function createDocument(para1: JLString; para2: JLString; para3: OWDDocumentType): OWDDocument; overload;  // throws org.w3c.dom.DOMException
    function getFeature(para1: JLString; para2: JLString): JLObject; overload;
  end;

  OWDDOMImplementationList = interface external 'org.w3c.dom' name 'DOMImplementationList' 
    function item(para1: jint): OWDDOMImplementation; overload;
    function getLength(): jint; overload;
  end;

  OWDDOMImplementationSource = interface external 'org.w3c.dom' name 'DOMImplementationSource' 
    function getDOMImplementation(para1: JLString): OWDDOMImplementation; overload;
    function getDOMImplementationList(para1: JLString): OWDDOMImplementationList; overload;
  end;

  OWDDOMLocator = interface external 'org.w3c.dom' name 'DOMLocator' 
    function getLineNumber(): jint; overload;
    function getColumnNumber(): jint; overload;
    function getByteOffset(): jint; overload;
    function getUtf16Offset(): jint; overload;
    function getRelatedNode(): OWDNode; overload;
    function getUri(): JLString; overload;
  end;

  OWDDOMStringList = interface external 'org.w3c.dom' name 'DOMStringList' 
    function item(para1: jint): JLString; overload;
    function getLength(): jint; overload;
    function contains(para1: JLString): jboolean; overload;
  end;

  OWDNameList = interface external 'org.w3c.dom' name 'NameList' 
    function getName(para1: jint): JLString; overload;
    function getNamespaceURI(para1: jint): JLString; overload;
    function getLength(): jint; overload;
    function contains(para1: JLString): jboolean; overload;
    function containsNS(para1: JLString; para2: JLString): jboolean; overload;
  end;

  OWDNamedNodeMap = interface external 'org.w3c.dom' name 'NamedNodeMap' 
    function getNamedItem(para1: JLString): OWDNode; overload;
    function setNamedItem(para1: OWDNode): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function removeNamedItem(para1: JLString): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function item(para1: jint): OWDNode; overload;
    function getLength(): jint; overload;
    function getNamedItemNS(para1: JLString; para2: JLString): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function setNamedItemNS(para1: OWDNode): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function removeNamedItemNS(para1: JLString; para2: JLString): OWDNode; overload;  // throws org.w3c.dom.DOMException
  end;

  OWDNode = interface external 'org.w3c.dom' name 'Node' 
    const
      ATTRIBUTE_NODE = 2;
      CDATA_SECTION_NODE = 4;
      COMMENT_NODE = 8;
      DOCUMENT_FRAGMENT_NODE = 11;
      DOCUMENT_NODE = 9;
      DOCUMENT_POSITION_CONTAINED_BY = 16;
      DOCUMENT_POSITION_CONTAINS = 8;
      DOCUMENT_POSITION_DISCONNECTED = 1;
      DOCUMENT_POSITION_FOLLOWING = 4;
      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
      DOCUMENT_POSITION_PRECEDING = 2;
      DOCUMENT_TYPE_NODE = 10;
      ELEMENT_NODE = 1;
      ENTITY_NODE = 6;
      ENTITY_REFERENCE_NODE = 5;
      NOTATION_NODE = 12;
      PROCESSING_INSTRUCTION_NODE = 7;
      TEXT_NODE = 3;
    function getNodeName(): JLString; overload;
    function getNodeValue(): JLString; overload;  // throws org.w3c.dom.DOMException
    procedure setNodeValue(para1: JLString); overload;  // throws org.w3c.dom.DOMException
    function getNodeType(): jshort; overload;
    function getParentNode(): OWDNode; overload;
    function getChildNodes(): OWDNodeList; overload;
    function getFirstChild(): OWDNode; overload;
    function getLastChild(): OWDNode; overload;
    function getPreviousSibling(): OWDNode; overload;
    function getNextSibling(): OWDNode; overload;
    function getAttributes(): OWDNamedNodeMap; overload;
    function getOwnerDocument(): OWDDocument; overload;
    function insertBefore(para1: OWDNode; para2: OWDNode): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function replaceChild(para1: OWDNode; para2: OWDNode): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function removeChild(para1: OWDNode): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function appendChild(para1: OWDNode): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function hasChildNodes(): jboolean; overload;
    function cloneNode(para1: jboolean): OWDNode; overload;
    procedure normalize(); overload;
    function isSupported(para1: JLString; para2: JLString): jboolean; overload;
    function getNamespaceURI(): JLString; overload;
    function getPrefix(): JLString; overload;
    procedure setPrefix(para1: JLString); overload;  // throws org.w3c.dom.DOMException
    function getLocalName(): JLString; overload;
    function hasAttributes(): jboolean; overload;
    function getBaseURI(): JLString; overload;
    function compareDocumentPosition(para1: OWDNode): jshort; overload;  // throws org.w3c.dom.DOMException
    function getTextContent(): JLString; overload;  // throws org.w3c.dom.DOMException
    procedure setTextContent(para1: JLString); overload;  // throws org.w3c.dom.DOMException
    function isSameNode(para1: OWDNode): jboolean; overload;
    function lookupPrefix(para1: JLString): JLString; overload;
    function isDefaultNamespace(para1: JLString): jboolean; overload;
    function lookupNamespaceURI(para1: JLString): JLString; overload;
    function isEqualNode(para1: OWDNode): jboolean; overload;
    function getFeature(para1: JLString; para2: JLString): JLObject; overload;
    function setUserData(para1: JLString; para2: JLObject; para3: OWDUserDataHandler): JLObject; overload;
    function getUserData(para1: JLString): JLObject; overload;
  end;

  OWDNodeList = interface external 'org.w3c.dom' name 'NodeList' 
    function item(para1: jint): OWDNode; overload;
    function getLength(): jint; overload;
  end;

  OWDTypeInfo = interface external 'org.w3c.dom' name 'TypeInfo' 
    const
      DERIVATION_EXTENSION = 2;
      DERIVATION_LIST = 8;
      DERIVATION_RESTRICTION = 1;
      DERIVATION_UNION = 4;
    function getTypeName(): JLString; overload;
    function getTypeNamespace(): JLString; overload;
    function isDerivedFrom(para1: JLString; para2: JLString; para3: jint): jboolean; overload;
  end;

  OWDUserDataHandler = interface external 'org.w3c.dom' name 'UserDataHandler' 
    const
      NODE_ADOPTED = 5;
      NODE_CLONED = 1;
      NODE_DELETED = 3;
      NODE_IMPORTED = 2;
      NODE_RENAMED = 4;
    procedure handle(para1: jshort; para2: JLString; para3: JLObject; para4: OWDNode; para5: OWDNode); overload;
  end;

  OWDLDOMImplementationLS = interface external 'org.w3c.dom.ls' name 'DOMImplementationLS' 
    const
      MODE_ASYNCHRONOUS = 2;
      MODE_SYNCHRONOUS = 1;
    function createLSParser(para1: jshort; para2: JLString): OWDLLSParser; overload;  // throws org.w3c.dom.DOMException
    function createLSSerializer(): OWDLLSSerializer; overload;
    function createLSInput(): OWDLLSInput; overload;
    function createLSOutput(): OWDLLSOutput; overload;
  end;

  OWDLLSInput = interface external 'org.w3c.dom.ls' name 'LSInput' 
    function getCharacterStream(): JIReader; overload;
    procedure setCharacterStream(para1: JIReader); overload;
    function getByteStream(): JIInputStream; overload;
    procedure setByteStream(para1: JIInputStream); overload;
    function getStringData(): JLString; overload;
    procedure setStringData(para1: JLString); overload;
    function getSystemId(): JLString; overload;
    procedure setSystemId(para1: JLString); overload;
    function getPublicId(): JLString; overload;
    procedure setPublicId(para1: JLString); overload;
    function getBaseURI(): JLString; overload;
    procedure setBaseURI(para1: JLString); overload;
    function getEncoding(): JLString; overload;
    procedure setEncoding(para1: JLString); overload;
    function getCertifiedText(): jboolean; overload;
    procedure setCertifiedText(para1: jboolean); overload;
  end;

  OWDLLSOutput = interface external 'org.w3c.dom.ls' name 'LSOutput' 
    function getCharacterStream(): JIWriter; overload;
    procedure setCharacterStream(para1: JIWriter); overload;
    function getByteStream(): JIOutputStream; overload;
    procedure setByteStream(para1: JIOutputStream); overload;
    function getSystemId(): JLString; overload;
    procedure setSystemId(para1: JLString); overload;
    function getEncoding(): JLString; overload;
    procedure setEncoding(para1: JLString); overload;
  end;

  OWDLLSParser = interface external 'org.w3c.dom.ls' name 'LSParser' 
    const
      ACTION_APPEND_AS_CHILDREN = 1;
      ACTION_INSERT_AFTER = 4;
      ACTION_INSERT_BEFORE = 3;
      ACTION_REPLACE = 5;
      ACTION_REPLACE_CHILDREN = 2;
    function getDomConfig(): OWDDOMConfiguration; overload;
    function getFilter(): OWDLLSParserFilter; overload;
    procedure setFilter(para1: OWDLLSParserFilter); overload;
    function getAsync(): jboolean; overload;
    function getBusy(): jboolean; overload;
    function parse(para1: OWDLLSInput): OWDDocument; overload;  // throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException
    function parseURI(para1: JLString): OWDDocument; overload;  // throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException
    function parseWithContext(para1: OWDLLSInput; para2: OWDNode; para3: jshort): OWDNode; overload;  // throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException
    procedure abort(); overload;
  end;

  OWDLLSParserFilter = interface external 'org.w3c.dom.ls' name 'LSParserFilter' 
    const
      FILTER_ACCEPT = 1;
      FILTER_INTERRUPT = 4;
      FILTER_REJECT = 2;
      FILTER_SKIP = 3;
    function startElement(para1: OWDElement): jshort; overload;
    function acceptNode(para1: OWDNode): jshort; overload;
    function getWhatToShow(): jint; overload;
  end;

  OWDLLSResourceResolver = interface external 'org.w3c.dom.ls' name 'LSResourceResolver' 
    function resolveResource(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString): OWDLLSInput; overload;
  end;

  OWDLLSSerializer = interface external 'org.w3c.dom.ls' name 'LSSerializer' 
    function getDomConfig(): OWDDOMConfiguration; overload;
    function getNewLine(): JLString; overload;
    procedure setNewLine(para1: JLString); overload;
    function write(para1: OWDNode; para2: OWDLLSOutput): jboolean; overload;  // throws org.w3c.dom.ls.LSException
    function writeToURI(para1: OWDNode; para2: JLString): jboolean; overload;  // throws org.w3c.dom.ls.LSException
    function writeToString(para1: OWDNode): JLString; overload;  // throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException
  end;

  OXSAttributeList = interface external 'org.xml.sax' name 'AttributeList' 
    function getLength(): jint; overload;
    function getName(para1: jint): JLString; overload;
    function getType(para1: jint): JLString; overload;
    function getValue(para1: jint): JLString; overload;
    function getType(para1: JLString): JLString; overload;
    function getValue(para1: JLString): JLString; overload;
  end;

  OXSAttributes = interface external 'org.xml.sax' name 'Attributes' 
    function getLength(): jint; overload;
    function getURI(para1: jint): JLString; overload;
    function getLocalName(para1: jint): JLString; overload;
    function getQName(para1: jint): JLString; overload;
    function getType(para1: jint): JLString; overload;
    function getValue(para1: jint): JLString; overload;
    function getIndex(para1: JLString; para2: JLString): jint; overload;
    function getIndex(para1: JLString): jint; overload;
    function getType(para1: JLString; para2: JLString): JLString; overload;
    function getType(para1: JLString): JLString; overload;
    function getValue(para1: JLString; para2: JLString): JLString; overload;
    function getValue(para1: JLString): JLString; overload;
  end;

  OXSContentHandler = interface external 'org.xml.sax' name 'ContentHandler' 
    procedure setDocumentLocator(para1: OXSLocator); overload;
    procedure startDocument(); overload;  // throws org.xml.sax.SAXException
    procedure endDocument(); overload;  // throws org.xml.sax.SAXException
    procedure startPrefixMapping(para1: JLString; para2: JLString); overload;  // throws org.xml.sax.SAXException
    procedure endPrefixMapping(para1: JLString); overload;  // throws org.xml.sax.SAXException
    procedure startElement(para1: JLString; para2: JLString; para3: JLString; para4: OXSAttributes); overload;  // throws org.xml.sax.SAXException
    procedure endElement(para1: JLString; para2: JLString; para3: JLString); overload;  // throws org.xml.sax.SAXException
    procedure characters(para1: Arr1jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure characters(var para1: array of jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(para1: Arr1jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(var para1: array of jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure processingInstruction(para1: JLString; para2: JLString); overload;  // throws org.xml.sax.SAXException
    procedure skippedEntity(para1: JLString); overload;  // throws org.xml.sax.SAXException
  end;

  OXSDTDHandler = interface external 'org.xml.sax' name 'DTDHandler' 
    procedure notationDecl(para1: JLString; para2: JLString; para3: JLString); overload;  // throws org.xml.sax.SAXException
    procedure unparsedEntityDecl(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload;  // throws org.xml.sax.SAXException
  end;

  OXSDocumentHandler = interface external 'org.xml.sax' name 'DocumentHandler' 
    procedure setDocumentLocator(para1: OXSLocator); overload;
    procedure startDocument(); overload;  // throws org.xml.sax.SAXException
    procedure endDocument(); overload;  // throws org.xml.sax.SAXException
    procedure startElement(para1: JLString; para2: OXSAttributeList); overload;  // throws org.xml.sax.SAXException
    procedure endElement(para1: JLString); overload;  // throws org.xml.sax.SAXException
    procedure characters(para1: Arr1jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure characters(var para1: array of jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(para1: Arr1jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(var para1: array of jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure processingInstruction(para1: JLString; para2: JLString); overload;  // throws org.xml.sax.SAXException
  end;

  OXSEntityResolver = interface external 'org.xml.sax' name 'EntityResolver' 
    function resolveEntity(para1: JLString; para2: JLString): OXSInputSource; overload;  // throws org.xml.sax.SAXException, java.io.IOException
  end;

  OXSErrorHandler = interface external 'org.xml.sax' name 'ErrorHandler' 
    procedure warning(para1: OXSSAXParseException); overload;  // throws org.xml.sax.SAXException
    procedure error(para1: OXSSAXParseException); overload;  // throws org.xml.sax.SAXException
    procedure fatalError(para1: OXSSAXParseException); overload;  // throws org.xml.sax.SAXException
  end;

  OXSInputSource = class external 'org.xml.sax' name 'InputSource' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIReader); overload;
    procedure setPublicId(para1: JLString); overload; virtual;
    function getPublicId(): JLString; overload; virtual;
    procedure setSystemId(para1: JLString); overload; virtual;
    function getSystemId(): JLString; overload; virtual;
    procedure setByteStream(para1: JIInputStream); overload; virtual;
    function getByteStream(): JIInputStream; overload; virtual;
    procedure setEncoding(para1: JLString); overload; virtual;
    function getEncoding(): JLString; overload; virtual;
    procedure setCharacterStream(para1: JIReader); overload; virtual;
    function getCharacterStream(): JIReader; overload; virtual;
  end;

  OXSLocator = interface external 'org.xml.sax' name 'Locator' 
    function getPublicId(): JLString; overload;
    function getSystemId(): JLString; overload;
    function getLineNumber(): jint; overload;
    function getColumnNumber(): jint; overload;
  end;

  OXSParser = interface external 'org.xml.sax' name 'Parser' 
    procedure setLocale(para1: JULocale); overload;  // throws org.xml.sax.SAXException
    procedure setEntityResolver(para1: OXSEntityResolver); overload;
    procedure setDTDHandler(para1: OXSDTDHandler); overload;
    procedure setDocumentHandler(para1: OXSDocumentHandler); overload;
    procedure setErrorHandler(para1: OXSErrorHandler); overload;
    procedure parse(para1: OXSInputSource); overload;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JLString); overload;  // throws org.xml.sax.SAXException, java.io.IOException
  end;

  OXSXMLReader = interface external 'org.xml.sax' name 'XMLReader' 
    function getFeature(para1: JLString): jboolean; overload;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setFeature(para1: JLString; para2: jboolean); overload;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getProperty(para1: JLString): JLObject; overload;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setProperty(para1: JLString; para2: JLObject); overload;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setEntityResolver(para1: OXSEntityResolver); overload;
    function getEntityResolver(): OXSEntityResolver; overload;
    procedure setDTDHandler(para1: OXSDTDHandler); overload;
    function getDTDHandler(): OXSDTDHandler; overload;
    procedure setContentHandler(para1: OXSContentHandler); overload;
    function getContentHandler(): OXSContentHandler; overload;
    procedure setErrorHandler(para1: OXSErrorHandler); overload;
    function getErrorHandler(): OXSErrorHandler; overload;
    procedure parse(para1: OXSInputSource); overload;  // throws java.io.IOException, org.xml.sax.SAXException
    procedure parse(para1: JLString); overload;  // throws java.io.IOException, org.xml.sax.SAXException
  end;

  OXSEDeclHandler = interface external 'org.xml.sax.ext' name 'DeclHandler' 
    procedure elementDecl(para1: JLString; para2: JLString); overload;  // throws org.xml.sax.SAXException
    procedure attributeDecl(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload;  // throws org.xml.sax.SAXException
    procedure internalEntityDecl(para1: JLString; para2: JLString); overload;  // throws org.xml.sax.SAXException
    procedure externalEntityDecl(para1: JLString; para2: JLString; para3: JLString); overload;  // throws org.xml.sax.SAXException
  end;

  OXSELexicalHandler = interface external 'org.xml.sax.ext' name 'LexicalHandler' 
    procedure startDTD(para1: JLString; para2: JLString; para3: JLString); overload;  // throws org.xml.sax.SAXException
    procedure endDTD(); overload;  // throws org.xml.sax.SAXException
    procedure startEntity(para1: JLString); overload;  // throws org.xml.sax.SAXException
    procedure endEntity(para1: JLString); overload;  // throws org.xml.sax.SAXException
    procedure startCDATA(); overload;  // throws org.xml.sax.SAXException
    procedure endCDATA(); overload;  // throws org.xml.sax.SAXException
    procedure comment(para1: Arr1jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
    procedure comment(var para1: array of jchar; para2: jint; para3: jint); overload;  // throws org.xml.sax.SAXException
  end;

  OXSHNamespaceSupport = class external 'org.xml.sax.helpers' name 'NamespaceSupport' (JLObject)
  public
    const
      NSDECL = 'http://www.w3.org/xmlns/2000/';
      XMLNS = 'http://www.w3.org/XML/1998/namespace';
  public
    constructor create(); overload;
    procedure reset(); overload; virtual;
    procedure pushContext(); overload; virtual;
    procedure popContext(); overload; virtual;
    function declarePrefix(para1: JLString; para2: JLString): jboolean; overload; virtual;
    function processName(para1: JLString; para2: Arr1JLString; para3: jboolean): Arr1JLString; overload; virtual;
    function processName(para1: JLString; var para2: array of JLString; para3: jboolean): Arr1JLString; overload; virtual;
    function getURI(para1: JLString): JLString; overload; virtual;
    function getPrefixes(): JUEnumeration; overload; virtual;
    function getPrefix(para1: JLString): JLString; overload; virtual;
    function getPrefixes(para1: JLString): JUEnumeration; overload; virtual;
    function getDeclaredPrefixes(): JUEnumeration; overload; virtual;
    procedure setNamespaceDeclUris(para1: jboolean); overload; virtual;
    function isNamespaceDeclUris(): jboolean; overload; virtual;
  end;

  OXSHParserFactory = class external 'org.xml.sax.helpers' name 'ParserFactory' (JLObject)
  public
    class function makeParser(): OXSParser; static; overload;  // throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NullPointerException, java.lang.ClassCastException
    class function makeParser(para1: JLString): OXSParser; static; overload;  // throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.ClassCastException
  end;

  OXSHXMLReaderFactory = class sealed external 'org.xml.sax.helpers' name 'XMLReaderFactory' (JLObject)
  public
    class function createXMLReader(): OXSXMLReader; static; overload;  // throws org.xml.sax.SAXException
    class function createXMLReader(para1: JLString): OXSXMLReader; static; overload;  // throws org.xml.sax.SAXException
  end;

  OXVXmlPullParser = interface external 'org.xmlpull.v1' name 'XmlPullParser' 
    const
      CDSECT = 5;
      COMMENT = 9;
      DOCDECL = 10;
      END_DOCUMENT = 1;
      END_TAG = 3;
      ENTITY_REF = 6;
      FEATURE_PROCESS_DOCDECL = 'http://xmlpull.org/v1/doc/features.html#process-docdecl';
      FEATURE_PROCESS_NAMESPACES = 'http://xmlpull.org/v1/doc/features.html#process-namespaces';
      FEATURE_REPORT_NAMESPACE_ATTRIBUTES = 'http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes';
      FEATURE_VALIDATION = 'http://xmlpull.org/v1/doc/features.html#validation';
      IGNORABLE_WHITESPACE = 7;
      NO_NAMESPACE = '';
      PROCESSING_INSTRUCTION = 8;
      START_DOCUMENT = 0;
      START_TAG = 2;
      TEXT = 4;
    final class var
      fTYPES: Arr1JLString; external name 'TYPES';
    procedure setFeature(para1: JLString; para2: jboolean); overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getFeature(para1: JLString): jboolean; overload;
    procedure setProperty(para1: JLString; para2: JLObject); overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getProperty(para1: JLString): JLObject; overload;
    procedure setInput(para1: JIReader); overload;  // throws org.xmlpull.v1.XmlPullParserException
    procedure setInput(para1: JIInputStream; para2: JLString); overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getInputEncoding(): JLString; overload;
    procedure defineEntityReplacementText(para1: JLString; para2: JLString); overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getNamespaceCount(para1: jint): jint; overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getNamespacePrefix(para1: jint): JLString; overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getNamespaceUri(para1: jint): JLString; overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getNamespace(para1: JLString): JLString; overload;
    function getDepth(): jint; overload;
    function getPositionDescription(): JLString; overload;
    function getLineNumber(): jint; overload;
    function getColumnNumber(): jint; overload;
    function isWhitespace(): jboolean; overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getText(): JLString; overload;
    function getTextCharacters(para1: Arr1jint): Arr1jchar; overload;
    function getTextCharacters(var para1: array of jint): Arr1jchar; overload;
    function getNamespace(): JLString; overload;
    function getName(): JLString; overload;
    function getPrefix(): JLString; overload;
    function isEmptyElementTag(): jboolean; overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getAttributeCount(): jint; overload;
    function getAttributeNamespace(para1: jint): JLString; overload;
    function getAttributeName(para1: jint): JLString; overload;
    function getAttributePrefix(para1: jint): JLString; overload;
    function getAttributeType(para1: jint): JLString; overload;
    function isAttributeDefault(para1: jint): jboolean; overload;
    function getAttributeValue(para1: jint): JLString; overload;
    function getAttributeValue(para1: JLString; para2: JLString): JLString; overload;
    function getEventType(): jint; overload;  // throws org.xmlpull.v1.XmlPullParserException
    function next(): jint; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function nextToken(): jint; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure require(para1: jint; para2: JLString; para3: JLString); overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function nextText(): JLString; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function nextTag(): jint; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
  end;

  OXVXmlPullParserFactory = class external 'org.xmlpull.v1' name 'XmlPullParserFactory' (JLObject)
  public
    const
      PROPERTY_NAME = 'org.xmlpull.v1.XmlPullParserFactory';
  strict protected
    var
      fclassNamesLocation: JLString; external name 'classNamesLocation';
      ffeatures: JUHashMap; external name 'features';
      fparserClasses: JUArrayList; external name 'parserClasses';
      fserializerClasses: JUArrayList; external name 'serializerClasses';
  strict protected
    constructor create(); overload;
  public
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException
    function getFeature(para1: JLString): jboolean; overload; virtual;
    procedure setNamespaceAware(para1: jboolean); overload; virtual;
    function isNamespaceAware(): jboolean; overload; virtual;
    procedure setValidating(para1: jboolean); overload; virtual;
    function isValidating(): jboolean; overload; virtual;
    function newPullParser(): OXVXmlPullParser; overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException
    function newSerializer(): OXVXmlSerializer; overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException
    class function newInstance(): OXVXmlPullParserFactory; static; overload;  // throws org.xmlpull.v1.XmlPullParserException
    class function newInstance(para1: JLString; para2: JLClass): OXVXmlPullParserFactory; static; overload;  // throws org.xmlpull.v1.XmlPullParserException
  end;

  OXVXmlSerializer = interface external 'org.xmlpull.v1' name 'XmlSerializer' 
    procedure setFeature(para1: JLString; para2: jboolean); overload;  // throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function getFeature(para1: JLString): jboolean; overload;
    procedure setProperty(para1: JLString; para2: JLObject); overload;  // throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function getProperty(para1: JLString): JLObject; overload;
    procedure setOutput(para1: JIOutputStream; para2: JLString); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure setOutput(para1: JIWriter); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure startDocument(para1: JLString; para2: JLBoolean); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure endDocument(); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure setPrefix(para1: JLString; para2: JLString); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function getPrefix(para1: JLString; para2: jboolean): JLString; overload;  // throws java.lang.IllegalArgumentException
    function getDepth(): jint; overload;
    function getNamespace(): JLString; overload;
    function getName(): JLString; overload;
    function startTag(para1: JLString; para2: JLString): OXVXmlSerializer; overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function attribute(para1: JLString; para2: JLString; para3: JLString): OXVXmlSerializer; overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function endTag(para1: JLString; para2: JLString): OXVXmlSerializer; overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function text(para1: JLString): OXVXmlSerializer; overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function text(para1: Arr1jchar; para2: jint; para3: jint): OXVXmlSerializer; overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    function text(var para1: array of jchar; para2: jint; para3: jint): OXVXmlSerializer; overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure cdsect(para1: JLString); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure entityRef(para1: JLString); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure processingInstruction(para1: JLString); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure comment(para1: JLString); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure docdecl(para1: JLString); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure ignorableWhitespace(para1: JLString); overload;  // throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    procedure flush(); overload;  // throws java.io.IOException
  end;

  AAAccountsException = class external 'android.accounts' name 'AccountsException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  ACOperationApplicationException = class external 'android.content' name 'OperationApplicationException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JLString; para2: jint); overload;
    function getNumSuccessfulYieldPoints(): jint; overload; virtual;
  end;

  AGSurfaceTexture = class external 'android.graphics' name 'SurfaceTexture' (JLObject)
  public
    type
      InnerOutOfResourcesException = class;
      Arr1InnerOutOfResourcesException = array of InnerOutOfResourcesException;
      Arr2InnerOutOfResourcesException = array of Arr1InnerOutOfResourcesException;
      Arr3InnerOutOfResourcesException = array of Arr2InnerOutOfResourcesException;
      InnerOnFrameAvailableListener = interface;
      Arr1InnerOnFrameAvailableListener = array of InnerOnFrameAvailableListener;
      Arr2InnerOnFrameAvailableListener = array of Arr1InnerOnFrameAvailableListener;
      Arr3InnerOnFrameAvailableListener = array of Arr2InnerOnFrameAvailableListener;
      InnerOutOfResourcesException = class external 'android.graphics' name 'OutOfResourcesException' (JLException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
      end;

      InnerOnFrameAvailableListener = interface external 'android.graphics' name 'OnFrameAvailableListener' 
        procedure onFrameAvailable(para1: AGSurfaceTexture); overload;
      end;

  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jboolean); overload;
    procedure setOnFrameAvailableListener(para1: AGSurfaceTexture.InnerOnFrameAvailableListener); overload; virtual;
    procedure setOnFrameAvailableListener(para1: AGSurfaceTexture.InnerOnFrameAvailableListener; para2: AOHandler); overload; virtual;
    procedure setDefaultBufferSize(para1: jint; para2: jint); overload; virtual;
    procedure updateTexImage(); overload; virtual;
    procedure releaseTexImage(); overload; virtual;
    procedure detachFromGLContext(); overload; virtual;
    procedure attachToGLContext(para1: jint); overload; virtual;
    procedure getTransformMatrix(para1: Arr1jfloat); overload; virtual;
    procedure getTransformMatrix(var para1: array of jfloat); overload; virtual;
    function getTimestamp(): jlong; overload; virtual;
    procedure release(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  ANSSipException = class external 'android.net.sip' name 'SipException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  ANFormatException = class external 'android.nfc' name 'FormatException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  ASKeyChainException = class external 'android.security' name 'KeyChainException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  AUAndroidException = class external 'android.util' name 'AndroidException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLException); overload;
  end;

  JLReflectiveOperationException = class external 'java.lang' name 'ReflectiveOperationException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  JLClassNotFoundException = class external 'java.lang' name 'ClassNotFoundException' (JLReflectiveOperationException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    function getException(): JLThrowable; overload; virtual;
    function getCause(): JLThrowable; overload; virtual;
  end;

  JLCloneNotSupportedException = class external 'java.lang' name 'CloneNotSupportedException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLIllegalAccessException = class external 'java.lang' name 'IllegalAccessException' (JLReflectiveOperationException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLInstantiationException = class external 'java.lang' name 'InstantiationException' (JLReflectiveOperationException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLInterruptedException = class external 'java.lang' name 'InterruptedException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLNoSuchFieldException = class external 'java.lang' name 'NoSuchFieldException' (JLReflectiveOperationException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLNoSuchMethodException = class external 'java.lang' name 'NoSuchMethodException' (JLReflectiveOperationException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNURISyntaxException = class external 'java.net' name 'URISyntaxException' (JLException)
  public
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getIndex(): jint; overload; virtual;
    function getReason(): JLString; overload; virtual;
    function getInput(): JLString; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JSGeneralSecurityException = class external 'java.security' name 'GeneralSecurityException' (JLException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSPrivilegedActionException = class external 'java.security' name 'PrivilegedActionException' (JLException)
  public
    constructor create(para1: JLException); overload;
    function getException(): JLException; overload; virtual;
  end;

  JSAAclNotFoundException = class external 'java.security.acl' name 'AclNotFoundException' (JLException)
  public
    constructor create(); overload;
  end;

  JSALastOwnerException = class external 'java.security.acl' name 'LastOwnerException' (JLException)
  public
    constructor create(); overload;
  end;

  JSANotOwnerException = class external 'java.security.acl' name 'NotOwnerException' (JLException)
  public
    constructor create(); overload;
  end;

  JTParseException = class external 'java.text' name 'ParseException' (JLException)
  public
    constructor create(para1: JLString; para2: jint); overload;
    function getErrorOffset(): jint; overload; virtual;
  end;

  JUTooManyListenersException = class external 'java.util' name 'TooManyListenersException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JUCBrokenBarrierException = class external 'java.util.concurrent' name 'BrokenBarrierException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JUCExecutionException = class external 'java.util.concurrent' name 'ExecutionException' (JLException)
  strict protected
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  public
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JUCTimeoutException = class external 'java.util.concurrent' name 'TimeoutException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JUPBackingStoreException = class external 'java.util.prefs' name 'BackingStoreException' (JLException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JUPInvalidPreferencesFormatException = class external 'java.util.prefs' name 'InvalidPreferencesFormatException' (JLException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JUZDataFormatException = class external 'java.util.zip' name 'DataFormatException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JSADestroyFailedException = class external 'javax.security.auth' name 'DestroyFailedException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JSACUnsupportedCallbackException = class external 'javax.security.auth.callback' name 'UnsupportedCallbackException' (JLException)
  public
    constructor create(para1: JSACCallback); overload;
    constructor create(para1: JSACCallback; para2: JLString); overload;
    function getCallback(): JSACCallback; overload; virtual;
  end;

  JxSCCertificateException = class external 'javax.security.cert' name 'CertificateException' (JLException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JXDDatatypeConfigurationException = class external 'javax.xml.datatype' name 'DatatypeConfigurationException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
    procedure printStackTrace(); overload; virtual;
    procedure printStackTrace(para1: JIPrintStream); overload; virtual;
    procedure printStackTrace(para1: JIPrintWriter); overload; virtual;
  end;

  JXPParserConfigurationException = class external 'javax.xml.parsers' name 'ParserConfigurationException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JXTTransformerException = class external 'javax.xml.transform' name 'TransformerException' (JLException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JXTSourceLocator); overload;
    constructor create(para1: JLString; para2: JXTSourceLocator; para3: JLThrowable); overload;
    function getLocator(): JXTSourceLocator; overload; virtual;
    procedure setLocator(para1: JXTSourceLocator); overload; virtual;
    function getException(): JLThrowable; overload; virtual;
    function getCause(): JLThrowable; overload; virtual;
    function initCause(para1: JLThrowable): JLThrowable; overload; virtual;
    function getMessageAndLocation(): JLString; overload; virtual;
    function getLocationAsString(): JLString; overload; virtual;
    procedure printStackTrace(); overload; virtual;
    procedure printStackTrace(para1: JIPrintStream); overload; virtual;
    procedure printStackTrace(para1: JIPrintWriter); overload; virtual;
  end;

  JXXXPathException = class external 'javax.xml.xpath' name 'XPathException' (JLException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
    function getCause(): JLThrowable; overload; virtual;
    procedure printStackTrace(para1: JIPrintStream); overload; virtual;
    procedure printStackTrace(); overload; virtual;
    procedure printStackTrace(para1: JIPrintWriter); overload; virtual;
  end;

  OAHHttpException = class external 'org.apache.http' name 'HttpException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OAHICDateParseException = class external 'org.apache.http.impl.cookie' name 'DateParseException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OJJSONException = class external 'org.json' name 'JSONException' (JLException)
  public
    constructor create(para1: JLString); overload;
  end;

  OXSSAXException = class external 'org.xml.sax' name 'SAXException' (JLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLException); overload;
    constructor create(para1: JLString; para2: JLException); overload;
    function getMessage(): JLString; overload; virtual;
    function getException(): JLException; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OXVXmlPullParserException = class external 'org.xmlpull.v1' name 'XmlPullParserException' (JLException)
  strict protected
    var
      fcolumn: jint; external name 'column';
      fdetail: JLThrowable; external name 'detail';
      frow: jint; external name 'row';
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: OXVXmlPullParser; para3: JLThrowable); overload;
    function getDetail(): JLThrowable; overload; virtual;
    function getLineNumber(): jint; overload; virtual;
    function getColumnNumber(): jint; overload; virtual;
    procedure printStackTrace(); overload; virtual;
  end;

  AAAnimator = class abstract external 'android.animation' name 'Animator' (JLObject, JLCloneable)
  public
    type
      InnerAnimatorPauseListener = interface;
      Arr1InnerAnimatorPauseListener = array of InnerAnimatorPauseListener;
      Arr2InnerAnimatorPauseListener = array of Arr1InnerAnimatorPauseListener;
      Arr3InnerAnimatorPauseListener = array of Arr2InnerAnimatorPauseListener;
      InnerAnimatorListener = interface;
      Arr1InnerAnimatorListener = array of InnerAnimatorListener;
      Arr2InnerAnimatorListener = array of Arr1InnerAnimatorListener;
      Arr3InnerAnimatorListener = array of Arr2InnerAnimatorListener;
      InnerAnimatorPauseListener = interface external 'android.animation' name 'AnimatorPauseListener' 
        procedure onAnimationPause(para1: AAAnimator); overload;
        procedure onAnimationResume(para1: AAAnimator); overload;
      end;

      InnerAnimatorListener = interface external 'android.animation' name 'AnimatorListener' 
        procedure onAnimationStart(para1: AAAnimator); overload;
        procedure onAnimationEnd(para1: AAAnimator); overload;
        procedure onAnimationCancel(para1: AAAnimator); overload;
        procedure onAnimationRepeat(para1: AAAnimator); overload;
      end;

  public
    constructor create(); overload;
    procedure start(); overload; virtual;
    procedure cancel(); overload; virtual;
    procedure &end(); overload; virtual;
    procedure pause(); overload; virtual;
    procedure resume(); overload; virtual;
    function isPaused(): jboolean; overload; virtual;
    function getStartDelay(): jlong; overload; virtual; abstract;
    procedure setStartDelay(para1: jlong); overload; virtual; abstract;
    function setDuration(para1: jlong): AAAnimator; overload; virtual; abstract;
    function getDuration(): jlong; overload; virtual; abstract;
    procedure setInterpolator(para1: AATimeInterpolator); overload; virtual; abstract;
    function getInterpolator(): AATimeInterpolator; overload; virtual;
    function isRunning(): jboolean; overload; virtual; abstract;
    function isStarted(): jboolean; overload; virtual;
    procedure addListener(para1: AAAnimator.InnerAnimatorListener); overload; virtual;
    procedure removeListener(para1: AAAnimator.InnerAnimatorListener); overload; virtual;
    function getListeners(): JUArrayList; overload; virtual;
    procedure addPauseListener(para1: AAAnimator.InnerAnimatorPauseListener); overload; virtual;
    procedure removePauseListener(para1: AAAnimator.InnerAnimatorPauseListener); overload; virtual;
    procedure removeAllListeners(); overload; virtual;
    function clone(): AAAnimator; overload; virtual;
    procedure setupStartValues(); overload; virtual;
    procedure setupEndValues(); overload; virtual;
    procedure setTarget(para1: JLObject); overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AAKeyframe = class abstract external 'android.animation' name 'Keyframe' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    class function ofInt(para1: jfloat; para2: jint): AAKeyframe; static; overload;
    class function ofInt(para1: jfloat): AAKeyframe; static; overload;
    class function ofFloat(para1: jfloat; para2: jfloat): AAKeyframe; static; overload;
    class function ofFloat(para1: jfloat): AAKeyframe; static; overload;
    class function ofObject(para1: jfloat; para2: JLObject): AAKeyframe; static; overload;
    class function ofObject(para1: jfloat): AAKeyframe; static; overload;
    function hasValue(): jboolean; overload; virtual;
    function getValue(): JLObject; overload; virtual; abstract;
    procedure setValue(para1: JLObject); overload; virtual; abstract;
    function getFraction(): jfloat; overload; virtual;
    procedure setFraction(para1: jfloat); overload; virtual;
    function getInterpolator(): AATimeInterpolator; overload; virtual;
    procedure setInterpolator(para1: AATimeInterpolator); overload; virtual;
    function getType(): JLClass; overload; virtual;
    function clone(): AAKeyframe; overload; virtual; abstract;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AAPropertyValuesHolder = class external 'android.animation' name 'PropertyValuesHolder' (JLObject, JLCloneable)
  public
    class function ofInt(para1: JLString; para2: Arr1jint): AAPropertyValuesHolder; static; overload;
    class function ofInt(para1: JLString; const para2: array of jint): AAPropertyValuesHolder; static; overload;
    class function ofInt(para1: AUProperty; para2: Arr1jint): AAPropertyValuesHolder; static; overload;
    class function ofInt(para1: AUProperty; const para2: array of jint): AAPropertyValuesHolder; static; overload;
    class function ofMultiInt(para1: JLString; para2: Arr2jint): AAPropertyValuesHolder; static; overload;
    class function ofMultiInt(para1: JLString; para2: AGPath): AAPropertyValuesHolder; static; overload;
    class function ofMultiInt(para1: JLString; para2: AATypeConverter; para3: AATypeEvaluator; para4: Arr1JLObject): AAPropertyValuesHolder; static; overload;
    class function ofMultiInt(para1: JLString; para2: AATypeConverter; para3: AATypeEvaluator; const para4: array of JLObject): AAPropertyValuesHolder; static; overload;
    class function ofMultiInt(para1: JLString; para2: AATypeConverter; para3: AATypeEvaluator; para4: Arr1AAKeyframe): AAPropertyValuesHolder; static; overload;
    class function ofMultiInt(para1: JLString; para2: AATypeConverter; para3: AATypeEvaluator; const para4: array of AAKeyframe): AAPropertyValuesHolder; static; overload;
    class function ofFloat(para1: JLString; para2: Arr1jfloat): AAPropertyValuesHolder; static; overload;
    class function ofFloat(para1: JLString; const para2: array of jfloat): AAPropertyValuesHolder; static; overload;
    class function ofFloat(para1: AUProperty; para2: Arr1jfloat): AAPropertyValuesHolder; static; overload;
    class function ofFloat(para1: AUProperty; const para2: array of jfloat): AAPropertyValuesHolder; static; overload;
    class function ofMultiFloat(para1: JLString; para2: Arr2jfloat): AAPropertyValuesHolder; static; overload;
    class function ofMultiFloat(para1: JLString; para2: AGPath): AAPropertyValuesHolder; static; overload;
    class function ofMultiFloat(para1: JLString; para2: AATypeConverter; para3: AATypeEvaluator; para4: Arr1JLObject): AAPropertyValuesHolder; static; overload;
    class function ofMultiFloat(para1: JLString; para2: AATypeConverter; para3: AATypeEvaluator; const para4: array of JLObject): AAPropertyValuesHolder; static; overload;
    class function ofMultiFloat(para1: JLString; para2: AATypeConverter; para3: AATypeEvaluator; para4: Arr1AAKeyframe): AAPropertyValuesHolder; static; overload;
    class function ofMultiFloat(para1: JLString; para2: AATypeConverter; para3: AATypeEvaluator; const para4: array of AAKeyframe): AAPropertyValuesHolder; static; overload;
    class function ofObject(para1: JLString; para2: AATypeEvaluator; para3: Arr1JLObject): AAPropertyValuesHolder; static; overload;
    class function ofObject(para1: JLString; para2: AATypeEvaluator; const para3: array of JLObject): AAPropertyValuesHolder; static; overload;
    class function ofObject(para1: JLString; para2: AATypeConverter; para3: AGPath): AAPropertyValuesHolder; static; overload;
    class function ofObject(para1: AUProperty; para2: AATypeEvaluator; para3: Arr1JLObject): AAPropertyValuesHolder; static; overload;
    class function ofObject(para1: AUProperty; para2: AATypeEvaluator; const para3: array of JLObject): AAPropertyValuesHolder; static; overload;
    class function ofObject(para1: AUProperty; para2: AATypeConverter; para3: AATypeEvaluator; para4: Arr1JLObject): AAPropertyValuesHolder; static; overload;
    class function ofObject(para1: AUProperty; para2: AATypeConverter; para3: AATypeEvaluator; const para4: array of JLObject): AAPropertyValuesHolder; static; overload;
    class function ofObject(para1: AUProperty; para2: AATypeConverter; para3: AGPath): AAPropertyValuesHolder; static; overload;
    class function ofKeyframe(para1: JLString; para2: Arr1AAKeyframe): AAPropertyValuesHolder; static; overload;
    class function ofKeyframe(para1: JLString; const para2: array of AAKeyframe): AAPropertyValuesHolder; static; overload;
    class function ofKeyframe(para1: AUProperty; para2: Arr1AAKeyframe): AAPropertyValuesHolder; static; overload;
    class function ofKeyframe(para1: AUProperty; const para2: array of AAKeyframe): AAPropertyValuesHolder; static; overload;
    procedure setIntValues(para1: Arr1jint); overload; virtual;
    procedure setIntValues(const para1: array of jint); overload; virtual;
    procedure setFloatValues(para1: Arr1jfloat); overload; virtual;
    procedure setFloatValues(const para1: array of jfloat); overload; virtual;
    procedure setKeyframes(para1: Arr1AAKeyframe); overload; virtual;
    procedure setKeyframes(const para1: array of AAKeyframe); overload; virtual;
    procedure setObjectValues(para1: Arr1JLObject); overload; virtual;
    procedure setObjectValues(const para1: array of JLObject); overload; virtual;
    procedure setConverter(para1: AATypeConverter); overload; virtual;
    function clone(): AAPropertyValuesHolder; overload; virtual;
    procedure setEvaluator(para1: AATypeEvaluator); overload; virtual;
    procedure setPropertyName(para1: JLString); overload; virtual;
    procedure setProperty(para1: AUProperty); overload; virtual;
    function getPropertyName(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AGDSShape = class abstract external 'android.graphics.drawable.shapes' name 'Shape' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    function getWidth(): jfloat; overload; virtual; final;
    function getHeight(): jfloat; overload; virtual; final;
    procedure draw(para1: AGCanvas; para2: AGPaint); overload; virtual; abstract;
    procedure resize(para1: jfloat; para2: jfloat); overload; virtual; final;
    function hasAlpha(): jboolean; overload; virtual;
  strict protected
    procedure onResize(para1: jfloat; para2: jfloat); overload; virtual;
  public
    procedure getOutline(para1: AGOutline); overload; virtual;
    function clone(): AGDSShape; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AUSparseArray = class external 'android.util' name 'SparseArray' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    function clone(): AUSparseArray; overload; virtual;
    function get(para1: jint): JLObject; overload; virtual;
    function get(para1: jint; para2: JLObject): JLObject; overload; virtual;
    procedure delete(para1: jint); overload; virtual;
    procedure remove(para1: jint); overload; virtual;
    procedure removeAt(para1: jint); overload; virtual;
    procedure removeAtRange(para1: jint; para2: jint); overload; virtual;
    procedure put(para1: jint; para2: JLObject); overload; virtual;
    function size(): jint; overload; virtual;
    function keyAt(para1: jint): jint; overload; virtual;
    function valueAt(para1: jint): JLObject; overload; virtual;
    procedure setValueAt(para1: jint; para2: JLObject); overload; virtual;
    function indexOfKey(para1: jint): jint; overload; virtual;
    function indexOfValue(para1: JLObject): jint; overload; virtual;
    procedure clear(); overload; virtual;
    procedure append(para1: jint; para2: JLObject); overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AUSparseBooleanArray = class external 'android.util' name 'SparseBooleanArray' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    function clone(): AUSparseBooleanArray; overload; virtual;
    function get(para1: jint): jboolean; overload; virtual;
    function get(para1: jint; para2: jboolean): jboolean; overload; virtual;
    procedure delete(para1: jint); overload; virtual;
    procedure put(para1: jint; para2: jboolean); overload; virtual;
    function size(): jint; overload; virtual;
    function keyAt(para1: jint): jint; overload; virtual;
    function valueAt(para1: jint): jboolean; overload; virtual;
    function indexOfKey(para1: jint): jint; overload; virtual;
    function indexOfValue(para1: jboolean): jint; overload; virtual;
    procedure clear(); overload; virtual;
    procedure append(para1: jint; para2: jboolean); overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AUSparseIntArray = class external 'android.util' name 'SparseIntArray' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    function clone(): AUSparseIntArray; overload; virtual;
    function get(para1: jint): jint; overload; virtual;
    function get(para1: jint; para2: jint): jint; overload; virtual;
    procedure delete(para1: jint); overload; virtual;
    procedure removeAt(para1: jint); overload; virtual;
    procedure put(para1: jint; para2: jint); overload; virtual;
    function size(): jint; overload; virtual;
    function keyAt(para1: jint): jint; overload; virtual;
    function valueAt(para1: jint): jint; overload; virtual;
    function indexOfKey(para1: jint): jint; overload; virtual;
    function indexOfValue(para1: jint): jint; overload; virtual;
    procedure clear(); overload; virtual;
    procedure append(para1: jint; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AVAAnimation = class abstract external 'android.view.animation' name 'Animation' (JLObject, JLCloneable)
  public
    type
      InnerAnimationListener = interface;
      Arr1InnerAnimationListener = array of InnerAnimationListener;
      Arr2InnerAnimationListener = array of Arr1InnerAnimationListener;
      Arr3InnerAnimationListener = array of Arr2InnerAnimationListener;
      InnerDescription = class;
      Arr1InnerDescription = array of InnerDescription;
      Arr2InnerDescription = array of Arr1InnerDescription;
      Arr3InnerDescription = array of Arr2InnerDescription;
      InnerAnimationListener = interface external 'android.view.animation' name 'AnimationListener' 
        procedure onAnimationStart(para1: AVAAnimation); overload;
        procedure onAnimationEnd(para1: AVAAnimation); overload;
        procedure onAnimationRepeat(para1: AVAAnimation); overload;
      end;

      InnerDescription = class external 'android.view.animation' name 'Description' (JLObject)
      public
        var
          ftype: jint; external name 'type';
          fvalue: jfloat; external name 'value';
      strict protected
        constructor create(); overload;
      end;

  public
    const
      ABSOLUTE = 0;
      INFINITE = -1;
      RELATIVE_TO_PARENT = 2;
      RELATIVE_TO_SELF = 1;
      RESTART = 1;
      REVERSE = 2;
      START_ON_FIRST_FRAME = -1;
      ZORDER_BOTTOM = -1;
      ZORDER_NORMAL = 0;
      ZORDER_TOP = 1;
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
  strict protected
    function clone(): AVAAnimation; overload; virtual;  // throws java.lang.CloneNotSupportedException
  public
    procedure reset(); overload; virtual;
    procedure cancel(); overload; virtual;
    function isInitialized(): jboolean; overload; virtual;
    procedure initialize(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setInterpolator(para1: ACContext; para2: jint); overload; virtual;
    procedure setInterpolator(para1: AVAInterpolator); overload; virtual;
    procedure setStartOffset(para1: jlong); overload; virtual;
    procedure setDuration(para1: jlong); overload; virtual;
    procedure restrictDuration(para1: jlong); overload; virtual;
    procedure scaleCurrentDuration(para1: jfloat); overload; virtual;
    procedure setStartTime(para1: jlong); overload; virtual;
    procedure start(); overload; virtual;
    procedure startNow(); overload; virtual;
    procedure setRepeatMode(para1: jint); overload; virtual;
    procedure setRepeatCount(para1: jint); overload; virtual;
    function isFillEnabled(): jboolean; overload; virtual;
    procedure setFillEnabled(para1: jboolean); overload; virtual;
    procedure setFillBefore(para1: jboolean); overload; virtual;
    procedure setFillAfter(para1: jboolean); overload; virtual;
    procedure setZAdjustment(para1: jint); overload; virtual;
    procedure setBackgroundColor(para1: jint); overload; virtual;
  strict protected
    function getScaleFactor(): jfloat; overload; virtual;
  public
    procedure setDetachWallpaper(para1: jboolean); overload; virtual;
    function getInterpolator(): AVAInterpolator; overload; virtual;
    function getStartTime(): jlong; overload; virtual;
    function getDuration(): jlong; overload; virtual;
    function getStartOffset(): jlong; overload; virtual;
    function getRepeatMode(): jint; overload; virtual;
    function getRepeatCount(): jint; overload; virtual;
    function getFillBefore(): jboolean; overload; virtual;
    function getFillAfter(): jboolean; overload; virtual;
    function getZAdjustment(): jint; overload; virtual;
    function getBackgroundColor(): jint; overload; virtual;
    function getDetachWallpaper(): jboolean; overload; virtual;
    function willChangeTransformationMatrix(): jboolean; overload; virtual;
    function willChangeBounds(): jboolean; overload; virtual;
    procedure setAnimationListener(para1: AVAAnimation.InnerAnimationListener); overload; virtual;
  strict protected
    procedure ensureInterpolator(); overload; virtual;
  public
    function computeDurationHint(): jlong; overload; virtual;
    function getTransformation(para1: jlong; para2: AVATransformation): jboolean; overload; virtual;
    function getTransformation(para1: jlong; para2: AVATransformation; para3: jfloat): jboolean; overload; virtual;
    function hasStarted(): jboolean; overload; virtual;
    function hasEnded(): jboolean; overload; virtual;
  strict protected
    procedure applyTransformation(para1: jfloat; para2: AVATransformation); overload; virtual;
    function resolveSize(para1: jint; para2: jfloat; para3: jint; para4: jint): jfloat; overload; virtual;
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AWWebHistoryItem = class external 'android.webkit' name 'WebHistoryItem' (JLObject, JLCloneable)
  public
    function getUrl(): JLString; overload; virtual;
    function getOriginalUrl(): JLString; overload; virtual;
    function getTitle(): JLString; overload; virtual;
    function getFavicon(): AGBitmap; overload; virtual;
  strict protected
    function clone(): AWWebHistoryItem; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JNHttpCookie = class sealed external 'java.net' name 'HttpCookie' (JLObject, JLCloneable)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    class function domainMatches(para1: JLString; para2: JLString): jboolean; static; overload;
    class function parse(para1: JLString): JUList; static; overload;
    function getComment(): JLString; overload; virtual;
    function getCommentURL(): JLString; overload; virtual;
    function getDiscard(): jboolean; overload; virtual;
    function getDomain(): JLString; overload; virtual;
    function getMaxAge(): jlong; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getPath(): JLString; overload; virtual;
    function getPortlist(): JLString; overload; virtual;
    function getSecure(): jboolean; overload; virtual;
    function getValue(): JLString; overload; virtual;
    function getVersion(): jint; overload; virtual;
    function hasExpired(): jboolean; overload; virtual;
    procedure setComment(para1: JLString); overload; virtual;
    procedure setCommentURL(para1: JLString); overload; virtual;
    procedure setDiscard(para1: jboolean); overload; virtual;
    procedure setDomain(para1: JLString); overload; virtual;
    procedure setMaxAge(para1: jlong); overload; virtual;
    procedure setPath(para1: JLString); overload; virtual;
    procedure setPortlist(para1: JLString); overload; virtual;
    procedure setSecure(para1: jboolean); overload; virtual;
    procedure setValue(para1: JLString); overload; virtual;
    procedure setVersion(para1: jint); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSAAclEntry = interface external 'java.security.acl' name 'AclEntry' (JLCloneable)
    function setPrincipal(para1: JSPrincipal): jboolean; overload;
    function getPrincipal(): JSPrincipal; overload;
    procedure setNegativePermissions(); overload;
    function isNegative(): jboolean; overload;
    function addPermission(para1: JSAPermission): jboolean; overload;
    function removePermission(para1: JSAPermission): jboolean; overload;
    function checkPermission(para1: JSAPermission): jboolean; overload;
    function permissions(): JUEnumeration; overload;
    function toString(): JLString; overload;
    function clone(): JLObject; overload;
  end;

  JSCCRLSelector = interface external 'java.security.cert' name 'CRLSelector' (JLCloneable)
    function clone(): JLObject; overload;
    function match(para1: JSCCRL): jboolean; overload;
  end;

  JSCCertPathBuilderResult = interface external 'java.security.cert' name 'CertPathBuilderResult' (JLCloneable)
    function clone(): JLObject; overload;
    function getCertPath(): JSCCertPath; overload;
  end;

  JSCCertPathParameters = interface external 'java.security.cert' name 'CertPathParameters' (JLCloneable)
    function clone(): JLObject; overload;
  end;

  JSCCertPathValidatorResult = interface external 'java.security.cert' name 'CertPathValidatorResult' (JLCloneable)
    function clone(): JLObject; overload;
  end;

  JSCCertSelector = interface external 'java.security.cert' name 'CertSelector' (JLCloneable)
    function clone(): JLObject; overload;
    function match(para1: JSCCertificate): jboolean; overload;
  end;

  JSCCertStoreParameters = interface external 'java.security.cert' name 'CertStoreParameters' (JLCloneable)
    function clone(): JLObject; overload;
  end;

  JSCPKIXCertPathChecker = class abstract external 'java.security.cert' name 'PKIXCertPathChecker' (JLObject, JLCloneable)
  strict protected
    constructor create(); overload;
  public
    function clone(): JLObject; overload; virtual;
    procedure init(para1: jboolean); overload; virtual; abstract;  // throws java.security.cert.CertPathValidatorException
    function isForwardCheckingSupported(): jboolean; overload; virtual; abstract;
    function getSupportedExtensions(): JUSet; overload; virtual; abstract;
    procedure check(para1: JSCCertificate; para2: JUCollection); overload; virtual; abstract;  // throws java.security.cert.CertPathValidatorException
  end;

  JTBreakIterator = class abstract external 'java.text' name 'BreakIterator' (JLObject, JLCloneable)
  public
    const
      DONE = -1;
  strict protected
    constructor create(); overload;
  public
    class function getAvailableLocales(): Arr1JULocale; static; overload;
    class function getCharacterInstance(): JTBreakIterator; static; overload;
    class function getCharacterInstance(para1: JULocale): JTBreakIterator; static; overload;
    class function getLineInstance(): JTBreakIterator; static; overload;
    class function getLineInstance(para1: JULocale): JTBreakIterator; static; overload;
    class function getSentenceInstance(): JTBreakIterator; static; overload;
    class function getSentenceInstance(para1: JULocale): JTBreakIterator; static; overload;
    class function getWordInstance(): JTBreakIterator; static; overload;
    class function getWordInstance(para1: JULocale): JTBreakIterator; static; overload;
    function isBoundary(para1: jint): jboolean; overload; virtual;
    function preceding(para1: jint): jint; overload; virtual;
    procedure setText(para1: JLString); overload; virtual;
    function current(): jint; overload; virtual; abstract;
    function first(): jint; overload; virtual; abstract;
    function following(para1: jint): jint; overload; virtual; abstract;
    function getText(): JTCharacterIterator; overload; virtual; abstract;
    function last(): jint; overload; virtual; abstract;
    function next(): jint; overload; virtual; abstract;
    function next(para1: jint): jint; overload; virtual; abstract;
    function previous(): jint; overload; virtual; abstract;
    procedure setText(para1: JTCharacterIterator); overload; virtual; abstract;
    function clone(): JLObject; overload; virtual;
  end;

  JTCharacterIterator = interface external 'java.text' name 'CharacterIterator' (JLCloneable)
    const
      DONE = 65535;
    function clone(): JLObject; overload;
    function current(): jchar; overload;
    function first(): jchar; overload;
    function getBeginIndex(): jint; overload;
    function getEndIndex(): jint; overload;
    function getIndex(): jint; overload;
    function last(): jchar; overload;
    function next(): jchar; overload;
    function previous(): jchar; overload;
    function setIndex(para1: jint): jchar; overload;
  end;

  JUJManifest = class external 'java.util.jar' name 'Manifest' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    constructor create(para1: JIInputStream); overload;  // throws java.io.IOException
    constructor create(para1: JUJManifest); overload;
    procedure clear(); overload; virtual;
    function getAttributes(para1: JLString): JUJAttributes; overload; virtual;
    function getEntries(): JUMap; overload; virtual;
    function getMainAttributes(): JUJAttributes; overload; virtual;
    function clone(): JLObject; overload; virtual;
    procedure write(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    procedure read(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  JUZZipEntry = class external 'java.util.zip' name 'ZipEntry' (JLObject, JLCloneable)
  public
    const
      CENATT = 36;
      CENATX = 38;
      CENCOM = 32;
      CENCRC = 16;
      CENDSK = 34;
      CENEXT = 30;
      CENFLG = 8;
      CENHDR = 46;
      CENHOW = 10;
      CENLEN = 24;
      CENNAM = 28;
      CENOFF = 42;
      CENSIG = jlong(33639248);
      CENSIZ = 20;
      CENTIM = 12;
      CENVEM = 4;
      CENVER = 6;
      DEFLATED = 8;
      ENDCOM = 20;
      ENDHDR = 22;
      ENDOFF = 16;
      ENDSIG = jlong(101010256);
      ENDSIZ = 12;
      ENDSUB = 8;
      ENDTOT = 10;
      EXTCRC = 4;
      EXTHDR = 16;
      EXTLEN = 12;
      EXTSIG = jlong(134695760);
      EXTSIZ = 8;
      LOCCRC = 14;
      LOCEXT = 28;
      LOCFLG = 6;
      LOCHDR = 30;
      LOCHOW = 8;
      LOCLEN = 22;
      LOCNAM = 26;
      LOCSIG = jlong(67324752);
      LOCSIZ = 18;
      LOCTIM = 10;
      LOCVER = 4;
      STORED = 0;
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JUZZipEntry); overload;
    function getComment(): JLString; overload; virtual;
    function getCompressedSize(): jlong; overload; virtual;
    function getCrc(): jlong; overload; virtual;
    function getExtra(): Arr1jbyte; overload; virtual;
    function getMethod(): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getSize(): jlong; overload; virtual;
    function getTime(): jlong; overload; virtual;
    function isDirectory(): jboolean; overload; virtual;
    procedure setComment(para1: JLString); overload; virtual;
    procedure setCompressedSize(para1: jlong); overload; virtual;
    procedure setCrc(para1: jlong); overload; virtual;
    procedure setExtra(para1: Arr1jbyte); overload; virtual;
    procedure setExtra(var para1: array of jbyte); overload; virtual;
    procedure setMethod(para1: jint); overload; virtual;
    procedure setSize(para1: jlong); overload; virtual;
    procedure setTime(para1: jlong); overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  JCMac = class external 'javax.crypto' name 'Mac' (JLObject, JLCloneable)
  strict protected
    constructor create(para1: JCMacSpi; para2: JSProvider; para3: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    class function getInstance(para1: JLString): JCMac; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JCMac; static; overload; final;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JCMac; static; overload; final;  // throws java.security.NoSuchAlgorithmException
    function getMacLength(): jint; overload; virtual; final;
    procedure init(para1: JSKey; para2: JSSAlgorithmParameterSpec); overload; virtual; final;  // throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    procedure init(para1: JSKey); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure update(para1: jbyte); overload; virtual; final;  // throws java.lang.IllegalStateException
    procedure update(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; final;  // throws java.lang.IllegalStateException
    procedure update(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; final;  // throws java.lang.IllegalStateException
    procedure update(para1: Arr1jbyte); overload; virtual; final;  // throws java.lang.IllegalStateException
    procedure update(var para1: array of jbyte); overload; virtual; final;  // throws java.lang.IllegalStateException
    procedure update(para1: JNByteBuffer); overload; virtual; final;
    function doFinal(): Arr1jbyte; overload; virtual; final;  // throws java.lang.IllegalStateException
    procedure doFinal(para1: Arr1jbyte; para2: jint); overload; virtual; final;  // throws javax.crypto.ShortBufferException, java.lang.IllegalStateException
    procedure doFinal(var para1: array of jbyte; para2: jint); overload; virtual; final;  // throws javax.crypto.ShortBufferException, java.lang.IllegalStateException
    function doFinal(para1: Arr1jbyte): Arr1jbyte; overload; virtual; final;  // throws java.lang.IllegalStateException
    function doFinal(var para1: array of jbyte): Arr1jbyte; overload; virtual; final;  // throws java.lang.IllegalStateException
    procedure reset(); overload; virtual; final;
    function clone(): JLObject; overload; virtual; final;  // throws java.lang.CloneNotSupportedException
  end;

  JXDXMLGregorianCalendar = class abstract external 'javax.xml.datatype' name 'XMLGregorianCalendar' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    procedure clear(); overload; virtual; abstract;
    procedure reset(); overload; virtual; abstract;
    procedure setYear(para1: JMBigInteger); overload; virtual; abstract;
    procedure setYear(para1: jint); overload; virtual; abstract;
    procedure setMonth(para1: jint); overload; virtual; abstract;
    procedure setDay(para1: jint); overload; virtual; abstract;
    procedure setTimezone(para1: jint); overload; virtual; abstract;
    procedure setTime(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure setHour(para1: jint); overload; virtual; abstract;
    procedure setMinute(para1: jint); overload; virtual; abstract;
    procedure setSecond(para1: jint); overload; virtual; abstract;
    procedure setMillisecond(para1: jint); overload; virtual; abstract;
    procedure setFractionalSecond(para1: JMBigDecimal); overload; virtual; abstract;
    procedure setTime(para1: jint; para2: jint; para3: jint; para4: JMBigDecimal); overload; virtual;
    procedure setTime(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    function getEon(): JMBigInteger; overload; virtual; abstract;
    function getYear(): jint; overload; virtual; abstract;
    function getEonAndYear(): JMBigInteger; overload; virtual; abstract;
    function getMonth(): jint; overload; virtual; abstract;
    function getDay(): jint; overload; virtual; abstract;
    function getTimezone(): jint; overload; virtual; abstract;
    function getHour(): jint; overload; virtual; abstract;
    function getMinute(): jint; overload; virtual; abstract;
    function getSecond(): jint; overload; virtual; abstract;
    function getMillisecond(): jint; overload; virtual;
    function getFractionalSecond(): JMBigDecimal; overload; virtual; abstract;
    function compare(para1: JXDXMLGregorianCalendar): jint; overload; virtual; abstract;
    function normalize(): JXDXMLGregorianCalendar; overload; virtual; abstract;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toXMLFormat(): JLString; overload; virtual; abstract;
    function getXMLSchemaType(): JXNQName; overload; virtual; abstract;
    function toString(): JLString; overload; virtual;
    function isValid(): jboolean; overload; virtual; abstract;
    procedure add(para1: JXDDuration); overload; virtual; abstract;
    function toGregorianCalendar(): JUGregorianCalendar; overload; virtual; abstract;
    function toGregorianCalendar(para1: JUTimeZone; para2: JULocale; para3: JXDXMLGregorianCalendar): JUGregorianCalendar; overload; virtual; abstract;
    function getTimeZone_(para1: jint): JUTimeZone; external name 'getTimeZone'; overload; virtual; abstract;
    function clone(): JLObject; overload; virtual; abstract;
  end;

  OAHHttpHost = class sealed external 'org.apache.http' name 'HttpHost' (JLObject, JLCloneable)
  public
    const
      DEFAULT_SCHEME_NAME = 'http';
  strict protected
    final var
      fhostname: JLString; external name 'hostname';
      flcHostname: JLString; external name 'lcHostname';
      fport: jint; external name 'port';
      fschemeName: JLString; external name 'schemeName';
  public
    constructor create(para1: JLString; para2: jint; para3: JLString); overload;
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: OAHHttpHost); overload;
    function getHostName(): JLString; overload; virtual;
    function getPort(): jint; overload; virtual;
    function getSchemeName(): JLString; overload; virtual;
    function toURI(): JLString; overload; virtual;
    function toHostString(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHMHeaderGroup = class external 'org.apache.http.message' name 'HeaderGroup' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    procedure clear(); overload; virtual;
    procedure addHeader(para1: OAHHeader); overload; virtual;
    procedure removeHeader(para1: OAHHeader); overload; virtual;
    procedure updateHeader(para1: OAHHeader); overload; virtual;
    procedure setHeaders(para1: Arr1OAHHeader); overload; virtual;
    procedure setHeaders(var para1: array of OAHHeader); overload; virtual;
    function getCondensedHeader(para1: JLString): OAHHeader; overload; virtual;
    function getHeaders(para1: JLString): Arr1OAHHeader; overload; virtual;
    function getFirstHeader(para1: JLString): OAHHeader; overload; virtual;
    function getLastHeader(para1: JLString): OAHHeader; overload; virtual;
    function getAllHeaders(): Arr1OAHHeader; overload; virtual;
    function containsHeader(para1: JLString): jboolean; overload; virtual;
    function iterator(): OAHHeaderIterator; overload; virtual;
    function iterator(para1: JLString): OAHHeaderIterator; overload; virtual;
    function copy(): OAHMHeaderGroup; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  ACActivityNotFoundException = class external 'android.content' name 'ActivityNotFoundException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ACRResources = class external 'android.content.res' name 'Resources' (JLObject)
  public
    type
      InnerTheme = class;
      Arr1InnerTheme = array of InnerTheme;
      Arr2InnerTheme = array of Arr1InnerTheme;
      Arr3InnerTheme = array of Arr2InnerTheme;
      InnerNotFoundException = class;
      Arr1InnerNotFoundException = array of InnerNotFoundException;
      Arr2InnerNotFoundException = array of Arr1InnerNotFoundException;
      Arr3InnerNotFoundException = array of Arr2InnerNotFoundException;
      InnerTheme = class sealed external 'android.content.res' name 'Theme' 
      end;

      InnerNotFoundException = class external 'android.content.res' name 'NotFoundException' (JLRuntimeException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
      end;

  public
    constructor create(para1: ACRAssetManager; para2: AUDisplayMetrics; para3: ACRConfiguration); overload;
    class function getSystem(): ACRResources; static; overload;
    function getText(para1: jint): JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getQuantityText(para1: jint; para2: jint): JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getString(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getString(para1: jint; para2: Arr1JLObject): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getString(para1: jint; const para2: array of JLObject): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getQuantityString(para1: jint; para2: jint; para3: Arr1JLObject): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getQuantityString(para1: jint; para2: jint; const para3: array of JLObject): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getQuantityString(para1: jint; para2: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getText(para1: jint; para2: JLCharSequence): JLCharSequence; overload; virtual;
    function getTextArray(para1: jint): Arr1JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getStringArray(para1: jint): Arr1JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getIntArray(para1: jint): Arr1jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function obtainTypedArray(para1: jint): ACRTypedArray; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDimension(para1: jint): jfloat; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDimensionPixelOffset(para1: jint): jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDimensionPixelSize(para1: jint): jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getFraction(para1: jint; para2: jint; para3: jint): jfloat; overload; virtual;
    function getDrawable(para1: jint): AGDDrawable; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDrawable(para1: jint; para2: ACRResources.InnerTheme): AGDDrawable; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDrawableForDensity(para1: jint; para2: jint): AGDDrawable; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDrawableForDensity(para1: jint; para2: jint; para3: ACRResources.InnerTheme): AGDDrawable; overload; virtual;
    function getMovie(para1: jint): AGMovie; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getColor(para1: jint): jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getColorStateList(para1: jint): ACRColorStateList; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getBoolean(para1: jint): jboolean; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getInteger(para1: jint): jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getLayout(para1: jint): ACRXmlResourceParser; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getAnimation(para1: jint): ACRXmlResourceParser; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getXml(para1: jint): ACRXmlResourceParser; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function openRawResource(para1: jint): JIInputStream; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function openRawResource(para1: jint; para2: AUTypedValue): JIInputStream; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function openRawResourceFd(para1: jint): ACRAssetFileDescriptor; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    procedure getValue(para1: jint; para2: AUTypedValue; para3: jboolean); overload; virtual;  // throws android.content.res.Resources$NotFoundException
    procedure getValueForDensity(para1: jint; para2: jint; para3: AUTypedValue; para4: jboolean); overload; virtual;  // throws android.content.res.Resources$NotFoundException
    procedure getValue(para1: JLString; para2: AUTypedValue; para3: jboolean); overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function newTheme(): ACRResources.InnerTheme; overload; virtual; final;
    function obtainAttributes(para1: AUAttributeSet; para2: Arr1jint): ACRTypedArray; overload; virtual;
    function obtainAttributes(para1: AUAttributeSet; var para2: array of jint): ACRTypedArray; overload; virtual;
    procedure updateConfiguration(para1: ACRConfiguration; para2: AUDisplayMetrics); overload; virtual;
    function getDisplayMetrics(): AUDisplayMetrics; overload; virtual;
    function getConfiguration(): ACRConfiguration; overload; virtual;
    function getIdentifier(para1: JLString; para2: JLString; para3: JLString): jint; overload; virtual;
    function getResourceName(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getResourcePackageName(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getResourceTypeName(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getResourceEntryName(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    procedure parseBundleExtras(para1: ACRXmlResourceParser; para2: AOBundle); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure parseBundleExtra(para1: JLString; para2: AUAttributeSet; para3: AOBundle); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException
    function getAssets(): ACRAssetManager; overload; virtual; final;
    procedure flushLayoutCache(); overload; virtual; final;
    procedure finishPreloading(); overload; virtual; final;
  end;

  ADSQLException = class external 'android.database' name 'SQLException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  ADStaleDataException = class external 'android.database' name 'StaleDataException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ANParseException = class external 'android.net' name 'ParseException' (JLRuntimeException)
  public
    var
      fresponse: JLString; external name 'response';
  end;

  AOGLException = class external 'android.opengl' name 'GLException' (JLRuntimeException)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JLString); overload;
  end;

  AONetworkOnMainThreadException = class external 'android.os' name 'NetworkOnMainThreadException' (JLRuntimeException)
  public
    constructor create(); overload;
  end;

  AOParcelFormatException = class external 'android.os' name 'ParcelFormatException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ARRSRuntimeException = class external 'android.renderscript' name 'RSRuntimeException' (JLRuntimeException)
  public
    constructor create(para1: JLString); overload;
  end;

  AUAndroidRuntimeException = class external 'android.util' name 'AndroidRuntimeException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLException); overload;
  end;

  AUNoSuchPropertyException = class external 'android.util' name 'NoSuchPropertyException' (JLRuntimeException)
  public
    constructor create(para1: JLString); overload;
  end;

  AUTimeFormatException = class external 'android.util' name 'TimeFormatException' (JLRuntimeException)
  end;

  AVInflateException = class external 'android.view' name 'InflateException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  AVSurfaceHolder = interface external 'android.view' name 'SurfaceHolder' 
    type
      InnerCallback = interface;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerBadSurfaceTypeException = class;
      Arr1InnerBadSurfaceTypeException = array of InnerBadSurfaceTypeException;
      Arr2InnerBadSurfaceTypeException = array of Arr1InnerBadSurfaceTypeException;
      Arr3InnerBadSurfaceTypeException = array of Arr2InnerBadSurfaceTypeException;
      InnerCallback2 = interface;
      Arr1InnerCallback2 = array of InnerCallback2;
      Arr2InnerCallback2 = array of Arr1InnerCallback2;
      Arr3InnerCallback2 = array of Arr2InnerCallback2;
      InnerCallback = interface external 'android.view' name 'Callback' 
        procedure surfaceCreated(para1: AVSurfaceHolder); overload;
        procedure surfaceChanged(para1: AVSurfaceHolder; para2: jint; para3: jint; para4: jint); overload;
        procedure surfaceDestroyed(para1: AVSurfaceHolder); overload;
      end;

      InnerBadSurfaceTypeException = class external 'android.view' name 'BadSurfaceTypeException' (JLRuntimeException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
      end;

      InnerCallback2 = interface external 'android.view' name 'Callback2' (AVSurfaceHolder.InnerCallback)
        procedure surfaceRedrawNeeded(para1: AVSurfaceHolder); overload;
      end;

    const
      SURFACE_TYPE_GPU = 2 deprecated;
      SURFACE_TYPE_HARDWARE = 1 deprecated;
      SURFACE_TYPE_NORMAL = 0 deprecated;
      SURFACE_TYPE_PUSH_BUFFERS = 3 deprecated;
    procedure addCallback(para1: AVSurfaceHolder.InnerCallback); overload;
    procedure removeCallback(para1: AVSurfaceHolder.InnerCallback); overload;
    function isCreating(): jboolean; overload;
    procedure setType(para1: jint); overload;
    procedure setFixedSize(para1: jint; para2: jint); overload;
    procedure setSizeFromLayout(); overload;
    procedure setFormat(para1: jint); overload;
    procedure setKeepScreenOn(para1: jboolean); overload;
    function lockCanvas(): AGCanvas; overload;
    function lockCanvas(para1: AGRect): AGCanvas; overload;
    procedure unlockCanvasAndPost(para1: AGCanvas); overload;
    function getSurfaceFrame(): AGRect; overload;
    function getSurface(): AVSurface; overload;
  end;

  JLArithmeticException = class external 'java.lang' name 'ArithmeticException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLArrayStoreException = class external 'java.lang' name 'ArrayStoreException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLClassCastException = class external 'java.lang' name 'ClassCastException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLEnumConstantNotPresentException = class external 'java.lang' name 'EnumConstantNotPresentException' (JLRuntimeException)
  public
    constructor create(para1: JLClass; para2: JLString); overload;
    function enumType(): JLClass; overload; virtual;
    function constantName(): JLString; overload; virtual;
  end;

  JLIllegalMonitorStateException = class external 'java.lang' name 'IllegalMonitorStateException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLNegativeArraySizeException = class external 'java.lang' name 'NegativeArraySizeException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLNullPointerException = class external 'java.lang' name 'NullPointerException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLSecurityException = class external 'java.lang' name 'SecurityException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JLTypeNotPresentException = class external 'java.lang' name 'TypeNotPresentException' (JLRuntimeException)
  public
    constructor create(para1: JLString; para2: JLThrowable); overload;
    function typeName(): JLString; overload; virtual;
  end;

  JLAAnnotationTypeMismatchException = class external 'java.lang.annotation' name 'AnnotationTypeMismatchException' (JLRuntimeException)
  public
    constructor create(para1: JLRMethod; para2: JLString); overload;
    function element(): JLRMethod; overload; virtual;
    function foundType(): JLString; overload; virtual;
  end;

  JLAIncompleteAnnotationException = class external 'java.lang.annotation' name 'IncompleteAnnotationException' (JLRuntimeException)
  public
    constructor create(para1: JLClass; para2: JLString); overload;
    function annotationType(): JLClass; overload; virtual;
    function elementName(): JLString; overload; virtual;
  end;

  JLRMalformedParameterizedTypeException = class external 'java.lang.reflect' name 'MalformedParameterizedTypeException' (JLRuntimeException)
  public
    constructor create(); overload;
  end;

  JLRUndeclaredThrowableException = class external 'java.lang.reflect' name 'UndeclaredThrowableException' (JLRuntimeException)
  public
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLThrowable; para2: JLString); overload;
    function getUndeclaredThrowable(): JLThrowable; overload; virtual;
    function getCause(): JLThrowable; overload; virtual;
  end;

  JNBufferOverflowException = class external 'java.nio' name 'BufferOverflowException' (JLRuntimeException)
  public
    constructor create(); overload;
  end;

  JNBufferUnderflowException = class external 'java.nio' name 'BufferUnderflowException' (JLRuntimeException)
  public
    constructor create(); overload;
  end;

  JSProviderException = class external 'java.security' name 'ProviderException' (JLRuntimeException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JUConcurrentModificationException = class external 'java.util' name 'ConcurrentModificationException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JUEmptyStackException = class external 'java.util' name 'EmptyStackException' (JLRuntimeException)
  public
    constructor create(); overload;
  end;

  JUMissingResourceException = class external 'java.util' name 'MissingResourceException' (JLRuntimeException)
  public
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;
    function getClassName(): JLString; overload; virtual;
    function getKey(): JLString; overload; virtual;
  end;

  JUNoSuchElementException = class external 'java.util' name 'NoSuchElementException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JUCRejectedExecutionException = class external 'java.util.concurrent' name 'RejectedExecutionException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  OAHParseException = class external 'org.apache.http' name 'ParseException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OAHIAUnsupportedDigestAlgorithmException = class external 'org.apache.http.impl.auth' name 'UnsupportedDigestAlgorithmException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OWDDOMException = class external 'org.w3c.dom' name 'DOMException' (JLRuntimeException)
  public
    const
      DOMSTRING_SIZE_ERR = 2;
      HIERARCHY_REQUEST_ERR = 3;
      INDEX_SIZE_ERR = 1;
      INUSE_ATTRIBUTE_ERR = 10;
      INVALID_ACCESS_ERR = 15;
      INVALID_CHARACTER_ERR = 5;
      INVALID_MODIFICATION_ERR = 13;
      INVALID_STATE_ERR = 11;
      NAMESPACE_ERR = 14;
      NOT_FOUND_ERR = 8;
      NOT_SUPPORTED_ERR = 9;
      NO_DATA_ALLOWED_ERR = 6;
      NO_MODIFICATION_ALLOWED_ERR = 7;
      SYNTAX_ERR = 12;
      TYPE_MISMATCH_ERR = 17;
      VALIDATION_ERR = 16;
      WRONG_DOCUMENT_ERR = 4;
  public
    var
      fcode: jshort; external name 'code';
  public
    constructor create(para1: jshort; para2: JLString); overload;
  end;

  OWDLLSException = class external 'org.w3c.dom.ls' name 'LSException' (JLRuntimeException)
  public
    const
      PARSE_ERR = 81;
      SERIALIZE_ERR = 82;
  public
    var
      fcode: jshort; external name 'code';
  public
    constructor create(para1: jshort; para2: JLString); overload;
  end;

  JIObjectStreamField = class external 'java.io' name 'ObjectStreamField' (JLObject, JLComparable)
  public
    constructor create(para1: JLString; para2: JLClass); overload;
    constructor create(para1: JLString; para2: JLClass; para3: jboolean); overload;
    function compareTo(para1: JLObject): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getOffset(): jint; overload; virtual;
    function getType(): JLClass; overload; virtual;
    function getTypeCode(): jchar; overload; virtual;
    function getTypeString(): JLString; overload; virtual;
    function isPrimitive(): jboolean; overload; virtual;
  strict protected
    procedure setOffset(para1: jint); overload; virtual;
  public
    function toString(): JLString; overload; virtual;
    function isUnshared(): jboolean; overload; virtual;
  end;

  JTCollationKey = class abstract external 'java.text' name 'CollationKey' (JLObject, JLComparable)
  strict protected
    constructor create(para1: JLString); overload;
  public
    function compareTo(para1: JTCollationKey): jint; overload; virtual; abstract;
    function getSourceString(): JLString; overload; virtual;
    function toByteArray(): Arr1jbyte; overload; virtual; abstract;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JUCDelayed = interface external 'java.util.concurrent' name 'Delayed' (JLComparable)
    function getDelay(para1: JUCTimeUnit): jlong; overload;
  end;

  ACEntityIterator = interface external 'android.content' name 'EntityIterator' (JUIterator)
    procedure reset(); overload;
    procedure close(); overload;
  end;

  JUListIterator = interface external 'java.util' name 'ListIterator' (JUIterator)
    procedure add(para1: JLObject); overload;
    function hasNext(): jboolean; overload;
    function hasPrevious(): jboolean; overload;
    function next(): JLObject; overload;
    function nextIndex(): jint; overload;
    function previous(): JLObject; overload;
    function previousIndex(): jint; overload;
    procedure remove(); overload;
    procedure &set(para1: JLObject); overload;
  end;

  JUScanner = class sealed external 'java.util' name 'Scanner' (JLObject, JICloseable, JUIterator)
  public
    constructor create(para1: JIFile); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JIFile; para2: JLString); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JLString); overload;
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIInputStream; para2: JLString); overload;
    constructor create(para1: JLReadable); overload;
    constructor create(para1: JNCReadableByteChannel); overload;
    constructor create(para1: JNCReadableByteChannel; para2: JLString); overload;
    procedure close(); overload; virtual;
    function delimiter(): JURPattern; overload; virtual;
    function findInLine(para1: JURPattern): JLString; overload; virtual;
    function findInLine(para1: JLString): JLString; overload; virtual;
    function findWithinHorizon(para1: JURPattern; para2: jint): JLString; overload; virtual;
    function findWithinHorizon(para1: JLString; para2: jint): JLString; overload; virtual;
    function hasNext(): jboolean; overload; virtual;
    function hasNext(para1: JURPattern): jboolean; overload; virtual;
    function hasNext(para1: JLString): jboolean; overload; virtual;
    function hasNextBigDecimal(): jboolean; overload; virtual;
    function hasNextBigInteger(): jboolean; overload; virtual;
    function hasNextBigInteger(para1: jint): jboolean; overload; virtual;
    function hasNextBoolean(): jboolean; overload; virtual;
    function hasNextByte(): jboolean; overload; virtual;
    function hasNextByte(para1: jint): jboolean; overload; virtual;
    function hasNextDouble(): jboolean; overload; virtual;
    function hasNextFloat(): jboolean; overload; virtual;
    function hasNextInt(): jboolean; overload; virtual;
    function hasNextInt(para1: jint): jboolean; overload; virtual;
    function hasNextLine(): jboolean; overload; virtual;
    function hasNextLong(): jboolean; overload; virtual;
    function hasNextLong(para1: jint): jboolean; overload; virtual;
    function hasNextShort(): jboolean; overload; virtual;
    function hasNextShort(para1: jint): jboolean; overload; virtual;
    function ioException(): JIIOException; overload; virtual;
    function locale(): JULocale; overload; virtual;
    function match(): JURMatchResult; overload; virtual;
    function next(): JLString; overload; virtual;
    function next(para1: JURPattern): JLString; overload; virtual;
    function next(para1: JLString): JLString; overload; virtual;
    function nextBigDecimal(): JMBigDecimal; overload; virtual;
    function nextBigInteger(): JMBigInteger; overload; virtual;
    function nextBigInteger(para1: jint): JMBigInteger; overload; virtual;
    function nextBoolean(): jboolean; overload; virtual;
    function nextByte(): jbyte; overload; virtual;
    function nextByte(para1: jint): jbyte; overload; virtual;
    function nextDouble(): jdouble; overload; virtual;
    function nextFloat(): jfloat; overload; virtual;
    function nextInt(): jint; overload; virtual;
    function nextInt(para1: jint): jint; overload; virtual;
    function nextLine(): JLString; overload; virtual;
    function nextLong(): jlong; overload; virtual;
    function nextLong(para1: jint): jlong; overload; virtual;
    function nextShort(): jshort; overload; virtual;
    function nextShort(para1: jint): jshort; overload; virtual;
    function radix(): jint; overload; virtual;
    function skip(para1: JURPattern): JUScanner; overload; virtual;
    function skip(para1: JLString): JUScanner; overload; virtual;
    function toString(): JLString; overload; virtual;
    function useDelimiter(para1: JURPattern): JUScanner; overload; virtual;
    function useDelimiter(para1: JLString): JUScanner; overload; virtual;
    function useLocale(para1: JULocale): JUScanner; overload; virtual;
    function useRadix(para1: jint): JUScanner; overload; virtual;
    procedure remove(); overload; virtual;
    function reset(): JUScanner; overload; virtual;
    function next(): JLObject; overload; virtual;
  end;

  OAHHeaderElementIterator = interface external 'org.apache.http' name 'HeaderElementIterator' (JUIterator)
    function hasNext(): jboolean; overload;
    function nextElement(): OAHHeaderElement; overload;
  end;

  OAHHeaderIterator = interface external 'org.apache.http' name 'HeaderIterator' (JUIterator)
    function hasNext(): jboolean; overload;
    function nextHeader(): OAHHeader; overload;
  end;

  OAHTokenIterator = interface external 'org.apache.http' name 'TokenIterator' (JUIterator)
    function hasNext(): jboolean; overload;
    function nextToken(): JLString; overload;
  end;

  ACPPackageItemInfo = class external 'android.content.pm' name 'PackageItemInfo' (JLObject)
  public
    type
      InnerDisplayNameComparator = class;
      Arr1InnerDisplayNameComparator = array of InnerDisplayNameComparator;
      Arr2InnerDisplayNameComparator = array of Arr1InnerDisplayNameComparator;
      Arr3InnerDisplayNameComparator = array of Arr2InnerDisplayNameComparator;
      InnerDisplayNameComparator = class external 'android.content.pm' name 'DisplayNameComparator' (JLObject, JUComparator)
      public
        constructor create(para1: ACPPackageManager); overload;
        function compare(para1: ACPPackageItemInfo; para2: ACPPackageItemInfo): jint; overload; virtual; final;
        function compare(para1: JLObject; para2: JLObject): jint; overload; virtual;
      end;

  public
    var
      fbanner: jint; external name 'banner';
      ficon: jint; external name 'icon';
      flabelRes: jint; external name 'labelRes';
      flogo: jint; external name 'logo';
      fmetaData: AOBundle; external name 'metaData';
      fname: JLString; external name 'name';
      fnonLocalizedLabel: JLCharSequence; external name 'nonLocalizedLabel';
      fpackageName: JLString; external name 'packageName';
  public
    constructor create(); overload;
    constructor create(para1: ACPPackageItemInfo); overload;
  strict protected
    constructor create(para1: AOParcel); overload;
  public
    function loadLabel(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function loadIcon(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function loadBanner(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function loadLogo(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function loadXmlMetaData(para1: ACPPackageManager; para2: JLString): ACRXmlResourceParser; overload; virtual;
  strict protected
    procedure dumpFront(para1: AUPrinter; para2: JLString); overload; virtual;
    procedure dumpBack(para1: AUPrinter; para2: JLString); overload; virtual;
  public
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ADCursorIndexOutOfBoundsException = class external 'android.database' name 'CursorIndexOutOfBoundsException' (JLIndexOutOfBoundsException)
  public
    constructor create(para1: jint; para2: jint); overload;
    constructor create(para1: JLString); overload;
  end;

  JLArrayIndexOutOfBoundsException = class external 'java.lang' name 'ArrayIndexOutOfBoundsException' (JLIndexOutOfBoundsException)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JLString); overload;
  end;

  JLStringIndexOutOfBoundsException = class external 'java.lang' name 'StringIndexOutOfBoundsException' (JLIndexOutOfBoundsException)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JLString); overload;
  end;

  JUServiceLoader = class sealed external 'java.util' name 'ServiceLoader' (JLObject, JLIterable)
  public
    procedure reload(); overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    class function load(para1: JLClass; para2: JLClassLoader): JUServiceLoader; static; overload;
    class function load(para1: JLClass): JUServiceLoader; static; overload;
    class function loadInstalled(para1: JLClass): JUServiceLoader; static; overload;
    function toString(): JLString; overload; virtual;
  end;

  ADCursorJoiner = class sealed external 'android.database' name 'CursorJoiner' (JLObject, JUIterator, JLIterable)
  public
    type
      InnerResult = class;
      Arr1InnerResult = array of InnerResult;
      Arr2InnerResult = array of Arr1InnerResult;
      Arr3InnerResult = array of Arr2InnerResult;
      InnerResult = class sealed external 'android.database' name 'Result' (JLEnum)
      public
        final class var
          fBOTH: ADCursorJoiner.InnerResult; external name 'BOTH';
          fLEFT: ADCursorJoiner.InnerResult; external name 'LEFT';
          fRIGHT: ADCursorJoiner.InnerResult; external name 'RIGHT';
      public
        class function values(): ADCursorJoiner.Arr1InnerResult; static; overload;
        class function valueOf(para1: JLString): ADCursorJoiner.InnerResult; static; overload;
      end;

  public
    constructor create(para1: ADCursor; para2: Arr1JLString; para3: ADCursor; para4: Arr1JLString); overload;
    constructor create(para1: ADCursor; const para2: array of JLString; para3: ADCursor; const para4: array of JLString); overload;
    function iterator(): JUIterator; overload; virtual;
    function hasNext(): jboolean; overload; virtual;
    function next(): ADCursorJoiner.InnerResult; overload; virtual;
    procedure remove(); overload; virtual;
    function next(): JLObject; overload; virtual;
  end;

  AGInterpolator = class external 'android.graphics' name 'Interpolator' (JLObject)
  public
    type
      InnerResult = class;
      Arr1InnerResult = array of InnerResult;
      Arr2InnerResult = array of Arr1InnerResult;
      Arr3InnerResult = array of Arr2InnerResult;
      InnerResult = class sealed external 'android.graphics' name 'Result' (JLEnum)
      public
        final class var
          fFREEZE_END: AGInterpolator.InnerResult; external name 'FREEZE_END';
          fFREEZE_START: AGInterpolator.InnerResult; external name 'FREEZE_START';
          fNORMAL: AGInterpolator.InnerResult; external name 'NORMAL';
      public
        class function values(): AGInterpolator.Arr1InnerResult; static; overload;
        class function valueOf(para1: JLString): AGInterpolator.InnerResult; static; overload;
      end;

  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jint); overload;
    procedure reset(para1: jint); overload; virtual;
    procedure reset(para1: jint; para2: jint); overload; virtual;
    function getKeyFrameCount(): jint; overload; virtual; final;
    function getValueCount(): jint; overload; virtual; final;
    procedure setKeyFrame(para1: jint; para2: jint; para3: Arr1jfloat); overload; virtual;
    procedure setKeyFrame(para1: jint; para2: jint; var para3: array of jfloat); overload; virtual;
    procedure setKeyFrame(para1: jint; para2: jint; para3: Arr1jfloat; para4: Arr1jfloat); overload; virtual;
    procedure setKeyFrame(para1: jint; para2: jint; var para3: array of jfloat; var para4: array of jfloat); overload; virtual;
    procedure setRepeatMirror(para1: jfloat; para2: jboolean); overload; virtual;
    function timeToValues(para1: Arr1jfloat): AGInterpolator.InnerResult; overload; virtual;
    function timeToValues(var para1: array of jfloat): AGInterpolator.InnerResult; overload; virtual;
    function timeToValues(para1: jint; para2: Arr1jfloat): AGInterpolator.InnerResult; overload; virtual;
    function timeToValues(para1: jint; var para2: array of jfloat): AGInterpolator.InnerResult; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGMatrix = class external 'android.graphics' name 'Matrix' (JLObject)
  public
    type
      InnerScaleToFit = class;
      Arr1InnerScaleToFit = array of InnerScaleToFit;
      Arr2InnerScaleToFit = array of Arr1InnerScaleToFit;
      Arr3InnerScaleToFit = array of Arr2InnerScaleToFit;
      InnerScaleToFit = class sealed external 'android.graphics' name 'ScaleToFit' (JLEnum)
      public
        final class var
          fCENTER: AGMatrix.InnerScaleToFit; external name 'CENTER';
          fEND: AGMatrix.InnerScaleToFit; external name 'END';
          fFILL: AGMatrix.InnerScaleToFit; external name 'FILL';
          fSTART: AGMatrix.InnerScaleToFit; external name 'START';
      public
        class function values(): AGMatrix.Arr1InnerScaleToFit; static; overload;
        class function valueOf(para1: JLString): AGMatrix.InnerScaleToFit; static; overload;
      end;

  public
    const
      MPERSP_0 = 6;
      MPERSP_1 = 7;
      MPERSP_2 = 8;
      MSCALE_X = 0;
      MSCALE_Y = 4;
      MSKEW_X = 1;
      MSKEW_Y = 3;
      MTRANS_X = 2;
      MTRANS_Y = 5;
  public
    constructor create(); overload;
    constructor create(para1: AGMatrix); overload;
    function isIdentity(): jboolean; overload; virtual;
    function isAffine(): jboolean; overload; virtual;
    function rectStaysRect(): jboolean; overload; virtual;
    procedure &set(para1: AGMatrix); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure reset(); overload; virtual;
    procedure setTranslate(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setScale(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure setScale(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setRotate(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual;
    procedure setRotate(para1: jfloat); overload; virtual;
    procedure setSinCos(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure setSinCos(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setSkew(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure setSkew(para1: jfloat; para2: jfloat); overload; virtual;
    function setConcat(para1: AGMatrix; para2: AGMatrix): jboolean; overload; virtual;
    function preTranslate(para1: jfloat; para2: jfloat): jboolean; overload; virtual;
    function preScale(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function preScale(para1: jfloat; para2: jfloat): jboolean; overload; virtual;
    function preRotate(para1: jfloat; para2: jfloat; para3: jfloat): jboolean; overload; virtual;
    function preRotate(para1: jfloat): jboolean; overload; virtual;
    function preSkew(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function preSkew(para1: jfloat; para2: jfloat): jboolean; overload; virtual;
    function preConcat(para1: AGMatrix): jboolean; overload; virtual;
    function postTranslate(para1: jfloat; para2: jfloat): jboolean; overload; virtual;
    function postScale(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function postScale(para1: jfloat; para2: jfloat): jboolean; overload; virtual;
    function postRotate(para1: jfloat; para2: jfloat; para3: jfloat): jboolean; overload; virtual;
    function postRotate(para1: jfloat): jboolean; overload; virtual;
    function postSkew(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function postSkew(para1: jfloat; para2: jfloat): jboolean; overload; virtual;
    function postConcat(para1: AGMatrix): jboolean; overload; virtual;
    function setRectToRect(para1: AGRectF; para2: AGRectF; para3: AGMatrix.InnerScaleToFit): jboolean; overload; virtual;
    function setPolyToPoly(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: jint): jboolean; overload; virtual;
    function setPolyToPoly(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; para5: jint): jboolean; overload; virtual;
    function invert(para1: AGMatrix): jboolean; overload; virtual;
    procedure mapPoints(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: jint); overload; virtual;
    procedure mapPoints(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; para5: jint); overload; virtual;
    procedure mapVectors(para1: Arr1jfloat; para2: jint; para3: Arr1jfloat; para4: jint; para5: jint); overload; virtual;
    procedure mapVectors(var para1: array of jfloat; para2: jint; var para3: array of jfloat; para4: jint; para5: jint); overload; virtual;
    procedure mapPoints(para1: Arr1jfloat; para2: Arr1jfloat); overload; virtual;
    procedure mapPoints(var para1: array of jfloat; var para2: array of jfloat); overload; virtual;
    procedure mapVectors(para1: Arr1jfloat; para2: Arr1jfloat); overload; virtual;
    procedure mapVectors(var para1: array of jfloat; var para2: array of jfloat); overload; virtual;
    procedure mapPoints(para1: Arr1jfloat); overload; virtual;
    procedure mapPoints(var para1: array of jfloat); overload; virtual;
    procedure mapVectors(para1: Arr1jfloat); overload; virtual;
    procedure mapVectors(var para1: array of jfloat); overload; virtual;
    function mapRect(para1: AGRectF; para2: AGRectF): jboolean; overload; virtual;
    function mapRect(para1: AGRectF): jboolean; overload; virtual;
    function mapRadius(para1: jfloat): jfloat; overload; virtual;
    procedure getValues(para1: Arr1jfloat); overload; virtual;
    procedure getValues(var para1: array of jfloat); overload; virtual;
    procedure setValues(para1: Arr1jfloat); overload; virtual;
    procedure setValues(var para1: array of jfloat); overload; virtual;
    function toString(): JLString; overload; virtual;
    function toShortString(): JLString; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGPaint = class external 'android.graphics' name 'Paint' (JLObject)
  public
    type
      InnerFontMetricsInt = class;
      Arr1InnerFontMetricsInt = array of InnerFontMetricsInt;
      Arr2InnerFontMetricsInt = array of Arr1InnerFontMetricsInt;
      Arr3InnerFontMetricsInt = array of Arr2InnerFontMetricsInt;
      InnerFontMetrics = class;
      Arr1InnerFontMetrics = array of InnerFontMetrics;
      Arr2InnerFontMetrics = array of Arr1InnerFontMetrics;
      Arr3InnerFontMetrics = array of Arr2InnerFontMetrics;
      InnerAlign = class;
      Arr1InnerAlign = array of InnerAlign;
      Arr2InnerAlign = array of Arr1InnerAlign;
      Arr3InnerAlign = array of Arr2InnerAlign;
      InnerJoin = class;
      Arr1InnerJoin = array of InnerJoin;
      Arr2InnerJoin = array of Arr1InnerJoin;
      Arr3InnerJoin = array of Arr2InnerJoin;
      InnerCap = class;
      Arr1InnerCap = array of InnerCap;
      Arr2InnerCap = array of Arr1InnerCap;
      Arr3InnerCap = array of Arr2InnerCap;
      InnerStyle = class;
      Arr1InnerStyle = array of InnerStyle;
      Arr2InnerStyle = array of Arr1InnerStyle;
      Arr3InnerStyle = array of Arr2InnerStyle;
      InnerFontMetricsInt = class external 'android.graphics' name 'FontMetricsInt' (JLObject)
      public
        var
          fascent: jint; external name 'ascent';
          fbottom: jint; external name 'bottom';
          fdescent: jint; external name 'descent';
          fleading: jint; external name 'leading';
          ftop: jint; external name 'top';
      public
        constructor create(); overload;
        function toString(): JLString; overload; virtual;
      end;

      InnerFontMetrics = class external 'android.graphics' name 'FontMetrics' (JLObject)
      public
        var
          fascent: jfloat; external name 'ascent';
          fbottom: jfloat; external name 'bottom';
          fdescent: jfloat; external name 'descent';
          fleading: jfloat; external name 'leading';
          ftop: jfloat; external name 'top';
      public
        constructor create(); overload;
      end;

      InnerAlign = class sealed external 'android.graphics' name 'Align' (JLEnum)
      public
        final class var
          fCENTER: AGPaint.InnerAlign; external name 'CENTER';
          fLEFT: AGPaint.InnerAlign; external name 'LEFT';
          fRIGHT: AGPaint.InnerAlign; external name 'RIGHT';
      public
        class function values(): AGPaint.Arr1InnerAlign; static; overload;
        class function valueOf(para1: JLString): AGPaint.InnerAlign; static; overload;
      end;

      InnerJoin = class sealed external 'android.graphics' name 'Join' (JLEnum)
      public
        final class var
          fBEVEL: AGPaint.InnerJoin; external name 'BEVEL';
          fMITER: AGPaint.InnerJoin; external name 'MITER';
          fROUND: AGPaint.InnerJoin; external name 'ROUND';
      public
        class function values(): AGPaint.Arr1InnerJoin; static; overload;
        class function valueOf(para1: JLString): AGPaint.InnerJoin; static; overload;
      end;

      InnerCap = class sealed external 'android.graphics' name 'Cap' (JLEnum)
      public
        final class var
          fBUTT: AGPaint.InnerCap; external name 'BUTT';
          fROUND: AGPaint.InnerCap; external name 'ROUND';
          fSQUARE: AGPaint.InnerCap; external name 'SQUARE';
      public
        class function values(): AGPaint.Arr1InnerCap; static; overload;
        class function valueOf(para1: JLString): AGPaint.InnerCap; static; overload;
      end;

      InnerStyle = class sealed external 'android.graphics' name 'Style' (JLEnum)
      public
        final class var
          fFILL: AGPaint.InnerStyle; external name 'FILL';
          fFILL_AND_STROKE: AGPaint.InnerStyle; external name 'FILL_AND_STROKE';
          fSTROKE: AGPaint.InnerStyle; external name 'STROKE';
      public
        class function values(): AGPaint.Arr1InnerStyle; static; overload;
        class function valueOf(para1: JLString): AGPaint.InnerStyle; static; overload;
      end;

  public
    const
      ANTI_ALIAS_FLAG = 1;
      DEV_KERN_TEXT_FLAG = 256;
      DITHER_FLAG = 4;
      EMBEDDED_BITMAP_TEXT_FLAG = 1024;
      FAKE_BOLD_TEXT_FLAG = 32;
      FILTER_BITMAP_FLAG = 2;
      HINTING_OFF = 0;
      HINTING_ON = 1;
      LINEAR_TEXT_FLAG = 64;
      STRIKE_THRU_TEXT_FLAG = 16;
      SUBPIXEL_TEXT_FLAG = 128;
      UNDERLINE_TEXT_FLAG = 8;
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: AGPaint); overload;
    procedure reset(); overload; virtual;
    procedure &set(para1: AGPaint); overload; virtual;
    function getFlags(): jint; overload; virtual;
    procedure setFlags(para1: jint); overload; virtual;
    function getHinting(): jint; overload; virtual;
    procedure setHinting(para1: jint); overload; virtual;
    function isAntiAlias(): jboolean; overload; virtual; final;
    procedure setAntiAlias(para1: jboolean); overload; virtual;
    function isDither(): jboolean; overload; virtual; final;
    procedure setDither(para1: jboolean); overload; virtual;
    function isLinearText(): jboolean; overload; virtual; final;
    procedure setLinearText(para1: jboolean); overload; virtual;
    function isSubpixelText(): jboolean; overload; virtual; final;
    procedure setSubpixelText(para1: jboolean); overload; virtual;
    function isUnderlineText(): jboolean; overload; virtual; final;
    procedure setUnderlineText(para1: jboolean); overload; virtual;
    function isStrikeThruText(): jboolean; overload; virtual; final;
    procedure setStrikeThruText(para1: jboolean); overload; virtual;
    function isFakeBoldText(): jboolean; overload; virtual; final;
    procedure setFakeBoldText(para1: jboolean); overload; virtual;
    function isFilterBitmap(): jboolean; overload; virtual; final;
    procedure setFilterBitmap(para1: jboolean); overload; virtual;
    function getStyle(): AGPaint.InnerStyle; overload; virtual;
    procedure setStyle(para1: AGPaint.InnerStyle); overload; virtual;
    function getColor(): jint; overload; virtual;
    procedure setColor(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    procedure setARGB(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    function getStrokeWidth(): jfloat; overload; virtual;
    procedure setStrokeWidth(para1: jfloat); overload; virtual;
    function getStrokeMiter(): jfloat; overload; virtual;
    procedure setStrokeMiter(para1: jfloat); overload; virtual;
    function getStrokeCap(): AGPaint.InnerCap; overload; virtual;
    procedure setStrokeCap(para1: AGPaint.InnerCap); overload; virtual;
    function getStrokeJoin(): AGPaint.InnerJoin; overload; virtual;
    procedure setStrokeJoin(para1: AGPaint.InnerJoin); overload; virtual;
    function getFillPath(para1: AGPath; para2: AGPath): jboolean; overload; virtual;
    function getShader(): AGShader; overload; virtual;
    function setShader(para1: AGShader): AGShader; overload; virtual;
    function getColorFilter(): AGColorFilter; overload; virtual;
    function setColorFilter(para1: AGColorFilter): AGColorFilter; overload; virtual;
    function getXfermode(): AGXfermode; overload; virtual;
    function setXfermode(para1: AGXfermode): AGXfermode; overload; virtual;
    function getPathEffect(): AGPathEffect; overload; virtual;
    function setPathEffect(para1: AGPathEffect): AGPathEffect; overload; virtual;
    function getMaskFilter(): AGMaskFilter; overload; virtual;
    function setMaskFilter(para1: AGMaskFilter): AGMaskFilter; overload; virtual;
    function getTypeface(): AGTypeface; overload; virtual;
    function setTypeface(para1: AGTypeface): AGTypeface; overload; virtual;
    function getRasterizer(): AGRasterizer; overload; virtual;
    function setRasterizer(para1: AGRasterizer): AGRasterizer; overload; virtual;
    procedure setShadowLayer(para1: jfloat; para2: jfloat; para3: jfloat; para4: jint); overload; virtual;
    procedure clearShadowLayer(); overload; virtual;
    function getTextAlign(): AGPaint.InnerAlign; overload; virtual;
    procedure setTextAlign(para1: AGPaint.InnerAlign); overload; virtual;
    function getTextLocale(): JULocale; overload; virtual;
    procedure setTextLocale(para1: JULocale); overload; virtual;
    function isElegantTextHeight(): jboolean; overload; virtual;
    procedure setElegantTextHeight(para1: jboolean); overload; virtual;
    function getTextSize(): jfloat; overload; virtual;
    procedure setTextSize(para1: jfloat); overload; virtual;
    function getTextScaleX(): jfloat; overload; virtual;
    procedure setTextScaleX(para1: jfloat); overload; virtual;
    function getTextSkewX(): jfloat; overload; virtual;
    procedure setTextSkewX(para1: jfloat); overload; virtual;
    function getLetterSpacing(): jfloat; overload; virtual;
    procedure setLetterSpacing(para1: jfloat); overload; virtual;
    function getFontFeatureSettings(): JLString; overload; virtual;
    procedure setFontFeatureSettings(para1: JLString); overload; virtual;
    function ascent(): jfloat; overload; virtual;
    function descent(): jfloat; overload; virtual;
    function getFontMetrics(para1: AGPaint.InnerFontMetrics): jfloat; overload; virtual;
    function getFontMetrics(): AGPaint.InnerFontMetrics; overload; virtual;
    function getFontMetricsInt(para1: AGPaint.InnerFontMetricsInt): jint; overload; virtual;
    function getFontMetricsInt(): AGPaint.InnerFontMetricsInt; overload; virtual;
    function getFontSpacing(): jfloat; overload; virtual;
    function measureText(para1: Arr1jchar; para2: jint; para3: jint): jfloat; overload; virtual;
    function measureText(var para1: array of jchar; para2: jint; para3: jint): jfloat; overload; virtual;
    function measureText(para1: JLString; para2: jint; para3: jint): jfloat; overload; virtual;
    function measureText(para1: JLString): jfloat; overload; virtual;
    function measureText(para1: JLCharSequence; para2: jint; para3: jint): jfloat; overload; virtual;
    function breakText(para1: Arr1jchar; para2: jint; para3: jint; para4: jfloat; para5: Arr1jfloat): jint; overload; virtual;
    function breakText(var para1: array of jchar; para2: jint; para3: jint; para4: jfloat; var para5: array of jfloat): jint; overload; virtual;
    function breakText(para1: JLCharSequence; para2: jint; para3: jint; para4: jboolean; para5: jfloat; para6: Arr1jfloat): jint; overload; virtual;
    function breakText(para1: JLCharSequence; para2: jint; para3: jint; para4: jboolean; para5: jfloat; var para6: array of jfloat): jint; overload; virtual;
    function breakText(para1: JLString; para2: jboolean; para3: jfloat; para4: Arr1jfloat): jint; overload; virtual;
    function breakText(para1: JLString; para2: jboolean; para3: jfloat; var para4: array of jfloat): jint; overload; virtual;
    function getTextWidths(para1: Arr1jchar; para2: jint; para3: jint; para4: Arr1jfloat): jint; overload; virtual;
    function getTextWidths(var para1: array of jchar; para2: jint; para3: jint; var para4: array of jfloat): jint; overload; virtual;
    function getTextWidths(para1: JLCharSequence; para2: jint; para3: jint; para4: Arr1jfloat): jint; overload; virtual;
    function getTextWidths(para1: JLCharSequence; para2: jint; para3: jint; var para4: array of jfloat): jint; overload; virtual;
    function getTextWidths(para1: JLString; para2: jint; para3: jint; para4: Arr1jfloat): jint; overload; virtual;
    function getTextWidths(para1: JLString; para2: jint; para3: jint; var para4: array of jfloat): jint; overload; virtual;
    function getTextWidths(para1: JLString; para2: Arr1jfloat): jint; overload; virtual;
    function getTextWidths(para1: JLString; var para2: array of jfloat): jint; overload; virtual;
    procedure getTextPath(para1: Arr1jchar; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: AGPath); overload; virtual;
    procedure getTextPath(var para1: array of jchar; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: AGPath); overload; virtual;
    procedure getTextPath(para1: JLString; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: AGPath); overload; virtual;
    procedure getTextBounds(para1: JLString; para2: jint; para3: jint; para4: AGRect); overload; virtual;
    procedure getTextBounds(para1: Arr1jchar; para2: jint; para3: jint; para4: AGRect); overload; virtual;
    procedure getTextBounds(var para1: array of jchar; para2: jint; para3: jint; para4: AGRect); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGPath = class external 'android.graphics' name 'Path' (JLObject)
  public
    type
      InnerDirection = class;
      Arr1InnerDirection = array of InnerDirection;
      Arr2InnerDirection = array of Arr1InnerDirection;
      Arr3InnerDirection = array of Arr2InnerDirection;
      InnerFillType = class;
      Arr1InnerFillType = array of InnerFillType;
      Arr2InnerFillType = array of Arr1InnerFillType;
      Arr3InnerFillType = array of Arr2InnerFillType;
      InnerOp = class;
      Arr1InnerOp = array of InnerOp;
      Arr2InnerOp = array of Arr1InnerOp;
      Arr3InnerOp = array of Arr2InnerOp;
      InnerDirection = class sealed external 'android.graphics' name 'Direction' (JLEnum)
      public
        final class var
          fCCW: AGPath.InnerDirection; external name 'CCW';
          fCW: AGPath.InnerDirection; external name 'CW';
      public
        class function values(): AGPath.Arr1InnerDirection; static; overload;
        class function valueOf(para1: JLString): AGPath.InnerDirection; static; overload;
      end;

      InnerFillType = class sealed external 'android.graphics' name 'FillType' (JLEnum)
      public
        final class var
          fEVEN_ODD: AGPath.InnerFillType; external name 'EVEN_ODD';
          fINVERSE_EVEN_ODD: AGPath.InnerFillType; external name 'INVERSE_EVEN_ODD';
          fINVERSE_WINDING: AGPath.InnerFillType; external name 'INVERSE_WINDING';
          fWINDING: AGPath.InnerFillType; external name 'WINDING';
      public
        class function values(): AGPath.Arr1InnerFillType; static; overload;
        class function valueOf(para1: JLString): AGPath.InnerFillType; static; overload;
      end;

      InnerOp = class sealed external 'android.graphics' name 'Op' (JLEnum)
      public
        final class var
          fDIFFERENCE: AGPath.InnerOp; external name 'DIFFERENCE';
          fINTERSECT: AGPath.InnerOp; external name 'INTERSECT';
          fREVERSE_DIFFERENCE: AGPath.InnerOp; external name 'REVERSE_DIFFERENCE';
          fUNION: AGPath.InnerOp; external name 'UNION';
          fXOR: AGPath.InnerOp; external name 'XOR';
      public
        class function values(): AGPath.Arr1InnerOp; static; overload;
        class function valueOf(para1: JLString): AGPath.InnerOp; static; overload;
      end;

  public
    constructor create(); overload;
    constructor create(para1: AGPath); overload;
    procedure reset(); overload; virtual;
    procedure rewind(); overload; virtual;
    procedure &set(para1: AGPath); overload; virtual;
    function op(para1: AGPath; para2: AGPath.InnerOp): jboolean; overload; virtual;
    function op(para1: AGPath; para2: AGPath; para3: AGPath.InnerOp): jboolean; overload; virtual;
    function isConvex(): jboolean; overload; virtual;
    function getFillType(): AGPath.InnerFillType; overload; virtual;
    procedure setFillType(para1: AGPath.InnerFillType); overload; virtual;
    function isInverseFillType(): jboolean; overload; virtual;
    procedure toggleInverseFillType(); overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function isRect(para1: AGRectF): jboolean; overload; virtual;
    procedure computeBounds(para1: AGRectF; para2: jboolean); overload; virtual;
    procedure incReserve(para1: jint); overload; virtual;
    procedure moveTo(para1: jfloat; para2: jfloat); overload; virtual;
    procedure rMoveTo(para1: jfloat; para2: jfloat); overload; virtual;
    procedure lineTo(para1: jfloat; para2: jfloat); overload; virtual;
    procedure rLineTo(para1: jfloat; para2: jfloat); overload; virtual;
    procedure quadTo(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure rQuadTo(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure cubicTo(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); overload; virtual;
    procedure rCubicTo(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); overload; virtual;
    procedure arcTo(para1: AGRectF; para2: jfloat; para3: jfloat; para4: jboolean); overload; virtual;
    procedure arcTo(para1: AGRectF; para2: jfloat; para3: jfloat); overload; virtual;
    procedure arcTo(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jboolean); overload; virtual;
    procedure close(); overload; virtual;
    procedure addRect(para1: AGRectF; para2: AGPath.InnerDirection); overload; virtual;
    procedure addRect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGPath.InnerDirection); overload; virtual;
    procedure addOval(para1: AGRectF; para2: AGPath.InnerDirection); overload; virtual;
    procedure addOval(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGPath.InnerDirection); overload; virtual;
    procedure addCircle(para1: jfloat; para2: jfloat; para3: jfloat; para4: AGPath.InnerDirection); overload; virtual;
    procedure addArc(para1: AGRectF; para2: jfloat; para3: jfloat); overload; virtual;
    procedure addArc(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); overload; virtual;
    procedure addRoundRect(para1: AGRectF; para2: jfloat; para3: jfloat; para4: AGPath.InnerDirection); overload; virtual;
    procedure addRoundRect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: AGPath.InnerDirection); overload; virtual;
    procedure addRoundRect(para1: AGRectF; para2: Arr1jfloat; para3: AGPath.InnerDirection); overload; virtual;
    procedure addRoundRect(para1: AGRectF; var para2: array of jfloat; para3: AGPath.InnerDirection); overload; virtual;
    procedure addRoundRect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: Arr1jfloat; para6: AGPath.InnerDirection); overload; virtual;
    procedure addRoundRect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; var para5: array of jfloat; para6: AGPath.InnerDirection); overload; virtual;
    procedure addPath(para1: AGPath; para2: jfloat; para3: jfloat); overload; virtual;
    procedure addPath(para1: AGPath); overload; virtual;
    procedure addPath(para1: AGPath; para2: AGMatrix); overload; virtual;
    procedure offset(para1: jfloat; para2: jfloat; para3: AGPath); overload; virtual;
    procedure offset(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setLastPoint(para1: jfloat; para2: jfloat); overload; virtual;
    procedure transform(para1: AGMatrix; para2: AGPath); overload; virtual;
    procedure transform(para1: AGMatrix); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGPorterDuff = class external 'android.graphics' name 'PorterDuff' (JLObject)
  public
    type
      InnerMode = class;
      Arr1InnerMode = array of InnerMode;
      Arr2InnerMode = array of Arr1InnerMode;
      Arr3InnerMode = array of Arr2InnerMode;
      InnerMode = class sealed external 'android.graphics' name 'Mode' (JLEnum)
      public
        final class var
          fADD: AGPorterDuff.InnerMode; external name 'ADD';
          fCLEAR: AGPorterDuff.InnerMode; external name 'CLEAR';
          fDARKEN: AGPorterDuff.InnerMode; external name 'DARKEN';
          fDST: AGPorterDuff.InnerMode; external name 'DST';
          fDST_ATOP: AGPorterDuff.InnerMode; external name 'DST_ATOP';
          fDST_IN: AGPorterDuff.InnerMode; external name 'DST_IN';
          fDST_OUT: AGPorterDuff.InnerMode; external name 'DST_OUT';
          fDST_OVER: AGPorterDuff.InnerMode; external name 'DST_OVER';
          fLIGHTEN: AGPorterDuff.InnerMode; external name 'LIGHTEN';
          fMULTIPLY: AGPorterDuff.InnerMode; external name 'MULTIPLY';
          fOVERLAY: AGPorterDuff.InnerMode; external name 'OVERLAY';
          fSCREEN: AGPorterDuff.InnerMode; external name 'SCREEN';
          fSRC: AGPorterDuff.InnerMode; external name 'SRC';
          fSRC_ATOP: AGPorterDuff.InnerMode; external name 'SRC_ATOP';
          fSRC_IN: AGPorterDuff.InnerMode; external name 'SRC_IN';
          fSRC_OUT: AGPorterDuff.InnerMode; external name 'SRC_OUT';
          fSRC_OVER: AGPorterDuff.InnerMode; external name 'SRC_OVER';
          fXOR: AGPorterDuff.InnerMode; external name 'XOR';
      public
        class function values(): AGPorterDuff.Arr1InnerMode; static; overload;
        class function valueOf(para1: JLString): AGPorterDuff.InnerMode; static; overload;
      end;

  public
    constructor create(); overload;
  end;

  AGShader = class external 'android.graphics' name 'Shader' (JLObject)
  public
    type
      InnerTileMode = class;
      Arr1InnerTileMode = array of InnerTileMode;
      Arr2InnerTileMode = array of Arr1InnerTileMode;
      Arr3InnerTileMode = array of Arr2InnerTileMode;
      InnerTileMode = class sealed external 'android.graphics' name 'TileMode' (JLEnum)
      public
        final class var
          fCLAMP: AGShader.InnerTileMode; external name 'CLAMP';
          fMIRROR: AGShader.InnerTileMode; external name 'MIRROR';
          fREPEAT: AGShader.InnerTileMode; external name 'REPEAT';
      public
        class function values(): AGShader.Arr1InnerTileMode; static; overload;
        class function valueOf(para1: JLString): AGShader.InnerTileMode; static; overload;
      end;

  public
    constructor create(); overload;
    function getLocalMatrix(para1: AGMatrix): jboolean; overload; virtual;
    procedure setLocalMatrix(para1: AGMatrix); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  ANLocalSocketAddress = class external 'android.net' name 'LocalSocketAddress' (JLObject)
  public
    type
      InnerNamespace = class;
      Arr1InnerNamespace = array of InnerNamespace;
      Arr2InnerNamespace = array of Arr1InnerNamespace;
      Arr3InnerNamespace = array of Arr2InnerNamespace;
      InnerNamespace = class sealed external 'android.net' name 'Namespace' (JLEnum)
      public
        final class var
          fABSTRACT: ANLocalSocketAddress.InnerNamespace; external name 'ABSTRACT';
          fFILESYSTEM: ANLocalSocketAddress.InnerNamespace; external name 'FILESYSTEM';
          fRESERVED: ANLocalSocketAddress.InnerNamespace; external name 'RESERVED';
      public
        class function values(): ANLocalSocketAddress.Arr1InnerNamespace; static; overload;
        class function valueOf(para1: JLString): ANLocalSocketAddress.InnerNamespace; static; overload;
      end;

  public
    constructor create(para1: JLString; para2: ANLocalSocketAddress.InnerNamespace); overload;
    constructor create(para1: JLString); overload;
    function getName(): JLString; overload; virtual;
    function getNamespace(): ANLocalSocketAddress.InnerNamespace; overload; virtual;
  end;

  AOAsyncTask = class abstract external 'android.os' name 'AsyncTask' (JLObject)
  public
    type
      InnerStatus = class;
      Arr1InnerStatus = array of InnerStatus;
      Arr2InnerStatus = array of Arr1InnerStatus;
      Arr3InnerStatus = array of Arr2InnerStatus;
      InnerStatus = class sealed external 'android.os' name 'Status' (JLEnum)
      public
        final class var
          fFINISHED: AOAsyncTask.InnerStatus; external name 'FINISHED';
          fPENDING: AOAsyncTask.InnerStatus; external name 'PENDING';
          fRUNNING: AOAsyncTask.InnerStatus; external name 'RUNNING';
      public
        class function values(): AOAsyncTask.Arr1InnerStatus; static; overload;
        class function valueOf(para1: JLString): AOAsyncTask.InnerStatus; static; overload;
      end;

  public
    final class var
      fSERIAL_EXECUTOR: JUCExecutor; external name 'SERIAL_EXECUTOR';
      fTHREAD_POOL_EXECUTOR: JUCExecutor; external name 'THREAD_POOL_EXECUTOR';
  public
    constructor create(); overload;
    function getStatus(): AOAsyncTask.InnerStatus; overload; virtual; final;
  strict protected
    function doInBackground(para1: Arr1JLObject): JLObject; overload; virtual; abstract;
    function doInBackground(const para1: array of JLObject): JLObject; overload; virtual; abstract;
    procedure onPreExecute(); overload; virtual;
    procedure onPostExecute(para1: JLObject); overload; virtual;
    procedure onProgressUpdate(para1: Arr1JLObject); overload; virtual;
    procedure onProgressUpdate(const para1: array of JLObject); overload; virtual;
    procedure onCancelled(para1: JLObject); overload; virtual;
    procedure onCancelled(); overload; virtual;
  public
    function isCancelled(): jboolean; overload; virtual; final;
    function cancel(para1: jboolean): jboolean; overload; virtual; final;
    function get(): JLObject; overload; virtual; final;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    function get(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual; final;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    function execute(para1: Arr1JLObject): AOAsyncTask; overload; virtual; final;
    function execute(const para1: array of JLObject): AOAsyncTask; overload; virtual; final;
    function executeOnExecutor(para1: JUCExecutor; para2: Arr1JLObject): AOAsyncTask; overload; virtual; final;
    function executeOnExecutor(para1: JUCExecutor; const para2: array of JLObject): AOAsyncTask; overload; virtual; final;
    class procedure execute(para1: JLRunnable); static; overload;
  strict protected
    procedure publishProgress(para1: Arr1JLObject); overload; virtual; final;
    procedure publishProgress(const para1: array of JLObject); overload; virtual; final;
  end;

  ATSmsMessage = class external 'android.telephony' name 'SmsMessage' (JLObject)
  public
    type
      InnerSubmitPdu = class;
      Arr1InnerSubmitPdu = array of InnerSubmitPdu;
      Arr2InnerSubmitPdu = array of Arr1InnerSubmitPdu;
      Arr3InnerSubmitPdu = array of Arr2InnerSubmitPdu;
      InnerMessageClass = class;
      Arr1InnerMessageClass = array of InnerMessageClass;
      Arr2InnerMessageClass = array of Arr1InnerMessageClass;
      Arr3InnerMessageClass = array of Arr2InnerMessageClass;
      InnerSubmitPdu = class external 'android.telephony' name 'SubmitPdu' (JLObject)
      public
        var
          fencodedMessage: Arr1jbyte; external name 'encodedMessage';
          fencodedScAddress: Arr1jbyte; external name 'encodedScAddress';
      public
        function toString(): JLString; overload; virtual;
      end;

      InnerMessageClass = class sealed external 'android.telephony' name 'MessageClass' (JLEnum)
      public
        final class var
          fCLASS_0: ATSmsMessage.InnerMessageClass; external name 'CLASS_0';
          fCLASS_1: ATSmsMessage.InnerMessageClass; external name 'CLASS_1';
          fCLASS_2: ATSmsMessage.InnerMessageClass; external name 'CLASS_2';
          fCLASS_3: ATSmsMessage.InnerMessageClass; external name 'CLASS_3';
          fUNKNOWN: ATSmsMessage.InnerMessageClass; external name 'UNKNOWN';
      public
        class function values(): ATSmsMessage.Arr1InnerMessageClass; static; overload;
        class function valueOf(para1: JLString): ATSmsMessage.InnerMessageClass; static; overload;
      end;

  public
    const
      ENCODING_16BIT = 3;
      ENCODING_7BIT = 1;
      ENCODING_8BIT = 2;
      ENCODING_UNKNOWN = 0;
      MAX_USER_DATA_BYTES = 140;
      MAX_USER_DATA_BYTES_WITH_HEADER = 134;
      MAX_USER_DATA_SEPTETS = 160;
      MAX_USER_DATA_SEPTETS_WITH_HEADER = 153;
  public
    class function createFromPdu(para1: Arr1jbyte): ATSmsMessage; static; overload;
    class function createFromPdu(var para1: array of jbyte): ATSmsMessage; static; overload;
    class function getTPLayerLengthForPDU(para1: JLString): jint; static; overload;
    class function calculateLength(para1: JLCharSequence; para2: jboolean): Arr1jint; static; overload;
    class function calculateLength(para1: JLString; para2: jboolean): Arr1jint; static; overload;
    class function getSubmitPdu(para1: JLString; para2: JLString; para3: JLString; para4: jboolean): ATSmsMessage.InnerSubmitPdu; static; overload;
    class function getSubmitPdu(para1: JLString; para2: JLString; para3: jshort; para4: Arr1jbyte; para5: jboolean): ATSmsMessage.InnerSubmitPdu; static; overload;
    class function getSubmitPdu(para1: JLString; para2: JLString; para3: jshort; var para4: array of jbyte; para5: jboolean): ATSmsMessage.InnerSubmitPdu; static; overload;
    function getServiceCenterAddress(): JLString; overload; virtual;
    function getOriginatingAddress(): JLString; overload; virtual;
    function getDisplayOriginatingAddress(): JLString; overload; virtual;
    function getMessageBody(): JLString; overload; virtual;
    function getMessageClass(): ATSmsMessage.InnerMessageClass; overload; virtual;
    function getDisplayMessageBody(): JLString; overload; virtual;
    function getPseudoSubject(): JLString; overload; virtual;
    function getTimestampMillis(): jlong; overload; virtual;
    function isEmail(): jboolean; overload; virtual;
    function getEmailBody(): JLString; overload; virtual;
    function getEmailFrom(): JLString; overload; virtual;
    function getProtocolIdentifier(): jint; overload; virtual;
    function isReplace(): jboolean; overload; virtual;
    function isCphsMwiMessage(): jboolean; overload; virtual;
    function isMWIClearMessage(): jboolean; overload; virtual;
    function isMWISetMessage(): jboolean; overload; virtual;
    function isMwiDontStore(): jboolean; overload; virtual;
    function getUserData(): Arr1jbyte; overload; virtual;
    function getPdu(): Arr1jbyte; overload; virtual;
    function getStatusOnSim(): jint; overload; virtual;
    function getStatusOnIcc(): jint; overload; virtual;
    function getIndexOnSim(): jint; overload; virtual;
    function getIndexOnIcc(): jint; overload; virtual;
    function getStatus(): jint; overload; virtual;
    function isStatusReportMessage(): jboolean; overload; virtual;
    function isReplyPathPresent(): jboolean; overload; virtual;
  end;

  ATGSmsMessage = class external 'android.telephony.gsm' name 'SmsMessage' (JLObject)
  public
    type
      InnerSubmitPdu = class;
      Arr1InnerSubmitPdu = array of InnerSubmitPdu;
      Arr2InnerSubmitPdu = array of Arr1InnerSubmitPdu;
      Arr3InnerSubmitPdu = array of Arr2InnerSubmitPdu;
      InnerMessageClass = class;
      Arr1InnerMessageClass = array of InnerMessageClass;
      Arr2InnerMessageClass = array of Arr1InnerMessageClass;
      Arr3InnerMessageClass = array of Arr2InnerMessageClass;
      InnerSubmitPdu = class external 'android.telephony.gsm' name 'SubmitPdu' (JLObject)
      public
        var
          fencodedMessage: Arr1jbyte deprecated; external name 'encodedMessage';
          fencodedScAddress: Arr1jbyte deprecated; external name 'encodedScAddress';
      public
        constructor create(); overload;
        function toString(): JLString; overload; virtual;
      end;

      InnerMessageClass = class sealed external 'android.telephony.gsm' name 'MessageClass' (JLEnum)
      public
        final class var
          fCLASS_0: ATGSmsMessage.InnerMessageClass; external name 'CLASS_0';
          fCLASS_1: ATGSmsMessage.InnerMessageClass; external name 'CLASS_1';
          fCLASS_2: ATGSmsMessage.InnerMessageClass; external name 'CLASS_2';
          fCLASS_3: ATGSmsMessage.InnerMessageClass; external name 'CLASS_3';
          fUNKNOWN: ATGSmsMessage.InnerMessageClass; external name 'UNKNOWN';
      public
        class function values(): ATGSmsMessage.Arr1InnerMessageClass; static; overload;
        class function valueOf(para1: JLString): ATGSmsMessage.InnerMessageClass; static; overload;
      end;

  public
    const
      ENCODING_16BIT = 3 deprecated;
      ENCODING_7BIT = 1 deprecated;
      ENCODING_8BIT = 2 deprecated;
      ENCODING_UNKNOWN = 0 deprecated;
      MAX_USER_DATA_BYTES = 140 deprecated;
      MAX_USER_DATA_SEPTETS = 160 deprecated;
      MAX_USER_DATA_SEPTETS_WITH_HEADER = 153 deprecated;
  public
    constructor create(); overload;
    class function createFromPdu(para1: Arr1jbyte): ATGSmsMessage; static; overload;
    class function createFromPdu(var para1: array of jbyte): ATGSmsMessage; static; overload;
    class function getTPLayerLengthForPDU(para1: JLString): jint; static; overload;
    class function calculateLength(para1: JLCharSequence; para2: jboolean): Arr1jint; static; overload;
    class function calculateLength(para1: JLString; para2: jboolean): Arr1jint; static; overload;
    class function getSubmitPdu(para1: JLString; para2: JLString; para3: JLString; para4: jboolean): ATGSmsMessage.InnerSubmitPdu; static; overload;
    class function getSubmitPdu(para1: JLString; para2: JLString; para3: jshort; para4: Arr1jbyte; para5: jboolean): ATGSmsMessage.InnerSubmitPdu; static; overload;
    class function getSubmitPdu(para1: JLString; para2: JLString; para3: jshort; var para4: array of jbyte; para5: jboolean): ATGSmsMessage.InnerSubmitPdu; static; overload;
    function getServiceCenterAddress(): JLString; overload; virtual;
    function getOriginatingAddress(): JLString; overload; virtual;
    function getDisplayOriginatingAddress(): JLString; overload; virtual;
    function getMessageBody(): JLString; overload; virtual;
    function getMessageClass(): ATGSmsMessage.InnerMessageClass; overload; virtual;
    function getDisplayMessageBody(): JLString; overload; virtual;
    function getPseudoSubject(): JLString; overload; virtual;
    function getTimestampMillis(): jlong; overload; virtual;
    function isEmail(): jboolean; overload; virtual;
    function getEmailBody(): JLString; overload; virtual;
    function getEmailFrom(): JLString; overload; virtual;
    function getProtocolIdentifier(): jint; overload; virtual;
    function isReplace(): jboolean; overload; virtual;
    function isCphsMwiMessage(): jboolean; overload; virtual;
    function isMWIClearMessage(): jboolean; overload; virtual;
    function isMWISetMessage(): jboolean; overload; virtual;
    function isMwiDontStore(): jboolean; overload; virtual;
    function getUserData(): Arr1jbyte; overload; virtual;
    function getPdu(): Arr1jbyte; overload; virtual;
    function getStatusOnSim(): jint; overload; virtual;
    function getIndexOnSim(): jint; overload; virtual;
    function getStatus(): jint; overload; virtual;
    function isStatusReportMessage(): jboolean; overload; virtual;
    function isReplyPathPresent(): jboolean; overload; virtual;
  end;

  ATLayout = class abstract external 'android.text' name 'Layout' (JLObject)
  public
    type
      InnerAlignment = class;
      Arr1InnerAlignment = array of InnerAlignment;
      Arr2InnerAlignment = array of Arr1InnerAlignment;
      Arr3InnerAlignment = array of Arr2InnerAlignment;
      InnerDirections = class;
      Arr1InnerDirections = array of InnerDirections;
      Arr2InnerDirections = array of Arr1InnerDirections;
      Arr3InnerDirections = array of Arr2InnerDirections;
      InnerAlignment = class sealed external 'android.text' name 'Alignment' (JLEnum)
      public
        final class var
          fALIGN_CENTER: ATLayout.InnerAlignment; external name 'ALIGN_CENTER';
          fALIGN_NORMAL: ATLayout.InnerAlignment; external name 'ALIGN_NORMAL';
          fALIGN_OPPOSITE: ATLayout.InnerAlignment; external name 'ALIGN_OPPOSITE';
      public
        class function values(): ATLayout.Arr1InnerAlignment; static; overload;
        class function valueOf(para1: JLString): ATLayout.InnerAlignment; static; overload;
      end;

      InnerDirections = class external 'android.text' name 'Directions' (JLObject)
      end;

  public
    const
      DIR_LEFT_TO_RIGHT = 1;
      DIR_RIGHT_TO_LEFT = -1;
  strict protected
    constructor create(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat); overload;
  public
    class function getDesiredWidth(para1: JLCharSequence; para2: ATTextPaint): jfloat; static; overload;
    class function getDesiredWidth(para1: JLCharSequence; para2: jint; para3: jint; para4: ATTextPaint): jfloat; static; overload;
    procedure draw(para1: AGCanvas); overload; virtual;
    procedure draw(para1: AGCanvas; para2: AGPath; para3: AGPaint; para4: jint); overload; virtual;
    function getText(): JLCharSequence; overload; virtual; final;
    function getPaint(): ATTextPaint; overload; virtual; final;
    function getWidth(): jint; overload; virtual; final;
    function getEllipsizedWidth(): jint; overload; virtual;
    procedure increaseWidthTo(para1: jint); overload; virtual; final;
    function getHeight(): jint; overload; virtual;
    function getAlignment(): ATLayout.InnerAlignment; overload; virtual; final;
    function getSpacingMultiplier(): jfloat; overload; virtual; final;
    function getSpacingAdd(): jfloat; overload; virtual; final;
    function getLineCount(): jint; overload; virtual; abstract;
    function getLineBounds(para1: jint; para2: AGRect): jint; overload; virtual;
    function getLineTop(para1: jint): jint; overload; virtual; abstract;
    function getLineDescent(para1: jint): jint; overload; virtual; abstract;
    function getLineStart(para1: jint): jint; overload; virtual; abstract;
    function getParagraphDirection(para1: jint): jint; overload; virtual; abstract;
    function getLineContainsTab(para1: jint): jboolean; overload; virtual; abstract;
    function getLineDirections(para1: jint): ATLayout.InnerDirections; overload; virtual; abstract;
    function getTopPadding(): jint; overload; virtual; abstract;
    function getBottomPadding(): jint; overload; virtual; abstract;
    function isRtlCharAt(para1: jint): jboolean; overload; virtual;
    function getPrimaryHorizontal(para1: jint): jfloat; overload; virtual;
    function getSecondaryHorizontal(para1: jint): jfloat; overload; virtual;
    function getLineLeft(para1: jint): jfloat; overload; virtual;
    function getLineRight(para1: jint): jfloat; overload; virtual;
    function getLineMax(para1: jint): jfloat; overload; virtual;
    function getLineWidth(para1: jint): jfloat; overload; virtual;
    function getLineForVertical(para1: jint): jint; overload; virtual;
    function getLineForOffset(para1: jint): jint; overload; virtual;
    function getOffsetForHorizontal(para1: jint; para2: jfloat): jint; overload; virtual;
    function getLineEnd(para1: jint): jint; overload; virtual; final;
    function getLineVisibleEnd(para1: jint): jint; overload; virtual;
    function getLineBottom(para1: jint): jint; overload; virtual; final;
    function getLineBaseline(para1: jint): jint; overload; virtual; final;
    function getLineAscent(para1: jint): jint; overload; virtual; final;
    function getOffsetToLeftOf(para1: jint): jint; overload; virtual;
    function getOffsetToRightOf(para1: jint): jint; overload; virtual;
    procedure getCursorPath(para1: jint; para2: AGPath; para3: JLCharSequence); overload; virtual;
    procedure getSelectionPath(para1: jint; para2: jint; para3: AGPath); overload; virtual;
    function getParagraphAlignment(para1: jint): ATLayout.InnerAlignment; overload; virtual; final;
    function getParagraphLeft(para1: jint): jint; overload; virtual; final;
    function getParagraphRight(para1: jint): jint; overload; virtual; final;
  strict protected
    function isSpanned(): jboolean; overload; virtual; final;
  public
    function getEllipsisStart(para1: jint): jint; overload; virtual; abstract;
    function getEllipsisCount(para1: jint): jint; overload; virtual; abstract;
  end;

  AUJsonToken = class sealed external 'android.util' name 'JsonToken' (JLEnum)
  public
    final class var
      fBEGIN_ARRAY: AUJsonToken; external name 'BEGIN_ARRAY';
      fBEGIN_OBJECT: AUJsonToken; external name 'BEGIN_OBJECT';
      fBOOLEAN: AUJsonToken; external name 'BOOLEAN';
      fEND_ARRAY: AUJsonToken; external name 'END_ARRAY';
      fEND_DOCUMENT: AUJsonToken; external name 'END_DOCUMENT';
      fEND_OBJECT: AUJsonToken; external name 'END_OBJECT';
      fNAME: AUJsonToken; external name 'NAME';
      fNULL: AUJsonToken; external name 'NULL';
      fNUMBER: AUJsonToken; external name 'NUMBER';
      fSTRING: AUJsonToken; external name 'STRING';
  public
    class function values(): Arr1AUJsonToken; static; overload;
    class function valueOf(para1: JLString): AUJsonToken; static; overload;
  end;

  AUXml = class external 'android.util' name 'Xml' (JLObject)
  public
    type
      InnerEncoding = class;
      Arr1InnerEncoding = array of InnerEncoding;
      Arr2InnerEncoding = array of Arr1InnerEncoding;
      Arr3InnerEncoding = array of Arr2InnerEncoding;
      InnerEncoding = class sealed external 'android.util' name 'Encoding' (JLEnum)
      public
        final class var
          fISO_8859_1: AUXml.InnerEncoding; external name 'ISO_8859_1';
          fUS_ASCII: AUXml.InnerEncoding; external name 'US_ASCII';
          fUTF_16: AUXml.InnerEncoding; external name 'UTF_16';
          fUTF_8: AUXml.InnerEncoding; external name 'UTF_8';
      public
        class function values(): AUXml.Arr1InnerEncoding; static; overload;
        class function valueOf(para1: JLString): AUXml.InnerEncoding; static; overload;
      end;

  public
    class var
      fFEATURE_RELAXED: JLString; external name 'FEATURE_RELAXED';
  public
    class procedure parse(para1: JLString; para2: OXSContentHandler); static; overload;  // throws org.xml.sax.SAXException
    class procedure parse(para1: JIReader; para2: OXSContentHandler); static; overload;  // throws java.io.IOException, org.xml.sax.SAXException
    class procedure parse(para1: JIInputStream; para2: AUXml.InnerEncoding; para3: OXSContentHandler); static; overload;  // throws java.io.IOException, org.xml.sax.SAXException
    class function newPullParser(): OXVXmlPullParser; static; overload;
    class function newSerializer(): OXVXmlSerializer; static; overload;
    class function findEncodingByName(para1: JLString): AUXml.InnerEncoding; static; overload;  // throws java.io.UnsupportedEncodingException
    class function asAttributeSet(para1: OXVXmlPullParser): AUAttributeSet; static; overload;
  end;

  AWConsoleMessage = class external 'android.webkit' name 'ConsoleMessage' (JLObject)
  public
    type
      InnerMessageLevel = class;
      Arr1InnerMessageLevel = array of InnerMessageLevel;
      Arr2InnerMessageLevel = array of Arr1InnerMessageLevel;
      Arr3InnerMessageLevel = array of Arr2InnerMessageLevel;
      InnerMessageLevel = class sealed external 'android.webkit' name 'MessageLevel' (JLEnum)
      public
        final class var
          fDEBUG: AWConsoleMessage.InnerMessageLevel; external name 'DEBUG';
          fERROR: AWConsoleMessage.InnerMessageLevel; external name 'ERROR';
          fLOG: AWConsoleMessage.InnerMessageLevel; external name 'LOG';
          fTIP: AWConsoleMessage.InnerMessageLevel; external name 'TIP';
          fWARNING: AWConsoleMessage.InnerMessageLevel; external name 'WARNING';
      public
        class function values(): AWConsoleMessage.Arr1InnerMessageLevel; static; overload;
        class function valueOf(para1: JLString): AWConsoleMessage.InnerMessageLevel; static; overload;
      end;

  public
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: AWConsoleMessage.InnerMessageLevel); overload;
    function messageLevel(): AWConsoleMessage.InnerMessageLevel; overload; virtual;
    function message(): JLString; overload; virtual;
    function sourceId(): JLString; overload; virtual;
    function lineNumber(): jint; overload; virtual;
  end;

  AWWebSettings = class abstract external 'android.webkit' name 'WebSettings' (JLObject)
  public
    type
      InnerPluginState = class;
      Arr1InnerPluginState = array of InnerPluginState;
      Arr2InnerPluginState = array of Arr1InnerPluginState;
      Arr3InnerPluginState = array of Arr2InnerPluginState;
      InnerRenderPriority = class;
      Arr1InnerRenderPriority = array of InnerRenderPriority;
      Arr2InnerRenderPriority = array of Arr1InnerRenderPriority;
      Arr3InnerRenderPriority = array of Arr2InnerRenderPriority;
      InnerZoomDensity = class;
      Arr1InnerZoomDensity = array of InnerZoomDensity;
      Arr2InnerZoomDensity = array of Arr1InnerZoomDensity;
      Arr3InnerZoomDensity = array of Arr2InnerZoomDensity;
      InnerTextSize = class;
      Arr1InnerTextSize = array of InnerTextSize;
      Arr2InnerTextSize = array of Arr1InnerTextSize;
      Arr3InnerTextSize = array of Arr2InnerTextSize;
      InnerLayoutAlgorithm = class;
      Arr1InnerLayoutAlgorithm = array of InnerLayoutAlgorithm;
      Arr2InnerLayoutAlgorithm = array of Arr1InnerLayoutAlgorithm;
      Arr3InnerLayoutAlgorithm = array of Arr2InnerLayoutAlgorithm;
      InnerPluginState = class sealed external 'android.webkit' name 'PluginState' (JLEnum)
      public
        final class var
          fOFF: AWWebSettings.InnerPluginState; external name 'OFF';
          fON: AWWebSettings.InnerPluginState; external name 'ON';
          fON_DEMAND: AWWebSettings.InnerPluginState; external name 'ON_DEMAND';
      public
        class function values(): AWWebSettings.Arr1InnerPluginState; static; overload;
        class function valueOf(para1: JLString): AWWebSettings.InnerPluginState; static; overload;
      end;

      InnerRenderPriority = class sealed external 'android.webkit' name 'RenderPriority' (JLEnum)
      public
        final class var
          fHIGH: AWWebSettings.InnerRenderPriority; external name 'HIGH';
          fLOW: AWWebSettings.InnerRenderPriority; external name 'LOW';
          fNORMAL: AWWebSettings.InnerRenderPriority; external name 'NORMAL';
      public
        class function values(): AWWebSettings.Arr1InnerRenderPriority; static; overload;
        class function valueOf(para1: JLString): AWWebSettings.InnerRenderPriority; static; overload;
      end;

      InnerZoomDensity = class sealed external 'android.webkit' name 'ZoomDensity' (JLEnum)
      public
        final class var
          fCLOSE: AWWebSettings.InnerZoomDensity; external name 'CLOSE';
          fFAR: AWWebSettings.InnerZoomDensity; external name 'FAR';
          fMEDIUM: AWWebSettings.InnerZoomDensity; external name 'MEDIUM';
      public
        class function values(): AWWebSettings.Arr1InnerZoomDensity; static; overload;
        class function valueOf(para1: JLString): AWWebSettings.InnerZoomDensity; static; overload;
      end;

      InnerTextSize = class sealed external 'android.webkit' name 'TextSize' (JLEnum)
      public
        final class var
          fLARGER: AWWebSettings.InnerTextSize; external name 'LARGER';
          fLARGEST: AWWebSettings.InnerTextSize; external name 'LARGEST';
          fNORMAL: AWWebSettings.InnerTextSize; external name 'NORMAL';
          fSMALLER: AWWebSettings.InnerTextSize; external name 'SMALLER';
          fSMALLEST: AWWebSettings.InnerTextSize; external name 'SMALLEST';
      public
        class function values(): AWWebSettings.Arr1InnerTextSize; static; overload;
        class function valueOf(para1: JLString): AWWebSettings.InnerTextSize; static; overload;
      end;

      InnerLayoutAlgorithm = class sealed external 'android.webkit' name 'LayoutAlgorithm' (JLEnum)
      public
        final class var
          fNARROW_COLUMNS: AWWebSettings.InnerLayoutAlgorithm; external name 'NARROW_COLUMNS';
          fNORMAL: AWWebSettings.InnerLayoutAlgorithm; external name 'NORMAL';
          fSINGLE_COLUMN: AWWebSettings.InnerLayoutAlgorithm; external name 'SINGLE_COLUMN';
          fTEXT_AUTOSIZING: AWWebSettings.InnerLayoutAlgorithm; external name 'TEXT_AUTOSIZING';
      public
        class function values(): AWWebSettings.Arr1InnerLayoutAlgorithm; static; overload;
        class function valueOf(para1: JLString): AWWebSettings.InnerLayoutAlgorithm; static; overload;
      end;

  public
    const
      LOAD_CACHE_ELSE_NETWORK = 1;
      LOAD_CACHE_ONLY = 3;
      LOAD_DEFAULT = -1;
      LOAD_NORMAL = 0 deprecated;
      LOAD_NO_CACHE = 2;
      MIXED_CONTENT_ALWAYS_ALLOW = 0;
      MIXED_CONTENT_COMPATIBILITY_MODE = 2;
      MIXED_CONTENT_NEVER_ALLOW = 1;
  public
    procedure setSupportZoom(para1: jboolean); overload; virtual;
    function supportZoom(): jboolean; overload; virtual;
    procedure setMediaPlaybackRequiresUserGesture(para1: jboolean); overload; virtual;
    function getMediaPlaybackRequiresUserGesture(): jboolean; overload; virtual;
    procedure setBuiltInZoomControls(para1: jboolean); overload; virtual;
    function getBuiltInZoomControls(): jboolean; overload; virtual;
    procedure setDisplayZoomControls(para1: jboolean); overload; virtual;
    function getDisplayZoomControls(): jboolean; overload; virtual;
    procedure setAllowFileAccess(para1: jboolean); overload; virtual;
    function getAllowFileAccess(): jboolean; overload; virtual;
    procedure setAllowContentAccess(para1: jboolean); overload; virtual;
    function getAllowContentAccess(): jboolean; overload; virtual;
    procedure setLoadWithOverviewMode(para1: jboolean); overload; virtual;
    function getLoadWithOverviewMode(): jboolean; overload; virtual;
    procedure setEnableSmoothTransition(para1: jboolean); overload; virtual;
    function enableSmoothTransition(): jboolean; overload; virtual;
    procedure setSaveFormData(para1: jboolean); overload; virtual;
    function getSaveFormData(): jboolean; overload; virtual;
    procedure setSavePassword(para1: jboolean); overload; virtual;
    function getSavePassword(): jboolean; overload; virtual;
    procedure setTextZoom(para1: jint); overload; virtual;
    function getTextZoom(): jint; overload; virtual;
    procedure setTextSize(para1: AWWebSettings.InnerTextSize); overload; virtual;
    function getTextSize(): AWWebSettings.InnerTextSize; overload; virtual;
    procedure setDefaultZoom(para1: AWWebSettings.InnerZoomDensity); overload; virtual;
    function getDefaultZoom(): AWWebSettings.InnerZoomDensity; overload; virtual;
    procedure setLightTouchEnabled(para1: jboolean); overload; virtual;
    function getLightTouchEnabled(): jboolean; overload; virtual;
    procedure setUseWideViewPort(para1: jboolean); overload; virtual;
    function getUseWideViewPort(): jboolean; overload; virtual;
    procedure setSupportMultipleWindows(para1: jboolean); overload; virtual;
    function supportMultipleWindows(): jboolean; overload; virtual;
    procedure setLayoutAlgorithm(para1: AWWebSettings.InnerLayoutAlgorithm); overload; virtual;
    function getLayoutAlgorithm(): AWWebSettings.InnerLayoutAlgorithm; overload; virtual;
    procedure setStandardFontFamily(para1: JLString); overload; virtual;
    function getStandardFontFamily(): JLString; overload; virtual;
    procedure setFixedFontFamily(para1: JLString); overload; virtual;
    function getFixedFontFamily(): JLString; overload; virtual;
    procedure setSansSerifFontFamily(para1: JLString); overload; virtual;
    function getSansSerifFontFamily(): JLString; overload; virtual;
    procedure setSerifFontFamily(para1: JLString); overload; virtual;
    function getSerifFontFamily(): JLString; overload; virtual;
    procedure setCursiveFontFamily(para1: JLString); overload; virtual;
    function getCursiveFontFamily(): JLString; overload; virtual;
    procedure setFantasyFontFamily(para1: JLString); overload; virtual;
    function getFantasyFontFamily(): JLString; overload; virtual;
    procedure setMinimumFontSize(para1: jint); overload; virtual;
    function getMinimumFontSize(): jint; overload; virtual;
    procedure setMinimumLogicalFontSize(para1: jint); overload; virtual;
    function getMinimumLogicalFontSize(): jint; overload; virtual;
    procedure setDefaultFontSize(para1: jint); overload; virtual;
    function getDefaultFontSize(): jint; overload; virtual;
    procedure setDefaultFixedFontSize(para1: jint); overload; virtual;
    function getDefaultFixedFontSize(): jint; overload; virtual;
    procedure setLoadsImagesAutomatically(para1: jboolean); overload; virtual;
    function getLoadsImagesAutomatically(): jboolean; overload; virtual;
    procedure setBlockNetworkImage(para1: jboolean); overload; virtual;
    function getBlockNetworkImage(): jboolean; overload; virtual;
    procedure setBlockNetworkLoads(para1: jboolean); overload; virtual;
    function getBlockNetworkLoads(): jboolean; overload; virtual;
    procedure setJavaScriptEnabled(para1: jboolean); overload; virtual;
    procedure setAllowUniversalAccessFromFileURLs(para1: jboolean); overload; virtual; abstract;
    procedure setAllowFileAccessFromFileURLs(para1: jboolean); overload; virtual; abstract;
    procedure setPluginState(para1: AWWebSettings.InnerPluginState); overload; virtual;
    procedure setDatabasePath(para1: JLString); overload; virtual;
    procedure setGeolocationDatabasePath(para1: JLString); overload; virtual;
    procedure setAppCacheEnabled(para1: jboolean); overload; virtual;
    procedure setAppCachePath(para1: JLString); overload; virtual;
    procedure setAppCacheMaxSize(para1: jlong); overload; virtual;
    procedure setDatabaseEnabled(para1: jboolean); overload; virtual;
    procedure setDomStorageEnabled(para1: jboolean); overload; virtual;
    function getDomStorageEnabled(): jboolean; overload; virtual;
    function getDatabasePath(): JLString; overload; virtual;
    function getDatabaseEnabled(): jboolean; overload; virtual;
    procedure setGeolocationEnabled(para1: jboolean); overload; virtual;
    function getJavaScriptEnabled(): jboolean; overload; virtual;
    function getAllowUniversalAccessFromFileURLs(): jboolean; overload; virtual; abstract;
    function getAllowFileAccessFromFileURLs(): jboolean; overload; virtual; abstract;
    function getPluginState(): AWWebSettings.InnerPluginState; overload; virtual;
    procedure setJavaScriptCanOpenWindowsAutomatically(para1: jboolean); overload; virtual;
    function getJavaScriptCanOpenWindowsAutomatically(): jboolean; overload; virtual;
    procedure setDefaultTextEncodingName(para1: JLString); overload; virtual;
    function getDefaultTextEncodingName(): JLString; overload; virtual;
    procedure setUserAgentString(para1: JLString); overload; virtual;
    function getUserAgentString(): JLString; overload; virtual;
    class function getDefaultUserAgent(para1: ACContext): JLString; static; overload;
    procedure setNeedInitialFocus(para1: jboolean); overload; virtual;
    procedure setRenderPriority(para1: AWWebSettings.InnerRenderPriority); overload; virtual;
    procedure setCacheMode(para1: jint); overload; virtual;
    function getCacheMode(): jint; overload; virtual;
    procedure setMixedContentMode(para1: jint); overload; virtual; abstract;
    function getMixedContentMode(): jint; overload; virtual; abstract;
  end;

  JLAElementType = class sealed external 'java.lang.annotation' name 'ElementType' (JLEnum)
  public
    final class var
      fANNOTATION_TYPE: JLAElementType; external name 'ANNOTATION_TYPE';
      fCONSTRUCTOR: JLAElementType; external name 'CONSTRUCTOR';
      fFIELD: JLAElementType; external name 'FIELD';
      fLOCAL_VARIABLE: JLAElementType; external name 'LOCAL_VARIABLE';
      fMETHOD: JLAElementType; external name 'METHOD';
      fPACKAGE: JLAElementType; external name 'PACKAGE';
      fPARAMETER: JLAElementType; external name 'PARAMETER';
      fTYPE: JLAElementType; external name 'TYPE';
  public
    class function values(): Arr1JLAElementType; static; overload;
    class function valueOf(para1: JLString): JLAElementType; static; overload;
  end;

  JLARetentionPolicy = class sealed external 'java.lang.annotation' name 'RetentionPolicy' (JLEnum)
  public
    final class var
      fCLASS: JLARetentionPolicy; external name 'CLASS';
      fRUNTIME: JLARetentionPolicy; external name 'RUNTIME';
      fSOURCE: JLARetentionPolicy; external name 'SOURCE';
  public
    class function values(): Arr1JLARetentionPolicy; static; overload;
    class function valueOf(para1: JLString): JLARetentionPolicy; static; overload;
  end;

  JMRoundingMode = class sealed external 'java.math' name 'RoundingMode' (JLEnum)
  public
    final class var
      fCEILING: JMRoundingMode; external name 'CEILING';
      fDOWN: JMRoundingMode; external name 'DOWN';
      fFLOOR: JMRoundingMode; external name 'FLOOR';
      fHALF_DOWN: JMRoundingMode; external name 'HALF_DOWN';
      fHALF_EVEN: JMRoundingMode; external name 'HALF_EVEN';
      fHALF_UP: JMRoundingMode; external name 'HALF_UP';
      fUNNECESSARY: JMRoundingMode; external name 'UNNECESSARY';
      fUP: JMRoundingMode; external name 'UP';
  public
    class function values(): Arr1JMRoundingMode; static; overload;
    class function valueOf(para1: JLString): JMRoundingMode; static; overload;
    class function valueOf(para1: jint): JMRoundingMode; static; overload;
  end;

  JNAuthenticator = class abstract external 'java.net' name 'Authenticator' (JLObject)
  public
    type
      InnerRequestorType = class;
      Arr1InnerRequestorType = array of InnerRequestorType;
      Arr2InnerRequestorType = array of Arr1InnerRequestorType;
      Arr3InnerRequestorType = array of Arr2InnerRequestorType;
      InnerRequestorType = class sealed external 'java.net' name 'RequestorType' (JLEnum)
      public
        final class var
          fPROXY: JNAuthenticator.InnerRequestorType; external name 'PROXY';
          fSERVER: JNAuthenticator.InnerRequestorType; external name 'SERVER';
      public
        class function values(): JNAuthenticator.Arr1InnerRequestorType; static; overload;
        class function valueOf(para1: JLString): JNAuthenticator.InnerRequestorType; static; overload;
      end;

  public
    constructor create(); overload;
  strict protected
    function getPasswordAuthentication(): JNPasswordAuthentication; overload; virtual;
    function getRequestingPort(): jint; overload; virtual; final;
    function getRequestingSite(): JNInetAddress; overload; virtual; final;
    function getRequestingPrompt(): JLString; overload; virtual; final;
    function getRequestingProtocol(): JLString; overload; virtual; final;
    function getRequestingScheme(): JLString; overload; virtual; final;
  public
    class function requestPasswordAuthentication(para1: JNInetAddress; para2: jint; para3: JLString; para4: JLString; para5: JLString): JNPasswordAuthentication; static; overload;
    class procedure setDefault(para1: JNAuthenticator); static; overload;
    class function requestPasswordAuthentication(para1: JLString; para2: JNInetAddress; para3: jint; para4: JLString; para5: JLString; para6: JLString): JNPasswordAuthentication; static; overload;
  strict protected
    function getRequestingHost(): JLString; overload; virtual; final;
  public
    class function requestPasswordAuthentication(para1: JLString; para2: JNInetAddress; para3: jint; para4: JLString; para5: JLString; para6: JLString; para7: JNURL; para8: JNAuthenticator.InnerRequestorType): JNPasswordAuthentication; static; overload;
  strict protected
    function getRequestingURL(): JNURL; overload; virtual;
    function getRequestorType(): JNAuthenticator.InnerRequestorType; overload; virtual;
  end;

  JNProxy = class external 'java.net' name 'Proxy' (JLObject)
  public
    type
      InnerType = class;
      Arr1InnerType = array of InnerType;
      Arr2InnerType = array of Arr1InnerType;
      Arr3InnerType = array of Arr2InnerType;
      InnerType = class sealed external 'java.net' name 'Type' (JLEnum)
      public
        final class var
          fDIRECT: JNProxy.InnerType; external name 'DIRECT';
          fHTTP: JNProxy.InnerType; external name 'HTTP';
          fSOCKS: JNProxy.InnerType; external name 'SOCKS';
      public
        class function values(): JNProxy.Arr1InnerType; static; overload;
        class function valueOf(para1: JLString): JNProxy.InnerType; static; overload;
      end;

  public
    final class var
      fNO_PROXY: JNProxy; external name 'NO_PROXY';
  public
    constructor create(para1: JNProxy.InnerType; para2: JNSocketAddress); overload;
    function &type(): JNProxy.InnerType; overload; virtual;
    function address(): JNSocketAddress; overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual; final;
  end;

  JSClientInfoStatus = class sealed external 'java.sql' name 'ClientInfoStatus' (JLEnum)
  public
    final class var
      fREASON_UNKNOWN: JSClientInfoStatus; external name 'REASON_UNKNOWN';
      fREASON_UNKNOWN_PROPERTY: JSClientInfoStatus; external name 'REASON_UNKNOWN_PROPERTY';
      fREASON_VALUE_INVALID: JSClientInfoStatus; external name 'REASON_VALUE_INVALID';
      fREASON_VALUE_TRUNCATED: JSClientInfoStatus; external name 'REASON_VALUE_TRUNCATED';
  public
    class function values(): Arr1JSClientInfoStatus; static; overload;
    class function valueOf(para1: JLString): JSClientInfoStatus; static; overload;
  end;

  JSRowIdLifetime = class sealed external 'java.sql' name 'RowIdLifetime' (JLEnum)
  public
    final class var
      fROWID_UNSUPPORTED: JSRowIdLifetime; external name 'ROWID_UNSUPPORTED';
      fROWID_VALID_FOREVER: JSRowIdLifetime; external name 'ROWID_VALID_FOREVER';
      fROWID_VALID_OTHER: JSRowIdLifetime; external name 'ROWID_VALID_OTHER';
      fROWID_VALID_SESSION: JSRowIdLifetime; external name 'ROWID_VALID_SESSION';
      fROWID_VALID_TRANSACTION: JSRowIdLifetime; external name 'ROWID_VALID_TRANSACTION';
  public
    class function values(): Arr1JSRowIdLifetime; static; overload;
    class function valueOf(para1: JLString): JSRowIdLifetime; static; overload;
  end;

  JTNormalizer = class sealed external 'java.text' name 'Normalizer' (JLObject)
  public
    type
      InnerForm = class;
      Arr1InnerForm = array of InnerForm;
      Arr2InnerForm = array of Arr1InnerForm;
      Arr3InnerForm = array of Arr2InnerForm;
      InnerForm = class sealed external 'java.text' name 'Form' (JLEnum)
      public
        final class var
          fNFC: JTNormalizer.InnerForm; external name 'NFC';
          fNFD: JTNormalizer.InnerForm; external name 'NFD';
          fNFKC: JTNormalizer.InnerForm; external name 'NFKC';
          fNFKD: JTNormalizer.InnerForm; external name 'NFKD';
      public
        class function values(): JTNormalizer.Arr1InnerForm; static; overload;
        class function valueOf(para1: JLString): JTNormalizer.InnerForm; static; overload;
      end;

  public
    class function isNormalized(para1: JLCharSequence; para2: JTNormalizer.InnerForm): jboolean; static; overload;
    class function normalize(para1: JLCharSequence; para2: JTNormalizer.InnerForm): JLString; static; overload;
  end;

  JUCTimeUnit = class sealed external 'java.util.concurrent' name 'TimeUnit' (JLEnum)
  public
    final class var
      fDAYS: JUCTimeUnit; external name 'DAYS';
      fHOURS: JUCTimeUnit; external name 'HOURS';
      fMICROSECONDS: JUCTimeUnit; external name 'MICROSECONDS';
      fMILLISECONDS: JUCTimeUnit; external name 'MILLISECONDS';
      fMINUTES: JUCTimeUnit; external name 'MINUTES';
      fNANOSECONDS: JUCTimeUnit; external name 'NANOSECONDS';
      fSECONDS: JUCTimeUnit; external name 'SECONDS';
  public
    class function values(): Arr1JUCTimeUnit; static; overload;
    class function valueOf(para1: JLString): JUCTimeUnit; static; overload;
    function convert(para1: jlong; para2: JUCTimeUnit): jlong; overload; virtual;
    function toNanos(para1: jlong): jlong; overload; virtual;
    function toMicros(para1: jlong): jlong; overload; virtual;
    function toMillis(para1: jlong): jlong; overload; virtual;
    function toSeconds(para1: jlong): jlong; overload; virtual;
    function toMinutes(para1: jlong): jlong; overload; virtual;
    function toHours(para1: jlong): jlong; overload; virtual;
    function toDays(para1: jlong): jlong; overload; virtual;
    procedure timedWait(para1: JLObject; para2: jlong); overload; virtual;  // throws java.lang.InterruptedException
    procedure timedJoin(para1: JLThread; para2: jlong); overload; virtual;  // throws java.lang.InterruptedException
    procedure sleep(para1: jlong); overload; virtual;  // throws java.lang.InterruptedException
  end;

  JNSSSLEngineResult = class external 'javax.net.ssl' name 'SSLEngineResult' (JLObject)
  public
    type
      InnerStatus = class;
      Arr1InnerStatus = array of InnerStatus;
      Arr2InnerStatus = array of Arr1InnerStatus;
      Arr3InnerStatus = array of Arr2InnerStatus;
      InnerHandshakeStatus = class;
      Arr1InnerHandshakeStatus = array of InnerHandshakeStatus;
      Arr2InnerHandshakeStatus = array of Arr1InnerHandshakeStatus;
      Arr3InnerHandshakeStatus = array of Arr2InnerHandshakeStatus;
      InnerStatus = class sealed external 'javax.net.ssl' name 'Status' (JLEnum)
      public
        final class var
          fBUFFER_OVERFLOW: JNSSSLEngineResult.InnerStatus; external name 'BUFFER_OVERFLOW';
          fBUFFER_UNDERFLOW: JNSSSLEngineResult.InnerStatus; external name 'BUFFER_UNDERFLOW';
          fCLOSED: JNSSSLEngineResult.InnerStatus; external name 'CLOSED';
          fOK: JNSSSLEngineResult.InnerStatus; external name 'OK';
      public
        class function values(): JNSSSLEngineResult.Arr1InnerStatus; static; overload;
        class function valueOf(para1: JLString): JNSSSLEngineResult.InnerStatus; static; overload;
      end;

      InnerHandshakeStatus = class sealed external 'javax.net.ssl' name 'HandshakeStatus' (JLEnum)
      public
        final class var
          fFINISHED: JNSSSLEngineResult.InnerHandshakeStatus; external name 'FINISHED';
          fNEED_TASK: JNSSSLEngineResult.InnerHandshakeStatus; external name 'NEED_TASK';
          fNEED_UNWRAP: JNSSSLEngineResult.InnerHandshakeStatus; external name 'NEED_UNWRAP';
          fNEED_WRAP: JNSSSLEngineResult.InnerHandshakeStatus; external name 'NEED_WRAP';
          fNOT_HANDSHAKING: JNSSSLEngineResult.InnerHandshakeStatus; external name 'NOT_HANDSHAKING';
      public
        class function values(): JNSSSLEngineResult.Arr1InnerHandshakeStatus; static; overload;
        class function valueOf(para1: JLString): JNSSSLEngineResult.InnerHandshakeStatus; static; overload;
      end;

  public
    constructor create(para1: JNSSSLEngineResult.InnerStatus; para2: JNSSSLEngineResult.InnerHandshakeStatus; para3: jint; para4: jint); overload;
    function getStatus(): JNSSSLEngineResult.InnerStatus; overload; virtual; final;
    function getHandshakeStatus(): JNSSSLEngineResult.InnerHandshakeStatus; overload; virtual; final;
    function bytesConsumed(): jint; overload; virtual; final;
    function bytesProduced(): jint; overload; virtual; final;
    function toString(): JLString; overload; virtual;
  end;

  OAHCRRouteInfo = interface external 'org.apache.http.conn.routing' name 'RouteInfo' 
    type
      InnerLayerType = class;
      Arr1InnerLayerType = array of InnerLayerType;
      Arr2InnerLayerType = array of Arr1InnerLayerType;
      Arr3InnerLayerType = array of Arr2InnerLayerType;
      InnerTunnelType = class;
      Arr1InnerTunnelType = array of InnerTunnelType;
      Arr2InnerTunnelType = array of Arr1InnerTunnelType;
      Arr3InnerTunnelType = array of Arr2InnerTunnelType;
      InnerLayerType = class sealed external 'org.apache.http.conn.routing' name 'LayerType' (JLEnum)
      public
        final class var
          fLAYERED: OAHCRRouteInfo.InnerLayerType; external name 'LAYERED';
          fPLAIN: OAHCRRouteInfo.InnerLayerType; external name 'PLAIN';
      public
        class function values(): OAHCRRouteInfo.Arr1InnerLayerType; static; overload;
        class function valueOf(para1: JLString): OAHCRRouteInfo.InnerLayerType; static; overload;
      end;

      InnerTunnelType = class sealed external 'org.apache.http.conn.routing' name 'TunnelType' (JLEnum)
      public
        final class var
          fPLAIN: OAHCRRouteInfo.InnerTunnelType; external name 'PLAIN';
          fTUNNELLED: OAHCRRouteInfo.InnerTunnelType; external name 'TUNNELLED';
      public
        class function values(): OAHCRRouteInfo.Arr1InnerTunnelType; static; overload;
        class function valueOf(para1: JLString): OAHCRRouteInfo.InnerTunnelType; static; overload;
      end;

    function getTargetHost(): OAHHttpHost; overload;
    function getLocalAddress(): JNInetAddress; overload;
    function getHopCount(): jint; overload;
    function getHopTarget(para1: jint): OAHHttpHost; overload;
    function getProxyHost(): OAHHttpHost; overload;
    function getTunnelType(): OAHCRRouteInfo.InnerTunnelType; overload;
    function isTunnelled(): jboolean; overload;
    function getLayerType(): OAHCRRouteInfo.InnerLayerType; overload;
    function isLayered(): jboolean; overload;
    function isSecure(): jboolean; overload;
  end;

  AWWebBackForwardList = class external 'android.webkit' name 'WebBackForwardList' (JLObject, JLCloneable, JISerializable)
  public
    function getCurrentItem(): AWWebHistoryItem; overload; virtual;
    function getCurrentIndex(): jint; overload; virtual;
    function getItemAtIndex(para1: jint): AWWebHistoryItem; overload; virtual;
    function getSize(): jint; overload; virtual;
  strict protected
    function clone(): AWWebBackForwardList; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JBPropertyChangeSupport = class external 'java.beans' name 'PropertyChangeSupport' (JLObject, JISerializable)
  public
    constructor create(para1: JLObject); overload;
    procedure firePropertyChange(para1: JLString; para2: JLObject; para3: JLObject); overload; virtual;
    procedure fireIndexedPropertyChange(para1: JLString; para2: jint; para3: JLObject; para4: JLObject); overload; virtual;
    procedure removePropertyChangeListener(para1: JLString; para2: JBPropertyChangeListener); overload; virtual;
    procedure addPropertyChangeListener(para1: JLString; para2: JBPropertyChangeListener); overload; virtual;
    function getPropertyChangeListeners(para1: JLString): Arr1JBPropertyChangeListener; overload; virtual;
    procedure firePropertyChange(para1: JLString; para2: jboolean; para3: jboolean); overload; virtual;
    procedure fireIndexedPropertyChange(para1: JLString; para2: jint; para3: jboolean; para4: jboolean); overload; virtual;
    procedure firePropertyChange(para1: JLString; para2: jint; para3: jint); overload; virtual;
    procedure fireIndexedPropertyChange(para1: JLString; para2: jint; para3: jint; para4: jint); overload; virtual;
    function hasListeners(para1: JLString): jboolean; overload; virtual;
    procedure removePropertyChangeListener(para1: JBPropertyChangeListener); overload; virtual;
    procedure addPropertyChangeListener(para1: JBPropertyChangeListener); overload; virtual;
    function getPropertyChangeListeners(): Arr1JBPropertyChangeListener; overload; virtual;
    procedure firePropertyChange(para1: JBPropertyChangeEvent); overload; virtual;
  end;

  JIExternalizable = interface external 'java.io' name 'Externalizable' (JISerializable)
    procedure readExternal(para1: JIObjectInput); overload;  // throws java.io.IOException, java.lang.ClassNotFoundException
    procedure writeExternal(para1: JIObjectOutput); overload;  // throws java.io.IOException
  end;

  JIFile = class external 'java.io' name 'File' (JLObject, JISerializable, JLComparable)
  public
    final class var
      fpathSeparator: JLString; external name 'pathSeparator';
      fpathSeparatorChar: jchar; external name 'pathSeparatorChar';
      fseparator: JLString; external name 'separator';
      fseparatorChar: jchar; external name 'separatorChar';
  public
    constructor create(para1: JIFile; para2: JLString); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JNURI); overload;
    class function listRoots(): Arr1JIFile; static; overload;
    function canExecute(): jboolean; overload; virtual;
    function canRead(): jboolean; overload; virtual;
    function canWrite(): jboolean; overload; virtual;
    function compareTo(para1: JIFile): jint; overload; virtual;
    function delete(): jboolean; overload; virtual;
    procedure deleteOnExit(); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function exists(): jboolean; overload; virtual;
    function getAbsolutePath(): JLString; overload; virtual;
    function getAbsoluteFile(): JIFile; overload; virtual;
    function getCanonicalPath(): JLString; overload; virtual;  // throws java.io.IOException
    function getCanonicalFile(): JIFile; overload; virtual;  // throws java.io.IOException
    function getName(): JLString; overload; virtual;
    function getParent(): JLString; overload; virtual;
    function getParentFile(): JIFile; overload; virtual;
    function getPath(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function isAbsolute(): jboolean; overload; virtual;
    function isDirectory(): jboolean; overload; virtual;
    function isFile(): jboolean; overload; virtual;
    function isHidden(): jboolean; overload; virtual;
    function lastModified(): jlong; overload; virtual;
    function setLastModified(para1: jlong): jboolean; overload; virtual;
    function setReadOnly(): jboolean; overload; virtual;
    function setExecutable(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    function setExecutable(para1: jboolean): jboolean; overload; virtual;
    function setReadable(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    function setReadable(para1: jboolean): jboolean; overload; virtual;
    function setWritable(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    function setWritable(para1: jboolean): jboolean; overload; virtual;
    function length(): jlong; overload; virtual;
    function list(): Arr1JLString; overload; virtual;
    function list(para1: JIFilenameFilter): Arr1JLString; overload; virtual;
    function listFiles(): Arr1JIFile; overload; virtual;
    function listFiles(para1: JIFilenameFilter): Arr1JIFile; overload; virtual;
    function listFiles(para1: JIFileFilter): Arr1JIFile; overload; virtual;
    function mkdir(): jboolean; overload; virtual;
    function mkdirs(): jboolean; overload; virtual;
    function createNewFile(): jboolean; overload; virtual;  // throws java.io.IOException
    class function createTempFile(para1: JLString; para2: JLString): JIFile; static; overload;  // throws java.io.IOException
    class function createTempFile(para1: JLString; para2: JLString; para3: JIFile): JIFile; static; overload;  // throws java.io.IOException
    function renameTo(para1: JIFile): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toURI(): JNURI; overload; virtual;
    function toURL(): JNURL; overload; virtual;  // throws java.net.MalformedURLException
    function getTotalSpace(): jlong; overload; virtual;
    function getUsableSpace(): jlong; overload; virtual;
    function getFreeSpace(): jlong; overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JIObjectStreamClass = class external 'java.io' name 'ObjectStreamClass' (JLObject, JISerializable)
  public
    final class var
      fNO_FIELDS: Arr1JIObjectStreamField; external name 'NO_FIELDS';
  public
    function forClass(): JLClass; overload; virtual;
    function getField(para1: JLString): JIObjectStreamField; overload; virtual;
    function getFields(): Arr1JIObjectStreamField; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getSerialVersionUID(): jlong; overload; virtual;
    class function lookup(para1: JLClass): JIObjectStreamClass; static; overload;
    class function lookupAny(para1: JLClass): JIObjectStreamClass; static; overload;
    function toString(): JLString; overload; virtual;
  end;

  JLStackTraceElement = class sealed external 'java.lang' name 'StackTraceElement' (JLObject, JISerializable)
  public
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: jint); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getClassName(): JLString; overload; virtual;
    function getFileName(): JLString; overload; virtual;
    function getLineNumber(): jint; overload; virtual;
    function getMethodName(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function isNativeMethod(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JLRProxy = class external 'java.lang.reflect' name 'Proxy' (JLObject, JISerializable)
  strict protected
    var
      fh: JLRInvocationHandler; external name 'h';
  strict protected
    constructor create(para1: JLRInvocationHandler); overload;
  public
    class function getProxyClass(para1: JLClassLoader; para2: Arr1JLClass): JLClass; static; overload;  // throws java.lang.IllegalArgumentException
    class function getProxyClass(para1: JLClassLoader; const para2: array of JLClass): JLClass; static; overload;  // throws java.lang.IllegalArgumentException
    class function newProxyInstance(para1: JLClassLoader; para2: Arr1JLClass; para3: JLRInvocationHandler): JLObject; static; overload;  // throws java.lang.IllegalArgumentException
    class function newProxyInstance(para1: JLClassLoader; var para2: array of JLClass; para3: JLRInvocationHandler): JLObject; static; overload;  // throws java.lang.IllegalArgumentException
    class function isProxyClass(para1: JLClass): jboolean; static; overload;
    class function getInvocationHandler(para1: JLObject): JLRInvocationHandler; static; overload;  // throws java.lang.IllegalArgumentException
  end;

  JMMathContext = class sealed external 'java.math' name 'MathContext' (JLObject, JISerializable)
  public
    final class var
      fDECIMAL128: JMMathContext; external name 'DECIMAL128';
      fDECIMAL32: JMMathContext; external name 'DECIMAL32';
      fDECIMAL64: JMMathContext; external name 'DECIMAL64';
      fUNLIMITED: JMMathContext; external name 'UNLIMITED';
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JMRoundingMode); overload;
    constructor create(para1: JLString); overload;
    function getPrecision(): jint; overload; virtual;
    function getRoundingMode(): JMRoundingMode; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JNInetAddress = class external 'java.net' name 'InetAddress' (JLObject, JISerializable)
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getAddress(): Arr1jbyte; overload; virtual;
    class function getAllByName(para1: JLString): Arr1JNInetAddress; static; overload;  // throws java.net.UnknownHostException
    class function getByName(para1: JLString): JNInetAddress; static; overload;  // throws java.net.UnknownHostException
    function getHostAddress(): JLString; overload; virtual;
    function getHostName(): JLString; overload; virtual;
    function getCanonicalHostName(): JLString; overload; virtual;
    class function getLocalHost(): JNInetAddress; static; overload;  // throws java.net.UnknownHostException
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    class function getLoopbackAddress(): JNInetAddress; static; overload;
    function isAnyLocalAddress(): jboolean; overload; virtual;
    function isLinkLocalAddress(): jboolean; overload; virtual;
    function isLoopbackAddress(): jboolean; overload; virtual;
    function isMCGlobal(): jboolean; overload; virtual;
    function isMCLinkLocal(): jboolean; overload; virtual;
    function isMCNodeLocal(): jboolean; overload; virtual;
    function isMCOrgLocal(): jboolean; overload; virtual;
    function isMCSiteLocal(): jboolean; overload; virtual;
    function isMulticastAddress(): jboolean; overload; virtual;
    function isSiteLocalAddress(): jboolean; overload; virtual;
    function isReachable(para1: jint): jboolean; overload; virtual;  // throws java.io.IOException
    function isReachable(para1: JNNetworkInterface; para2: jint; para3: jint): jboolean; overload; virtual;  // throws java.io.IOException
    class function getByAddress(para1: Arr1jbyte): JNInetAddress; static; overload;  // throws java.net.UnknownHostException
    class function getByAddress(var para1: array of jbyte): JNInetAddress; static; overload;  // throws java.net.UnknownHostException
    class function getByAddress(para1: JLString; para2: Arr1jbyte): JNInetAddress; static; overload;  // throws java.net.UnknownHostException
    class function getByAddress(para1: JLString; var para2: array of jbyte): JNInetAddress; static; overload;  // throws java.net.UnknownHostException
  end;

  JNSocketAddress = class abstract external 'java.net' name 'SocketAddress' (JLObject, JISerializable)
  public
    constructor create(); overload;
  end;

  JNURI = class sealed external 'java.net' name 'URI' (JLObject, JLComparable, JISerializable)
  public
    constructor create(para1: JLString); overload;  // throws java.net.URISyntaxException
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;  // throws java.net.URISyntaxException
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: jint; para5: JLString; para6: JLString; para7: JLString); overload;  // throws java.net.URISyntaxException
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload;  // throws java.net.URISyntaxException
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload;  // throws java.net.URISyntaxException
    function compareTo(para1: JNURI): jint; overload; virtual;
    class function create_(para1: JLString): JNURI; static; external name 'create'; overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getScheme(): JLString; overload; virtual;
    function getSchemeSpecificPart(): JLString; overload; virtual;
    function getRawSchemeSpecificPart(): JLString; overload; virtual;
    function getAuthority(): JLString; overload; virtual;
    function getRawAuthority(): JLString; overload; virtual;
    function getUserInfo(): JLString; overload; virtual;
    function getRawUserInfo(): JLString; overload; virtual;
    function getHost(): JLString; overload; virtual;
    function getPort(): jint; overload; virtual;
    function getPath(): JLString; overload; virtual;
    function getRawPath(): JLString; overload; virtual;
    function getQuery(): JLString; overload; virtual;
    function getRawQuery(): JLString; overload; virtual;
    function getFragment(): JLString; overload; virtual;
    function getRawFragment(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function isAbsolute(): jboolean; overload; virtual;
    function isOpaque(): jboolean; overload; virtual;
    function normalize(): JNURI; overload; virtual;
    function parseServerAuthority(): JNURI; overload; virtual;  // throws java.net.URISyntaxException
    function relativize(para1: JNURI): JNURI; overload; virtual;
    function resolve(para1: JNURI): JNURI; overload; virtual;
    function resolve(para1: JLString): JNURI; overload; virtual;
    function toASCIIString(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toURL(): JNURL; overload; virtual;  // throws java.net.MalformedURLException
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JNURL = class sealed external 'java.net' name 'URL' (JLObject, JISerializable)
  public
    constructor create(para1: JLString); overload;  // throws java.net.MalformedURLException
    constructor create(para1: JNURL; para2: JLString); overload;  // throws java.net.MalformedURLException
    constructor create(para1: JNURL; para2: JLString; para3: JNURLStreamHandler); overload;  // throws java.net.MalformedURLException
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;  // throws java.net.MalformedURLException
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLString); overload;  // throws java.net.MalformedURLException
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLString; para5: JNURLStreamHandler); overload;  // throws java.net.MalformedURLException
    class procedure setURLStreamHandlerFactory(para1: JNURLStreamHandlerFactory); static; overload;
  strict protected
    procedure &set(para1: JLString; para2: JLString; para3: jint; para4: JLString; para5: JLString); overload; virtual;
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function sameFile(para1: JNURL): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function getContent(): JLObject; overload; virtual; final;  // throws java.io.IOException
    function getContent(para1: Arr1JLClass): JLObject; overload; virtual; final;  // throws java.io.IOException
    function getContent(var para1: array of JLClass): JLObject; overload; virtual; final;  // throws java.io.IOException
    function openStream(): JIInputStream; overload; virtual; final;  // throws java.io.IOException
    function openConnection(): JNURLConnection; overload; virtual;  // throws java.io.IOException
    function openConnection(para1: JNProxy): JNURLConnection; overload; virtual;  // throws java.io.IOException
    function toURI(): JNURI; overload; virtual;  // throws java.net.URISyntaxException
    function toString(): JLString; overload; virtual;
    function toExternalForm(): JLString; overload; virtual;
    function getProtocol(): JLString; overload; virtual;
    function getAuthority(): JLString; overload; virtual;
    function getUserInfo(): JLString; overload; virtual;
    function getHost(): JLString; overload; virtual;
    function getPort(): jint; overload; virtual;
    function getDefaultPort(): jint; overload; virtual;
    function getFile(): JLString; overload; virtual;
    function getPath(): JLString; overload; virtual;
    function getQuery(): JLString; overload; virtual;
    function getRef(): JLString; overload; virtual;
  strict protected
    procedure &set(para1: JLString; para2: JLString; para3: jint; para4: JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString); overload; virtual;
  end;

  JSCodeSigner = class sealed external 'java.security' name 'CodeSigner' (JLObject, JISerializable)
  public
    constructor create(para1: JSCCertPath; para2: JSecurityTimestamp); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getSignerCertPath(): JSCCertPath; overload; virtual;
    function getTimestamp(): JSecurityTimestamp; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSCodeSource = class external 'java.security' name 'CodeSource' (JLObject, JISerializable)
  public
    constructor create(para1: JNURL; para2: Arr1JSCCertificate); overload;
    constructor create(para1: JNURL; const para2: array of JSCCertificate); overload;
    constructor create(para1: JNURL; para2: Arr1JSCodeSigner); overload;
    constructor create(para1: JNURL; const para2: array of JSCodeSigner); overload;
    function getCertificates(): Arr1JSCCertificate; overload; virtual; final;
    function getCodeSigners(): Arr1JSCodeSigner; overload; virtual; final;
    function getLocation(): JNURL; overload; virtual; final;
    function implies(para1: JSCodeSource): jboolean; overload; virtual;
  end;

  JSGuardedObject = class external 'java.security' name 'GuardedObject' (JLObject, JISerializable)
  public
    constructor create(para1: JLObject; para2: JSGuard); overload;
    function getObject(): JLObject; overload; virtual;  // throws java.lang.SecurityException
  end;

  JSKey = interface external 'java.security' name 'Key' (JISerializable)
    const
      serialVersionUID = jlong(6603384152749567654);
    function getAlgorithm(): JLString; overload;
    function getFormat(): JLString; overload;
    function getEncoded(): Arr1jbyte; overload;
  end;

  JSKeyPair = class sealed external 'java.security' name 'KeyPair' (JLObject, JISerializable)
  public
    constructor create(para1: JSPublicKey; para2: JSPrivateKey); overload;
    function getPrivate(): JSPrivateKey; overload; virtual;
    function getPublic(): JSPublicKey; overload; virtual;
  end;

  JSKeyRep = class external 'java.security' name 'KeyRep' (JLObject, JISerializable)
  public
    type
      InnerType = class;
      Arr1InnerType = array of InnerType;
      Arr2InnerType = array of Arr1InnerType;
      Arr3InnerType = array of Arr2InnerType;
      InnerType = class sealed external 'java.security' name 'Type' (JLEnum)
      public
        final class var
          fPRIVATE: JSKeyRep.InnerType; external name 'PRIVATE';
          fPUBLIC: JSKeyRep.InnerType; external name 'PUBLIC';
          fSECRET: JSKeyRep.InnerType; external name 'SECRET';
      public
        class function values(): JSKeyRep.Arr1InnerType; static; overload;
        class function valueOf(para1: JLString): JSKeyRep.InnerType; static; overload;
      end;

  public
    constructor create(para1: JSKeyRep.InnerType; para2: JLString; para3: JLString; para4: Arr1jbyte); overload;
    constructor create(para1: JSKeyRep.InnerType; para2: JLString; para3: JLString; const para4: array of jbyte); overload;
  strict protected
    function readResolve(): JLObject; overload; virtual;  // throws java.io.ObjectStreamException
  end;

  JSPermissionCollection = class abstract external 'java.security' name 'PermissionCollection' (JLObject, JISerializable)
  public
    constructor create(); overload;
    procedure add(para1: JSPermission); overload; virtual; abstract;
    function elements(): JUEnumeration; overload; virtual; abstract;
    function implies(para1: JSPermission): jboolean; overload; virtual; abstract;
    function isReadOnly(): jboolean; overload; virtual;
    procedure setReadOnly(); overload; virtual;
  end;

  JSSecureRandomSpi = class abstract external 'java.security' name 'SecureRandomSpi' (JLObject, JISerializable)
  public
    constructor create(); overload;
  strict protected
    procedure engineSetSeed(para1: Arr1jbyte); overload; virtual; abstract;
    procedure engineSetSeed(var para1: array of jbyte); overload; virtual; abstract;
    procedure engineNextBytes(para1: Arr1jbyte); overload; virtual; abstract;
    procedure engineNextBytes(var para1: array of jbyte); overload; virtual; abstract;
    function engineGenerateSeed(para1: jint): Arr1jbyte; overload; virtual; abstract;
  end;

  JSSignedObject = class sealed external 'java.security' name 'SignedObject' (JLObject, JISerializable)
  public
    constructor create(para1: JISerializable; para2: JSPrivateKey; para3: JSSignature); overload;  // throws java.io.IOException, java.security.InvalidKeyException, java.security.SignatureException
    function getObject(): JLObject; overload; virtual;  // throws java.io.IOException, java.lang.ClassNotFoundException
    function getSignature(): Arr1jbyte; overload; virtual;
    function getAlgorithm(): JLString; overload; virtual;
    function verify(para1: JSPublicKey; para2: JSSignature): jboolean; overload; virtual;  // throws java.security.InvalidKeyException, java.security.SignatureException
  end;

  JSecurityTimestamp = class sealed external 'java.security' name 'Timestamp' (JLObject, JISerializable)
  public
    constructor create(para1: JUDate; para2: JSCCertPath); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getSignerCertPath(): JSCCertPath; overload; virtual;
    function getTimestamp(): JUDate; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSCCertPath = class abstract external 'java.security.cert' name 'CertPath' (JLObject, JISerializable)
  public
    type
      InnerCertPathRep = class;
      Arr1InnerCertPathRep = array of InnerCertPathRep;
      Arr2InnerCertPathRep = array of Arr1InnerCertPathRep;
      Arr3InnerCertPathRep = array of Arr2InnerCertPathRep;
      InnerCertPathRep = class external 'java.security.cert' name 'CertPathRep' (JLObject, JISerializable)
      strict protected
        constructor create(para1: JLString; para2: Arr1jbyte); overload;
        constructor create(para1: JLString; const para2: array of jbyte); overload;
        function readResolve(): JLObject; overload; virtual;  // throws java.io.ObjectStreamException
      end;

  strict protected
    constructor create(para1: JLString); overload;
  public
    function getType(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function getCertificates(): JUList; overload; virtual; abstract;
    function getEncoded(): Arr1jbyte; overload; virtual; abstract;  // throws java.security.cert.CertificateEncodingException
    function getEncoded(para1: JLString): Arr1jbyte; overload; virtual; abstract;  // throws java.security.cert.CertificateEncodingException
    function getEncodings(): JUIterator; overload; virtual; abstract;
  strict protected
    function writeReplace(): JLObject; overload; virtual;  // throws java.io.ObjectStreamException
  end;

  JSCCertificate = class abstract external 'java.security.cert' name 'Certificate' (JLObject, JISerializable)
  public
    type
      InnerCertificateRep = class;
      Arr1InnerCertificateRep = array of InnerCertificateRep;
      Arr2InnerCertificateRep = array of Arr1InnerCertificateRep;
      Arr3InnerCertificateRep = array of Arr2InnerCertificateRep;
      InnerCertificateRep = class external 'java.security.cert' name 'CertificateRep' (JLObject, JISerializable)
      strict protected
        constructor create(para1: JLString; para2: Arr1jbyte); overload;
        constructor create(para1: JLString; const para2: array of jbyte); overload;
        function readResolve(): JLObject; overload; virtual;  // throws java.io.ObjectStreamException
      end;

  strict protected
    constructor create(para1: JLString); overload;
  public
    function getType(): JLString; overload; virtual; final;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function getEncoded(): Arr1jbyte; overload; virtual; abstract;  // throws java.security.cert.CertificateEncodingException
    procedure verify(para1: JSPublicKey); overload; virtual; abstract;  // throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    procedure verify(para1: JSPublicKey; para2: JLString); overload; virtual; abstract;  // throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    function toString(): JLString; overload; virtual; abstract;
    function getPublicKey(): JSPublicKey; overload; virtual; abstract;
  strict protected
    function writeReplace(): JLObject; overload; virtual;  // throws java.io.ObjectStreamException
  end;

  JSSQLException = class external 'java.sql' name 'SQLException' (JLException, JISerializable, JLIterable)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
    function getErrorCode(): jint; overload; virtual;
    function getNextException(): JSSQLException; overload; virtual;
    function getSQLState(): JLString; overload; virtual;
    procedure setNextException(para1: JSSQLException); overload; virtual;
    function iterator(): JUIterator; overload; virtual;
  end;

  JTDateFormatSymbols = class external 'java.text' name 'DateFormatSymbols' (JLObject, JISerializable, JLCloneable)
  public
    constructor create(); overload;
    constructor create(para1: JULocale); overload;
    class function getInstance(): JTDateFormatSymbols; static; overload; final;
    class function getInstance(para1: JULocale): JTDateFormatSymbols; static; overload; final;
    class function getAvailableLocales(): Arr1JULocale; static; overload;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function getAmPmStrings(): Arr1JLString; overload; virtual;
    function getEras(): Arr1JLString; overload; virtual;
    function getLocalPatternChars(): JLString; overload; virtual;
    function getMonths(): Arr1JLString; overload; virtual;
    function getShortMonths(): Arr1JLString; overload; virtual;
    function getShortWeekdays(): Arr1JLString; overload; virtual;
    function getWeekdays(): Arr1JLString; overload; virtual;
    function getZoneStrings(): Arr2JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure setAmPmStrings(para1: Arr1JLString); overload; virtual;
    procedure setAmPmStrings(var para1: array of JLString); overload; virtual;
    procedure setEras(para1: Arr1JLString); overload; virtual;
    procedure setEras(var para1: array of JLString); overload; virtual;
    procedure setLocalPatternChars(para1: JLString); overload; virtual;
    procedure setMonths(para1: Arr1JLString); overload; virtual;
    procedure setMonths(var para1: array of JLString); overload; virtual;
    procedure setShortMonths(para1: Arr1JLString); overload; virtual;
    procedure setShortMonths(var para1: array of JLString); overload; virtual;
    procedure setShortWeekdays(para1: Arr1JLString); overload; virtual;
    procedure setShortWeekdays(var para1: array of JLString); overload; virtual;
    procedure setWeekdays(para1: Arr1JLString); overload; virtual;
    procedure setWeekdays(var para1: array of JLString); overload; virtual;
    procedure setZoneStrings(para1: Arr2JLString); overload; virtual;
  end;

  JTDecimalFormatSymbols = class external 'java.text' name 'DecimalFormatSymbols' (JLObject, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JULocale); overload;
    class function getInstance(): JTDecimalFormatSymbols; static; overload;
    class function getInstance(para1: JULocale): JTDecimalFormatSymbols; static; overload;
    class function getAvailableLocales(): Arr1JULocale; static; overload;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function getCurrency(): JUCurrency; overload; virtual;
    function getInternationalCurrencySymbol(): JLString; overload; virtual;
    function getCurrencySymbol(): JLString; overload; virtual;
    function getDecimalSeparator(): jchar; overload; virtual;
    function getDigit(): jchar; overload; virtual;
    function getGroupingSeparator(): jchar; overload; virtual;
    function getInfinity(): JLString; overload; virtual;
    function getMinusSign(): jchar; overload; virtual;
    function getMonetaryDecimalSeparator(): jchar; overload; virtual;
    function getNaN(): JLString; overload; virtual;
    function getPatternSeparator(): jchar; overload; virtual;
    function getPercent(): jchar; overload; virtual;
    function getPerMill(): jchar; overload; virtual;
    function getZeroDigit(): jchar; overload; virtual;
    function getExponentSeparator(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure setCurrency(para1: JUCurrency); overload; virtual;
    procedure setInternationalCurrencySymbol(para1: JLString); overload; virtual;
    procedure setCurrencySymbol(para1: JLString); overload; virtual;
    procedure setDecimalSeparator(para1: jchar); overload; virtual;
    procedure setDigit(para1: jchar); overload; virtual;
    procedure setGroupingSeparator(para1: jchar); overload; virtual;
    procedure setInfinity(para1: JLString); overload; virtual;
    procedure setMinusSign(para1: jchar); overload; virtual;
    procedure setMonetaryDecimalSeparator(para1: jchar); overload; virtual;
    procedure setNaN(para1: JLString); overload; virtual;
    procedure setPatternSeparator(para1: jchar); overload; virtual;
    procedure setPercent(para1: jchar); overload; virtual;
    procedure setPerMill(para1: jchar); overload; virtual;
    procedure setZeroDigit(para1: jchar); overload; virtual;
    procedure setExponentSeparator(para1: JLString); overload; virtual;
  end;

  JUCurrency = class sealed external 'java.util' name 'Currency' (JLObject, JISerializable)
  public
    class function getInstance(para1: JLString): JUCurrency; static; overload;
    class function getInstance(para1: JULocale): JUCurrency; static; overload;
    class function getAvailableCurrencies(): JUSet; static; overload;
    function getCurrencyCode(): JLString; overload; virtual;
    function getDisplayName(): JLString; overload; virtual;
    function getDisplayName(para1: JULocale): JLString; overload; virtual;
    function getSymbol(): JLString; overload; virtual;
    function getSymbol(para1: JULocale): JLString; overload; virtual;
    function getDefaultFractionDigits(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JUDate = class external 'java.util' name 'Date' (JLObject, JISerializable, JLCloneable, JLComparable)
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload;
    constructor create(para1: jlong); overload;
    constructor create(para1: JLString); overload;
    function after(para1: JUDate): jboolean; overload; virtual;
    function before(para1: JUDate): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;
    function compareTo(para1: JUDate): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getDate(): jint; overload; virtual;
    function getDay(): jint; overload; virtual;
    function getHours(): jint; overload; virtual;
    function getMinutes(): jint; overload; virtual;
    function getMonth(): jint; overload; virtual;
    function getSeconds(): jint; overload; virtual;
    function getTime(): jlong; overload; virtual;
    function getTimezoneOffset(): jint; overload; virtual;
    function getYear(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    class function parse(para1: JLString): jlong; static; overload;
    procedure setDate(para1: jint); overload; virtual;
    procedure setHours(para1: jint); overload; virtual;
    procedure setMinutes(para1: jint); overload; virtual;
    procedure setMonth(para1: jint); overload; virtual;
    procedure setSeconds(para1: jint); overload; virtual;
    procedure setTime(para1: jlong); overload; virtual;
    procedure setYear(para1: jint); overload; virtual;
    function toGMTString(): JLString; overload; virtual;
    function toLocaleString(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    class function UTC(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint): jlong; static; overload;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JUEventObject = class external 'java.util' name 'EventObject' (JLObject, JISerializable)
  strict protected
    var
      fsource: JLObject; external name 'source';
  public
    constructor create(para1: JLObject); overload;
    function getSource(): JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JULocale = class sealed external 'java.util' name 'Locale' (JLObject, JLCloneable, JISerializable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'java.util' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function setLanguage(para1: JLString): JULocale.InnerBuilder; overload; virtual;
        function setLanguageTag(para1: JLString): JULocale.InnerBuilder; overload; virtual;
        function setRegion(para1: JLString): JULocale.InnerBuilder; overload; virtual;
        function setVariant(para1: JLString): JULocale.InnerBuilder; overload; virtual;
        function setScript(para1: JLString): JULocale.InnerBuilder; overload; virtual;
        function setLocale(para1: JULocale): JULocale.InnerBuilder; overload; virtual;
        function addUnicodeLocaleAttribute(para1: JLString): JULocale.InnerBuilder; overload; virtual;
        function removeUnicodeLocaleAttribute(para1: JLString): JULocale.InnerBuilder; overload; virtual;
        function setExtension(para1: jchar; para2: JLString): JULocale.InnerBuilder; overload; virtual;
        function clearExtensions(): JULocale.InnerBuilder; overload; virtual;
        function setUnicodeLocaleKeyword(para1: JLString; para2: JLString): JULocale.InnerBuilder; overload; virtual;
        function clear(): JULocale.InnerBuilder; overload; virtual;
        function build(): JULocale; overload; virtual;
      end;

  public
    final class var
      fCANADA: JULocale; external name 'CANADA';
      fCANADA_FRENCH: JULocale; external name 'CANADA_FRENCH';
      fCHINA: JULocale; external name 'CHINA';
      fCHINESE: JULocale; external name 'CHINESE';
      fENGLISH: JULocale; external name 'ENGLISH';
      fFRANCE: JULocale; external name 'FRANCE';
      fFRENCH: JULocale; external name 'FRENCH';
      fGERMAN: JULocale; external name 'GERMAN';
      fGERMANY: JULocale; external name 'GERMANY';
      fITALIAN: JULocale; external name 'ITALIAN';
      fITALY: JULocale; external name 'ITALY';
      fJAPAN: JULocale; external name 'JAPAN';
      fJAPANESE: JULocale; external name 'JAPANESE';
      fKOREA: JULocale; external name 'KOREA';
      fKOREAN: JULocale; external name 'KOREAN';
      fPRC: JULocale; external name 'PRC';
  public
    const
      PRIVATE_USE_EXTENSION = 120;
  public
    final class var
      fROOT: JULocale; external name 'ROOT';
      fSIMPLIFIED_CHINESE: JULocale; external name 'SIMPLIFIED_CHINESE';
      fTAIWAN: JULocale; external name 'TAIWAN';
      fTRADITIONAL_CHINESE: JULocale; external name 'TRADITIONAL_CHINESE';
      fUK: JULocale; external name 'UK';
  public
    const
      UNICODE_LOCALE_EXTENSION = 117;
  public
    final class var
      fUS: JULocale; external name 'US';
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;
    class function forLanguageTag(para1: JLString): JULocale; static; overload;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    class function getAvailableLocales(): Arr1JULocale; static; overload;
    function getCountry(): JLString; overload; virtual;
    class function getDefault(): JULocale; static; overload;
    function getDisplayCountry(): JLString; overload; virtual; final;
    function getDisplayCountry(para1: JULocale): JLString; overload; virtual;
    function getDisplayLanguage(): JLString; overload; virtual; final;
    function getDisplayLanguage(para1: JULocale): JLString; overload; virtual;
    function getDisplayName(): JLString; overload; virtual; final;
    function getDisplayName(para1: JULocale): JLString; overload; virtual;
    function getDisplayVariant(): JLString; overload; virtual; final;
    function getDisplayVariant(para1: JULocale): JLString; overload; virtual;
    function getISO3Country(): JLString; overload; virtual;
    function getISO3Language(): JLString; overload; virtual;
    class function getISOCountries(): Arr1JLString; static; overload;
    class function getISOLanguages(): Arr1JLString; static; overload;
    function getLanguage(): JLString; overload; virtual;
    function getVariant(): JLString; overload; virtual;
    function getScript(): JLString; overload; virtual;
    function getDisplayScript(): JLString; overload; virtual;
    function getDisplayScript(para1: JULocale): JLString; overload; virtual;
    function toLanguageTag(): JLString; overload; virtual;
    function getExtensionKeys(): JUSet; overload; virtual;
    function getExtension(para1: jchar): JLString; overload; virtual;
    function getUnicodeLocaleType(para1: JLString): JLString; overload; virtual;
    function getUnicodeLocaleAttributes(): JUSet; overload; virtual;
    function getUnicodeLocaleKeys(): JUSet; overload; virtual;
    function hashCode(): jint; overload; virtual;
    class procedure setDefault(para1: JULocale); static; overload;
    function toString(): JLString; overload; virtual; final;
  end;

  JURandom = class external 'java.util' name 'Random' (JLObject, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jlong); overload;
  strict protected
    function next(para1: jint): jint; overload; virtual;
  public
    function nextBoolean(): jboolean; overload; virtual;
    procedure nextBytes(para1: Arr1jbyte); overload; virtual;
    procedure nextBytes(var para1: array of jbyte); overload; virtual;
    function nextDouble(): jdouble; overload; virtual;
    function nextFloat(): jfloat; overload; virtual;
    function nextGaussian(): jdouble; overload; virtual;
    function nextInt(): jint; overload; virtual;
    function nextInt(para1: jint): jint; overload; virtual;
    function nextLong(): jlong; overload; virtual;
    procedure setSeed(para1: jlong); overload; virtual;
  end;

  JUTimeZone = class abstract external 'java.util' name 'TimeZone' (JLObject, JISerializable, JLCloneable)
  public
    const
      LONG = 1;
      SHORT = 0;
  public
    constructor create(); overload;
    function clone(): JLObject; overload; virtual;
    class function getAvailableIDs(): Arr1JLString; static; overload;
    class function getAvailableIDs(para1: jint): Arr1JLString; static; overload;
    class function getDefault(): JUTimeZone; static; overload;
    function getDisplayName(): JLString; overload; virtual; final;
    function getDisplayName(para1: JULocale): JLString; overload; virtual; final;
    function getDisplayName(para1: jboolean; para2: jint): JLString; overload; virtual; final;
    function getDisplayName(para1: jboolean; para2: jint; para3: JULocale): JLString; overload; virtual;
    function getID(): JLString; overload; virtual;
    function getDSTSavings(): jint; overload; virtual;
    function getOffset(para1: jlong): jint; overload; virtual;
    function getOffset(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint): jint; overload; virtual; abstract;
    function getRawOffset(): jint; overload; virtual; abstract;
    class function getTimeZone(para1: JLString): JUTimeZone; static; overload;
    function hasSameRules(para1: JUTimeZone): jboolean; overload; virtual;
    function inDaylightTime(para1: JUDate): jboolean; overload; virtual; abstract;
    class procedure setDefault(para1: JUTimeZone); static; overload;
    procedure setID(para1: JLString); overload; virtual;
    procedure setRawOffset(para1: jint); overload; virtual; abstract;
    function useDaylightTime(): jboolean; overload; virtual; abstract;
  end;

  JUUUID = class sealed external 'java.util' name 'UUID' (JLObject, JISerializable, JLComparable)
  public
    constructor create(para1: jlong; para2: jlong); overload;
    class function randomUUID(): JUUUID; static; overload;
    class function nameUUIDFromBytes(para1: Arr1jbyte): JUUUID; static; overload;
    class function nameUUIDFromBytes(var para1: array of jbyte): JUUUID; static; overload;
    class function fromString(para1: JLString): JUUUID; static; overload;
    function getLeastSignificantBits(): jlong; overload; virtual;
    function getMostSignificantBits(): jlong; overload; virtual;
    function version(): jint; overload; virtual;
    function variant(): jint; overload; virtual;
    function timestamp(): jlong; overload; virtual;
    function clockSequence(): jint; overload; virtual;
    function node(): jlong; overload; virtual;
    function compareTo(para1: JUUUID): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JUCSemaphore = class external 'java.util.concurrent' name 'Semaphore' (JLObject, JISerializable)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jboolean); overload;
    procedure acquire(); overload; virtual;  // throws java.lang.InterruptedException
    procedure acquireUninterruptibly(); overload; virtual;
    function tryAcquire(): jboolean; overload; virtual;
    function tryAcquire(para1: jlong; para2: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    procedure release(); overload; virtual;
    procedure acquire(para1: jint); overload; virtual;  // throws java.lang.InterruptedException
    procedure acquireUninterruptibly(para1: jint); overload; virtual;
    function tryAcquire(para1: jint): jboolean; overload; virtual;
    function tryAcquire(para1: jint; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    procedure release(para1: jint); overload; virtual;
    function availablePermits(): jint; overload; virtual;
    function drainPermits(): jint; overload; virtual;
  strict protected
    procedure reducePermits(para1: jint); overload; virtual;
  public
    function isFair(): jboolean; overload; virtual;
    function hasQueuedThreads(): jboolean; overload; virtual; final;
    function getQueueLength(): jint; overload; virtual; final;
  strict protected
    function getQueuedThreads(): JUCollection; overload; virtual;
  public
    function toString(): JLString; overload; virtual;
  end;

  JUCAAtomicBoolean = class external 'java.util.concurrent.atomic' name 'AtomicBoolean' (JLObject, JISerializable)
  public
    constructor create(para1: jboolean); overload;
    constructor create(); overload;
    function get(): jboolean; overload; virtual; final;
    function compareAndSet(para1: jboolean; para2: jboolean): jboolean; overload; virtual; final;
    function weakCompareAndSet(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    procedure &set(para1: jboolean); overload; virtual; final;
    procedure lazySet(para1: jboolean); overload; virtual; final;
    function getAndSet(para1: jboolean): jboolean; overload; virtual; final;
    function toString(): JLString; overload; virtual;
  end;

  JUCAAtomicIntegerArray = class external 'java.util.concurrent.atomic' name 'AtomicIntegerArray' (JLObject, JISerializable)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: Arr1jint); overload;
    constructor create(const para1: array of jint); overload;
    function length(): jint; overload; virtual; final;
    function get(para1: jint): jint; overload; virtual; final;
    procedure &set(para1: jint; para2: jint); overload; virtual; final;
    procedure lazySet(para1: jint; para2: jint); overload; virtual; final;
    function getAndSet(para1: jint; para2: jint): jint; overload; virtual; final;
    function compareAndSet(para1: jint; para2: jint; para3: jint): jboolean; overload; virtual; final;
    function weakCompareAndSet(para1: jint; para2: jint; para3: jint): jboolean; overload; virtual; final;
    function getAndIncrement(para1: jint): jint; overload; virtual; final;
    function getAndDecrement(para1: jint): jint; overload; virtual; final;
    function getAndAdd(para1: jint; para2: jint): jint; overload; virtual; final;
    function incrementAndGet(para1: jint): jint; overload; virtual; final;
    function decrementAndGet(para1: jint): jint; overload; virtual; final;
    function addAndGet(para1: jint; para2: jint): jint; overload; virtual; final;
    function toString(): JLString; overload; virtual;
  end;

  JUCAAtomicLongArray = class external 'java.util.concurrent.atomic' name 'AtomicLongArray' (JLObject, JISerializable)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: Arr1jlong); overload;
    constructor create(const para1: array of jlong); overload;
    function length(): jint; overload; virtual; final;
    function get(para1: jint): jlong; overload; virtual; final;
    procedure &set(para1: jint; para2: jlong); overload; virtual; final;
    procedure lazySet(para1: jint; para2: jlong); overload; virtual; final;
    function getAndSet(para1: jint; para2: jlong): jlong; overload; virtual; final;
    function compareAndSet(para1: jint; para2: jlong; para3: jlong): jboolean; overload; virtual; final;
    function weakCompareAndSet(para1: jint; para2: jlong; para3: jlong): jboolean; overload; virtual; final;
    function getAndIncrement(para1: jint): jlong; overload; virtual; final;
    function getAndDecrement(para1: jint): jlong; overload; virtual; final;
    function getAndAdd(para1: jint; para2: jlong): jlong; overload; virtual; final;
    function incrementAndGet(para1: jint): jlong; overload; virtual; final;
    function decrementAndGet(para1: jint): jlong; overload; virtual; final;
    function addAndGet(para1: jint; para2: jlong): jlong; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JUCAAtomicReference = class external 'java.util.concurrent.atomic' name 'AtomicReference' (JLObject, JISerializable)
  public
    constructor create(para1: JLObject); overload;
    constructor create(); overload;
    function get(): JLObject; overload; virtual; final;
    procedure &set(para1: JLObject); overload; virtual; final;
    procedure lazySet(para1: JLObject); overload; virtual; final;
    function compareAndSet(para1: JLObject; para2: JLObject): jboolean; overload; virtual; final;
    function weakCompareAndSet(para1: JLObject; para2: JLObject): jboolean; overload; virtual; final;
    function getAndSet(para1: JLObject): JLObject; overload; virtual; final;
    function toString(): JLString; overload; virtual;
  end;

  JUCAAtomicReferenceArray = class external 'java.util.concurrent.atomic' name 'AtomicReferenceArray' (JLObject, JISerializable)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: Arr1JLObject); overload;
    constructor create(const para1: array of JLObject); overload;
    function length(): jint; overload; virtual; final;
    function get(para1: jint): JLObject; overload; virtual; final;
    procedure &set(para1: jint; para2: JLObject); overload; virtual; final;
    procedure lazySet(para1: jint; para2: JLObject); overload; virtual; final;
    function getAndSet(para1: jint; para2: JLObject): JLObject; overload; virtual; final;
    function compareAndSet(para1: jint; para2: JLObject; para3: JLObject): jboolean; overload; virtual; final;
    function weakCompareAndSet(para1: jint; para2: JLObject; para3: JLObject): jboolean; overload; virtual; final;
    function toString(): JLString; overload; virtual;
  end;

  JUCLAbstractOwnableSynchronizer = class abstract external 'java.util.concurrent.locks' name 'AbstractOwnableSynchronizer' (JLObject, JISerializable)
  strict protected
    constructor create(); overload;
    procedure setExclusiveOwnerThread(para1: JLThread); overload; virtual; final;
    function getExclusiveOwnerThread(): JLThread; overload; virtual; final;
  end;

  JULLevel = class external 'java.util.logging' name 'Level' (JLObject, JISerializable)
  public
    final class var
      fALL: JULLevel; external name 'ALL';
      fCONFIG: JULLevel; external name 'CONFIG';
      fFINE: JULLevel; external name 'FINE';
      fFINER: JULLevel; external name 'FINER';
      fFINEST: JULLevel; external name 'FINEST';
      fINFO: JULLevel; external name 'INFO';
      fOFF: JULLevel; external name 'OFF';
      fSEVERE: JULLevel; external name 'SEVERE';
      fWARNING: JULLevel; external name 'WARNING';
  strict protected
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: JLString; para2: jint; para3: JLString); overload;
  public
    class function parse(para1: JLString): JULLevel; static; overload;  // throws java.lang.IllegalArgumentException
    function getName(): JLString; overload; virtual;
    function getResourceBundleName(): JLString; overload; virtual;
    function intValue(): jint; overload; virtual; final;
    function getLocalizedName(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual; final;
  end;

  JULLogRecord = class external 'java.util.logging' name 'LogRecord' (JLObject, JISerializable)
  public
    constructor create(para1: JULLevel; para2: JLString); overload;
    function getLevel(): JULLevel; overload; virtual;
    procedure setLevel(para1: JULLevel); overload; virtual;
    function getLoggerName(): JLString; overload; virtual;
    procedure setLoggerName(para1: JLString); overload; virtual;
    function getMessage(): JLString; overload; virtual;
    procedure setMessage(para1: JLString); overload; virtual;
    function getMillis(): jlong; overload; virtual;
    procedure setMillis(para1: jlong); overload; virtual;
    function getParameters(): Arr1JLObject; overload; virtual;
    procedure setParameters(para1: Arr1JLObject); overload; virtual;
    procedure setParameters(var para1: array of JLObject); overload; virtual;
    function getResourceBundle(): JUResourceBundle; overload; virtual;
    procedure setResourceBundle(para1: JUResourceBundle); overload; virtual;
    function getResourceBundleName(): JLString; overload; virtual;
    procedure setResourceBundleName(para1: JLString); overload; virtual;
    function getSequenceNumber(): jlong; overload; virtual;
    procedure setSequenceNumber(para1: jlong); overload; virtual;
    function getSourceClassName(): JLString; overload; virtual;
    procedure setSourceClassName(para1: JLString); overload; virtual;
    function getSourceMethodName(): JLString; overload; virtual;
    procedure setSourceMethodName(para1: JLString); overload; virtual;
    function getThreadID(): jint; overload; virtual;
    procedure setThreadID(para1: jint); overload; virtual;
    function getThrown(): JLThrowable; overload; virtual;
    procedure setThrown(para1: JLThrowable); overload; virtual;
  end;

  JURPattern = class sealed external 'java.util.regex' name 'Pattern' (JLObject, JISerializable)
  public
    const
      CANON_EQ = 128;
      CASE_INSENSITIVE = 2;
      COMMENTS = 4;
      DOTALL = 32;
      LITERAL = 16;
      MULTILINE = 8;
      UNICODE_CASE = 64;
      UNIX_LINES = 1;
  public
    function matcher(para1: JLCharSequence): JURMatcher; overload; virtual;
    function split(para1: JLCharSequence; para2: jint): Arr1JLString; overload; virtual;
    function split(para1: JLCharSequence): Arr1JLString; overload; virtual;
    function pattern(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function flags(): jint; overload; virtual;
    class function compile(para1: JLString; para2: jint): JURPattern; static; overload;  // throws java.util.regex.PatternSyntaxException
    class function compile(para1: JLString): JURPattern; static; overload;
    class function matches(para1: JLString; para2: JLCharSequence): jboolean; static; overload;
    class function quote(para1: JLString): JLString; static; overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  JCSealedObject = class external 'javax.crypto' name 'SealedObject' (JLObject, JISerializable)
  strict protected
    var
      fencodedParams: Arr1jbyte; external name 'encodedParams';
  public
    constructor create(para1: JISerializable; para2: JCCipher); overload;  // throws java.io.IOException, javax.crypto.IllegalBlockSizeException
  strict protected
    constructor create(para1: JCSealedObject); overload;
  public
    function getAlgorithm(): JLString; overload; virtual; final;
    function getObject(para1: JSKey): JLObject; overload; virtual; final;  // throws java.io.IOException, java.lang.ClassNotFoundException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    function getObject(para1: JCCipher): JLObject; overload; virtual; final;  // throws java.io.IOException, java.lang.ClassNotFoundException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    function getObject(para1: JSKey; para2: JLString): JLObject; overload; virtual; final;  // throws java.io.IOException, java.lang.ClassNotFoundException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.InvalidKeyException
  end;

  JSASubject = class sealed external 'javax.security.auth' name 'Subject' (JLObject, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jboolean; para2: JUSet; para3: JUSet; para4: JUSet); overload;
    class function doAs(para1: JSASubject; para2: JSPrivilegedAction): JLObject; static; overload;
    class function doAsPrivileged(para1: JSASubject; para2: JSPrivilegedAction; para3: JSAccessControlContext): JLObject; static; overload;
    class function doAs(para1: JSASubject; para2: JSPrivilegedExceptionAction): JLObject; static; overload;  // throws java.security.PrivilegedActionException
    class function doAsPrivileged(para1: JSASubject; para2: JSPrivilegedExceptionAction; para3: JSAccessControlContext): JLObject; static; overload;  // throws java.security.PrivilegedActionException
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getPrincipals(): JUSet; overload; virtual;
    function getPrincipals(para1: JLClass): JUSet; overload; virtual;
    function getPrivateCredentials(): JUSet; overload; virtual;
    function getPrivateCredentials(para1: JLClass): JUSet; overload; virtual;
    function getPublicCredentials(): JUSet; overload; virtual;
    function getPublicCredentials(para1: JLClass): JUSet; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure setReadOnly(); overload; virtual;
    function isReadOnly(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    class function getSubject(para1: JSAccessControlContext): JSASubject; static; overload;
  end;

  JXNQName = class external 'javax.xml.namespace' name 'QName' (JLObject, JISerializable)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;
    constructor create(para1: JLString); overload;
    function getNamespaceURI(): JLString; overload; virtual;
    function getLocalPart(): JLString; overload; virtual;
    function getPrefix(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    class function valueOf(para1: JLString): JXNQName; static; overload;
  end;

  OAHProtocolVersion = class external 'org.apache.http' name 'ProtocolVersion' (JLObject, JISerializable, JLCloneable)
  strict protected
    final var
      fmajor: jint; external name 'major';
      fminor: jint; external name 'minor';
      fprotocol: JLString; external name 'protocol';
  public
    constructor create(para1: JLString; para2: jint; para3: jint); overload;
    function getProtocol(): JLString; overload; virtual; final;
    function getMajor(): jint; overload; virtual; final;
    function getMinor(): jint; overload; virtual; final;
    function forVersion(para1: jint; para2: jint): OAHProtocolVersion; overload; virtual;
    function hashCode(): jint; overload; virtual; final;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function isComparable(para1: OAHProtocolVersion): jboolean; overload; virtual;
    function compareToVersion(para1: OAHProtocolVersion): jint; overload; virtual;
    function greaterEquals(para1: OAHProtocolVersion): jboolean; overload; virtual; final;
    function lessEquals(para1: OAHProtocolVersion): jboolean; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHCCookieIdentityComparator = class external 'org.apache.http.cookie' name 'CookieIdentityComparator' (JLObject, JISerializable, JUComparator)
  public
    constructor create(); overload;
    function compare(para1: OAHCCookie; para2: OAHCCookie): jint; overload; virtual;
    function compare(para1: JLObject; para2: JLObject): jint; overload; virtual;
  end;

  OAHCCookiePathComparator = class external 'org.apache.http.cookie' name 'CookiePathComparator' (JLObject, JISerializable, JUComparator)
  public
    constructor create(); overload;
    function compare(para1: OAHCCookie; para2: OAHCCookie): jint; overload; virtual;
    function compare(para1: JLObject; para2: JLObject): jint; overload; virtual;
  end;

  ANTagLostException = class external 'android.nfc' name 'TagLostException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  AUBase64DataException = class external 'android.util' name 'Base64DataException' (JIIOException)
  public
    constructor create(para1: JLString); overload;
  end;

  AUMalformedJsonException = class sealed external 'android.util' name 'MalformedJsonException' (JIIOException)
  public
    constructor create(para1: JLString); overload;
  end;

  JICharConversionException = class external 'java.io' name 'CharConversionException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIEOFException = class external 'java.io' name 'EOFException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIFileNotFoundException = class external 'java.io' name 'FileNotFoundException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIInterruptedIOException = class external 'java.io' name 'InterruptedIOException' (JIIOException)
  public
    var
      fbytesTransferred: jint; external name 'bytesTransferred';
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIObjectStreamException = class abstract external 'java.io' name 'ObjectStreamException' (JIIOException)
  strict protected
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JISyncFailedException = class external 'java.io' name 'SyncFailedException' (JIIOException)
  public
    constructor create(para1: JLString); overload;
  end;

  JIUTFDataFormatException = class external 'java.io' name 'UTFDataFormatException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIUnsupportedEncodingException = class external 'java.io' name 'UnsupportedEncodingException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNHttpRetryException = class external 'java.net' name 'HttpRetryException' (JIIOException)
  public
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: JLString; para2: jint; para3: JLString); overload;
    function getLocation(): JLString; overload; virtual;
    function getReason(): JLString; overload; virtual;
    function responseCode(): jint; overload; virtual;
  end;

  JNMalformedURLException = class external 'java.net' name 'MalformedURLException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNProtocolException = class external 'java.net' name 'ProtocolException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNSocketException = class external 'java.net' name 'SocketException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNUnknownHostException = class external 'java.net' name 'UnknownHostException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNUnknownServiceException = class external 'java.net' name 'UnknownServiceException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNCClosedChannelException = class external 'java.nio.channels' name 'ClosedChannelException' (JIIOException)
  public
    constructor create(); overload;
  end;

  JNCFileLockInterruptionException = class external 'java.nio.channels' name 'FileLockInterruptionException' (JIIOException)
  public
    constructor create(); overload;
  end;

  JUInvalidPropertiesFormatException = class external 'java.util' name 'InvalidPropertiesFormatException' (JIIOException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JUZZipException = class external 'java.util.zip' name 'ZipException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNSSSLException = class external 'javax.net.ssl' name 'SSLException' (JIIOException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  OAHConnectionClosedException = class external 'org.apache.http' name 'ConnectionClosedException' (JIIOException)
  public
    constructor create(para1: JLString); overload;
  end;

  OAHMalformedChunkCodingException = class external 'org.apache.http' name 'MalformedChunkCodingException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OAHNoHttpResponseException = class external 'org.apache.http' name 'NoHttpResponseException' (JIIOException)
  public
    constructor create(para1: JLString); overload;
  end;

  OAHCClientProtocolException = class external 'org.apache.http.client' name 'ClientProtocolException' (JIIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  ATAssertionFailedError = class external 'android.test' name 'AssertionFailedError' (JLError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIIOError = class external 'java.io' name 'IOError' (JLError)
  public
    constructor create(para1: JLThrowable); overload;
  end;

  JLAssertionError = class external 'java.lang' name 'AssertionError' (JLError)
  public
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLObject); overload;
    constructor create(para1: jboolean); overload;
    constructor create(para1: jchar); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jlong); overload;
    constructor create(para1: jfloat); overload;
    constructor create(para1: jdouble); overload;
  end;

  JLThreadDeath = class external 'java.lang' name 'ThreadDeath' (JLError)
  public
    constructor create(); overload;
  end;

  JLVirtualMachineError = class abstract external 'java.lang' name 'VirtualMachineError' (JLError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLAAnnotationFormatError = class external 'java.lang.annotation' name 'AnnotationFormatError' (JLError)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JUServiceConfigurationError = class external 'java.util' name 'ServiceConfigurationError' (JLError)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  JXPFactoryConfigurationError = class external 'javax.xml.parsers' name 'FactoryConfigurationError' (JLError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLException); overload;
    constructor create(para1: JLException; para2: JLString); overload;
    function getMessage(): JLString; overload; virtual;
    function getException(): JLException; overload; virtual;
  end;

  JXTTransformerFactoryConfigurationError = class external 'javax.xml.transform' name 'TransformerFactoryConfigurationError' (JLError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLException); overload;
    constructor create(para1: JLException; para2: JLString); overload;
    function getMessage(): JLString; overload; virtual;
    function getException(): JLException; overload; virtual;
  end;

  JFAssertionFailedError = class external 'junit.framework' name 'AssertionFailedError' (JLAssertionError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ATGetChars = interface external 'android.text' name 'GetChars' (JLCharSequence)
    procedure getChars(para1: jint; para2: jint; para3: Arr1jchar; para4: jint); overload;
    procedure getChars(para1: jint; para2: jint; var para3: array of jchar; para4: jint); overload;
  end;

  ATSpanned = interface external 'android.text' name 'Spanned' (JLCharSequence)
    const
      SPAN_COMPOSING = 256;
      SPAN_EXCLUSIVE_EXCLUSIVE = 33;
      SPAN_EXCLUSIVE_INCLUSIVE = 34;
      SPAN_INCLUSIVE_EXCLUSIVE = 17;
      SPAN_INCLUSIVE_INCLUSIVE = 18;
      SPAN_INTERMEDIATE = 512;
      SPAN_MARK_MARK = 17;
      SPAN_MARK_POINT = 18;
      SPAN_PARAGRAPH = 51;
      SPAN_POINT_MARK = 33;
      SPAN_POINT_MARK_MASK = 51;
      SPAN_POINT_POINT = 34;
      SPAN_PRIORITY = 16711680;
      SPAN_PRIORITY_SHIFT = 16;
      SPAN_USER = -16777216;
      SPAN_USER_SHIFT = 24;
    function getSpans(para1: jint; para2: jint; para3: JLClass): Arr1JLObject; overload;
    function getSpanStart(para1: JLObject): jint; overload;
    function getSpanEnd(para1: JLObject): jint; overload;
    function getSpanFlags(para1: JLObject): jint; overload;
    function nextSpanTransition(para1: jint; para2: jint; para3: JLClass): jint; overload;
  end;

  JLClassCircularityError = class external 'java.lang' name 'ClassCircularityError' (JLLinkageError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLClassFormatError = class external 'java.lang' name 'ClassFormatError' (JLLinkageError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLExceptionInInitializerError = class external 'java.lang' name 'ExceptionInInitializerError' (JLLinkageError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
    function getException(): JLThrowable; overload; virtual;
    function getCause(): JLThrowable; overload; virtual;
  end;

  JLIncompatibleClassChangeError = class external 'java.lang' name 'IncompatibleClassChangeError' (JLLinkageError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLNoClassDefFoundError = class external 'java.lang' name 'NoClassDefFoundError' (JLLinkageError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLUnsatisfiedLinkError = class external 'java.lang' name 'UnsatisfiedLinkError' (JLLinkageError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLVerifyError = class external 'java.lang' name 'VerifyError' (JLLinkageError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLIllegalThreadStateException = class external 'java.lang' name 'IllegalThreadStateException' (JLIllegalArgumentException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLNumberFormatException = class external 'java.lang' name 'NumberFormatException' (JLIllegalArgumentException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNCIllegalSelectorException = class external 'java.nio.channels' name 'IllegalSelectorException' (JLIllegalArgumentException)
  public
    constructor create(); overload;
  end;

  JNCUnresolvedAddressException = class external 'java.nio.channels' name 'UnresolvedAddressException' (JLIllegalArgumentException)
  public
    constructor create(); overload;
  end;

  JNCUnsupportedAddressTypeException = class external 'java.nio.channels' name 'UnsupportedAddressTypeException' (JLIllegalArgumentException)
  public
    constructor create(); overload;
  end;

  JSInvalidParameterException = class external 'java.security' name 'InvalidParameterException' (JLIllegalArgumentException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JUIllegalFormatException = class external 'java.util' name 'IllegalFormatException' (JLIllegalArgumentException, JISerializable)
  end;

  JURPatternSyntaxException = class external 'java.util.regex' name 'PatternSyntaxException' (JLIllegalArgumentException)
  public
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    function getPattern(): JLString; overload; virtual;
    function getMessage(): JLString; overload; virtual;
    function getDescription(): JLString; overload; virtual;
    function getIndex(): jint; overload; virtual;
  end;

  JLInheritableThreadLocal = class external 'java.lang' name 'InheritableThreadLocal' (JLThreadLocal)
  public
    constructor create(); overload;
  strict protected
    function childValue(para1: JLObject): JLObject; overload; virtual;
  end;

  JLPackage = class external 'java.lang' name 'Package' (JLObject, JLRAnnotatedElement)
  public
    function getAnnotation(para1: JLClass): JLAAnnotation; overload; virtual;
    function getAnnotations(): Arr1JLAAnnotation; overload; virtual;
    function getDeclaredAnnotations(): Arr1JLAAnnotation; overload; virtual;
    function isAnnotationPresent(para1: JLClass): jboolean; overload; virtual;
    function getImplementationTitle(): JLString; overload; virtual;
    function getImplementationVendor(): JLString; overload; virtual;
    function getImplementationVersion(): JLString; overload; virtual;
    function getName(): JLString; overload; virtual;
    class function getPackage(para1: JLString): JLPackage; static; overload;
    class function getPackages(): Arr1JLPackage; static; overload;
    function getSpecificationTitle(): JLString; overload; virtual;
    function getSpecificationVendor(): JLString; overload; virtual;
    function getSpecificationVersion(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function isCompatibleWith(para1: JLString): jboolean; overload; virtual;  // throws java.lang.NumberFormatException
    function isSealed(): jboolean; overload; virtual;
    function isSealed(para1: JNURL): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JLRConstructor = class sealed external 'java.lang.reflect' name 'Constructor' (JLRAccessibleObject, JLRGenericDeclaration, JLRMember)
  public
    function getAnnotations(): Arr1JLAAnnotation; overload; virtual;
    function getModifiers(): jint; overload; virtual;
    function isVarArgs(): jboolean; overload; virtual;
    function isSynthetic(): jboolean; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getDeclaringClass(): JLClass; overload; virtual;
    function getExceptionTypes(): Arr1JLClass; overload; virtual;
    function getParameterTypes(): Arr1JLClass; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getTypeParameters(): Arr1JLRTypeVariable; overload; virtual;
    function toGenericString(): JLString; overload; virtual;
    function getGenericParameterTypes(): Arr1JLRType; overload; virtual;
    function getGenericExceptionTypes(): Arr1JLRType; overload; virtual;
    function getDeclaredAnnotations(): Arr1JLAAnnotation; overload; virtual;
    function isAnnotationPresent(para1: JLClass): jboolean; overload; virtual;
    function getAnnotation(para1: JLClass): JLAAnnotation; overload; virtual;
    function getParameterAnnotations(): Arr2JLAAnnotation; overload; virtual;
    function newInstance(para1: Arr1JLObject): JLObject; overload; virtual;  // throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    function newInstance(const para1: array of JLObject): JLObject; overload; virtual;  // throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    function toString(): JLString; overload; virtual;
  end;

  JLRGenericArrayType = interface external 'java.lang.reflect' name 'GenericArrayType' (JLRType)
    function getGenericComponentType(): JLRType; overload;
  end;

  JLRParameterizedType = interface external 'java.lang.reflect' name 'ParameterizedType' (JLRType)
    function getActualTypeArguments(): Arr1JLRType; overload;
    function getOwnerType(): JLRType; overload;
    function getRawType(): JLRType; overload;
  end;

  JLRTypeVariable = interface external 'java.lang.reflect' name 'TypeVariable' (JLRType)
    function getBounds(): Arr1JLRType; overload;
    function getGenericDeclaration(): JLRGenericDeclaration; overload;
    function getName(): JLString; overload;
  end;

  JLRWildcardType = interface external 'java.lang.reflect' name 'WildcardType' (JLRType)
    function getUpperBounds(): Arr1JLRType; overload;
    function getLowerBounds(): Arr1JLRType; overload;
  end;

  JMBigDecimal = class external 'java.math' name 'BigDecimal' (JLNumber, JLComparable, JISerializable)
  public
    final class var
      fONE: JMBigDecimal; external name 'ONE';
  public
    const
      ROUND_CEILING = 2;
      ROUND_DOWN = 1;
      ROUND_FLOOR = 3;
      ROUND_HALF_DOWN = 5;
      ROUND_HALF_EVEN = 6;
      ROUND_HALF_UP = 4;
      ROUND_UNNECESSARY = 7;
      ROUND_UP = 0;
  public
    final class var
      fTEN: JMBigDecimal; external name 'TEN';
      fZERO: JMBigDecimal; external name 'ZERO';
  public
    constructor create(para1: Arr1jchar; para2: jint; para3: jint); overload;
    constructor create(const para1: array of jchar; para2: jint; para3: jint); overload;
    constructor create(para1: Arr1jchar; para2: jint; para3: jint; para4: JMMathContext); overload;
    constructor create(const para1: array of jchar; para2: jint; para3: jint; para4: JMMathContext); overload;
    constructor create(para1: Arr1jchar); overload;
    constructor create(const para1: array of jchar); overload;
    constructor create(para1: Arr1jchar; para2: JMMathContext); overload;
    constructor create(const para1: array of jchar; para2: JMMathContext); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JMMathContext); overload;
    constructor create(para1: jdouble); overload;
    constructor create(para1: jdouble; para2: JMMathContext); overload;
    constructor create(para1: JMBigInteger); overload;
    constructor create(para1: JMBigInteger; para2: JMMathContext); overload;
    constructor create(para1: JMBigInteger; para2: jint); overload;
    constructor create(para1: JMBigInteger; para2: jint; para3: JMMathContext); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JMMathContext); overload;
    constructor create(para1: jlong); overload;
    constructor create(para1: jlong; para2: JMMathContext); overload;
    class function valueOf(para1: jlong; para2: jint): JMBigDecimal; static; overload;
    class function valueOf(para1: jlong): JMBigDecimal; static; overload;
    class function valueOf(para1: jdouble): JMBigDecimal; static; overload;
    function add(para1: JMBigDecimal): JMBigDecimal; overload; virtual;
    function add(para1: JMBigDecimal; para2: JMMathContext): JMBigDecimal; overload; virtual;
    function subtract(para1: JMBigDecimal): JMBigDecimal; overload; virtual;
    function subtract(para1: JMBigDecimal; para2: JMMathContext): JMBigDecimal; overload; virtual;
    function multiply(para1: JMBigDecimal): JMBigDecimal; overload; virtual;
    function multiply(para1: JMBigDecimal; para2: JMMathContext): JMBigDecimal; overload; virtual;
    function divide(para1: JMBigDecimal; para2: jint; para3: jint): JMBigDecimal; overload; virtual;
    function divide(para1: JMBigDecimal; para2: jint; para3: JMRoundingMode): JMBigDecimal; overload; virtual;
    function divide(para1: JMBigDecimal; para2: jint): JMBigDecimal; overload; virtual;
    function divide(para1: JMBigDecimal; para2: JMRoundingMode): JMBigDecimal; overload; virtual;
    function divide(para1: JMBigDecimal): JMBigDecimal; overload; virtual;
    function divide(para1: JMBigDecimal; para2: JMMathContext): JMBigDecimal; overload; virtual;
    function divideToIntegralValue(para1: JMBigDecimal): JMBigDecimal; overload; virtual;
    function divideToIntegralValue(para1: JMBigDecimal; para2: JMMathContext): JMBigDecimal; overload; virtual;
    function remainder(para1: JMBigDecimal): JMBigDecimal; overload; virtual;
    function remainder(para1: JMBigDecimal; para2: JMMathContext): JMBigDecimal; overload; virtual;
    function divideAndRemainder(para1: JMBigDecimal): Arr1JMBigDecimal; overload; virtual;
    function divideAndRemainder(para1: JMBigDecimal; para2: JMMathContext): Arr1JMBigDecimal; overload; virtual;
    function pow(para1: jint): JMBigDecimal; overload; virtual;
    function pow(para1: jint; para2: JMMathContext): JMBigDecimal; overload; virtual;
    function abs(): JMBigDecimal; overload; virtual;
    function abs(para1: JMMathContext): JMBigDecimal; overload; virtual;
    function negate(): JMBigDecimal; overload; virtual;
    function negate(para1: JMMathContext): JMBigDecimal; overload; virtual;
    function plus(): JMBigDecimal; overload; virtual;
    function plus(para1: JMMathContext): JMBigDecimal; overload; virtual;
    function signum(): jint; overload; virtual;
    function scale(): jint; overload; virtual;
    function precision(): jint; overload; virtual;
    function unscaledValue(): JMBigInteger; overload; virtual;
    function round(para1: JMMathContext): JMBigDecimal; overload; virtual;
    function setScale(para1: jint; para2: JMRoundingMode): JMBigDecimal; overload; virtual;
    function setScale(para1: jint; para2: jint): JMBigDecimal; overload; virtual;
    function setScale(para1: jint): JMBigDecimal; overload; virtual;
    function movePointLeft(para1: jint): JMBigDecimal; overload; virtual;
    function movePointRight(para1: jint): JMBigDecimal; overload; virtual;
    function scaleByPowerOfTen(para1: jint): JMBigDecimal; overload; virtual;
    function stripTrailingZeros(): JMBigDecimal; overload; virtual;
    function compareTo(para1: JMBigDecimal): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function min(para1: JMBigDecimal): JMBigDecimal; overload; virtual;
    function max(para1: JMBigDecimal): JMBigDecimal; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toEngineeringString(): JLString; overload; virtual;
    function toPlainString(): JLString; overload; virtual;
    function toBigInteger(): JMBigInteger; overload; virtual;
    function toBigIntegerExact(): JMBigInteger; overload; virtual;
    function longValue(): jlong; overload; virtual;
    function longValueExact(): jlong; overload; virtual;
    function intValue(): jint; overload; virtual;
    function intValueExact(): jint; overload; virtual;
    function shortValueExact(): jshort; overload; virtual;
    function byteValueExact(): jbyte; overload; virtual;
    function floatValue(): jfloat; overload; virtual;
    function doubleValue(): jdouble; overload; virtual;
    function ulp(): JMBigDecimal; overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JUCAAtomicInteger = class external 'java.util.concurrent.atomic' name 'AtomicInteger' (JLNumber, JISerializable)
  public
    constructor create(para1: jint); overload;
    constructor create(); overload;
    function get(): jint; overload; virtual; final;
    procedure &set(para1: jint); overload; virtual; final;
    procedure lazySet(para1: jint); overload; virtual; final;
    function getAndSet(para1: jint): jint; overload; virtual; final;
    function compareAndSet(para1: jint; para2: jint): jboolean; overload; virtual; final;
    function weakCompareAndSet(para1: jint; para2: jint): jboolean; overload; virtual; final;
    function getAndIncrement(): jint; overload; virtual; final;
    function getAndDecrement(): jint; overload; virtual; final;
    function getAndAdd(para1: jint): jint; overload; virtual; final;
    function incrementAndGet(): jint; overload; virtual; final;
    function decrementAndGet(): jint; overload; virtual; final;
    function addAndGet(para1: jint): jint; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    function intValue(): jint; overload; virtual;
    function longValue(): jlong; overload; virtual;
    function floatValue(): jfloat; overload; virtual;
    function doubleValue(): jdouble; overload; virtual;
  end;

  JUCAAtomicLong = class external 'java.util.concurrent.atomic' name 'AtomicLong' (JLNumber, JISerializable)
  public
    constructor create(para1: jlong); overload;
    constructor create(); overload;
    function get(): jlong; overload; virtual; final;
    procedure &set(para1: jlong); overload; virtual; final;
    procedure lazySet(para1: jlong); overload; virtual; final;
    function getAndSet(para1: jlong): jlong; overload; virtual; final;
    function compareAndSet(para1: jlong; para2: jlong): jboolean; overload; virtual; final;
    function weakCompareAndSet(para1: jlong; para2: jlong): jboolean; overload; virtual; final;
    function getAndIncrement(): jlong; overload; virtual; final;
    function getAndDecrement(): jlong; overload; virtual; final;
    function getAndAdd(para1: jlong): jlong; overload; virtual; final;
    function incrementAndGet(): jlong; overload; virtual; final;
    function decrementAndGet(): jlong; overload; virtual; final;
    function addAndGet(para1: jlong): jlong; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    function intValue(): jint; overload; virtual;
    function longValue(): jlong; overload; virtual;
    function floatValue(): jfloat; overload; virtual;
    function doubleValue(): jdouble; overload; virtual;
  end;

  JNDoubleBuffer = class abstract external 'java.nio' name 'DoubleBuffer' (JNBuffer, JLComparable)
  public
    class function allocate(para1: jint): JNDoubleBuffer; static; overload;
    class function wrap(para1: Arr1jdouble): JNDoubleBuffer; static; overload;
    class function wrap(var para1: array of jdouble): JNDoubleBuffer; static; overload;
    class function wrap(para1: Arr1jdouble; para2: jint; para3: jint): JNDoubleBuffer; static; overload;
    class function wrap(var para1: array of jdouble; para2: jint; para3: jint): JNDoubleBuffer; static; overload;
    function &array(): Arr1jdouble; overload; virtual; final;
    function arrayOffset(): jint; overload; virtual; final;
    function asReadOnlyBuffer(): JNDoubleBuffer; overload; virtual; abstract;
    function compact(): JNDoubleBuffer; overload; virtual; abstract;
    function compareTo(para1: JNDoubleBuffer): jint; overload; virtual;
    function duplicate(): JNDoubleBuffer; overload; virtual; abstract;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function get(): jdouble; overload; virtual; abstract;
    function get(para1: Arr1jdouble): JNDoubleBuffer; overload; virtual;
    function get(var para1: array of jdouble): JNDoubleBuffer; overload; virtual;
    function get(para1: Arr1jdouble; para2: jint; para3: jint): JNDoubleBuffer; overload; virtual;
    function get(var para1: array of jdouble; para2: jint; para3: jint): JNDoubleBuffer; overload; virtual;
    function get(para1: jint): jdouble; overload; virtual; abstract;
    function hasArray(): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual;
    function isDirect(): jboolean; overload; virtual; abstract;
    function order(): JNByteOrder; overload; virtual; abstract;
    function put(para1: jdouble): JNDoubleBuffer; overload; virtual; abstract;
    function put(para1: Arr1jdouble): JNDoubleBuffer; overload; virtual; final;
    function put(var para1: array of jdouble): JNDoubleBuffer; overload; virtual; final;
    function put(para1: Arr1jdouble; para2: jint; para3: jint): JNDoubleBuffer; overload; virtual;
    function put(var para1: array of jdouble; para2: jint; para3: jint): JNDoubleBuffer; overload; virtual;
    function put(para1: JNDoubleBuffer): JNDoubleBuffer; overload; virtual;
    function put(para1: jint; para2: jdouble): JNDoubleBuffer; overload; virtual; abstract;
    function slice(): JNDoubleBuffer; overload; virtual; abstract;
    function &array(): JLObject; overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JNFloatBuffer = class abstract external 'java.nio' name 'FloatBuffer' (JNBuffer, JLComparable)
  public
    class function allocate(para1: jint): JNFloatBuffer; static; overload;
    class function wrap(para1: Arr1jfloat): JNFloatBuffer; static; overload;
    class function wrap(var para1: array of jfloat): JNFloatBuffer; static; overload;
    class function wrap(para1: Arr1jfloat; para2: jint; para3: jint): JNFloatBuffer; static; overload;
    class function wrap(var para1: array of jfloat; para2: jint; para3: jint): JNFloatBuffer; static; overload;
    function &array(): Arr1jfloat; overload; virtual; final;
    function arrayOffset(): jint; overload; virtual; final;
    function asReadOnlyBuffer(): JNFloatBuffer; overload; virtual; abstract;
    function compact(): JNFloatBuffer; overload; virtual; abstract;
    function compareTo(para1: JNFloatBuffer): jint; overload; virtual;
    function duplicate(): JNFloatBuffer; overload; virtual; abstract;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function get(): jfloat; overload; virtual; abstract;
    function get(para1: Arr1jfloat): JNFloatBuffer; overload; virtual;
    function get(var para1: array of jfloat): JNFloatBuffer; overload; virtual;
    function get(para1: Arr1jfloat; para2: jint; para3: jint): JNFloatBuffer; overload; virtual;
    function get(var para1: array of jfloat; para2: jint; para3: jint): JNFloatBuffer; overload; virtual;
    function get(para1: jint): jfloat; overload; virtual; abstract;
    function hasArray(): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual;
    function isDirect(): jboolean; overload; virtual; abstract;
    function order(): JNByteOrder; overload; virtual; abstract;
    function put(para1: jfloat): JNFloatBuffer; overload; virtual; abstract;
    function put(para1: Arr1jfloat): JNFloatBuffer; overload; virtual; final;
    function put(var para1: array of jfloat): JNFloatBuffer; overload; virtual; final;
    function put(para1: Arr1jfloat; para2: jint; para3: jint): JNFloatBuffer; overload; virtual;
    function put(var para1: array of jfloat; para2: jint; para3: jint): JNFloatBuffer; overload; virtual;
    function put(para1: JNFloatBuffer): JNFloatBuffer; overload; virtual;
    function put(para1: jint; para2: jfloat): JNFloatBuffer; overload; virtual; abstract;
    function slice(): JNFloatBuffer; overload; virtual; abstract;
    function &array(): JLObject; overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JNIntBuffer = class abstract external 'java.nio' name 'IntBuffer' (JNBuffer, JLComparable)
  public
    class function allocate(para1: jint): JNIntBuffer; static; overload;
    class function wrap(para1: Arr1jint): JNIntBuffer; static; overload;
    class function wrap(var para1: array of jint): JNIntBuffer; static; overload;
    class function wrap(para1: Arr1jint; para2: jint; para3: jint): JNIntBuffer; static; overload;
    class function wrap(var para1: array of jint; para2: jint; para3: jint): JNIntBuffer; static; overload;
    function &array(): Arr1jint; overload; virtual; final;
    function arrayOffset(): jint; overload; virtual; final;
    function asReadOnlyBuffer(): JNIntBuffer; overload; virtual; abstract;
    function compact(): JNIntBuffer; overload; virtual; abstract;
    function compareTo(para1: JNIntBuffer): jint; overload; virtual;
    function duplicate(): JNIntBuffer; overload; virtual; abstract;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function get(): jint; overload; virtual; abstract;
    function get(para1: Arr1jint): JNIntBuffer; overload; virtual;
    function get(var para1: array of jint): JNIntBuffer; overload; virtual;
    function get(para1: Arr1jint; para2: jint; para3: jint): JNIntBuffer; overload; virtual;
    function get(var para1: array of jint; para2: jint; para3: jint): JNIntBuffer; overload; virtual;
    function get(para1: jint): jint; overload; virtual; abstract;
    function hasArray(): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual;
    function isDirect(): jboolean; overload; virtual; abstract;
    function order(): JNByteOrder; overload; virtual; abstract;
    function put(para1: jint): JNIntBuffer; overload; virtual; abstract;
    function put(para1: Arr1jint): JNIntBuffer; overload; virtual; final;
    function put(var para1: array of jint): JNIntBuffer; overload; virtual; final;
    function put(para1: Arr1jint; para2: jint; para3: jint): JNIntBuffer; overload; virtual;
    function put(var para1: array of jint; para2: jint; para3: jint): JNIntBuffer; overload; virtual;
    function put(para1: JNIntBuffer): JNIntBuffer; overload; virtual;
    function put(para1: jint; para2: jint): JNIntBuffer; overload; virtual; abstract;
    function slice(): JNIntBuffer; overload; virtual; abstract;
    function &array(): JLObject; overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JNLongBuffer = class abstract external 'java.nio' name 'LongBuffer' (JNBuffer, JLComparable)
  public
    class function allocate(para1: jint): JNLongBuffer; static; overload;
    class function wrap(para1: Arr1jlong): JNLongBuffer; static; overload;
    class function wrap(var para1: array of jlong): JNLongBuffer; static; overload;
    class function wrap(para1: Arr1jlong; para2: jint; para3: jint): JNLongBuffer; static; overload;
    class function wrap(var para1: array of jlong; para2: jint; para3: jint): JNLongBuffer; static; overload;
    function &array(): Arr1jlong; overload; virtual; final;
    function arrayOffset(): jint; overload; virtual; final;
    function asReadOnlyBuffer(): JNLongBuffer; overload; virtual; abstract;
    function compact(): JNLongBuffer; overload; virtual; abstract;
    function compareTo(para1: JNLongBuffer): jint; overload; virtual;
    function duplicate(): JNLongBuffer; overload; virtual; abstract;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function get(): jlong; overload; virtual; abstract;
    function get(para1: Arr1jlong): JNLongBuffer; overload; virtual;
    function get(var para1: array of jlong): JNLongBuffer; overload; virtual;
    function get(para1: Arr1jlong; para2: jint; para3: jint): JNLongBuffer; overload; virtual;
    function get(var para1: array of jlong; para2: jint; para3: jint): JNLongBuffer; overload; virtual;
    function get(para1: jint): jlong; overload; virtual; abstract;
    function hasArray(): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual;
    function isDirect(): jboolean; overload; virtual; abstract;
    function order(): JNByteOrder; overload; virtual; abstract;
    function put(para1: jlong): JNLongBuffer; overload; virtual; abstract;
    function put(para1: Arr1jlong): JNLongBuffer; overload; virtual; final;
    function put(var para1: array of jlong): JNLongBuffer; overload; virtual; final;
    function put(para1: Arr1jlong; para2: jint; para3: jint): JNLongBuffer; overload; virtual;
    function put(var para1: array of jlong; para2: jint; para3: jint): JNLongBuffer; overload; virtual;
    function put(para1: JNLongBuffer): JNLongBuffer; overload; virtual;
    function put(para1: jint; para2: jlong): JNLongBuffer; overload; virtual; abstract;
    function slice(): JNLongBuffer; overload; virtual; abstract;
    function &array(): JLObject; overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JNShortBuffer = class abstract external 'java.nio' name 'ShortBuffer' (JNBuffer, JLComparable)
  public
    class function allocate(para1: jint): JNShortBuffer; static; overload;
    class function wrap(para1: Arr1jshort): JNShortBuffer; static; overload;
    class function wrap(var para1: array of jshort): JNShortBuffer; static; overload;
    class function wrap(para1: Arr1jshort; para2: jint; para3: jint): JNShortBuffer; static; overload;
    class function wrap(var para1: array of jshort; para2: jint; para3: jint): JNShortBuffer; static; overload;
    function &array(): Arr1jshort; overload; virtual; final;
    function arrayOffset(): jint; overload; virtual; final;
    function asReadOnlyBuffer(): JNShortBuffer; overload; virtual; abstract;
    function compact(): JNShortBuffer; overload; virtual; abstract;
    function compareTo(para1: JNShortBuffer): jint; overload; virtual;
    function duplicate(): JNShortBuffer; overload; virtual; abstract;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function get(): jshort; overload; virtual; abstract;
    function get(para1: Arr1jshort): JNShortBuffer; overload; virtual;
    function get(var para1: array of jshort): JNShortBuffer; overload; virtual;
    function get(para1: Arr1jshort; para2: jint; para3: jint): JNShortBuffer; overload; virtual;
    function get(var para1: array of jshort; para2: jint; para3: jint): JNShortBuffer; overload; virtual;
    function get(para1: jint): jshort; overload; virtual; abstract;
    function hasArray(): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual;
    function isDirect(): jboolean; overload; virtual; abstract;
    function order(): JNByteOrder; overload; virtual; abstract;
    function put(para1: jshort): JNShortBuffer; overload; virtual; abstract;
    function put(para1: Arr1jshort): JNShortBuffer; overload; virtual; final;
    function put(var para1: array of jshort): JNShortBuffer; overload; virtual; final;
    function put(para1: Arr1jshort; para2: jint; para3: jint): JNShortBuffer; overload; virtual;
    function put(var para1: array of jshort; para2: jint; para3: jint): JNShortBuffer; overload; virtual;
    function put(para1: JNShortBuffer): JNShortBuffer; overload; virtual;
    function put(para1: jint; para2: jshort): JNShortBuffer; overload; virtual; abstract;
    function slice(): JNShortBuffer; overload; virtual; abstract;
    function &array(): JLObject; overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JNInvalidMarkException = class external 'java.nio' name 'InvalidMarkException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCAlreadyConnectedException = class external 'java.nio.channels' name 'AlreadyConnectedException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCCancelledKeyException = class external 'java.nio.channels' name 'CancelledKeyException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCClosedSelectorException = class external 'java.nio.channels' name 'ClosedSelectorException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCConnectionPendingException = class external 'java.nio.channels' name 'ConnectionPendingException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCIllegalBlockingModeException = class external 'java.nio.channels' name 'IllegalBlockingModeException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCNoConnectionPendingException = class external 'java.nio.channels' name 'NoConnectionPendingException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCNonReadableChannelException = class external 'java.nio.channels' name 'NonReadableChannelException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCNonWritableChannelException = class external 'java.nio.channels' name 'NonWritableChannelException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCNotYetBoundException = class external 'java.nio.channels' name 'NotYetBoundException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCNotYetConnectedException = class external 'java.nio.channels' name 'NotYetConnectedException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JNCOverlappingFileLockException = class external 'java.nio.channels' name 'OverlappingFileLockException' (JLIllegalStateException)
  public
    constructor create(); overload;
  end;

  JUFormatterClosedException = class external 'java.util' name 'FormatterClosedException' (JLIllegalStateException, JISerializable)
  public
    constructor create(); overload;
  end;

  JUCCancellationException = class external 'java.util.concurrent' name 'CancellationException' (JLIllegalStateException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNMappedByteBuffer = class abstract external 'java.nio' name 'MappedByteBuffer' (JNByteBuffer)
  public
    function isLoaded(): jboolean; overload; virtual; final;
    function load(): JNMappedByteBuffer; overload; virtual; final;
    function force(): JNMappedByteBuffer; overload; virtual; final;
  end;

  JNReadOnlyBufferException = class external 'java.nio' name 'ReadOnlyBufferException' (JLUnsupportedOperationException)
  public
    constructor create(); overload;
  end;

  JTRuleBasedCollator = class external 'java.text' name 'RuleBasedCollator' (JTCollator)
  public
    constructor create(para1: JLString); overload;  // throws java.text.ParseException
    function getCollationElementIterator(para1: JTCharacterIterator): JTCollationElementIterator; overload; virtual;
    function getCollationElementIterator(para1: JLString): JTCollationElementIterator; overload; virtual;
    function getRules(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;
    function compare(para1: JLString; para2: JLString): jint; overload; virtual;
    function getCollationKey(para1: JLString): JTCollationKey; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  JUSortedMap = interface external 'java.util' name 'SortedMap' (JUMap)
    function comparator(): JUComparator; overload;
    function firstKey(): JLObject; overload;
    function headMap(para1: JLObject): JUSortedMap; overload;
    function lastKey(): JLObject; overload;
    function subMap(para1: JLObject; para2: JLObject): JUSortedMap; overload;
    function tailMap(para1: JLObject): JUSortedMap; overload;
  end;

  JUCConcurrentMap = interface external 'java.util.concurrent' name 'ConcurrentMap' (JUMap)
    function putIfAbsent(para1: JLObject; para2: JLObject): JLObject; overload;
    function remove(para1: JLObject; para2: JLObject): jboolean; overload;
    function replace(para1: JLObject; para2: JLObject; para3: JLObject): jboolean; overload;
    function replace(para1: JLObject; para2: JLObject): JLObject; overload;
  end;

  JUJAttributes = class external 'java.util.jar' name 'Attributes' (JLObject, JLCloneable, JUMap)
  public
    type
      InnerName = class;
      Arr1InnerName = array of InnerName;
      Arr2InnerName = array of Arr1InnerName;
      Arr3InnerName = array of Arr2InnerName;
      InnerName = class external 'java.util.jar' name 'Name' (JLObject)
      public
        final class var
          fCLASS_PATH: JUJAttributes.InnerName; external name 'CLASS_PATH';
          fCONTENT_TYPE: JUJAttributes.InnerName; external name 'CONTENT_TYPE';
          fEXTENSION_INSTALLATION: JUJAttributes.InnerName; external name 'EXTENSION_INSTALLATION';
          fEXTENSION_LIST: JUJAttributes.InnerName; external name 'EXTENSION_LIST';
          fEXTENSION_NAME: JUJAttributes.InnerName; external name 'EXTENSION_NAME';
          fIMPLEMENTATION_TITLE: JUJAttributes.InnerName; external name 'IMPLEMENTATION_TITLE';
          fIMPLEMENTATION_URL: JUJAttributes.InnerName; external name 'IMPLEMENTATION_URL';
          fIMPLEMENTATION_VENDOR: JUJAttributes.InnerName; external name 'IMPLEMENTATION_VENDOR';
          fIMPLEMENTATION_VENDOR_ID: JUJAttributes.InnerName; external name 'IMPLEMENTATION_VENDOR_ID';
          fIMPLEMENTATION_VERSION: JUJAttributes.InnerName; external name 'IMPLEMENTATION_VERSION';
          fMAIN_CLASS: JUJAttributes.InnerName; external name 'MAIN_CLASS';
          fMANIFEST_VERSION: JUJAttributes.InnerName; external name 'MANIFEST_VERSION';
          fSEALED: JUJAttributes.InnerName; external name 'SEALED';
          fSIGNATURE_VERSION: JUJAttributes.InnerName; external name 'SIGNATURE_VERSION';
          fSPECIFICATION_TITLE: JUJAttributes.InnerName; external name 'SPECIFICATION_TITLE';
          fSPECIFICATION_VENDOR: JUJAttributes.InnerName; external name 'SPECIFICATION_VENDOR';
          fSPECIFICATION_VERSION: JUJAttributes.InnerName; external name 'SPECIFICATION_VERSION';
      public
        constructor create(para1: JLString); overload;
        function equals(para1: JLObject): jboolean; overload; virtual;
        function hashCode(): jint; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  strict protected
    var
      fmap: JUMap; external name 'map';
  public
    constructor create(); overload;
    constructor create(para1: JUJAttributes); overload;
    constructor create(para1: jint); overload;
    procedure clear(); overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    procedure putAll(para1: JUMap); overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function values(): JUCollection; overload; virtual;
    function clone(): JLObject; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getValue(para1: JUJAttributes.InnerName): JLString; overload; virtual;
    function getValue(para1: JLString): JLString; overload; virtual;
    function putValue(para1: JLString; para2: JLString): JLString; overload; virtual;
  end;

  JUEnumMap = class external 'java.util' name 'EnumMap' (JUAbstractMap, JISerializable, JLCloneable, JUMap)
  public
    constructor create(para1: JLClass); overload;
    constructor create(para1: JUEnumMap); overload;
    constructor create(para1: JUMap); overload;
    procedure clear(); overload; virtual;
    function clone(): JUEnumMap; overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function put(para1: JLEnum; para2: JLObject): JLObject; overload; virtual;
    procedure putAll(para1: JUMap); overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function values(): JUCollection; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
  end;

  JUIdentityHashMap = class external 'java.util' name 'IdentityHashMap' (JUAbstractMap, JUMap, JISerializable, JLCloneable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JUMap); overload;
    procedure clear(); overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    procedure putAll(para1: JUMap); overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function values(): JUCollection; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
  end;

  JUWeakHashMap = class external 'java.util' name 'WeakHashMap' (JUAbstractMap, JUMap)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jfloat); overload;
    constructor create(para1: JUMap); overload;
    procedure clear(); overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function values(): JUCollection; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    procedure putAll(para1: JUMap); overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
  end;

  JUGregorianCalendar = class external 'java.util' name 'GregorianCalendar' (JUCalendar)
  public
    const
      AD = 1;
      BC = 0;
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload;
    constructor create(para1: JULocale); overload;
    constructor create(para1: JUTimeZone); overload;
    constructor create(para1: JUTimeZone; para2: JULocale); overload;
    procedure add(para1: jint; para2: jint); overload; virtual;
  strict protected
    procedure computeFields(); overload; virtual;
    procedure computeTime(); overload; virtual;
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getActualMaximum(para1: jint): jint; overload; virtual;
    function getActualMinimum(para1: jint): jint; overload; virtual;
    function getGreatestMinimum(para1: jint): jint; overload; virtual;
    function getGregorianChange(): JUDate; overload; virtual; final;
    function getLeastMaximum(para1: jint): jint; overload; virtual;
    function getMaximum(para1: jint): jint; overload; virtual;
    function getMinimum(para1: jint): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function isLeapYear(para1: jint): jboolean; overload; virtual;
    procedure roll(para1: jint; para2: jint); overload; virtual;
    procedure roll(para1: jint; para2: jboolean); overload; virtual;
    procedure setGregorianChange(para1: JUDate); overload; virtual;
  end;

  JUCCopyOnWriteArraySet = class external 'java.util.concurrent' name 'CopyOnWriteArraySet' (JUAbstractSet, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    function size(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    procedure clear(); overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function containsAll(para1: JUCollection): jboolean; overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
    function removeAll(para1: JUCollection): jboolean; overload; virtual;
    function retainAll(para1: JUCollection): jboolean; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  JUHashSet = class external 'java.util' name 'HashSet' (JUAbstractSet, JUSet, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jfloat); overload;
    constructor create(para1: JUCollection); overload;
    function add(para1: JLObject): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
  end;

  JUSortedSet = interface external 'java.util' name 'SortedSet' (JUSet)
    function comparator(): JUComparator; overload;
    function first(): JLObject; overload;
    function headSet(para1: JLObject): JUSortedSet; overload;
    function last(): JLObject; overload;
    function subSet(para1: JLObject; para2: JLObject): JUSortedSet; overload;
    function tailSet(para1: JLObject): JUSortedSet; overload;
  end;

  JULinkedHashMap = class external 'java.util' name 'LinkedHashMap' (JUHashMap)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jfloat); overload;
    constructor create(para1: jint; para2: jfloat; para3: jboolean); overload;
    constructor create(para1: JUMap); overload;
    function get(para1: JLObject): JLObject; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
  strict protected
    function removeEldestEntry(para1: JUMap.InnerEntry): jboolean; overload; virtual;
  end;

  JUList = interface external 'java.util' name 'List' (JUCollection)
    procedure add(para1: jint; para2: JLObject); overload;
    function add(para1: JLObject): jboolean; overload;
    function addAll(para1: jint; para2: JUCollection): jboolean; overload;
    function addAll(para1: JUCollection): jboolean; overload;
    procedure clear(); overload;
    function contains(para1: JLObject): jboolean; overload;
    function containsAll(para1: JUCollection): jboolean; overload;
    function equals(para1: JLObject): jboolean; overload;
    function get(para1: jint): JLObject; overload;
    function hashCode(): jint; overload;
    function indexOf(para1: JLObject): jint; overload;
    function isEmpty(): jboolean; overload;
    function iterator(): JUIterator; overload;
    function lastIndexOf(para1: JLObject): jint; overload;
    function listIterator(): JUListIterator; overload;
    function listIterator(para1: jint): JUListIterator; overload;
    function remove(para1: jint): JLObject; overload;
    function remove(para1: JLObject): jboolean; overload;
    function removeAll(para1: JUCollection): jboolean; overload;
    function retainAll(para1: JUCollection): jboolean; overload;
    function &set(para1: jint; para2: JLObject): JLObject; overload;
    function size(): jint; overload;
    function subList(para1: jint; para2: jint): JUList; overload;
    function toArray(): Arr1JLObject; overload;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload;
  end;

  JUQueue = interface external 'java.util' name 'Queue' (JUCollection)
    function add(para1: JLObject): jboolean; overload;
    function offer(para1: JLObject): jboolean; overload;
    function remove(): JLObject; overload;
    function poll(): JLObject; overload;
    function element(): JLObject; overload;
    function peek(): JLObject; overload;
  end;

  AVAInterpolator = interface external 'android.view.animation' name 'Interpolator' (AATimeInterpolator)
  end;

  AAArgbEvaluator = class external 'android.animation' name 'ArgbEvaluator' (JLObject, AATypeEvaluator)
  public
    constructor create(); overload;
    function evaluate(para1: jfloat; para2: JLObject; para3: JLObject): JLObject; overload; virtual;
  end;

  AAFloatEvaluator = class external 'android.animation' name 'FloatEvaluator' (JLObject, AATypeEvaluator)
  public
    constructor create(); overload;
    function evaluate(para1: jfloat; para2: JLNumber; para3: JLNumber): JLFloat; overload; virtual;
    function evaluate(para1: jfloat; para2: JLObject; para3: JLObject): JLObject; overload; virtual;
  end;

  AAIntEvaluator = class external 'android.animation' name 'IntEvaluator' (JLObject, AATypeEvaluator)
  public
    constructor create(); overload;
    function evaluate(para1: jfloat; para2: JLInteger; para3: JLInteger): JLInteger; overload; virtual;
    function evaluate(para1: jfloat; para2: JLObject; para3: JLObject): JLObject; overload; virtual;
  end;

  AABFileBackupHelper = class external 'android.app.backup' name 'FileBackupHelper' (AABFileBackupHelperBase, AABBackupHelper)
  public
    constructor create(para1: ACContext; para2: Arr1JLString); overload;
    constructor create(para1: ACContext; const para2: array of JLString); overload;
    procedure performBackup(para1: AOParcelFileDescriptor; para2: AABBackupDataOutput; para3: AOParcelFileDescriptor); overload; virtual;
    procedure restoreEntity(para1: AABBackupDataInputStream); overload; virtual;
    procedure writeNewStateDescription(para1: AOParcelFileDescriptor); overload; virtual;
  end;

  AABSharedPreferencesBackupHelper = class external 'android.app.backup' name 'SharedPreferencesBackupHelper' (AABFileBackupHelperBase, AABBackupHelper)
  public
    constructor create(para1: ACContext; para2: Arr1JLString); overload;
    constructor create(para1: ACContext; const para2: array of JLString); overload;
    procedure performBackup(para1: AOParcelFileDescriptor; para2: AABBackupDataOutput; para3: AOParcelFileDescriptor); overload; virtual;
    procedure restoreEntity(para1: AABBackupDataInputStream); overload; virtual;
    procedure writeNewStateDescription(para1: AOParcelFileDescriptor); overload; virtual;
  end;

  ABBluetoothA2dp = class sealed external 'android.bluetooth' name 'BluetoothA2dp' (JLObject, ABBluetoothProfile)
  public
    const
      ACTION_CONNECTION_STATE_CHANGED = 'android.bluetooth.a2dp.profile.action.CONNECTION_STATE_CHANGED';
      ACTION_PLAYING_STATE_CHANGED = 'android.bluetooth.a2dp.profile.action.PLAYING_STATE_CHANGED';
      STATE_NOT_PLAYING = 11;
      STATE_PLAYING = 10;
  public
    procedure finalize(); overload; virtual;
    function getConnectedDevices(): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(para1: Arr1jint): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(var para1: array of jint): JUList; overload; virtual;
    function getConnectionState(para1: ABBluetoothDevice): jint; overload; virtual;
    function isA2dpPlaying(para1: ABBluetoothDevice): jboolean; overload; virtual;
  end;

  ABBluetoothAdapter = class sealed external 'android.bluetooth' name 'BluetoothAdapter' (JLObject)
  public
    type
      InnerLeScanCallback = interface;
      Arr1InnerLeScanCallback = array of InnerLeScanCallback;
      Arr2InnerLeScanCallback = array of Arr1InnerLeScanCallback;
      Arr3InnerLeScanCallback = array of Arr2InnerLeScanCallback;
      InnerLeScanCallback = interface external 'android.bluetooth' name 'LeScanCallback' 
        procedure onLeScan(para1: ABBluetoothDevice; para2: jint; para3: Arr1jbyte); overload;
        procedure onLeScan(para1: ABBluetoothDevice; para2: jint; var para3: array of jbyte); overload;
      end;

  public
    const
      ACTION_CONNECTION_STATE_CHANGED = 'android.bluetooth.adapter.action.CONNECTION_STATE_CHANGED';
      ACTION_DISCOVERY_FINISHED = 'android.bluetooth.adapter.action.DISCOVERY_FINISHED';
      ACTION_DISCOVERY_STARTED = 'android.bluetooth.adapter.action.DISCOVERY_STARTED';
      ACTION_LOCAL_NAME_CHANGED = 'android.bluetooth.adapter.action.LOCAL_NAME_CHANGED';
      ACTION_REQUEST_DISCOVERABLE = 'android.bluetooth.adapter.action.REQUEST_DISCOVERABLE';
      ACTION_REQUEST_ENABLE = 'android.bluetooth.adapter.action.REQUEST_ENABLE';
      ACTION_SCAN_MODE_CHANGED = 'android.bluetooth.adapter.action.SCAN_MODE_CHANGED';
      ACTION_STATE_CHANGED = 'android.bluetooth.adapter.action.STATE_CHANGED';
      ERROR = -2147483648;
      EXTRA_CONNECTION_STATE = 'android.bluetooth.adapter.extra.CONNECTION_STATE';
      EXTRA_DISCOVERABLE_DURATION = 'android.bluetooth.adapter.extra.DISCOVERABLE_DURATION';
      EXTRA_LOCAL_NAME = 'android.bluetooth.adapter.extra.LOCAL_NAME';
      EXTRA_PREVIOUS_CONNECTION_STATE = 'android.bluetooth.adapter.extra.PREVIOUS_CONNECTION_STATE';
      EXTRA_PREVIOUS_SCAN_MODE = 'android.bluetooth.adapter.extra.PREVIOUS_SCAN_MODE';
      EXTRA_PREVIOUS_STATE = 'android.bluetooth.adapter.extra.PREVIOUS_STATE';
      EXTRA_SCAN_MODE = 'android.bluetooth.adapter.extra.SCAN_MODE';
      EXTRA_STATE = 'android.bluetooth.adapter.extra.STATE';
      SCAN_MODE_CONNECTABLE = 21;
      SCAN_MODE_CONNECTABLE_DISCOVERABLE = 23;
      SCAN_MODE_NONE = 20;
      STATE_CONNECTED = 2;
      STATE_CONNECTING = 1;
      STATE_DISCONNECTED = 0;
      STATE_DISCONNECTING = 3;
      STATE_OFF = 10;
      STATE_ON = 12;
      STATE_TURNING_OFF = 13;
      STATE_TURNING_ON = 11;
  public
    class function getDefaultAdapter(): ABBluetoothAdapter; static; overload;
    function getRemoteDevice(para1: JLString): ABBluetoothDevice; overload; virtual;
    function getRemoteDevice(para1: Arr1jbyte): ABBluetoothDevice; overload; virtual;
    function getRemoteDevice(var para1: array of jbyte): ABBluetoothDevice; overload; virtual;
    function getBluetoothLeAdvertiser(): ABLBluetoothLeAdvertiser; overload; virtual;
    function getBluetoothLeScanner(): ABLBluetoothLeScanner; overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    function getState(): jint; overload; virtual;
    function enable(): jboolean; overload; virtual;
    function disable(): jboolean; overload; virtual;
    function getAddress(): JLString; overload; virtual;
    function getName(): JLString; overload; virtual;
    function setName(para1: JLString): jboolean; overload; virtual;
    function getScanMode(): jint; overload; virtual;
    function startDiscovery(): jboolean; overload; virtual;
    function cancelDiscovery(): jboolean; overload; virtual;
    function isDiscovering(): jboolean; overload; virtual;
    function isMultipleAdvertisementSupported(): jboolean; overload; virtual;
    function isOffloadedFilteringSupported(): jboolean; overload; virtual;
    function isOffloadedScanBatchingSupported(): jboolean; overload; virtual;
    function getBondedDevices(): JUSet; overload; virtual;
    function getProfileConnectionState(para1: jint): jint; overload; virtual;
    function listenUsingRfcommWithServiceRecord(para1: JLString; para2: JUUUID): ABBluetoothServerSocket; overload; virtual;  // throws java.io.IOException
    function listenUsingInsecureRfcommWithServiceRecord(para1: JLString; para2: JUUUID): ABBluetoothServerSocket; overload; virtual;  // throws java.io.IOException
    function getProfileProxy(para1: ACContext; para2: ABBluetoothProfile.InnerServiceListener; para3: jint): jboolean; overload; virtual;
    procedure closeProfileProxy(para1: jint; para2: ABBluetoothProfile); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    class function checkBluetoothAddress(para1: JLString): jboolean; static; overload;
    function startLeScan(para1: ABBluetoothAdapter.InnerLeScanCallback): jboolean; overload; virtual;
    function startLeScan(para1: Arr1JUUUID; para2: ABBluetoothAdapter.InnerLeScanCallback): jboolean; overload; virtual;
    function startLeScan(var para1: array of JUUUID; para2: ABBluetoothAdapter.InnerLeScanCallback): jboolean; overload; virtual;
    procedure stopLeScan(para1: ABBluetoothAdapter.InnerLeScanCallback); overload; virtual;
  end;

  ABBluetoothHeadset = class sealed external 'android.bluetooth' name 'BluetoothHeadset' (JLObject, ABBluetoothProfile)
  public
    const
      ACTION_AUDIO_STATE_CHANGED = 'android.bluetooth.headset.profile.action.AUDIO_STATE_CHANGED';
      ACTION_CONNECTION_STATE_CHANGED = 'android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED';
      ACTION_VENDOR_SPECIFIC_HEADSET_EVENT = 'android.bluetooth.headset.action.VENDOR_SPECIFIC_HEADSET_EVENT';
      AT_CMD_TYPE_ACTION = 4;
      AT_CMD_TYPE_BASIC = 3;
      AT_CMD_TYPE_READ = 0;
      AT_CMD_TYPE_SET = 2;
      AT_CMD_TYPE_TEST = 1;
      EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS = 'android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_ARGS';
      EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD = 'android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_CMD';
      EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE = 'android.bluetooth.headset.extra.VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE';
      STATE_AUDIO_CONNECTED = 12;
      STATE_AUDIO_CONNECTING = 11;
      STATE_AUDIO_DISCONNECTED = 10;
      VENDOR_RESULT_CODE_COMMAND_ANDROID = '+ANDROID';
      VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY = 'android.bluetooth.headset.intent.category.companyid';
  public
    function getConnectedDevices(): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(para1: Arr1jint): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(var para1: array of jint): JUList; overload; virtual;
    function getConnectionState(para1: ABBluetoothDevice): jint; overload; virtual;
    function startVoiceRecognition(para1: ABBluetoothDevice): jboolean; overload; virtual;
    function stopVoiceRecognition(para1: ABBluetoothDevice): jboolean; overload; virtual;
    function isAudioConnected(para1: ABBluetoothDevice): jboolean; overload; virtual;
    function sendVendorSpecificResultCode(para1: ABBluetoothDevice; para2: JLString; para3: JLString): jboolean; overload; virtual;
  end;

  ABBluetoothHealth = class sealed external 'android.bluetooth' name 'BluetoothHealth' (JLObject, ABBluetoothProfile)
  public
    const
      APP_CONFIG_REGISTRATION_FAILURE = 1;
      APP_CONFIG_REGISTRATION_SUCCESS = 0;
      APP_CONFIG_UNREGISTRATION_FAILURE = 3;
      APP_CONFIG_UNREGISTRATION_SUCCESS = 2;
      CHANNEL_TYPE_RELIABLE = 10;
      CHANNEL_TYPE_STREAMING = 11;
      SINK_ROLE = 2;
      SOURCE_ROLE = 1;
      STATE_CHANNEL_CONNECTED = 2;
      STATE_CHANNEL_CONNECTING = 1;
      STATE_CHANNEL_DISCONNECTED = 0;
      STATE_CHANNEL_DISCONNECTING = 3;
  public
    function registerSinkAppConfiguration(para1: JLString; para2: jint; para3: ABBluetoothHealthCallback): jboolean; overload; virtual;
    function unregisterAppConfiguration(para1: ABBluetoothHealthAppConfiguration): jboolean; overload; virtual;
    function connectChannelToSource(para1: ABBluetoothDevice; para2: ABBluetoothHealthAppConfiguration): jboolean; overload; virtual;
    function disconnectChannel(para1: ABBluetoothDevice; para2: ABBluetoothHealthAppConfiguration; para3: jint): jboolean; overload; virtual;
    function getMainChannelFd(para1: ABBluetoothDevice; para2: ABBluetoothHealthAppConfiguration): AOParcelFileDescriptor; overload; virtual;
    function getConnectionState(para1: ABBluetoothDevice): jint; overload; virtual;
    function getConnectedDevices(): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(para1: Arr1jint): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(var para1: array of jint): JUList; overload; virtual;
  end;

  AAADeviceAdminReceiver = class external 'android.app.admin' name 'DeviceAdminReceiver' (ACBroadcastReceiver)
  public
    const
      ACTION_DEVICE_ADMIN_DISABLED = 'android.app.action.DEVICE_ADMIN_DISABLED';
      ACTION_DEVICE_ADMIN_DISABLE_REQUESTED = 'android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED';
      ACTION_DEVICE_ADMIN_ENABLED = 'android.app.action.DEVICE_ADMIN_ENABLED';
      ACTION_LOCK_TASK_ENTERING = 'android.app.action.LOCK_TASK_ENTERING';
      ACTION_LOCK_TASK_EXITING = 'android.app.action.LOCK_TASK_EXITING';
      ACTION_PASSWORD_CHANGED = 'android.app.action.ACTION_PASSWORD_CHANGED';
      ACTION_PASSWORD_EXPIRING = 'android.app.action.ACTION_PASSWORD_EXPIRING';
      ACTION_PASSWORD_FAILED = 'android.app.action.ACTION_PASSWORD_FAILED';
      ACTION_PASSWORD_SUCCEEDED = 'android.app.action.ACTION_PASSWORD_SUCCEEDED';
      ACTION_PROFILE_PROVISIONING_COMPLETE = 'android.app.action.PROFILE_PROVISIONING_COMPLETE';
      DEVICE_ADMIN_META_DATA = 'android.app.device_admin';
      EXTRA_DISABLE_WARNING = 'android.app.extra.DISABLE_WARNING';
      EXTRA_LOCK_TASK_PACKAGE = 'android.app.extra.LOCK_TASK_PACKAGE';
  public
    constructor create(); overload;
    function getManager(para1: ACContext): AAADevicePolicyManager; overload; virtual;
    function getWho(para1: ACContext): ACComponentName; overload; virtual;
    procedure onEnabled(para1: ACContext; para2: ACIntent); overload; virtual;
    function onDisableRequested(para1: ACContext; para2: ACIntent): JLCharSequence; overload; virtual;
    procedure onDisabled(para1: ACContext; para2: ACIntent); overload; virtual;
    procedure onPasswordChanged(para1: ACContext; para2: ACIntent); overload; virtual;
    procedure onPasswordFailed(para1: ACContext; para2: ACIntent); overload; virtual;
    procedure onPasswordSucceeded(para1: ACContext; para2: ACIntent); overload; virtual;
    procedure onPasswordExpiring(para1: ACContext; para2: ACIntent); overload; virtual;
    procedure onProfileProvisioningComplete(para1: ACContext; para2: ACIntent); overload; virtual;
    procedure onLockTaskModeEntering(para1: ACContext; para2: ACIntent; para3: JLString); overload; virtual;
    procedure onLockTaskModeExiting(para1: ACContext; para2: ACIntent); overload; virtual;
    procedure onReceive(para1: ACContext; para2: ACIntent); overload; virtual;
  end;

  AAAppWidgetProvider = class external 'android.appwidget' name 'AppWidgetProvider' (ACBroadcastReceiver)
  public
    constructor create(); overload;
    procedure onReceive(para1: ACContext; para2: ACIntent); overload; virtual;
    procedure onUpdate(para1: ACContext; para2: AAAppWidgetManager; para3: Arr1jint); overload; virtual;
    procedure onUpdate(para1: ACContext; para2: AAAppWidgetManager; var para3: array of jint); overload; virtual;
    procedure onAppWidgetOptionsChanged(para1: ACContext; para2: AAAppWidgetManager; para3: jint; para4: AOBundle); overload; virtual;
    procedure onDeleted(para1: ACContext; para2: Arr1jint); overload; virtual;
    procedure onDeleted(para1: ACContext; var para2: array of jint); overload; virtual;
    procedure onEnabled(para1: ACContext); overload; virtual;
    procedure onDisabled(para1: ACContext); overload; virtual;
    procedure onRestored(para1: ACContext; para2: Arr1jint; para3: Arr1jint); overload; virtual;
    procedure onRestored(para1: ACContext; var para2: array of jint; var para3: array of jint); overload; virtual;
  end;

  ACComponentCallbacks2 = interface external 'android.content' name 'ComponentCallbacks2' (ACComponentCallbacks)
    const
      TRIM_MEMORY_BACKGROUND = 40;
      TRIM_MEMORY_COMPLETE = 80;
      TRIM_MEMORY_MODERATE = 60;
      TRIM_MEMORY_RUNNING_CRITICAL = 15;
      TRIM_MEMORY_RUNNING_LOW = 10;
      TRIM_MEMORY_RUNNING_MODERATE = 5;
      TRIM_MEMORY_UI_HIDDEN = 20;
    procedure onTrimMemory(para1: jint); overload;
  end;

  ATMMockContentResolver = class external 'android.test.mock' name 'MockContentResolver' (ACContentResolver)
  public
    constructor create(); overload;
    constructor create(para1: ACContext); overload;
    procedure addProvider(para1: JLString; para2: ACContentProvider); overload; virtual;
    procedure notifyChange(para1: ANUri; para2: ADContentObserver; para3: jboolean); overload; virtual;
  end;

  AASearchManager = class external 'android.app' name 'SearchManager' (JLObject, ACDialogInterface.InnerOnDismissListener, ACDialogInterface.InnerOnCancelListener)
  public
    type
      InnerOnCancelListener = interface;
      Arr1InnerOnCancelListener = array of InnerOnCancelListener;
      Arr2InnerOnCancelListener = array of Arr1InnerOnCancelListener;
      Arr3InnerOnCancelListener = array of Arr2InnerOnCancelListener;
      InnerOnDismissListener = interface;
      Arr1InnerOnDismissListener = array of InnerOnDismissListener;
      Arr2InnerOnDismissListener = array of Arr1InnerOnDismissListener;
      Arr3InnerOnDismissListener = array of Arr2InnerOnDismissListener;
      InnerOnCancelListener = interface external 'android.app' name 'OnCancelListener' 
        procedure onCancel(); overload;
      end;

      InnerOnDismissListener = interface external 'android.app' name 'OnDismissListener' 
        procedure onDismiss(); overload;
      end;

  public
    const
      ACTION_KEY = 'action_key';
      ACTION_MSG = 'action_msg';
      APP_DATA = 'app_data';
      CURSOR_EXTRA_KEY_IN_PROGRESS = 'in_progress';
      EXTRA_DATA_KEY = 'intent_extra_data_key';
      EXTRA_NEW_SEARCH = 'new_search';
      EXTRA_SELECT_QUERY = 'select_query';
      EXTRA_WEB_SEARCH_PENDINGINTENT = 'web_search_pendingintent';
      FLAG_QUERY_REFINEMENT = 1;
      INTENT_ACTION_GLOBAL_SEARCH = 'android.search.action.GLOBAL_SEARCH';
      INTENT_ACTION_SEARCHABLES_CHANGED = 'android.search.action.SEARCHABLES_CHANGED';
      INTENT_ACTION_SEARCH_SETTINGS = 'android.search.action.SEARCH_SETTINGS';
      INTENT_ACTION_SEARCH_SETTINGS_CHANGED = 'android.search.action.SETTINGS_CHANGED';
      INTENT_ACTION_WEB_SEARCH_SETTINGS = 'android.search.action.WEB_SEARCH_SETTINGS';
      INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED = 'android.search.action.GLOBAL_SEARCH_ACTIVITY_CHANGED';
      MENU_KEY = 115;
      MENU_KEYCODE = 47;
      QUERY = 'query';
      SHORTCUT_MIME_TYPE = 'vnd.android.cursor.item/vnd.android.search.suggest';
      SUGGEST_COLUMN_AUDIO_CHANNEL_CONFIG = 'suggest_audio_channel_config';
      SUGGEST_COLUMN_CONTENT_TYPE = 'suggest_content_type';
      SUGGEST_COLUMN_DURATION = 'suggest_duration';
      SUGGEST_COLUMN_FLAGS = 'suggest_flags';
      SUGGEST_COLUMN_FORMAT = 'suggest_format';
      SUGGEST_COLUMN_ICON_1 = 'suggest_icon_1';
      SUGGEST_COLUMN_ICON_2 = 'suggest_icon_2';
      SUGGEST_COLUMN_INTENT_ACTION = 'suggest_intent_action';
      SUGGEST_COLUMN_INTENT_DATA = 'suggest_intent_data';
      SUGGEST_COLUMN_INTENT_DATA_ID = 'suggest_intent_data_id';
      SUGGEST_COLUMN_INTENT_EXTRA_DATA = 'suggest_intent_extra_data';
      SUGGEST_COLUMN_IS_LIVE = 'suggest_is_live';
      SUGGEST_COLUMN_LAST_ACCESS_HINT = 'suggest_last_access_hint';
      SUGGEST_COLUMN_PRODUCTION_YEAR = 'suggest_production_year';
      SUGGEST_COLUMN_PURCHASE_PRICE = 'suggest_purchase_price';
      SUGGEST_COLUMN_QUERY = 'suggest_intent_query';
      SUGGEST_COLUMN_RATING_SCORE = 'suggest_rating_score';
      SUGGEST_COLUMN_RATING_STYLE = 'suggest_rating_style';
      SUGGEST_COLUMN_RENTAL_PRICE = 'suggest_rental_price';
      SUGGEST_COLUMN_RESULT_CARD_IMAGE = 'suggest_result_card_image';
      SUGGEST_COLUMN_SHORTCUT_ID = 'suggest_shortcut_id';
      SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING = 'suggest_spinner_while_refreshing';
      SUGGEST_COLUMN_TEXT_1 = 'suggest_text_1';
      SUGGEST_COLUMN_TEXT_2 = 'suggest_text_2';
      SUGGEST_COLUMN_TEXT_2_URL = 'suggest_text_2_url';
      SUGGEST_COLUMN_VIDEO_HEIGHT = 'suggest_video_height';
      SUGGEST_COLUMN_VIDEO_WIDTH = 'suggest_video_width';
      SUGGEST_MIME_TYPE = 'vnd.android.cursor.dir/vnd.android.search.suggest';
      SUGGEST_NEVER_MAKE_SHORTCUT = '_-1';
      SUGGEST_PARAMETER_LIMIT = 'limit';
      SUGGEST_URI_PATH_QUERY = 'search_suggest_query';
      SUGGEST_URI_PATH_SHORTCUT = 'search_suggest_shortcut';
      USER_QUERY = 'user_query';
  public
    procedure startSearch(para1: JLString; para2: jboolean; para3: ACComponentName; para4: AOBundle; para5: jboolean); overload; virtual;
    function getGlobalSearchActivity(): ACComponentName; overload; virtual;
    procedure triggerSearch(para1: JLString; para2: ACComponentName; para3: AOBundle); overload; virtual;
    procedure stopSearch(); overload; virtual;
    procedure setOnDismissListener(para1: AASearchManager.InnerOnDismissListener); overload; virtual;
    procedure setOnCancelListener(para1: AASearchManager.InnerOnCancelListener); overload; virtual;
    procedure onCancel(para1: ACDialogInterface); overload; virtual;
    procedure onDismiss(para1: ACDialogInterface); overload; virtual;
    function getSearchableInfo(para1: ACComponentName): AASearchableInfo; overload; virtual;
    function getSearchablesInGlobalSearch(): JUList; overload; virtual;
  end;

  ATMMockDialogInterface = class external 'android.test.mock' name 'MockDialogInterface' (JLObject, ACDialogInterface)
  public
    constructor create(); overload;
    procedure cancel(); overload; virtual;
    procedure dismiss(); overload; virtual;
  end;

  ACAsyncTaskLoader = class abstract external 'android.content' name 'AsyncTaskLoader' (ACLoader)
  public
    constructor create(para1: ACContext); overload;
    procedure setUpdateThrottle(para1: jlong); overload; virtual;
  strict protected
    procedure onForceLoad(); overload; virtual;
    function onCancelLoad(): jboolean; overload; virtual;
  public
    procedure onCanceled(para1: JLObject); overload; virtual;
    function loadInBackground(): JLObject; overload; virtual; abstract;
  strict protected
    function onLoadInBackground(): JLObject; overload; virtual;
  public
    procedure cancelLoadInBackground(); overload; virtual;
    function isLoadInBackgroundCanceled(): jboolean; overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; para4: Arr1JLString); overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; var para4: array of JLString); overload; virtual;
  end;

  AMMediaScannerConnection = class external 'android.media' name 'MediaScannerConnection' (JLObject, ACServiceConnection)
  public
    type
      InnerOnScanCompletedListener = interface;
      Arr1InnerOnScanCompletedListener = array of InnerOnScanCompletedListener;
      Arr2InnerOnScanCompletedListener = array of Arr1InnerOnScanCompletedListener;
      Arr3InnerOnScanCompletedListener = array of Arr2InnerOnScanCompletedListener;
      InnerMediaScannerConnectionClient = interface;
      Arr1InnerMediaScannerConnectionClient = array of InnerMediaScannerConnectionClient;
      Arr2InnerMediaScannerConnectionClient = array of Arr1InnerMediaScannerConnectionClient;
      Arr3InnerMediaScannerConnectionClient = array of Arr2InnerMediaScannerConnectionClient;
      InnerOnScanCompletedListener = interface external 'android.media' name 'OnScanCompletedListener' 
        procedure onScanCompleted(para1: JLString; para2: ANUri); overload;
      end;

      InnerMediaScannerConnectionClient = interface external 'android.media' name 'MediaScannerConnectionClient' (AMMediaScannerConnection.InnerOnScanCompletedListener)
        procedure onMediaScannerConnected(); overload;
        procedure onScanCompleted(para1: JLString; para2: ANUri); overload;
      end;

  public
    constructor create(para1: ACContext; para2: AMMediaScannerConnection.InnerMediaScannerConnectionClient); overload;
    procedure connect(); overload; virtual;
    procedure disconnect(); overload; virtual;
    function isConnected(): jboolean; overload; virtual;
    procedure scanFile(para1: JLString; para2: JLString); overload; virtual;
    class procedure scanFile(para1: ACContext; para2: Arr1JLString; para3: Arr1JLString; para4: AMMediaScannerConnection.InnerOnScanCompletedListener); static; overload;
    class procedure scanFile(para1: ACContext; var para2: array of JLString; var para3: array of JLString; para4: AMMediaScannerConnection.InnerOnScanCompletedListener); static; overload;
    procedure onServiceConnected(para1: ACComponentName; para2: AOIBinder); overload; virtual;
    procedure onServiceDisconnected(para1: ACComponentName); overload; virtual;
  end;

  ADCrossProcessCursor = interface external 'android.database' name 'CrossProcessCursor' (ADCursor)
    function getWindow(): ADCursorWindow; overload;
    procedure fillWindow(para1: jint; para2: ADCursorWindow); overload;
    function onMove(para1: jint; para2: jint): jboolean; overload;
  end;

  ADCursorWrapper = class external 'android.database' name 'CursorWrapper' (JLObject, ADCursor)
  public
    constructor create(para1: ADCursor); overload;
    function getWrappedCursor(): ADCursor; overload; virtual;
    procedure close(); overload; virtual;
    function isClosed(): jboolean; overload; virtual;
    function getCount(): jint; overload; virtual;
    procedure deactivate(); overload; virtual;
    function moveToFirst(): jboolean; overload; virtual;
    function getColumnCount(): jint; overload; virtual;
    function getColumnIndex(para1: JLString): jint; overload; virtual;
    function getColumnIndexOrThrow(para1: JLString): jint; overload; virtual;  // throws java.lang.IllegalArgumentException
    function getColumnName(para1: jint): JLString; overload; virtual;
    function getColumnNames(): Arr1JLString; overload; virtual;
    function getDouble(para1: jint): jdouble; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function getFloat(para1: jint): jfloat; overload; virtual;
    function getInt(para1: jint): jint; overload; virtual;
    function getLong(para1: jint): jlong; overload; virtual;
    function getShort(para1: jint): jshort; overload; virtual;
    function getString(para1: jint): JLString; overload; virtual;
    procedure copyStringToBuffer(para1: jint; para2: ADCharArrayBuffer); overload; virtual;
    function getBlob(para1: jint): Arr1jbyte; overload; virtual;
    function getWantsAllOnMoveCalls(): jboolean; overload; virtual;
    function isAfterLast(): jboolean; overload; virtual;
    function isBeforeFirst(): jboolean; overload; virtual;
    function isFirst(): jboolean; overload; virtual;
    function isLast(): jboolean; overload; virtual;
    function getType(para1: jint): jint; overload; virtual;
    function isNull(para1: jint): jboolean; overload; virtual;
    function moveToLast(): jboolean; overload; virtual;
    function move(para1: jint): jboolean; overload; virtual;
    function moveToPosition(para1: jint): jboolean; overload; virtual;
    function moveToNext(): jboolean; overload; virtual;
    function getPosition(): jint; overload; virtual;
    function moveToPrevious(): jboolean; overload; virtual;
    procedure registerContentObserver(para1: ADContentObserver); overload; virtual;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    function requery(): jboolean; overload; virtual;
    function respond(para1: AOBundle): AOBundle; overload; virtual;
    procedure setNotificationUri(para1: ACContentResolver; para2: ANUri); overload; virtual;
    function getNotificationUri(): ANUri; overload; virtual;
    procedure unregisterContentObserver(para1: ADContentObserver); overload; virtual;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload; virtual;
  end;

  ATMMockCursor = class external 'android.test.mock' name 'MockCursor' (JLObject, ADCursor)
  public
    constructor create(); overload;
    function getColumnCount(): jint; overload; virtual;
    function getColumnIndex(para1: JLString): jint; overload; virtual;
    function getColumnIndexOrThrow(para1: JLString): jint; overload; virtual;
    function getColumnName(para1: jint): JLString; overload; virtual;
    function getColumnNames(): Arr1JLString; overload; virtual;
    function getCount(): jint; overload; virtual;
    function isNull(para1: jint): jboolean; overload; virtual;
    function getInt(para1: jint): jint; overload; virtual;
    function getLong(para1: jint): jlong; overload; virtual;
    function getShort(para1: jint): jshort; overload; virtual;
    function getFloat(para1: jint): jfloat; overload; virtual;
    function getDouble(para1: jint): jdouble; overload; virtual;
    function getBlob(para1: jint): Arr1jbyte; overload; virtual;
    function getString(para1: jint): JLString; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function getPosition(): jint; overload; virtual;
    function isAfterLast(): jboolean; overload; virtual;
    function isBeforeFirst(): jboolean; overload; virtual;
    function isFirst(): jboolean; overload; virtual;
    function isLast(): jboolean; overload; virtual;
    function move(para1: jint): jboolean; overload; virtual;
    function moveToFirst(): jboolean; overload; virtual;
    function moveToLast(): jboolean; overload; virtual;
    function moveToNext(): jboolean; overload; virtual;
    function moveToPrevious(): jboolean; overload; virtual;
    function moveToPosition(para1: jint): jboolean; overload; virtual;
    procedure copyStringToBuffer(para1: jint; para2: ADCharArrayBuffer); overload; virtual;
    procedure deactivate(); overload; virtual;
    procedure close(); overload; virtual;
    function isClosed(): jboolean; overload; virtual;
    function requery(): jboolean; overload; virtual;
    procedure registerContentObserver(para1: ADContentObserver); overload; virtual;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    function respond(para1: AOBundle): AOBundle; overload; virtual;
    function getWantsAllOnMoveCalls(): jboolean; overload; virtual;
    procedure setNotificationUri(para1: ACContentResolver; para2: ANUri); overload; virtual;
    function getNotificationUri(): ANUri; overload; virtual;
    procedure unregisterContentObserver(para1: ADContentObserver); overload; virtual;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    function getType(para1: jint): jint; overload; virtual;
  end;

  ADDefaultDatabaseErrorHandler = class sealed external 'android.database' name 'DefaultDatabaseErrorHandler' (JLObject, ADDatabaseErrorHandler)
  public
    constructor create(); overload;
    procedure onCorruption(para1: ADSSQLiteDatabase); overload; virtual;
  end;

  ADContentObservable = class external 'android.database' name 'ContentObservable' (ADObservable)
  public
    constructor create(); overload;
    procedure registerObserver(para1: ADContentObserver); overload; virtual;
    procedure dispatchChange(para1: jboolean); overload; virtual;
    procedure dispatchChange(para1: jboolean; para2: ANUri); overload; virtual;
    procedure notifyChange(para1: jboolean); overload; virtual;
    procedure registerObserver(para1: JLObject); overload; virtual;
  end;

  ADDataSetObservable = class external 'android.database' name 'DataSetObservable' (ADObservable)
  public
    constructor create(); overload;
    procedure notifyChanged(); overload; virtual;
    procedure notifyInvalidated(); overload; virtual;
  end;

  ADSSQLiteDatabase = class sealed external 'android.database.sqlite' name 'SQLiteDatabase' (ADSSQLiteClosable)
  public
    type
      InnerCursorFactory = interface;
      Arr1InnerCursorFactory = array of InnerCursorFactory;
      Arr2InnerCursorFactory = array of Arr1InnerCursorFactory;
      Arr3InnerCursorFactory = array of Arr2InnerCursorFactory;
      InnerCursorFactory = interface external 'android.database.sqlite' name 'CursorFactory' 
        function newCursor(para1: ADSSQLiteDatabase; para2: ADSSQLiteCursorDriver; para3: JLString; para4: ADSSQLiteQuery): ADCursor; overload;
      end;

  public
    const
      CONFLICT_ABORT = 2;
      CONFLICT_FAIL = 3;
      CONFLICT_IGNORE = 4;
      CONFLICT_NONE = 0;
      CONFLICT_REPLACE = 5;
      CONFLICT_ROLLBACK = 1;
      CREATE_IF_NECESSARY = 268435456;
      ENABLE_WRITE_AHEAD_LOGGING = 536870912;
      MAX_SQL_CACHE_SIZE = 100;
      NO_LOCALIZED_COLLATORS = 16;
      OPEN_READONLY = 1;
      OPEN_READWRITE = 0;
      SQLITE_MAX_LIKE_PATTERN_LENGTH = 50000;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
    procedure onAllReferencesReleased(); overload; virtual;
  public
    class function releaseMemory(): jint; static; overload;
    procedure setLockingEnabled(para1: jboolean); overload; virtual;
    procedure beginTransaction(); overload; virtual;
    procedure beginTransactionNonExclusive(); overload; virtual;
    procedure beginTransactionWithListener(para1: ADSSQLiteTransactionListener); overload; virtual;
    procedure beginTransactionWithListenerNonExclusive(para1: ADSSQLiteTransactionListener); overload; virtual;
    procedure endTransaction(); overload; virtual;
    procedure setTransactionSuccessful(); overload; virtual;
    function inTransaction(): jboolean; overload; virtual;
    function isDbLockedByCurrentThread(): jboolean; overload; virtual;
    function isDbLockedByOtherThreads(): jboolean; overload; virtual;
    function yieldIfContended(): jboolean; overload; virtual;
    function yieldIfContendedSafely(): jboolean; overload; virtual;
    function yieldIfContendedSafely(para1: jlong): jboolean; overload; virtual;
    function getSyncedTables(): JUMap; overload; virtual;
    class function openDatabase(para1: JLString; para2: ADSSQLiteDatabase.InnerCursorFactory; para3: jint): ADSSQLiteDatabase; static; overload;
    class function openDatabase(para1: JLString; para2: ADSSQLiteDatabase.InnerCursorFactory; para3: jint; para4: ADDatabaseErrorHandler): ADSSQLiteDatabase; static; overload;
    class function openOrCreateDatabase(para1: JIFile; para2: ADSSQLiteDatabase.InnerCursorFactory): ADSSQLiteDatabase; static; overload;
    class function openOrCreateDatabase(para1: JLString; para2: ADSSQLiteDatabase.InnerCursorFactory): ADSSQLiteDatabase; static; overload;
    class function openOrCreateDatabase(para1: JLString; para2: ADSSQLiteDatabase.InnerCursorFactory; para3: ADDatabaseErrorHandler): ADSSQLiteDatabase; static; overload;
    class function deleteDatabase(para1: JIFile): jboolean; static; overload;
    class function create_(para1: ADSSQLiteDatabase.InnerCursorFactory): ADSSQLiteDatabase; static; external name 'create'; overload;
    function getVersion(): jint; overload; virtual;
    procedure setVersion(para1: jint); overload; virtual;
    function getMaximumSize(): jlong; overload; virtual;
    function setMaximumSize(para1: jlong): jlong; overload; virtual;
    function getPageSize(): jlong; overload; virtual;
    procedure setPageSize(para1: jlong); overload; virtual;
    procedure markTableSyncable(para1: JLString; para2: JLString); overload; virtual;
    procedure markTableSyncable(para1: JLString; para2: JLString; para3: JLString); overload; virtual;
    class function findEditTable(para1: JLString): JLString; static; overload;
    function compileStatement(para1: JLString): ADSSQLiteStatement; overload; virtual;  // throws android.database.SQLException
    function query(para1: jboolean; para2: JLString; para3: Arr1JLString; para4: JLString; para5: Arr1JLString; para6: JLString; para7: JLString; para8: JLString; para9: JLString): ADCursor; overload; virtual;
    function query(para1: jboolean; para2: JLString; var para3: array of JLString; para4: JLString; var para5: array of JLString; para6: JLString; para7: JLString; para8: JLString; para9: JLString): ADCursor; overload; virtual;
    function query(para1: jboolean; para2: JLString; para3: Arr1JLString; para4: JLString; para5: Arr1JLString; para6: JLString; para7: JLString; para8: JLString; para9: JLString; para10: AOCancellationSignal): ADCursor; overload; virtual;
    function query(para1: jboolean; para2: JLString; var para3: array of JLString; para4: JLString; var para5: array of JLString; para6: JLString; para7: JLString; para8: JLString; para9: JLString; para10: AOCancellationSignal): ADCursor; overload; virtual;
    function queryWithFactory(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: jboolean; para3: JLString; para4: Arr1JLString; para5: JLString; para6: Arr1JLString; para7: JLString; para8: JLString; para9: JLString; para10: JLString): ADCursor; overload; virtual;
    function queryWithFactory(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: jboolean; para3: JLString; var para4: array of JLString; para5: JLString; var para6: array of JLString; para7: JLString; para8: JLString; para9: JLString; para10: JLString): ADCursor; overload; virtual;
    function queryWithFactory(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: jboolean; para3: JLString; para4: Arr1JLString; para5: JLString; para6: Arr1JLString; para7: JLString; para8: JLString; para9: JLString; para10: JLString; para11: AOCancellationSignal): ADCursor; overload; virtual;
    function queryWithFactory(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: jboolean; para3: JLString; var para4: array of JLString; para5: JLString; var para6: array of JLString; para7: JLString; para8: JLString; para9: JLString; para10: JLString; para11: AOCancellationSignal): ADCursor; overload; virtual;
    function query(para1: JLString; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString; para6: JLString; para7: JLString): ADCursor; overload; virtual;
    function query(para1: JLString; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString; para6: JLString; para7: JLString): ADCursor; overload; virtual;
    function query(para1: JLString; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString): ADCursor; overload; virtual;
    function query(para1: JLString; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString): ADCursor; overload; virtual;
    function rawQuery(para1: JLString; para2: Arr1JLString): ADCursor; overload; virtual;
    function rawQuery(para1: JLString; var para2: array of JLString): ADCursor; overload; virtual;
    function rawQuery(para1: JLString; para2: Arr1JLString; para3: AOCancellationSignal): ADCursor; overload; virtual;
    function rawQuery(para1: JLString; var para2: array of JLString; para3: AOCancellationSignal): ADCursor; overload; virtual;
    function rawQueryWithFactory(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: JLString; para3: Arr1JLString; para4: JLString): ADCursor; overload; virtual;
    function rawQueryWithFactory(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: JLString; var para3: array of JLString; para4: JLString): ADCursor; overload; virtual;
    function rawQueryWithFactory(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: JLString; para3: Arr1JLString; para4: JLString; para5: AOCancellationSignal): ADCursor; overload; virtual;
    function rawQueryWithFactory(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: JLString; var para3: array of JLString; para4: JLString; para5: AOCancellationSignal): ADCursor; overload; virtual;
    function insert(para1: JLString; para2: JLString; para3: ACContentValues): jlong; overload; virtual;
    function insertOrThrow(para1: JLString; para2: JLString; para3: ACContentValues): jlong; overload; virtual;  // throws android.database.SQLException
    function replace(para1: JLString; para2: JLString; para3: ACContentValues): jlong; overload; virtual;
    function replaceOrThrow(para1: JLString; para2: JLString; para3: ACContentValues): jlong; overload; virtual;  // throws android.database.SQLException
    function insertWithOnConflict(para1: JLString; para2: JLString; para3: ACContentValues; para4: jint): jlong; overload; virtual;
    function delete(para1: JLString; para2: JLString; para3: Arr1JLString): jint; overload; virtual;
    function delete(para1: JLString; para2: JLString; var para3: array of JLString): jint; overload; virtual;
    function update(para1: JLString; para2: ACContentValues; para3: JLString; para4: Arr1JLString): jint; overload; virtual;
    function update(para1: JLString; para2: ACContentValues; para3: JLString; var para4: array of JLString): jint; overload; virtual;
    function updateWithOnConflict(para1: JLString; para2: ACContentValues; para3: JLString; para4: Arr1JLString; para5: jint): jint; overload; virtual;
    function updateWithOnConflict(para1: JLString; para2: ACContentValues; para3: JLString; var para4: array of JLString; para5: jint): jint; overload; virtual;
    procedure execSQL(para1: JLString); overload; virtual;  // throws android.database.SQLException
    procedure execSQL(para1: JLString; para2: Arr1JLObject); overload; virtual;  // throws android.database.SQLException
    procedure execSQL(para1: JLString; var para2: array of JLObject); overload; virtual;  // throws android.database.SQLException
    function isReadOnly(): jboolean; overload; virtual;
    function isOpen(): jboolean; overload; virtual;
    function needUpgrade(para1: jint): jboolean; overload; virtual;
    function getPath(): JLString; overload; virtual; final;
    procedure setLocale(para1: JULocale); overload; virtual;
    procedure setMaxSqlCacheSize(para1: jint); overload; virtual;
    procedure setForeignKeyConstraintsEnabled(para1: jboolean); overload; virtual;
    function enableWriteAheadLogging(): jboolean; overload; virtual;
    procedure disableWriteAheadLogging(); overload; virtual;
    function isWriteAheadLoggingEnabled(): jboolean; overload; virtual;
    function getAttachedDbs(): JUList; overload; virtual;
    function isDatabaseIntegrityOk(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ADSSQLiteProgram = class abstract external 'android.database.sqlite' name 'SQLiteProgram' (ADSSQLiteClosable)
  public
    function getUniqueId(): jint; overload; virtual; final;
    procedure bindNull(para1: jint); overload; virtual;
    procedure bindLong(para1: jint; para2: jlong); overload; virtual;
    procedure bindDouble(para1: jint; para2: jdouble); overload; virtual;
    procedure bindString(para1: jint; para2: JLString); overload; virtual;
    procedure bindBlob(para1: jint; para2: Arr1jbyte); overload; virtual;
    procedure bindBlob(para1: jint; var para2: array of jbyte); overload; virtual;
    procedure clearBindings(); overload; virtual;
    procedure bindAllArgsAsStrings(para1: Arr1JLString); overload; virtual;
    procedure bindAllArgsAsStrings(var para1: array of JLString); overload; virtual;
  strict protected
    procedure onAllReferencesReleased(); overload; virtual;
  end;

  ADDrmErrorEvent = class external 'android.drm' name 'DrmErrorEvent' (ADDrmEvent)
  public
    const
      TYPE_ACQUIRE_DRM_INFO_FAILED = 2008;
      TYPE_NOT_SUPPORTED = 2003;
      TYPE_NO_INTERNET_CONNECTION = 2005;
      TYPE_OUT_OF_MEMORY = 2004;
      TYPE_PROCESS_DRM_INFO_FAILED = 2006;
      TYPE_REMOVE_ALL_RIGHTS_FAILED = 2007;
      TYPE_RIGHTS_NOT_INSTALLED = 2001;
      TYPE_RIGHTS_RENEWAL_NOT_ALLOWED = 2002;
  public
    constructor create(para1: jint; para2: jint; para3: JLString); overload;
    constructor create(para1: jint; para2: jint; para3: JLString; para4: JUHashMap); overload;
  end;

  ADDrmInfoEvent = class external 'android.drm' name 'DrmInfoEvent' (ADDrmEvent)
  public
    const
      TYPE_ACCOUNT_ALREADY_REGISTERED = 5;
      TYPE_ALREADY_REGISTERED_BY_ANOTHER_ACCOUNT = 1;
      TYPE_REMOVE_RIGHTS = 2;
      TYPE_RIGHTS_INSTALLED = 3;
      TYPE_RIGHTS_REMOVED = 6;
      TYPE_WAIT_FOR_RIGHTS = 4;
  public
    constructor create(para1: jint; para2: jint; para3: JLString); overload;
    constructor create(para1: jint; para2: jint; para3: JLString; para4: JUHashMap); overload;
  end;

  AGColorMatrixColorFilter = class external 'android.graphics' name 'ColorMatrixColorFilter' (AGColorFilter)
  public
    constructor create(para1: AGColorMatrix); overload;
    constructor create(para1: Arr1jfloat); overload;
    constructor create(const para1: array of jfloat); overload;
  end;

  AGLightingColorFilter = class external 'android.graphics' name 'LightingColorFilter' (AGColorFilter)
  public
    constructor create(para1: jint; para2: jint); overload;
  end;

  AGPaintFlagsDrawFilter = class external 'android.graphics' name 'PaintFlagsDrawFilter' (AGDrawFilter)
  public
    constructor create(para1: jint; para2: jint); overload;
  end;

  AGBlurMaskFilter = class external 'android.graphics' name 'BlurMaskFilter' (AGMaskFilter)
  public
    type
      InnerBlur = class;
      Arr1InnerBlur = array of InnerBlur;
      Arr2InnerBlur = array of Arr1InnerBlur;
      Arr3InnerBlur = array of Arr2InnerBlur;
      InnerBlur = class sealed external 'android.graphics' name 'Blur' (JLEnum)
      public
        final class var
          fINNER: AGBlurMaskFilter.InnerBlur; external name 'INNER';
          fNORMAL: AGBlurMaskFilter.InnerBlur; external name 'NORMAL';
          fOUTER: AGBlurMaskFilter.InnerBlur; external name 'OUTER';
          fSOLID: AGBlurMaskFilter.InnerBlur; external name 'SOLID';
      public
        class function values(): AGBlurMaskFilter.Arr1InnerBlur; static; overload;
        class function valueOf(para1: JLString): AGBlurMaskFilter.InnerBlur; static; overload;
      end;

  public
    constructor create(para1: jfloat; para2: AGBlurMaskFilter.InnerBlur); overload;
  end;

  AGEmbossMaskFilter = class external 'android.graphics' name 'EmbossMaskFilter' (AGMaskFilter)
  public
    constructor create(para1: Arr1jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    constructor create(const para1: array of jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
  end;

  AGComposePathEffect = class external 'android.graphics' name 'ComposePathEffect' (AGPathEffect)
  public
    constructor create(para1: AGPathEffect; para2: AGPathEffect); overload;
  end;

  AGCornerPathEffect = class external 'android.graphics' name 'CornerPathEffect' (AGPathEffect)
  public
    constructor create(para1: jfloat); overload;
  end;

  AGDashPathEffect = class external 'android.graphics' name 'DashPathEffect' (AGPathEffect)
  public
    constructor create(para1: Arr1jfloat; para2: jfloat); overload;
    constructor create(const para1: array of jfloat; para2: jfloat); overload;
  end;

  AGDiscretePathEffect = class external 'android.graphics' name 'DiscretePathEffect' (AGPathEffect)
  public
    constructor create(para1: jfloat; para2: jfloat); overload;
  end;

  AGPathDashPathEffect = class external 'android.graphics' name 'PathDashPathEffect' (AGPathEffect)
  public
    type
      InnerStyle = class;
      Arr1InnerStyle = array of InnerStyle;
      Arr2InnerStyle = array of Arr1InnerStyle;
      Arr3InnerStyle = array of Arr2InnerStyle;
      InnerStyle = class sealed external 'android.graphics' name 'Style' (JLEnum)
      public
        final class var
          fMORPH: AGPathDashPathEffect.InnerStyle; external name 'MORPH';
          fROTATE: AGPathDashPathEffect.InnerStyle; external name 'ROTATE';
          fTRANSLATE: AGPathDashPathEffect.InnerStyle; external name 'TRANSLATE';
      public
        class function values(): AGPathDashPathEffect.Arr1InnerStyle; static; overload;
        class function valueOf(para1: JLString): AGPathDashPathEffect.InnerStyle; static; overload;
      end;

  public
    constructor create(para1: AGPath; para2: jfloat; para3: jfloat; para4: AGPathDashPathEffect.InnerStyle); overload;
  end;

  AGSumPathEffect = class external 'android.graphics' name 'SumPathEffect' (AGPathEffect)
  public
    constructor create(para1: AGPathEffect; para2: AGPathEffect); overload;
  end;

  AGLayerRasterizer = class external 'android.graphics' name 'LayerRasterizer' (AGRasterizer)
  public
    constructor create(); overload;
    procedure addLayer(para1: AGPaint; para2: jfloat; para3: jfloat); overload; virtual;
    procedure addLayer(para1: AGPaint); overload; virtual;
  end;

  AGAvoidXfermode = class external 'android.graphics' name 'AvoidXfermode' (AGXfermode)
  public
    type
      InnerMode = class;
      Arr1InnerMode = array of InnerMode;
      Arr2InnerMode = array of Arr1InnerMode;
      Arr3InnerMode = array of Arr2InnerMode;
      InnerMode = class sealed external 'android.graphics' name 'Mode' (JLEnum)
      public
        final class var
          fAVOID: AGAvoidXfermode.InnerMode; external name 'AVOID';
          fTARGET: AGAvoidXfermode.InnerMode; external name 'TARGET';
      public
        class function values(): AGAvoidXfermode.Arr1InnerMode; static; overload;
        class function valueOf(para1: JLString): AGAvoidXfermode.InnerMode; static; overload;
      end;

  public
    constructor create(para1: jint; para2: jint; para3: AGAvoidXfermode.InnerMode); overload;
  end;

  AGPixelXorXfermode = class external 'android.graphics' name 'PixelXorXfermode' (AGXfermode)
  public
    constructor create(para1: jint); overload;
  end;

  AVOrientationListener = class abstract external 'android.view' name 'OrientationListener' (JLObject, AHSensorListener)
  public
    const
      ORIENTATION_UNKNOWN = -1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: jint); overload;
    procedure enable(); overload; virtual;
    procedure disable(); overload; virtual;
    procedure onAccuracyChanged(para1: jint; para2: jint); overload; virtual;
    procedure onSensorChanged(para1: jint; para2: Arr1jfloat); overload; virtual;
    procedure onSensorChanged(para1: jint; var para2: array of jfloat); overload; virtual;
    procedure onOrientationChanged(para1: jint); overload; virtual; abstract;
  end;

  ALLocationManager = class external 'android.location' name 'LocationManager' (JLObject)
  public
    const
      GPS_PROVIDER = 'gps';
      KEY_LOCATION_CHANGED = 'location';
      KEY_PROVIDER_ENABLED = 'providerEnabled';
      KEY_PROXIMITY_ENTERING = 'entering';
      KEY_STATUS_CHANGED = 'status';
      MODE_CHANGED_ACTION = 'android.location.MODE_CHANGED';
      NETWORK_PROVIDER = 'network';
      PASSIVE_PROVIDER = 'passive';
      PROVIDERS_CHANGED_ACTION = 'android.location.PROVIDERS_CHANGED';
  public
    function getAllProviders(): JUList; overload; virtual;
    function getProviders(para1: jboolean): JUList; overload; virtual;
    function getProvider(para1: JLString): ALLocationProvider; overload; virtual;
    function getProviders(para1: ALCriteria; para2: jboolean): JUList; overload; virtual;
    function getBestProvider(para1: ALCriteria; para2: jboolean): JLString; overload; virtual;
    procedure requestLocationUpdates(para1: JLString; para2: jlong; para3: jfloat; para4: ALLocationListener); overload; virtual;
    procedure requestLocationUpdates(para1: JLString; para2: jlong; para3: jfloat; para4: ALLocationListener; para5: AOLooper); overload; virtual;
    procedure requestLocationUpdates(para1: jlong; para2: jfloat; para3: ALCriteria; para4: ALLocationListener; para5: AOLooper); overload; virtual;
    procedure requestLocationUpdates(para1: JLString; para2: jlong; para3: jfloat; para4: AAPendingIntent); overload; virtual;
    procedure requestLocationUpdates(para1: jlong; para2: jfloat; para3: ALCriteria; para4: AAPendingIntent); overload; virtual;
    procedure requestSingleUpdate(para1: JLString; para2: ALLocationListener; para3: AOLooper); overload; virtual;
    procedure requestSingleUpdate(para1: ALCriteria; para2: ALLocationListener; para3: AOLooper); overload; virtual;
    procedure requestSingleUpdate(para1: JLString; para2: AAPendingIntent); overload; virtual;
    procedure requestSingleUpdate(para1: ALCriteria; para2: AAPendingIntent); overload; virtual;
    procedure removeUpdates(para1: ALLocationListener); overload; virtual;
    procedure removeUpdates(para1: AAPendingIntent); overload; virtual;
    procedure addProximityAlert(para1: jdouble; para2: jdouble; para3: jfloat; para4: jlong; para5: AAPendingIntent); overload; virtual;
    procedure removeProximityAlert(para1: AAPendingIntent); overload; virtual;
    function isProviderEnabled(para1: JLString): jboolean; overload; virtual;
    function getLastKnownLocation(para1: JLString): ALLocation; overload; virtual;
    procedure addTestProvider(para1: JLString; para2: jboolean; para3: jboolean; para4: jboolean; para5: jboolean; para6: jboolean; para7: jboolean; para8: jboolean; para9: jint; para10: jint); overload; virtual;
    procedure removeTestProvider(para1: JLString); overload; virtual;
    procedure setTestProviderLocation(para1: JLString; para2: ALLocation); overload; virtual;
    procedure clearTestProviderLocation(para1: JLString); overload; virtual;
    procedure setTestProviderEnabled(para1: JLString; para2: jboolean); overload; virtual;
    procedure clearTestProviderEnabled(para1: JLString); overload; virtual;
    procedure setTestProviderStatus(para1: JLString; para2: jint; para3: AOBundle; para4: jlong); overload; virtual;
    procedure clearTestProviderStatus(para1: JLString); overload; virtual;
    function addGpsStatusListener(para1: ALGpsStatus.InnerListener): jboolean; overload; virtual;
    procedure removeGpsStatusListener(para1: ALGpsStatus.InnerListener); overload; virtual;
    function addNmeaListener(para1: ALGpsStatus.InnerNmeaListener): jboolean; overload; virtual;
    procedure removeNmeaListener(para1: ALGpsStatus.InnerNmeaListener); overload; virtual;
    function getGpsStatus(para1: ALGpsStatus): ALGpsStatus; overload; virtual;
    function sendExtraCommand(para1: JLString; para2: JLString; para3: AOBundle): jboolean; overload; virtual;
  end;

  AMABassBoost = class external 'android.media.audiofx' name 'BassBoost' (AMAAudioEffect)
  public
    type
      InnerSettings = class;
      Arr1InnerSettings = array of InnerSettings;
      Arr2InnerSettings = array of Arr1InnerSettings;
      Arr3InnerSettings = array of Arr2InnerSettings;
      InnerOnParameterChangeListener = interface;
      Arr1InnerOnParameterChangeListener = array of InnerOnParameterChangeListener;
      Arr2InnerOnParameterChangeListener = array of Arr1InnerOnParameterChangeListener;
      Arr3InnerOnParameterChangeListener = array of Arr2InnerOnParameterChangeListener;
      InnerSettings = class external 'android.media.audiofx' name 'Settings' (JLObject)
      public
        var
          fstrength: jshort; external name 'strength';
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function toString(): JLString; overload; virtual;
      end;

      InnerOnParameterChangeListener = interface external 'android.media.audiofx' name 'OnParameterChangeListener' 
        procedure onParameterChange(para1: AMABassBoost; para2: jint; para3: jint; para4: jshort); overload;
      end;

  public
    const
      PARAM_STRENGTH = 1;
      PARAM_STRENGTH_SUPPORTED = 0;
  public
    constructor create(para1: jint; para2: jint); overload;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException, java.lang.RuntimeException
    function getStrengthSupported(): jboolean; overload; virtual;
    procedure setStrength(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getRoundedStrength(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setParameterListener(para1: AMABassBoost.InnerOnParameterChangeListener); overload; virtual;
    function getProperties(): AMABassBoost.InnerSettings; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setProperties(para1: AMABassBoost.InnerSettings); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
  end;

  AMAEnvironmentalReverb = class external 'android.media.audiofx' name 'EnvironmentalReverb' (AMAAudioEffect)
  public
    type
      InnerSettings = class;
      Arr1InnerSettings = array of InnerSettings;
      Arr2InnerSettings = array of Arr1InnerSettings;
      Arr3InnerSettings = array of Arr2InnerSettings;
      InnerOnParameterChangeListener = interface;
      Arr1InnerOnParameterChangeListener = array of InnerOnParameterChangeListener;
      Arr2InnerOnParameterChangeListener = array of Arr1InnerOnParameterChangeListener;
      Arr3InnerOnParameterChangeListener = array of Arr2InnerOnParameterChangeListener;
      InnerSettings = class external 'android.media.audiofx' name 'Settings' (JLObject)
      public
        var
          fdecayHFRatio: jshort; external name 'decayHFRatio';
          fdecayTime: jint; external name 'decayTime';
          fdensity: jshort; external name 'density';
          fdiffusion: jshort; external name 'diffusion';
          freflectionsDelay: jint; external name 'reflectionsDelay';
          freflectionsLevel: jshort; external name 'reflectionsLevel';
          freverbDelay: jint; external name 'reverbDelay';
          freverbLevel: jshort; external name 'reverbLevel';
          froomHFLevel: jshort; external name 'roomHFLevel';
          froomLevel: jshort; external name 'roomLevel';
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function toString(): JLString; overload; virtual;
      end;

      InnerOnParameterChangeListener = interface external 'android.media.audiofx' name 'OnParameterChangeListener' 
        procedure onParameterChange(para1: AMAEnvironmentalReverb; para2: jint; para3: jint; para4: jint); overload;
      end;

  public
    const
      PARAM_DECAY_HF_RATIO = 3;
      PARAM_DECAY_TIME = 2;
      PARAM_DENSITY = 9;
      PARAM_DIFFUSION = 8;
      PARAM_REFLECTIONS_DELAY = 5;
      PARAM_REFLECTIONS_LEVEL = 4;
      PARAM_REVERB_DELAY = 7;
      PARAM_REVERB_LEVEL = 6;
      PARAM_ROOM_HF_LEVEL = 1;
      PARAM_ROOM_LEVEL = 0;
  public
    constructor create(para1: jint; para2: jint); overload;  // throws java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException, java.lang.RuntimeException
    procedure setRoomLevel(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getRoomLevel(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setRoomHFLevel(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getRoomHFLevel(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setDecayTime(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getDecayTime(): jint; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setDecayHFRatio(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getDecayHFRatio(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setReflectionsLevel(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getReflectionsLevel(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setReflectionsDelay(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getReflectionsDelay(): jint; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setReverbLevel(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getReverbLevel(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setReverbDelay(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getReverbDelay(): jint; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setDiffusion(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getDiffusion(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setDensity(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getDensity(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setParameterListener(para1: AMAEnvironmentalReverb.InnerOnParameterChangeListener); overload; virtual;
    function getProperties(): AMAEnvironmentalReverb.InnerSettings; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setProperties(para1: AMAEnvironmentalReverb.InnerSettings); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
  end;

  AMAEqualizer = class external 'android.media.audiofx' name 'Equalizer' (AMAAudioEffect)
  public
    type
      InnerSettings = class;
      Arr1InnerSettings = array of InnerSettings;
      Arr2InnerSettings = array of Arr1InnerSettings;
      Arr3InnerSettings = array of Arr2InnerSettings;
      InnerOnParameterChangeListener = interface;
      Arr1InnerOnParameterChangeListener = array of InnerOnParameterChangeListener;
      Arr2InnerOnParameterChangeListener = array of Arr1InnerOnParameterChangeListener;
      Arr3InnerOnParameterChangeListener = array of Arr2InnerOnParameterChangeListener;
      InnerSettings = class external 'android.media.audiofx' name 'Settings' (JLObject)
      public
        var
          fbandLevels: Arr1jshort; external name 'bandLevels';
          fcurPreset: jshort; external name 'curPreset';
          fnumBands: jshort; external name 'numBands';
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function toString(): JLString; overload; virtual;
      end;

      InnerOnParameterChangeListener = interface external 'android.media.audiofx' name 'OnParameterChangeListener' 
        procedure onParameterChange(para1: AMAEqualizer; para2: jint; para3: jint; para4: jint; para5: jint); overload;
      end;

  public
    const
      PARAM_BAND_FREQ_RANGE = 4;
      PARAM_BAND_LEVEL = 2;
      PARAM_CENTER_FREQ = 3;
      PARAM_CURRENT_PRESET = 6;
      PARAM_GET_BAND = 5;
      PARAM_GET_NUM_OF_PRESETS = 7;
      PARAM_GET_PRESET_NAME = 8;
      PARAM_LEVEL_RANGE = 1;
      PARAM_NUM_BANDS = 0;
      PARAM_STRING_SIZE_MAX = 32;
  public
    constructor create(para1: jint; para2: jint); overload;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException, java.lang.RuntimeException
    function getNumberOfBands(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getBandLevelRange(): Arr1jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setBandLevel(para1: jshort; para2: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getBandLevel(para1: jshort): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getCenterFreq(para1: jshort): jint; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getBandFreqRange(para1: jshort): Arr1jint; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getBand(para1: jint): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getCurrentPreset(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure usePreset(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getNumberOfPresets(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getPresetName(para1: jshort): JLString; overload; virtual;
    procedure setParameterListener(para1: AMAEqualizer.InnerOnParameterChangeListener); overload; virtual;
    function getProperties(): AMAEqualizer.InnerSettings; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setProperties(para1: AMAEqualizer.InnerSettings); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
  end;

  AMAPresetReverb = class external 'android.media.audiofx' name 'PresetReverb' (AMAAudioEffect)
  public
    type
      InnerSettings = class;
      Arr1InnerSettings = array of InnerSettings;
      Arr2InnerSettings = array of Arr1InnerSettings;
      Arr3InnerSettings = array of Arr2InnerSettings;
      InnerOnParameterChangeListener = interface;
      Arr1InnerOnParameterChangeListener = array of InnerOnParameterChangeListener;
      Arr2InnerOnParameterChangeListener = array of Arr1InnerOnParameterChangeListener;
      Arr3InnerOnParameterChangeListener = array of Arr2InnerOnParameterChangeListener;
      InnerSettings = class external 'android.media.audiofx' name 'Settings' (JLObject)
      public
        var
          fpreset: jshort; external name 'preset';
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function toString(): JLString; overload; virtual;
      end;

      InnerOnParameterChangeListener = interface external 'android.media.audiofx' name 'OnParameterChangeListener' 
        procedure onParameterChange(para1: AMAPresetReverb; para2: jint; para3: jint; para4: jshort); overload;
      end;

  public
    const
      PARAM_PRESET = 0;
      PRESET_LARGEHALL = 5;
      PRESET_LARGEROOM = 3;
      PRESET_MEDIUMHALL = 4;
      PRESET_MEDIUMROOM = 2;
      PRESET_NONE = 0;
      PRESET_PLATE = 6;
      PRESET_SMALLROOM = 1;
  public
    constructor create(para1: jint; para2: jint); overload;  // throws java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException, java.lang.RuntimeException
    procedure setPreset(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getPreset(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setParameterListener(para1: AMAPresetReverb.InnerOnParameterChangeListener); overload; virtual;
    function getProperties(): AMAPresetReverb.InnerSettings; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setProperties(para1: AMAPresetReverb.InnerSettings); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
  end;

  AMAVirtualizer = class external 'android.media.audiofx' name 'Virtualizer' (AMAAudioEffect)
  public
    type
      InnerSettings = class;
      Arr1InnerSettings = array of InnerSettings;
      Arr2InnerSettings = array of Arr1InnerSettings;
      Arr3InnerSettings = array of Arr2InnerSettings;
      InnerOnParameterChangeListener = interface;
      Arr1InnerOnParameterChangeListener = array of InnerOnParameterChangeListener;
      Arr2InnerOnParameterChangeListener = array of Arr1InnerOnParameterChangeListener;
      Arr3InnerOnParameterChangeListener = array of Arr2InnerOnParameterChangeListener;
      InnerSettings = class external 'android.media.audiofx' name 'Settings' (JLObject)
      public
        var
          fstrength: jshort; external name 'strength';
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function toString(): JLString; overload; virtual;
      end;

      InnerOnParameterChangeListener = interface external 'android.media.audiofx' name 'OnParameterChangeListener' 
        procedure onParameterChange(para1: AMAVirtualizer; para2: jint; para3: jint; para4: jshort); overload;
      end;

  public
    const
      PARAM_STRENGTH = 1;
      PARAM_STRENGTH_SUPPORTED = 0;
      VIRTUALIZATION_MODE_AUTO = 1;
      VIRTUALIZATION_MODE_BINAURAL = 2;
      VIRTUALIZATION_MODE_OFF = 0;
      VIRTUALIZATION_MODE_TRANSAURAL = 3;
  public
    constructor create(para1: jint; para2: jint); overload;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException, java.lang.RuntimeException
    function getStrengthSupported(): jboolean; overload; virtual;
    procedure setStrength(para1: jshort); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getRoundedStrength(): jshort; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function canVirtualize(para1: jint; para2: jint): jboolean; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getSpeakerAngles(para1: jint; para2: jint; para3: Arr1jint): jboolean; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getSpeakerAngles(para1: jint; para2: jint; var para3: array of jint): jboolean; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function forceVirtualizationMode(para1: jint): jboolean; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getVirtualizationMode(): jint; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.UnsupportedOperationException
    procedure setParameterListener(para1: AMAVirtualizer.InnerOnParameterChangeListener); overload; virtual;
    function getProperties(): AMAVirtualizer.InnerSettings; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    procedure setProperties(para1: AMAVirtualizer.InnerSettings); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
  end;

  ANRAudioStream = class external 'android.net.rtp' name 'AudioStream' (ANRRtpStream)
  public
    constructor create(para1: JNInetAddress); overload;  // throws java.net.SocketException
    function isBusy(): jboolean; overload; virtual; final;
    function getGroup(): ANRAudioGroup; overload; virtual;
    procedure join(para1: ANRAudioGroup); overload; virtual;
    function getCodec(): ANRAudioCodec; overload; virtual;
    procedure setCodec(para1: ANRAudioCodec); overload; virtual;
    function getDtmfType(): jint; overload; virtual;
    procedure setDtmfType(para1: jint); overload; virtual;
  end;

  ANSSipManager = class external 'android.net.sip' name 'SipManager' (JLObject)
  public
    const
      EXTRA_CALL_ID = 'android:sipCallID';
      EXTRA_OFFER_SD = 'android:sipOfferSD';
      INCOMING_CALL_RESULT_CODE = 101;
  public
    class function newInstance(para1: ACContext): ANSSipManager; static; overload;
    class function isApiSupported(para1: ACContext): jboolean; static; overload;
    class function isVoipSupported(para1: ACContext): jboolean; static; overload;
    class function isSipWifiOnly(para1: ACContext): jboolean; static; overload;
    procedure open(para1: ANSSipProfile); overload; virtual;  // throws android.net.sip.SipException
    procedure open(para1: ANSSipProfile; para2: AAPendingIntent; para3: ANSSipRegistrationListener); overload; virtual;  // throws android.net.sip.SipException
    procedure setRegistrationListener(para1: JLString; para2: ANSSipRegistrationListener); overload; virtual;  // throws android.net.sip.SipException
    procedure close(para1: JLString); overload; virtual;  // throws android.net.sip.SipException
    function isOpened(para1: JLString): jboolean; overload; virtual;  // throws android.net.sip.SipException
    function isRegistered(para1: JLString): jboolean; overload; virtual;  // throws android.net.sip.SipException
    function makeAudioCall(para1: ANSSipProfile; para2: ANSSipProfile; para3: ANSSipAudioCall.InnerListener; para4: jint): ANSSipAudioCall; overload; virtual;  // throws android.net.sip.SipException
    function makeAudioCall(para1: JLString; para2: JLString; para3: ANSSipAudioCall.InnerListener; para4: jint): ANSSipAudioCall; overload; virtual;  // throws android.net.sip.SipException
    function takeAudioCall(para1: ACIntent; para2: ANSSipAudioCall.InnerListener): ANSSipAudioCall; overload; virtual;  // throws android.net.sip.SipException
    class function isIncomingCallIntent(para1: ACIntent): jboolean; static; overload;
    class function getCallId(para1: ACIntent): JLString; static; overload;
    class function getOfferSessionDescription(para1: ACIntent): JLString; static; overload;
    procedure register(para1: ANSSipProfile; para2: jint; para3: ANSSipRegistrationListener); overload; virtual;  // throws android.net.sip.SipException
    procedure unregister(para1: ANSSipProfile; para2: ANSSipRegistrationListener); overload; virtual;  // throws android.net.sip.SipException
    function getSessionFor(para1: ACIntent): ANSSipSession; overload; virtual;  // throws android.net.sip.SipException
    function createSipSession(para1: ANSSipProfile; para2: ANSSipSession.InnerListener): ANSSipSession; overload; virtual;  // throws android.net.sip.SipException
  end;

  AOGLES11 = class external 'android.opengl' name 'GLES11' (AOGLES10)
  public
    const
      GL_ACTIVE_TEXTURE = 34016;
      GL_ADD_SIGNED = 34164;
      GL_ALPHA_SCALE = 3356;
      GL_ALPHA_TEST_FUNC = 3009;
      GL_ALPHA_TEST_REF = 3010;
      GL_ARRAY_BUFFER = 34962;
      GL_ARRAY_BUFFER_BINDING = 34964;
      GL_BLEND_DST = 3040;
      GL_BLEND_SRC = 3041;
      GL_BUFFER_ACCESS = 35003;
      GL_BUFFER_SIZE = 34660;
      GL_BUFFER_USAGE = 34661;
      GL_CLIENT_ACTIVE_TEXTURE = 34017;
      GL_CLIP_PLANE0 = 12288;
      GL_CLIP_PLANE1 = 12289;
      GL_CLIP_PLANE2 = 12290;
      GL_CLIP_PLANE3 = 12291;
      GL_CLIP_PLANE4 = 12292;
      GL_CLIP_PLANE5 = 12293;
      GL_COLOR_ARRAY_BUFFER_BINDING = 34968;
      GL_COLOR_ARRAY_POINTER = 32912;
      GL_COLOR_ARRAY_SIZE = 32897;
      GL_COLOR_ARRAY_STRIDE = 32899;
      GL_COLOR_ARRAY_TYPE = 32898;
      GL_COLOR_CLEAR_VALUE = 3106;
      GL_COLOR_WRITEMASK = 3107;
      GL_COMBINE = 34160;
      GL_COMBINE_ALPHA = 34162;
      GL_COMBINE_RGB = 34161;
      GL_CONSTANT = 34166;
      GL_COORD_REPLACE_OES = 34914;
      GL_CULL_FACE_MODE = 2885;
      GL_CURRENT_COLOR = 2816;
      GL_CURRENT_NORMAL = 2818;
      GL_CURRENT_TEXTURE_COORDS = 2819;
      GL_DEPTH_CLEAR_VALUE = 2931;
      GL_DEPTH_FUNC = 2932;
      GL_DEPTH_RANGE = 2928;
      GL_DEPTH_WRITEMASK = 2930;
      GL_DOT3_RGB = 34478;
      GL_DOT3_RGBA = 34479;
      GL_DYNAMIC_DRAW = 35048;
      GL_ELEMENT_ARRAY_BUFFER = 34963;
      GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
      GL_FRONT_FACE = 2886;
      GL_GENERATE_MIPMAP = 33169;
      GL_GENERATE_MIPMAP_HINT = 33170;
      GL_INTERPOLATE = 34165;
      GL_LINE_WIDTH = 2849;
      GL_LOGIC_OP_MODE = 3056;
      GL_MATRIX_MODE = 2976;
      GL_MAX_CLIP_PLANES = 3378;
      GL_MODELVIEW_MATRIX = 2982;
      GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 35213;
      GL_MODELVIEW_STACK_DEPTH = 2979;
      GL_NORMAL_ARRAY_BUFFER_BINDING = 34967;
      GL_NORMAL_ARRAY_POINTER = 32911;
      GL_NORMAL_ARRAY_STRIDE = 32895;
      GL_NORMAL_ARRAY_TYPE = 32894;
      GL_OPERAND0_ALPHA = 34200;
      GL_OPERAND0_RGB = 34192;
      GL_OPERAND1_ALPHA = 34201;
      GL_OPERAND1_RGB = 34193;
      GL_OPERAND2_ALPHA = 34202;
      GL_OPERAND2_RGB = 34194;
      GL_POINT_DISTANCE_ATTENUATION = 33065;
      GL_POINT_FADE_THRESHOLD_SIZE = 33064;
      GL_POINT_SIZE = 2833;
      GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 35743;
      GL_POINT_SIZE_ARRAY_OES = 35740;
      GL_POINT_SIZE_ARRAY_POINTER_OES = 35212;
      GL_POINT_SIZE_ARRAY_STRIDE_OES = 35211;
      GL_POINT_SIZE_ARRAY_TYPE_OES = 35210;
      GL_POINT_SIZE_MAX = 33063;
      GL_POINT_SIZE_MIN = 33062;
      GL_POINT_SPRITE_OES = 34913;
      GL_POLYGON_OFFSET_FACTOR = 32824;
      GL_POLYGON_OFFSET_UNITS = 10752;
      GL_PREVIOUS = 34168;
      GL_PRIMARY_COLOR = 34167;
      GL_PROJECTION_MATRIX = 2983;
      GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 35214;
      GL_PROJECTION_STACK_DEPTH = 2980;
      GL_RGB_SCALE = 34163;
      GL_SAMPLES = 32937;
      GL_SAMPLE_BUFFERS = 32936;
      GL_SAMPLE_COVERAGE_INVERT = 32939;
      GL_SAMPLE_COVERAGE_VALUE = 32938;
      GL_SCISSOR_BOX = 3088;
      GL_SHADE_MODEL = 2900;
      GL_SRC0_ALPHA = 34184;
      GL_SRC0_RGB = 34176;
      GL_SRC1_ALPHA = 34185;
      GL_SRC1_RGB = 34177;
      GL_SRC2_ALPHA = 34186;
      GL_SRC2_RGB = 34178;
      GL_STATIC_DRAW = 35044;
      GL_STENCIL_CLEAR_VALUE = 2961;
      GL_STENCIL_FAIL = 2964;
      GL_STENCIL_FUNC = 2962;
      GL_STENCIL_PASS_DEPTH_FAIL = 2965;
      GL_STENCIL_PASS_DEPTH_PASS = 2966;
      GL_STENCIL_REF = 2967;
      GL_STENCIL_VALUE_MASK = 2963;
      GL_STENCIL_WRITEMASK = 2968;
      GL_SUBTRACT = 34023;
      GL_TEXTURE_BINDING_2D = 32873;
      GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;
      GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
      GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
      GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
      GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
      GL_TEXTURE_MATRIX = 2984;
      GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 35215;
      GL_TEXTURE_STACK_DEPTH = 2981;
      GL_VERTEX_ARRAY_BUFFER_BINDING = 34966;
      GL_VERTEX_ARRAY_POINTER = 32910;
      GL_VERTEX_ARRAY_SIZE = 32890;
      GL_VERTEX_ARRAY_STRIDE = 32892;
      GL_VERTEX_ARRAY_TYPE = 32891;
      GL_VIEWPORT = 2978;
      GL_WRITE_ONLY = 35001;
  public
    constructor create(); overload;
    class procedure glBindBuffer(para1: jint; para2: jint); static; overload;
    class procedure glBufferData(para1: jint; para2: jint; para3: JNBuffer; para4: jint); static; overload;
    class procedure glBufferSubData(para1: jint; para2: jint; para3: jint; para4: JNBuffer); static; overload;
    class procedure glClipPlanef(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glClipPlanef(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glClipPlanef(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glClipPlanex(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glClipPlanex(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glClipPlanex(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glColor4ub(para1: jbyte; para2: jbyte; para3: jbyte; para4: jbyte); static; overload;
    class procedure glColorPointer(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glDeleteBuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteBuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteBuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glDrawElements(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glGenBuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenBuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenBuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetBooleanv(para1: jint; para2: Arr1jboolean; para3: jint); static; overload;
    class procedure glGetBooleanv(para1: jint; var para2: array of jboolean; para3: jint); static; overload;
    class procedure glGetBooleanv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetBufferParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetBufferParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetBufferParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetClipPlanef(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glGetClipPlanef(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glGetClipPlanef(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glGetClipPlanex(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGetClipPlanex(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGetClipPlanex(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetFixedv(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGetFixedv(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGetFixedv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetFloatv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glGetFloatv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glGetFloatv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glGetLightfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetLightfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetLightfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetLightxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetLightxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetLightxv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetMaterialfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetMaterialfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetMaterialfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetMaterialxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetMaterialxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetMaterialxv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexEnvfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetTexEnvfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetTexEnvfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetTexEnviv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexEnviv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexEnviv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexEnvxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexEnvxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexEnvxv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetTexParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetTexParameterfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetTexParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexParameterxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexParameterxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexParameterxv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class function glIsBuffer(para1: jint): jboolean; static; overload;
    class function glIsEnabled(para1: jint): jboolean; static; overload;
    class function glIsTexture(para1: jint): jboolean; static; overload;
    class procedure glNormalPointer(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glPointParameterf(para1: jint; para2: jfloat); static; overload;
    class procedure glPointParameterfv(para1: jint; para2: Arr1jfloat; para3: jint); static; overload;
    class procedure glPointParameterfv(para1: jint; var para2: array of jfloat; para3: jint); static; overload;
    class procedure glPointParameterfv(para1: jint; para2: JNFloatBuffer); static; overload;
    class procedure glPointParameterx(para1: jint; para2: jint); static; overload;
    class procedure glPointParameterxv(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glPointParameterxv(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glPointParameterxv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glPointSizePointerOES(para1: jint; para2: jint; para3: JNBuffer); static; overload;
    class procedure glTexCoordPointer(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glTexEnvi(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexEnviv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexEnviv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexEnviv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTexParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glTexParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glTexParameterfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glTexParameteri(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTexParameterxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexParameterxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexParameterxv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glVertexPointer(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
  end;

  ACAsyncQueryHandler = class abstract external 'android.content' name 'AsyncQueryHandler' (AOHandler)
  public
    type
      InnerWorkerHandler = class;
      Arr1InnerWorkerHandler = array of InnerWorkerHandler;
      Arr2InnerWorkerHandler = array of Arr1InnerWorkerHandler;
      Arr3InnerWorkerHandler = array of Arr2InnerWorkerHandler;
      InnerWorkerArgs = class;
      Arr1InnerWorkerArgs = array of InnerWorkerArgs;
      Arr2InnerWorkerArgs = array of Arr1InnerWorkerArgs;
      Arr3InnerWorkerArgs = array of Arr2InnerWorkerArgs;
      InnerWorkerHandler = class external 'android.content' name 'WorkerHandler' 
      end;

      InnerWorkerArgs = class sealed external 'android.content' name 'WorkerArgs' (JLObject)
      public
        var
          fcookie: JLObject; external name 'cookie';
          fhandler: AOHandler; external name 'handler';
          forderBy: JLString; external name 'orderBy';
          fprojection: Arr1JLString; external name 'projection';
          fresult: JLObject; external name 'result';
          fselection: JLString; external name 'selection';
          fselectionArgs: Arr1JLString; external name 'selectionArgs';
          furi: ANUri; external name 'uri';
          fvalues: ACContentValues; external name 'values';
      strict protected
        constructor create(); overload;
      end;

  public
    constructor create(para1: ACContentResolver); overload;
  strict protected
    function createHandler(para1: AOLooper): AOHandler; overload; virtual;
  public
    procedure startQuery(para1: jint; para2: JLObject; para3: ANUri; para4: Arr1JLString; para5: JLString; para6: Arr1JLString; para7: JLString); overload; virtual;
    procedure startQuery(para1: jint; para2: JLObject; para3: ANUri; var para4: array of JLString; para5: JLString; var para6: array of JLString; para7: JLString); overload; virtual;
    procedure cancelOperation(para1: jint); overload; virtual; final;
    procedure startInsert(para1: jint; para2: JLObject; para3: ANUri; para4: ACContentValues); overload; virtual; final;
    procedure startUpdate(para1: jint; para2: JLObject; para3: ANUri; para4: ACContentValues; para5: JLString; para6: Arr1JLString); overload; virtual; final;
    procedure startUpdate(para1: jint; para2: JLObject; para3: ANUri; para4: ACContentValues; para5: JLString; var para6: array of JLString); overload; virtual; final;
    procedure startDelete(para1: jint; para2: JLObject; para3: ANUri; para4: JLString; para5: Arr1JLString); overload; virtual; final;
    procedure startDelete(para1: jint; para2: JLObject; para3: ANUri; para4: JLString; var para5: array of JLString); overload; virtual; final;
  strict protected
    procedure onQueryComplete(para1: jint; para2: JLObject; para3: ADCursor); overload; virtual;
    procedure onInsertComplete(para1: jint; para2: JLObject; para3: ANUri); overload; virtual;
    procedure onUpdateComplete(para1: jint; para2: JLObject; para3: jint); overload; virtual;
    procedure onDeleteComplete(para1: jint; para2: JLObject; para3: jint); overload; virtual;
  public
    procedure handleMessage(para1: AOMessage); overload; virtual;
  end;

  AWHttpAuthHandler = class external 'android.webkit' name 'HttpAuthHandler' (AOHandler)
  public
    function useHttpAuthUsernamePassword(): jboolean; overload; virtual;
    procedure cancel(); overload; virtual;
    procedure proceed(para1: JLString; para2: JLString); overload; virtual;
  end;

  AWSslErrorHandler = class external 'android.webkit' name 'SslErrorHandler' (AOHandler)
  public
    procedure proceed(); overload; virtual;
    procedure cancel(); overload; virtual;
  end;

  AOBinder = class external 'android.os' name 'Binder' (JLObject, AOIBinder)
  public
    constructor create(); overload;
    class function getCallingPid(): jint; static; overload; final;
    class function getCallingUid(): jint; static; overload; final;
    class function getCallingUserHandle(): AOUserHandle; static; overload; final;
    class function clearCallingIdentity(): jlong; static; overload; final;
    class procedure restoreCallingIdentity(para1: jlong); static; overload; final;
    class procedure flushPendingCommands(); static; overload; final;
    class procedure joinThreadPool(); static; overload; final;
    procedure attachInterface(para1: AOIInterface; para2: JLString); overload; virtual;
    function getInterfaceDescriptor(): JLString; overload; virtual;
    function pingBinder(): jboolean; overload; virtual;
    function isBinderAlive(): jboolean; overload; virtual;
    function queryLocalInterface(para1: JLString): AOIInterface; overload; virtual;
  strict protected
    function onTransact(para1: jint; para2: AOParcel; para3: AOParcel; para4: jint): jboolean; overload; virtual;  // throws android.os.RemoteException
  public
    procedure dump(para1: JIFileDescriptor; para2: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; var para2: array of JLString); overload; virtual;
    procedure dumpAsync(para1: JIFileDescriptor; para2: Arr1JLString); overload; virtual;
    procedure dumpAsync(para1: JIFileDescriptor; var para2: array of JLString); overload; virtual;
  strict protected
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
  public
    function transact(para1: jint; para2: AOParcel; para3: AOParcel; para4: jint): jboolean; overload; virtual; final;  // throws android.os.RemoteException
    procedure linkToDeath(para1: AOIBinder.InnerDeathRecipient; para2: jint); overload; virtual;
    function unlinkToDeath(para1: AOIBinder.InnerDeathRecipient; para2: jint): jboolean; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AAAccessibilityServiceInfo = class external 'android.accessibilityservice' name 'AccessibilityServiceInfo' (JLObject, AOParcelable)
  public
    const
      CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY = 4;
      CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS = 8;
      CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION = 2;
      CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT = 1;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      DEFAULT = 1;
      FEEDBACK_ALL_MASK = -1;
      FEEDBACK_AUDIBLE = 4;
      FEEDBACK_BRAILLE = 32;
      FEEDBACK_GENERIC = 16;
      FEEDBACK_HAPTIC = 2;
      FEEDBACK_SPOKEN = 1;
      FEEDBACK_VISUAL = 8;
      FLAG_INCLUDE_NOT_IMPORTANT_VIEWS = 2;
      FLAG_REPORT_VIEW_IDS = 16;
      FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY = 8;
      FLAG_REQUEST_FILTER_KEY_EVENTS = 32;
      FLAG_REQUEST_TOUCH_EXPLORATION_MODE = 4;
      FLAG_RETRIEVE_INTERACTIVE_WINDOWS = 64;
  public
    var
      feventTypes: jint; external name 'eventTypes';
      ffeedbackType: jint; external name 'feedbackType';
      fflags: jint; external name 'flags';
      fnotificationTimeout: jlong; external name 'notificationTimeout';
      fpackageNames: Arr1JLString; external name 'packageNames';
  public
    constructor create(); overload;
    function getId(): JLString; overload; virtual;
    function getResolveInfo(): ACPResolveInfo; overload; virtual;
    function getSettingsActivityName(): JLString; overload; virtual;
    function getCanRetrieveWindowContent(): jboolean; overload; virtual;
    function getCapabilities(): jint; overload; virtual;
    function getDescription(): JLString; overload; virtual;
    function loadDescription(para1: ACPPackageManager): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    class function feedbackTypeToString(para1: jint): JLString; static; overload;
    class function flagToString(para1: jint): JLString; static; overload;
    class function capabilityToString(para1: jint): JLString; static; overload;
  end;

  AAAccount = class external 'android.accounts' name 'Account' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    final var
      fname: JLString; external name 'name';
      ftype: JLString; external name 'type';
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: AOParcel); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AAAccountAuthenticatorResponse = class external 'android.accounts' name 'AccountAuthenticatorResponse' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: AOParcel); overload;
    procedure onResult(para1: AOBundle); overload; virtual;
    procedure onRequestContinued(); overload; virtual;
    procedure onError(para1: jint; para2: JLString); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AAAuthenticatorDescription = class external 'android.accounts' name 'AuthenticatorDescription' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    final var
      faccountPreferencesId: jint; external name 'accountPreferencesId';
      fcustomTokens: jboolean; external name 'customTokens';
      ficonId: jint; external name 'iconId';
      flabelId: jint; external name 'labelId';
      fpackageName: JLString; external name 'packageName';
      fsmallIconId: jint; external name 'smallIconId';
      ftype: JLString; external name 'type';
  public
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: jint; para5: jint; para6: jint; para7: jboolean); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: jint; para5: jint; para6: jint); overload;
    class function newKey(para1: JLString): AAAuthenticatorDescription; static; overload;
    function describeContents(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AAApplicationErrorReport = class external 'android.app' name 'ApplicationErrorReport' (JLObject, AOParcelable)
  public
    type
      InnerRunningServiceInfo = class;
      Arr1InnerRunningServiceInfo = array of InnerRunningServiceInfo;
      Arr2InnerRunningServiceInfo = array of Arr1InnerRunningServiceInfo;
      Arr3InnerRunningServiceInfo = array of Arr2InnerRunningServiceInfo;
      InnerBatteryInfo = class;
      Arr1InnerBatteryInfo = array of InnerBatteryInfo;
      Arr2InnerBatteryInfo = array of Arr1InnerBatteryInfo;
      Arr3InnerBatteryInfo = array of Arr2InnerBatteryInfo;
      InnerAnrInfo = class;
      Arr1InnerAnrInfo = array of InnerAnrInfo;
      Arr2InnerAnrInfo = array of Arr1InnerAnrInfo;
      Arr3InnerAnrInfo = array of Arr2InnerAnrInfo;
      InnerCrashInfo = class;
      Arr1InnerCrashInfo = array of InnerCrashInfo;
      Arr2InnerCrashInfo = array of Arr1InnerCrashInfo;
      Arr3InnerCrashInfo = array of Arr2InnerCrashInfo;
      InnerRunningServiceInfo = class external 'android.app' name 'RunningServiceInfo' (JLObject)
      public
        var
          fdurationMillis: jlong; external name 'durationMillis';
          fserviceDetails: JLString; external name 'serviceDetails';
      public
        constructor create(); overload;
        constructor create(para1: AOParcel); overload;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
      end;

      InnerBatteryInfo = class external 'android.app' name 'BatteryInfo' (JLObject)
      public
        var
          fcheckinDetails: JLString; external name 'checkinDetails';
          fdurationMicros: jlong; external name 'durationMicros';
          fusageDetails: JLString; external name 'usageDetails';
          fusagePercent: jint; external name 'usagePercent';
      public
        constructor create(); overload;
        constructor create(para1: AOParcel); overload;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
      end;

      InnerAnrInfo = class external 'android.app' name 'AnrInfo' (JLObject)
      public
        var
          factivity: JLString; external name 'activity';
          fcause: JLString; external name 'cause';
          finfo: JLString; external name 'info';
      public
        constructor create(); overload;
        constructor create(para1: AOParcel); overload;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
      end;

      InnerCrashInfo = class external 'android.app' name 'CrashInfo' (JLObject)
      public
        var
          fexceptionClassName: JLString; external name 'exceptionClassName';
          fexceptionMessage: JLString; external name 'exceptionMessage';
          fstackTrace: JLString; external name 'stackTrace';
          fthrowClassName: JLString; external name 'throwClassName';
          fthrowFileName: JLString; external name 'throwFileName';
          fthrowLineNumber: jint; external name 'throwLineNumber';
          fthrowMethodName: JLString; external name 'throwMethodName';
      public
        constructor create(); overload;
        constructor create(para1: JLThrowable); overload;
        constructor create(para1: AOParcel); overload;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      TYPE_ANR = 2;
      TYPE_BATTERY = 3;
      TYPE_CRASH = 1;
      TYPE_NONE = 0;
      TYPE_RUNNING_SERVICE = 5;
  public
    var
      fanrInfo: AAApplicationErrorReport.InnerAnrInfo; external name 'anrInfo';
      fbatteryInfo: AAApplicationErrorReport.InnerBatteryInfo; external name 'batteryInfo';
      fcrashInfo: AAApplicationErrorReport.InnerCrashInfo; external name 'crashInfo';
      finstallerPackageName: JLString; external name 'installerPackageName';
      fpackageName: JLString; external name 'packageName';
      fprocessName: JLString; external name 'processName';
      frunningServiceInfo: AAApplicationErrorReport.InnerRunningServiceInfo; external name 'runningServiceInfo';
      fsystemApp: jboolean; external name 'systemApp';
      ftime: jlong; external name 'time';
      ftype: jint; external name 'type';
  public
    constructor create(); overload;
    class function getErrorReportReceiver(para1: ACContext; para2: JLString; para3: jint): ACComponentName; static; overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
  end;

  AMSMediaSession = class sealed external 'android.media.session' name 'MediaSession' (JLObject)
  public
    type
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerQueueItem = class;
      Arr1InnerQueueItem = array of InnerQueueItem;
      Arr2InnerQueueItem = array of Arr1InnerQueueItem;
      Arr3InnerQueueItem = array of Arr2InnerQueueItem;
      InnerToken = class;
      Arr1InnerToken = array of InnerToken;
      Arr2InnerToken = array of Arr1InnerToken;
      Arr3InnerToken = array of Arr2InnerToken;
      InnerCallback = class abstract external 'android.media.session' name 'Callback' (JLObject)
      public
        constructor create(); overload;
        procedure onCommand(para1: JLString; para2: AOBundle; para3: AOResultReceiver); overload; virtual;
        function onMediaButtonEvent(para1: ACIntent): jboolean; overload; virtual;
        procedure onPlay(); overload; virtual;
        procedure onPlayFromMediaId(para1: JLString; para2: AOBundle); overload; virtual;
        procedure onPlayFromSearch(para1: JLString; para2: AOBundle); overload; virtual;
        procedure onSkipToQueueItem(para1: jlong); overload; virtual;
        procedure onPause(); overload; virtual;
        procedure onSkipToNext(); overload; virtual;
        procedure onSkipToPrevious(); overload; virtual;
        procedure onFastForward(); overload; virtual;
        procedure onRewind(); overload; virtual;
        procedure onStop(); overload; virtual;
        procedure onSeekTo(para1: jlong); overload; virtual;
        procedure onSetRating(para1: AMRating); overload; virtual;
        procedure onCustomAction(para1: JLString; para2: AOBundle); overload; virtual;
      end;
      InnerQueueItem = class sealed external 'android.media.session' name 'QueueItem' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        const
          UNKNOWN_ID = -1;
      public
        constructor create(para1: AMMediaDescription; para2: jlong); overload;
        function getDescription(): AMMediaDescription; overload; virtual;
        function getQueueId(): jlong; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function describeContents(): jint; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;
      InnerToken = class sealed external 'android.media.session' name 'Token' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function hashCode(): jint; overload; virtual;
        function equals(para1: JLObject): jboolean; overload; virtual;
      end;
  public
    const
      FLAG_HANDLES_MEDIA_BUTTONS = 1;
      FLAG_HANDLES_TRANSPORT_CONTROLS = 2;
  public
    constructor create(para1: ACContext; para2: JLString); overload;
    procedure setCallback(para1: AMSMediaSession.InnerCallback); overload; virtual;
    procedure setCallback(para1: AMSMediaSession.InnerCallback; para2: AOHandler); overload; virtual;
    procedure setSessionActivity(para1: AAPendingIntent); overload; virtual;
    procedure setMediaButtonReceiver(para1: AAPendingIntent); overload; virtual;
    procedure setFlags(para1: jint); overload; virtual;
    procedure setPlaybackToLocal(para1: AMAudioAttributes); overload; virtual;
    procedure setPlaybackToRemote(para1: AMVolumeProvider); overload; virtual;
    procedure setActive(para1: jboolean); overload; virtual;
    function isActive(): jboolean; overload; virtual;
    procedure sendSessionEvent(para1: JLString; para2: AOBundle); overload; virtual;
    procedure release(); overload; virtual;
    function getSessionToken(): AMSMediaSession.InnerToken; overload; virtual;
    function getController(): AMSMediaController; overload; virtual;
    procedure setPlaybackState(para1: AMSPlaybackState); overload; virtual;
    procedure setMetadata(para1: AMMediaMetadata); overload; virtual;
    procedure setQueue(para1: JUList); overload; virtual;
    procedure setQueueTitle(para1: JLCharSequence); overload; virtual;
    procedure setExtras(para1: AOBundle); overload; virtual;
  end;

  AANotification = class external 'android.app' name 'Notification' (JLObject, AOParcelable)
  public
    type
      InnerExtender = interface;
      Arr1InnerExtender = array of InnerExtender;
      Arr2InnerExtender = array of Arr1InnerExtender;
      Arr3InnerExtender = array of Arr2InnerExtender;
      InnerStyle = class;
      Arr1InnerStyle = array of InnerStyle;
      Arr2InnerStyle = array of Arr1InnerStyle;
      Arr3InnerStyle = array of Arr2InnerStyle;
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerAction = class;
      Arr1InnerAction = array of InnerAction;
      Arr2InnerAction = array of Arr1InnerAction;
      Arr3InnerAction = array of Arr2InnerAction;
      InnerWearableExtender = class;
      Arr1InnerWearableExtender = array of InnerWearableExtender;
      Arr2InnerWearableExtender = array of Arr1InnerWearableExtender;
      Arr3InnerWearableExtender = array of Arr2InnerWearableExtender;
      InnerMediaStyle = class;
      Arr1InnerMediaStyle = array of InnerMediaStyle;
      Arr2InnerMediaStyle = array of Arr1InnerMediaStyle;
      Arr3InnerMediaStyle = array of Arr2InnerMediaStyle;
      InnerInboxStyle = class;
      Arr1InnerInboxStyle = array of InnerInboxStyle;
      Arr2InnerInboxStyle = array of Arr1InnerInboxStyle;
      Arr3InnerInboxStyle = array of Arr2InnerInboxStyle;
      InnerBigTextStyle = class;
      Arr1InnerBigTextStyle = array of InnerBigTextStyle;
      Arr2InnerBigTextStyle = array of Arr1InnerBigTextStyle;
      Arr3InnerBigTextStyle = array of Arr2InnerBigTextStyle;
      InnerBigPictureStyle = class;
      Arr1InnerBigPictureStyle = array of InnerBigPictureStyle;
      Arr2InnerBigPictureStyle = array of Arr1InnerBigPictureStyle;
      Arr3InnerBigPictureStyle = array of Arr2InnerBigPictureStyle;
      InnerExtender = interface external 'android.app' name 'Extender' 
        function extend(para1: AANotification.InnerBuilder): AANotification.InnerBuilder; overload;
      end;

      InnerStyle = class abstract external 'android.app' name 'Style' (JLObject)
      strict protected
        var
          fmBuilder: AANotification.InnerBuilder; external name 'mBuilder';
      public
        constructor create(); overload;
      strict protected
        procedure internalSetBigContentTitle(para1: JLCharSequence); overload; virtual;
        procedure internalSetSummaryText(para1: JLCharSequence); overload; virtual;
      public
        procedure setBuilder(para1: AANotification.InnerBuilder); overload; virtual;
      strict protected
        procedure checkBuilder(); overload; virtual;
        function getStandardView(para1: jint): AWRemoteViews; overload; virtual;
      public
        function build(): AANotification; overload; virtual;
      end;

      InnerBuilder = class external 'android.app' name 'Builder' (JLObject)
      public
        constructor create(para1: ACContext); overload;
        function setWhen(para1: jlong): AANotification.InnerBuilder; overload; virtual;
        function setShowWhen(para1: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setUsesChronometer(para1: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setSmallIcon(para1: jint): AANotification.InnerBuilder; overload; virtual;
        function setSmallIcon(para1: jint; para2: jint): AANotification.InnerBuilder; overload; virtual;
        function setContentTitle(para1: JLCharSequence): AANotification.InnerBuilder; overload; virtual;
        function setContentText(para1: JLCharSequence): AANotification.InnerBuilder; overload; virtual;
        function setSubText(para1: JLCharSequence): AANotification.InnerBuilder; overload; virtual;
        function setNumber(para1: jint): AANotification.InnerBuilder; overload; virtual;
        function setContentInfo(para1: JLCharSequence): AANotification.InnerBuilder; overload; virtual;
        function setProgress(para1: jint; para2: jint; para3: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setContent(para1: AWRemoteViews): AANotification.InnerBuilder; overload; virtual;
        function setContentIntent(para1: AAPendingIntent): AANotification.InnerBuilder; overload; virtual;
        function setDeleteIntent(para1: AAPendingIntent): AANotification.InnerBuilder; overload; virtual;
        function setFullScreenIntent(para1: AAPendingIntent; para2: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setTicker(para1: JLCharSequence): AANotification.InnerBuilder; overload; virtual;
        function setTicker(para1: JLCharSequence; para2: AWRemoteViews): AANotification.InnerBuilder; overload; virtual;
        function setLargeIcon(para1: AGBitmap): AANotification.InnerBuilder; overload; virtual;
        function setSound(para1: ANUri): AANotification.InnerBuilder; overload; virtual;
        function setSound(para1: ANUri; para2: jint): AANotification.InnerBuilder; overload; virtual;
        function setSound(para1: ANUri; para2: AMAudioAttributes): AANotification.InnerBuilder; overload; virtual;
        function setVibrate(para1: Arr1jlong): AANotification.InnerBuilder; overload; virtual;
        function setVibrate(var para1: array of jlong): AANotification.InnerBuilder; overload; virtual;
        function setLights(para1: jint; para2: jint; para3: jint): AANotification.InnerBuilder; overload; virtual;
        function setOngoing(para1: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setOnlyAlertOnce(para1: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setAutoCancel(para1: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setLocalOnly(para1: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setDefaults(para1: jint): AANotification.InnerBuilder; overload; virtual;
        function setPriority(para1: jint): AANotification.InnerBuilder; overload; virtual;
        function setCategory(para1: JLString): AANotification.InnerBuilder; overload; virtual;
        function addPerson(para1: JLString): AANotification.InnerBuilder; overload; virtual;
        function setGroup(para1: JLString): AANotification.InnerBuilder; overload; virtual;
        function setGroupSummary(para1: jboolean): AANotification.InnerBuilder; overload; virtual;
        function setSortKey(para1: JLString): AANotification.InnerBuilder; overload; virtual;
        function addExtras(para1: AOBundle): AANotification.InnerBuilder; overload; virtual;
        function setExtras(para1: AOBundle): AANotification.InnerBuilder; overload; virtual;
        function getExtras(): AOBundle; overload; virtual;
        function addAction(para1: jint; para2: JLCharSequence; para3: AAPendingIntent): AANotification.InnerBuilder; overload; virtual;
        function addAction(para1: AANotification.InnerAction): AANotification.InnerBuilder; overload; virtual;
        function setStyle(para1: AANotification.InnerStyle): AANotification.InnerBuilder; overload; virtual;
        function setVisibility(para1: jint): AANotification.InnerBuilder; overload; virtual;
        function setPublicVersion(para1: AANotification): AANotification.InnerBuilder; overload; virtual;
        function extend(para1: AANotification.InnerExtender): AANotification.InnerBuilder; overload; virtual;
        function setColor(para1: jint): AANotification.InnerBuilder; overload; virtual;
        function getNotification(): AANotification; overload; virtual;
        function build(): AANotification; overload; virtual;
      end;

      InnerAction = class external 'android.app' name 'Action' (JLObject, AOParcelable)
      public
        type
          InnerExtender = interface;
          Arr1InnerExtender = array of InnerExtender;
          Arr2InnerExtender = array of Arr1InnerExtender;
          Arr3InnerExtender = array of Arr2InnerExtender;
          InnerBuilder = class;
          Arr1InnerBuilder = array of InnerBuilder;
          Arr2InnerBuilder = array of Arr1InnerBuilder;
          Arr3InnerBuilder = array of Arr2InnerBuilder;
          InnerWearableExtender = class;
          Arr1InnerWearableExtender = array of InnerWearableExtender;
          Arr2InnerWearableExtender = array of Arr1InnerWearableExtender;
          Arr3InnerWearableExtender = array of Arr2InnerWearableExtender;
          InnerExtender = interface external 'android.app' name 'Extender' 
            function extend(para1: AANotification.InnerAction.InnerBuilder): AANotification.InnerAction.InnerBuilder; overload;
          end;

          InnerBuilder = class sealed external 'android.app' name 'Builder' (JLObject)
          public
            constructor create(para1: jint; para2: JLCharSequence; para3: AAPendingIntent); overload;
            constructor create(para1: AANotification.InnerAction); overload;
            function addExtras(para1: AOBundle): AANotification.InnerAction.InnerBuilder; overload; virtual;
            function getExtras(): AOBundle; overload; virtual;
            function addRemoteInput(para1: AARemoteInput): AANotification.InnerAction.InnerBuilder; overload; virtual;
            function extend(para1: AANotification.InnerAction.InnerExtender): AANotification.InnerAction.InnerBuilder; overload; virtual;
            function build(): AANotification.InnerAction; overload; virtual;
          end;

          InnerWearableExtender = class sealed external 'android.app' name 'WearableExtender' (JLObject, AANotification.InnerAction.InnerExtender)
          public
            constructor create(); overload;
            constructor create(para1: AANotification.InnerAction); overload;
            function extend(para1: AANotification.InnerAction.InnerBuilder): AANotification.InnerAction.InnerBuilder; overload; virtual;
            function clone(): AANotification.InnerAction.InnerWearableExtender; overload; virtual;
            function setAvailableOffline(para1: jboolean): AANotification.InnerAction.InnerWearableExtender; overload; virtual;
            function isAvailableOffline(): jboolean; overload; virtual;
            function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
          end;

      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        var
          factionIntent: AAPendingIntent; external name 'actionIntent';
          ficon: jint; external name 'icon';
          ftitle: JLCharSequence; external name 'title';
      public
        constructor create(para1: jint; para2: JLCharSequence; para3: AAPendingIntent); overload;
        function getExtras(): AOBundle; overload; virtual;
        function getRemoteInputs(): Arr1AARemoteInput; overload; virtual;
        function clone(): AANotification.InnerAction; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
      end;

      InnerWearableExtender = class sealed external 'android.app' name 'WearableExtender' (JLObject, AANotification.InnerExtender)
      public
        const
          SIZE_DEFAULT = 0;
          SIZE_FULL_SCREEN = 5;
          SIZE_LARGE = 4;
          SIZE_MEDIUM = 3;
          SIZE_SMALL = 2;
          SIZE_XSMALL = 1;
          UNSET_ACTION_INDEX = -1;
      public
        constructor create(); overload;
        constructor create(para1: AANotification); overload;
        function extend(para1: AANotification.InnerBuilder): AANotification.InnerBuilder; overload; virtual;
        function clone(): AANotification.InnerWearableExtender; overload; virtual;
        function addAction(para1: AANotification.InnerAction): AANotification.InnerWearableExtender; overload; virtual;
        function addActions(para1: JUList): AANotification.InnerWearableExtender; overload; virtual;
        function clearActions(): AANotification.InnerWearableExtender; overload; virtual;
        function getActions(): JUList; overload; virtual;
        function setDisplayIntent(para1: AAPendingIntent): AANotification.InnerWearableExtender; overload; virtual;
        function getDisplayIntent(): AAPendingIntent; overload; virtual;
        function addPage(para1: AANotification): AANotification.InnerWearableExtender; overload; virtual;
        function addPages(para1: JUList): AANotification.InnerWearableExtender; overload; virtual;
        function clearPages(): AANotification.InnerWearableExtender; overload; virtual;
        function getPages(): JUList; overload; virtual;
        function setBackground(para1: AGBitmap): AANotification.InnerWearableExtender; overload; virtual;
        function getBackground(): AGBitmap; overload; virtual;
        function setContentIcon(para1: jint): AANotification.InnerWearableExtender; overload; virtual;
        function getContentIcon(): jint; overload; virtual;
        function setContentIconGravity(para1: jint): AANotification.InnerWearableExtender; overload; virtual;
        function getContentIconGravity(): jint; overload; virtual;
        function setContentAction(para1: jint): AANotification.InnerWearableExtender; overload; virtual;
        function getContentAction(): jint; overload; virtual;
        function setGravity(para1: jint): AANotification.InnerWearableExtender; overload; virtual;
        function getGravity(): jint; overload; virtual;
        function setCustomSizePreset(para1: jint): AANotification.InnerWearableExtender; overload; virtual;
        function getCustomSizePreset(): jint; overload; virtual;
        function setCustomContentHeight(para1: jint): AANotification.InnerWearableExtender; overload; virtual;
        function getCustomContentHeight(): jint; overload; virtual;
        function setStartScrollBottom(para1: jboolean): AANotification.InnerWearableExtender; overload; virtual;
        function getStartScrollBottom(): jboolean; overload; virtual;
        function setContentIntentAvailableOffline(para1: jboolean): AANotification.InnerWearableExtender; overload; virtual;
        function getContentIntentAvailableOffline(): jboolean; overload; virtual;
        function setHintHideIcon(para1: jboolean): AANotification.InnerWearableExtender; overload; virtual;
        function getHintHideIcon(): jboolean; overload; virtual;
        function setHintShowBackgroundOnly(para1: jboolean): AANotification.InnerWearableExtender; overload; virtual;
        function getHintShowBackgroundOnly(): jboolean; overload; virtual;
        function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
      end;

      InnerMediaStyle = class external 'android.app' name 'MediaStyle' (InnerStyle)
      public
        constructor create(); overload;
        constructor create(para1: AANotification.InnerBuilder); overload;
        function setShowActionsInCompactView(para1: Arr1jint): AANotification.InnerMediaStyle; overload; virtual;
        function setShowActionsInCompactView(const para1: array of jint): AANotification.InnerMediaStyle; overload; virtual;
        function setMediaSession(para1: AMSMediaSession.InnerToken): AANotification.InnerMediaStyle; overload; virtual;
      end;

      InnerInboxStyle = class external 'android.app' name 'InboxStyle' (InnerStyle)
      public
        constructor create(); overload;
        constructor create(para1: AANotification.InnerBuilder); overload;
        function setBigContentTitle(para1: JLCharSequence): AANotification.InnerInboxStyle; overload; virtual;
        function setSummaryText(para1: JLCharSequence): AANotification.InnerInboxStyle; overload; virtual;
        function addLine(para1: JLCharSequence): AANotification.InnerInboxStyle; overload; virtual;
      end;

      InnerBigTextStyle = class external 'android.app' name 'BigTextStyle' (InnerStyle)
      public
        constructor create(); overload;
        constructor create(para1: AANotification.InnerBuilder); overload;
        function setBigContentTitle(para1: JLCharSequence): AANotification.InnerBigTextStyle; overload; virtual;
        function setSummaryText(para1: JLCharSequence): AANotification.InnerBigTextStyle; overload; virtual;
        function bigText(para1: JLCharSequence): AANotification.InnerBigTextStyle; overload; virtual;
      end;

      InnerBigPictureStyle = class external 'android.app' name 'BigPictureStyle' (InnerStyle)
      public
        constructor create(); overload;
        constructor create(para1: AANotification.InnerBuilder); overload;
        function setBigContentTitle(para1: JLCharSequence): AANotification.InnerBigPictureStyle; overload; virtual;
        function setSummaryText(para1: JLCharSequence): AANotification.InnerBigPictureStyle; overload; virtual;
        function bigPicture(para1: AGBitmap): AANotification.InnerBigPictureStyle; overload; virtual;
        function bigLargeIcon(para1: AGBitmap): AANotification.InnerBigPictureStyle; overload; virtual;
      end;

  public
    final class var
      fAUDIO_ATTRIBUTES_DEFAULT: AMAudioAttributes; external name 'AUDIO_ATTRIBUTES_DEFAULT';
  public
    const
      CATEGORY_ALARM = 'alarm';
      CATEGORY_CALL = 'call';
      CATEGORY_EMAIL = 'email';
      CATEGORY_ERROR = 'err';
      CATEGORY_EVENT = 'event';
      CATEGORY_MESSAGE = 'msg';
      CATEGORY_PROGRESS = 'progress';
      CATEGORY_PROMO = 'promo';
      CATEGORY_RECOMMENDATION = 'recommendation';
      CATEGORY_SERVICE = 'service';
      CATEGORY_SOCIAL = 'social';
      CATEGORY_STATUS = 'status';
      CATEGORY_SYSTEM = 'sys';
      CATEGORY_TRANSPORT = 'transport';
      COLOR_DEFAULT = 0;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      DEFAULT_ALL = -1;
      DEFAULT_LIGHTS = 4;
      DEFAULT_SOUND = 1;
      DEFAULT_VIBRATE = 2;
      EXTRA_BACKGROUND_IMAGE_URI = 'android.backgroundImageUri';
      EXTRA_BIG_TEXT = 'android.bigText';
      EXTRA_COMPACT_ACTIONS = 'android.compactActions';
      EXTRA_INFO_TEXT = 'android.infoText';
      EXTRA_LARGE_ICON = 'android.largeIcon';
      EXTRA_LARGE_ICON_BIG = 'android.largeIcon.big';
      EXTRA_MEDIA_SESSION = 'android.mediaSession';
      EXTRA_PEOPLE = 'android.people';
      EXTRA_PICTURE = 'android.picture';
      EXTRA_PROGRESS = 'android.progress';
      EXTRA_PROGRESS_INDETERMINATE = 'android.progressIndeterminate';
      EXTRA_PROGRESS_MAX = 'android.progressMax';
      EXTRA_SHOW_CHRONOMETER = 'android.showChronometer';
      EXTRA_SHOW_WHEN = 'android.showWhen';
      EXTRA_SMALL_ICON = 'android.icon';
      EXTRA_SUB_TEXT = 'android.subText';
      EXTRA_SUMMARY_TEXT = 'android.summaryText';
      EXTRA_TEMPLATE = 'android.template';
      EXTRA_TEXT = 'android.text';
      EXTRA_TEXT_LINES = 'android.textLines';
      EXTRA_TITLE = 'android.title';
      EXTRA_TITLE_BIG = 'android.title.big';
      FLAG_AUTO_CANCEL = 16;
      FLAG_FOREGROUND_SERVICE = 64;
      FLAG_GROUP_SUMMARY = 512;
      FLAG_HIGH_PRIORITY = 128 deprecated;
      FLAG_INSISTENT = 4;
      FLAG_LOCAL_ONLY = 256;
      FLAG_NO_CLEAR = 32;
      FLAG_ONGOING_EVENT = 2;
      FLAG_ONLY_ALERT_ONCE = 8;
      FLAG_SHOW_LIGHTS = 1;
      INTENT_CATEGORY_NOTIFICATION_PREFERENCES = 'android.intent.category.NOTIFICATION_PREFERENCES';
      PRIORITY_DEFAULT = 0;
      PRIORITY_HIGH = 1;
      PRIORITY_LOW = -1;
      PRIORITY_MAX = 2;
      PRIORITY_MIN = -2;
      STREAM_DEFAULT = -1 deprecated;
      VISIBILITY_PRIVATE = 0;
      VISIBILITY_PUBLIC = 1;
      VISIBILITY_SECRET = -1;
  public
    var
      factions: AANotification.Arr1InnerAction; external name 'actions';
      faudioAttributes: AMAudioAttributes; external name 'audioAttributes';
      faudioStreamType: jint deprecated; external name 'audioStreamType';
      fbigContentView: AWRemoteViews; external name 'bigContentView';
      fcategory: JLString; external name 'category';
      fcolor: jint; external name 'color';
      fcontentIntent: AAPendingIntent; external name 'contentIntent';
      fcontentView: AWRemoteViews; external name 'contentView';
      fdefaults: jint; external name 'defaults';
      fdeleteIntent: AAPendingIntent; external name 'deleteIntent';
      fextras: AOBundle; external name 'extras';
      fflags: jint; external name 'flags';
      ffullScreenIntent: AAPendingIntent; external name 'fullScreenIntent';
      fheadsUpContentView: AWRemoteViews; external name 'headsUpContentView';
      ficon: jint; external name 'icon';
      ficonLevel: jint; external name 'iconLevel';
      flargeIcon: AGBitmap; external name 'largeIcon';
      fledARGB: jint; external name 'ledARGB';
      fledOffMS: jint; external name 'ledOffMS';
      fledOnMS: jint; external name 'ledOnMS';
      fnumber: jint; external name 'number';
      fpriority: jint; external name 'priority';
      fpublicVersion: AANotification; external name 'publicVersion';
      fsound: ANUri; external name 'sound';
      ftickerText: JLCharSequence; external name 'tickerText';
      ftickerView: AWRemoteViews deprecated; external name 'tickerView';
      fvibrate: Arr1jlong; external name 'vibrate';
      fvisibility: jint; external name 'visibility';
      fwhen: jlong; external name 'when';
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: JLCharSequence; para3: jlong); overload;
    constructor create(para1: AOParcel); overload;
    function getGroup(): JLString; overload; virtual;
    function getSortKey(): JLString; overload; virtual;
    function clone(): AANotification; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure setLatestEventInfo(para1: ACContext; para2: JLCharSequence; para3: JLCharSequence; para4: AAPendingIntent); overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AASearchableInfo = class sealed external 'android.app' name 'SearchableInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getSuggestAuthority(): JLString; overload; virtual;
    function getSuggestPackage(): JLString; overload; virtual;
    function getSearchActivity(): ACComponentName; overload; virtual;
    function shouldRewriteQueryFromData(): jboolean; overload; virtual;
    function shouldRewriteQueryFromText(): jboolean; overload; virtual;
    function getSettingsDescriptionId(): jint; overload; virtual;
    function getSuggestPath(): JLString; overload; virtual;
    function getSuggestSelection(): JLString; overload; virtual;
    function getSuggestIntentAction(): JLString; overload; virtual;
    function getSuggestIntentData(): JLString; overload; virtual;
    function getSuggestThreshold(): jint; overload; virtual;
    function getHintId(): jint; overload; virtual;
    function getVoiceSearchEnabled(): jboolean; overload; virtual;
    function getVoiceSearchLaunchWebSearch(): jboolean; overload; virtual;
    function getVoiceSearchLaunchRecognizer(): jboolean; overload; virtual;
    function getVoiceLanguageModeId(): jint; overload; virtual;
    function getVoicePromptTextId(): jint; overload; virtual;
    function getVoiceLanguageId(): jint; overload; virtual;
    function getVoiceMaxResults(): jint; overload; virtual;
    function getInputType(): jint; overload; virtual;
    function getImeOptions(): jint; overload; virtual;
    function shouldIncludeInGlobalSearch(): jboolean; overload; virtual;
    function queryAfterZeroResults(): jboolean; overload; virtual;
    function autoUrlDetect(): jboolean; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AAWallpaperInfo = class sealed external 'android.app' name 'WallpaperInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: ACContext; para2: ACPResolveInfo); overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function getPackageName(): JLString; overload; virtual;
    function getServiceName(): JLString; overload; virtual;
    function getServiceInfo(): ACPServiceInfo; overload; virtual;
    function getComponent(): ACComponentName; overload; virtual;
    function loadLabel(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function loadIcon(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function loadThumbnail(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function loadAuthor(para1: ACPPackageManager): JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function loadDescription(para1: ACPPackageManager): JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getSettingsActivity(): JLString; overload; virtual;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AAADeviceAdminInfo = class sealed external 'android.app.admin' name 'DeviceAdminInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      USES_ENCRYPTED_STORAGE = 7;
      USES_POLICY_DISABLE_CAMERA = 8;
      USES_POLICY_DISABLE_KEYGUARD_FEATURES = 9;
      USES_POLICY_EXPIRE_PASSWORD = 6;
      USES_POLICY_FORCE_LOCK = 3;
      USES_POLICY_LIMIT_PASSWORD = 0;
      USES_POLICY_RESET_PASSWORD = 2;
      USES_POLICY_WATCH_LOGIN = 1;
      USES_POLICY_WIPE_DATA = 4;
  public
    constructor create(para1: ACContext; para2: ACPResolveInfo); overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function getPackageName(): JLString; overload; virtual;
    function getReceiverName(): JLString; overload; virtual;
    function getActivityInfo(): ACPActivityInfo; overload; virtual;
    function getComponent(): ACComponentName; overload; virtual;
    function loadLabel(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function loadDescription(para1: ACPPackageManager): JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function loadIcon(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function isVisible(): jboolean; overload; virtual;
    function usesPolicy(para1: jint): jboolean; overload; virtual;
    function getTagForPolicy(para1: jint): JLString; overload; virtual;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AAAppWidgetProviderInfo = class external 'android.appwidget' name 'AppWidgetProviderInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      RESIZE_BOTH = 3;
      RESIZE_HORIZONTAL = 1;
      RESIZE_NONE = 0;
      RESIZE_VERTICAL = 2;
      WIDGET_CATEGORY_HOME_SCREEN = 1;
      WIDGET_CATEGORY_KEYGUARD = 2;
      WIDGET_CATEGORY_SEARCHBOX = 4;
  public
    var
      fautoAdvanceViewId: jint; external name 'autoAdvanceViewId';
      fconfigure: ACComponentName; external name 'configure';
      ficon: jint; external name 'icon';
      finitialKeyguardLayout: jint; external name 'initialKeyguardLayout';
      finitialLayout: jint; external name 'initialLayout';
      flabel: JLString deprecated; external name 'label';
      fminHeight: jint; external name 'minHeight';
      fminResizeHeight: jint; external name 'minResizeHeight';
      fminResizeWidth: jint; external name 'minResizeWidth';
      fminWidth: jint; external name 'minWidth';
      fpreviewImage: jint; external name 'previewImage';
      fprovider: ACComponentName; external name 'provider';
      fresizeMode: jint; external name 'resizeMode';
      fupdatePeriodMillis: jint; external name 'updatePeriodMillis';
      fwidgetCategory: jint; external name 'widgetCategory';
  public
    constructor create(); overload;
    constructor create(para1: AOParcel); overload;
    function loadLabel(para1: ACPPackageManager): JLString; overload; virtual; final;
    function loadIcon(para1: ACContext; para2: jint): AGDDrawable; overload; virtual; final;
    function loadPreviewImage(para1: ACContext; para2: jint): AGDDrawable; overload; virtual; final;
    function getProfile(): AOUserHandle; overload; virtual; final;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function clone(): AAAppWidgetProviderInfo; overload; virtual;
    function describeContents(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  ABBluetoothClass = class sealed external 'android.bluetooth' name 'BluetoothClass' (JLObject, AOParcelable)
  public
    type
      InnerDevice = class;
      Arr1InnerDevice = array of InnerDevice;
      Arr2InnerDevice = array of Arr1InnerDevice;
      Arr3InnerDevice = array of Arr2InnerDevice;
      InnerService = class;
      Arr1InnerService = array of InnerService;
      Arr2InnerService = array of Arr1InnerService;
      Arr3InnerService = array of Arr2InnerService;
      InnerDevice = class external 'android.bluetooth' name 'Device' (JLObject)
      public
        type
          InnerMajor = class;
          Arr1InnerMajor = array of InnerMajor;
          Arr2InnerMajor = array of Arr1InnerMajor;
          Arr3InnerMajor = array of Arr2InnerMajor;
          InnerMajor = class external 'android.bluetooth' name 'Major' (JLObject)
          public
            const
              AUDIO_VIDEO = 1024;
              COMPUTER = 256;
              HEALTH = 2304;
              IMAGING = 1536;
              MISC = 0;
              NETWORKING = 768;
              PERIPHERAL = 1280;
              PHONE = 512;
              TOY = 2048;
              UNCATEGORIZED = 7936;
              WEARABLE = 1792;
          public
            constructor create(); overload;
          end;

      public
        const
          AUDIO_VIDEO_CAMCORDER = 1076;
          AUDIO_VIDEO_CAR_AUDIO = 1056;
          AUDIO_VIDEO_HANDSFREE = 1032;
          AUDIO_VIDEO_HEADPHONES = 1048;
          AUDIO_VIDEO_HIFI_AUDIO = 1064;
          AUDIO_VIDEO_LOUDSPEAKER = 1044;
          AUDIO_VIDEO_MICROPHONE = 1040;
          AUDIO_VIDEO_PORTABLE_AUDIO = 1052;
          AUDIO_VIDEO_SET_TOP_BOX = 1060;
          AUDIO_VIDEO_UNCATEGORIZED = 1024;
          AUDIO_VIDEO_VCR = 1068;
          AUDIO_VIDEO_VIDEO_CAMERA = 1072;
          AUDIO_VIDEO_VIDEO_CONFERENCING = 1088;
          AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER = 1084;
          AUDIO_VIDEO_VIDEO_GAMING_TOY = 1096;
          AUDIO_VIDEO_VIDEO_MONITOR = 1080;
          AUDIO_VIDEO_WEARABLE_HEADSET = 1028;
          COMPUTER_DESKTOP = 260;
          COMPUTER_HANDHELD_PC_PDA = 272;
          COMPUTER_LAPTOP = 268;
          COMPUTER_PALM_SIZE_PC_PDA = 276;
          COMPUTER_SERVER = 264;
          COMPUTER_UNCATEGORIZED = 256;
          COMPUTER_WEARABLE = 280;
          HEALTH_BLOOD_PRESSURE = 2308;
          HEALTH_DATA_DISPLAY = 2332;
          HEALTH_GLUCOSE = 2320;
          HEALTH_PULSE_OXIMETER = 2324;
          HEALTH_PULSE_RATE = 2328;
          HEALTH_THERMOMETER = 2312;
          HEALTH_UNCATEGORIZED = 2304;
          HEALTH_WEIGHING = 2316;
          PHONE_CELLULAR = 516;
          PHONE_CORDLESS = 520;
          PHONE_ISDN = 532;
          PHONE_MODEM_OR_GATEWAY = 528;
          PHONE_SMART = 524;
          PHONE_UNCATEGORIZED = 512;
          TOY_CONTROLLER = 2064;
          TOY_DOLL_ACTION_FIGURE = 2060;
          TOY_GAME = 2068;
          TOY_ROBOT = 2052;
          TOY_UNCATEGORIZED = 2048;
          TOY_VEHICLE = 2056;
          WEARABLE_GLASSES = 1812;
          WEARABLE_HELMET = 1808;
          WEARABLE_JACKET = 1804;
          WEARABLE_PAGER = 1800;
          WEARABLE_UNCATEGORIZED = 1792;
          WEARABLE_WRIST_WATCH = 1796;
      public
        constructor create(); overload;
      end;

      InnerService = class sealed external 'android.bluetooth' name 'Service' (JLObject)
      public
        const
          AUDIO = 2097152;
          CAPTURE = 524288;
          INFORMATION = 8388608;
          LIMITED_DISCOVERABILITY = 8192;
          NETWORKING = 131072;
          OBJECT_TRANSFER = 1048576;
          POSITIONING = 65536;
          RENDER = 262144;
          TELEPHONY = 4194304;
      public
        constructor create(); overload;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hasService(para1: jint): jboolean; overload; virtual;
    function getMajorDeviceClass(): jint; overload; virtual;
    function getDeviceClass(): jint; overload; virtual;
  end;

  ABBluetoothDevice = class sealed external 'android.bluetooth' name 'BluetoothDevice' (JLObject, AOParcelable)
  public
    const
      ACTION_ACL_CONNECTED = 'android.bluetooth.device.action.ACL_CONNECTED';
      ACTION_ACL_DISCONNECTED = 'android.bluetooth.device.action.ACL_DISCONNECTED';
      ACTION_ACL_DISCONNECT_REQUESTED = 'android.bluetooth.device.action.ACL_DISCONNECT_REQUESTED';
      ACTION_BOND_STATE_CHANGED = 'android.bluetooth.device.action.BOND_STATE_CHANGED';
      ACTION_CLASS_CHANGED = 'android.bluetooth.device.action.CLASS_CHANGED';
      ACTION_FOUND = 'android.bluetooth.device.action.FOUND';
      ACTION_NAME_CHANGED = 'android.bluetooth.device.action.NAME_CHANGED';
      ACTION_PAIRING_REQUEST = 'android.bluetooth.device.action.PAIRING_REQUEST';
      ACTION_UUID = 'android.bluetooth.device.action.UUID';
      BOND_BONDED = 12;
      BOND_BONDING = 11;
      BOND_NONE = 10;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      DEVICE_TYPE_CLASSIC = 1;
      DEVICE_TYPE_DUAL = 3;
      DEVICE_TYPE_LE = 2;
      DEVICE_TYPE_UNKNOWN = 0;
      ERROR = -2147483648;
      EXTRA_BOND_STATE = 'android.bluetooth.device.extra.BOND_STATE';
      EXTRA_CLASS = 'android.bluetooth.device.extra.CLASS';
      EXTRA_DEVICE = 'android.bluetooth.device.extra.DEVICE';
      EXTRA_NAME = 'android.bluetooth.device.extra.NAME';
      EXTRA_PAIRING_KEY = 'android.bluetooth.device.extra.PAIRING_KEY';
      EXTRA_PAIRING_VARIANT = 'android.bluetooth.device.extra.PAIRING_VARIANT';
      EXTRA_PREVIOUS_BOND_STATE = 'android.bluetooth.device.extra.PREVIOUS_BOND_STATE';
      EXTRA_RSSI = 'android.bluetooth.device.extra.RSSI';
      EXTRA_UUID = 'android.bluetooth.device.extra.UUID';
      PAIRING_VARIANT_PASSKEY_CONFIRMATION = 2;
      PAIRING_VARIANT_PIN = 0;
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getAddress(): JLString; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getType(): jint; overload; virtual;
    function createBond(): jboolean; overload; virtual;
    function getBondState(): jint; overload; virtual;
    function getBluetoothClass(): ABBluetoothClass; overload; virtual;
    function getUuids(): Arr1AOParcelUuid; overload; virtual;
    function fetchUuidsWithSdp(): jboolean; overload; virtual;
    function setPin(para1: Arr1jbyte): jboolean; overload; virtual;
    function setPin(var para1: array of jbyte): jboolean; overload; virtual;
    function setPairingConfirmation(para1: jboolean): jboolean; overload; virtual;
    function createRfcommSocketToServiceRecord(para1: JUUUID): ABBluetoothSocket; overload; virtual;  // throws java.io.IOException
    function createInsecureRfcommSocketToServiceRecord(para1: JUUUID): ABBluetoothSocket; overload; virtual;  // throws java.io.IOException
    function connectGatt(para1: ACContext; para2: jboolean; para3: ABBluetoothGattCallback): ABBluetoothGatt; overload; virtual;
  end;

  ABBluetoothHealthAppConfiguration = class sealed external 'android.bluetooth' name 'BluetoothHealthAppConfiguration' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    function getDataType(): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getRole(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACClipData = class external 'android.content' name 'ClipData' (JLObject, AOParcelable)
  public
    type
      InnerItem = class;
      Arr1InnerItem = array of InnerItem;
      Arr2InnerItem = array of Arr1InnerItem;
      Arr3InnerItem = array of Arr2InnerItem;
      InnerItem = class external 'android.content' name 'Item' (JLObject)
      public
        constructor create(para1: JLCharSequence); overload;
        constructor create(para1: JLCharSequence; para2: JLString); overload;
        constructor create(para1: ACIntent); overload;
        constructor create(para1: ANUri); overload;
        constructor create(para1: JLCharSequence; para2: ACIntent; para3: ANUri); overload;
        constructor create(para1: JLCharSequence; para2: JLString; para3: ACIntent; para4: ANUri); overload;
        function getText(): JLCharSequence; overload; virtual;
        function getHtmlText(): JLString; overload; virtual;
        function getIntent(): ACIntent; overload; virtual;
        function getUri(): ANUri; overload; virtual;
        function coerceToText(para1: ACContext): JLCharSequence; overload; virtual;
        function coerceToStyledText(para1: ACContext): JLCharSequence; overload; virtual;
        function coerceToHtmlText(para1: ACContext): JLString; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JLCharSequence; para2: Arr1JLString; para3: ACClipData.InnerItem); overload;
    constructor create(para1: JLCharSequence; const para2: array of JLString; para3: ACClipData.InnerItem); overload;
    constructor create(para1: ACClipDescription; para2: ACClipData.InnerItem); overload;
    constructor create(para1: ACClipData); overload;
    class function newPlainText(para1: JLCharSequence; para2: JLCharSequence): ACClipData; static; overload;
    class function newHtmlText(para1: JLCharSequence; para2: JLCharSequence; para3: JLString): ACClipData; static; overload;
    class function newIntent(para1: JLCharSequence; para2: ACIntent): ACClipData; static; overload;
    class function newUri(para1: ACContentResolver; para2: JLCharSequence; para3: ANUri): ACClipData; static; overload;
    class function newRawUri(para1: JLCharSequence; para2: ANUri): ACClipData; static; overload;
    function getDescription(): ACClipDescription; overload; virtual;
    procedure addItem(para1: ACClipData.InnerItem); overload; virtual;
    function getItemCount(): jint; overload; virtual;
    function getItemAt(para1: jint): ACClipData.InnerItem; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACClipDescription = class external 'android.content' name 'ClipDescription' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      MIMETYPE_TEXT_HTML = 'text/html';
      MIMETYPE_TEXT_INTENT = 'text/vnd.android.intent';
      MIMETYPE_TEXT_PLAIN = 'text/plain';
      MIMETYPE_TEXT_URILIST = 'text/uri-list';
  public
    constructor create(para1: JLCharSequence; para2: Arr1JLString); overload;
    constructor create(para1: JLCharSequence; const para2: array of JLString); overload;
    constructor create(para1: ACClipDescription); overload;
    class function compareMimeTypes(para1: JLString; para2: JLString): jboolean; static; overload;
    function getLabel(): JLCharSequence; overload; virtual;
    function hasMimeType(para1: JLString): jboolean; overload; virtual;
    function filterMimeTypes(para1: JLString): Arr1JLString; overload; virtual;
    function getMimeTypeCount(): jint; overload; virtual;
    function getMimeType(para1: jint): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACComponentName = class sealed external 'android.content' name 'ComponentName' (JLObject, AOParcelable, JLCloneable, JLComparable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: ACContext; para2: JLString); overload;
    constructor create(para1: ACContext; para2: JLClass); overload;
    constructor create(para1: AOParcel); overload;
    function clone(): ACComponentName; overload; virtual;
    function getPackageName(): JLString; overload; virtual;
    function getClassName(): JLString; overload; virtual;
    function getShortClassName(): JLString; overload; virtual;
    function flattenToString(): JLString; overload; virtual;
    function flattenToShortString(): JLString; overload; virtual;
    class function unflattenFromString(para1: JLString): ACComponentName; static; overload;
    function toShortString(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function compareTo(para1: ACComponentName): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    class procedure writeToParcel(para1: ACComponentName; para2: AOParcel); static; overload;
    class function readFromParcel(para1: AOParcel): ACComponentName; static; overload;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  ACContentProviderOperation = class external 'android.content' name 'ContentProviderOperation' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.content' name 'Builder' (JLObject)
      public
        function build(): ACContentProviderOperation; overload; virtual;
        function withValueBackReferences(para1: ACContentValues): ACContentProviderOperation.InnerBuilder; overload; virtual;
        function withValueBackReference(para1: JLString; para2: jint): ACContentProviderOperation.InnerBuilder; overload; virtual;
        function withSelectionBackReference(para1: jint; para2: jint): ACContentProviderOperation.InnerBuilder; overload; virtual;
        function withValues(para1: ACContentValues): ACContentProviderOperation.InnerBuilder; overload; virtual;
        function withValue(para1: JLString; para2: JLObject): ACContentProviderOperation.InnerBuilder; overload; virtual;
        function withSelection(para1: JLString; para2: Arr1JLString): ACContentProviderOperation.InnerBuilder; overload; virtual;
        function withSelection(para1: JLString; var para2: array of JLString): ACContentProviderOperation.InnerBuilder; overload; virtual;
        function withExpectedCount(para1: jint): ACContentProviderOperation.InnerBuilder; overload; virtual;
        function withYieldAllowed(para1: jboolean): ACContentProviderOperation.InnerBuilder; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    class function newInsert(para1: ANUri): ACContentProviderOperation.InnerBuilder; static; overload;
    class function newUpdate(para1: ANUri): ACContentProviderOperation.InnerBuilder; static; overload;
    class function newDelete(para1: ANUri): ACContentProviderOperation.InnerBuilder; static; overload;
    class function newAssertQuery(para1: ANUri): ACContentProviderOperation.InnerBuilder; static; overload;
    function getUri(): ANUri; overload; virtual;
    function isYieldAllowed(): jboolean; overload; virtual;
    function isWriteOperation(): jboolean; overload; virtual;
    function isReadOperation(): jboolean; overload; virtual;
    function apply(para1: ACContentProvider; para2: Arr1ACContentProviderResult; para3: jint): ACContentProviderResult; overload; virtual;  // throws android.content.OperationApplicationException
    function apply(para1: ACContentProvider; var para2: array of ACContentProviderResult; para3: jint): ACContentProviderResult; overload; virtual;  // throws android.content.OperationApplicationException
    function resolveValueBackReferences(para1: Arr1ACContentProviderResult; para2: jint): ACContentValues; overload; virtual;
    function resolveValueBackReferences(var para1: array of ACContentProviderResult; para2: jint): ACContentValues; overload; virtual;
    function resolveSelectionArgsBackReferences(para1: Arr1ACContentProviderResult; para2: jint): Arr1JLString; overload; virtual;
    function resolveSelectionArgsBackReferences(var para1: array of ACContentProviderResult; para2: jint): Arr1JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  ACContentProviderResult = class external 'android.content' name 'ContentProviderResult' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    final var
      fcount: JLInteger; external name 'count';
      furi: ANUri; external name 'uri';
  public
    constructor create(para1: ANUri); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: AOParcel); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ACContentValues = class sealed external 'android.content' name 'ContentValues' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      TAG = 'ContentValues';
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: ACContentValues); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure put(para1: JLString; para2: JLString); overload; virtual;
    procedure putAll(para1: ACContentValues); overload; virtual;
    procedure put(para1: JLString; para2: JLByte); overload; virtual;
    procedure put(para1: JLString; para2: JLShort); overload; virtual;
    procedure put(para1: JLString; para2: JLInteger); overload; virtual;
    procedure put(para1: JLString; para2: JLLong); overload; virtual;
    procedure put(para1: JLString; para2: JLFloat); overload; virtual;
    procedure put(para1: JLString; para2: JLDouble); overload; virtual;
    procedure put(para1: JLString; para2: JLBoolean); overload; virtual;
    procedure put(para1: JLString; para2: Arr1jbyte); overload; virtual;
    procedure put(para1: JLString; var para2: array of jbyte); overload; virtual;
    procedure putNull(para1: JLString); overload; virtual;
    function size(): jint; overload; virtual;
    procedure remove(para1: JLString); overload; virtual;
    procedure clear(); overload; virtual;
    function containsKey(para1: JLString): jboolean; overload; virtual;
    function get(para1: JLString): JLObject; overload; virtual;
    function getAsString(para1: JLString): JLString; overload; virtual;
    function getAsLong(para1: JLString): JLLong; overload; virtual;
    function getAsInteger(para1: JLString): JLInteger; overload; virtual;
    function getAsShort(para1: JLString): JLShort; overload; virtual;
    function getAsByte(para1: JLString): JLByte; overload; virtual;
    function getAsDouble(para1: JLString): JLDouble; overload; virtual;
    function getAsFloat(para1: JLString): JLFloat; overload; virtual;
    function getAsBoolean(para1: JLString): JLBoolean; overload; virtual;
    function getAsByteArray(para1: JLString): Arr1jbyte; overload; virtual;
    function valueSet(): JUSet; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ACIntent = class external 'android.content' name 'Intent' (JLObject, AOParcelable, JLCloneable)
  public
    type
      InnerFilterComparison = class;
      Arr1InnerFilterComparison = array of InnerFilterComparison;
      Arr2InnerFilterComparison = array of Arr1InnerFilterComparison;
      Arr3InnerFilterComparison = array of Arr2InnerFilterComparison;
      InnerShortcutIconResource = class;
      Arr1InnerShortcutIconResource = array of InnerShortcutIconResource;
      Arr2InnerShortcutIconResource = array of Arr1InnerShortcutIconResource;
      Arr3InnerShortcutIconResource = array of Arr2InnerShortcutIconResource;
      InnerFilterComparison = class sealed external 'android.content' name 'FilterComparison' (JLObject)
      public
        constructor create(para1: ACIntent); overload;
        function getIntent(): ACIntent; overload; virtual;
        function equals(para1: JLObject): jboolean; overload; virtual;
        function hashCode(): jint; overload; virtual;
      end;

      InnerShortcutIconResource = class external 'android.content' name 'ShortcutIconResource' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        var
          fpackageName: JLString; external name 'packageName';
          fresourceName: JLString; external name 'resourceName';
      public
        constructor create(); overload;
        class function fromContext(para1: ACContext; para2: jint): ACIntent.InnerShortcutIconResource; static; overload;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  public
    const
      ACTION_AIRPLANE_MODE_CHANGED = 'android.intent.action.AIRPLANE_MODE';
      ACTION_ALL_APPS = 'android.intent.action.ALL_APPS';
      ACTION_ANSWER = 'android.intent.action.ANSWER';
      ACTION_APPLICATION_RESTRICTIONS_CHANGED = 'android.intent.action.APPLICATION_RESTRICTIONS_CHANGED';
      ACTION_APP_ERROR = 'android.intent.action.APP_ERROR';
      ACTION_ASSIST = 'android.intent.action.ASSIST';
      ACTION_ATTACH_DATA = 'android.intent.action.ATTACH_DATA';
      ACTION_BATTERY_CHANGED = 'android.intent.action.BATTERY_CHANGED';
      ACTION_BATTERY_LOW = 'android.intent.action.BATTERY_LOW';
      ACTION_BATTERY_OKAY = 'android.intent.action.BATTERY_OKAY';
      ACTION_BOOT_COMPLETED = 'android.intent.action.BOOT_COMPLETED';
      ACTION_BUG_REPORT = 'android.intent.action.BUG_REPORT';
      ACTION_CALL = 'android.intent.action.CALL';
      ACTION_CALL_BUTTON = 'android.intent.action.CALL_BUTTON';
      ACTION_CAMERA_BUTTON = 'android.intent.action.CAMERA_BUTTON';
      ACTION_CHOOSER = 'android.intent.action.CHOOSER';
      ACTION_CLOSE_SYSTEM_DIALOGS = 'android.intent.action.CLOSE_SYSTEM_DIALOGS';
      ACTION_CONFIGURATION_CHANGED = 'android.intent.action.CONFIGURATION_CHANGED';
      ACTION_CREATE_DOCUMENT = 'android.intent.action.CREATE_DOCUMENT';
      ACTION_CREATE_SHORTCUT = 'android.intent.action.CREATE_SHORTCUT';
      ACTION_DATE_CHANGED = 'android.intent.action.DATE_CHANGED';
      ACTION_DEFAULT = 'android.intent.action.VIEW';
      ACTION_DELETE = 'android.intent.action.DELETE';
      ACTION_DEVICE_STORAGE_LOW = 'android.intent.action.DEVICE_STORAGE_LOW';
      ACTION_DEVICE_STORAGE_OK = 'android.intent.action.DEVICE_STORAGE_OK';
      ACTION_DIAL = 'android.intent.action.DIAL';
      ACTION_DOCK_EVENT = 'android.intent.action.DOCK_EVENT';
      ACTION_DREAMING_STARTED = 'android.intent.action.DREAMING_STARTED';
      ACTION_DREAMING_STOPPED = 'android.intent.action.DREAMING_STOPPED';
      ACTION_EDIT = 'android.intent.action.EDIT';
      ACTION_EXTERNAL_APPLICATIONS_AVAILABLE = 'android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE';
      ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE = 'android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE';
      ACTION_FACTORY_TEST = 'android.intent.action.FACTORY_TEST';
      ACTION_GET_CONTENT = 'android.intent.action.GET_CONTENT';
      ACTION_GET_RESTRICTION_ENTRIES = 'android.intent.action.GET_RESTRICTION_ENTRIES';
      ACTION_GTALK_SERVICE_CONNECTED = 'android.intent.action.GTALK_CONNECTED';
      ACTION_GTALK_SERVICE_DISCONNECTED = 'android.intent.action.GTALK_DISCONNECTED';
      ACTION_HEADSET_PLUG = 'android.intent.action.HEADSET_PLUG';
      ACTION_INPUT_METHOD_CHANGED = 'android.intent.action.INPUT_METHOD_CHANGED';
      ACTION_INSERT = 'android.intent.action.INSERT';
      ACTION_INSERT_OR_EDIT = 'android.intent.action.INSERT_OR_EDIT';
      ACTION_INSTALL_PACKAGE = 'android.intent.action.INSTALL_PACKAGE';
      ACTION_LOCALE_CHANGED = 'android.intent.action.LOCALE_CHANGED';
      ACTION_MAIN = 'android.intent.action.MAIN';
      ACTION_MANAGED_PROFILE_ADDED = 'android.intent.action.MANAGED_PROFILE_ADDED';
      ACTION_MANAGED_PROFILE_REMOVED = 'android.intent.action.MANAGED_PROFILE_REMOVED';
      ACTION_MANAGE_NETWORK_USAGE = 'android.intent.action.MANAGE_NETWORK_USAGE';
      ACTION_MANAGE_PACKAGE_STORAGE = 'android.intent.action.MANAGE_PACKAGE_STORAGE';
      ACTION_MEDIA_BAD_REMOVAL = 'android.intent.action.MEDIA_BAD_REMOVAL';
      ACTION_MEDIA_BUTTON = 'android.intent.action.MEDIA_BUTTON';
      ACTION_MEDIA_CHECKING = 'android.intent.action.MEDIA_CHECKING';
      ACTION_MEDIA_EJECT = 'android.intent.action.MEDIA_EJECT';
      ACTION_MEDIA_MOUNTED = 'android.intent.action.MEDIA_MOUNTED';
      ACTION_MEDIA_NOFS = 'android.intent.action.MEDIA_NOFS';
      ACTION_MEDIA_REMOVED = 'android.intent.action.MEDIA_REMOVED';
      ACTION_MEDIA_SCANNER_FINISHED = 'android.intent.action.MEDIA_SCANNER_FINISHED';
      ACTION_MEDIA_SCANNER_SCAN_FILE = 'android.intent.action.MEDIA_SCANNER_SCAN_FILE';
      ACTION_MEDIA_SCANNER_STARTED = 'android.intent.action.MEDIA_SCANNER_STARTED';
      ACTION_MEDIA_SHARED = 'android.intent.action.MEDIA_SHARED';
      ACTION_MEDIA_UNMOUNTABLE = 'android.intent.action.MEDIA_UNMOUNTABLE';
      ACTION_MEDIA_UNMOUNTED = 'android.intent.action.MEDIA_UNMOUNTED';
      ACTION_MY_PACKAGE_REPLACED = 'android.intent.action.MY_PACKAGE_REPLACED';
      ACTION_NEW_OUTGOING_CALL = 'android.intent.action.NEW_OUTGOING_CALL';
      ACTION_OPEN_DOCUMENT = 'android.intent.action.OPEN_DOCUMENT';
      ACTION_OPEN_DOCUMENT_TREE = 'android.intent.action.OPEN_DOCUMENT_TREE';
      ACTION_PACKAGE_ADDED = 'android.intent.action.PACKAGE_ADDED';
      ACTION_PACKAGE_CHANGED = 'android.intent.action.PACKAGE_CHANGED';
      ACTION_PACKAGE_DATA_CLEARED = 'android.intent.action.PACKAGE_DATA_CLEARED';
      ACTION_PACKAGE_FIRST_LAUNCH = 'android.intent.action.PACKAGE_FIRST_LAUNCH';
      ACTION_PACKAGE_FULLY_REMOVED = 'android.intent.action.PACKAGE_FULLY_REMOVED';
      ACTION_PACKAGE_INSTALL = 'android.intent.action.PACKAGE_INSTALL' deprecated;
      ACTION_PACKAGE_NEEDS_VERIFICATION = 'android.intent.action.PACKAGE_NEEDS_VERIFICATION';
      ACTION_PACKAGE_REMOVED = 'android.intent.action.PACKAGE_REMOVED';
      ACTION_PACKAGE_REPLACED = 'android.intent.action.PACKAGE_REPLACED';
      ACTION_PACKAGE_RESTARTED = 'android.intent.action.PACKAGE_RESTARTED';
      ACTION_PACKAGE_VERIFIED = 'android.intent.action.PACKAGE_VERIFIED';
      ACTION_PASTE = 'android.intent.action.PASTE';
      ACTION_PICK = 'android.intent.action.PICK';
      ACTION_PICK_ACTIVITY = 'android.intent.action.PICK_ACTIVITY';
      ACTION_POWER_CONNECTED = 'android.intent.action.ACTION_POWER_CONNECTED';
      ACTION_POWER_DISCONNECTED = 'android.intent.action.ACTION_POWER_DISCONNECTED';
      ACTION_POWER_USAGE_SUMMARY = 'android.intent.action.POWER_USAGE_SUMMARY';
      ACTION_PROVIDER_CHANGED = 'android.intent.action.PROVIDER_CHANGED';
      ACTION_QUICK_CLOCK = 'android.intent.action.QUICK_CLOCK';
      ACTION_REBOOT = 'android.intent.action.REBOOT';
      ACTION_RUN = 'android.intent.action.RUN';
      ACTION_SCREEN_OFF = 'android.intent.action.SCREEN_OFF';
      ACTION_SCREEN_ON = 'android.intent.action.SCREEN_ON';
      ACTION_SEARCH = 'android.intent.action.SEARCH';
      ACTION_SEARCH_LONG_PRESS = 'android.intent.action.SEARCH_LONG_PRESS';
      ACTION_SEND = 'android.intent.action.SEND';
      ACTION_SENDTO = 'android.intent.action.SENDTO';
      ACTION_SEND_MULTIPLE = 'android.intent.action.SEND_MULTIPLE';
      ACTION_SET_WALLPAPER = 'android.intent.action.SET_WALLPAPER';
      ACTION_SHUTDOWN = 'android.intent.action.ACTION_SHUTDOWN';
      ACTION_SYNC = 'android.intent.action.SYNC';
      ACTION_SYSTEM_TUTORIAL = 'android.intent.action.SYSTEM_TUTORIAL';
      ACTION_TIMEZONE_CHANGED = 'android.intent.action.TIMEZONE_CHANGED';
      ACTION_TIME_CHANGED = 'android.intent.action.TIME_SET';
      ACTION_TIME_TICK = 'android.intent.action.TIME_TICK';
      ACTION_UID_REMOVED = 'android.intent.action.UID_REMOVED';
      ACTION_UMS_CONNECTED = 'android.intent.action.UMS_CONNECTED' deprecated;
      ACTION_UMS_DISCONNECTED = 'android.intent.action.UMS_DISCONNECTED' deprecated;
      ACTION_UNINSTALL_PACKAGE = 'android.intent.action.UNINSTALL_PACKAGE';
      ACTION_USER_BACKGROUND = 'android.intent.action.USER_BACKGROUND';
      ACTION_USER_FOREGROUND = 'android.intent.action.USER_FOREGROUND';
      ACTION_USER_INITIALIZE = 'android.intent.action.USER_INITIALIZE';
      ACTION_USER_PRESENT = 'android.intent.action.USER_PRESENT';
      ACTION_VIEW = 'android.intent.action.VIEW';
      ACTION_VOICE_COMMAND = 'android.intent.action.VOICE_COMMAND';
      ACTION_WALLPAPER_CHANGED = 'android.intent.action.WALLPAPER_CHANGED' deprecated;
      ACTION_WEB_SEARCH = 'android.intent.action.WEB_SEARCH';
      CATEGORY_ALTERNATIVE = 'android.intent.category.ALTERNATIVE';
      CATEGORY_APP_BROWSER = 'android.intent.category.APP_BROWSER';
      CATEGORY_APP_CALCULATOR = 'android.intent.category.APP_CALCULATOR';
      CATEGORY_APP_CALENDAR = 'android.intent.category.APP_CALENDAR';
      CATEGORY_APP_CONTACTS = 'android.intent.category.APP_CONTACTS';
      CATEGORY_APP_EMAIL = 'android.intent.category.APP_EMAIL';
      CATEGORY_APP_GALLERY = 'android.intent.category.APP_GALLERY';
      CATEGORY_APP_MAPS = 'android.intent.category.APP_MAPS';
      CATEGORY_APP_MARKET = 'android.intent.category.APP_MARKET';
      CATEGORY_APP_MESSAGING = 'android.intent.category.APP_MESSAGING';
      CATEGORY_APP_MUSIC = 'android.intent.category.APP_MUSIC';
      CATEGORY_BROWSABLE = 'android.intent.category.BROWSABLE';
      CATEGORY_CAR_DOCK = 'android.intent.category.CAR_DOCK';
      CATEGORY_CAR_MODE = 'android.intent.category.CAR_MODE';
      CATEGORY_DEFAULT = 'android.intent.category.DEFAULT';
      CATEGORY_DESK_DOCK = 'android.intent.category.DESK_DOCK';
      CATEGORY_DEVELOPMENT_PREFERENCE = 'android.intent.category.DEVELOPMENT_PREFERENCE';
      CATEGORY_EMBED = 'android.intent.category.EMBED';
      CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST = 'android.intent.category.FRAMEWORK_INSTRUMENTATION_TEST';
      CATEGORY_HE_DESK_DOCK = 'android.intent.category.HE_DESK_DOCK';
      CATEGORY_HOME = 'android.intent.category.HOME';
      CATEGORY_INFO = 'android.intent.category.INFO';
      CATEGORY_LAUNCHER = 'android.intent.category.LAUNCHER';
      CATEGORY_LEANBACK_LAUNCHER = 'android.intent.category.LEANBACK_LAUNCHER';
      CATEGORY_LE_DESK_DOCK = 'android.intent.category.LE_DESK_DOCK';
      CATEGORY_MONKEY = 'android.intent.category.MONKEY';
      CATEGORY_OPENABLE = 'android.intent.category.OPENABLE';
      CATEGORY_PREFERENCE = 'android.intent.category.PREFERENCE';
      CATEGORY_SAMPLE_CODE = 'android.intent.category.SAMPLE_CODE';
      CATEGORY_SELECTED_ALTERNATIVE = 'android.intent.category.SELECTED_ALTERNATIVE';
      CATEGORY_TAB = 'android.intent.category.TAB';
      CATEGORY_TEST = 'android.intent.category.TEST';
      CATEGORY_UNIT_TEST = 'android.intent.category.UNIT_TEST';
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      EXTRA_ALARM_COUNT = 'android.intent.extra.ALARM_COUNT';
      EXTRA_ALLOW_MULTIPLE = 'android.intent.extra.ALLOW_MULTIPLE';
      EXTRA_ALLOW_REPLACE = 'android.intent.extra.ALLOW_REPLACE' deprecated;
      EXTRA_ASSIST_CONTEXT = 'android.intent.extra.ASSIST_CONTEXT';
      EXTRA_ASSIST_INPUT_HINT_KEYBOARD = 'android.intent.extra.ASSIST_INPUT_HINT_KEYBOARD';
      EXTRA_ASSIST_PACKAGE = 'android.intent.extra.ASSIST_PACKAGE';
      EXTRA_BCC = 'android.intent.extra.BCC';
      EXTRA_BUG_REPORT = 'android.intent.extra.BUG_REPORT';
      EXTRA_CC = 'android.intent.extra.CC';
      EXTRA_CHANGED_COMPONENT_NAME = 'android.intent.extra.changed_component_name' deprecated;
      EXTRA_CHANGED_COMPONENT_NAME_LIST = 'android.intent.extra.changed_component_name_list';
      EXTRA_CHANGED_PACKAGE_LIST = 'android.intent.extra.changed_package_list';
      EXTRA_CHANGED_UID_LIST = 'android.intent.extra.changed_uid_list';
      EXTRA_DATA_REMOVED = 'android.intent.extra.DATA_REMOVED';
      EXTRA_DOCK_STATE = 'android.intent.extra.DOCK_STATE';
      EXTRA_DOCK_STATE_CAR = 2;
      EXTRA_DOCK_STATE_DESK = 1;
      EXTRA_DOCK_STATE_HE_DESK = 4;
      EXTRA_DOCK_STATE_LE_DESK = 3;
      EXTRA_DOCK_STATE_UNDOCKED = 0;
      EXTRA_DONT_KILL_APP = 'android.intent.extra.DONT_KILL_APP';
      EXTRA_EMAIL = 'android.intent.extra.EMAIL';
      EXTRA_HTML_TEXT = 'android.intent.extra.HTML_TEXT';
      EXTRA_INITIAL_INTENTS = 'android.intent.extra.INITIAL_INTENTS';
      EXTRA_INSTALLER_PACKAGE_NAME = 'android.intent.extra.INSTALLER_PACKAGE_NAME';
      EXTRA_INTENT = 'android.intent.extra.INTENT';
      EXTRA_KEY_EVENT = 'android.intent.extra.KEY_EVENT';
      EXTRA_LOCAL_ONLY = 'android.intent.extra.LOCAL_ONLY';
      EXTRA_MIME_TYPES = 'android.intent.extra.MIME_TYPES';
      EXTRA_NOT_UNKNOWN_SOURCE = 'android.intent.extra.NOT_UNKNOWN_SOURCE';
      EXTRA_ORIGINATING_URI = 'android.intent.extra.ORIGINATING_URI';
      EXTRA_PHONE_NUMBER = 'android.intent.extra.PHONE_NUMBER';
      EXTRA_REFERRER = 'android.intent.extra.REFERRER';
      EXTRA_REMOTE_INTENT_TOKEN = 'android.intent.extra.remote_intent_token';
      EXTRA_REPLACEMENT_EXTRAS = 'android.intent.extra.REPLACEMENT_EXTRAS';
      EXTRA_REPLACING = 'android.intent.extra.REPLACING';
      EXTRA_RESTRICTIONS_BUNDLE = 'android.intent.extra.restrictions_bundle';
      EXTRA_RESTRICTIONS_INTENT = 'android.intent.extra.restrictions_intent';
      EXTRA_RESTRICTIONS_LIST = 'android.intent.extra.restrictions_list';
      EXTRA_RETURN_RESULT = 'android.intent.extra.RETURN_RESULT';
      EXTRA_SHORTCUT_ICON = 'android.intent.extra.shortcut.ICON';
      EXTRA_SHORTCUT_ICON_RESOURCE = 'android.intent.extra.shortcut.ICON_RESOURCE';
      EXTRA_SHORTCUT_INTENT = 'android.intent.extra.shortcut.INTENT';
      EXTRA_SHORTCUT_NAME = 'android.intent.extra.shortcut.NAME';
      EXTRA_SHUTDOWN_USERSPACE_ONLY = 'android.intent.extra.SHUTDOWN_USERSPACE_ONLY';
      EXTRA_STREAM = 'android.intent.extra.STREAM';
      EXTRA_SUBJECT = 'android.intent.extra.SUBJECT';
      EXTRA_TEMPLATE = 'android.intent.extra.TEMPLATE';
      EXTRA_TEXT = 'android.intent.extra.TEXT';
      EXTRA_TITLE = 'android.intent.extra.TITLE';
      EXTRA_UID = 'android.intent.extra.UID';
      EXTRA_USER = 'android.intent.extra.USER';
      FILL_IN_ACTION = 1;
      FILL_IN_CATEGORIES = 4;
      FILL_IN_CLIP_DATA = 128;
      FILL_IN_COMPONENT = 8;
      FILL_IN_DATA = 2;
      FILL_IN_PACKAGE = 16;
      FILL_IN_SELECTOR = 64;
      FILL_IN_SOURCE_BOUNDS = 32;
      FLAG_ACTIVITY_BROUGHT_TO_FRONT = 4194304;
      FLAG_ACTIVITY_CLEAR_TASK = 32768;
      FLAG_ACTIVITY_CLEAR_TOP = 67108864;
      FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 524288 deprecated;
      FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 8388608;
      FLAG_ACTIVITY_FORWARD_RESULT = 33554432;
      FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 1048576;
      FLAG_ACTIVITY_MULTIPLE_TASK = 134217728;
      FLAG_ACTIVITY_NEW_DOCUMENT = 524288;
      FLAG_ACTIVITY_NEW_TASK = 268435456;
      FLAG_ACTIVITY_NO_ANIMATION = 65536;
      FLAG_ACTIVITY_NO_HISTORY = 1073741824;
      FLAG_ACTIVITY_NO_USER_ACTION = 262144;
      FLAG_ACTIVITY_PREVIOUS_IS_TOP = 16777216;
      FLAG_ACTIVITY_REORDER_TO_FRONT = 131072;
      FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 2097152;
      FLAG_ACTIVITY_RETAIN_IN_RECENTS = 8192;
      FLAG_ACTIVITY_SINGLE_TOP = 536870912;
      FLAG_ACTIVITY_TASK_ON_HOME = 16384;
      FLAG_DEBUG_LOG_RESOLUTION = 8;
      FLAG_EXCLUDE_STOPPED_PACKAGES = 16;
      FLAG_FROM_BACKGROUND = 4;
      FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 64;
      FLAG_GRANT_PREFIX_URI_PERMISSION = 128;
      FLAG_GRANT_READ_URI_PERMISSION = 1;
      FLAG_GRANT_WRITE_URI_PERMISSION = 2;
      FLAG_INCLUDE_STOPPED_PACKAGES = 32;
      FLAG_RECEIVER_FOREGROUND = 268435456;
      FLAG_RECEIVER_NO_ABORT = 134217728;
      FLAG_RECEIVER_REGISTERED_ONLY = 1073741824;
      FLAG_RECEIVER_REPLACE_PENDING = 536870912;
      METADATA_DOCK_HOME = 'android.dock_home';
      URI_INTENT_SCHEME = 1;
  public
    constructor create(); overload;
    constructor create(para1: ACIntent); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: ANUri); overload;
    constructor create(para1: ACContext; para2: JLClass); overload;
    constructor create(para1: JLString; para2: ANUri; para3: ACContext; para4: JLClass); overload;
    class function createChooser(para1: ACIntent; para2: JLCharSequence): ACIntent; static; overload;
    function clone(): JLObject; overload; virtual;
    function cloneFilter(): ACIntent; overload; virtual;
    class function makeMainActivity(para1: ACComponentName): ACIntent; static; overload;
    class function makeMainSelectorActivity(para1: JLString; para2: JLString): ACIntent; static; overload;
    class function makeRestartActivityTask(para1: ACComponentName): ACIntent; static; overload;
    class function getIntent(para1: JLString): ACIntent; static; overload;  // throws java.net.URISyntaxException
    class function parseUri(para1: JLString; para2: jint): ACIntent; static; overload;  // throws java.net.URISyntaxException
    class function getIntentOld(para1: JLString): ACIntent; static; overload;  // throws java.net.URISyntaxException
    function getAction(): JLString; overload; virtual;
    function getData(): ANUri; overload; virtual;
    function getDataString(): JLString; overload; virtual;
    function getScheme(): JLString; overload; virtual;
    function getType(): JLString; overload; virtual;
    function resolveType(para1: ACContext): JLString; overload; virtual;
    function resolveType(para1: ACContentResolver): JLString; overload; virtual;
    function resolveTypeIfNeeded(para1: ACContentResolver): JLString; overload; virtual;
    function hasCategory(para1: JLString): jboolean; overload; virtual;
    function getCategories(): JUSet; overload; virtual;
    function getSelector(): ACIntent; overload; virtual;
    function getClipData(): ACClipData; overload; virtual;
    procedure setExtrasClassLoader(para1: JLClassLoader); overload; virtual;
    function hasExtra(para1: JLString): jboolean; overload; virtual;
    function hasFileDescriptors(): jboolean; overload; virtual;
    function getBooleanExtra(para1: JLString; para2: jboolean): jboolean; overload; virtual;
    function getByteExtra(para1: JLString; para2: jbyte): jbyte; overload; virtual;
    function getShortExtra(para1: JLString; para2: jshort): jshort; overload; virtual;
    function getCharExtra(para1: JLString; para2: jchar): jchar; overload; virtual;
    function getIntExtra(para1: JLString; para2: jint): jint; overload; virtual;
    function getLongExtra(para1: JLString; para2: jlong): jlong; overload; virtual;
    function getFloatExtra(para1: JLString; para2: jfloat): jfloat; overload; virtual;
    function getDoubleExtra(para1: JLString; para2: jdouble): jdouble; overload; virtual;
    function getStringExtra(para1: JLString): JLString; overload; virtual;
    function getCharSequenceExtra(para1: JLString): JLCharSequence; overload; virtual;
    function getParcelableExtra(para1: JLString): AOParcelable; overload; virtual;
    function getParcelableArrayExtra(para1: JLString): Arr1AOParcelable; overload; virtual;
    function getParcelableArrayListExtra(para1: JLString): JUArrayList; overload; virtual;
    function getSerializableExtra(para1: JLString): JISerializable; overload; virtual;
    function getIntegerArrayListExtra(para1: JLString): JUArrayList; overload; virtual;
    function getStringArrayListExtra(para1: JLString): JUArrayList; overload; virtual;
    function getCharSequenceArrayListExtra(para1: JLString): JUArrayList; overload; virtual;
    function getBooleanArrayExtra(para1: JLString): Arr1jboolean; overload; virtual;
    function getByteArrayExtra(para1: JLString): Arr1jbyte; overload; virtual;
    function getShortArrayExtra(para1: JLString): Arr1jshort; overload; virtual;
    function getCharArrayExtra(para1: JLString): Arr1jchar; overload; virtual;
    function getIntArrayExtra(para1: JLString): Arr1jint; overload; virtual;
    function getLongArrayExtra(para1: JLString): Arr1jlong; overload; virtual;
    function getFloatArrayExtra(para1: JLString): Arr1jfloat; overload; virtual;
    function getDoubleArrayExtra(para1: JLString): Arr1jdouble; overload; virtual;
    function getStringArrayExtra(para1: JLString): Arr1JLString; overload; virtual;
    function getCharSequenceArrayExtra(para1: JLString): Arr1JLCharSequence; overload; virtual;
    function getBundleExtra(para1: JLString): AOBundle; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function getFlags(): jint; overload; virtual;
    function getPackage(): JLString; overload; virtual;
    function getComponent(): ACComponentName; overload; virtual;
    function getSourceBounds(): AGRect; overload; virtual;
    function resolveActivity(para1: ACPPackageManager): ACComponentName; overload; virtual;
    function resolveActivityInfo(para1: ACPPackageManager; para2: jint): ACPActivityInfo; overload; virtual;
    function setAction(para1: JLString): ACIntent; overload; virtual;
    function setData(para1: ANUri): ACIntent; overload; virtual;
    function setDataAndNormalize(para1: ANUri): ACIntent; overload; virtual;
    function setType(para1: JLString): ACIntent; overload; virtual;
    function setTypeAndNormalize(para1: JLString): ACIntent; overload; virtual;
    function setDataAndType(para1: ANUri; para2: JLString): ACIntent; overload; virtual;
    function setDataAndTypeAndNormalize(para1: ANUri; para2: JLString): ACIntent; overload; virtual;
    function addCategory(para1: JLString): ACIntent; overload; virtual;
    procedure removeCategory(para1: JLString); overload; virtual;
    procedure setSelector(para1: ACIntent); overload; virtual;
    procedure setClipData(para1: ACClipData); overload; virtual;
    function putExtra(para1: JLString; para2: jboolean): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: jbyte): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: jchar): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: jshort): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: jint): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: jlong): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: jfloat): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: jdouble): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: JLString): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: JLCharSequence): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: AOParcelable): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1AOParcelable): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of AOParcelable): ACIntent; overload; virtual;
    function putParcelableArrayListExtra(para1: JLString; para2: JUArrayList): ACIntent; overload; virtual;
    function putIntegerArrayListExtra(para1: JLString; para2: JUArrayList): ACIntent; overload; virtual;
    function putStringArrayListExtra(para1: JLString; para2: JUArrayList): ACIntent; overload; virtual;
    function putCharSequenceArrayListExtra(para1: JLString; para2: JUArrayList): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: JISerializable): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1jboolean): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of jboolean): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1jbyte): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of jbyte): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1jshort): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of jshort): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1jchar): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of jchar): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1jint): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of jint): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1jlong): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of jlong): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1jfloat): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of jfloat): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1jdouble): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of jdouble): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1JLString): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of JLString): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: Arr1JLCharSequence): ACIntent; overload; virtual;
    function putExtra(para1: JLString; var para2: array of JLCharSequence): ACIntent; overload; virtual;
    function putExtra(para1: JLString; para2: AOBundle): ACIntent; overload; virtual;
    function putExtras(para1: ACIntent): ACIntent; overload; virtual;
    function putExtras(para1: AOBundle): ACIntent; overload; virtual;
    function replaceExtras(para1: ACIntent): ACIntent; overload; virtual;
    function replaceExtras(para1: AOBundle): ACIntent; overload; virtual;
    procedure removeExtra(para1: JLString); overload; virtual;
    function setFlags(para1: jint): ACIntent; overload; virtual;
    function addFlags(para1: jint): ACIntent; overload; virtual;
    function setPackage(para1: JLString): ACIntent; overload; virtual;
    function setComponent(para1: ACComponentName): ACIntent; overload; virtual;
    function setClassName(para1: ACContext; para2: JLString): ACIntent; overload; virtual;
    function setClassName(para1: JLString; para2: JLString): ACIntent; overload; virtual;
    function setClass(para1: ACContext; para2: JLClass): ACIntent; overload; virtual;
    procedure setSourceBounds(para1: AGRect); overload; virtual;
    function fillIn(para1: ACIntent; para2: jint): jint; overload; virtual;
    function filterEquals(para1: ACIntent): jboolean; overload; virtual;
    function filterHashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toURI(): JLString; overload; virtual;
    function toUri_(para1: jint): JLString; external name 'toUri'; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
    class function parseIntent(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet): ACIntent; static; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    class function normalizeMimeType(para1: JLString): JLString; static; overload;
  end;

  ACPeriodicSync = class external 'android.content' name 'PeriodicSync' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    final var
      faccount: AAAccount; external name 'account';
      fauthority: JLString; external name 'authority';
      fextras: AOBundle; external name 'extras';
      fperiod: jlong; external name 'period';
  public
    constructor create(para1: AAAccount; para2: JLString; para3: AOBundle; para4: jlong); overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ACSyncAdapterType = class external 'android.content' name 'SyncAdapterType' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    final var
      faccountType: JLString; external name 'accountType';
      fauthority: JLString; external name 'authority';
      fisKey: jboolean; external name 'isKey';
  public
    constructor create(para1: JLString; para2: JLString; para3: jboolean; para4: jboolean); overload;
    constructor create(para1: AOParcel); overload;
    function supportsUploading(): jboolean; overload; virtual;
    function isUserVisible(): jboolean; overload; virtual;
    function allowParallelSyncs(): jboolean; overload; virtual;
    function isAlwaysSyncable(): jboolean; overload; virtual;
    function getSettingsActivity(): JLString; overload; virtual;
    class function newKey(para1: JLString; para2: JLString): ACSyncAdapterType; static; overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACSyncInfo = class external 'android.content' name 'SyncInfo' (JLObject, AOParcelable)
  public
    final var
      faccount: AAAccount; external name 'account';
      fauthority: JLString; external name 'authority';
      fstartTime: jlong; external name 'startTime';
  public
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACSyncResult = class sealed external 'android.content' name 'SyncResult' (JLObject, AOParcelable)
  public
    final class var
      fALREADY_IN_PROGRESS: ACSyncResult; external name 'ALREADY_IN_PROGRESS';
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fdatabaseError: jboolean; external name 'databaseError';
      fdelayUntil: jlong; external name 'delayUntil';
      ffullSyncRequested: jboolean; external name 'fullSyncRequested';
      fmoreRecordsToGet: jboolean; external name 'moreRecordsToGet';
      fpartialSyncUnavailable: jboolean; external name 'partialSyncUnavailable';
  public
    final var
      fstats: ACSyncStats; external name 'stats';
      fsyncAlreadyInProgress: jboolean; external name 'syncAlreadyInProgress';
  public
    var
      ftooManyDeletions: jboolean; external name 'tooManyDeletions';
      ftooManyRetries: jboolean; external name 'tooManyRetries';
  public
    constructor create(); overload;
    function hasHardError(): jboolean; overload; virtual;
    function hasSoftError(): jboolean; overload; virtual;
    function hasError(): jboolean; overload; virtual;
    function madeSomeProgress(): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
    function toDebugString(): JLString; overload; virtual;
  end;

  ACSyncStats = class external 'android.content' name 'SyncStats' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fnumAuthExceptions: jlong; external name 'numAuthExceptions';
      fnumConflictDetectedExceptions: jlong; external name 'numConflictDetectedExceptions';
      fnumDeletes: jlong; external name 'numDeletes';
      fnumEntries: jlong; external name 'numEntries';
      fnumInserts: jlong; external name 'numInserts';
      fnumIoExceptions: jlong; external name 'numIoExceptions';
      fnumParseExceptions: jlong; external name 'numParseExceptions';
      fnumSkippedEntries: jlong; external name 'numSkippedEntries';
      fnumUpdates: jlong; external name 'numUpdates';
  public
    constructor create(); overload;
    constructor create(para1: AOParcel); overload;
    function toString(): JLString; overload; virtual;
    procedure clear(); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACPConfigurationInfo = class external 'android.content.pm' name 'ConfigurationInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      GL_ES_VERSION_UNDEFINED = 0;
      INPUT_FEATURE_FIVE_WAY_NAV = 2;
      INPUT_FEATURE_HARD_KEYBOARD = 1;
  public
    var
      freqGlEsVersion: jint; external name 'reqGlEsVersion';
      freqInputFeatures: jint; external name 'reqInputFeatures';
      freqKeyboardType: jint; external name 'reqKeyboardType';
      freqNavigation: jint; external name 'reqNavigation';
      freqTouchScreen: jint; external name 'reqTouchScreen';
  public
    constructor create(); overload;
    constructor create(para1: ACPConfigurationInfo); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getGlEsVersion(): JLString; overload; virtual;
  end;

  ACPFeatureInfo = class external 'android.content.pm' name 'FeatureInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_REQUIRED = 1;
      GL_ES_VERSION_UNDEFINED = 0;
  public
    var
      fflags: jint; external name 'flags';
      fname: JLString; external name 'name';
      freqGlEsVersion: jint; external name 'reqGlEsVersion';
  public
    constructor create(); overload;
    constructor create(para1: ACPFeatureInfo); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getGlEsVersion(): JLString; overload; virtual;
  end;

  ACPPackageInfo = class external 'android.content.pm' name 'PackageInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      INSTALL_LOCATION_AUTO = 0;
      INSTALL_LOCATION_INTERNAL_ONLY = 1;
      INSTALL_LOCATION_PREFER_EXTERNAL = 2;
      REQUESTED_PERMISSION_GRANTED = 2;
      REQUESTED_PERMISSION_REQUIRED = 1;
  public
    var
      factivities: Arr1ACPActivityInfo; external name 'activities';
      fapplicationInfo: ACPApplicationInfo; external name 'applicationInfo';
      fconfigPreferences: Arr1ACPConfigurationInfo; external name 'configPreferences';
      ffeatureGroups: Arr1ACPFeatureGroupInfo; external name 'featureGroups';
      ffirstInstallTime: jlong; external name 'firstInstallTime';
      fgids: Arr1jint; external name 'gids';
      finstallLocation: jint; external name 'installLocation';
      finstrumentation: Arr1ACPInstrumentationInfo; external name 'instrumentation';
      flastUpdateTime: jlong; external name 'lastUpdateTime';
      fpackageName: JLString; external name 'packageName';
      fpermissions: Arr1ACPPermissionInfo; external name 'permissions';
      fproviders: Arr1ACPProviderInfo; external name 'providers';
      freceivers: Arr1ACPActivityInfo; external name 'receivers';
      freqFeatures: Arr1ACPFeatureInfo; external name 'reqFeatures';
      frequestedPermissions: Arr1JLString; external name 'requestedPermissions';
      frequestedPermissionsFlags: Arr1jint; external name 'requestedPermissionsFlags';
      fservices: Arr1ACPServiceInfo; external name 'services';
      fsharedUserId: JLString; external name 'sharedUserId';
      fsharedUserLabel: jint; external name 'sharedUserLabel';
      fsignatures: Arr1ACPSignature; external name 'signatures';
      fsplitNames: Arr1JLString; external name 'splitNames';
      fversionCode: jint; external name 'versionCode';
      fversionName: JLString; external name 'versionName';
  public
    constructor create(); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACPPackageStats = class external 'android.content.pm' name 'PackageStats' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fcacheSize: jlong; external name 'cacheSize';
      fcodeSize: jlong; external name 'codeSize';
      fdataSize: jlong; external name 'dataSize';
      fexternalCacheSize: jlong; external name 'externalCacheSize';
      fexternalCodeSize: jlong; external name 'externalCodeSize';
      fexternalDataSize: jlong; external name 'externalDataSize';
      fexternalMediaSize: jlong; external name 'externalMediaSize';
      fexternalObbSize: jlong; external name 'externalObbSize';
      fpackageName: JLString; external name 'packageName';
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: AOParcel); overload;
    constructor create(para1: ACPPackageStats); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACPResolveInfo = class external 'android.content.pm' name 'ResolveInfo' (JLObject, AOParcelable)
  public
    type
      InnerDisplayNameComparator = class;
      Arr1InnerDisplayNameComparator = array of InnerDisplayNameComparator;
      Arr2InnerDisplayNameComparator = array of Arr1InnerDisplayNameComparator;
      Arr3InnerDisplayNameComparator = array of Arr2InnerDisplayNameComparator;
      InnerDisplayNameComparator = class external 'android.content.pm' name 'DisplayNameComparator' (JLObject, JUComparator)
      public
        constructor create(para1: ACPPackageManager); overload;
        function compare(para1: ACPResolveInfo; para2: ACPResolveInfo): jint; overload; virtual; final;
        function compare(para1: JLObject; para2: JLObject): jint; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      factivityInfo: ACPActivityInfo; external name 'activityInfo';
      ffilter: ACIntentFilter; external name 'filter';
      ficon: jint; external name 'icon';
      fisDefault: jboolean; external name 'isDefault';
      flabelRes: jint; external name 'labelRes';
      fmatch: jint; external name 'match';
      fnonLocalizedLabel: JLCharSequence; external name 'nonLocalizedLabel';
      fpreferredOrder: jint; external name 'preferredOrder';
      fpriority: jint; external name 'priority';
      fproviderInfo: ACPProviderInfo; external name 'providerInfo';
      fresolvePackageName: JLString; external name 'resolvePackageName';
      fserviceInfo: ACPServiceInfo; external name 'serviceInfo';
      fspecificIndex: jint; external name 'specificIndex';
  public
    constructor create(); overload;
    constructor create(para1: ACPResolveInfo); overload;
    function loadLabel(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function loadIcon(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function getIconResource(): jint; overload; virtual; final;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACPSignature = class external 'android.content.pm' name 'Signature' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    constructor create(para1: JLString); overload;
    function toChars(): Arr1jchar; overload; virtual;
    function toChars(para1: Arr1jchar; para2: Arr1jint): Arr1jchar; overload; virtual;
    function toChars(var para1: array of jchar; var para2: array of jint): Arr1jchar; overload; virtual;
    function toCharsString(): JLString; overload; virtual;
    function toByteArray(): Arr1jbyte; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACRColorStateList = class external 'android.content.res' name 'ColorStateList' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: Arr2jint; para2: Arr1jint); overload;
    constructor create(para1: Arr2jint; const para2: array of jint); overload;
    class function valueOf(para1: jint): ACRColorStateList; static; overload;
    class function createFromXml(para1: ACRResources; para2: OXVXmlPullParser): ACRColorStateList; static; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function withAlpha(para1: jint): ACRColorStateList; overload; virtual;
    function isStateful(): jboolean; overload; virtual;
    function isOpaque(): jboolean; overload; virtual;
    function getColorForState(para1: Arr1jint; para2: jint): jint; overload; virtual;
    function getColorForState(var para1: array of jint; para2: jint): jint; overload; virtual;
    function getDefaultColor(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACRConfiguration = class sealed external 'android.content.res' name 'Configuration' (JLObject, AOParcelable, JLComparable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      DENSITY_DPI_UNDEFINED = 0;
      HARDKEYBOARDHIDDEN_NO = 1;
      HARDKEYBOARDHIDDEN_UNDEFINED = 0;
      HARDKEYBOARDHIDDEN_YES = 2;
      KEYBOARDHIDDEN_NO = 1;
      KEYBOARDHIDDEN_UNDEFINED = 0;
      KEYBOARDHIDDEN_YES = 2;
      KEYBOARD_12KEY = 3;
      KEYBOARD_NOKEYS = 1;
      KEYBOARD_QWERTY = 2;
      KEYBOARD_UNDEFINED = 0;
      MNC_ZERO = 65535;
      NAVIGATIONHIDDEN_NO = 1;
      NAVIGATIONHIDDEN_UNDEFINED = 0;
      NAVIGATIONHIDDEN_YES = 2;
      NAVIGATION_DPAD = 2;
      NAVIGATION_NONAV = 1;
      NAVIGATION_TRACKBALL = 3;
      NAVIGATION_UNDEFINED = 0;
      NAVIGATION_WHEEL = 4;
      ORIENTATION_LANDSCAPE = 2;
      ORIENTATION_PORTRAIT = 1;
      ORIENTATION_SQUARE = 3 deprecated;
      ORIENTATION_UNDEFINED = 0;
      SCREENLAYOUT_LAYOUTDIR_LTR = 64;
      SCREENLAYOUT_LAYOUTDIR_MASK = 192;
      SCREENLAYOUT_LAYOUTDIR_RTL = 128;
      SCREENLAYOUT_LAYOUTDIR_SHIFT = 6;
      SCREENLAYOUT_LAYOUTDIR_UNDEFINED = 0;
      SCREENLAYOUT_LONG_MASK = 48;
      SCREENLAYOUT_LONG_NO = 16;
      SCREENLAYOUT_LONG_UNDEFINED = 0;
      SCREENLAYOUT_LONG_YES = 32;
      SCREENLAYOUT_SIZE_LARGE = 3;
      SCREENLAYOUT_SIZE_MASK = 15;
      SCREENLAYOUT_SIZE_NORMAL = 2;
      SCREENLAYOUT_SIZE_SMALL = 1;
      SCREENLAYOUT_SIZE_UNDEFINED = 0;
      SCREENLAYOUT_SIZE_XLARGE = 4;
      SCREENLAYOUT_UNDEFINED = 0;
      SCREEN_HEIGHT_DP_UNDEFINED = 0;
      SCREEN_WIDTH_DP_UNDEFINED = 0;
      SMALLEST_SCREEN_WIDTH_DP_UNDEFINED = 0;
      TOUCHSCREEN_FINGER = 3;
      TOUCHSCREEN_NOTOUCH = 1;
      TOUCHSCREEN_STYLUS = 2 deprecated;
      TOUCHSCREEN_UNDEFINED = 0;
      UI_MODE_NIGHT_MASK = 48;
      UI_MODE_NIGHT_NO = 16;
      UI_MODE_NIGHT_UNDEFINED = 0;
      UI_MODE_NIGHT_YES = 32;
      UI_MODE_TYPE_APPLIANCE = 5;
      UI_MODE_TYPE_CAR = 3;
      UI_MODE_TYPE_DESK = 2;
      UI_MODE_TYPE_MASK = 15;
      UI_MODE_TYPE_NORMAL = 1;
      UI_MODE_TYPE_TELEVISION = 4;
      UI_MODE_TYPE_UNDEFINED = 0;
      UI_MODE_TYPE_WATCH = 6;
  public
    var
      fdensityDpi: jint; external name 'densityDpi';
      ffontScale: jfloat; external name 'fontScale';
      fhardKeyboardHidden: jint; external name 'hardKeyboardHidden';
      fkeyboard: jint; external name 'keyboard';
      fkeyboardHidden: jint; external name 'keyboardHidden';
      flocale: JULocale; external name 'locale';
      fmcc: jint; external name 'mcc';
      fmnc: jint; external name 'mnc';
      fnavigation: jint; external name 'navigation';
      fnavigationHidden: jint; external name 'navigationHidden';
      forientation: jint; external name 'orientation';
      fscreenHeightDp: jint; external name 'screenHeightDp';
      fscreenLayout: jint; external name 'screenLayout';
      fscreenWidthDp: jint; external name 'screenWidthDp';
      fsmallestScreenWidthDp: jint; external name 'smallestScreenWidthDp';
      ftouchscreen: jint; external name 'touchscreen';
      fuiMode: jint; external name 'uiMode';
  public
    constructor create(); overload;
    constructor create(para1: ACRConfiguration); overload;
    function isLayoutSizeAtLeast(para1: jint): jboolean; overload; virtual;
    procedure setTo(para1: ACRConfiguration); overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure setToDefaults(); overload; virtual;
    function updateFrom(para1: ACRConfiguration): jint; overload; virtual;
    function diff(para1: ACRConfiguration): jint; overload; virtual;
    class function needNewResources(para1: jint; para2: jint): jboolean; static; overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
    function compareTo(para1: ACRConfiguration): jint; overload; virtual;
    function equals(para1: ACRConfiguration): jboolean; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure setLocale(para1: JULocale); overload; virtual;
    function getLayoutDirection(): jint; overload; virtual;
    procedure setLayoutDirection(para1: JULocale); overload; virtual;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  ACRObbInfo = class external 'android.content.res' name 'ObbInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      OBB_OVERLAY = 1;
  public
    var
      ffilename: JLString; external name 'filename';
      fflags: jint; external name 'flags';
      fpackageName: JLString; external name 'packageName';
      fversion: jint; external name 'version';
  public
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ADCursorWindow = class external 'android.database' name 'CursorWindow' (ADSSQLiteClosable, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: jboolean); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    procedure clear(); overload; virtual;
    function getStartPosition(): jint; overload; virtual;
    procedure setStartPosition(para1: jint); overload; virtual;
    function getNumRows(): jint; overload; virtual;
    function setNumColumns(para1: jint): jboolean; overload; virtual;
    function allocRow(): jboolean; overload; virtual;
    procedure freeLastRow(); overload; virtual;
    function isNull(para1: jint; para2: jint): jboolean; overload; virtual;
    function isBlob(para1: jint; para2: jint): jboolean; overload; virtual;
    function isLong(para1: jint; para2: jint): jboolean; overload; virtual;
    function isFloat(para1: jint; para2: jint): jboolean; overload; virtual;
    function isString(para1: jint; para2: jint): jboolean; overload; virtual;
    function getType(para1: jint; para2: jint): jint; overload; virtual;
    function getBlob(para1: jint; para2: jint): Arr1jbyte; overload; virtual;
    function getString(para1: jint; para2: jint): JLString; overload; virtual;
    procedure copyStringToBuffer(para1: jint; para2: jint; para3: ADCharArrayBuffer); overload; virtual;
    function getLong(para1: jint; para2: jint): jlong; overload; virtual;
    function getDouble(para1: jint; para2: jint): jdouble; overload; virtual;
    function getShort(para1: jint; para2: jint): jshort; overload; virtual;
    function getInt(para1: jint; para2: jint): jint; overload; virtual;
    function getFloat(para1: jint; para2: jint): jfloat; overload; virtual;
    function putBlob(para1: Arr1jbyte; para2: jint; para3: jint): jboolean; overload; virtual;
    function putBlob(var para1: array of jbyte; para2: jint; para3: jint): jboolean; overload; virtual;
    function putString(para1: JLString; para2: jint; para3: jint): jboolean; overload; virtual;
    function putLong(para1: jlong; para2: jint; para3: jint): jboolean; overload; virtual;
    function putDouble(para1: jdouble; para2: jint; para3: jint): jboolean; overload; virtual;
    function putNull(para1: jint; para2: jint): jboolean; overload; virtual;
    class function newFromParcel(para1: AOParcel): ADCursorWindow; static; overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  strict protected
    procedure onAllReferencesReleased(); overload; virtual;
  public
    function toString(): JLString; overload; virtual;
  end;

  AGGesture = class external 'android.gesture' name 'Gesture' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(); overload;
    function clone(): JLObject; overload; virtual;
    function getStrokes(): JUArrayList; overload; virtual;
    function getStrokesCount(): jint; overload; virtual;
    procedure addStroke(para1: AGGestureStroke); overload; virtual;
    function getLength(): jfloat; overload; virtual;
    function getBoundingBox(): AGRectF; overload; virtual;
    function toPath(): AGPath; overload; virtual;
    function toPath(para1: AGPath): AGPath; overload; virtual;
    function toPath(para1: jint; para2: jint; para3: jint; para4: jint): AGPath; overload; virtual;
    function toPath(para1: AGPath; para2: jint; para3: jint; para4: jint; para5: jint): AGPath; overload; virtual;
    function getID(): jlong; overload; virtual;
    function toBitmap(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint): AGBitmap; overload; virtual;
    function toBitmap(para1: jint; para2: jint; para3: jint; para4: jint): AGBitmap; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AGBitmap = class sealed external 'android.graphics' name 'Bitmap' (JLObject, AOParcelable)
  public
    type
      InnerCompressFormat = class;
      Arr1InnerCompressFormat = array of InnerCompressFormat;
      Arr2InnerCompressFormat = array of Arr1InnerCompressFormat;
      Arr3InnerCompressFormat = array of Arr2InnerCompressFormat;
      InnerConfig = class;
      Arr1InnerConfig = array of InnerConfig;
      Arr2InnerConfig = array of Arr1InnerConfig;
      Arr3InnerConfig = array of Arr2InnerConfig;
      InnerCompressFormat = class sealed external 'android.graphics' name 'CompressFormat' (JLEnum)
      public
        final class var
          fJPEG: AGBitmap.InnerCompressFormat; external name 'JPEG';
          fPNG: AGBitmap.InnerCompressFormat; external name 'PNG';
          fWEBP: AGBitmap.InnerCompressFormat; external name 'WEBP';
      public
        class function values(): AGBitmap.Arr1InnerCompressFormat; static; overload;
        class function valueOf(para1: JLString): AGBitmap.InnerCompressFormat; static; overload;
      end;

      InnerConfig = class sealed external 'android.graphics' name 'Config' (JLEnum)
      public
        final class var
          fALPHA_8: AGBitmap.InnerConfig; external name 'ALPHA_8';
          fARGB_4444: AGBitmap.InnerConfig; external name 'ARGB_4444';
          fARGB_8888: AGBitmap.InnerConfig; external name 'ARGB_8888';
          fRGB_565: AGBitmap.InnerConfig; external name 'RGB_565';
      public
        class function values(): AGBitmap.Arr1InnerConfig; static; overload;
        class function valueOf(para1: JLString): AGBitmap.InnerConfig; static; overload;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      DENSITY_NONE = 0;
  public
    function getDensity(): jint; overload; virtual;
    procedure setDensity(para1: jint); overload; virtual;
    procedure reconfigure(para1: jint; para2: jint; para3: AGBitmap.InnerConfig); overload; virtual;
    procedure setWidth(para1: jint); overload; virtual;
    procedure setHeight(para1: jint); overload; virtual;
    procedure setConfig(para1: AGBitmap.InnerConfig); overload; virtual;
    procedure recycle(); overload; virtual;
    function isRecycled(): jboolean; overload; virtual; final;
    function getGenerationId(): jint; overload; virtual;
    procedure copyPixelsToBuffer(para1: JNBuffer); overload; virtual;
    procedure copyPixelsFromBuffer(para1: JNBuffer); overload; virtual;
    function copy(para1: AGBitmap.InnerConfig; para2: jboolean): AGBitmap; overload; virtual;
    class function createScaledBitmap(para1: AGBitmap; para2: jint; para3: jint; para4: jboolean): AGBitmap; static; overload;
    class function createBitmap(para1: AGBitmap): AGBitmap; static; overload;
    class function createBitmap(para1: AGBitmap; para2: jint; para3: jint; para4: jint; para5: jint): AGBitmap; static; overload;
    class function createBitmap(para1: AGBitmap; para2: jint; para3: jint; para4: jint; para5: jint; para6: AGMatrix; para7: jboolean): AGBitmap; static; overload;
    class function createBitmap(para1: jint; para2: jint; para3: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(para1: AUDisplayMetrics; para2: jint; para3: jint; para4: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(para1: Arr1jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(var para1: array of jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(para1: AUDisplayMetrics; para2: Arr1jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(para1: AUDisplayMetrics; var para2: array of jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(para1: Arr1jint; para2: jint; para3: jint; para4: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(var para1: array of jint; para2: jint; para3: jint; para4: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(para1: AUDisplayMetrics; para2: Arr1jint; para3: jint; para4: jint; para5: AGBitmap.InnerConfig): AGBitmap; static; overload;
    class function createBitmap(para1: AUDisplayMetrics; var para2: array of jint; para3: jint; para4: jint; para5: AGBitmap.InnerConfig): AGBitmap; static; overload;
    function getNinePatchChunk(): Arr1jbyte; overload; virtual;
    function compress(para1: AGBitmap.InnerCompressFormat; para2: jint; para3: JIOutputStream): jboolean; overload; virtual;
    function isMutable(): jboolean; overload; virtual; final;
    function isPremultiplied(): jboolean; overload; virtual; final;
    procedure setPremultiplied(para1: jboolean); overload; virtual; final;
    function getWidth(): jint; overload; virtual; final;
    function getHeight(): jint; overload; virtual; final;
    function getScaledWidth(para1: AGCanvas): jint; overload; virtual;
    function getScaledHeight(para1: AGCanvas): jint; overload; virtual;
    function getScaledWidth(para1: AUDisplayMetrics): jint; overload; virtual;
    function getScaledHeight(para1: AUDisplayMetrics): jint; overload; virtual;
    function getScaledWidth(para1: jint): jint; overload; virtual;
    function getScaledHeight(para1: jint): jint; overload; virtual;
    function getRowBytes(): jint; overload; virtual; final;
    function getByteCount(): jint; overload; virtual; final;
    function getAllocationByteCount(): jint; overload; virtual; final;
    function getConfig(): AGBitmap.InnerConfig; overload; virtual; final;
    function hasAlpha(): jboolean; overload; virtual; final;
    procedure setHasAlpha(para1: jboolean); overload; virtual;
    function hasMipMap(): jboolean; overload; virtual; final;
    procedure setHasMipMap(para1: jboolean); overload; virtual; final;
    procedure eraseColor(para1: jint); overload; virtual;
    function getPixel(para1: jint; para2: jint): jint; overload; virtual;
    procedure getPixels(para1: Arr1jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint); overload; virtual;
    procedure getPixels(var para1: array of jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint); overload; virtual;
    procedure setPixel(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure setPixels(para1: Arr1jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint); overload; virtual;
    procedure setPixels(var para1: array of jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function extractAlpha(): AGBitmap; overload; virtual;
    function extractAlpha(para1: AGPaint; para2: Arr1jint): AGBitmap; overload; virtual;
    function extractAlpha(para1: AGPaint; var para2: array of jint): AGBitmap; overload; virtual;
    function sameAs(para1: AGBitmap): jboolean; overload; virtual;
    procedure prepareToDraw(); overload; virtual;
  end;

  AGPoint = class external 'android.graphics' name 'Point' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fx: jint; external name 'x';
      fy: jint; external name 'y';
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: jint); overload;
    constructor create(para1: AGPoint); overload;
    procedure &set(para1: jint; para2: jint); overload; virtual;
    procedure negate(); overload; virtual; final;
    procedure offset(para1: jint; para2: jint); overload; virtual; final;
    function equals(para1: jint; para2: jint): jboolean; overload; virtual; final;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
  end;

  AGPointF = class external 'android.graphics' name 'PointF' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fx: jfloat; external name 'x';
      fy: jfloat; external name 'y';
  public
    constructor create(); overload;
    constructor create(para1: jfloat; para2: jfloat); overload;
    constructor create(para1: AGPoint); overload;
    procedure &set(para1: jfloat; para2: jfloat); overload; virtual; final;
    procedure &set(para1: AGPointF); overload; virtual; final;
    procedure negate(); overload; virtual; final;
    procedure offset(para1: jfloat; para2: jfloat); overload; virtual; final;
    function equals(para1: jfloat; para2: jfloat): jboolean; overload; virtual; final;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function length(): jfloat; overload; virtual; final;
    class function length(para1: jfloat; para2: jfloat): jfloat; static; overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
  end;

  AGRect = class sealed external 'android.graphics' name 'Rect' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fbottom: jint; external name 'bottom';
      fleft: jint; external name 'left';
      fright: jint; external name 'right';
      ftop: jint; external name 'top';
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    constructor create(para1: AGRect); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toShortString(): JLString; overload; virtual;
    function flattenToString(): JLString; overload; virtual;
    class function unflattenFromString(para1: JLString): AGRect; static; overload;
    function isEmpty(): jboolean; overload; virtual; final;
    function width(): jint; overload; virtual; final;
    function height(): jint; overload; virtual; final;
    function centerX(): jint; overload; virtual; final;
    function centerY(): jint; overload; virtual; final;
    function exactCenterX(): jfloat; overload; virtual; final;
    function exactCenterY(): jfloat; overload; virtual; final;
    procedure setEmpty(); overload; virtual;
    procedure &set(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure &set(para1: AGRect); overload; virtual;
    procedure offset(para1: jint; para2: jint); overload; virtual;
    procedure offsetTo(para1: jint; para2: jint); overload; virtual;
    procedure inset(para1: jint; para2: jint); overload; virtual;
    function contains(para1: jint; para2: jint): jboolean; overload; virtual;
    function contains(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    function contains(para1: AGRect): jboolean; overload; virtual;
    function intersect(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    function intersect(para1: AGRect): jboolean; overload; virtual;
    function setIntersect(para1: AGRect; para2: AGRect): jboolean; overload; virtual;
    function intersects(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    class function intersects(para1: AGRect; para2: AGRect): jboolean; static; overload;
    procedure union(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure union(para1: AGRect); overload; virtual;
    procedure union(para1: jint; para2: jint); overload; virtual;
    procedure sort(); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
  end;

  AGRectF = class external 'android.graphics' name 'RectF' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fbottom: jfloat; external name 'bottom';
      fleft: jfloat; external name 'left';
      fright: jfloat; external name 'right';
      ftop: jfloat; external name 'top';
  public
    constructor create(); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    constructor create(para1: AGRectF); overload;
    constructor create(para1: AGRect); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toShortString(): JLString; overload; virtual;
    function isEmpty(): jboolean; overload; virtual; final;
    function width(): jfloat; overload; virtual; final;
    function height(): jfloat; overload; virtual; final;
    function centerX(): jfloat; overload; virtual; final;
    function centerY(): jfloat; overload; virtual; final;
    procedure setEmpty(); overload; virtual;
    procedure &set(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure &set(para1: AGRectF); overload; virtual;
    procedure &set(para1: AGRect); overload; virtual;
    procedure offset(para1: jfloat; para2: jfloat); overload; virtual;
    procedure offsetTo(para1: jfloat; para2: jfloat); overload; virtual;
    procedure inset(para1: jfloat; para2: jfloat); overload; virtual;
    function contains(para1: jfloat; para2: jfloat): jboolean; overload; virtual;
    function contains(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function contains(para1: AGRectF): jboolean; overload; virtual;
    function intersect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function intersect(para1: AGRectF): jboolean; overload; virtual;
    function setIntersect(para1: AGRectF; para2: AGRectF): jboolean; overload; virtual;
    function intersects(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    class function intersects(para1: AGRectF; para2: AGRectF): jboolean; static; overload;
    procedure round(para1: AGRect); overload; virtual;
    procedure roundOut(para1: AGRect); overload; virtual;
    procedure union(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure union(para1: AGRectF); overload; virtual;
    procedure union(para1: jfloat; para2: jfloat); overload; virtual;
    procedure sort(); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
  end;

  AGRegion = class external 'android.graphics' name 'Region' (JLObject, AOParcelable)
  public
    type
      InnerOp = class;
      Arr1InnerOp = array of InnerOp;
      Arr2InnerOp = array of Arr1InnerOp;
      Arr3InnerOp = array of Arr2InnerOp;
      InnerOp = class sealed external 'android.graphics' name 'Op' (JLEnum)
      public
        final class var
          fDIFFERENCE: AGRegion.InnerOp; external name 'DIFFERENCE';
          fINTERSECT: AGRegion.InnerOp; external name 'INTERSECT';
          fREPLACE: AGRegion.InnerOp; external name 'REPLACE';
          fREVERSE_DIFFERENCE: AGRegion.InnerOp; external name 'REVERSE_DIFFERENCE';
          fUNION: AGRegion.InnerOp; external name 'UNION';
          fXOR: AGRegion.InnerOp; external name 'XOR';
      public
        class function values(): AGRegion.Arr1InnerOp; static; overload;
        class function valueOf(para1: JLString): AGRegion.InnerOp; static; overload;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(); overload;
    constructor create(para1: AGRegion); overload;
    constructor create(para1: AGRect); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure setEmpty(); overload; virtual;
    function &set(para1: AGRegion): jboolean; overload; virtual;
    function &set(para1: AGRect): jboolean; overload; virtual;
    function &set(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    function setPath(para1: AGPath; para2: AGRegion): jboolean; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function isRect(): jboolean; overload; virtual;
    function isComplex(): jboolean; overload; virtual;
    function getBounds(): AGRect; overload; virtual;
    function getBounds(para1: AGRect): jboolean; overload; virtual;
    function getBoundaryPath(): AGPath; overload; virtual;
    function getBoundaryPath(para1: AGPath): jboolean; overload; virtual;
    function contains(para1: jint; para2: jint): jboolean; overload; virtual;
    function quickContains(para1: AGRect): jboolean; overload; virtual;
    function quickContains(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    function quickReject(para1: AGRect): jboolean; overload; virtual;
    function quickReject(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    function quickReject(para1: AGRegion): jboolean; overload; virtual;
    procedure translate(para1: jint; para2: jint); overload; virtual;
    procedure translate(para1: jint; para2: jint; para3: AGRegion); overload; virtual;
    function union(para1: AGRect): jboolean; overload; virtual; final;
    function op(para1: AGRect; para2: AGRegion.InnerOp): jboolean; overload; virtual;
    function op(para1: jint; para2: jint; para3: jint; para4: jint; para5: AGRegion.InnerOp): jboolean; overload; virtual;
    function op(para1: AGRegion; para2: AGRegion.InnerOp): jboolean; overload; virtual;
    function op(para1: AGRect; para2: AGRegion; para3: AGRegion.InnerOp): jboolean; overload; virtual;
    function op(para1: AGRegion; para2: AGRegion; para3: AGRegion.InnerOp): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AHUUsbAccessory = class external 'android.hardware.usb' name 'UsbAccessory' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getManufacturer(): JLString; overload; virtual;
    function getModel(): JLString; overload; virtual;
    function getDescription(): JLString; overload; virtual;
    function getVersion(): JLString; overload; virtual;
    function getUri(): JLString; overload; virtual;
    function getSerial(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AHUUsbDevice = class external 'android.hardware.usb' name 'UsbDevice' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getDeviceName(): JLString; overload; virtual;
    function getManufacturerName(): JLString; overload; virtual;
    function getProductName(): JLString; overload; virtual;
    function getSerialNumber(): JLString; overload; virtual;
    function getDeviceId(): jint; overload; virtual;
    function getVendorId(): jint; overload; virtual;
    function getProductId(): jint; overload; virtual;
    function getDeviceClass(): jint; overload; virtual;
    function getDeviceSubclass(): jint; overload; virtual;
    function getDeviceProtocol(): jint; overload; virtual;
    function getConfigurationCount(): jint; overload; virtual;
    function getConfiguration(para1: jint): AHUUsbConfiguration; overload; virtual;
    function getInterfaceCount(): jint; overload; virtual;
    function getInterface(para1: jint): AHUUsbInterface; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    class function getDeviceId(para1: JLString): jint; static; overload;
    class function getDeviceName(para1: jint): JLString; static; overload;
  end;

  AHUUsbEndpoint = class external 'android.hardware.usb' name 'UsbEndpoint' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getAddress(): jint; overload; virtual;
    function getEndpointNumber(): jint; overload; virtual;
    function getDirection(): jint; overload; virtual;
    function getAttributes(): jint; overload; virtual;
    function getType(): jint; overload; virtual;
    function getMaxPacketSize(): jint; overload; virtual;
    function getInterval(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AHUUsbInterface = class external 'android.hardware.usb' name 'UsbInterface' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getId(): jint; overload; virtual;
    function getAlternateSetting(): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getInterfaceClass(): jint; overload; virtual;
    function getInterfaceSubclass(): jint; overload; virtual;
    function getInterfaceProtocol(): jint; overload; virtual;
    function getEndpointCount(): jint; overload; virtual;
    function getEndpoint(para1: jint): AHUUsbEndpoint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ALAddress = class external 'android.location' name 'Address' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JULocale); overload;
    function getLocale(): JULocale; overload; virtual;
    function getMaxAddressLineIndex(): jint; overload; virtual;
    function getAddressLine(para1: jint): JLString; overload; virtual;
    procedure setAddressLine(para1: jint; para2: JLString); overload; virtual;
    function getFeatureName(): JLString; overload; virtual;
    procedure setFeatureName(para1: JLString); overload; virtual;
    function getAdminArea(): JLString; overload; virtual;
    procedure setAdminArea(para1: JLString); overload; virtual;
    function getSubAdminArea(): JLString; overload; virtual;
    procedure setSubAdminArea(para1: JLString); overload; virtual;
    function getLocality(): JLString; overload; virtual;
    procedure setLocality(para1: JLString); overload; virtual;
    function getSubLocality(): JLString; overload; virtual;
    procedure setSubLocality(para1: JLString); overload; virtual;
    function getThoroughfare(): JLString; overload; virtual;
    procedure setThoroughfare(para1: JLString); overload; virtual;
    function getSubThoroughfare(): JLString; overload; virtual;
    procedure setSubThoroughfare(para1: JLString); overload; virtual;
    function getPremises(): JLString; overload; virtual;
    procedure setPremises(para1: JLString); overload; virtual;
    function getPostalCode(): JLString; overload; virtual;
    procedure setPostalCode(para1: JLString); overload; virtual;
    function getCountryCode(): JLString; overload; virtual;
    procedure setCountryCode(para1: JLString); overload; virtual;
    function getCountryName(): JLString; overload; virtual;
    procedure setCountryName(para1: JLString); overload; virtual;
    function hasLatitude(): jboolean; overload; virtual;
    function getLatitude(): jdouble; overload; virtual;
    procedure setLatitude(para1: jdouble); overload; virtual;
    procedure clearLatitude(); overload; virtual;
    function hasLongitude(): jboolean; overload; virtual;
    function getLongitude(): jdouble; overload; virtual;
    procedure setLongitude(para1: jdouble); overload; virtual;
    procedure clearLongitude(); overload; virtual;
    function getPhone(): JLString; overload; virtual;
    procedure setPhone(para1: JLString); overload; virtual;
    function getUrl(): JLString; overload; virtual;
    procedure setUrl(para1: JLString); overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    procedure setExtras(para1: AOBundle); overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ALCriteria = class external 'android.location' name 'Criteria' (JLObject, AOParcelable)
  public
    const
      ACCURACY_COARSE = 2;
      ACCURACY_FINE = 1;
      ACCURACY_HIGH = 3;
      ACCURACY_LOW = 1;
      ACCURACY_MEDIUM = 2;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      NO_REQUIREMENT = 0;
      POWER_HIGH = 3;
      POWER_LOW = 1;
      POWER_MEDIUM = 2;
  public
    constructor create(); overload;
    constructor create(para1: ALCriteria); overload;
    procedure setHorizontalAccuracy(para1: jint); overload; virtual;
    function getHorizontalAccuracy(): jint; overload; virtual;
    procedure setVerticalAccuracy(para1: jint); overload; virtual;
    function getVerticalAccuracy(): jint; overload; virtual;
    procedure setSpeedAccuracy(para1: jint); overload; virtual;
    function getSpeedAccuracy(): jint; overload; virtual;
    procedure setBearingAccuracy(para1: jint); overload; virtual;
    function getBearingAccuracy(): jint; overload; virtual;
    procedure setAccuracy(para1: jint); overload; virtual;
    function getAccuracy(): jint; overload; virtual;
    procedure setPowerRequirement(para1: jint); overload; virtual;
    function getPowerRequirement(): jint; overload; virtual;
    procedure setCostAllowed(para1: jboolean); overload; virtual;
    function isCostAllowed(): jboolean; overload; virtual;
    procedure setAltitudeRequired(para1: jboolean); overload; virtual;
    function isAltitudeRequired(): jboolean; overload; virtual;
    procedure setSpeedRequired(para1: jboolean); overload; virtual;
    function isSpeedRequired(): jboolean; overload; virtual;
    procedure setBearingRequired(para1: jboolean); overload; virtual;
    function isBearingRequired(): jboolean; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ALLocation = class external 'android.location' name 'Location' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FORMAT_DEGREES = 0;
      FORMAT_MINUTES = 1;
      FORMAT_SECONDS = 2;
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: ALLocation); overload;
    procedure &set(para1: ALLocation); overload; virtual;
    procedure reset(); overload; virtual;
    class function convert(para1: jdouble; para2: jint): JLString; static; overload;
    class function convert(para1: JLString): jdouble; static; overload;
    class procedure distanceBetween(para1: jdouble; para2: jdouble; para3: jdouble; para4: jdouble; para5: Arr1jfloat); static; overload;
    class procedure distanceBetween(para1: jdouble; para2: jdouble; para3: jdouble; para4: jdouble; var para5: array of jfloat); static; overload;
    function distanceTo(para1: ALLocation): jfloat; overload; virtual;
    function bearingTo(para1: ALLocation): jfloat; overload; virtual;
    function getProvider(): JLString; overload; virtual;
    procedure setProvider(para1: JLString); overload; virtual;
    function getTime(): jlong; overload; virtual;
    procedure setTime(para1: jlong); overload; virtual;
    function getElapsedRealtimeNanos(): jlong; overload; virtual;
    procedure setElapsedRealtimeNanos(para1: jlong); overload; virtual;
    function getLatitude(): jdouble; overload; virtual;
    procedure setLatitude(para1: jdouble); overload; virtual;
    function getLongitude(): jdouble; overload; virtual;
    procedure setLongitude(para1: jdouble); overload; virtual;
    function hasAltitude(): jboolean; overload; virtual;
    function getAltitude(): jdouble; overload; virtual;
    procedure setAltitude(para1: jdouble); overload; virtual;
    procedure removeAltitude(); overload; virtual;
    function hasSpeed(): jboolean; overload; virtual;
    function getSpeed(): jfloat; overload; virtual;
    procedure setSpeed(para1: jfloat); overload; virtual;
    procedure removeSpeed(); overload; virtual;
    function hasBearing(): jboolean; overload; virtual;
    function getBearing(): jfloat; overload; virtual;
    procedure setBearing(para1: jfloat); overload; virtual;
    procedure removeBearing(); overload; virtual;
    function hasAccuracy(): jboolean; overload; virtual;
    function getAccuracy(): jfloat; overload; virtual;
    procedure setAccuracy(para1: jfloat); overload; virtual;
    procedure removeAccuracy(); overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    procedure setExtras(para1: AOBundle); overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function isFromMockProvider(): jboolean; overload; virtual;
  end;

  ANDhcpInfo = class external 'android.net' name 'DhcpInfo' (JLObject, AOParcelable)
  public
    var
      fdns1: jint; external name 'dns1';
      fdns2: jint; external name 'dns2';
      fgateway: jint; external name 'gateway';
      fipAddress: jint; external name 'ipAddress';
      fleaseDuration: jint; external name 'leaseDuration';
      fnetmask: jint; external name 'netmask';
      fserverAddress: jint; external name 'serverAddress';
  public
    constructor create(); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANNetworkInfo = class external 'android.net' name 'NetworkInfo' (JLObject, AOParcelable)
  public
    type
      InnerDetailedState = class;
      Arr1InnerDetailedState = array of InnerDetailedState;
      Arr2InnerDetailedState = array of Arr1InnerDetailedState;
      Arr3InnerDetailedState = array of Arr2InnerDetailedState;
      InnerState = class;
      Arr1InnerState = array of InnerState;
      Arr2InnerState = array of Arr1InnerState;
      Arr3InnerState = array of Arr2InnerState;
      InnerDetailedState = class sealed external 'android.net' name 'DetailedState' (JLEnum)
      public
        final class var
          fAUTHENTICATING: ANNetworkInfo.InnerDetailedState; external name 'AUTHENTICATING';
          fBLOCKED: ANNetworkInfo.InnerDetailedState; external name 'BLOCKED';
          fCAPTIVE_PORTAL_CHECK: ANNetworkInfo.InnerDetailedState; external name 'CAPTIVE_PORTAL_CHECK';
          fCONNECTED: ANNetworkInfo.InnerDetailedState; external name 'CONNECTED';
          fCONNECTING: ANNetworkInfo.InnerDetailedState; external name 'CONNECTING';
          fDISCONNECTED: ANNetworkInfo.InnerDetailedState; external name 'DISCONNECTED';
          fDISCONNECTING: ANNetworkInfo.InnerDetailedState; external name 'DISCONNECTING';
          fFAILED: ANNetworkInfo.InnerDetailedState; external name 'FAILED';
          fIDLE: ANNetworkInfo.InnerDetailedState; external name 'IDLE';
          fOBTAINING_IPADDR: ANNetworkInfo.InnerDetailedState; external name 'OBTAINING_IPADDR';
          fSCANNING: ANNetworkInfo.InnerDetailedState; external name 'SCANNING';
          fSUSPENDED: ANNetworkInfo.InnerDetailedState; external name 'SUSPENDED';
          fVERIFYING_POOR_LINK: ANNetworkInfo.InnerDetailedState; external name 'VERIFYING_POOR_LINK';
      public
        class function values(): ANNetworkInfo.Arr1InnerDetailedState; static; overload;
        class function valueOf(para1: JLString): ANNetworkInfo.InnerDetailedState; static; overload;
      end;

      InnerState = class sealed external 'android.net' name 'State' (JLEnum)
      public
        final class var
          fCONNECTED: ANNetworkInfo.InnerState; external name 'CONNECTED';
          fCONNECTING: ANNetworkInfo.InnerState; external name 'CONNECTING';
          fDISCONNECTED: ANNetworkInfo.InnerState; external name 'DISCONNECTED';
          fDISCONNECTING: ANNetworkInfo.InnerState; external name 'DISCONNECTING';
          fSUSPENDED: ANNetworkInfo.InnerState; external name 'SUSPENDED';
          fUNKNOWN: ANNetworkInfo.InnerState; external name 'UNKNOWN';
      public
        class function values(): ANNetworkInfo.Arr1InnerState; static; overload;
        class function valueOf(para1: JLString): ANNetworkInfo.InnerState; static; overload;
      end;

  public
    function getType(): jint; overload; virtual;
    function getSubtype(): jint; overload; virtual;
    function getTypeName(): JLString; overload; virtual;
    function getSubtypeName(): JLString; overload; virtual;
    function isConnectedOrConnecting(): jboolean; overload; virtual;
    function isConnected(): jboolean; overload; virtual;
    function isAvailable(): jboolean; overload; virtual;
    function isFailover(): jboolean; overload; virtual;
    function isRoaming(): jboolean; overload; virtual;
    function getState(): ANNetworkInfo.InnerState; overload; virtual;
    function getDetailedState(): ANNetworkInfo.InnerDetailedState; overload; virtual;
    function getReason(): JLString; overload; virtual;
    function getExtraInfo(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANUri = class abstract external 'android.net' name 'Uri' (JLObject, AOParcelable, JLComparable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.net' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function scheme(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function opaquePart(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function encodedOpaquePart(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function authority(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function encodedAuthority(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function path(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function encodedPath(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function appendPath(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function appendEncodedPath(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function query(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function encodedQuery(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function fragment(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function encodedFragment(para1: JLString): ANUri.InnerBuilder; overload; virtual;
        function appendQueryParameter(para1: JLString; para2: JLString): ANUri.InnerBuilder; overload; virtual;
        function clearQuery(): ANUri.InnerBuilder; overload; virtual;
        function build(): ANUri; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      fEMPTY: ANUri; external name 'EMPTY';
  public
    function isHierarchical(): jboolean; overload; virtual; abstract;
    function isOpaque(): jboolean; overload; virtual;
    function isRelative(): jboolean; overload; virtual; abstract;
    function isAbsolute(): jboolean; overload; virtual;
    function getScheme(): JLString; overload; virtual; abstract;
    function getSchemeSpecificPart(): JLString; overload; virtual; abstract;
    function getEncodedSchemeSpecificPart(): JLString; overload; virtual; abstract;
    function getAuthority(): JLString; overload; virtual; abstract;
    function getEncodedAuthority(): JLString; overload; virtual; abstract;
    function getUserInfo(): JLString; overload; virtual; abstract;
    function getEncodedUserInfo(): JLString; overload; virtual; abstract;
    function getHost(): JLString; overload; virtual; abstract;
    function getPort(): jint; overload; virtual; abstract;
    function getPath(): JLString; overload; virtual; abstract;
    function getEncodedPath(): JLString; overload; virtual; abstract;
    function getQuery(): JLString; overload; virtual; abstract;
    function getEncodedQuery(): JLString; overload; virtual; abstract;
    function getFragment(): JLString; overload; virtual; abstract;
    function getEncodedFragment(): JLString; overload; virtual; abstract;
    function getPathSegments(): JUList; overload; virtual; abstract;
    function getLastPathSegment(): JLString; overload; virtual; abstract;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function compareTo(para1: ANUri): jint; overload; virtual;
    function toString(): JLString; overload; virtual; abstract;
    function buildUpon(): ANUri.InnerBuilder; overload; virtual; abstract;
    class function parse(para1: JLString): ANUri; static; overload;
    class function fromFile(para1: JIFile): ANUri; static; overload;
    class function fromParts(para1: JLString; para2: JLString; para3: JLString): ANUri; static; overload;
    function getQueryParameterNames(): JUSet; overload; virtual;
    function getQueryParameters(para1: JLString): JUList; overload; virtual;
    function getQueryParameter(para1: JLString): JLString; overload; virtual;
    function getBooleanQueryParameter(para1: JLString; para2: jboolean): jboolean; overload; virtual;
    function normalizeScheme(): ANUri; overload; virtual;
    class procedure writeToParcel(para1: AOParcel; para2: ANUri); static; overload;
    class function encode(para1: JLString): JLString; static; overload;
    class function encode(para1: JLString; para2: JLString): JLString; static; overload;
    class function decode(para1: JLString): JLString; static; overload;
    class function withAppendedPath(para1: ANUri; para2: JLString): ANUri; static; overload;
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  ANSSipProfile = class external 'android.net.sip' name 'SipProfile' (JLObject, AOParcelable, JISerializable, JLCloneable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.net.sip' name 'Builder' (JLObject)
      public
        constructor create(para1: ANSSipProfile); overload;
        constructor create(para1: JLString); overload;  // throws java.text.ParseException
        constructor create(para1: JLString; para2: JLString); overload;  // throws java.text.ParseException
        function setAuthUserName(para1: JLString): ANSSipProfile.InnerBuilder; overload; virtual;
        function setProfileName(para1: JLString): ANSSipProfile.InnerBuilder; overload; virtual;
        function setPassword(para1: JLString): ANSSipProfile.InnerBuilder; overload; virtual;
        function setPort(para1: jint): ANSSipProfile.InnerBuilder; overload; virtual;  // throws java.lang.IllegalArgumentException
        function setProtocol(para1: JLString): ANSSipProfile.InnerBuilder; overload; virtual;  // throws java.lang.IllegalArgumentException
        function setOutboundProxy(para1: JLString): ANSSipProfile.InnerBuilder; overload; virtual;
        function setDisplayName(para1: JLString): ANSSipProfile.InnerBuilder; overload; virtual;
        function setSendKeepAlive(para1: jboolean): ANSSipProfile.InnerBuilder; overload; virtual;
        function setAutoRegistration(para1: jboolean): ANSSipProfile.InnerBuilder; overload; virtual;
        function build(): ANSSipProfile; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function getUriString(): JLString; overload; virtual;
    function getDisplayName(): JLString; overload; virtual;
    function getUserName(): JLString; overload; virtual;
    function getAuthUserName(): JLString; overload; virtual;
    function getPassword(): JLString; overload; virtual;
    function getSipDomain(): JLString; overload; virtual;
    function getPort(): jint; overload; virtual;
    function getProtocol(): JLString; overload; virtual;
    function getProxyAddress(): JLString; overload; virtual;
    function getProfileName(): JLString; overload; virtual;
    function getSendKeepAlive(): jboolean; overload; virtual;
    function getAutoRegistration(): jboolean; overload; virtual;
  end;

  ANWScanResult = class external 'android.net.wifi' name 'ScanResult' (JLObject, AOParcelable)
  public
    var
      fBSSID: JLString; external name 'BSSID';
      fSSID: JLString; external name 'SSID';
      fcapabilities: JLString; external name 'capabilities';
      ffrequency: jint; external name 'frequency';
      flevel: jint; external name 'level';
      ftimestamp: jlong; external name 'timestamp';
  public
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWSupplicantState = class sealed external 'android.net.wifi' name 'SupplicantState' (JLEnum, AOParcelable)
  public
    final class var
      fASSOCIATED: ANWSupplicantState; external name 'ASSOCIATED';
      fASSOCIATING: ANWSupplicantState; external name 'ASSOCIATING';
      fAUTHENTICATING: ANWSupplicantState; external name 'AUTHENTICATING';
      fCOMPLETED: ANWSupplicantState; external name 'COMPLETED';
      fDISCONNECTED: ANWSupplicantState; external name 'DISCONNECTED';
      fDORMANT: ANWSupplicantState; external name 'DORMANT';
      fFOUR_WAY_HANDSHAKE: ANWSupplicantState; external name 'FOUR_WAY_HANDSHAKE';
      fGROUP_HANDSHAKE: ANWSupplicantState; external name 'GROUP_HANDSHAKE';
      fINACTIVE: ANWSupplicantState; external name 'INACTIVE';
      fINTERFACE_DISABLED: ANWSupplicantState; external name 'INTERFACE_DISABLED';
      fINVALID: ANWSupplicantState; external name 'INVALID';
      fSCANNING: ANWSupplicantState; external name 'SCANNING';
      fUNINITIALIZED: ANWSupplicantState; external name 'UNINITIALIZED';
  public
    class function values(): Arr1ANWSupplicantState; static; overload;
    class function valueOf(para1: JLString): ANWSupplicantState; static; overload;
    class function isValidState(para1: ANWSupplicantState): jboolean; static; overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWWifiConfiguration = class external 'android.net.wifi' name 'WifiConfiguration' (JLObject, AOParcelable)
  public
    type
      InnerStatus = class;
      Arr1InnerStatus = array of InnerStatus;
      Arr2InnerStatus = array of Arr1InnerStatus;
      Arr3InnerStatus = array of Arr2InnerStatus;
      InnerGroupCipher = class;
      Arr1InnerGroupCipher = array of InnerGroupCipher;
      Arr2InnerGroupCipher = array of Arr1InnerGroupCipher;
      Arr3InnerGroupCipher = array of Arr2InnerGroupCipher;
      InnerPairwiseCipher = class;
      Arr1InnerPairwiseCipher = array of InnerPairwiseCipher;
      Arr2InnerPairwiseCipher = array of Arr1InnerPairwiseCipher;
      Arr3InnerPairwiseCipher = array of Arr2InnerPairwiseCipher;
      InnerAuthAlgorithm = class;
      Arr1InnerAuthAlgorithm = array of InnerAuthAlgorithm;
      Arr2InnerAuthAlgorithm = array of Arr1InnerAuthAlgorithm;
      Arr3InnerAuthAlgorithm = array of Arr2InnerAuthAlgorithm;
      InnerProtocol = class;
      Arr1InnerProtocol = array of InnerProtocol;
      Arr2InnerProtocol = array of Arr1InnerProtocol;
      Arr3InnerProtocol = array of Arr2InnerProtocol;
      InnerKeyMgmt = class;
      Arr1InnerKeyMgmt = array of InnerKeyMgmt;
      Arr2InnerKeyMgmt = array of Arr1InnerKeyMgmt;
      Arr3InnerKeyMgmt = array of Arr2InnerKeyMgmt;
      InnerStatus = class external 'android.net.wifi' name 'Status' (JLObject)
      public
        const
          CURRENT = 0;
          DISABLED = 1;
          ENABLED = 2;
      public
        final class var
          fstrings: Arr1JLString; external name 'strings';
      end;

      InnerGroupCipher = class external 'android.net.wifi' name 'GroupCipher' (JLObject)
      public
        const
          CCMP = 3;
          TKIP = 2;
          WEP104 = 1;
          WEP40 = 0;
      public
        final class var
          fstrings: Arr1JLString; external name 'strings';
      public
        const
          varName = 'group';
      end;

      InnerPairwiseCipher = class external 'android.net.wifi' name 'PairwiseCipher' (JLObject)
      public
        const
          CCMP = 2;
          NONE = 0;
          TKIP = 1;
      public
        final class var
          fstrings: Arr1JLString; external name 'strings';
      public
        const
          varName = 'pairwise';
      end;

      InnerAuthAlgorithm = class external 'android.net.wifi' name 'AuthAlgorithm' (JLObject)
      public
        const
          LEAP = 2;
          OPEN = 0;
          SHARED = 1;
      public
        final class var
          fstrings: Arr1JLString; external name 'strings';
      public
        const
          varName = 'auth_alg';
      end;

      InnerProtocol = class external 'android.net.wifi' name 'Protocol' (JLObject)
      public
        const
          RSN = 1;
          WPA = 0;
      public
        final class var
          fstrings: Arr1JLString; external name 'strings';
      public
        const
          varName = 'proto';
      end;

      InnerKeyMgmt = class external 'android.net.wifi' name 'KeyMgmt' (JLObject)
      public
        const
          IEEE8021X = 3;
          NONE = 0;
          WPA_EAP = 2;
          WPA_PSK = 1;
      public
        final class var
          fstrings: Arr1JLString; external name 'strings';
      public
        const
          varName = 'key_mgmt';
      end;

  public
    var
      fBSSID: JLString; external name 'BSSID';
      fFQDN: JLString; external name 'FQDN';
      fSSID: JLString; external name 'SSID';
      fallowedAuthAlgorithms: JUBitSet; external name 'allowedAuthAlgorithms';
      fallowedGroupCiphers: JUBitSet; external name 'allowedGroupCiphers';
      fallowedKeyManagement: JUBitSet; external name 'allowedKeyManagement';
      fallowedPairwiseCiphers: JUBitSet; external name 'allowedPairwiseCiphers';
      fallowedProtocols: JUBitSet; external name 'allowedProtocols';
      fenterpriseConfig: ANWWifiEnterpriseConfig; external name 'enterpriseConfig';
      fhiddenSSID: jboolean; external name 'hiddenSSID';
      fnetworkId: jint; external name 'networkId';
      fpreSharedKey: JLString; external name 'preSharedKey';
      fpriority: jint; external name 'priority';
      fstatus: jint; external name 'status';
      fwepKeys: Arr1JLString; external name 'wepKeys';
      fwepTxKeyIndex: jint; external name 'wepTxKeyIndex';
  public
    constructor create(); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWWpsInfo = class external 'android.net.wifi' name 'WpsInfo' (JLObject, AOParcelable)
  public
    var
      fBSSID: JLString; external name 'BSSID';
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      DISPLAY = 1;
      INVALID = 4;
      KEYPAD = 2;
      &LABEL = 3;
      PBC = 0;
  public
    var
      fpin: JLString; external name 'pin';
      fsetup: jint; external name 'setup';
  public
    constructor create(); overload;
    constructor create(para1: ANWWpsInfo); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWPWifiP2pConfig = class external 'android.net.wifi.p2p' name 'WifiP2pConfig' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fdeviceAddress: JLString; external name 'deviceAddress';
      fgroupOwnerIntent: jint; external name 'groupOwnerIntent';
      fwps: ANWWpsInfo; external name 'wps';
  public
    constructor create(); overload;
    constructor create(para1: ANWPWifiP2pConfig); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWPWifiP2pDevice = class external 'android.net.wifi.p2p' name 'WifiP2pDevice' (JLObject, AOParcelable)
  public
    const
      AVAILABLE = 3;
      CONNECTED = 0;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FAILED = 2;
      INVITED = 1;
      UNAVAILABLE = 4;
  public
    var
      fdeviceAddress: JLString; external name 'deviceAddress';
      fdeviceName: JLString; external name 'deviceName';
      fprimaryDeviceType: JLString; external name 'primaryDeviceType';
      fsecondaryDeviceType: JLString; external name 'secondaryDeviceType';
      fstatus: jint; external name 'status';
  public
    constructor create(); overload;
    constructor create(para1: ANWPWifiP2pDevice); overload;
    function wpsPbcSupported(): jboolean; overload; virtual;
    function wpsKeypadSupported(): jboolean; overload; virtual;
    function wpsDisplaySupported(): jboolean; overload; virtual;
    function isServiceDiscoveryCapable(): jboolean; overload; virtual;
    function isGroupOwner(): jboolean; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWPWifiP2pDeviceList = class external 'android.net.wifi.p2p' name 'WifiP2pDeviceList' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(); overload;
    constructor create(para1: ANWPWifiP2pDeviceList); overload;
    function get(para1: JLString): ANWPWifiP2pDevice; overload; virtual;
    function getDeviceList(): JUCollection; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWPWifiP2pGroup = class external 'android.net.wifi.p2p' name 'WifiP2pGroup' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(); overload;
    constructor create(para1: ANWPWifiP2pGroup); overload;
    function getNetworkName(): JLString; overload; virtual;
    function isGroupOwner(): jboolean; overload; virtual;
    function getOwner(): ANWPWifiP2pDevice; overload; virtual;
    function getClientList(): JUCollection; overload; virtual;
    function getPassphrase(): JLString; overload; virtual;
    function getInterface(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWPWifiP2pInfo = class external 'android.net.wifi.p2p' name 'WifiP2pInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fgroupFormed: jboolean; external name 'groupFormed';
      fgroupOwnerAddress: JNInetAddress; external name 'groupOwnerAddress';
      fisGroupOwner: jboolean; external name 'isGroupOwner';
  public
    constructor create(); overload;
    constructor create(para1: ANWPWifiP2pInfo); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANNdefMessage = class sealed external 'android.nfc' name 'NdefMessage' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: Arr1jbyte); overload;  // throws android.nfc.FormatException
    constructor create(const para1: array of jbyte); overload;  // throws android.nfc.FormatException
    constructor create(para1: ANNdefRecord; para2: Arr1ANNdefRecord); overload;
    constructor create(para1: ANNdefRecord; const para2: array of ANNdefRecord); overload;
    constructor create(para1: Arr1ANNdefRecord); overload;
    constructor create(const para1: array of ANNdefRecord); overload;
    function getRecords(): Arr1ANNdefRecord; overload; virtual;
    function getByteArrayLength(): jint; overload; virtual;
    function toByteArray(): Arr1jbyte; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ANNdefRecord = class sealed external 'android.nfc' name 'NdefRecord' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      fRTD_ALTERNATIVE_CARRIER: Arr1jbyte; external name 'RTD_ALTERNATIVE_CARRIER';
      fRTD_HANDOVER_CARRIER: Arr1jbyte; external name 'RTD_HANDOVER_CARRIER';
      fRTD_HANDOVER_REQUEST: Arr1jbyte; external name 'RTD_HANDOVER_REQUEST';
      fRTD_HANDOVER_SELECT: Arr1jbyte; external name 'RTD_HANDOVER_SELECT';
      fRTD_SMART_POSTER: Arr1jbyte; external name 'RTD_SMART_POSTER';
      fRTD_TEXT: Arr1jbyte; external name 'RTD_TEXT';
      fRTD_URI: Arr1jbyte; external name 'RTD_URI';
  public
    const
      TNF_ABSOLUTE_URI = 3;
      TNF_EMPTY = 0;
      TNF_EXTERNAL_TYPE = 4;
      TNF_MIME_MEDIA = 2;
      TNF_UNCHANGED = 6;
      TNF_UNKNOWN = 5;
      TNF_WELL_KNOWN = 1;
  public
    constructor create(para1: jshort; para2: Arr1jbyte; para3: Arr1jbyte; para4: Arr1jbyte); overload;
    constructor create(para1: jshort; const para2: array of jbyte; const para3: array of jbyte; const para4: array of jbyte); overload;
    constructor create(para1: Arr1jbyte); overload;  // throws android.nfc.FormatException
    constructor create(const para1: array of jbyte); overload;  // throws android.nfc.FormatException
    class function createApplicationRecord(para1: JLString): ANNdefRecord; static; overload;
    class function createUri(para1: ANUri): ANNdefRecord; static; overload;
    class function createUri(para1: JLString): ANNdefRecord; static; overload;
    class function createMime(para1: JLString; para2: Arr1jbyte): ANNdefRecord; static; overload;
    class function createMime(para1: JLString; var para2: array of jbyte): ANNdefRecord; static; overload;
    class function createExternal(para1: JLString; para2: JLString; para3: Arr1jbyte): ANNdefRecord; static; overload;
    class function createExternal(para1: JLString; para2: JLString; var para3: array of jbyte): ANNdefRecord; static; overload;
    class function createTextRecord(para1: JLString; para2: JLString): ANNdefRecord; static; overload;
    function getTnf(): jshort; overload; virtual;
    function getType(): Arr1jbyte; overload; virtual;
    function getId(): Arr1jbyte; overload; virtual;
    function getPayload(): Arr1jbyte; overload; virtual;
    function toByteArray(): Arr1jbyte; overload; virtual;
    function toMimeType(): JLString; overload; virtual;
    function toUri(): ANUri; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ANTag = class sealed external 'android.nfc' name 'Tag' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getId(): Arr1jbyte; overload; virtual;
    function getTechList(): Arr1JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AOBaseBundle = class external 'android.os' name 'BaseBundle' (JLObject)
  public
    function size(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function containsKey(para1: JLString): jboolean; overload; virtual;
    function get(para1: JLString): JLObject; overload; virtual;
    procedure remove(para1: JLString); overload; virtual;
    procedure putAll(para1: AOPersistableBundle); overload; virtual;
    function keySet(): JUSet; overload; virtual;
    procedure putInt(para1: JLString; para2: jint); overload; virtual;
    procedure putLong(para1: JLString; para2: jlong); overload; virtual;
    procedure putDouble(para1: JLString; para2: jdouble); overload; virtual;
    procedure putString(para1: JLString; para2: JLString); overload; virtual;
    procedure putIntArray(para1: JLString; para2: Arr1jint); overload; virtual;
    procedure putIntArray(para1: JLString; var para2: array of jint); overload; virtual;
    procedure putLongArray(para1: JLString; para2: Arr1jlong); overload; virtual;
    procedure putLongArray(para1: JLString; var para2: array of jlong); overload; virtual;
    procedure putDoubleArray(para1: JLString; para2: Arr1jdouble); overload; virtual;
    procedure putDoubleArray(para1: JLString; var para2: array of jdouble); overload; virtual;
    procedure putStringArray(para1: JLString; para2: Arr1JLString); overload; virtual;
    procedure putStringArray(para1: JLString; var para2: array of JLString); overload; virtual;
    function getInt(para1: JLString): jint; overload; virtual;
    function getInt(para1: JLString; para2: jint): jint; overload; virtual;
    function getLong(para1: JLString): jlong; overload; virtual;
    function getLong(para1: JLString; para2: jlong): jlong; overload; virtual;
    function getDouble(para1: JLString): jdouble; overload; virtual;
    function getDouble(para1: JLString; para2: jdouble): jdouble; overload; virtual;
    function getString(para1: JLString): JLString; overload; virtual;
    function getString(para1: JLString; para2: JLString): JLString; overload; virtual;
    function getIntArray(para1: JLString): Arr1jint; overload; virtual;
    function getLongArray(para1: JLString): Arr1jlong; overload; virtual;
    function getDoubleArray(para1: JLString): Arr1jdouble; overload; virtual;
    function getStringArray(para1: JLString): Arr1JLString; overload; virtual;
  end;

  AOBundle = class sealed external 'android.os' name 'Bundle' (AOBaseBundle, JLCloneable, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      fEMPTY: AOBundle; external name 'EMPTY';
  public
    constructor create(); overload;
    constructor create(para1: JLClassLoader); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: AOBundle); overload;
    constructor create(para1: AOPersistableBundle); overload;
    procedure setClassLoader(para1: JLClassLoader); overload; virtual;
    function getClassLoader(): JLClassLoader; overload; virtual;
    function clone(): JLObject; overload; virtual;
    procedure clear(); overload; virtual;
    procedure putAll(para1: AOBundle); overload; virtual;
    function hasFileDescriptors(): jboolean; overload; virtual;
    procedure putBoolean(para1: JLString; para2: jboolean); overload; virtual;
    procedure putByte(para1: JLString; para2: jbyte); overload; virtual;
    procedure putChar(para1: JLString; para2: jchar); overload; virtual;
    procedure putShort(para1: JLString; para2: jshort); overload; virtual;
    procedure putFloat(para1: JLString; para2: jfloat); overload; virtual;
    procedure putCharSequence(para1: JLString; para2: JLCharSequence); overload; virtual;
    procedure putParcelable(para1: JLString; para2: AOParcelable); overload; virtual;
    procedure putSize(para1: JLString; para2: AUSize); overload; virtual;
    procedure putSizeF(para1: JLString; para2: AUSizeF); overload; virtual;
    procedure putParcelableArray(para1: JLString; para2: Arr1AOParcelable); overload; virtual;
    procedure putParcelableArray(para1: JLString; var para2: array of AOParcelable); overload; virtual;
    procedure putParcelableArrayList(para1: JLString; para2: JUArrayList); overload; virtual;
    procedure putSparseParcelableArray(para1: JLString; para2: AUSparseArray); overload; virtual;
    procedure putIntegerArrayList(para1: JLString; para2: JUArrayList); overload; virtual;
    procedure putStringArrayList(para1: JLString; para2: JUArrayList); overload; virtual;
    procedure putCharSequenceArrayList(para1: JLString; para2: JUArrayList); overload; virtual;
    procedure putSerializable(para1: JLString; para2: JISerializable); overload; virtual;
    procedure putBooleanArray(para1: JLString; para2: Arr1jboolean); overload; virtual;
    procedure putBooleanArray(para1: JLString; var para2: array of jboolean); overload; virtual;
    procedure putByteArray(para1: JLString; para2: Arr1jbyte); overload; virtual;
    procedure putByteArray(para1: JLString; var para2: array of jbyte); overload; virtual;
    procedure putShortArray(para1: JLString; para2: Arr1jshort); overload; virtual;
    procedure putShortArray(para1: JLString; var para2: array of jshort); overload; virtual;
    procedure putCharArray(para1: JLString; para2: Arr1jchar); overload; virtual;
    procedure putCharArray(para1: JLString; var para2: array of jchar); overload; virtual;
    procedure putFloatArray(para1: JLString; para2: Arr1jfloat); overload; virtual;
    procedure putFloatArray(para1: JLString; var para2: array of jfloat); overload; virtual;
    procedure putCharSequenceArray(para1: JLString; para2: Arr1JLCharSequence); overload; virtual;
    procedure putCharSequenceArray(para1: JLString; var para2: array of JLCharSequence); overload; virtual;
    procedure putBundle(para1: JLString; para2: AOBundle); overload; virtual;
    procedure putBinder(para1: JLString; para2: AOIBinder); overload; virtual;
    function getBoolean(para1: JLString): jboolean; overload; virtual;
    function getBoolean(para1: JLString; para2: jboolean): jboolean; overload; virtual;
    function getByte(para1: JLString): jbyte; overload; virtual;
    function getByte(para1: JLString; para2: jbyte): JLByte; overload; virtual;
    function getChar(para1: JLString): jchar; overload; virtual;
    function getChar(para1: JLString; para2: jchar): jchar; overload; virtual;
    function getShort(para1: JLString): jshort; overload; virtual;
    function getShort(para1: JLString; para2: jshort): jshort; overload; virtual;
    function getFloat(para1: JLString): jfloat; overload; virtual;
    function getFloat(para1: JLString; para2: jfloat): jfloat; overload; virtual;
    function getCharSequence(para1: JLString): JLCharSequence; overload; virtual;
    function getCharSequence(para1: JLString; para2: JLCharSequence): JLCharSequence; overload; virtual;
    function getSize(para1: JLString): AUSize; overload; virtual;
    function getSizeF(para1: JLString): AUSizeF; overload; virtual;
    function getBundle(para1: JLString): AOBundle; overload; virtual;
    function getParcelable(para1: JLString): AOParcelable; overload; virtual;
    function getParcelableArray(para1: JLString): Arr1AOParcelable; overload; virtual;
    function getParcelableArrayList(para1: JLString): JUArrayList; overload; virtual;
    function getSparseParcelableArray(para1: JLString): AUSparseArray; overload; virtual;
    function getSerializable(para1: JLString): JISerializable; overload; virtual;
    function getIntegerArrayList(para1: JLString): JUArrayList; overload; virtual;
    function getStringArrayList(para1: JLString): JUArrayList; overload; virtual;
    function getCharSequenceArrayList(para1: JLString): JUArrayList; overload; virtual;
    function getBooleanArray(para1: JLString): Arr1jboolean; overload; virtual;
    function getByteArray(para1: JLString): Arr1jbyte; overload; virtual;
    function getShortArray(para1: JLString): Arr1jshort; overload; virtual;
    function getCharArray(para1: JLString): Arr1jchar; overload; virtual;
    function getFloatArray(para1: JLString): Arr1jfloat; overload; virtual;
    function getCharSequenceArray(para1: JLString): Arr1JLCharSequence; overload; virtual;
    function getBinder(para1: JLString): AOIBinder; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AODebug = class sealed external 'android.os' name 'Debug' (JLObject)
  public
    type
      InnerInstructionCount = class;
      Arr1InnerInstructionCount = array of InnerInstructionCount;
      Arr2InnerInstructionCount = array of Arr1InnerInstructionCount;
      Arr3InnerInstructionCount = array of Arr2InnerInstructionCount;
      InnerMemoryInfo = class;
      Arr1InnerMemoryInfo = array of InnerMemoryInfo;
      Arr2InnerMemoryInfo = array of Arr1InnerMemoryInfo;
      Arr3InnerMemoryInfo = array of Arr2InnerMemoryInfo;
      InnerInstructionCount = class external 'android.os' name 'InstructionCount' (JLObject)
      public
        constructor create(); overload;
        function resetAndStart(): jboolean; overload; virtual;
        function collect(): jboolean; overload; virtual;
        function globalTotal(): jint; overload; virtual;
        function globalMethodInvocations(): jint; overload; virtual;
      end;

      InnerMemoryInfo = class external 'android.os' name 'MemoryInfo' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        var
          fdalvikPrivateDirty: jint; external name 'dalvikPrivateDirty';
          fdalvikPss: jint; external name 'dalvikPss';
          fdalvikSharedDirty: jint; external name 'dalvikSharedDirty';
          fnativePrivateDirty: jint; external name 'nativePrivateDirty';
          fnativePss: jint; external name 'nativePss';
          fnativeSharedDirty: jint; external name 'nativeSharedDirty';
          fotherPrivateDirty: jint; external name 'otherPrivateDirty';
          fotherPss: jint; external name 'otherPss';
          fotherSharedDirty: jint; external name 'otherSharedDirty';
      public
        constructor create(); overload;
        function getTotalPss(): jint; overload; virtual;
        function getTotalSwappablePss(): jint; overload; virtual;
        function getTotalPrivateDirty(): jint; overload; virtual;
        function getTotalSharedDirty(): jint; overload; virtual;
        function getTotalPrivateClean(): jint; overload; virtual;
        function getTotalSharedClean(): jint; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
      end;

  public
    const
      SHOW_CLASSLOADER = 2;
      SHOW_FULL_DETAIL = 1;
      SHOW_INITIALIZED = 4;
      TRACE_COUNT_ALLOCS = 1;
  public
    class procedure waitForDebugger(); static; overload;
    class function waitingForDebugger(): jboolean; static; overload;
    class function isDebuggerConnected(): jboolean; static; overload;
    class procedure changeDebugPort(para1: jint); static; overload;
    class procedure startNativeTracing(); static; overload;
    class procedure stopNativeTracing(); static; overload;
    class procedure enableEmulatorTraceOutput(); static; overload;
    class procedure startMethodTracing(); static; overload;
    class procedure startMethodTracing(para1: JLString); static; overload;
    class procedure startMethodTracing(para1: JLString; para2: jint); static; overload;
    class procedure startMethodTracing(para1: JLString; para2: jint; para3: jint); static; overload;
    class procedure startMethodTracingSampling(para1: JLString; para2: jint; para3: jint); static; overload;
    class procedure stopMethodTracing(); static; overload;
    class function threadCpuTimeNanos(): jlong; static; overload;
    class procedure startAllocCounting(); static; overload;
    class procedure stopAllocCounting(); static; overload;
    class function getGlobalAllocCount(): jint; static; overload;
    class procedure resetGlobalAllocCount(); static; overload;
    class function getGlobalAllocSize(): jint; static; overload;
    class procedure resetGlobalAllocSize(); static; overload;
    class function getGlobalFreedCount(): jint; static; overload;
    class procedure resetGlobalFreedCount(); static; overload;
    class function getGlobalFreedSize(): jint; static; overload;
    class procedure resetGlobalFreedSize(); static; overload;
    class function getGlobalGcInvocationCount(): jint; static; overload;
    class procedure resetGlobalGcInvocationCount(); static; overload;
    class function getGlobalClassInitCount(): jint; static; overload;
    class procedure resetGlobalClassInitCount(); static; overload;
    class function getGlobalClassInitTime(): jint; static; overload;
    class procedure resetGlobalClassInitTime(); static; overload;
    class function getGlobalExternalAllocCount(): jint; static; overload;
    class procedure resetGlobalExternalAllocSize(); static; overload;
    class procedure resetGlobalExternalAllocCount(); static; overload;
    class function getGlobalExternalAllocSize(): jint; static; overload;
    class function getGlobalExternalFreedCount(): jint; static; overload;
    class procedure resetGlobalExternalFreedCount(); static; overload;
    class function getGlobalExternalFreedSize(): jint; static; overload;
    class procedure resetGlobalExternalFreedSize(); static; overload;
    class function getThreadAllocCount(): jint; static; overload;
    class procedure resetThreadAllocCount(); static; overload;
    class function getThreadAllocSize(): jint; static; overload;
    class procedure resetThreadAllocSize(); static; overload;
    class function getThreadExternalAllocCount(): jint; static; overload;
    class procedure resetThreadExternalAllocCount(); static; overload;
    class function getThreadExternalAllocSize(): jint; static; overload;
    class procedure resetThreadExternalAllocSize(); static; overload;
    class function getThreadGcInvocationCount(): jint; static; overload;
    class procedure resetThreadGcInvocationCount(); static; overload;
    class procedure resetAllCounts(); static; overload;
    class function getNativeHeapSize(): jlong; static; overload;
    class function getNativeHeapAllocatedSize(): jlong; static; overload;
    class function getNativeHeapFreeSize(): jlong; static; overload;
    class procedure getMemoryInfo(para1: AODebug.InnerMemoryInfo); static; overload;
    class function getPss(): jlong; static; overload;
    class function setAllocationLimit(para1: jint): jint; static; overload;
    class function setGlobalAllocationLimit(para1: jint): jint; static; overload;
    class procedure printLoadedClasses(para1: jint); static; overload;
    class function getLoadedClassCount(): jint; static; overload;
    class procedure dumpHprofData(para1: JLString); static; overload;  // throws java.io.IOException
    class function getBinderSentTransactions(): jint; static; overload;
    class function getBinderReceivedTransactions(): jint; static; overload;
    class function getBinderLocalObjectCount(): jint; static; overload; final;
    class function getBinderProxyObjectCount(): jint; static; overload; final;
    class function getBinderDeathObjectCount(): jint; static; overload; final;
    class function dumpService(para1: JLString; para2: JIFileDescriptor; para3: Arr1JLString): jboolean; static; overload;
    class function dumpService(para1: JLString; para2: JIFileDescriptor; var para3: array of JLString): jboolean; static; overload;
  end;

  AOMessage = class sealed external 'android.os' name 'Message' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      farg1: jint; external name 'arg1';
      farg2: jint; external name 'arg2';
      fobj: JLObject; external name 'obj';
      freplyTo: AOMessenger; external name 'replyTo';
      fsendingUid: jint; external name 'sendingUid';
      fwhat: jint; external name 'what';
  public
    constructor create(); overload;
    class function obtain(): AOMessage; static; overload;
    class function obtain(para1: AOMessage): AOMessage; static; overload;
    class function obtain(para1: AOHandler): AOMessage; static; overload;
    class function obtain(para1: AOHandler; para2: JLRunnable): AOMessage; static; overload;
    class function obtain(para1: AOHandler; para2: jint): AOMessage; static; overload;
    class function obtain(para1: AOHandler; para2: jint; para3: JLObject): AOMessage; static; overload;
    class function obtain(para1: AOHandler; para2: jint; para3: jint; para4: jint): AOMessage; static; overload;
    class function obtain(para1: AOHandler; para2: jint; para3: jint; para4: jint; para5: JLObject): AOMessage; static; overload;
    procedure recycle(); overload; virtual;
    procedure copyFrom(para1: AOMessage); overload; virtual;
    function getWhen(): jlong; overload; virtual;
    procedure setTarget(para1: AOHandler); overload; virtual;
    function getTarget(): AOHandler; overload; virtual;
    function getCallback(): JLRunnable; overload; virtual;
    function getData(): AOBundle; overload; virtual;
    function peekData(): AOBundle; overload; virtual;
    procedure setData(para1: AOBundle); overload; virtual;
    procedure sendToTarget(); overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AOMessenger = class sealed external 'android.os' name 'Messenger' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: AOHandler); overload;
    constructor create(para1: AOIBinder); overload;
    procedure send(para1: AOMessage); overload; virtual;  // throws android.os.RemoteException
    function getBinder(): AOIBinder; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    class procedure writeMessengerOrNullToParcel(para1: AOMessenger; para2: AOParcel); static; overload;
    class function readMessengerOrNullFromParcel(para1: AOParcel): AOMessenger; static; overload;
  end;

  AOParcel = class sealed external 'android.os' name 'Parcel' (JLObject)
  public
    final class var
      fSTRING_CREATOR: AOParcelable.InnerCreator; external name 'STRING_CREATOR';
  public
    class function obtain(): AOParcel; static; overload;
    procedure recycle(); overload; virtual; final;
    function dataSize(): jint; overload; virtual; final;
    function dataAvail(): jint; overload; virtual; final;
    function dataPosition(): jint; overload; virtual; final;
    function dataCapacity(): jint; overload; virtual; final;
    procedure setDataSize(para1: jint); overload; virtual; final;
    procedure setDataPosition(para1: jint); overload; virtual; final;
    procedure setDataCapacity(para1: jint); overload; virtual; final;
    function marshall(): Arr1jbyte; overload; virtual; final;
    procedure unmarshall(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; final;
    procedure unmarshall(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; final;
    procedure appendFrom(para1: AOParcel; para2: jint; para3: jint); overload; virtual; final;
    function hasFileDescriptors(): jboolean; overload; virtual; final;
    procedure writeInterfaceToken(para1: JLString); overload; virtual; final;
    procedure enforceInterface(para1: JLString); overload; virtual; final;
    procedure writeByteArray(para1: Arr1jbyte); overload; virtual; final;
    procedure writeByteArray(var para1: array of jbyte); overload; virtual; final;
    procedure writeByteArray(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; final;
    procedure writeByteArray(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; final;
    procedure writeInt(para1: jint); overload; virtual; final;
    procedure writeLong(para1: jlong); overload; virtual; final;
    procedure writeFloat(para1: jfloat); overload; virtual; final;
    procedure writeDouble(para1: jdouble); overload; virtual; final;
    procedure writeString(para1: JLString); overload; virtual; final;
    procedure writeStrongBinder(para1: AOIBinder); overload; virtual; final;
    procedure writeStrongInterface(para1: AOIInterface); overload; virtual; final;
    procedure writeFileDescriptor(para1: JIFileDescriptor); overload; virtual; final;
    procedure writeByte(para1: jbyte); overload; virtual; final;
    procedure writeMap(para1: JUMap); overload; virtual; final;
    procedure writeBundle(para1: AOBundle); overload; virtual; final;
    procedure writePersistableBundle(para1: AOPersistableBundle); overload; virtual; final;
    procedure writeSize(para1: AUSize); overload; virtual; final;
    procedure writeSizeF(para1: AUSizeF); overload; virtual; final;
    procedure writeList(para1: JUList); overload; virtual; final;
    procedure writeArray(para1: Arr1JLObject); overload; virtual; final;
    procedure writeArray(var para1: array of JLObject); overload; virtual; final;
    procedure writeSparseArray(para1: AUSparseArray); overload; virtual; final;
    procedure writeSparseBooleanArray(para1: AUSparseBooleanArray); overload; virtual; final;
    procedure writeBooleanArray(para1: Arr1jboolean); overload; virtual; final;
    procedure writeBooleanArray(var para1: array of jboolean); overload; virtual; final;
    function createBooleanArray(): Arr1jboolean; overload; virtual; final;
    procedure readBooleanArray(para1: Arr1jboolean); overload; virtual; final;
    procedure readBooleanArray(var para1: array of jboolean); overload; virtual; final;
    procedure writeCharArray(para1: Arr1jchar); overload; virtual; final;
    procedure writeCharArray(var para1: array of jchar); overload; virtual; final;
    function createCharArray(): Arr1jchar; overload; virtual; final;
    procedure readCharArray(para1: Arr1jchar); overload; virtual; final;
    procedure readCharArray(var para1: array of jchar); overload; virtual; final;
    procedure writeIntArray(para1: Arr1jint); overload; virtual; final;
    procedure writeIntArray(var para1: array of jint); overload; virtual; final;
    function createIntArray(): Arr1jint; overload; virtual; final;
    procedure readIntArray(para1: Arr1jint); overload; virtual; final;
    procedure readIntArray(var para1: array of jint); overload; virtual; final;
    procedure writeLongArray(para1: Arr1jlong); overload; virtual; final;
    procedure writeLongArray(var para1: array of jlong); overload; virtual; final;
    function createLongArray(): Arr1jlong; overload; virtual; final;
    procedure readLongArray(para1: Arr1jlong); overload; virtual; final;
    procedure readLongArray(var para1: array of jlong); overload; virtual; final;
    procedure writeFloatArray(para1: Arr1jfloat); overload; virtual; final;
    procedure writeFloatArray(var para1: array of jfloat); overload; virtual; final;
    function createFloatArray(): Arr1jfloat; overload; virtual; final;
    procedure readFloatArray(para1: Arr1jfloat); overload; virtual; final;
    procedure readFloatArray(var para1: array of jfloat); overload; virtual; final;
    procedure writeDoubleArray(para1: Arr1jdouble); overload; virtual; final;
    procedure writeDoubleArray(var para1: array of jdouble); overload; virtual; final;
    function createDoubleArray(): Arr1jdouble; overload; virtual; final;
    procedure readDoubleArray(para1: Arr1jdouble); overload; virtual; final;
    procedure readDoubleArray(var para1: array of jdouble); overload; virtual; final;
    procedure writeStringArray(para1: Arr1JLString); overload; virtual; final;
    procedure writeStringArray(var para1: array of JLString); overload; virtual; final;
    function createStringArray(): Arr1JLString; overload; virtual; final;
    procedure readStringArray(para1: Arr1JLString); overload; virtual; final;
    procedure readStringArray(var para1: array of JLString); overload; virtual; final;
    procedure writeBinderArray(para1: Arr1AOIBinder); overload; virtual; final;
    procedure writeBinderArray(var para1: array of AOIBinder); overload; virtual; final;
    function createBinderArray(): Arr1AOIBinder; overload; virtual; final;
    procedure readBinderArray(para1: Arr1AOIBinder); overload; virtual; final;
    procedure readBinderArray(var para1: array of AOIBinder); overload; virtual; final;
    procedure writeTypedList(para1: JUList); overload; virtual; final;
    procedure writeStringList(para1: JUList); overload; virtual; final;
    procedure writeBinderList(para1: JUList); overload; virtual; final;
    procedure writeTypedArray(para1: Arr1AOParcelable; para2: jint); overload; virtual; final;
    procedure writeTypedArray(var para1: array of AOParcelable; para2: jint); overload; virtual; final;
    procedure writeValue(para1: JLObject); overload; virtual; final;
    procedure writeParcelable(para1: AOParcelable; para2: jint); overload; virtual; final;
    procedure writeSerializable(para1: JISerializable); overload; virtual; final;
    procedure writeException(para1: JLException); overload; virtual; final;
    procedure writeNoException(); overload; virtual; final;
    procedure readException(); overload; virtual; final;
    procedure readException(para1: jint; para2: JLString); overload; virtual; final;
    function readInt(): jint; overload; virtual; final;
    function readLong(): jlong; overload; virtual; final;
    function readFloat(): jfloat; overload; virtual; final;
    function readDouble(): jdouble; overload; virtual; final;
    function readString(): JLString; overload; virtual; final;
    function readStrongBinder(): AOIBinder; overload; virtual; final;
    function readFileDescriptor(): AOParcelFileDescriptor; overload; virtual; final;
    function readByte(): jbyte; overload; virtual; final;
    procedure readMap(para1: JUMap; para2: JLClassLoader); overload; virtual; final;
    procedure readList(para1: JUList; para2: JLClassLoader); overload; virtual; final;
    function readHashMap(para1: JLClassLoader): JUHashMap; overload; virtual; final;
    function readBundle(): AOBundle; overload; virtual; final;
    function readBundle(para1: JLClassLoader): AOBundle; overload; virtual; final;
    function readPersistableBundle(): AOPersistableBundle; overload; virtual; final;
    function readPersistableBundle(para1: JLClassLoader): AOPersistableBundle; overload; virtual; final;
    function readSize(): AUSize; overload; virtual; final;
    function readSizeF(): AUSizeF; overload; virtual; final;
    function createByteArray(): Arr1jbyte; overload; virtual; final;
    procedure readByteArray(para1: Arr1jbyte); overload; virtual; final;
    procedure readByteArray(var para1: array of jbyte); overload; virtual; final;
    function readArrayList(para1: JLClassLoader): JUArrayList; overload; virtual; final;
    function readArray(para1: JLClassLoader): Arr1JLObject; overload; virtual; final;
    function readSparseArray(para1: JLClassLoader): AUSparseArray; overload; virtual; final;
    function readSparseBooleanArray(): AUSparseBooleanArray; overload; virtual; final;
    function createTypedArrayList(para1: AOParcelable.InnerCreator): JUArrayList; overload; virtual; final;
    procedure readTypedList(para1: JUList; para2: AOParcelable.InnerCreator); overload; virtual; final;
    function createStringArrayList(): JUArrayList; overload; virtual; final;
    function createBinderArrayList(): JUArrayList; overload; virtual; final;
    procedure readStringList(para1: JUList); overload; virtual; final;
    procedure readBinderList(para1: JUList); overload; virtual; final;
    function createTypedArray(para1: AOParcelable.InnerCreator): Arr1JLObject; overload; virtual; final;
    procedure readTypedArray(para1: Arr1JLObject; para2: AOParcelable.InnerCreator); overload; virtual; final;
    procedure readTypedArray(var para1: array of JLObject; para2: AOParcelable.InnerCreator); overload; virtual; final;
    procedure writeParcelableArray(para1: Arr1AOParcelable; para2: jint); overload; virtual; final;
    procedure writeParcelableArray(var para1: array of AOParcelable; para2: jint); overload; virtual; final;
    function readValue(para1: JLClassLoader): JLObject; overload; virtual; final;
    function readParcelable(para1: JLClassLoader): AOParcelable; overload; virtual; final;
    function readParcelableArray(para1: JLClassLoader): Arr1AOParcelable; overload; virtual; final;
    function readSerializable(): JISerializable; overload; virtual; final;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AOParcelUuid = class sealed external 'android.os' name 'ParcelUuid' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JUUUID); overload;
    class function fromString(para1: JLString): AOParcelUuid; static; overload;
    function getUuid(): JUUUID; overload; virtual;
    function toString(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AOPatternMatcher = class external 'android.os' name 'PatternMatcher' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      PATTERN_LITERAL = 0;
      PATTERN_PREFIX = 1;
      PATTERN_SIMPLE_GLOB = 2;
  public
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: AOParcel); overload;
    function getPath(): JLString; overload; virtual; final;
    function getType(): jint; overload; virtual; final;
    function match(para1: JLString): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AOResultReceiver = class external 'android.os' name 'ResultReceiver' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: AOHandler); overload;
    procedure send(para1: jint; para2: AOBundle); overload; virtual;
  strict protected
    procedure onReceiveResult(para1: jint; para2: AOBundle); overload; virtual;
  public
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AOWorkSource = class external 'android.os' name 'WorkSource' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(); overload;
    constructor create(para1: AOWorkSource); overload;
    procedure clear(); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function diff(para1: AOWorkSource): jboolean; overload; virtual;
    procedure &set(para1: AOWorkSource); overload; virtual;
    function add(para1: AOWorkSource): jboolean; overload; virtual;
    function remove(para1: AOWorkSource): jboolean; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ATNeighboringCellInfo = class external 'android.telephony' name 'NeighboringCellInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      UNKNOWN_CID = -1;
      UNKNOWN_RSSI = 99;
  public
    constructor create(); overload;
    constructor create(para1: jint; para2: jint); overload;
    constructor create(para1: jint; para2: JLString; para3: jint); overload;
    constructor create(para1: AOParcel); overload;
    function getRssi(): jint; overload; virtual;
    function getLac(): jint; overload; virtual;
    function getCid(): jint; overload; virtual;
    function getPsc(): jint; overload; virtual;
    function getNetworkType(): jint; overload; virtual;
    procedure setCid(para1: jint); overload; virtual;
    procedure setRssi(para1: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATServiceState = class external 'android.telephony' name 'ServiceState' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      STATE_EMERGENCY_ONLY = 2;
      STATE_IN_SERVICE = 0;
      STATE_OUT_OF_SERVICE = 1;
      STATE_POWER_OFF = 3;
  public
    constructor create(); overload;
    constructor create(para1: ATServiceState); overload;
    constructor create(para1: AOParcel); overload;
  strict protected
    procedure copyFrom(para1: ATServiceState); overload; virtual;
  public
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function getState(): jint; overload; virtual;
    function getRoaming(): jboolean; overload; virtual;
    function getOperatorAlphaLong(): JLString; overload; virtual;
    function getOperatorAlphaShort(): JLString; overload; virtual;
    function getOperatorNumeric(): JLString; overload; virtual;
    function getIsManualSelection(): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure setStateOutOfService(); overload; virtual;
    procedure setStateOff(); overload; virtual;
    procedure setState(para1: jint); overload; virtual;
    procedure setRoaming(para1: jboolean); overload; virtual;
    procedure setOperatorName(para1: JLString; para2: JLString; para3: JLString); overload; virtual;
    procedure setIsManualSelection(para1: jboolean); overload; virtual;
  end;

  ATSignalStrength = class external 'android.telephony' name 'SignalStrength' (JLObject, AOParcelable)
  public
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function getGsmSignalStrength(): jint; overload; virtual;
    function getGsmBitErrorRate(): jint; overload; virtual;
    function getCdmaDbm(): jint; overload; virtual;
    function getCdmaEcio(): jint; overload; virtual;
    function getEvdoDbm(): jint; overload; virtual;
    function getEvdoEcio(): jint; overload; virtual;
    function getEvdoSnr(): jint; overload; virtual;
    function isGsm(): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ATParcelableSpan = interface external 'android.text' name 'ParcelableSpan' (AOParcelable)
    function getSpanTypeId(): jint; overload;
  end;

  ATTextUtils = class external 'android.text' name 'TextUtils' (JLObject)
  public
    type
      InnerEllipsizeCallback = interface;
      Arr1InnerEllipsizeCallback = array of InnerEllipsizeCallback;
      Arr2InnerEllipsizeCallback = array of Arr1InnerEllipsizeCallback;
      Arr3InnerEllipsizeCallback = array of Arr2InnerEllipsizeCallback;
      InnerTruncateAt = class;
      Arr1InnerTruncateAt = array of InnerTruncateAt;
      Arr2InnerTruncateAt = array of Arr1InnerTruncateAt;
      Arr3InnerTruncateAt = array of Arr2InnerTruncateAt;
      InnerStringSplitter = interface;
      Arr1InnerStringSplitter = array of InnerStringSplitter;
      Arr2InnerStringSplitter = array of Arr1InnerStringSplitter;
      Arr3InnerStringSplitter = array of Arr2InnerStringSplitter;
      InnerSimpleStringSplitter = class;
      Arr1InnerSimpleStringSplitter = array of InnerSimpleStringSplitter;
      Arr2InnerSimpleStringSplitter = array of Arr1InnerSimpleStringSplitter;
      Arr3InnerSimpleStringSplitter = array of Arr2InnerSimpleStringSplitter;
      InnerEllipsizeCallback = interface external 'android.text' name 'EllipsizeCallback' 
        procedure ellipsized(para1: jint; para2: jint); overload;
      end;

      InnerTruncateAt = class sealed external 'android.text' name 'TruncateAt' (JLEnum)
      public
        final class var
          fEND: ATTextUtils.InnerTruncateAt; external name 'END';
          fMARQUEE: ATTextUtils.InnerTruncateAt; external name 'MARQUEE';
          fMIDDLE: ATTextUtils.InnerTruncateAt; external name 'MIDDLE';
          fSTART: ATTextUtils.InnerTruncateAt; external name 'START';
      public
        class function values(): ATTextUtils.Arr1InnerTruncateAt; static; overload;
        class function valueOf(para1: JLString): ATTextUtils.InnerTruncateAt; static; overload;
      end;

      InnerStringSplitter = interface external 'android.text' name 'StringSplitter' (JLIterable)
        procedure setString(para1: JLString); overload;
      end;

      InnerSimpleStringSplitter = class external 'android.text' name 'SimpleStringSplitter' (JLObject, ATTextUtils.InnerStringSplitter, JUIterator)
      public
        constructor create(para1: jchar); overload;
        procedure setString(para1: JLString); overload; virtual;
        function iterator(): JUIterator; overload; virtual;
        function hasNext(): jboolean; overload; virtual;
        function next(): JLString; overload; virtual;
        procedure remove(); overload; virtual;
        function next(): JLObject; overload; virtual;
      end;

  public
    const
      CAP_MODE_CHARACTERS = 4096;
      CAP_MODE_SENTENCES = 16384;
      CAP_MODE_WORDS = 8192;
  public
    final class var
      fCHAR_SEQUENCE_CREATOR: AOParcelable.InnerCreator; external name 'CHAR_SEQUENCE_CREATOR';
  public
    class procedure getChars(para1: JLCharSequence; para2: jint; para3: jint; para4: Arr1jchar; para5: jint); static; overload;
    class procedure getChars(para1: JLCharSequence; para2: jint; para3: jint; var para4: array of jchar; para5: jint); static; overload;
    class function indexOf(para1: JLCharSequence; para2: jchar): jint; static; overload;
    class function indexOf(para1: JLCharSequence; para2: jchar; para3: jint): jint; static; overload;
    class function indexOf(para1: JLCharSequence; para2: jchar; para3: jint; para4: jint): jint; static; overload;
    class function lastIndexOf(para1: JLCharSequence; para2: jchar): jint; static; overload;
    class function lastIndexOf(para1: JLCharSequence; para2: jchar; para3: jint): jint; static; overload;
    class function lastIndexOf(para1: JLCharSequence; para2: jchar; para3: jint; para4: jint): jint; static; overload;
    class function indexOf(para1: JLCharSequence; para2: JLCharSequence): jint; static; overload;
    class function indexOf(para1: JLCharSequence; para2: JLCharSequence; para3: jint): jint; static; overload;
    class function indexOf(para1: JLCharSequence; para2: JLCharSequence; para3: jint; para4: jint): jint; static; overload;
    class function regionMatches(para1: JLCharSequence; para2: jint; para3: JLCharSequence; para4: jint; para5: jint): jboolean; static; overload;
    class function substring(para1: JLCharSequence; para2: jint; para3: jint): JLString; static; overload;
    class function join(para1: JLCharSequence; para2: Arr1JLObject): JLString; static; overload;
    class function join(para1: JLCharSequence; var para2: array of JLObject): JLString; static; overload;
    class function join(para1: JLCharSequence; para2: JLIterable): JLString; static; overload;
    class function split(para1: JLString; para2: JLString): Arr1JLString; static; overload;
    class function split(para1: JLString; para2: JURPattern): Arr1JLString; static; overload;
    class function stringOrSpannedString(para1: JLCharSequence): JLCharSequence; static; overload;
    class function isEmpty(para1: JLCharSequence): jboolean; static; overload;
    class function getTrimmedLength(para1: JLCharSequence): jint; static; overload;
    class function equals(para1: JLCharSequence; para2: JLCharSequence): jboolean; static; overload;
    class function getReverse(para1: JLCharSequence; para2: jint; para3: jint): JLCharSequence; static; overload;
    class procedure writeToParcel(para1: JLCharSequence; para2: AOParcel; para3: jint); static; overload;
    class procedure dumpSpans(para1: JLCharSequence; para2: AUPrinter; para3: JLString); static; overload;
    class function replace(para1: JLCharSequence; para2: Arr1JLString; para3: Arr1JLCharSequence): JLCharSequence; static; overload;
    class function replace(para1: JLCharSequence; var para2: array of JLString; var para3: array of JLCharSequence): JLCharSequence; static; overload;
    class function expandTemplate(para1: JLCharSequence; para2: Arr1JLCharSequence): JLCharSequence; static; overload;
    class function expandTemplate(para1: JLCharSequence; const para2: array of JLCharSequence): JLCharSequence; static; overload;
    class function getOffsetBefore(para1: JLCharSequence; para2: jint): jint; static; overload;
    class function getOffsetAfter(para1: JLCharSequence; para2: jint): jint; static; overload;
    class procedure copySpansFrom(para1: ATSpanned; para2: jint; para3: jint; para4: JLClass; para5: ATSpannable; para6: jint); static; overload;
    class function ellipsize(para1: JLCharSequence; para2: ATTextPaint; para3: jfloat; para4: ATTextUtils.InnerTruncateAt): JLCharSequence; static; overload;
    class function ellipsize(para1: JLCharSequence; para2: ATTextPaint; para3: jfloat; para4: ATTextUtils.InnerTruncateAt; para5: jboolean; para6: ATTextUtils.InnerEllipsizeCallback): JLCharSequence; static; overload;
    class function commaEllipsize(para1: JLCharSequence; para2: ATTextPaint; para3: jfloat; para4: JLString; para5: JLString): JLCharSequence; static; overload;
    class function htmlEncode(para1: JLString): JLString; static; overload;
    class function concat(para1: Arr1JLCharSequence): JLCharSequence; static; overload;
    class function concat(const para1: array of JLCharSequence): JLCharSequence; static; overload;
    class function isGraphic(para1: JLCharSequence): jboolean; static; overload;
    class function isGraphic(para1: jchar): jboolean; static; overload;
    class function isDigitsOnly(para1: JLCharSequence): jboolean; static; overload;
    class function getCapsMode(para1: JLCharSequence; para2: jint; para3: jint): jint; static; overload;
    class function getLayoutDirectionFromLocale(para1: JULocale): jint; static; overload;
  end;

  AVAbsSavedState = class abstract external 'android.view' name 'AbsSavedState' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      fEMPTY_STATE: AVAbsSavedState; external name 'EMPTY_STATE';
  strict protected
    constructor create(para1: AOParcelable); overload;
    constructor create(para1: AOParcel); overload;
  public
    function getSuperState(): AOParcelable; overload; virtual; final;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AVDragEvent = class external 'android.view' name 'DragEvent' (JLObject, AOParcelable)
  public
    const
      ACTION_DRAG_ENDED = 4;
      ACTION_DRAG_ENTERED = 5;
      ACTION_DRAG_EXITED = 6;
      ACTION_DRAG_LOCATION = 2;
      ACTION_DRAG_STARTED = 1;
      ACTION_DROP = 3;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getAction(): jint; overload; virtual;
    function getX(): jfloat; overload; virtual;
    function getY(): jfloat; overload; virtual;
    function getClipData(): ACClipData; overload; virtual;
    function getClipDescription(): ACClipDescription; overload; virtual;
    function getLocalState(): JLObject; overload; virtual;
    function getResult(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AVInputDevice = class sealed external 'android.view' name 'InputDevice' (JLObject, AOParcelable)
  public
    type
      InnerMotionRange = class;
      Arr1InnerMotionRange = array of InnerMotionRange;
      Arr2InnerMotionRange = array of Arr1InnerMotionRange;
      Arr3InnerMotionRange = array of Arr2InnerMotionRange;
      InnerMotionRange = class sealed external 'android.view' name 'MotionRange' (JLObject)
      public
        function getAxis(): jint; overload; virtual;
        function getSource(): jint; overload; virtual;
        function isFromSource(para1: jint): jboolean; overload; virtual;
        function getMin(): jfloat; overload; virtual;
        function getMax(): jfloat; overload; virtual;
        function getRange(): jfloat; overload; virtual;
        function getFlat(): jfloat; overload; virtual;
        function getFuzz(): jfloat; overload; virtual;
        function getResolution(): jfloat; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      KEYBOARD_TYPE_ALPHABETIC = 2;
      KEYBOARD_TYPE_NONE = 0;
      KEYBOARD_TYPE_NON_ALPHABETIC = 1;
      MOTION_RANGE_ORIENTATION = 8 deprecated;
      MOTION_RANGE_PRESSURE = 2 deprecated;
      MOTION_RANGE_SIZE = 3 deprecated;
      MOTION_RANGE_TOOL_MAJOR = 6 deprecated;
      MOTION_RANGE_TOOL_MINOR = 7 deprecated;
      MOTION_RANGE_TOUCH_MAJOR = 4 deprecated;
      MOTION_RANGE_TOUCH_MINOR = 5 deprecated;
      MOTION_RANGE_X = 0 deprecated;
      MOTION_RANGE_Y = 1 deprecated;
      SOURCE_ANY = -256;
      SOURCE_CLASS_BUTTON = 1;
      SOURCE_CLASS_JOYSTICK = 16;
      SOURCE_CLASS_MASK = 255;
      SOURCE_CLASS_NONE = 0;
      SOURCE_CLASS_POINTER = 2;
      SOURCE_CLASS_POSITION = 8;
      SOURCE_CLASS_TRACKBALL = 4;
      SOURCE_DPAD = 513;
      SOURCE_GAMEPAD = 1025;
      SOURCE_HDMI = 33554433;
      SOURCE_JOYSTICK = 16777232;
      SOURCE_KEYBOARD = 257;
      SOURCE_MOUSE = 8194;
      SOURCE_STYLUS = 16386;
      SOURCE_TOUCHPAD = 1048584;
      SOURCE_TOUCHSCREEN = 4098;
      SOURCE_TOUCH_NAVIGATION = 2097152;
      SOURCE_TRACKBALL = 65540;
      SOURCE_UNKNOWN = 0;
  public
    class function getDevice(para1: jint): AVInputDevice; static; overload;
    class function getDeviceIds(): Arr1jint; static; overload;
    function getId(): jint; overload; virtual;
    function getControllerNumber(): jint; overload; virtual;
    function getVendorId(): jint; overload; virtual;
    function getProductId(): jint; overload; virtual;
    function getDescriptor(): JLString; overload; virtual;
    function isVirtual(): jboolean; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getSources(): jint; overload; virtual;
    function supportsSource(para1: jint): jboolean; overload; virtual;
    function getKeyboardType(): jint; overload; virtual;
    function getKeyCharacterMap(): AVKeyCharacterMap; overload; virtual;
    function hasKeys(para1: Arr1jint): Arr1jboolean; overload; virtual;
    function hasKeys(const para1: array of jint): Arr1jboolean; overload; virtual;
    function getMotionRange(para1: jint): AVInputDevice.InnerMotionRange; overload; virtual;
    function getMotionRange(para1: jint; para2: jint): AVInputDevice.InnerMotionRange; overload; virtual;
    function getMotionRanges(): JUList; overload; virtual;
    function getVibrator(): AOVibrator; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVInputEvent = class abstract external 'android.view' name 'InputEvent' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getDeviceId(): jint; overload; virtual; abstract;
    function getDevice(): AVInputDevice; overload; virtual; final;
    function getSource(): jint; overload; virtual; abstract;
    function isFromSource(para1: jint): jboolean; overload; virtual;
    function getEventTime(): jlong; overload; virtual; abstract;
    function describeContents(): jint; overload; virtual;
  end;

  AVSurface = class external 'android.view' name 'Surface' (JLObject, AOParcelable)
  public
    type
      InnerOutOfResourcesException = class;
      Arr1InnerOutOfResourcesException = array of InnerOutOfResourcesException;
      Arr2InnerOutOfResourcesException = array of Arr1InnerOutOfResourcesException;
      Arr3InnerOutOfResourcesException = array of Arr2InnerOutOfResourcesException;
      InnerOutOfResourcesException = class external 'android.view' name 'OutOfResourcesException' (JLRuntimeException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      ROTATION_0 = 0;
      ROTATION_180 = 2;
      ROTATION_270 = 3;
      ROTATION_90 = 1;
  public
    constructor create(para1: AGSurfaceTexture); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    procedure release(); overload; virtual;
    function isValid(): jboolean; overload; virtual;
    function lockCanvas(para1: AGRect): AGCanvas; overload; virtual;  // throws android.view.Surface$OutOfResourcesException, java.lang.IllegalArgumentException
    procedure unlockCanvasAndPost(para1: AGCanvas); overload; virtual;
    procedure unlockCanvas(para1: AGCanvas); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVAAccessibilityNodeInfo = class external 'android.view.accessibility' name 'AccessibilityNodeInfo' (JLObject, AOParcelable)
  public
    type
      InnerCollectionItemInfo = class;
      Arr1InnerCollectionItemInfo = array of InnerCollectionItemInfo;
      Arr2InnerCollectionItemInfo = array of Arr1InnerCollectionItemInfo;
      Arr3InnerCollectionItemInfo = array of Arr2InnerCollectionItemInfo;
      InnerCollectionInfo = class;
      Arr1InnerCollectionInfo = array of InnerCollectionInfo;
      Arr2InnerCollectionInfo = array of Arr1InnerCollectionInfo;
      Arr3InnerCollectionInfo = array of Arr2InnerCollectionInfo;
      InnerRangeInfo = class;
      Arr1InnerRangeInfo = array of InnerRangeInfo;
      Arr2InnerRangeInfo = array of Arr1InnerRangeInfo;
      Arr3InnerRangeInfo = array of Arr2InnerRangeInfo;
      InnerAccessibilityAction = class;
      Arr1InnerAccessibilityAction = array of InnerAccessibilityAction;
      Arr2InnerAccessibilityAction = array of Arr1InnerAccessibilityAction;
      Arr3InnerAccessibilityAction = array of Arr2InnerAccessibilityAction;
      InnerCollectionItemInfo = class sealed external 'android.view.accessibility' name 'CollectionItemInfo' (JLObject)
      public
        class function obtain(para1: jint; para2: jint; para3: jint; para4: jint; para5: jboolean): AVAAccessibilityNodeInfo.InnerCollectionItemInfo; static; overload;
        class function obtain(para1: jint; para2: jint; para3: jint; para4: jint; para5: jboolean; para6: jboolean): AVAAccessibilityNodeInfo.InnerCollectionItemInfo; static; overload;
        function getColumnIndex(): jint; overload; virtual;
        function getRowIndex(): jint; overload; virtual;
        function getColumnSpan(): jint; overload; virtual;
        function getRowSpan(): jint; overload; virtual;
        function isHeading(): jboolean; overload; virtual;
        function isSelected(): jboolean; overload; virtual;
      end;

      InnerCollectionInfo = class sealed external 'android.view.accessibility' name 'CollectionInfo' (JLObject)
      public
        const
          SELECTION_MODE_MULTIPLE = 2;
          SELECTION_MODE_NONE = 0;
          SELECTION_MODE_SINGLE = 1;
      public
        class function obtain(para1: jint; para2: jint; para3: jboolean): AVAAccessibilityNodeInfo.InnerCollectionInfo; static; overload;
        class function obtain(para1: jint; para2: jint; para3: jboolean; para4: jint): AVAAccessibilityNodeInfo.InnerCollectionInfo; static; overload;
        function getRowCount(): jint; overload; virtual;
        function getColumnCount(): jint; overload; virtual;
        function isHierarchical(): jboolean; overload; virtual;
        function getSelectionMode(): jint; overload; virtual;
      end;

      InnerRangeInfo = class sealed external 'android.view.accessibility' name 'RangeInfo' (JLObject)
      public
        const
          RANGE_TYPE_FLOAT = 1;
          RANGE_TYPE_INT = 0;
          RANGE_TYPE_PERCENT = 2;
      public
        class function obtain(para1: jint; para2: jfloat; para3: jfloat; para4: jfloat): AVAAccessibilityNodeInfo.InnerRangeInfo; static; overload;
        function getType(): jint; overload; virtual;
        function getMin(): jfloat; overload; virtual;
        function getMax(): jfloat; overload; virtual;
        function getCurrent(): jfloat; overload; virtual;
      end;

      InnerAccessibilityAction = class sealed external 'android.view.accessibility' name 'AccessibilityAction' (JLObject)
      public
        final class var
          fACTION_ACCESSIBILITY_FOCUS: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_ACCESSIBILITY_FOCUS';
          fACTION_CLEAR_ACCESSIBILITY_FOCUS: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_CLEAR_ACCESSIBILITY_FOCUS';
          fACTION_CLEAR_FOCUS: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_CLEAR_FOCUS';
          fACTION_CLEAR_SELECTION: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_CLEAR_SELECTION';
          fACTION_CLICK: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_CLICK';
          fACTION_COLLAPSE: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_COLLAPSE';
          fACTION_COPY: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_COPY';
          fACTION_CUT: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_CUT';
          fACTION_DISMISS: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_DISMISS';
          fACTION_EXPAND: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_EXPAND';
          fACTION_FOCUS: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_FOCUS';
          fACTION_LONG_CLICK: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_LONG_CLICK';
          fACTION_NEXT_AT_MOVEMENT_GRANULARITY: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_NEXT_AT_MOVEMENT_GRANULARITY';
          fACTION_NEXT_HTML_ELEMENT: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_NEXT_HTML_ELEMENT';
          fACTION_PASTE: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_PASTE';
          fACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY';
          fACTION_PREVIOUS_HTML_ELEMENT: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_PREVIOUS_HTML_ELEMENT';
          fACTION_SCROLL_BACKWARD: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_SCROLL_BACKWARD';
          fACTION_SCROLL_FORWARD: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_SCROLL_FORWARD';
          fACTION_SELECT: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_SELECT';
          fACTION_SET_SELECTION: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_SET_SELECTION';
          fACTION_SET_TEXT: AVAAccessibilityNodeInfo.InnerAccessibilityAction; external name 'ACTION_SET_TEXT';
      public
        constructor create(para1: jint; para2: JLCharSequence); overload;
        function getId(): jint; overload; virtual;
        function getLabel(): JLCharSequence; overload; virtual;
        function hashCode(): jint; overload; virtual;
        function equals(para1: JLObject): jboolean; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  public
    const
      ACTION_ACCESSIBILITY_FOCUS = 64;
      ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN = 'ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN';
      ACTION_ARGUMENT_HTML_ELEMENT_STRING = 'ACTION_ARGUMENT_HTML_ELEMENT_STRING';
      ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT = 'ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT';
      ACTION_ARGUMENT_SELECTION_END_INT = 'ACTION_ARGUMENT_SELECTION_END_INT';
      ACTION_ARGUMENT_SELECTION_START_INT = 'ACTION_ARGUMENT_SELECTION_START_INT';
      ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE = 'ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE';
      ACTION_CLEAR_ACCESSIBILITY_FOCUS = 128;
      ACTION_CLEAR_FOCUS = 2;
      ACTION_CLEAR_SELECTION = 8;
      ACTION_CLICK = 16;
      ACTION_COLLAPSE = 524288;
      ACTION_COPY = 16384;
      ACTION_CUT = 65536;
      ACTION_DISMISS = 1048576;
      ACTION_EXPAND = 262144;
      ACTION_FOCUS = 1;
      ACTION_LONG_CLICK = 32;
      ACTION_NEXT_AT_MOVEMENT_GRANULARITY = 256;
      ACTION_NEXT_HTML_ELEMENT = 1024;
      ACTION_PASTE = 32768;
      ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY = 512;
      ACTION_PREVIOUS_HTML_ELEMENT = 2048;
      ACTION_SCROLL_BACKWARD = 8192;
      ACTION_SCROLL_FORWARD = 4096;
      ACTION_SELECT = 4;
      ACTION_SET_SELECTION = 131072;
      ACTION_SET_TEXT = 2097152;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FOCUS_ACCESSIBILITY = 2;
      FOCUS_INPUT = 1;
      MOVEMENT_GRANULARITY_CHARACTER = 1;
      MOVEMENT_GRANULARITY_LINE = 4;
      MOVEMENT_GRANULARITY_PAGE = 16;
      MOVEMENT_GRANULARITY_PARAGRAPH = 8;
      MOVEMENT_GRANULARITY_WORD = 2;
  public
    procedure setSource(para1: AVView); overload; virtual;
    procedure setSource(para1: AVView; para2: jint); overload; virtual;
    function findFocus(para1: jint): AVAAccessibilityNodeInfo; overload; virtual;
    function focusSearch(para1: jint): AVAAccessibilityNodeInfo; overload; virtual;
    function getWindowId(): jint; overload; virtual;
    function refresh(): jboolean; overload; virtual;
    function getChildCount(): jint; overload; virtual;
    function getChild(para1: jint): AVAAccessibilityNodeInfo; overload; virtual;
    procedure addChild(para1: AVView); overload; virtual;
    function removeChild(para1: AVView): jboolean; overload; virtual;
    procedure addChild(para1: AVView; para2: jint); overload; virtual;
    function removeChild(para1: AVView; para2: jint): jboolean; overload; virtual;
    function getActionList(): JUList; overload; virtual;
    function getActions(): jint; overload; virtual;
    procedure addAction(para1: AVAAccessibilityNodeInfo.InnerAccessibilityAction); overload; virtual;
    procedure addAction(para1: jint); overload; virtual;
    procedure removeAction(para1: jint); overload; virtual;
    function removeAction(para1: AVAAccessibilityNodeInfo.InnerAccessibilityAction): jboolean; overload; virtual;
    procedure setMaxTextLength(para1: jint); overload; virtual;
    function getMaxTextLength(): jint; overload; virtual;
    procedure setMovementGranularities(para1: jint); overload; virtual;
    function getMovementGranularities(): jint; overload; virtual;
    function performAction(para1: jint): jboolean; overload; virtual;
    function performAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
    function findAccessibilityNodeInfosByText(para1: JLString): JUList; overload; virtual;
    function findAccessibilityNodeInfosByViewId(para1: JLString): JUList; overload; virtual;
    function getWindow(): AVAAccessibilityWindowInfo; overload; virtual;
    function getParent(): AVAAccessibilityNodeInfo; overload; virtual;
    procedure setParent(para1: AVView); overload; virtual;
    procedure setParent(para1: AVView; para2: jint); overload; virtual;
    procedure getBoundsInParent(para1: AGRect); overload; virtual;
    procedure setBoundsInParent(para1: AGRect); overload; virtual;
    procedure getBoundsInScreen(para1: AGRect); overload; virtual;
    procedure setBoundsInScreen(para1: AGRect); overload; virtual;
    function isCheckable(): jboolean; overload; virtual;
    procedure setCheckable(para1: jboolean); overload; virtual;
    function isChecked(): jboolean; overload; virtual;
    procedure setChecked(para1: jboolean); overload; virtual;
    function isFocusable(): jboolean; overload; virtual;
    procedure setFocusable(para1: jboolean); overload; virtual;
    function isFocused(): jboolean; overload; virtual;
    procedure setFocused(para1: jboolean); overload; virtual;
    function isVisibleToUser(): jboolean; overload; virtual;
    procedure setVisibleToUser(para1: jboolean); overload; virtual;
    function isAccessibilityFocused(): jboolean; overload; virtual;
    procedure setAccessibilityFocused(para1: jboolean); overload; virtual;
    function isSelected(): jboolean; overload; virtual;
    procedure setSelected(para1: jboolean); overload; virtual;
    function isClickable(): jboolean; overload; virtual;
    procedure setClickable(para1: jboolean); overload; virtual;
    function isLongClickable(): jboolean; overload; virtual;
    procedure setLongClickable(para1: jboolean); overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    function isPassword(): jboolean; overload; virtual;
    procedure setPassword(para1: jboolean); overload; virtual;
    function isScrollable(): jboolean; overload; virtual;
    procedure setScrollable(para1: jboolean); overload; virtual;
    function isEditable(): jboolean; overload; virtual;
    procedure setEditable(para1: jboolean); overload; virtual;
    function getCollectionInfo(): AVAAccessibilityNodeInfo.InnerCollectionInfo; overload; virtual;
    procedure setCollectionInfo(para1: AVAAccessibilityNodeInfo.InnerCollectionInfo); overload; virtual;
    function getCollectionItemInfo(): AVAAccessibilityNodeInfo.InnerCollectionItemInfo; overload; virtual;
    procedure setCollectionItemInfo(para1: AVAAccessibilityNodeInfo.InnerCollectionItemInfo); overload; virtual;
    function getRangeInfo(): AVAAccessibilityNodeInfo.InnerRangeInfo; overload; virtual;
    procedure setRangeInfo(para1: AVAAccessibilityNodeInfo.InnerRangeInfo); overload; virtual;
    function isContentInvalid(): jboolean; overload; virtual;
    procedure setContentInvalid(para1: jboolean); overload; virtual;
    function getLiveRegion(): jint; overload; virtual;
    procedure setLiveRegion(para1: jint); overload; virtual;
    function isMultiLine(): jboolean; overload; virtual;
    procedure setMultiLine(para1: jboolean); overload; virtual;
    function canOpenPopup(): jboolean; overload; virtual;
    procedure setCanOpenPopup(para1: jboolean); overload; virtual;
    function isDismissable(): jboolean; overload; virtual;
    procedure setDismissable(para1: jboolean); overload; virtual;
    function getPackageName(): JLCharSequence; overload; virtual;
    procedure setPackageName(para1: JLCharSequence); overload; virtual;
    function getClassName(): JLCharSequence; overload; virtual;
    procedure setClassName(para1: JLCharSequence); overload; virtual;
    function getText(): JLCharSequence; overload; virtual;
    procedure setText(para1: JLCharSequence); overload; virtual;
    procedure setError(para1: JLCharSequence); overload; virtual;
    function getError(): JLCharSequence; overload; virtual;
    function getContentDescription(): JLCharSequence; overload; virtual;
    procedure setContentDescription(para1: JLCharSequence); overload; virtual;
    procedure setLabelFor(para1: AVView); overload; virtual;
    procedure setLabelFor(para1: AVView; para2: jint); overload; virtual;
    function getLabelFor(): AVAAccessibilityNodeInfo; overload; virtual;
    procedure setLabeledBy(para1: AVView); overload; virtual;
    procedure setLabeledBy(para1: AVView; para2: jint); overload; virtual;
    function getLabeledBy(): AVAAccessibilityNodeInfo; overload; virtual;
    procedure setViewIdResourceName(para1: JLString); overload; virtual;
    function getViewIdResourceName(): JLString; overload; virtual;
    function getTextSelectionStart(): jint; overload; virtual;
    function getTextSelectionEnd(): jint; overload; virtual;
    procedure setTextSelection(para1: jint; para2: jint); overload; virtual;
    function getInputType(): jint; overload; virtual;
    procedure setInputType(para1: jint); overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function describeContents(): jint; overload; virtual;
    class function obtain(para1: AVView): AVAAccessibilityNodeInfo; static; overload;
    class function obtain(para1: AVView; para2: jint): AVAAccessibilityNodeInfo; static; overload;
    class function obtain(): AVAAccessibilityNodeInfo; static; overload;
    class function obtain(para1: AVAAccessibilityNodeInfo): AVAAccessibilityNodeInfo; static; overload;
    procedure recycle(); overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVICompletionInfo = class sealed external 'android.view.inputmethod' name 'CompletionInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: jlong; para2: jint; para3: JLCharSequence); overload;
    constructor create(para1: jlong; para2: jint; para3: JLCharSequence; para4: JLCharSequence); overload;
    function getId(): jlong; overload; virtual;
    function getPosition(): jint; overload; virtual;
    function getText(): JLCharSequence; overload; virtual;
    function getLabel(): JLCharSequence; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVICorrectionInfo = class sealed external 'android.view.inputmethod' name 'CorrectionInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: jint; para2: JLCharSequence; para3: JLCharSequence); overload;
    function getOffset(): jint; overload; virtual;
    function getOldText(): JLCharSequence; overload; virtual;
    function getNewText(): JLCharSequence; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVIExtractedText = class external 'android.view.inputmethod' name 'ExtractedText' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_SELECTING = 2;
      FLAG_SINGLE_LINE = 1;
  public
    var
      fflags: jint; external name 'flags';
      fpartialEndOffset: jint; external name 'partialEndOffset';
      fpartialStartOffset: jint; external name 'partialStartOffset';
      fselectionEnd: jint; external name 'selectionEnd';
      fselectionStart: jint; external name 'selectionStart';
      fstartOffset: jint; external name 'startOffset';
      ftext: JLCharSequence; external name 'text';
  public
    constructor create(); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVIExtractedTextRequest = class external 'android.view.inputmethod' name 'ExtractedTextRequest' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fflags: jint; external name 'flags';
      fhintMaxChars: jint; external name 'hintMaxChars';
      fhintMaxLines: jint; external name 'hintMaxLines';
      ftoken: jint; external name 'token';
  public
    constructor create(); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVIInputBinding = class sealed external 'android.view.inputmethod' name 'InputBinding' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: AVIInputConnection; para2: AOIBinder; para3: jint; para4: jint); overload;
    constructor create(para1: AVIInputConnection; para2: AVIInputBinding); overload;
    function getConnection(): AVIInputConnection; overload; virtual;
    function getConnectionToken(): AOIBinder; overload; virtual;
    function getUid(): jint; overload; virtual;
    function getPid(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVIInputMethodInfo = class sealed external 'android.view.inputmethod' name 'InputMethodInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: ACContext; para2: ACPResolveInfo); overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    constructor create(para1: JLString; para2: JLString; para3: JLCharSequence; para4: JLString); overload;
    function getId(): JLString; overload; virtual;
    function getPackageName(): JLString; overload; virtual;
    function getServiceName(): JLString; overload; virtual;
    function getServiceInfo(): ACPServiceInfo; overload; virtual;
    function getComponent(): ACComponentName; overload; virtual;
    function loadLabel(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function loadIcon(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function getSettingsActivity(): JLString; overload; virtual;
    function getSubtypeCount(): jint; overload; virtual;
    function getSubtypeAt(para1: jint): AVIInputMethodSubtype; overload; virtual;
    function getIsDefaultResourceId(): jint; overload; virtual;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVIInputMethodSubtype = class sealed external 'android.view.inputmethod' name 'InputMethodSubtype' (JLObject, AOParcelable)
  public
    type
      InnerInputMethodSubtypeBuilder = class;
      Arr1InnerInputMethodSubtypeBuilder = array of InnerInputMethodSubtypeBuilder;
      Arr2InnerInputMethodSubtypeBuilder = array of Arr1InnerInputMethodSubtypeBuilder;
      Arr3InnerInputMethodSubtypeBuilder = array of Arr2InnerInputMethodSubtypeBuilder;
      InnerInputMethodSubtypeBuilder = class external 'android.view.inputmethod' name 'InputMethodSubtypeBuilder' (JLObject)
      public
        constructor create(); overload;
        function setIsAuxiliary(para1: jboolean): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function setOverridesImplicitlyEnabledSubtype(para1: jboolean): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function setIsAsciiCapable(para1: jboolean): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function setSubtypeIconResId(para1: jint): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function setSubtypeNameResId(para1: jint): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function setSubtypeId(para1: jint): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function setSubtypeLocale(para1: JLString): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function setSubtypeMode(para1: JLString): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function setSubtypeExtraValue(para1: JLString): AVIInputMethodSubtype.InnerInputMethodSubtypeBuilder; overload; virtual;
        function build(): AVIInputMethodSubtype; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: jint; para2: jint; para3: JLString; para4: JLString; para5: JLString; para6: jboolean; para7: jboolean); overload;
    constructor create(para1: jint; para2: jint; para3: JLString; para4: JLString; para5: JLString; para6: jboolean; para7: jboolean; para8: jint); overload;
    function getNameResId(): jint; overload; virtual;
    function getIconResId(): jint; overload; virtual;
    function getLocale(): JLString; overload; virtual;
    function getMode(): JLString; overload; virtual;
    function getExtraValue(): JLString; overload; virtual;
    function isAuxiliary(): jboolean; overload; virtual;
    function overridesImplicitlyEnabledSubtype(): jboolean; overload; virtual;
    function isAsciiCapable(): jboolean; overload; virtual;
    function getDisplayName(para1: ACContext; para2: JLString; para3: ACPApplicationInfo): JLCharSequence; overload; virtual;
    function containsExtraValueKey(para1: JLString): jboolean; overload; virtual;
    function getExtraValueOf(para1: JLString): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AVTSpellCheckerInfo = class sealed external 'android.view.textservice' name 'SpellCheckerInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getId(): JLString; overload; virtual;
    function getComponent(): ACComponentName; overload; virtual;
    function getPackageName(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function loadLabel(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function loadIcon(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    function getServiceInfo(): ACPServiceInfo; overload; virtual;
    function getSettingsActivity(): JLString; overload; virtual;
    function getSubtypeCount(): jint; overload; virtual;
    function getSubtypeAt(para1: jint): AVTSpellCheckerSubtype; overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVTSpellCheckerSubtype = class sealed external 'android.view.textservice' name 'SpellCheckerSubtype' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: jint; para2: JLString; para3: JLString); overload;
    function getNameResId(): jint; overload; virtual;
    function getLocale(): JLString; overload; virtual;
    function getExtraValue(): JLString; overload; virtual;
    function containsExtraValueKey(para1: JLString): jboolean; overload; virtual;
    function getExtraValueOf(para1: JLString): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getDisplayName(para1: ACContext; para2: JLString; para3: ACPApplicationInfo): JLCharSequence; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AVTSuggestionsInfo = class sealed external 'android.view.textservice' name 'SuggestionsInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS = 4;
      RESULT_ATTR_IN_THE_DICTIONARY = 1;
      RESULT_ATTR_LOOKS_LIKE_TYPO = 2;
  public
    constructor create(para1: jint; para2: Arr1JLString); overload;
    constructor create(para1: jint; const para2: array of JLString); overload;
    constructor create(para1: jint; para2: Arr1JLString; para3: jint; para4: jint); overload;
    constructor create(para1: jint; const para2: array of JLString; para3: jint; para4: jint); overload;
    constructor create(para1: AOParcel); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure setCookieAndSequence(para1: jint; para2: jint); overload; virtual;
    function getCookie(): jint; overload; virtual;
    function getSequence(): jint; overload; virtual;
    function getSuggestionsAttributes(): jint; overload; virtual;
    function getSuggestionsCount(): jint; overload; virtual;
    function getSuggestionAt(para1: jint): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVTTextInfo = class sealed external 'android.view.textservice' name 'TextInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: jint; para3: jint); overload;
    constructor create(para1: JLCharSequence; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    constructor create(para1: AOParcel); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getText(): JLString; overload; virtual;
    function getCharSequence(): JLCharSequence; overload; virtual;
    function getCookie(): jint; overload; virtual;
    function getSequence(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  APCallLog = class external 'android.provider' name 'CallLog' (JLObject)
  public
    type
      InnerCalls = class;
      Arr1InnerCalls = array of InnerCalls;
      Arr2InnerCalls = array of Arr1InnerCalls;
      Arr3InnerCalls = array of Arr2InnerCalls;
      InnerCalls = class external 'android.provider' name 'Calls' (JLObject, APBaseColumns)
      public
        const
          CACHED_FORMATTED_NUMBER = 'formatted_number';
          CACHED_LOOKUP_URI = 'lookup_uri';
          CACHED_MATCHED_NUMBER = 'matched_number';
          CACHED_NAME = 'name';
          CACHED_NORMALIZED_NUMBER = 'normalized_number';
          CACHED_NUMBER_LABEL = 'numberlabel';
          CACHED_NUMBER_TYPE = 'numbertype';
          CACHED_PHOTO_ID = 'photo_id';
      public
        final class var
          fCONTENT_FILTER_URI: ANUri; external name 'CONTENT_FILTER_URI';
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/calls';
          CONTENT_TYPE = 'vnd.android.cursor.dir/calls';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          fCONTENT_URI_WITH_VOICEMAIL: ANUri; external name 'CONTENT_URI_WITH_VOICEMAIL';
      public
        const
          COUNTRY_ISO = 'countryiso';
          DATA_USAGE = 'data_usage';
          DATE = 'date';
          DEFAULT_SORT_ORDER = 'date DESC';
          DURATION = 'duration';
          EXTRA_CALL_TYPE_FILTER = 'android.provider.extra.CALL_TYPE_FILTER';
          FEATURES = 'features';
          FEATURES_VIDEO = 1;
          GEOCODED_LOCATION = 'geocoded_location';
          INCOMING_TYPE = 1;
          IS_READ = 'is_read';
          LIMIT_PARAM_KEY = 'limit';
          MISSED_TYPE = 3;
          NEW = 'new';
          NUMBER = 'number';
          NUMBER_PRESENTATION = 'presentation';
          OFFSET_PARAM_KEY = 'offset';
          OUTGOING_TYPE = 2;
          PHONE_ACCOUNT_COMPONENT_NAME = 'subscription_component_name';
          PHONE_ACCOUNT_ID = 'subscription_id';
          PRESENTATION_ALLOWED = 1;
          PRESENTATION_PAYPHONE = 4;
          PRESENTATION_RESTRICTED = 2;
          PRESENTATION_UNKNOWN = 3;
          TRANSCRIPTION = 'transcription';
          &TYPE = 'type';
          VOICEMAIL_TYPE = 4;
          VOICEMAIL_URI = 'voicemail_uri';
      public
        constructor create(); overload;
        class function getLastOutgoingCall(para1: ACContext): JLString; static; overload;
      end;

  public
    const
      AUTHORITY = 'call_log';
  public
    final class var
      fCONTENT_URI: ANUri; external name 'CONTENT_URI';
  public
    constructor create(); overload;
  end;

  APLiveFolders = class sealed external 'android.provider' name 'LiveFolders' (JLObject, APBaseColumns)
  public
    const
      ACTION_CREATE_LIVE_FOLDER = 'android.intent.action.CREATE_LIVE_FOLDER';
      DESCRIPTION = 'description';
      DISPLAY_MODE_GRID = 1;
      DISPLAY_MODE_LIST = 2;
      EXTRA_LIVE_FOLDER_BASE_INTENT = 'android.intent.extra.livefolder.BASE_INTENT';
      EXTRA_LIVE_FOLDER_DISPLAY_MODE = 'android.intent.extra.livefolder.DISPLAY_MODE';
      EXTRA_LIVE_FOLDER_ICON = 'android.intent.extra.livefolder.ICON';
      EXTRA_LIVE_FOLDER_NAME = 'android.intent.extra.livefolder.NAME';
      ICON_BITMAP = 'icon_bitmap';
      ICON_PACKAGE = 'icon_package';
      ICON_RESOURCE = 'icon_resource';
      INTENT = 'intent';
      NAME = 'name';
  end;

  APSyncStateContract = class external 'android.provider' name 'SyncStateContract' (JLObject)
  public
    type
      InnerHelpers = class;
      Arr1InnerHelpers = array of InnerHelpers;
      Arr2InnerHelpers = array of Arr1InnerHelpers;
      Arr3InnerHelpers = array of Arr2InnerHelpers;
      InnerColumns = interface;
      Arr1InnerColumns = array of InnerColumns;
      Arr2InnerColumns = array of Arr1InnerColumns;
      Arr3InnerColumns = array of Arr2InnerColumns;
      InnerConstants = class;
      Arr1InnerConstants = array of InnerConstants;
      Arr2InnerConstants = array of Arr1InnerConstants;
      Arr3InnerConstants = array of Arr2InnerConstants;
      InnerHelpers = class sealed external 'android.provider' name 'Helpers' (JLObject)
      public
        constructor create(); overload;
        class function get(para1: ACContentProviderClient; para2: ANUri; para3: AAAccount): Arr1jbyte; static; overload;  // throws android.os.RemoteException
        class procedure &set(para1: ACContentProviderClient; para2: ANUri; para3: AAAccount; para4: Arr1jbyte); static; overload;  // throws android.os.RemoteException
        class procedure &set(para1: ACContentProviderClient; para2: ANUri; para3: AAAccount; var para4: array of jbyte); static; overload;  // throws android.os.RemoteException
        class function insert(para1: ACContentProviderClient; para2: ANUri; para3: AAAccount; para4: Arr1jbyte): ANUri; static; overload;  // throws android.os.RemoteException
        class function insert(para1: ACContentProviderClient; para2: ANUri; para3: AAAccount; var para4: array of jbyte): ANUri; static; overload;  // throws android.os.RemoteException
        class procedure update(para1: ACContentProviderClient; para2: ANUri; para3: Arr1jbyte); static; overload;  // throws android.os.RemoteException
        class procedure update(para1: ACContentProviderClient; para2: ANUri; var para3: array of jbyte); static; overload;  // throws android.os.RemoteException
        class function getWithUri(para1: ACContentProviderClient; para2: ANUri; para3: AAAccount): AUPair; static; overload;  // throws android.os.RemoteException
        class function newSetOperation(para1: ANUri; para2: AAAccount; para3: Arr1jbyte): ACContentProviderOperation; static; overload;
        class function newSetOperation(para1: ANUri; para2: AAAccount; var para3: array of jbyte): ACContentProviderOperation; static; overload;
        class function newUpdateOperation(para1: ANUri; para2: Arr1jbyte): ACContentProviderOperation; static; overload;
        class function newUpdateOperation(para1: ANUri; var para2: array of jbyte): ACContentProviderOperation; static; overload;
      end;

      InnerColumns = interface external 'android.provider' name 'Columns' (APBaseColumns)
        const
          ACCOUNT_NAME = 'account_name';
          ACCOUNT_TYPE = 'account_type';
          DATA = 'data';
      end;

      InnerConstants = class external 'android.provider' name 'Constants' (JLObject, APSyncStateContract.InnerColumns)
      public
        const
          CONTENT_DIRECTORY = 'syncstate';
      public
        constructor create(); overload;
      end;

  public
    constructor create(); overload;
  end;

  APUserDictionary = class external 'android.provider' name 'UserDictionary' (JLObject)
  public
    type
      InnerWords = class;
      Arr1InnerWords = array of InnerWords;
      Arr2InnerWords = array of Arr1InnerWords;
      Arr3InnerWords = array of Arr2InnerWords;
      InnerWords = class external 'android.provider' name 'Words' (JLObject, APBaseColumns)
      public
        const
          APP_ID = 'appid';
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/vnd.google.userword';
          CONTENT_TYPE = 'vnd.android.cursor.dir/vnd.google.userword';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'frequency DESC';
          FREQUENCY = 'frequency';
          LOCALE = 'locale';
          LOCALE_TYPE_ALL = 0 deprecated;
          LOCALE_TYPE_CURRENT = 1 deprecated;
          SHORTCUT = 'shortcut';
          WORD = 'word';
          _ID = '_id';
      public
        constructor create(); overload;
        class procedure addWord(para1: ACContext; para2: JLString; para3: jint; para4: jint); static; overload;
        class procedure addWord(para1: ACContext; para2: JLString; para3: jint; para4: JLString; para5: JULocale); static; overload;
      end;

  public
    const
      AUTHORITY = 'user_dictionary';
  public
    final class var
      fCONTENT_URI: ANUri; external name 'CONTENT_URI';
  public
    constructor create(); overload;
  end;

  APVoicemailContract = class external 'android.provider' name 'VoicemailContract' (JLObject)
  public
    type
      InnerStatus = class;
      Arr1InnerStatus = array of InnerStatus;
      Arr2InnerStatus = array of Arr1InnerStatus;
      Arr3InnerStatus = array of Arr2InnerStatus;
      InnerVoicemails = class;
      Arr1InnerVoicemails = array of InnerVoicemails;
      Arr2InnerVoicemails = array of Arr1InnerVoicemails;
      Arr3InnerVoicemails = array of Arr2InnerVoicemails;
      InnerStatus = class sealed external 'android.provider' name 'Status' (JLObject, APBaseColumns)
      public
        const
          CONFIGURATION_STATE = 'configuration_state';
          CONFIGURATION_STATE_CAN_BE_CONFIGURED = 2;
          CONFIGURATION_STATE_NOT_CONFIGURED = 1;
          CONFIGURATION_STATE_OK = 0;
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DATA_CHANNEL_STATE = 'data_channel_state';
          DATA_CHANNEL_STATE_NO_CONNECTION = 1;
          DATA_CHANNEL_STATE_OK = 0;
          DIR_TYPE = 'vnd.android.cursor.dir/voicemail.source.status';
          ITEM_TYPE = 'vnd.android.cursor.item/voicemail.source.status';
          NOTIFICATION_CHANNEL_STATE = 'notification_channel_state';
          NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING = 2;
          NOTIFICATION_CHANNEL_STATE_NO_CONNECTION = 1;
          NOTIFICATION_CHANNEL_STATE_OK = 0;
          SETTINGS_URI = 'settings_uri';
          SOURCE_PACKAGE = 'source_package';
          VOICEMAIL_ACCESS_URI = 'voicemail_access_uri';
      public
        class function buildSourceUri(para1: JLString): ANUri; static; overload;
      end;

      InnerVoicemails = class sealed external 'android.provider' name 'Voicemails' (JLObject, APBaseColumns, APOpenableColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DATE = 'date';
          DIR_TYPE = 'vnd.android.cursor.dir/voicemails';
          DURATION = 'duration';
          HAS_CONTENT = 'has_content';
          IS_READ = 'is_read';
          ITEM_TYPE = 'vnd.android.cursor.item/voicemail';
          MIME_TYPE = 'mime_type';
          NUMBER = 'number';
          SOURCE_DATA = 'source_data';
          SOURCE_PACKAGE = 'source_package';
          TRANSCRIPTION = 'transcription';
      public
        class function buildSourceUri(para1: JLString): ANUri; static; overload;
      end;

  public
    const
      ACTION_FETCH_VOICEMAIL = 'android.intent.action.FETCH_VOICEMAIL';
      ACTION_NEW_VOICEMAIL = 'android.intent.action.NEW_VOICEMAIL';
      AUTHORITY = 'com.android.voicemail';
      EXTRA_SELF_CHANGE = 'com.android.voicemail.extra.SELF_CHANGE';
      PARAM_KEY_SOURCE_PACKAGE = 'source_package';
  end;

  ARAllocation = class external 'android.renderscript' name 'Allocation' (ARBaseObj)
  public
    type
      InnerOnBufferAvailableListener = interface;
      Arr1InnerOnBufferAvailableListener = array of InnerOnBufferAvailableListener;
      Arr2InnerOnBufferAvailableListener = array of Arr1InnerOnBufferAvailableListener;
      Arr3InnerOnBufferAvailableListener = array of Arr2InnerOnBufferAvailableListener;
      InnerMipmapControl = class;
      Arr1InnerMipmapControl = array of InnerMipmapControl;
      Arr2InnerMipmapControl = array of Arr1InnerMipmapControl;
      Arr3InnerMipmapControl = array of Arr2InnerMipmapControl;
      InnerOnBufferAvailableListener = interface external 'android.renderscript' name 'OnBufferAvailableListener' 
        procedure onBufferAvailable(para1: ARAllocation); overload;
      end;

      InnerMipmapControl = class sealed external 'android.renderscript' name 'MipmapControl' (JLEnum)
      public
        final class var
          fMIPMAP_FULL: ARAllocation.InnerMipmapControl; external name 'MIPMAP_FULL';
          fMIPMAP_NONE: ARAllocation.InnerMipmapControl; external name 'MIPMAP_NONE';
          fMIPMAP_ON_SYNC_TO_TEXTURE: ARAllocation.InnerMipmapControl; external name 'MIPMAP_ON_SYNC_TO_TEXTURE';
      public
        class function values(): ARAllocation.Arr1InnerMipmapControl; static; overload;
        class function valueOf(para1: JLString): ARAllocation.InnerMipmapControl; static; overload;
      end;

  public
    const
      USAGE_GRAPHICS_CONSTANTS = 8;
      USAGE_GRAPHICS_RENDER_TARGET = 16;
      USAGE_GRAPHICS_TEXTURE = 2;
      USAGE_GRAPHICS_VERTEX = 4;
      USAGE_IO_INPUT = 32;
      USAGE_IO_OUTPUT = 64;
      USAGE_SCRIPT = 1;
      USAGE_SHARED = 128;
  public
    function getElement(): ARElement; overload; virtual;
    function getUsage(): jint; overload; virtual;
    function getBytesSize(): jint; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function getType(): ARType; overload; virtual;
    procedure syncAll(para1: jint); overload; virtual;
    procedure ioSend(); overload; virtual;
    procedure ioReceive(); overload; virtual;
    procedure copyFrom(para1: Arr1ARBaseObj); overload; virtual;
    procedure copyFrom(var para1: array of ARBaseObj); overload; virtual;
    procedure copyFromUnchecked(para1: JLObject); overload; virtual;
    procedure copyFromUnchecked(para1: Arr1jint); overload; virtual;
    procedure copyFromUnchecked(var para1: array of jint); overload; virtual;
    procedure copyFromUnchecked(para1: Arr1jshort); overload; virtual;
    procedure copyFromUnchecked(var para1: array of jshort); overload; virtual;
    procedure copyFromUnchecked(para1: Arr1jbyte); overload; virtual;
    procedure copyFromUnchecked(var para1: array of jbyte); overload; virtual;
    procedure copyFromUnchecked(para1: Arr1jfloat); overload; virtual;
    procedure copyFromUnchecked(var para1: array of jfloat); overload; virtual;
    procedure copyFrom(para1: JLObject); overload; virtual;
    procedure copyFrom(para1: Arr1jint); overload; virtual;
    procedure copyFrom(var para1: array of jint); overload; virtual;
    procedure copyFrom(para1: Arr1jshort); overload; virtual;
    procedure copyFrom(var para1: array of jshort); overload; virtual;
    procedure copyFrom(para1: Arr1jbyte); overload; virtual;
    procedure copyFrom(var para1: array of jbyte); overload; virtual;
    procedure copyFrom(para1: Arr1jfloat); overload; virtual;
    procedure copyFrom(var para1: array of jfloat); overload; virtual;
    procedure copyFrom(para1: AGBitmap); overload; virtual;
    procedure copyFrom(para1: ARAllocation); overload; virtual;
    procedure setFromFieldPacker(para1: jint; para2: ARFieldPacker); overload; virtual;
    procedure setFromFieldPacker(para1: jint; para2: jint; para3: ARFieldPacker); overload; virtual;
    procedure generateMipmaps(); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; para3: JLObject); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; para3: Arr1jint); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; var para3: array of jint); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; para3: Arr1jshort); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; var para3: array of jshort); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; para3: Arr1jbyte); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; var para3: array of jbyte); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; para3: Arr1jfloat); overload; virtual;
    procedure copy1DRangeFromUnchecked(para1: jint; para2: jint; var para3: array of jfloat); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; para3: JLObject); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; para3: Arr1jint); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; var para3: array of jint); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; para3: Arr1jshort); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; var para3: array of jshort); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; para3: Arr1jbyte); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; var para3: array of jbyte); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; para3: Arr1jfloat); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; var para3: array of jfloat); overload; virtual;
    procedure copy1DRangeFrom(para1: jint; para2: jint; para3: ARAllocation; para4: jint); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; para5: JLObject); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jbyte); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jbyte); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jshort); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jshort); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jint); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jint); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jfloat); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jfloat); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: jint; para4: jint; para5: ARAllocation; para6: jint; para7: jint); overload; virtual;
    procedure copy2DRangeFrom(para1: jint; para2: jint; para3: AGBitmap); overload; virtual;
    procedure copyTo(para1: AGBitmap); overload; virtual;
    procedure copyTo(para1: JLObject); overload; virtual;
    procedure copyTo(para1: Arr1jbyte); overload; virtual;
    procedure copyTo(var para1: array of jbyte); overload; virtual;
    procedure copyTo(para1: Arr1jshort); overload; virtual;
    procedure copyTo(var para1: array of jshort); overload; virtual;
    procedure copyTo(para1: Arr1jint); overload; virtual;
    procedure copyTo(var para1: array of jint); overload; virtual;
    procedure copyTo(para1: Arr1jfloat); overload; virtual;
    procedure copyTo(var para1: array of jfloat); overload; virtual;
    procedure resize(para1: jint); overload; virtual;
    class function createTyped(para1: ARRenderScript; para2: ARType; para3: ARAllocation.InnerMipmapControl; para4: jint): ARAllocation; static; overload;
    class function createTyped(para1: ARRenderScript; para2: ARType; para3: jint): ARAllocation; static; overload;
    class function createTyped(para1: ARRenderScript; para2: ARType): ARAllocation; static; overload;
    class function createSized(para1: ARRenderScript; para2: ARElement; para3: jint; para4: jint): ARAllocation; static; overload;
    class function createSized(para1: ARRenderScript; para2: ARElement; para3: jint): ARAllocation; static; overload;
    class function createFromBitmap(para1: ARRenderScript; para2: AGBitmap; para3: ARAllocation.InnerMipmapControl; para4: jint): ARAllocation; static; overload;
    function getSurface(): AVSurface; overload; virtual;
    procedure setSurface(para1: AVSurface); overload; virtual;
    class function createFromBitmap(para1: ARRenderScript; para2: AGBitmap): ARAllocation; static; overload;
    class function createCubemapFromBitmap(para1: ARRenderScript; para2: AGBitmap; para3: ARAllocation.InnerMipmapControl; para4: jint): ARAllocation; static; overload;
    class function createCubemapFromBitmap(para1: ARRenderScript; para2: AGBitmap): ARAllocation; static; overload;
    class function createCubemapFromCubeFaces(para1: ARRenderScript; para2: AGBitmap; para3: AGBitmap; para4: AGBitmap; para5: AGBitmap; para6: AGBitmap; para7: AGBitmap; para8: ARAllocation.InnerMipmapControl; para9: jint): ARAllocation; static; overload;
    class function createCubemapFromCubeFaces(para1: ARRenderScript; para2: AGBitmap; para3: AGBitmap; para4: AGBitmap; para5: AGBitmap; para6: AGBitmap; para7: AGBitmap): ARAllocation; static; overload;
    class function createFromBitmapResource(para1: ARRenderScript; para2: ACRResources; para3: jint; para4: ARAllocation.InnerMipmapControl; para5: jint): ARAllocation; static; overload;
    class function createFromBitmapResource(para1: ARRenderScript; para2: ACRResources; para3: jint): ARAllocation; static; overload;
    class function createFromString(para1: ARRenderScript; para2: JLString; para3: jint): ARAllocation; static; overload;
    procedure setOnBufferAvailableListener(para1: ARAllocation.InnerOnBufferAvailableListener); overload; virtual;
  end;

  ARElement = class external 'android.renderscript' name 'Element' (ARBaseObj)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerDataKind = class;
      Arr1InnerDataKind = array of InnerDataKind;
      Arr2InnerDataKind = array of Arr1InnerDataKind;
      Arr3InnerDataKind = array of Arr2InnerDataKind;
      InnerDataType = class;
      Arr1InnerDataType = array of InnerDataType;
      Arr2InnerDataType = array of Arr1InnerDataType;
      Arr3InnerDataType = array of Arr2InnerDataType;
      InnerBuilder = class external 'android.renderscript' name 'Builder' (JLObject)
      public
        constructor create(para1: ARRenderScript); overload;
        function add(para1: ARElement; para2: JLString; para3: jint): ARElement.InnerBuilder; overload; virtual;
        function add(para1: ARElement; para2: JLString): ARElement.InnerBuilder; overload; virtual;
        function create_(): ARElement; external name 'create'; overload; virtual;
      end;

      InnerDataKind = class sealed external 'android.renderscript' name 'DataKind' (JLEnum)
      public
        final class var
          fPIXEL_A: ARElement.InnerDataKind; external name 'PIXEL_A';
          fPIXEL_DEPTH: ARElement.InnerDataKind; external name 'PIXEL_DEPTH';
          fPIXEL_L: ARElement.InnerDataKind; external name 'PIXEL_L';
          fPIXEL_LA: ARElement.InnerDataKind; external name 'PIXEL_LA';
          fPIXEL_RGB: ARElement.InnerDataKind; external name 'PIXEL_RGB';
          fPIXEL_RGBA: ARElement.InnerDataKind; external name 'PIXEL_RGBA';
          fPIXEL_YUV: ARElement.InnerDataKind; external name 'PIXEL_YUV';
          fUSER: ARElement.InnerDataKind; external name 'USER';
      public
        class function values(): ARElement.Arr1InnerDataKind; static; overload;
        class function valueOf(para1: JLString): ARElement.InnerDataKind; static; overload;
      end;

      InnerDataType = class sealed external 'android.renderscript' name 'DataType' (JLEnum)
      public
        final class var
          fBOOLEAN: ARElement.InnerDataType; external name 'BOOLEAN';
          fFLOAT_32: ARElement.InnerDataType; external name 'FLOAT_32';
          fFLOAT_64: ARElement.InnerDataType; external name 'FLOAT_64';
          fMATRIX_2X2: ARElement.InnerDataType; external name 'MATRIX_2X2';
          fMATRIX_3X3: ARElement.InnerDataType; external name 'MATRIX_3X3';
          fMATRIX_4X4: ARElement.InnerDataType; external name 'MATRIX_4X4';
          fNONE: ARElement.InnerDataType; external name 'NONE';
          fRS_ALLOCATION: ARElement.InnerDataType; external name 'RS_ALLOCATION';
          fRS_ELEMENT: ARElement.InnerDataType; external name 'RS_ELEMENT';
          fRS_FONT: ARElement.InnerDataType; external name 'RS_FONT';
          fRS_MESH: ARElement.InnerDataType; external name 'RS_MESH';
          fRS_PROGRAM_FRAGMENT: ARElement.InnerDataType; external name 'RS_PROGRAM_FRAGMENT';
          fRS_PROGRAM_RASTER: ARElement.InnerDataType; external name 'RS_PROGRAM_RASTER';
          fRS_PROGRAM_STORE: ARElement.InnerDataType; external name 'RS_PROGRAM_STORE';
          fRS_PROGRAM_VERTEX: ARElement.InnerDataType; external name 'RS_PROGRAM_VERTEX';
          fRS_SAMPLER: ARElement.InnerDataType; external name 'RS_SAMPLER';
          fRS_SCRIPT: ARElement.InnerDataType; external name 'RS_SCRIPT';
          fRS_TYPE: ARElement.InnerDataType; external name 'RS_TYPE';
          fSIGNED_16: ARElement.InnerDataType; external name 'SIGNED_16';
          fSIGNED_32: ARElement.InnerDataType; external name 'SIGNED_32';
          fSIGNED_64: ARElement.InnerDataType; external name 'SIGNED_64';
          fSIGNED_8: ARElement.InnerDataType; external name 'SIGNED_8';
          fUNSIGNED_16: ARElement.InnerDataType; external name 'UNSIGNED_16';
          fUNSIGNED_32: ARElement.InnerDataType; external name 'UNSIGNED_32';
          fUNSIGNED_4_4_4_4: ARElement.InnerDataType; external name 'UNSIGNED_4_4_4_4';
          fUNSIGNED_5_5_5_1: ARElement.InnerDataType; external name 'UNSIGNED_5_5_5_1';
          fUNSIGNED_5_6_5: ARElement.InnerDataType; external name 'UNSIGNED_5_6_5';
          fUNSIGNED_64: ARElement.InnerDataType; external name 'UNSIGNED_64';
          fUNSIGNED_8: ARElement.InnerDataType; external name 'UNSIGNED_8';
      public
        class function values(): ARElement.Arr1InnerDataType; static; overload;
        class function valueOf(para1: JLString): ARElement.InnerDataType; static; overload;
      end;

  public
    function getBytesSize(): jint; overload; virtual;
    function getVectorSize(): jint; overload; virtual;
    function isComplex(): jboolean; overload; virtual;
    function getSubElementCount(): jint; overload; virtual;
    function getSubElement(para1: jint): ARElement; overload; virtual;
    function getSubElementName(para1: jint): JLString; overload; virtual;
    function getSubElementArraySize(para1: jint): jint; overload; virtual;
    function getSubElementOffsetBytes(para1: jint): jint; overload; virtual;
    function getDataType(): ARElement.InnerDataType; overload; virtual;
    function getDataKind(): ARElement.InnerDataKind; overload; virtual;
    class function BOOLEAN(para1: ARRenderScript): ARElement; static; overload;
    class function U8(para1: ARRenderScript): ARElement; static; overload;
    class function I8(para1: ARRenderScript): ARElement; static; overload;
    class function U16(para1: ARRenderScript): ARElement; static; overload;
    class function I16(para1: ARRenderScript): ARElement; static; overload;
    class function U32(para1: ARRenderScript): ARElement; static; overload;
    class function I32(para1: ARRenderScript): ARElement; static; overload;
    class function U64(para1: ARRenderScript): ARElement; static; overload;
    class function I64(para1: ARRenderScript): ARElement; static; overload;
    class function F32(para1: ARRenderScript): ARElement; static; overload;
    class function F64(para1: ARRenderScript): ARElement; static; overload;
    class function ELEMENT(para1: ARRenderScript): ARElement; static; overload;
    class function &TYPE(para1: ARRenderScript): ARElement; static; overload;
    class function ALLOCATION(para1: ARRenderScript): ARElement; static; overload;
    class function SAMPLER(para1: ARRenderScript): ARElement; static; overload;
    class function SCRIPT(para1: ARRenderScript): ARElement; static; overload;
    class function MESH(para1: ARRenderScript): ARElement; static; overload;
    class function PROGRAM_FRAGMENT(para1: ARRenderScript): ARElement; static; overload;
    class function PROGRAM_VERTEX(para1: ARRenderScript): ARElement; static; overload;
    class function PROGRAM_RASTER(para1: ARRenderScript): ARElement; static; overload;
    class function PROGRAM_STORE(para1: ARRenderScript): ARElement; static; overload;
    class function FONT(para1: ARRenderScript): ARElement; static; overload;
    class function A_8(para1: ARRenderScript): ARElement; static; overload;
    class function RGB_565(para1: ARRenderScript): ARElement; static; overload;
    class function RGB_888(para1: ARRenderScript): ARElement; static; overload;
    class function RGBA_5551(para1: ARRenderScript): ARElement; static; overload;
    class function RGBA_4444(para1: ARRenderScript): ARElement; static; overload;
    class function RGBA_8888(para1: ARRenderScript): ARElement; static; overload;
    class function F32_2(para1: ARRenderScript): ARElement; static; overload;
    class function F32_3(para1: ARRenderScript): ARElement; static; overload;
    class function F32_4(para1: ARRenderScript): ARElement; static; overload;
    class function F64_2(para1: ARRenderScript): ARElement; static; overload;
    class function F64_3(para1: ARRenderScript): ARElement; static; overload;
    class function F64_4(para1: ARRenderScript): ARElement; static; overload;
    class function U8_2(para1: ARRenderScript): ARElement; static; overload;
    class function U8_3(para1: ARRenderScript): ARElement; static; overload;
    class function U8_4(para1: ARRenderScript): ARElement; static; overload;
    class function I8_2(para1: ARRenderScript): ARElement; static; overload;
    class function I8_3(para1: ARRenderScript): ARElement; static; overload;
    class function I8_4(para1: ARRenderScript): ARElement; static; overload;
    class function U16_2(para1: ARRenderScript): ARElement; static; overload;
    class function U16_3(para1: ARRenderScript): ARElement; static; overload;
    class function U16_4(para1: ARRenderScript): ARElement; static; overload;
    class function I16_2(para1: ARRenderScript): ARElement; static; overload;
    class function I16_3(para1: ARRenderScript): ARElement; static; overload;
    class function I16_4(para1: ARRenderScript): ARElement; static; overload;
    class function U32_2(para1: ARRenderScript): ARElement; static; overload;
    class function U32_3(para1: ARRenderScript): ARElement; static; overload;
    class function U32_4(para1: ARRenderScript): ARElement; static; overload;
    class function I32_2(para1: ARRenderScript): ARElement; static; overload;
    class function I32_3(para1: ARRenderScript): ARElement; static; overload;
    class function I32_4(para1: ARRenderScript): ARElement; static; overload;
    class function U64_2(para1: ARRenderScript): ARElement; static; overload;
    class function U64_3(para1: ARRenderScript): ARElement; static; overload;
    class function U64_4(para1: ARRenderScript): ARElement; static; overload;
    class function I64_2(para1: ARRenderScript): ARElement; static; overload;
    class function I64_3(para1: ARRenderScript): ARElement; static; overload;
    class function I64_4(para1: ARRenderScript): ARElement; static; overload;
    class function YUV(para1: ARRenderScript): ARElement; static; overload;
    class function MATRIX_4X4(para1: ARRenderScript): ARElement; static; overload;
    class function MATRIX4X4(para1: ARRenderScript): ARElement; static; overload;
    class function MATRIX_3X3(para1: ARRenderScript): ARElement; static; overload;
    class function MATRIX_2X2(para1: ARRenderScript): ARElement; static; overload;
    class function createVector(para1: ARRenderScript; para2: ARElement.InnerDataType; para3: jint): ARElement; static; overload;
    class function createPixel(para1: ARRenderScript; para2: ARElement.InnerDataType; para3: ARElement.InnerDataKind): ARElement; static; overload;
    function isCompatible(para1: ARElement): jboolean; overload; virtual;
  end;

  ARSampler = class external 'android.renderscript' name 'Sampler' (ARBaseObj)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerValue = class;
      Arr1InnerValue = array of InnerValue;
      Arr2InnerValue = array of Arr1InnerValue;
      Arr3InnerValue = array of Arr2InnerValue;
      InnerBuilder = class external 'android.renderscript' name 'Builder' (JLObject)
      public
        constructor create(para1: ARRenderScript); overload;
        procedure setMinification(para1: ARSampler.InnerValue); overload; virtual;
        procedure setMagnification(para1: ARSampler.InnerValue); overload; virtual;
        procedure setWrapS(para1: ARSampler.InnerValue); overload; virtual;
        procedure setWrapT(para1: ARSampler.InnerValue); overload; virtual;
        procedure setAnisotropy(para1: jfloat); overload; virtual;
        function create_(): ARSampler; external name 'create'; overload; virtual;
      end;

      InnerValue = class sealed external 'android.renderscript' name 'Value' (JLEnum)
      public
        final class var
          fCLAMP: ARSampler.InnerValue; external name 'CLAMP';
          fLINEAR: ARSampler.InnerValue; external name 'LINEAR';
          fLINEAR_MIP_LINEAR: ARSampler.InnerValue; external name 'LINEAR_MIP_LINEAR';
          fLINEAR_MIP_NEAREST: ARSampler.InnerValue; external name 'LINEAR_MIP_NEAREST';
          fMIRRORED_REPEAT: ARSampler.InnerValue; external name 'MIRRORED_REPEAT';
          fNEAREST: ARSampler.InnerValue; external name 'NEAREST';
          fWRAP: ARSampler.InnerValue; external name 'WRAP';
      public
        class function values(): ARSampler.Arr1InnerValue; static; overload;
        class function valueOf(para1: JLString): ARSampler.InnerValue; static; overload;
      end;

  public
    function getMinification(): ARSampler.InnerValue; overload; virtual;
    function getMagnification(): ARSampler.InnerValue; overload; virtual;
    function getWrapS(): ARSampler.InnerValue; overload; virtual;
    function getWrapT(): ARSampler.InnerValue; overload; virtual;
    function getAnisotropy(): jfloat; overload; virtual;
    class function CLAMP_NEAREST(para1: ARRenderScript): ARSampler; static; overload;
    class function CLAMP_LINEAR(para1: ARRenderScript): ARSampler; static; overload;
    class function CLAMP_LINEAR_MIP_LINEAR(para1: ARRenderScript): ARSampler; static; overload;
    class function WRAP_NEAREST(para1: ARRenderScript): ARSampler; static; overload;
    class function WRAP_LINEAR(para1: ARRenderScript): ARSampler; static; overload;
    class function WRAP_LINEAR_MIP_LINEAR(para1: ARRenderScript): ARSampler; static; overload;
    class function MIRRORED_REPEAT_NEAREST(para1: ARRenderScript): ARSampler; static; overload;
    class function MIRRORED_REPEAT_LINEAR(para1: ARRenderScript): ARSampler; static; overload;
    class function MIRRORED_REPEAT_LINEAR_MIP_LINEAR(para1: ARRenderScript): ARSampler; static; overload;
  end;

  ARScript = class external 'android.renderscript' name 'Script' (ARBaseObj)
  public
    type
      InnerFieldBase = class;
      Arr1InnerFieldBase = array of InnerFieldBase;
      Arr2InnerFieldBase = array of Arr1InnerFieldBase;
      Arr3InnerFieldBase = array of Arr2InnerFieldBase;
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerLaunchOptions = class;
      Arr1InnerLaunchOptions = array of InnerLaunchOptions;
      Arr2InnerLaunchOptions = array of Arr1InnerLaunchOptions;
      Arr3InnerLaunchOptions = array of Arr2InnerLaunchOptions;
      InnerFieldID = class;
      Arr1InnerFieldID = array of InnerFieldID;
      Arr2InnerFieldID = array of Arr1InnerFieldID;
      Arr3InnerFieldID = array of Arr2InnerFieldID;
      InnerKernelID = class;
      Arr1InnerKernelID = array of InnerKernelID;
      Arr2InnerKernelID = array of Arr1InnerKernelID;
      Arr3InnerKernelID = array of Arr2InnerKernelID;
      InnerFieldBase = class external 'android.renderscript' name 'FieldBase' (JLObject)
      strict protected
        var
          fmAllocation: ARAllocation; external name 'mAllocation';
          fmElement: ARElement; external name 'mElement';
      strict protected
        constructor create(); overload;
        procedure init(para1: ARRenderScript; para2: jint); overload; virtual;
        procedure init(para1: ARRenderScript; para2: jint; para3: jint); overload; virtual;
      public
        function getElement(): ARElement; overload; virtual;
        function getType(): ARType; overload; virtual;
        function getAllocation(): ARAllocation; overload; virtual;
        procedure updateAllocation(); overload; virtual;
      end;

      InnerBuilder = class external 'android.renderscript' name 'Builder' (JLObject)
      end;

      InnerLaunchOptions = class sealed external 'android.renderscript' name 'LaunchOptions' (JLObject)
      public
        constructor create(); overload;
        function setX(para1: jint; para2: jint): ARScript.InnerLaunchOptions; overload; virtual;
        function setY(para1: jint; para2: jint): ARScript.InnerLaunchOptions; overload; virtual;
        function setZ(para1: jint; para2: jint): ARScript.InnerLaunchOptions; overload; virtual;
        function getXStart(): jint; overload; virtual;
        function getXEnd(): jint; overload; virtual;
        function getYStart(): jint; overload; virtual;
        function getYEnd(): jint; overload; virtual;
        function getZStart(): jint; overload; virtual;
        function getZEnd(): jint; overload; virtual;
      end;

      InnerFieldID = class sealed external 'android.renderscript' name 'FieldID' (ARBaseObj)
      end;

      InnerKernelID = class sealed external 'android.renderscript' name 'KernelID' (ARBaseObj)
      end;

  strict protected
    function createKernelID(para1: jint; para2: jint; para3: ARElement; para4: ARElement): ARScript.InnerKernelID; overload; virtual;
    function createFieldID(para1: jint; para2: ARElement): ARScript.InnerFieldID; overload; virtual;
    procedure invoke(para1: jint); overload; virtual;
    procedure invoke(para1: jint; para2: ARFieldPacker); overload; virtual;
    procedure forEach(para1: jint; para2: ARAllocation; para3: ARAllocation; para4: ARFieldPacker); overload; virtual;
    procedure forEach(para1: jint; para2: ARAllocation; para3: ARAllocation; para4: ARFieldPacker; para5: ARScript.InnerLaunchOptions); overload; virtual;
  public
    procedure bindAllocation(para1: ARAllocation; para2: jint); overload; virtual;
    procedure setVar(para1: jint; para2: jfloat); overload; virtual;
    function getVarF(para1: jint): jfloat; overload; virtual;
    procedure setVar(para1: jint; para2: jdouble); overload; virtual;
    function getVarD(para1: jint): jdouble; overload; virtual;
    procedure setVar(para1: jint; para2: jint); overload; virtual;
    function getVarI(para1: jint): jint; overload; virtual;
    procedure setVar(para1: jint; para2: jlong); overload; virtual;
    function getVarJ(para1: jint): jlong; overload; virtual;
    procedure setVar(para1: jint; para2: jboolean); overload; virtual;
    function getVarB(para1: jint): jboolean; overload; virtual;
    procedure setVar(para1: jint; para2: ARBaseObj); overload; virtual;
    procedure setVar(para1: jint; para2: ARFieldPacker); overload; virtual;
    procedure setVar(para1: jint; para2: ARFieldPacker; para3: ARElement; para4: Arr1jint); overload; virtual;
    procedure setVar(para1: jint; para2: ARFieldPacker; para3: ARElement; var para4: array of jint); overload; virtual;
    procedure getVarV(para1: jint; para2: ARFieldPacker); overload; virtual;
    procedure setTimeZone(para1: JLString); overload; virtual;
  end;

  ARType = class external 'android.renderscript' name 'Type' (ARBaseObj)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerCubemapFace = class;
      Arr1InnerCubemapFace = array of InnerCubemapFace;
      Arr2InnerCubemapFace = array of Arr1InnerCubemapFace;
      Arr3InnerCubemapFace = array of Arr2InnerCubemapFace;
      InnerBuilder = class external 'android.renderscript' name 'Builder' (JLObject)
      public
        constructor create(para1: ARRenderScript; para2: ARElement); overload;
        function setX(para1: jint): ARType.InnerBuilder; overload; virtual;
        function setY(para1: jint): ARType.InnerBuilder; overload; virtual;
        function setZ(para1: jint): ARType.InnerBuilder; overload; virtual;
        function setMipmaps(para1: jboolean): ARType.InnerBuilder; overload; virtual;
        function setFaces(para1: jboolean): ARType.InnerBuilder; overload; virtual;
        function setYuvFormat(para1: jint): ARType.InnerBuilder; overload; virtual;
        function create_(): ARType; external name 'create'; overload; virtual;
      end;

      InnerCubemapFace = class sealed external 'android.renderscript' name 'CubemapFace' (JLEnum)
      public
        final class var
          fNEGATIVE_X: ARType.InnerCubemapFace; external name 'NEGATIVE_X';
          fNEGATIVE_Y: ARType.InnerCubemapFace; external name 'NEGATIVE_Y';
          fNEGATIVE_Z: ARType.InnerCubemapFace; external name 'NEGATIVE_Z';
          fPOSITIVE_X: ARType.InnerCubemapFace; external name 'POSITIVE_X';
          fPOSITIVE_Y: ARType.InnerCubemapFace; external name 'POSITIVE_Y';
          fPOSITIVE_Z: ARType.InnerCubemapFace; external name 'POSITIVE_Z';
          fPOSITVE_X: ARType.InnerCubemapFace; external name 'POSITVE_X';
          fPOSITVE_Y: ARType.InnerCubemapFace; external name 'POSITVE_Y';
          fPOSITVE_Z: ARType.InnerCubemapFace; external name 'POSITVE_Z';
      public
        class function values(): ARType.Arr1InnerCubemapFace; static; overload;
        class function valueOf(para1: JLString): ARType.InnerCubemapFace; static; overload;
      end;

  public
    function getElement(): ARElement; overload; virtual;
    function getX(): jint; overload; virtual;
    function getY(): jint; overload; virtual;
    function getZ(): jint; overload; virtual;
    function getYuv(): jint; overload; virtual;
    function hasMipmaps(): jboolean; overload; virtual;
    function hasFaces(): jboolean; overload; virtual;
    function getCount(): jint; overload; virtual;
    class function createX(para1: ARRenderScript; para2: ARElement; para3: jint): ARType; static; overload;
    class function createXY(para1: ARRenderScript; para2: ARElement; para3: jint; para4: jint): ARType; static; overload;
    class function createXYZ(para1: ARRenderScript; para2: ARElement; para3: jint; para4: jint; para5: jint): ARType; static; overload;
  end;

  ASRootElement = class external 'android.sax' name 'RootElement' (ASElement)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString); overload;
    function getContentHandler(): OXSContentHandler; overload; virtual;
  end;

  ASElementListener = interface external 'android.sax' name 'ElementListener' (ASStartElementListener, ASEndElementListener)
  end;

  ASTextElementListener = interface external 'android.sax' name 'TextElementListener' (ASStartElementListener, ASEndTextElementListener)
  end;

  ATCCdmaCellLocation = class external 'android.telephony.cdma' name 'CdmaCellLocation' (ATCellLocation)
  public
    constructor create(); overload;
    constructor create(para1: AOBundle); overload;
    function getBaseStationId(): jint; overload; virtual;
    function getBaseStationLatitude(): jint; overload; virtual;
    function getBaseStationLongitude(): jint; overload; virtual;
    function getSystemId(): jint; overload; virtual;
    function getNetworkId(): jint; overload; virtual;
    procedure setStateInvalid(); overload; virtual;
    procedure setCellLocationData(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure setCellLocationData(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure fillInNotifierBundle(para1: AOBundle); overload; virtual;
    class function convertQuartSecToDecDegrees(para1: jint): jdouble; static; overload;
  end;

  ATGGsmCellLocation = class external 'android.telephony.gsm' name 'GsmCellLocation' (ATCellLocation)
  public
    constructor create(); overload;
    constructor create(para1: AOBundle); overload;
    function getLac(): jint; overload; virtual;
    function getCid(): jint; overload; virtual;
    function getPsc(): jint; overload; virtual;
    procedure setStateInvalid(); overload; virtual;
    procedure setLacAndCid(para1: jint; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure fillInNotifierBundle(para1: AOBundle); overload; virtual;
  end;

  ATInstrumentationTestRunner = class external 'android.test' name 'InstrumentationTestRunner' (AAInstrumentation, ATTestSuiteProvider)
  public
    const
      REPORT_KEY_NAME_CLASS = 'class';
      REPORT_KEY_NAME_TEST = 'test';
      REPORT_KEY_NUM_CURRENT = 'current';
      REPORT_KEY_NUM_TOTAL = 'numtests';
      REPORT_KEY_STACK = 'stack';
      REPORT_VALUE_ID = 'InstrumentationTestRunner';
      REPORT_VALUE_RESULT_ERROR = -1;
      REPORT_VALUE_RESULT_FAILURE = -2;
      REPORT_VALUE_RESULT_OK = 0;
      REPORT_VALUE_RESULT_START = 1;
  public
    constructor create(); overload;
    procedure onCreate(para1: AOBundle); overload; virtual;
    function getArguments(): AOBundle; overload; virtual;
  strict protected
    function getAndroidTestRunner(): ATAndroidTestRunner; overload; virtual;
  public
    procedure onStart(); overload; virtual;
    function getTestSuite(): JFTestSuite; overload; virtual;
    function getAllTests(): JFTestSuite; overload; virtual;
    function getLoader(): JLClassLoader; overload; virtual;
  end;

  ACClipboardManager = class external 'android.content' name 'ClipboardManager' (ATClipboardManager)
  public
    type
      InnerOnPrimaryClipChangedListener = interface;
      Arr1InnerOnPrimaryClipChangedListener = array of InnerOnPrimaryClipChangedListener;
      Arr2InnerOnPrimaryClipChangedListener = array of Arr1InnerOnPrimaryClipChangedListener;
      Arr3InnerOnPrimaryClipChangedListener = array of Arr2InnerOnPrimaryClipChangedListener;
      InnerOnPrimaryClipChangedListener = interface external 'android.content' name 'OnPrimaryClipChangedListener' 
        procedure onPrimaryClipChanged(); overload;
      end;

  public
    procedure setPrimaryClip(para1: ACClipData); overload; virtual;
    function getPrimaryClip(): ACClipData; overload; virtual;
    function getPrimaryClipDescription(): ACClipDescription; overload; virtual;
    function hasPrimaryClip(): jboolean; overload; virtual;
    procedure addPrimaryClipChangedListener(para1: ACClipboardManager.InnerOnPrimaryClipChangedListener); overload; virtual;
    procedure removePrimaryClipChangedListener(para1: ACClipboardManager.InnerOnPrimaryClipChangedListener); overload; virtual;
    function getText(): JLCharSequence; overload; virtual;
    procedure setText(para1: JLCharSequence); overload; virtual;
    function hasText(): jboolean; overload; virtual;
  end;

  ATLoginFilter = class abstract external 'android.text' name 'LoginFilter' (JLObject, ATInputFilter)
  public
    type
      InnerPasswordFilterGMail = class;
      Arr1InnerPasswordFilterGMail = array of InnerPasswordFilterGMail;
      Arr2InnerPasswordFilterGMail = array of Arr1InnerPasswordFilterGMail;
      Arr3InnerPasswordFilterGMail = array of Arr2InnerPasswordFilterGMail;
      InnerUsernameFilterGeneric = class;
      Arr1InnerUsernameFilterGeneric = array of InnerUsernameFilterGeneric;
      Arr2InnerUsernameFilterGeneric = array of Arr1InnerUsernameFilterGeneric;
      Arr3InnerUsernameFilterGeneric = array of Arr2InnerUsernameFilterGeneric;
      InnerUsernameFilterGMail = class;
      Arr1InnerUsernameFilterGMail = array of InnerUsernameFilterGMail;
      Arr2InnerUsernameFilterGMail = array of Arr1InnerUsernameFilterGMail;
      Arr3InnerUsernameFilterGMail = array of Arr2InnerUsernameFilterGMail;
      InnerPasswordFilterGMail = class external 'android.text' name 'PasswordFilterGMail' (ATLoginFilter)
      public
        constructor create(); overload;
        constructor create(para1: jboolean); overload;
        function isAllowed(para1: jchar): jboolean; overload; virtual;
      end;

      InnerUsernameFilterGeneric = class external 'android.text' name 'UsernameFilterGeneric' (ATLoginFilter)
      public
        constructor create(); overload;
        constructor create(para1: jboolean); overload;
        function isAllowed(para1: jchar): jboolean; overload; virtual;
      end;

      InnerUsernameFilterGMail = class external 'android.text' name 'UsernameFilterGMail' (ATLoginFilter)
      public
        constructor create(); overload;
        constructor create(para1: jboolean); overload;
        function isAllowed(para1: jchar): jboolean; overload; virtual;
      end;

  public
    function filter(para1: JLCharSequence; para2: jint; para3: jint; para4: ATSpanned; para5: jint; para6: jint): JLCharSequence; overload; virtual;
    procedure onStart(); overload; virtual;
    procedure onInvalidCharacter(para1: jchar); overload; virtual;
    procedure onStop(); overload; virtual;
    function isAllowed(para1: jchar): jboolean; overload; virtual; abstract;
  end;

  AVIEditorInfo = class external 'android.view.inputmethod' name 'EditorInfo' (JLObject, ATInputType, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      IME_ACTION_DONE = 6;
      IME_ACTION_GO = 2;
      IME_ACTION_NEXT = 5;
      IME_ACTION_NONE = 1;
      IME_ACTION_PREVIOUS = 7;
      IME_ACTION_SEARCH = 3;
      IME_ACTION_SEND = 4;
      IME_ACTION_UNSPECIFIED = 0;
      IME_FLAG_FORCE_ASCII = -2147483648;
      IME_FLAG_NAVIGATE_NEXT = 134217728;
      IME_FLAG_NAVIGATE_PREVIOUS = 67108864;
      IME_FLAG_NO_ACCESSORY_ACTION = 536870912;
      IME_FLAG_NO_ENTER_ACTION = 1073741824;
      IME_FLAG_NO_EXTRACT_UI = 268435456;
      IME_FLAG_NO_FULLSCREEN = 33554432;
      IME_MASK_ACTION = 255;
      IME_NULL = 0;
  public
    var
      factionId: jint; external name 'actionId';
      factionLabel: JLCharSequence; external name 'actionLabel';
      fextras: AOBundle; external name 'extras';
      ffieldId: jint; external name 'fieldId';
      ffieldName: JLString; external name 'fieldName';
      fhintText: JLCharSequence; external name 'hintText';
      fimeOptions: jint; external name 'imeOptions';
      finitialCapsMode: jint; external name 'initialCapsMode';
      finitialSelEnd: jint; external name 'initialSelEnd';
      finitialSelStart: jint; external name 'initialSelStart';
      finputType: jint; external name 'inputType';
      flabel: JLCharSequence; external name 'label';
      fpackageName: JLString; external name 'packageName';
      fprivateImeOptions: JLString; external name 'privateImeOptions';
  public
    constructor create(); overload;
    procedure makeCompatible(para1: jint); overload; virtual; final;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  ATSpanWatcher = interface external 'android.text' name 'SpanWatcher' (ATNoCopySpan)
    procedure onSpanAdded(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint); overload;
    procedure onSpanRemoved(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint); overload;
    procedure onSpanChanged(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint; para5: jint; para6: jint); overload;
  end;

  ATTextWatcher = interface external 'android.text' name 'TextWatcher' (ATNoCopySpan)
    procedure beforeTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload;
    procedure onTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload;
    procedure afterTextChanged(para1: ATEditable); overload;
  end;

  ATMBaseKeyListener = class abstract external 'android.text.method' name 'BaseKeyListener' (ATMMetaKeyKeyListener, ATMKeyListener)
  public
    constructor create(); overload;
    function backspace(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    function forwardDelete(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    function onKeyDown(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    function onKeyOther(para1: AVView; para2: ATEditable; para3: AVKeyEvent): jboolean; overload; virtual;
  end;

  ATMBaseMovementMethod = class external 'android.text.method' name 'BaseMovementMethod' (JLObject, ATMMovementMethod)
  public
    constructor create(); overload;
    function canSelectArbitrarily(): jboolean; overload; virtual;
    procedure initialize(para1: AWTextView; para2: ATSpannable); overload; virtual;
    function onKeyDown(para1: AWTextView; para2: ATSpannable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    function onKeyOther(para1: AWTextView; para2: ATSpannable; para3: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: AWTextView; para2: ATSpannable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    procedure onTakeFocus(para1: AWTextView; para2: ATSpannable; para3: jint); overload; virtual;
    function onTouchEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload; virtual;
    function onTrackballEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    function getMovementMetaState(para1: ATSpannable; para2: AVKeyEvent): jint; overload; virtual;
    function handleMovementKey(para1: AWTextView; para2: ATSpannable; para3: jint; para4: jint; para5: AVKeyEvent): jboolean; overload; virtual;
    function left(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function right(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function up(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function down(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function pageUp(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function pageDown(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function top(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function bottom(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function lineStart(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function lineEnd(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function home(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function &end(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
  end;

  ATMReplacementTransformationMethod = class abstract external 'android.text.method' name 'ReplacementTransformationMethod' (JLObject, ATMTransformationMethod)
  public
    constructor create(); overload;
  strict protected
    function getOriginal(): Arr1jchar; overload; virtual; abstract;
    function getReplacement(): Arr1jchar; overload; virtual; abstract;
  public
    function getTransformation(para1: JLCharSequence; para2: AVView): JLCharSequence; overload; virtual;
    procedure onFocusChanged(para1: AVView; para2: JLCharSequence; para3: jboolean; para4: jint; para5: AGRect); overload; virtual;
  end;

  ATSLineBackgroundSpan = interface external 'android.text.style' name 'LineBackgroundSpan' (ATSParagraphStyle)
    procedure drawBackground(para1: AGCanvas; para2: AGPaint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JLCharSequence; para9: jint; para10: jint; para11: jint); overload;
  end;

  ATSTabStopSpan = interface external 'android.text.style' name 'TabStopSpan' (ATSParagraphStyle)
    type
      InnerStandard = class;
      Arr1InnerStandard = array of InnerStandard;
      Arr2InnerStandard = array of Arr1InnerStandard;
      Arr3InnerStandard = array of Arr2InnerStandard;
      InnerStandard = class external 'android.text.style' name 'Standard' (JLObject, ATSTabStopSpan)
      public
        constructor create(para1: jint); overload;
        function getTabStop(): jint; overload; virtual;
      end;

    function getTabStop(): jint; overload;
  end;

  ATSWrapTogetherSpan = interface external 'android.text.style' name 'WrapTogetherSpan' (ATSParagraphStyle)
  end;

  ATSClickableSpan = class abstract external 'android.text.style' name 'ClickableSpan' (ATSCharacterStyle, ATSUpdateAppearance)
  public
    constructor create(); overload;
    procedure onClick(para1: AVView); overload; virtual; abstract;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATSMaskFilterSpan = class external 'android.text.style' name 'MaskFilterSpan' (ATSCharacterStyle, ATSUpdateAppearance)
  public
    constructor create(para1: AGMaskFilter); overload;
    function getMaskFilter(): AGMaskFilter; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATSRasterizerSpan = class external 'android.text.style' name 'RasterizerSpan' (ATSCharacterStyle, ATSUpdateAppearance)
  public
    constructor create(para1: AGRasterizer); overload;
    function getRasterizer(): AGRasterizer; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATSUpdateLayout = interface external 'android.text.style' name 'UpdateLayout' (ATSUpdateAppearance)
  end;

  AULogPrinter = class external 'android.util' name 'LogPrinter' (JLObject, AUPrinter)
  public
    constructor create(para1: jint; para2: JLString); overload;
    procedure println(para1: JLString); overload; virtual;
  end;

  AUPrintStreamPrinter = class external 'android.util' name 'PrintStreamPrinter' (JLObject, AUPrinter)
  public
    constructor create(para1: JIPrintStream); overload;
    procedure println(para1: JLString); overload; virtual;
  end;

  AUPrintWriterPrinter = class external 'android.util' name 'PrintWriterPrinter' (JLObject, AUPrinter)
  public
    constructor create(para1: JIPrintWriter); overload;
    procedure println(para1: JLString); overload; virtual;
  end;

  AUStringBuilderPrinter = class external 'android.util' name 'StringBuilderPrinter' (JLObject, AUPrinter)
  public
    constructor create(para1: JLStringBuilder); overload;
    procedure println(para1: JLString); overload; virtual;
  end;

  AVViewParent = interface external 'android.view' name 'ViewParent' 
    procedure requestLayout(); overload;
    function isLayoutRequested(): jboolean; overload;
    procedure requestTransparentRegion(para1: AVView); overload;
    procedure invalidateChild(para1: AVView; para2: AGRect); overload;
    function invalidateChildInParent(para1: Arr1jint; para2: AGRect): AVViewParent; overload;
    function invalidateChildInParent(var para1: array of jint; para2: AGRect): AVViewParent; overload;
    function getParent(): AVViewParent; overload;
    procedure requestChildFocus(para1: AVView; para2: AVView); overload;
    procedure recomputeViewAttributes(para1: AVView); overload;
    procedure clearChildFocus(para1: AVView); overload;
    function getChildVisibleRect(para1: AVView; para2: AGRect; para3: AGPoint): jboolean; overload;
    function focusSearch(para1: AVView; para2: jint): AVView; overload;
    procedure bringChildToFront(para1: AVView); overload;
    procedure focusableViewAvailable(para1: AVView); overload;
    function showContextMenuForChild(para1: AVView): jboolean; overload;
    procedure createContextMenu(para1: AVContextMenu); overload;
    function startActionModeForChild(para1: AVView; para2: AVActionMode.InnerCallback): AVActionMode; overload;
    procedure childDrawableStateChanged(para1: AVView); overload;
    procedure requestDisallowInterceptTouchEvent(para1: jboolean); overload;
    function requestChildRectangleOnScreen(para1: AVView; para2: AGRect; para3: jboolean): jboolean; overload;
    function requestSendAccessibilityEvent(para1: AVView; para2: AVAAccessibilityEvent): jboolean; overload;
    procedure childHasTransientStateChanged(para1: AVView; para2: jboolean); overload;
    procedure requestFitSystemWindows(); overload;
    function getParentForAccessibility(): AVViewParent; overload;
    procedure notifySubtreeAccessibilityStateChanged(para1: AVView; para2: AVView; para3: jint); overload;
    function canResolveLayoutDirection(): jboolean; overload;
    function isLayoutDirectionResolved(): jboolean; overload;
    function getLayoutDirection(): jint; overload;
    function canResolveTextDirection(): jboolean; overload;
    function isTextDirectionResolved(): jboolean; overload;
    function getTextDirection(): jint; overload;
    function canResolveTextAlignment(): jboolean; overload;
    function isTextAlignmentResolved(): jboolean; overload;
    function getTextAlignment(): jint; overload;
    function onStartNestedScroll(para1: AVView; para2: AVView; para3: jint): jboolean; overload;
    procedure onNestedScrollAccepted(para1: AVView; para2: AVView; para3: jint); overload;
    procedure onStopNestedScroll(para1: AVView); overload;
    procedure onNestedScroll(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    procedure onNestedPreScroll(para1: AVView; para2: jint; para3: jint; para4: Arr1jint); overload;
    procedure onNestedPreScroll(para1: AVView; para2: jint; para3: jint; var para4: array of jint); overload;
    function onNestedFling(para1: AVView; para2: jfloat; para3: jfloat; para4: jboolean): jboolean; overload;
    function onNestedPreFling(para1: AVView; para2: jfloat; para3: jfloat): jboolean; overload;
  end;

  AWShareActionProvider = class external 'android.widget' name 'ShareActionProvider' (AVActionProvider)
  public
    type
      InnerOnShareTargetSelectedListener = interface;
      Arr1InnerOnShareTargetSelectedListener = array of InnerOnShareTargetSelectedListener;
      Arr2InnerOnShareTargetSelectedListener = array of Arr1InnerOnShareTargetSelectedListener;
      Arr3InnerOnShareTargetSelectedListener = array of Arr2InnerOnShareTargetSelectedListener;
      InnerOnShareTargetSelectedListener = interface external 'android.widget' name 'OnShareTargetSelectedListener' 
        function onShareTargetSelected(para1: AWShareActionProvider; para2: ACIntent): jboolean; overload;
      end;

  public
    const
      DEFAULT_SHARE_HISTORY_FILE_NAME = 'share_history.xml';
  public
    constructor create(para1: ACContext); overload;
    procedure setOnShareTargetSelectedListener(para1: AWShareActionProvider.InnerOnShareTargetSelectedListener); overload; virtual;
    function onCreateActionView(): AVView; overload; virtual;
    function hasSubMenu(): jboolean; overload; virtual;
    procedure onPrepareSubMenu(para1: AVSubMenu); overload; virtual;
    procedure setShareHistoryFileName(para1: JLString); overload; virtual;
    procedure setShareIntent(para1: ACIntent); overload; virtual;
  end;

  AVContextMenu = interface external 'android.view' name 'ContextMenu' (AVMenu)
    type
      InnerContextMenuInfo = interface;
      Arr1InnerContextMenuInfo = array of InnerContextMenuInfo;
      Arr2InnerContextMenuInfo = array of Arr1InnerContextMenuInfo;
      Arr3InnerContextMenuInfo = array of Arr2InnerContextMenuInfo;
      InnerContextMenuInfo = interface external 'android.view' name 'ContextMenuInfo' 
      end;

    function setHeaderTitle(para1: jint): AVContextMenu; overload;
    function setHeaderTitle(para1: JLCharSequence): AVContextMenu; overload;
    function setHeaderIcon(para1: jint): AVContextMenu; overload;
    function setHeaderIcon(para1: AGDDrawable): AVContextMenu; overload;
    function setHeaderView(para1: AVView): AVContextMenu; overload;
    procedure clearHeader(); overload;
  end;

  AVSubMenu = interface external 'android.view' name 'SubMenu' (AVMenu)
    function setHeaderTitle(para1: jint): AVSubMenu; overload;
    function setHeaderTitle(para1: JLCharSequence): AVSubMenu; overload;
    function setHeaderIcon(para1: jint): AVSubMenu; overload;
    function setHeaderIcon(para1: AGDDrawable): AVSubMenu; overload;
    function setHeaderView(para1: AVView): AVSubMenu; overload;
    procedure clearHeader(); overload;
    function setIcon(para1: jint): AVSubMenu; overload;
    function setIcon(para1: AGDDrawable): AVSubMenu; overload;
    function getItem(): AVMenuItem; overload;
  end;

  AVViewGroup_LayoutParams = class external 'android.view' name 'ViewGroup$LayoutParams' (JLObject)
  public
    const
      FILL_PARENT = -1;
      MATCH_PARENT = -1;
      WRAP_CONTENT = -2;
  public
    var
      fwidth: jint; external name 'width';
      fheight: jint; external name 'height';
      flayoutAnimationParameters: AVALayoutAnimationController.InnerAnimationParameters; external name 'layoutAnimationParameters';
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: jint; para2: jint); overload;
    constructor create(para1: AVViewGroup_LayoutParams); overload;
  strict protected
    procedure setBaseAttributes(para1: ACRTypedArray; para2: jint; para3: jint); overload; virtual;
  end;

  AVWindowManager = interface external 'android.view' name 'WindowManager' (AVViewManager)
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerInvalidDisplayException = class;
      Arr1InnerInvalidDisplayException = array of InnerInvalidDisplayException;
      Arr2InnerInvalidDisplayException = array of Arr1InnerInvalidDisplayException;
      Arr3InnerInvalidDisplayException = array of Arr2InnerInvalidDisplayException;
      InnerBadTokenException = class;
      Arr1InnerBadTokenException = array of InnerBadTokenException;
      Arr2InnerBadTokenException = array of Arr1InnerBadTokenException;
      Arr3InnerBadTokenException = array of Arr2InnerBadTokenException;
      InnerLayoutParams = class external 'android.view' name 'LayoutParams' (AVViewGroup_LayoutParams, AOParcelable)
      public
        const
          ALPHA_CHANGED = 128;
          ANIMATION_CHANGED = 16;
          BRIGHTNESS_OVERRIDE_FULL = jfloat(1.0);
          BRIGHTNESS_OVERRIDE_NONE = jfloat(-1.0);
          BRIGHTNESS_OVERRIDE_OFF = jfloat(0.0);
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        const
          DIM_AMOUNT_CHANGED = 32;
          FIRST_APPLICATION_WINDOW = 1;
          FIRST_SUB_WINDOW = 1000;
          FIRST_SYSTEM_WINDOW = 2000;
          FLAGS_CHANGED = 4;
          FLAG_ALLOW_LOCK_WHILE_SCREEN_ON = 1;
          FLAG_ALT_FOCUSABLE_IM = 131072;
          FLAG_BLUR_BEHIND = 4 deprecated;
          FLAG_DIM_BEHIND = 2;
          FLAG_DISMISS_KEYGUARD = 4194304;
          FLAG_DITHER = 4096 deprecated;
          FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS = -2147483648;
          FLAG_FORCE_NOT_FULLSCREEN = 2048;
          FLAG_FULLSCREEN = 1024;
          FLAG_HARDWARE_ACCELERATED = 16777216;
          FLAG_IGNORE_CHEEK_PRESSES = 32768;
          FLAG_KEEP_SCREEN_ON = 128;
          FLAG_LAYOUT_INSET_DECOR = 65536;
          FLAG_LAYOUT_IN_OVERSCAN = 33554432;
          FLAG_LAYOUT_IN_SCREEN = 256;
          FLAG_LAYOUT_NO_LIMITS = 512;
          FLAG_LOCAL_FOCUS_MODE = 268435456;
          FLAG_NOT_FOCUSABLE = 8;
          FLAG_NOT_TOUCHABLE = 16;
          FLAG_NOT_TOUCH_MODAL = 32;
          FLAG_SCALED = 16384;
          FLAG_SECURE = 8192;
          FLAG_SHOW_WALLPAPER = 1048576;
          FLAG_SHOW_WHEN_LOCKED = 524288;
          FLAG_SPLIT_TOUCH = 8388608;
          FLAG_TOUCHABLE_WHEN_WAKING = 64 deprecated;
          FLAG_TRANSLUCENT_NAVIGATION = 134217728;
          FLAG_TRANSLUCENT_STATUS = 67108864;
          FLAG_TURN_SCREEN_ON = 2097152;
          FLAG_WATCH_OUTSIDE_TOUCH = 262144;
          FORMAT_CHANGED = 8;
          LAST_APPLICATION_WINDOW = 99;
          LAST_SUB_WINDOW = 1999;
          LAST_SYSTEM_WINDOW = 2999;
          LAYOUT_CHANGED = 1;
          MEMORY_TYPE_CHANGED = 256;
          MEMORY_TYPE_GPU = 2 deprecated;
          MEMORY_TYPE_HARDWARE = 1 deprecated;
          MEMORY_TYPE_NORMAL = 0 deprecated;
          MEMORY_TYPE_PUSH_BUFFERS = 3 deprecated;
          ROTATION_ANIMATION_CHANGED = 4096;
          ROTATION_ANIMATION_CROSSFADE = 1;
          ROTATION_ANIMATION_JUMPCUT = 2;
          ROTATION_ANIMATION_ROTATE = 0;
          SCREEN_BRIGHTNESS_CHANGED = 2048;
          SCREEN_ORIENTATION_CHANGED = 1024;
          SOFT_INPUT_ADJUST_NOTHING = 48;
          SOFT_INPUT_ADJUST_PAN = 32;
          SOFT_INPUT_ADJUST_RESIZE = 16;
          SOFT_INPUT_ADJUST_UNSPECIFIED = 0;
          SOFT_INPUT_IS_FORWARD_NAVIGATION = 256;
          SOFT_INPUT_MASK_ADJUST = 240;
          SOFT_INPUT_MASK_STATE = 15;
          SOFT_INPUT_MODE_CHANGED = 512;
          SOFT_INPUT_STATE_ALWAYS_HIDDEN = 3;
          SOFT_INPUT_STATE_ALWAYS_VISIBLE = 5;
          SOFT_INPUT_STATE_HIDDEN = 2;
          SOFT_INPUT_STATE_UNCHANGED = 1;
          SOFT_INPUT_STATE_UNSPECIFIED = 0;
          SOFT_INPUT_STATE_VISIBLE = 4;
          TITLE_CHANGED = 64;
          TYPE_APPLICATION = 2;
          TYPE_APPLICATION_ATTACHED_DIALOG = 1003;
          TYPE_APPLICATION_MEDIA = 1001;
          TYPE_APPLICATION_PANEL = 1000;
          TYPE_APPLICATION_STARTING = 3;
          TYPE_APPLICATION_SUB_PANEL = 1002;
          TYPE_BASE_APPLICATION = 1;
          TYPE_CHANGED = 2;
          TYPE_INPUT_METHOD = 2011;
          TYPE_INPUT_METHOD_DIALOG = 2012;
          TYPE_KEYGUARD_DIALOG = 2009;
          TYPE_PHONE = 2002;
          TYPE_PRIORITY_PHONE = 2007;
          TYPE_PRIVATE_PRESENTATION = 2030;
          TYPE_SEARCH_BAR = 2001;
          TYPE_STATUS_BAR = 2000;
          TYPE_STATUS_BAR_PANEL = 2014;
          TYPE_SYSTEM_ALERT = 2003;
          TYPE_SYSTEM_DIALOG = 2008;
          TYPE_SYSTEM_ERROR = 2010;
          TYPE_SYSTEM_OVERLAY = 2006;
          TYPE_TOAST = 2005;
          TYPE_WALLPAPER = 2013;
      public
        var
          falpha: jfloat; external name 'alpha';
          fbuttonBrightness: jfloat; external name 'buttonBrightness';
          fdimAmount: jfloat; external name 'dimAmount';
          fflags: jint; external name 'flags';
          fformat: jint; external name 'format';
          fgravity: jint; external name 'gravity';
          fhorizontalMargin: jfloat; external name 'horizontalMargin';
          fhorizontalWeight: jfloat; external name 'horizontalWeight';
          fmemoryType: jint deprecated; external name 'memoryType';
          fpackageName: JLString; external name 'packageName';
          fpreferredRefreshRate: jfloat; external name 'preferredRefreshRate';
          frotationAnimation: jint; external name 'rotationAnimation';
          fscreenBrightness: jfloat; external name 'screenBrightness';
          fscreenOrientation: jint; external name 'screenOrientation';
          fsoftInputMode: jint; external name 'softInputMode';
          fsystemUiVisibility: jint; external name 'systemUiVisibility';
          ftoken: AOIBinder; external name 'token';
          ftype: jint; external name 'type';
          fverticalMargin: jfloat; external name 'verticalMargin';
          fverticalWeight: jfloat; external name 'verticalWeight';
          fwindowAnimations: jint; external name 'windowAnimations';
          fx: jint; external name 'x';
          fy: jint; external name 'y';
      public
        constructor create(); overload;
        constructor create(para1: jint); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint); overload;
        constructor create(para1: AOParcel); overload;
        class function mayUseInputMethod(para1: jint): jboolean; static; overload;
        procedure setTitle(para1: JLCharSequence); overload; virtual; final;
        function getTitle(): JLCharSequence; overload; virtual; final;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function copyFrom(para1: AVWindowManager.InnerLayoutParams): jint; overload; virtual; final;
        function debug(para1: JLString): JLString; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerInvalidDisplayException = class external 'android.view' name 'InvalidDisplayException' (JLRuntimeException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
      end;

      InnerBadTokenException = class external 'android.view' name 'BadTokenException' (JLRuntimeException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
      end;

    function getDefaultDisplay(): AVDisplay; overload;
    procedure removeViewImmediate(para1: AVView); overload;
  end;

  AVAAccessibilityEvent = class sealed external 'android.view.accessibility' name 'AccessibilityEvent' (AVAAccessibilityRecord, AOParcelable)
  public
    const
      CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION = 4;
      CONTENT_CHANGE_TYPE_SUBTREE = 1;
      CONTENT_CHANGE_TYPE_TEXT = 2;
      CONTENT_CHANGE_TYPE_UNDEFINED = 0;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      INVALID_POSITION = -1;
      MAX_TEXT_LENGTH = 500 deprecated;
      TYPES_ALL_MASK = -1;
      TYPE_ANNOUNCEMENT = 16384;
      TYPE_GESTURE_DETECTION_END = 524288;
      TYPE_GESTURE_DETECTION_START = 262144;
      TYPE_NOTIFICATION_STATE_CHANGED = 64;
      TYPE_TOUCH_EXPLORATION_GESTURE_END = 1024;
      TYPE_TOUCH_EXPLORATION_GESTURE_START = 512;
      TYPE_TOUCH_INTERACTION_END = 2097152;
      TYPE_TOUCH_INTERACTION_START = 1048576;
      TYPE_VIEW_ACCESSIBILITY_FOCUSED = 32768;
      TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED = 65536;
      TYPE_VIEW_CLICKED = 1;
      TYPE_VIEW_FOCUSED = 8;
      TYPE_VIEW_HOVER_ENTER = 128;
      TYPE_VIEW_HOVER_EXIT = 256;
      TYPE_VIEW_LONG_CLICKED = 2;
      TYPE_VIEW_SCROLLED = 4096;
      TYPE_VIEW_SELECTED = 4;
      TYPE_VIEW_TEXT_CHANGED = 16;
      TYPE_VIEW_TEXT_SELECTION_CHANGED = 8192;
      TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY = 131072;
      TYPE_WINDOWS_CHANGED = 4194304;
      TYPE_WINDOW_CONTENT_CHANGED = 2048;
      TYPE_WINDOW_STATE_CHANGED = 32;
  public
    function getRecordCount(): jint; overload; virtual;
    procedure appendRecord(para1: AVAAccessibilityRecord); overload; virtual;
    function getRecord(para1: jint): AVAAccessibilityRecord; overload; virtual;
    function getEventType(): jint; overload; virtual;
    function getContentChangeTypes(): jint; overload; virtual;
    procedure setContentChangeTypes(para1: jint); overload; virtual;
    procedure setEventType(para1: jint); overload; virtual;
    function getEventTime(): jlong; overload; virtual;
    procedure setEventTime(para1: jlong); overload; virtual;
    function getPackageName(): JLCharSequence; overload; virtual;
    procedure setPackageName(para1: JLCharSequence); overload; virtual;
    procedure setMovementGranularity(para1: jint); overload; virtual;
    function getMovementGranularity(): jint; overload; virtual;
    procedure setAction(para1: jint); overload; virtual;
    function getAction(): jint; overload; virtual;
    class function obtain(para1: jint): AVAAccessibilityEvent; static; overload;
    class function obtain(para1: AVAAccessibilityEvent): AVAAccessibilityEvent; static; overload;
    class function obtain(): AVAAccessibilityEvent; static; overload;
    procedure recycle(); overload; virtual;
    procedure initFromParcel(para1: AOParcel); overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    class function eventTypeToString(para1: jint): JLString; static; overload;
  end;

  AVAGridLayoutAnimationController = class external 'android.view.animation' name 'GridLayoutAnimationController' (AVALayoutAnimationController)
  public
    type
      InnerAnimationParameters = class;
      Arr1InnerAnimationParameters = array of InnerAnimationParameters;
      Arr2InnerAnimationParameters = array of Arr1InnerAnimationParameters;
      Arr3InnerAnimationParameters = array of Arr2InnerAnimationParameters;
      InnerAnimationParameters = class external 'android.view.animation' name 'AnimationParameters' (AVALayoutAnimationController.InnerAnimationParameters)
      public
        var
          fcolumn: jint; external name 'column';
          fcolumnsCount: jint; external name 'columnsCount';
          frow: jint; external name 'row';
          frowsCount: jint; external name 'rowsCount';
      public
        constructor create(); overload;
      end;

  public
    const
      DIRECTION_BOTTOM_TO_TOP = 2;
      DIRECTION_HORIZONTAL_MASK = 1;
      DIRECTION_LEFT_TO_RIGHT = 0;
      DIRECTION_RIGHT_TO_LEFT = 1;
      DIRECTION_TOP_TO_BOTTOM = 0;
      DIRECTION_VERTICAL_MASK = 2;
      PRIORITY_COLUMN = 1;
      PRIORITY_NONE = 0;
      PRIORITY_ROW = 2;
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: AVAAnimation); overload;
    constructor create(para1: AVAAnimation; para2: jfloat; para3: jfloat); overload;
    function getColumnDelay(): jfloat; overload; virtual;
    procedure setColumnDelay(para1: jfloat); overload; virtual;
    function getRowDelay(): jfloat; overload; virtual;
    procedure setRowDelay(para1: jfloat); overload; virtual;
    function getDirection(): jint; overload; virtual;
    procedure setDirection(para1: jint); overload; virtual;
    function getDirectionPriority(): jint; overload; virtual;
    procedure setDirectionPriority(para1: jint); overload; virtual;
    function willOverlap(): jboolean; overload; virtual;
  strict protected
    function getDelayForView(para1: AVView): jlong; overload; virtual;
  end;

  AVIBaseInputConnection = class external 'android.view.inputmethod' name 'BaseInputConnection' (JLObject, AVIInputConnection)
  public
    constructor create(para1: AVView; para2: jboolean); overload;
    class procedure removeComposingSpans(para1: ATSpannable); static; overload; final;
    class procedure setComposingSpans(para1: ATSpannable); static; overload;
    class function getComposingSpanStart(para1: ATSpannable): jint; static; overload;
    class function getComposingSpanEnd(para1: ATSpannable): jint; static; overload;
    function getEditable(): ATEditable; overload; virtual;
    function beginBatchEdit(): jboolean; overload; virtual;
    function endBatchEdit(): jboolean; overload; virtual;
    function clearMetaKeyStates(para1: jint): jboolean; overload; virtual;
    function commitCompletion(para1: AVICompletionInfo): jboolean; overload; virtual;
    function commitCorrection(para1: AVICorrectionInfo): jboolean; overload; virtual;
    function commitText(para1: JLCharSequence; para2: jint): jboolean; overload; virtual;
    function deleteSurroundingText(para1: jint; para2: jint): jboolean; overload; virtual;
    function finishComposingText(): jboolean; overload; virtual;
    function getCursorCapsMode(para1: jint): jint; overload; virtual;
    function getExtractedText(para1: AVIExtractedTextRequest; para2: jint): AVIExtractedText; overload; virtual;
    function getTextBeforeCursor(para1: jint; para2: jint): JLCharSequence; overload; virtual;
    function getSelectedText(para1: jint): JLCharSequence; overload; virtual;
    function getTextAfterCursor(para1: jint; para2: jint): JLCharSequence; overload; virtual;
    function performEditorAction(para1: jint): jboolean; overload; virtual;
    function performContextMenuAction(para1: jint): jboolean; overload; virtual;
    function performPrivateCommand(para1: JLString; para2: AOBundle): jboolean; overload; virtual;
    function requestCursorUpdates(para1: jint): jboolean; overload; virtual;
    function setComposingText(para1: JLCharSequence; para2: jint): jboolean; overload; virtual;
    function setComposingRegion(para1: jint; para2: jint): jboolean; overload; virtual;
    function setSelection(para1: jint; para2: jint): jboolean; overload; virtual;
    function sendKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function reportFullscreenMode(para1: jboolean): jboolean; overload; virtual;
  end;

  AVIInputConnectionWrapper = class external 'android.view.inputmethod' name 'InputConnectionWrapper' (JLObject, AVIInputConnection)
  public
    constructor create(para1: AVIInputConnection; para2: jboolean); overload;
    procedure setTarget(para1: AVIInputConnection); overload; virtual;
    function getTextBeforeCursor(para1: jint; para2: jint): JLCharSequence; overload; virtual;
    function getTextAfterCursor(para1: jint; para2: jint): JLCharSequence; overload; virtual;
    function getSelectedText(para1: jint): JLCharSequence; overload; virtual;
    function getCursorCapsMode(para1: jint): jint; overload; virtual;
    function getExtractedText(para1: AVIExtractedTextRequest; para2: jint): AVIExtractedText; overload; virtual;
    function deleteSurroundingText(para1: jint; para2: jint): jboolean; overload; virtual;
    function setComposingText(para1: JLCharSequence; para2: jint): jboolean; overload; virtual;
    function setComposingRegion(para1: jint; para2: jint): jboolean; overload; virtual;
    function finishComposingText(): jboolean; overload; virtual;
    function commitText(para1: JLCharSequence; para2: jint): jboolean; overload; virtual;
    function commitCompletion(para1: AVICompletionInfo): jboolean; overload; virtual;
    function commitCorrection(para1: AVICorrectionInfo): jboolean; overload; virtual;
    function setSelection(para1: jint; para2: jint): jboolean; overload; virtual;
    function performEditorAction(para1: jint): jboolean; overload; virtual;
    function performContextMenuAction(para1: jint): jboolean; overload; virtual;
    function beginBatchEdit(): jboolean; overload; virtual;
    function endBatchEdit(): jboolean; overload; virtual;
    function sendKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function clearMetaKeyStates(para1: jint): jboolean; overload; virtual;
    function reportFullscreenMode(para1: jboolean): jboolean; overload; virtual;
    function performPrivateCommand(para1: JLString; para2: AOBundle): jboolean; overload; virtual;
    function requestCursorUpdates(para1: jint): jboolean; overload; virtual;
  end;

  AVTTextServicesManager = class sealed external 'android.view.textservice' name 'TextServicesManager' (JLObject)
  public
    function newSpellCheckerSession(para1: AOBundle; para2: JULocale; para3: AVTSpellCheckerSession.InnerSpellCheckerSessionListener; para4: jboolean): AVTSpellCheckerSession; overload; virtual;
  end;

  AWJsPromptResult = class external 'android.webkit' name 'JsPromptResult' (AWJsResult)
  public
    procedure confirm(para1: JLString); overload; virtual;
  end;

  APBrowser = class external 'android.provider' name 'Browser' (JLObject)
  public
    type
      InnerSearchColumns = class;
      Arr1InnerSearchColumns = array of InnerSearchColumns;
      Arr2InnerSearchColumns = array of Arr1InnerSearchColumns;
      Arr3InnerSearchColumns = array of Arr2InnerSearchColumns;
      InnerBookmarkColumns = class;
      Arr1InnerBookmarkColumns = array of InnerBookmarkColumns;
      Arr2InnerBookmarkColumns = array of Arr1InnerBookmarkColumns;
      Arr3InnerBookmarkColumns = array of Arr2InnerBookmarkColumns;
      InnerSearchColumns = class external 'android.provider' name 'SearchColumns' (JLObject, APBaseColumns)
      public
        const
          DATE = 'date';
          SEARCH = 'search';
          URL = 'url' deprecated;
      public
        constructor create(); overload;
      end;

      InnerBookmarkColumns = class external 'android.provider' name 'BookmarkColumns' (JLObject, APBaseColumns)
      public
        const
          BOOKMARK = 'bookmark';
          CREATED = 'created';
          DATE = 'date';
          FAVICON = 'favicon';
          TITLE = 'title';
          URL = 'url';
          VISITS = 'visits';
      public
        constructor create(); overload;
      end;

  public
    final class var
      fBOOKMARKS_URI: ANUri; external name 'BOOKMARKS_URI';
  public
    const
      EXTRA_APPLICATION_ID = 'com.android.browser.application_id';
      EXTRA_CREATE_NEW_TAB = 'create_new_tab';
      EXTRA_HEADERS = 'com.android.browser.headers';
  public
    final class var
      fHISTORY_PROJECTION: Arr1JLString; external name 'HISTORY_PROJECTION';
  public
    const
      HISTORY_PROJECTION_BOOKMARK_INDEX = 4;
      HISTORY_PROJECTION_DATE_INDEX = 3;
      HISTORY_PROJECTION_FAVICON_INDEX = 6;
      HISTORY_PROJECTION_ID_INDEX = 0;
      HISTORY_PROJECTION_TITLE_INDEX = 5;
      HISTORY_PROJECTION_URL_INDEX = 1;
      HISTORY_PROJECTION_VISITS_INDEX = 2;
      INITIAL_ZOOM_LEVEL = 'browser.initialZoomLevel';
  public
    final class var
      fSEARCHES_PROJECTION: Arr1JLString; external name 'SEARCHES_PROJECTION';
  public
    const
      SEARCHES_PROJECTION_DATE_INDEX = 2;
      SEARCHES_PROJECTION_SEARCH_INDEX = 1;
  public
    final class var
      fSEARCHES_URI: ANUri; external name 'SEARCHES_URI';
      fTRUNCATE_HISTORY_PROJECTION: Arr1JLString; external name 'TRUNCATE_HISTORY_PROJECTION';
  public
    const
      TRUNCATE_HISTORY_PROJECTION_ID_INDEX = 0;
      TRUNCATE_N_OLDEST = 5;
  public
    constructor create(); overload;
    class procedure saveBookmark(para1: ACContext; para2: JLString; para3: JLString); static; overload; final;
    class procedure sendString(para1: ACContext; para2: JLString); static; overload; final;
    class function getAllBookmarks(para1: ACContentResolver): ADCursor; static; overload; final;  // throws java.lang.IllegalStateException
    class function getAllVisitedUrls(para1: ACContentResolver): ADCursor; static; overload; final;  // throws java.lang.IllegalStateException
    class procedure updateVisitedHistory(para1: ACContentResolver; para2: JLString; para3: jboolean); static; overload; final;
    class procedure truncateHistory(para1: ACContentResolver); static; overload; final;
    class function canClearHistory(para1: ACContentResolver): jboolean; static; overload; final;
    class procedure clearHistory(para1: ACContentResolver); static; overload; final;
    class procedure deleteHistoryTimeFrame(para1: ACContentResolver; para2: jlong; para3: jlong); static; overload; final;
    class procedure deleteFromHistory(para1: ACContentResolver; para2: JLString); static; overload; final;
    class procedure addSearchUrl(para1: ACContentResolver; para2: JLString); static; overload; final;
    class procedure clearSearches(para1: ACContentResolver); static; overload; final;
    class procedure requestAllIcons(para1: ACContentResolver; para2: JLString; para3: AWWebIconDatabase.InnerIconListener); static; overload; final;
  end;

  AWWebChromeClient = class external 'android.webkit' name 'WebChromeClient' (JLObject)
  public
    type
      InnerFileChooserParams = class;
      Arr1InnerFileChooserParams = array of InnerFileChooserParams;
      Arr2InnerFileChooserParams = array of Arr1InnerFileChooserParams;
      Arr3InnerFileChooserParams = array of Arr2InnerFileChooserParams;
      InnerCustomViewCallback = interface;
      Arr1InnerCustomViewCallback = array of InnerCustomViewCallback;
      Arr2InnerCustomViewCallback = array of Arr1InnerCustomViewCallback;
      Arr3InnerCustomViewCallback = array of Arr2InnerCustomViewCallback;
      InnerFileChooserParams = class abstract external 'android.webkit' name 'FileChooserParams' (JLObject)
      public
        const
          MODE_OPEN = 0;
          MODE_OPEN_MULTIPLE = 1;
          MODE_SAVE = 3;
      public
        constructor create(); overload;
        class function parseResult(para1: jint; para2: ACIntent): Arr1ANUri; static; overload;
        function getMode(): jint; overload; virtual; abstract;
        function getAcceptTypes(): Arr1JLString; overload; virtual; abstract;
        function isCaptureEnabled(): jboolean; overload; virtual; abstract;
        function getTitle(): JLCharSequence; overload; virtual; abstract;
        function getFilenameHint(): JLString; overload; virtual; abstract;
        function createIntent(): ACIntent; overload; virtual; abstract;
      end;

      InnerCustomViewCallback = interface external 'android.webkit' name 'CustomViewCallback' 
        procedure onCustomViewHidden(); overload;
      end;

  public
    constructor create(); overload;
    procedure onProgressChanged(para1: AWWebView; para2: jint); overload; virtual;
    procedure onReceivedTitle(para1: AWWebView; para2: JLString); overload; virtual;
    procedure onReceivedIcon(para1: AWWebView; para2: AGBitmap); overload; virtual;
    procedure onReceivedTouchIconUrl(para1: AWWebView; para2: JLString; para3: jboolean); overload; virtual;
    procedure onShowCustomView(para1: AVView; para2: AWWebChromeClient.InnerCustomViewCallback); overload; virtual;
    procedure onShowCustomView(para1: AVView; para2: jint; para3: AWWebChromeClient.InnerCustomViewCallback); overload; virtual;
    procedure onHideCustomView(); overload; virtual;
    function onCreateWindow(para1: AWWebView; para2: jboolean; para3: jboolean; para4: AOMessage): jboolean; overload; virtual;
    procedure onRequestFocus(para1: AWWebView); overload; virtual;
    procedure onCloseWindow(para1: AWWebView); overload; virtual;
    function onJsAlert(para1: AWWebView; para2: JLString; para3: JLString; para4: AWJsResult): jboolean; overload; virtual;
    function onJsConfirm(para1: AWWebView; para2: JLString; para3: JLString; para4: AWJsResult): jboolean; overload; virtual;
    function onJsPrompt(para1: AWWebView; para2: JLString; para3: JLString; para4: JLString; para5: AWJsPromptResult): jboolean; overload; virtual;
    function onJsBeforeUnload(para1: AWWebView; para2: JLString; para3: JLString; para4: AWJsResult): jboolean; overload; virtual;
    procedure onExceededDatabaseQuota(para1: JLString; para2: JLString; para3: jlong; para4: jlong; para5: jlong; para6: AWWebStorage.InnerQuotaUpdater); overload; virtual;
    procedure onReachedMaxAppCacheSize(para1: jlong; para2: jlong; para3: AWWebStorage.InnerQuotaUpdater); overload; virtual;
    procedure onGeolocationPermissionsShowPrompt(para1: JLString; para2: AWGeolocationPermissions.InnerCallback); overload; virtual;
    procedure onGeolocationPermissionsHidePrompt(); overload; virtual;
    procedure onPermissionRequest(para1: AWPermissionRequest); overload; virtual;
    procedure onPermissionRequestCanceled(para1: AWPermissionRequest); overload; virtual;
    function onJsTimeout(): jboolean; overload; virtual;
    procedure onConsoleMessage(para1: JLString; para2: jint; para3: JLString); overload; virtual;
    function onConsoleMessage(para1: AWConsoleMessage): jboolean; overload; virtual;
    function getDefaultVideoPoster(): AGBitmap; overload; virtual;
    function getVideoLoadingProgressView(): AVView; overload; virtual;
    procedure getVisitedHistory(para1: AWValueCallback); overload; virtual;
    function onShowFileChooser(para1: AWWebView; para2: AWValueCallback; para3: AWWebChromeClient.InnerFileChooserParams): jboolean; overload; virtual;
  end;

  AWListAdapter = interface external 'android.widget' name 'ListAdapter' (AWAdapter)
    function areAllItemsEnabled(): jboolean; overload;
    function isEnabled(para1: jint): jboolean; overload;
  end;

  AWSpinnerAdapter = interface external 'android.widget' name 'SpinnerAdapter' (AWAdapter)
    function getDropDownView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload;
  end;

  AWBaseExpandableListAdapter = class abstract external 'android.widget' name 'BaseExpandableListAdapter' (JLObject, AWExpandableListAdapter, AWHeterogeneousExpandableList)
  public
    constructor create(); overload;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    procedure notifyDataSetInvalidated(); overload; virtual;
    procedure notifyDataSetChanged(); overload; virtual;
    function areAllItemsEnabled(): jboolean; overload; virtual;
    procedure onGroupCollapsed(para1: jint); overload; virtual;
    procedure onGroupExpanded(para1: jint); overload; virtual;
    function getCombinedChildId(para1: jlong; para2: jlong): jlong; overload; virtual;
    function getCombinedGroupId(para1: jlong): jlong; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function getChildType(para1: jint; para2: jint): jint; overload; virtual;
    function getChildTypeCount(): jint; overload; virtual;
    function getGroupType(para1: jint): jint; overload; virtual;
    function getGroupTypeCount(): jint; overload; virtual;
  end;

  AWAlphabetIndexer = class external 'android.widget' name 'AlphabetIndexer' (ADDataSetObserver, AWSectionIndexer)
  strict protected
    var
      fmAlphabet: JLCharSequence; external name 'mAlphabet';
      fmColumnIndex: jint; external name 'mColumnIndex';
      fmDataCursor: ADCursor; external name 'mDataCursor';
  public
    constructor create(para1: ADCursor; para2: jint; para3: JLCharSequence); overload;
    function getSections(): Arr1JLObject; overload; virtual;
    procedure setCursor(para1: ADCursor); overload; virtual;
  strict protected
    function compare(para1: JLString; para2: JLString): jint; overload; virtual;
  public
    function getPositionForSection(para1: jint): jint; overload; virtual;
    function getSectionForPosition(para1: jint): jint; overload; virtual;
    procedure onChanged(); overload; virtual;
    procedure onInvalidated(); overload; virtual;
  end;

  ABBluetoothServerSocket = class sealed external 'android.bluetooth' name 'BluetoothServerSocket' (JLObject, JICloseable)
  public
    function accept(): ABBluetoothSocket; overload; virtual;  // throws java.io.IOException
    function accept(para1: jint): ABBluetoothSocket; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  ABBluetoothSocket = class sealed external 'android.bluetooth' name 'BluetoothSocket' (JLObject, JICloseable)
  public
    function getRemoteDevice(): ABBluetoothDevice; overload; virtual;
    function getInputStream(): JIInputStream; overload; virtual;  // throws java.io.IOException
    function getOutputStream(): JIOutputStream; overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    procedure connect(); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  ANTTagTechnology = interface external 'android.nfc.tech' name 'TagTechnology' (JICloseable)
    function getTag(): ANTag; overload;
    procedure connect(); overload;  // throws java.io.IOException
    procedure close(); overload;  // throws java.io.IOException
    function isConnected(): jboolean; overload;
  end;

  AODropBoxManager = class external 'android.os' name 'DropBoxManager' (JLObject)
  public
    type
      InnerEntry = class;
      Arr1InnerEntry = array of InnerEntry;
      Arr2InnerEntry = array of Arr1InnerEntry;
      Arr3InnerEntry = array of Arr2InnerEntry;
      InnerEntry = class external 'android.os' name 'Entry' (JLObject, AOParcelable, JICloseable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        constructor create(para1: JLString; para2: jlong); overload;
        constructor create(para1: JLString; para2: jlong; para3: JLString); overload;
        constructor create(para1: JLString; para2: jlong; para3: Arr1jbyte; para4: jint); overload;
        constructor create(para1: JLString; para2: jlong; const para3: array of jbyte; para4: jint); overload;
        constructor create(para1: JLString; para2: jlong; para3: AOParcelFileDescriptor; para4: jint); overload;
        constructor create(para1: JLString; para2: jlong; para3: JIFile; para4: jint); overload;  // throws java.io.IOException
        procedure close(); overload; virtual;
        function getTag(): JLString; overload; virtual;
        function getTimeMillis(): jlong; overload; virtual;
        function getFlags(): jint; overload; virtual;
        function getText(para1: jint): JLString; overload; virtual;
        function getInputStream(): JIInputStream; overload; virtual;  // throws java.io.IOException
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
      end;

  public
    const
      ACTION_DROPBOX_ENTRY_ADDED = 'android.intent.action.DROPBOX_ENTRY_ADDED';
      EXTRA_TAG = 'tag';
      EXTRA_TIME = 'time';
      IS_EMPTY = 1;
      IS_GZIPPED = 4;
      IS_TEXT = 2;
  strict protected
    constructor create(); overload;
  public
    procedure addText(para1: JLString; para2: JLString); overload; virtual;
    procedure addData(para1: JLString; para2: Arr1jbyte; para3: jint); overload; virtual;
    procedure addData(para1: JLString; var para2: array of jbyte; para3: jint); overload; virtual;
    procedure addFile(para1: JLString; para2: JIFile; para3: jint); overload; virtual;  // throws java.io.IOException
    function isTagEnabled(para1: JLString): jboolean; overload; virtual;
    function getNextEntry(para1: JLString; para2: jlong): AODropBoxManager.InnerEntry; overload; virtual;
  end;

  AUJsonReader = class sealed external 'android.util' name 'JsonReader' (JLObject, JICloseable)
  public
    constructor create(para1: JIReader); overload;
    procedure setLenient(para1: jboolean); overload; virtual;
    function isLenient(): jboolean; overload; virtual;
    procedure beginArray(); overload; virtual;  // throws java.io.IOException
    procedure endArray(); overload; virtual;  // throws java.io.IOException
    procedure beginObject(); overload; virtual;  // throws java.io.IOException
    procedure endObject(); overload; virtual;  // throws java.io.IOException
    function hasNext(): jboolean; overload; virtual;  // throws java.io.IOException
    function peek(): AUJsonToken; overload; virtual;  // throws java.io.IOException
    function nextName(): JLString; overload; virtual;  // throws java.io.IOException
    function nextString(): JLString; overload; virtual;  // throws java.io.IOException
    function nextBoolean(): jboolean; overload; virtual;  // throws java.io.IOException
    procedure nextNull(); overload; virtual;  // throws java.io.IOException
    function nextDouble(): jdouble; overload; virtual;  // throws java.io.IOException
    function nextLong(): jlong; overload; virtual;  // throws java.io.IOException
    function nextInt(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure skipValue(); overload; virtual;  // throws java.io.IOException
    function toString(): JLString; overload; virtual;
  end;

  AUJsonWriter = class sealed external 'android.util' name 'JsonWriter' (JLObject, JICloseable)
  public
    constructor create(para1: JIWriter); overload;
    procedure setIndent(para1: JLString); overload; virtual;
    procedure setLenient(para1: jboolean); overload; virtual;
    function isLenient(): jboolean; overload; virtual;
    function beginArray(): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function endArray(): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function beginObject(): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function endObject(): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function name(para1: JLString): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function value(para1: JLString): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function nullValue(): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function value(para1: jboolean): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function value(para1: jdouble): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function value(para1: jlong): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    function value(para1: JLNumber): AUJsonWriter; overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  JIInputStream = class abstract external 'java.io' name 'InputStream' (JLObject, JICloseable)
  public
    constructor create(); overload;
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIReader = class abstract external 'java.io' name 'Reader' (JLObject, JLReadable, JICloseable)
  strict protected
    var
      flock: JLObject; external name 'lock';
  strict protected
    constructor create(); overload;
    constructor create(para1: JLObject); overload;
  public
    procedure close(); overload; virtual; abstract;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual; abstract;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual; abstract;  // throws java.io.IOException
    function ready(): jboolean; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
    function read(para1: JNCharBuffer): jint; overload; virtual;  // throws java.io.IOException
  end;

  JNCChannel = interface external 'java.nio.channels' name 'Channel' (JICloseable)
    function isOpen(): jboolean; overload;
    procedure close(); overload;  // throws java.io.IOException
  end;

  JIObjectInput = interface external 'java.io' name 'ObjectInput' (JIDataInput, JLAutoCloseable)
    function available(): jint; overload;  // throws java.io.IOException
    procedure close(); overload;  // throws java.io.IOException
    function read(): jint; overload;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload;  // throws java.io.IOException
    function readObject(): JLObject; overload;  // throws java.lang.ClassNotFoundException, java.io.IOException
    function skip(para1: jlong): jlong; overload;  // throws java.io.IOException
  end;

  JIObjectOutput = interface external 'java.io' name 'ObjectOutput' (JIDataOutput, JLAutoCloseable)
    procedure close(); overload;  // throws java.io.IOException
    procedure flush(); overload;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload;  // throws java.io.IOException
    procedure write(para1: jint); overload;  // throws java.io.IOException
    procedure writeObject(para1: JLObject); overload;  // throws java.io.IOException
  end;

  JIRandomAccessFile = class external 'java.io' name 'RandomAccessFile' (JLObject, JIDataInput, JIDataOutput, JICloseable)
  public
    constructor create(para1: JIFile; para2: JLString); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JLString; para2: JLString); overload;  // throws java.io.FileNotFoundException
    procedure close(); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function getChannel(): JNCFileChannel; overload; virtual; final;
    function getFD(): JIFileDescriptor; overload; virtual; final;  // throws java.io.IOException
    function getFilePointer(): jlong; overload; virtual;  // throws java.io.IOException
    function length(): jlong; overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function readBoolean(): jboolean; overload; virtual; final;  // throws java.io.IOException
    function readByte(): jbyte; overload; virtual; final;  // throws java.io.IOException
    function readChar(): jchar; overload; virtual; final;  // throws java.io.IOException
    function readDouble(): jdouble; overload; virtual; final;  // throws java.io.IOException
    function readFloat(): jfloat; overload; virtual; final;  // throws java.io.IOException
    procedure readFully(para1: Arr1jbyte); overload; virtual; final;  // throws java.io.IOException
    procedure readFully(var para1: array of jbyte); overload; virtual; final;  // throws java.io.IOException
    procedure readFully(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; final;  // throws java.io.IOException
    procedure readFully(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; final;  // throws java.io.IOException
    function readInt(): jint; overload; virtual; final;  // throws java.io.IOException
    function readLine(): JLString; overload; virtual; final;  // throws java.io.IOException
    function readLong(): jlong; overload; virtual; final;  // throws java.io.IOException
    function readShort(): jshort; overload; virtual; final;  // throws java.io.IOException
    function readUnsignedByte(): jint; overload; virtual; final;  // throws java.io.IOException
    function readUnsignedShort(): jint; overload; virtual; final;  // throws java.io.IOException
    function readUTF(): JLString; overload; virtual; final;  // throws java.io.IOException
    procedure seek(para1: jlong); overload; virtual;  // throws java.io.IOException
    procedure setLength(para1: jlong); overload; virtual;  // throws java.io.IOException
    function skipBytes(para1: jint): jint; overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure writeBoolean(para1: jboolean); overload; virtual; final;  // throws java.io.IOException
    procedure writeByte(para1: jint); overload; virtual; final;  // throws java.io.IOException
    procedure writeBytes(para1: JLString); overload; virtual; final;  // throws java.io.IOException
    procedure writeChar(para1: jint); overload; virtual; final;  // throws java.io.IOException
    procedure writeChars(para1: JLString); overload; virtual; final;  // throws java.io.IOException
    procedure writeDouble(para1: jdouble); overload; virtual; final;  // throws java.io.IOException
    procedure writeFloat(para1: jfloat); overload; virtual; final;  // throws java.io.IOException
    procedure writeInt(para1: jint); overload; virtual; final;  // throws java.io.IOException
    procedure writeLong(para1: jlong); overload; virtual; final;  // throws java.io.IOException
    procedure writeShort(para1: jint); overload; virtual; final;  // throws java.io.IOException
    procedure writeUTF(para1: JLString); overload; virtual; final;  // throws java.io.IOException
  end;

  JIConsole = class sealed external 'java.io' name 'Console' (JLObject, JIFlushable)
  public
    procedure flush(); overload; virtual;
    function format(para1: JLString; para2: Arr1JLObject): JIConsole; overload; virtual;
    function format(para1: JLString; const para2: array of JLObject): JIConsole; overload; virtual;
    function printf(para1: JLString; para2: Arr1JLObject): JIConsole; overload; virtual;
    function printf(para1: JLString; const para2: array of JLObject): JIConsole; overload; virtual;
    function reader(): JIReader; overload; virtual;
    function readLine(): JLString; overload; virtual;
    function readLine(para1: JLString; para2: Arr1JLObject): JLString; overload; virtual;
    function readLine(para1: JLString; const para2: array of JLObject): JLString; overload; virtual;
    function readPassword(): Arr1jchar; overload; virtual;
    function readPassword(para1: JLString; para2: Arr1JLObject): Arr1jchar; overload; virtual;
    function readPassword(para1: JLString; const para2: array of JLObject): Arr1jchar; overload; virtual;
    function writer(): JIPrintWriter; overload; virtual;
  end;

  JIOutputStream = class abstract external 'java.io' name 'OutputStream' (JLObject, JICloseable, JIFlushable)
  public
    constructor create(); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual; abstract;  // throws java.io.IOException
  end;

  JIWriter = class abstract external 'java.io' name 'Writer' (JLObject, JLAppendable, JICloseable, JIFlushable)
  strict protected
    var
      flock: JLObject; external name 'lock';
  strict protected
    constructor create(); overload;
    constructor create(para1: JLObject); overload;
  public
    procedure close(); overload; virtual; abstract;  // throws java.io.IOException
    procedure flush(); overload; virtual; abstract;  // throws java.io.IOException
    procedure write(para1: Arr1jchar); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jchar); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual; abstract;  // throws java.io.IOException
    procedure write(var para1: array of jchar; para2: jint; para3: jint); overload; virtual; abstract;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: JLString); overload; virtual;  // throws java.io.IOException
    procedure write(para1: JLString; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence; para2: jint; para3: jint): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence; para2: jint; para3: jint): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JLAppendable; overload; virtual;  // throws java.io.IOException
  end;

  JUFormatter = class sealed external 'java.util' name 'Formatter' (JLObject, JICloseable, JIFlushable)
  public
    type
      InnerBigDecimalLayoutForm = class;
      Arr1InnerBigDecimalLayoutForm = array of InnerBigDecimalLayoutForm;
      Arr2InnerBigDecimalLayoutForm = array of Arr1InnerBigDecimalLayoutForm;
      Arr3InnerBigDecimalLayoutForm = array of Arr2InnerBigDecimalLayoutForm;
      InnerBigDecimalLayoutForm = class sealed external 'java.util' name 'BigDecimalLayoutForm' (JLEnum)
      public
        final class var
          fDECIMAL_FLOAT: JUFormatter.InnerBigDecimalLayoutForm; external name 'DECIMAL_FLOAT';
          fSCIENTIFIC: JUFormatter.InnerBigDecimalLayoutForm; external name 'SCIENTIFIC';
      public
        class function values(): JUFormatter.Arr1InnerBigDecimalLayoutForm; static; overload;
        class function valueOf(para1: JLString): JUFormatter.InnerBigDecimalLayoutForm; static; overload;
      end;

  public
    constructor create(); overload;
    constructor create(para1: JLAppendable); overload;
    constructor create(para1: JULocale); overload;
    constructor create(para1: JLAppendable; para2: JULocale); overload;
    constructor create(para1: JLString); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JLString; para2: JLString); overload;  // throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    constructor create(para1: JLString; para2: JLString; para3: JULocale); overload;  // throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    constructor create(para1: JIFile); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JIFile; para2: JLString); overload;  // throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    constructor create(para1: JIFile; para2: JLString; para3: JULocale); overload;  // throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    constructor create(para1: JIOutputStream); overload;
    constructor create(para1: JIOutputStream; para2: JLString); overload;  // throws java.io.UnsupportedEncodingException
    constructor create(para1: JIOutputStream; para2: JLString; para3: JULocale); overload;  // throws java.io.UnsupportedEncodingException
    constructor create(para1: JIPrintStream); overload;
    function locale(): JULocale; overload; virtual;
    function out(): JLAppendable; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure flush(); overload; virtual;
    procedure close(); overload; virtual;
    function ioException(): JIIOException; overload; virtual;
    function format(para1: JLString; para2: Arr1JLObject): JUFormatter; overload; virtual;
    function format(para1: JLString; const para2: array of JLObject): JUFormatter; overload; virtual;
    function format(para1: JULocale; para2: JLString; para3: Arr1JLObject): JUFormatter; overload; virtual;
    function format(para1: JULocale; para2: JLString; const para3: array of JLObject): JUFormatter; overload; virtual;
  end;

  JSSecureClassLoader = class external 'java.security' name 'SecureClassLoader' (JLClassLoader)
  strict protected
    constructor create(); overload;
    constructor create(para1: JLClassLoader); overload;
    function getPermissions(para1: JSCodeSource): JSPermissionCollection; overload; virtual;
    function defineClass(para1: JLString; para2: Arr1jbyte; para3: jint; para4: jint; para5: JSCodeSource): JLClass; overload; virtual; final;
    function defineClass(para1: JLString; var para2: array of jbyte; para3: jint; para4: jint; para5: JSCodeSource): JLClass; overload; virtual; final;
    function defineClass(para1: JLString; para2: JNByteBuffer; para3: JSCodeSource): JLClass; overload; virtual; final;
  end;

  ARRenderScript = class external 'android.renderscript' name 'RenderScript' (JLObject)
  public
    type
      InnerPriority = class;
      Arr1InnerPriority = array of InnerPriority;
      Arr2InnerPriority = array of Arr1InnerPriority;
      Arr3InnerPriority = array of Arr2InnerPriority;
      InnerContextType = class;
      Arr1InnerContextType = array of InnerContextType;
      Arr2InnerContextType = array of Arr1InnerContextType;
      Arr3InnerContextType = array of Arr2InnerContextType;
      InnerRSErrorHandler = class;
      Arr1InnerRSErrorHandler = array of InnerRSErrorHandler;
      Arr2InnerRSErrorHandler = array of Arr1InnerRSErrorHandler;
      Arr3InnerRSErrorHandler = array of Arr2InnerRSErrorHandler;
      InnerRSMessageHandler = class;
      Arr1InnerRSMessageHandler = array of InnerRSMessageHandler;
      Arr2InnerRSMessageHandler = array of Arr1InnerRSMessageHandler;
      Arr3InnerRSMessageHandler = array of Arr2InnerRSMessageHandler;
      InnerPriority = class sealed external 'android.renderscript' name 'Priority' (JLEnum)
      public
        final class var
          fLOW: ARRenderScript.InnerPriority; external name 'LOW';
          fNORMAL: ARRenderScript.InnerPriority; external name 'NORMAL';
      public
        class function values(): ARRenderScript.Arr1InnerPriority; static; overload;
        class function valueOf(para1: JLString): ARRenderScript.InnerPriority; static; overload;
      end;

      InnerContextType = class sealed external 'android.renderscript' name 'ContextType' (JLEnum)
      public
        final class var
          fDEBUG: ARRenderScript.InnerContextType; external name 'DEBUG';
          fNORMAL: ARRenderScript.InnerContextType; external name 'NORMAL';
          fPROFILE: ARRenderScript.InnerContextType; external name 'PROFILE';
      public
        class function values(): ARRenderScript.Arr1InnerContextType; static; overload;
        class function valueOf(para1: JLString): ARRenderScript.InnerContextType; static; overload;
      end;

      InnerRSErrorHandler = class external 'android.renderscript' name 'RSErrorHandler' (JLObject, JLRunnable)
      strict protected
        var
          fmErrorMessage: JLString; external name 'mErrorMessage';
          fmErrorNum: jint; external name 'mErrorNum';
      public
        constructor create(); overload;
        procedure run(); overload; virtual;
      end;

      InnerRSMessageHandler = class external 'android.renderscript' name 'RSMessageHandler' (JLObject, JLRunnable)
      strict protected
        var
          fmData: Arr1jint; external name 'mData';
          fmID: jint; external name 'mID';
          fmLength: jint; external name 'mLength';
      public
        constructor create(); overload;
        procedure run(); overload; virtual;
      end;

  public
    const
      CREATE_FLAG_LOW_LATENCY = 2;
      CREATE_FLAG_LOW_POWER = 4;
      CREATE_FLAG_NONE = 0;
  public
    procedure setMessageHandler(para1: ARRenderScript.InnerRSMessageHandler); overload; virtual;
    function getMessageHandler(): ARRenderScript.InnerRSMessageHandler; overload; virtual;
    procedure sendMessage(para1: jint; para2: Arr1jint); overload; virtual;
    procedure sendMessage(para1: jint; var para2: array of jint); overload; virtual;
    procedure setErrorHandler(para1: ARRenderScript.InnerRSErrorHandler); overload; virtual;
    function getErrorHandler(): ARRenderScript.InnerRSErrorHandler; overload; virtual;
    procedure setPriority(para1: ARRenderScript.InnerPriority); overload; virtual;
    function getApplicationContext(): ACContext; overload; virtual; final;
    class function create_(para1: ACContext): ARRenderScript; static; external name 'create'; overload;
    class function create_(para1: ACContext; para2: ARRenderScript.InnerContextType): ARRenderScript; static; external name 'create'; overload;
    class function create_(para1: ACContext; para2: ARRenderScript.InnerContextType; para3: jint): ARRenderScript; static; external name 'create'; overload;
    procedure contextDump(); overload; virtual;
    procedure finish(); overload; virtual;
    procedure destroy(); overload; virtual;
  end;

  AWWebSyncManager = class abstract external 'android.webkit' name 'WebSyncManager' (JLObject, JLRunnable)
  strict protected
    const
      LOGTAG = 'websync';
  strict protected
    var
      fmDataBase: AWWebViewDatabase; external name 'mDataBase';
      fmHandler: AOHandler; external name 'mHandler';
  strict protected
    constructor create(para1: ACContext; para2: JLString); overload;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  public
    procedure run(); overload; virtual;
    procedure sync(); overload; virtual;
    procedure resetSync(); overload; virtual;
    procedure startSync(); overload; virtual;
    procedure stopSync(); overload; virtual;
  strict protected
    procedure onSyncInit(); overload; virtual;
  end;

  JLThread = class external 'java.lang' name 'Thread' (JLObject, JLRunnable)
  public
    type
      InnerUncaughtExceptionHandler = interface;
      Arr1InnerUncaughtExceptionHandler = array of InnerUncaughtExceptionHandler;
      Arr2InnerUncaughtExceptionHandler = array of Arr1InnerUncaughtExceptionHandler;
      Arr3InnerUncaughtExceptionHandler = array of Arr2InnerUncaughtExceptionHandler;
      InnerState = class;
      Arr1InnerState = array of InnerState;
      Arr2InnerState = array of Arr1InnerState;
      Arr3InnerState = array of Arr2InnerState;
      InnerUncaughtExceptionHandler = interface external 'java.lang' name 'UncaughtExceptionHandler' 
        procedure uncaughtException(para1: JLThread; para2: JLThrowable); overload;
      end;

      InnerState = class sealed external 'java.lang' name 'State' (JLEnum)
      public
        final class var
          fBLOCKED: JLThread.InnerState; external name 'BLOCKED';
          fNEW: JLThread.InnerState; external name 'NEW';
          fRUNNABLE: JLThread.InnerState; external name 'RUNNABLE';
          fTERMINATED: JLThread.InnerState; external name 'TERMINATED';
          fTIMED_WAITING: JLThread.InnerState; external name 'TIMED_WAITING';
          fWAITING: JLThread.InnerState; external name 'WAITING';
      public
        class function values(): JLThread.Arr1InnerState; static; overload;
        class function valueOf(para1: JLString): JLThread.InnerState; static; overload;
      end;

  public
    const
      MAX_PRIORITY = 10;
      MIN_PRIORITY = 1;
      NORM_PRIORITY = 5;
  public
    constructor create(); overload;
    constructor create(para1: JLRunnable); overload;
    constructor create(para1: JLRunnable; para2: JLString); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThreadGroup; para2: JLRunnable); overload;
    constructor create(para1: JLThreadGroup; para2: JLRunnable; para3: JLString); overload;
    constructor create(para1: JLThreadGroup; para2: JLString); overload;
    constructor create(para1: JLThreadGroup; para2: JLRunnable; para3: JLString; para4: jlong); overload;
    class function activeCount(): jint; static; overload;
    procedure checkAccess(); overload; virtual; final;
    function countStackFrames(): jint; overload; virtual;
    class function currentThread(): JLThread; static; overload;
    procedure destroy(); overload; virtual;
    class procedure dumpStack(); static; overload;
    class function enumerate(para1: Arr1JLThread): jint; static; overload;
    class function enumerate(var para1: array of JLThread): jint; static; overload;
    class function getAllStackTraces(): JUMap; static; overload;
    function getContextClassLoader(): JLClassLoader; overload; virtual;
    class function getDefaultUncaughtExceptionHandler(): JLThread.InnerUncaughtExceptionHandler; static; overload;
    function getId(): jlong; overload; virtual;
    function getName(): JLString; overload; virtual; final;
    function getPriority(): jint; overload; virtual; final;
    function getStackTrace(): Arr1JLStackTraceElement; overload; virtual;
    function getState(): JLThread.InnerState; overload; virtual;
    function getThreadGroup(): JLThreadGroup; overload; virtual; final;
    function getUncaughtExceptionHandler(): JLThread.InnerUncaughtExceptionHandler; overload; virtual;
    procedure interrupt(); overload; virtual;
    class function interrupted(): jboolean; static; overload;
    function isAlive(): jboolean; overload; virtual; final;
    function isDaemon(): jboolean; overload; virtual; final;
    function isInterrupted(): jboolean; overload; virtual;
    procedure join(); overload; virtual; final;  // throws java.lang.InterruptedException
    procedure join(para1: jlong); overload; virtual; final;  // throws java.lang.InterruptedException
    procedure join(para1: jlong; para2: jint); overload; virtual; final;  // throws java.lang.InterruptedException
    procedure resume(); overload; virtual; final;
    procedure run(); overload; virtual;
    procedure setContextClassLoader(para1: JLClassLoader); overload; virtual;
    procedure setDaemon(para1: jboolean); overload; virtual; final;
    class procedure setDefaultUncaughtExceptionHandler(para1: JLThread.InnerUncaughtExceptionHandler); static; overload;
    procedure setName(para1: JLString); overload; virtual; final;
    procedure setPriority(para1: jint); overload; virtual; final;
    procedure setUncaughtExceptionHandler(para1: JLThread.InnerUncaughtExceptionHandler); overload; virtual;
    class procedure sleep(para1: jlong); static; overload;  // throws java.lang.InterruptedException
    class procedure sleep(para1: jlong; para2: jint); static; overload;  // throws java.lang.InterruptedException
    procedure start(); overload; virtual;
    procedure stop(); overload; virtual; final;
    procedure stop(para1: JLThrowable); overload; virtual; final;
    procedure suspend(); overload; virtual; final;
    function toString(): JLString; overload; virtual;
    class procedure yield(); static; overload;
    class function holdsLock(para1: JLObject): jboolean; static; overload;
  end;

  JUTimerTask = class abstract external 'java.util' name 'TimerTask' (JLObject, JLRunnable)
  strict protected
    constructor create(); overload;
  public
    function cancel(): jboolean; overload; virtual;
    function scheduledExecutionTime(): jlong; overload; virtual;
    procedure run(); overload; virtual; abstract;
  end;

  OAHICTRefQueueWorker = class external 'org.apache.http.impl.conn.tsccm' name 'RefQueueWorker' (JLObject, JLRunnable)
  strict protected
    final var
      frefHandler: OAHICTRefQueueHandler; external name 'refHandler';
      frefQueue: JLRReferenceQueue; external name 'refQueue';
  strict protected
    var
      fworkerThread: JLThread; external name 'workerThread';
  public
    constructor create(para1: JLRReferenceQueue; para2: OAHICTRefQueueHandler); overload;
    procedure run(); overload; virtual;
    procedure shutdown(); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ATFlakyTest = interface external 'android.test' name 'FlakyTest' (JLAAnnotation)
    function tolerance(): jint; overload;
  end;

  ATUiThreadTest = interface external 'android.test' name 'UiThreadTest' (JLAAnnotation)
  end;

  ATSALargeTest = interface external 'android.test.suitebuilder.annotation' name 'LargeTest' (JLAAnnotation)
  end;

  ATSAMediumTest = interface external 'android.test.suitebuilder.annotation' name 'MediumTest' (JLAAnnotation)
  end;

  ATSASmallTest = interface external 'android.test.suitebuilder.annotation' name 'SmallTest' (JLAAnnotation)
  end;

  ATSASmoke = interface external 'android.test.suitebuilder.annotation' name 'Smoke' (JLAAnnotation)
  end;

  ATSASuppress = interface external 'android.test.suitebuilder.annotation' name 'Suppress' (JLAAnnotation)
  end;

  AVViewDebug = class external 'android.view' name 'ViewDebug' (JLObject)
  public
    type
      InnerRecyclerTraceType = class;
      Arr1InnerRecyclerTraceType = array of InnerRecyclerTraceType;
      Arr2InnerRecyclerTraceType = array of Arr1InnerRecyclerTraceType;
      Arr3InnerRecyclerTraceType = array of Arr2InnerRecyclerTraceType;
      InnerHierarchyTraceType = class;
      Arr1InnerHierarchyTraceType = array of InnerHierarchyTraceType;
      Arr2InnerHierarchyTraceType = array of Arr1InnerHierarchyTraceType;
      Arr3InnerHierarchyTraceType = array of Arr2InnerHierarchyTraceType;
      InnerCapturedViewProperty = interface;
      Arr1InnerCapturedViewProperty = array of InnerCapturedViewProperty;
      Arr2InnerCapturedViewProperty = array of Arr1InnerCapturedViewProperty;
      Arr3InnerCapturedViewProperty = array of Arr2InnerCapturedViewProperty;
      InnerFlagToString = interface;
      Arr1InnerFlagToString = array of InnerFlagToString;
      Arr2InnerFlagToString = array of Arr1InnerFlagToString;
      Arr3InnerFlagToString = array of Arr2InnerFlagToString;
      InnerIntToString = interface;
      Arr1InnerIntToString = array of InnerIntToString;
      Arr2InnerIntToString = array of Arr1InnerIntToString;
      Arr3InnerIntToString = array of Arr2InnerIntToString;
      InnerExportedProperty = interface;
      Arr1InnerExportedProperty = array of InnerExportedProperty;
      Arr2InnerExportedProperty = array of Arr1InnerExportedProperty;
      Arr3InnerExportedProperty = array of Arr2InnerExportedProperty;
      InnerRecyclerTraceType = class sealed external 'android.view' name 'RecyclerTraceType' (JLEnum)
      public
        final class var
          fBIND_VIEW: AVViewDebug.InnerRecyclerTraceType; external name 'BIND_VIEW';
          fMOVE_FROM_ACTIVE_TO_SCRAP_HEAP: AVViewDebug.InnerRecyclerTraceType; external name 'MOVE_FROM_ACTIVE_TO_SCRAP_HEAP';
          fMOVE_TO_SCRAP_HEAP: AVViewDebug.InnerRecyclerTraceType; external name 'MOVE_TO_SCRAP_HEAP';
          fNEW_VIEW: AVViewDebug.InnerRecyclerTraceType; external name 'NEW_VIEW';
          fRECYCLE_FROM_ACTIVE_HEAP: AVViewDebug.InnerRecyclerTraceType; external name 'RECYCLE_FROM_ACTIVE_HEAP';
          fRECYCLE_FROM_SCRAP_HEAP: AVViewDebug.InnerRecyclerTraceType; external name 'RECYCLE_FROM_SCRAP_HEAP';
      public
        class function values(): AVViewDebug.Arr1InnerRecyclerTraceType; static; overload;
        class function valueOf(para1: JLString): AVViewDebug.InnerRecyclerTraceType; static; overload;
      end;

      InnerHierarchyTraceType = class sealed external 'android.view' name 'HierarchyTraceType' (JLEnum)
      public
        final class var
          fBUILD_CACHE: AVViewDebug.InnerHierarchyTraceType; external name 'BUILD_CACHE';
          fDRAW: AVViewDebug.InnerHierarchyTraceType; external name 'DRAW';
          fINVALIDATE: AVViewDebug.InnerHierarchyTraceType; external name 'INVALIDATE';
          fINVALIDATE_CHILD: AVViewDebug.InnerHierarchyTraceType; external name 'INVALIDATE_CHILD';
          fINVALIDATE_CHILD_IN_PARENT: AVViewDebug.InnerHierarchyTraceType; external name 'INVALIDATE_CHILD_IN_PARENT';
          fON_LAYOUT: AVViewDebug.InnerHierarchyTraceType; external name 'ON_LAYOUT';
          fON_MEASURE: AVViewDebug.InnerHierarchyTraceType; external name 'ON_MEASURE';
          fREQUEST_LAYOUT: AVViewDebug.InnerHierarchyTraceType; external name 'REQUEST_LAYOUT';
      public
        class function values(): AVViewDebug.Arr1InnerHierarchyTraceType; static; overload;
        class function valueOf(para1: JLString): AVViewDebug.InnerHierarchyTraceType; static; overload;
      end;

      InnerCapturedViewProperty = interface external 'android.view' name 'CapturedViewProperty' (JLAAnnotation)
        function retrieveReturn(): jboolean; overload;
      end;

      InnerFlagToString = interface external 'android.view' name 'FlagToString' (JLAAnnotation)
        function mask(): jint; overload;
        function equals(): jint; overload;
        function name(): JLString; overload;
        function outputIf(): jboolean; overload;
      end;

      InnerIntToString = interface external 'android.view' name 'IntToString' (JLAAnnotation)
        function from(): jint; overload;
        function &to(): JLString; overload;
      end;

      InnerExportedProperty = interface external 'android.view' name 'ExportedProperty' (JLAAnnotation)
        function resolveId(): jboolean; overload;
        function mapping(): AVViewDebug.Arr1InnerIntToString; overload;
        function indexMapping(): AVViewDebug.Arr1InnerIntToString; overload;
        function flagMapping(): AVViewDebug.Arr1InnerFlagToString; overload;
        function deepExport(): jboolean; overload;
        function prefix(): JLString; overload;
        function category(): JLString; overload;
        function formatToHexString(): jboolean; overload;
        function hasAdjacentMapping(): jboolean; overload;
      end;

  public
    const
      TRACE_HIERARCHY = 0 deprecated;
      TRACE_RECYCLER = 0 deprecated;
  public
    constructor create(); overload;
    class procedure trace(para1: AVView; para2: AVViewDebug.InnerRecyclerTraceType; para3: Arr1jint); static; overload;
    class procedure trace(para1: AVView; para2: AVViewDebug.InnerRecyclerTraceType; const para3: array of jint); static; overload;
    class procedure startRecyclerTracing(para1: JLString; para2: AVView); static; overload;
    class procedure stopRecyclerTracing(); static; overload;
    class procedure trace(para1: AVView; para2: AVViewDebug.InnerHierarchyTraceType); static; overload;
    class procedure startHierarchyTracing(para1: JLString; para2: AVView); static; overload;
    class procedure stopHierarchyTracing(); static; overload;
    class procedure dumpCapturedView(para1: JLString; para2: JLObject); static; overload;
  end;

  AWRemoteViews = class external 'android.widget' name 'RemoteViews' (JLObject, AOParcelable, AVLayoutInflater.InnerFilter)
  public
    type
      InnerActionException = class;
      Arr1InnerActionException = array of InnerActionException;
      Arr2InnerActionException = array of Arr1InnerActionException;
      Arr3InnerActionException = array of Arr2InnerActionException;
      InnerRemoteView = interface;
      Arr1InnerRemoteView = array of InnerRemoteView;
      Arr2InnerRemoteView = array of Arr1InnerRemoteView;
      Arr3InnerRemoteView = array of Arr2InnerRemoteView;
      InnerActionException = class external 'android.widget' name 'ActionException' (JLRuntimeException)
      public
        constructor create(para1: JLException); overload;
        constructor create(para1: JLString); overload;
      end;

      InnerRemoteView = interface external 'android.widget' name 'RemoteView' (JLAAnnotation)
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: AWRemoteViews; para2: AWRemoteViews); overload;
    constructor create(para1: AOParcel); overload;
    function clone(): AWRemoteViews; overload; virtual;
    function getPackage(): JLString; overload; virtual;
    function getLayoutId(): jint; overload; virtual;
    procedure addView(para1: jint; para2: AWRemoteViews); overload; virtual;
    procedure removeAllViews(para1: jint); overload; virtual;
    procedure showNext(para1: jint); overload; virtual;
    procedure showPrevious(para1: jint); overload; virtual;
    procedure setDisplayedChild(para1: jint; para2: jint); overload; virtual;
    procedure setViewVisibility(para1: jint; para2: jint); overload; virtual;
    procedure setTextViewText(para1: jint; para2: JLCharSequence); overload; virtual;
    procedure setTextViewTextSize(para1: jint; para2: jint; para3: jfloat); overload; virtual;
    procedure setTextViewCompoundDrawables(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure setTextViewCompoundDrawablesRelative(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure setImageViewResource(para1: jint; para2: jint); overload; virtual;
    procedure setImageViewUri(para1: jint; para2: ANUri); overload; virtual;
    procedure setImageViewBitmap(para1: jint; para2: AGBitmap); overload; virtual;
    procedure setEmptyView(para1: jint; para2: jint); overload; virtual;
    procedure setChronometer(para1: jint; para2: jlong; para3: JLString; para4: jboolean); overload; virtual;
    procedure setProgressBar(para1: jint; para2: jint; para3: jint; para4: jboolean); overload; virtual;
    procedure setOnClickPendingIntent(para1: jint; para2: AAPendingIntent); overload; virtual;
    procedure setPendingIntentTemplate(para1: jint; para2: AAPendingIntent); overload; virtual;
    procedure setOnClickFillInIntent(para1: jint; para2: ACIntent); overload; virtual;
    procedure setTextColor(para1: jint; para2: jint); overload; virtual;
    procedure setRemoteAdapter(para1: jint; para2: jint; para3: ACIntent); overload; virtual;
    procedure setRemoteAdapter(para1: jint; para2: ACIntent); overload; virtual;
    procedure setScrollPosition(para1: jint; para2: jint); overload; virtual;
    procedure setRelativeScrollPosition(para1: jint; para2: jint); overload; virtual;
    procedure setViewPadding(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure setBoolean(para1: jint; para2: JLString; para3: jboolean); overload; virtual;
    procedure setByte(para1: jint; para2: JLString; para3: jbyte); overload; virtual;
    procedure setShort(para1: jint; para2: JLString; para3: jshort); overload; virtual;
    procedure setInt(para1: jint; para2: JLString; para3: jint); overload; virtual;
    procedure setLong(para1: jint; para2: JLString; para3: jlong); overload; virtual;
    procedure setFloat(para1: jint; para2: JLString; para3: jfloat); overload; virtual;
    procedure setDouble(para1: jint; para2: JLString; para3: jdouble); overload; virtual;
    procedure setChar(para1: jint; para2: JLString; para3: jchar); overload; virtual;
    procedure setString(para1: jint; para2: JLString; para3: JLString); overload; virtual;
    procedure setCharSequence(para1: jint; para2: JLString; para3: JLCharSequence); overload; virtual;
    procedure setUri(para1: jint; para2: JLString; para3: ANUri); overload; virtual;
    procedure setBitmap(para1: jint; para2: JLString; para3: AGBitmap); overload; virtual;
    procedure setBundle(para1: jint; para2: JLString; para3: AOBundle); overload; virtual;
    procedure setIntent(para1: jint; para2: JLString; para3: ACIntent); overload; virtual;
    procedure setContentDescription(para1: jint; para2: JLCharSequence); overload; virtual;
    procedure setLabelFor(para1: jint; para2: jint); overload; virtual;
    function apply(para1: ACContext; para2: AVViewGroup): AVView; overload; virtual;
    procedure reapply(para1: ACContext; para2: AVView); overload; virtual;
    function onLoadClass(para1: JLClass): jboolean; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JLDeprecated = interface external 'java.lang' name 'Deprecated' (JLAAnnotation)
  end;

  JLOverride = interface external 'java.lang' name 'Override' (JLAAnnotation)
  end;

  JLSuppressWarnings = interface external 'java.lang' name 'SuppressWarnings' (JLAAnnotation)
    function value(): Arr1JLString; overload;
  end;

  JLADocumented = interface external 'java.lang.annotation' name 'Documented' (JLAAnnotation)
  end;

  JLAInherited = interface external 'java.lang.annotation' name 'Inherited' (JLAAnnotation)
  end;

  JLARetention = interface external 'java.lang.annotation' name 'Retention' (JLAAnnotation)
    function value(): JLARetentionPolicy; overload;
  end;

  JLATarget = interface external 'java.lang.annotation' name 'Target' (JLAAnnotation)
    function value(): Arr1JLAElementType; overload;
  end;

  JLRPhantomReference = class external 'java.lang.ref' name 'PhantomReference' (JLRReference)
  public
    constructor create(para1: JLObject; para2: JLRReferenceQueue); overload;
    function get(): JLObject; overload; virtual;
  end;

  JLRSoftReference = class external 'java.lang.ref' name 'SoftReference' (JLRReference)
  public
    constructor create(para1: JLObject); overload;
    constructor create(para1: JLObject; para2: JLRReferenceQueue); overload;
  end;

  JLRWeakReference = class external 'java.lang.ref' name 'WeakReference' (JLRReference)
  public
    constructor create(para1: JLObject); overload;
    constructor create(para1: JLObject; para2: JLRReferenceQueue); overload;
  end;

  JNSecureCacheResponse = class abstract external 'java.net' name 'SecureCacheResponse' (JNCacheResponse)
  public
    constructor create(); overload;
    function getCipherSuite(): JLString; overload; virtual; abstract;
    function getLocalCertificateChain(): JUList; overload; virtual; abstract;
    function getServerCertificateChain(): JUList; overload; virtual; abstract;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getPeerPrincipal(): JSPrincipal; overload; virtual; abstract;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getLocalPrincipal(): JSPrincipal; overload; virtual; abstract;
  end;

  JNCookieManager = class external 'java.net' name 'CookieManager' (JNCookieHandler)
  public
    constructor create(); overload;
    constructor create(para1: JNCookieStore; para2: JNCookiePolicy); overload;
    function get(para1: JNURI; para2: JUMap): JUMap; overload; virtual;  // throws java.io.IOException
    procedure put(para1: JNURI; para2: JUMap); overload; virtual;  // throws java.io.IOException
    procedure setCookiePolicy(para1: JNCookiePolicy); overload; virtual;
    function getCookieStore(): JNCookieStore; overload; virtual;
  end;

  JNMulticastSocket = class external 'java.net' name 'MulticastSocket' (JNDatagramSocket)
  public
    constructor create(); overload;  // throws java.io.IOException
    constructor create(para1: jint); overload;  // throws java.io.IOException
    constructor create(para1: JNSocketAddress); overload;  // throws java.io.IOException
    function getInterface(): JNInetAddress; overload; virtual;  // throws java.net.SocketException
    function getNetworkInterface(): JNNetworkInterface; overload; virtual;  // throws java.net.SocketException
    function getTimeToLive(): jint; overload; virtual;  // throws java.io.IOException
    function getTTL(): jbyte; overload; virtual;  // throws java.io.IOException
    procedure joinGroup(para1: JNInetAddress); overload; virtual;  // throws java.io.IOException
    procedure joinGroup(para1: JNSocketAddress; para2: JNNetworkInterface); overload; virtual;  // throws java.io.IOException
    procedure leaveGroup(para1: JNInetAddress); overload; virtual;  // throws java.io.IOException
    procedure leaveGroup(para1: JNSocketAddress; para2: JNNetworkInterface); overload; virtual;  // throws java.io.IOException
    procedure send(para1: JNDatagramPacket; para2: jbyte); overload; virtual;  // throws java.io.IOException
    procedure setInterface(para1: JNInetAddress); overload; virtual;  // throws java.net.SocketException
    procedure setNetworkInterface(para1: JNNetworkInterface); overload; virtual;  // throws java.net.SocketException
    procedure setTimeToLive(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure setTTL(para1: jbyte); overload; virtual;  // throws java.io.IOException
    function getLoopbackMode(): jboolean; overload; virtual;  // throws java.net.SocketException
    procedure setLoopbackMode(para1: jboolean); overload; virtual;  // throws java.net.SocketException
  end;

  ANHHttpResponseCache = class sealed external 'android.net.http' name 'HttpResponseCache' (JNResponseCache, JICloseable)
  public
    class function getInstalled(): ANHHttpResponseCache; static; overload;
    class function install(para1: JIFile; para2: jlong): ANHHttpResponseCache; static; overload;  // throws java.io.IOException
    function get(para1: JNURI; para2: JLString; para3: JUMap): JNCacheResponse; overload; virtual;  // throws java.io.IOException
    function put(para1: JNURI; para2: JNURLConnection): JNCacheRequest; overload; virtual;  // throws java.io.IOException
    function size(): jlong; overload; virtual;
    function maxSize(): jlong; overload; virtual;
    procedure flush(); overload; virtual;
    function getNetworkCount(): jint; overload; virtual;
    function getHitCount(): jint; overload; virtual;
    function getRequestCount(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure delete(); overload; virtual;  // throws java.io.IOException
  end;

  JNSSSLServerSocket = class abstract external 'javax.net.ssl' name 'SSLServerSocket' (JNServerSocket)
  strict protected
    constructor create(); overload;  // throws java.io.IOException
    constructor create(para1: jint); overload;  // throws java.io.IOException
    constructor create(para1: jint; para2: jint); overload;  // throws java.io.IOException
    constructor create(para1: jint; para2: jint; para3: JNInetAddress); overload;  // throws java.io.IOException
  public
    function getEnabledCipherSuites(): Arr1JLString; overload; virtual; abstract;
    procedure setEnabledCipherSuites(para1: Arr1JLString); overload; virtual; abstract;
    procedure setEnabledCipherSuites(var para1: array of JLString); overload; virtual; abstract;
    function getSupportedCipherSuites(): Arr1JLString; overload; virtual; abstract;
    function getSupportedProtocols(): Arr1JLString; overload; virtual; abstract;
    function getEnabledProtocols(): Arr1JLString; overload; virtual; abstract;
    procedure setEnabledProtocols(para1: Arr1JLString); overload; virtual; abstract;
    procedure setEnabledProtocols(var para1: array of JLString); overload; virtual; abstract;
    procedure setNeedClientAuth(para1: jboolean); overload; virtual; abstract;
    function getNeedClientAuth(): jboolean; overload; virtual; abstract;
    procedure setWantClientAuth(para1: jboolean); overload; virtual; abstract;
    function getWantClientAuth(): jboolean; overload; virtual; abstract;
    procedure setUseClientMode(para1: jboolean); overload; virtual; abstract;
    function getUseClientMode(): jboolean; overload; virtual; abstract;
    procedure setEnableSessionCreation(para1: jboolean); overload; virtual; abstract;
    function getEnableSessionCreation(): jboolean; overload; virtual; abstract;
  end;

  JNSSSLSocket = class abstract external 'javax.net.ssl' name 'SSLSocket' (JNSocket)
  strict protected
    constructor create(); overload;
    constructor create(para1: JLString; para2: jint); overload;  // throws java.io.IOException, java.net.UnknownHostException
    constructor create(para1: JNInetAddress; para2: jint); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: jint; para3: JNInetAddress; para4: jint); overload;  // throws java.io.IOException, java.net.UnknownHostException
    constructor create(para1: JNInetAddress; para2: jint; para3: JNInetAddress; para4: jint); overload;  // throws java.io.IOException
  public
    procedure shutdownInput(); overload; virtual;  // throws java.io.IOException
    procedure shutdownOutput(); overload; virtual;  // throws java.io.IOException
    function getSupportedCipherSuites(): Arr1JLString; overload; virtual; abstract;
    function getEnabledCipherSuites(): Arr1JLString; overload; virtual; abstract;
    procedure setEnabledCipherSuites(para1: Arr1JLString); overload; virtual; abstract;
    procedure setEnabledCipherSuites(var para1: array of JLString); overload; virtual; abstract;
    function getSupportedProtocols(): Arr1JLString; overload; virtual; abstract;
    function getEnabledProtocols(): Arr1JLString; overload; virtual; abstract;
    procedure setEnabledProtocols(para1: Arr1JLString); overload; virtual; abstract;
    procedure setEnabledProtocols(var para1: array of JLString); overload; virtual; abstract;
    function getSession(): JNSSSLSession; overload; virtual; abstract;
    procedure addHandshakeCompletedListener(para1: JNSHandshakeCompletedListener); overload; virtual; abstract;
    procedure removeHandshakeCompletedListener(para1: JNSHandshakeCompletedListener); overload; virtual; abstract;
    procedure startHandshake(); overload; virtual; abstract;  // throws java.io.IOException
    procedure setUseClientMode(para1: jboolean); overload; virtual; abstract;
    function getUseClientMode(): jboolean; overload; virtual; abstract;
    procedure setNeedClientAuth(para1: jboolean); overload; virtual; abstract;
    procedure setWantClientAuth(para1: jboolean); overload; virtual; abstract;
    function getNeedClientAuth(): jboolean; overload; virtual; abstract;
    function getWantClientAuth(): jboolean; overload; virtual; abstract;
    procedure setEnableSessionCreation(para1: jboolean); overload; virtual; abstract;
    function getEnableSessionCreation(): jboolean; overload; virtual; abstract;
    function getSSLParameters(): JNSSSLParameters; overload; virtual;
    procedure setSSLParameters(para1: JNSSSLParameters); overload; virtual;
  end;

  JNDatagramSocketImpl = class abstract external 'java.net' name 'DatagramSocketImpl' (JLObject, JNSocketOptions)
  strict protected
    var
      ffd: JIFileDescriptor; external name 'fd';
      flocalPort: jint; external name 'localPort';
  public
    constructor create(); overload;
  strict protected
    procedure bind(para1: jint; para2: JNInetAddress); overload; virtual; abstract;  // throws java.net.SocketException
    procedure close(); overload; virtual; abstract;
    procedure create_(); external name 'create'; overload; virtual; abstract;  // throws java.net.SocketException
    function getFileDescriptor(): JIFileDescriptor; overload; virtual;
    function getLocalPort(): jint; overload; virtual;
    function getTTL(): jbyte; overload; virtual; abstract;  // throws java.io.IOException
    function getTimeToLive(): jint; overload; virtual; abstract;  // throws java.io.IOException
    procedure join(para1: JNInetAddress); overload; virtual; abstract;  // throws java.io.IOException
    procedure joinGroup(para1: JNSocketAddress; para2: JNNetworkInterface); overload; virtual; abstract;  // throws java.io.IOException
    procedure leave(para1: JNInetAddress); overload; virtual; abstract;  // throws java.io.IOException
    procedure leaveGroup(para1: JNSocketAddress; para2: JNNetworkInterface); overload; virtual; abstract;  // throws java.io.IOException
    function peek(para1: JNInetAddress): jint; overload; virtual; abstract;  // throws java.io.IOException
    procedure receive(para1: JNDatagramPacket); overload; virtual; abstract;  // throws java.io.IOException
    procedure send(para1: JNDatagramPacket); overload; virtual; abstract;  // throws java.io.IOException
    procedure setTimeToLive(para1: jint); overload; virtual; abstract;  // throws java.io.IOException
    procedure setTTL(para1: jbyte); overload; virtual; abstract;  // throws java.io.IOException
    procedure connect(para1: JNInetAddress; para2: jint); overload; virtual;  // throws java.net.SocketException
    procedure disconnect(); overload; virtual;
    function peekData(para1: JNDatagramPacket): jint; overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNSocketImpl = class abstract external 'java.net' name 'SocketImpl' (JLObject, JNSocketOptions)
  strict protected
    var
      faddress: JNInetAddress; external name 'address';
      ffd: JIFileDescriptor; external name 'fd';
      flocalport: jint; external name 'localport';
      fport: jint; external name 'port';
  public
    constructor create(); overload;
  strict protected
    procedure accept(para1: JNSocketImpl); overload; virtual; abstract;  // throws java.io.IOException
    function available(): jint; overload; virtual; abstract;  // throws java.io.IOException
    procedure bind(para1: JNInetAddress; para2: jint); overload; virtual; abstract;  // throws java.io.IOException
    procedure close(); overload; virtual; abstract;  // throws java.io.IOException
    procedure connect(para1: JLString; para2: jint); overload; virtual; abstract;  // throws java.io.IOException
    procedure connect(para1: JNInetAddress; para2: jint); overload; virtual; abstract;  // throws java.io.IOException
    procedure create_(para1: jboolean); external name 'create'; overload; virtual; abstract;  // throws java.io.IOException
    function getFileDescriptor(): JIFileDescriptor; overload; virtual;
    function getInetAddress(): JNInetAddress; overload; virtual;
    function getInputStream(): JIInputStream; overload; virtual; abstract;  // throws java.io.IOException
    function getLocalPort(): jint; overload; virtual;
    function getOutputStream(): JIOutputStream; overload; virtual; abstract;  // throws java.io.IOException
    function getPort(): jint; overload; virtual;
    procedure listen(para1: jint); overload; virtual; abstract;  // throws java.io.IOException
  public
    function toString(): JLString; overload; virtual;
  strict protected
    procedure shutdownInput(); overload; virtual;  // throws java.io.IOException
    procedure shutdownOutput(); overload; virtual;  // throws java.io.IOException
    procedure connect(para1: JNSocketAddress; para2: jint); overload; virtual; abstract;  // throws java.io.IOException
    function supportsUrgentData(): jboolean; overload; virtual;
    procedure sendUrgentData(para1: jint); overload; virtual; abstract;  // throws java.io.IOException
    procedure setPerformancePreferences(para1: jint; para2: jint; para3: jint); overload; virtual;
  end;

  JNHttpURLConnection = class abstract external 'java.net' name 'HttpURLConnection' (JNURLConnection)
  public
    const
      HTTP_ACCEPTED = 202;
      HTTP_BAD_GATEWAY = 502;
      HTTP_BAD_METHOD = 405;
      HTTP_BAD_REQUEST = 400;
      HTTP_CLIENT_TIMEOUT = 408;
      HTTP_CONFLICT = 409;
      HTTP_CREATED = 201;
      HTTP_ENTITY_TOO_LARGE = 413;
      HTTP_FORBIDDEN = 403;
      HTTP_GATEWAY_TIMEOUT = 504;
      HTTP_GONE = 410;
      HTTP_INTERNAL_ERROR = 500;
      HTTP_LENGTH_REQUIRED = 411;
      HTTP_MOVED_PERM = 301;
      HTTP_MOVED_TEMP = 302;
      HTTP_MULT_CHOICE = 300;
      HTTP_NOT_ACCEPTABLE = 406;
      HTTP_NOT_AUTHORITATIVE = 203;
      HTTP_NOT_FOUND = 404;
      HTTP_NOT_IMPLEMENTED = 501;
      HTTP_NOT_MODIFIED = 304;
      HTTP_NO_CONTENT = 204;
      HTTP_OK = 200;
      HTTP_PARTIAL = 206;
      HTTP_PAYMENT_REQUIRED = 402;
      HTTP_PRECON_FAILED = 412;
      HTTP_PROXY_AUTH = 407;
      HTTP_REQ_TOO_LONG = 414;
      HTTP_RESET = 205;
      HTTP_SEE_OTHER = 303;
      HTTP_SERVER_ERROR = 500 deprecated;
      HTTP_UNAUTHORIZED = 401;
      HTTP_UNAVAILABLE = 503;
      HTTP_UNSUPPORTED_TYPE = 415;
      HTTP_USE_PROXY = 305;
      HTTP_VERSION = 505;
  strict protected
    var
      fchunkLength: jint; external name 'chunkLength';
      ffixedContentLength: jint; external name 'fixedContentLength';
      ffixedContentLengthLong: jlong; external name 'fixedContentLengthLong';
      finstanceFollowRedirects: jboolean; external name 'instanceFollowRedirects';
      fmethod: JLString; external name 'method';
      fresponseCode: jint; external name 'responseCode';
      fresponseMessage: JLString; external name 'responseMessage';
  strict protected
    constructor create(para1: JNURL); overload;
  public
    procedure disconnect(); overload; virtual; abstract;
    function getErrorStream(): JIInputStream; overload; virtual;
    class function getFollowRedirects(): jboolean; static; overload;
    function getPermission(): JSPermission; overload; virtual;  // throws java.io.IOException
    function getRequestMethod(): JLString; overload; virtual;
    function getResponseCode(): jint; overload; virtual;  // throws java.io.IOException
    function getResponseMessage(): JLString; overload; virtual;  // throws java.io.IOException
    class procedure setFollowRedirects(para1: jboolean); static; overload;
    procedure setRequestMethod(para1: JLString); overload; virtual;  // throws java.net.ProtocolException
    function usingProxy(): jboolean; overload; virtual; abstract;
    function getContentEncoding(): JLString; overload; virtual;
    function getInstanceFollowRedirects(): jboolean; overload; virtual;
    procedure setInstanceFollowRedirects(para1: jboolean); overload; virtual;
    function getHeaderFieldDate(para1: JLString; para2: jlong): jlong; overload; virtual;
    procedure setFixedLengthStreamingMode(para1: jlong); overload; virtual;
    procedure setFixedLengthStreamingMode(para1: jint); overload; virtual;
    procedure setChunkedStreamingMode(para1: jint); overload; virtual;
  end;

  JNJarURLConnection = class abstract external 'java.net' name 'JarURLConnection' (JNURLConnection)
  strict protected
    var
      fjarFileURLConnection: JNURLConnection; external name 'jarFileURLConnection';
  strict protected
    constructor create(para1: JNURL); overload;  // throws java.net.MalformedURLException
  public
    function getAttributes(): JUJAttributes; overload; virtual;  // throws java.io.IOException
    function getCertificates(): Arr1JSCCertificate; overload; virtual;  // throws java.io.IOException
    function getEntryName(): JLString; overload; virtual;
    function getJarEntry(): JUJJarEntry; overload; virtual;  // throws java.io.IOException
    function getManifest(): JUJManifest; overload; virtual;  // throws java.io.IOException
    function getJarFile(): JUJJarFile; overload; virtual; abstract;  // throws java.io.IOException
    function getJarFileURL(): JNURL; overload; virtual;
    function getMainAttributes(): JUJAttributes; overload; virtual;  // throws java.io.IOException
  end;

  JNCSAbstractSelectionKey = class abstract external 'java.nio.channels.spi' name 'AbstractSelectionKey' (JNCSelectionKey)
  strict protected
    constructor create(); overload;
  public
    function isValid(): jboolean; overload; virtual; final;
    procedure cancel(); overload; virtual; final;
  end;

  JNCSAbstractSelector = class abstract external 'java.nio.channels.spi' name 'AbstractSelector' (JNCSelector)
  strict protected
    constructor create(para1: JNCSSelectorProvider); overload;
  public
    procedure close(); overload; virtual; final;  // throws java.io.IOException
  strict protected
    procedure implCloseSelector(); overload; virtual; abstract;  // throws java.io.IOException
  public
    function isOpen(): jboolean; overload; virtual; final;
    function provider(): JNCSSelectorProvider; overload; virtual; final;
  strict protected
    function cancelledKeys(): JUSet; overload; virtual; final;
    function register(para1: JNCSAbstractSelectableChannel; para2: jint; para3: JLObject): JNCSelectionKey; overload; virtual; abstract;
    procedure deregister(para1: JNCSAbstractSelectionKey); overload; virtual; final;
    procedure &begin(); overload; virtual; final;
    procedure &end(); overload; virtual; final;
  end;

  JSASubjectDomainCombiner = class external 'javax.security.auth' name 'SubjectDomainCombiner' (JLObject, JSDomainCombiner)
  public
    constructor create(para1: JSASubject); overload;
    function getSubject(): JSASubject; overload; virtual;
    function combine(para1: Arr1JSProtectionDomain; para2: Arr1JSProtectionDomain): Arr1JSProtectionDomain; overload; virtual;
    function combine(var para1: array of JSProtectionDomain; var para2: array of JSProtectionDomain): Arr1JSProtectionDomain; overload; virtual;
  end;

  JSPermission = class abstract external 'java.security' name 'Permission' (JLObject, JSGuard, JISerializable)
  public
    constructor create(para1: JLString); overload;
    function getName(): JLString; overload; virtual; final;
    procedure checkGuard(para1: JLObject); overload; virtual;  // throws java.lang.SecurityException
    function newPermissionCollection(): JSPermissionCollection; overload; virtual;
    function getActions(): JLString; overload; virtual; abstract;
    function implies(para1: JSPermission): jboolean; overload; virtual; abstract;
  end;

  JSKeyPairGenerator = class abstract external 'java.security' name 'KeyPairGenerator' (JSKeyPairGeneratorSpi)
  strict protected
    constructor create(para1: JLString); overload;
  public
    function getAlgorithm(): JLString; overload; virtual;
    class function getInstance(para1: JLString): JSKeyPairGenerator; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSKeyPairGenerator; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSKeyPairGenerator; static; overload;  // throws java.security.NoSuchAlgorithmException
    function getProvider(): JSProvider; overload; virtual; final;
    procedure initialize(para1: jint); overload; virtual;
    procedure initialize(para1: JSSAlgorithmParameterSpec); overload; virtual;  // throws java.security.InvalidAlgorithmParameterException
    function genKeyPair(): JSKeyPair; overload; virtual; final;
    function generateKeyPair(): JSKeyPair; overload; virtual;
    procedure initialize(para1: jint; para2: JSSecureRandom); overload; virtual;
    procedure initialize(para1: JSSAlgorithmParameterSpec; para2: JSSecureRandom); overload; virtual;  // throws java.security.InvalidAlgorithmParameterException
  end;

  JSMessageDigest = class abstract external 'java.security' name 'MessageDigest' (JSMessageDigestSpi)
  strict protected
    constructor create(para1: JLString); overload;
  public
    class function getInstance(para1: JLString): JSMessageDigest; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSMessageDigest; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSMessageDigest; static; overload;  // throws java.security.NoSuchAlgorithmException
    procedure reset(); overload; virtual;
    procedure update(para1: jbyte); overload; virtual;
    procedure update(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure update(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure update(para1: Arr1jbyte); overload; virtual;
    procedure update(var para1: array of jbyte); overload; virtual;
    function digest(): Arr1jbyte; overload; virtual;
    function digest(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.security.DigestException
    function digest(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.security.DigestException
    function digest(para1: Arr1jbyte): Arr1jbyte; overload; virtual;
    function digest(var para1: array of jbyte): Arr1jbyte; overload; virtual;
    function toString(): JLString; overload; virtual;
    class function isEqual(para1: Arr1jbyte; para2: Arr1jbyte): jboolean; static; overload;
    class function isEqual(var para1: array of jbyte; var para2: array of jbyte): jboolean; static; overload;
    function getAlgorithm(): JLString; overload; virtual; final;
    function getProvider(): JSProvider; overload; virtual; final;
    function getDigestLength(): jint; overload; virtual; final;
    procedure update(para1: JNByteBuffer); overload; virtual; final;
  end;

  JSIdentity = class abstract external 'java.security' name 'Identity' (JLObject, JSPrincipal, JISerializable)
  strict protected
    constructor create(); overload;
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JSIdentityScope); overload;  // throws java.security.KeyManagementException
    procedure addCertificate(para1: JSCertificate); overload; virtual;  // throws java.security.KeyManagementException
    procedure removeCertificate(para1: JSCertificate); overload; virtual;  // throws java.security.KeyManagementException
    function certificates(): Arr1JSCertificate; overload; virtual;
  strict protected
    function identityEquals(para1: JSIdentity): jboolean; overload; virtual;
  public
    function toString(para1: jboolean): JLString; overload; virtual;
    function getScope(): JSIdentityScope; overload; virtual; final;
    procedure setPublicKey(para1: JSPublicKey); overload; virtual;  // throws java.security.KeyManagementException
    function getPublicKey(): JSPublicKey; overload; virtual;
    procedure setInfo(para1: JLString); overload; virtual;
    function getInfo(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function getName(): JLString; overload; virtual; final;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSAGroup = interface external 'java.security.acl' name 'Group' (JSPrincipal)
    function addMember(para1: JSPrincipal): jboolean; overload;
    function removeMember(para1: JSPrincipal): jboolean; overload;
    function isMember(para1: JSPrincipal): jboolean; overload;
    function members(): JUEnumeration; overload;
  end;

  JSAXX500Principal = class sealed external 'javax.security.auth.x500' name 'X500Principal' (JLObject, JISerializable, JSPrincipal)
  public
    const
      CANONICAL = 'CANONICAL';
      RFC1779 = 'RFC1779';
      RFC2253 = 'RFC2253';
  public
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JUMap); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getEncoded(): Arr1jbyte; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getName(para1: JLString): JLString; overload; virtual;
    function getName(para1: JLString; para2: JUMap): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OAHABasicUserPrincipal = class sealed external 'org.apache.http.auth' name 'BasicUserPrincipal' (JLObject, JSPrincipal)
  public
    constructor create(para1: JLString); overload;
    function getName(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OAHANTUserPrincipal = class external 'org.apache.http.auth' name 'NTUserPrincipal' (JLObject, JSPrincipal)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getName(): JLString; overload; virtual;
    function getDomain(): JLString; overload; virtual;
    function getUsername(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSSignature = class abstract external 'java.security' name 'Signature' (JSSignatureSpi)
  strict protected
    const
      SIGN = 2;
      UNINITIALIZED = 0;
      VERIFY = 3;
  strict protected
    var
      fstate: jint; external name 'state';
  strict protected
    constructor create(para1: JLString); overload;
  public
    class function getInstance(para1: JLString): JSSignature; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSSignature; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSSignature; static; overload;  // throws java.security.NoSuchAlgorithmException
    function getProvider(): JSProvider; overload; virtual; final;
    function getAlgorithm(): JLString; overload; virtual; final;
    procedure initVerify(para1: JSPublicKey); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure initVerify(para1: JSCCertificate); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure initSign(para1: JSPrivateKey); overload; virtual; final;  // throws java.security.InvalidKeyException
    procedure initSign(para1: JSPrivateKey; para2: JSSecureRandom); overload; virtual; final;  // throws java.security.InvalidKeyException
    function sign_(): Arr1jbyte; external name 'sign'; overload; virtual; final;  // throws java.security.SignatureException
    function sign_(para1: Arr1jbyte; para2: jint; para3: jint): jint; external name 'sign'; overload; virtual; final;  // throws java.security.SignatureException
    function sign_(var para1: array of jbyte; para2: jint; para3: jint): jint; external name 'sign'; overload; virtual; final;  // throws java.security.SignatureException
    function verify_(para1: Arr1jbyte): jboolean; external name 'verify'; overload; virtual; final;  // throws java.security.SignatureException
    function verify_(var para1: array of jbyte): jboolean; external name 'verify'; overload; virtual; final;  // throws java.security.SignatureException
    function verify_(para1: Arr1jbyte; para2: jint; para3: jint): jboolean; external name 'verify'; overload; virtual; final;  // throws java.security.SignatureException
    function verify_(var para1: array of jbyte; para2: jint; para3: jint): jboolean; external name 'verify'; overload; virtual; final;  // throws java.security.SignatureException
    procedure update(para1: jbyte); overload; virtual; final;  // throws java.security.SignatureException
    procedure update(para1: Arr1jbyte); overload; virtual; final;  // throws java.security.SignatureException
    procedure update(var para1: array of jbyte); overload; virtual; final;  // throws java.security.SignatureException
    procedure update(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; final;  // throws java.security.SignatureException
    procedure update(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; final;  // throws java.security.SignatureException
    procedure update(para1: JNByteBuffer); overload; virtual; final;  // throws java.security.SignatureException
    function toString(): JLString; overload; virtual;
    procedure setParameter(para1: JLString; para2: JLObject); overload; virtual; final;  // throws java.security.InvalidParameterException
    procedure setParameter(para1: JSSAlgorithmParameterSpec); overload; virtual; final;  // throws java.security.InvalidAlgorithmParameterException
    function getParameters(): JSAlgorithmParameters; overload; virtual; final;
    function getParameter(para1: JLString): JLObject; overload; virtual; final;  // throws java.security.InvalidParameterException
  end;

  JSAAcl = interface external 'java.security.acl' name 'Acl' (JSAOwner)
    procedure setName(para1: JSPrincipal; para2: JLString); overload;  // throws java.security.acl.NotOwnerException
    function getName(): JLString; overload;
    function addEntry(para1: JSPrincipal; para2: JSAAclEntry): jboolean; overload;  // throws java.security.acl.NotOwnerException
    function removeEntry(para1: JSPrincipal; para2: JSAAclEntry): jboolean; overload;  // throws java.security.acl.NotOwnerException
    function getPermissions(para1: JSPrincipal): JUEnumeration; overload;
    function entries(): JUEnumeration; overload;
    function checkPermission(para1: JSPrincipal; para2: JSAPermission): jboolean; overload;
    function toString(): JLString; overload;
  end;

  JSCX509CRL = class abstract external 'java.security.cert' name 'X509CRL' (JSCCRL, JSCX509Extension)
  strict protected
    constructor create(); overload;
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function getEncoded(): Arr1jbyte; overload; virtual; abstract;  // throws java.security.cert.CRLException
    procedure verify(para1: JSPublicKey); overload; virtual; abstract;  // throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    procedure verify(para1: JSPublicKey; para2: JLString); overload; virtual; abstract;  // throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    function getVersion(): jint; overload; virtual; abstract;
    function getIssuerDN(): JSPrincipal; overload; virtual; abstract;
    function getIssuerX500Principal(): JSAXX500Principal; overload; virtual;
    function getThisUpdate(): JUDate; overload; virtual; abstract;
    function getNextUpdate(): JUDate; overload; virtual; abstract;
    function getRevokedCertificate(para1: JMBigInteger): JSCX509CRLEntry; overload; virtual; abstract;
    function getRevokedCertificate(para1: JSCX509Certificate): JSCX509CRLEntry; overload; virtual;
    function getRevokedCertificates(): JUSet; overload; virtual; abstract;
    function getTBSCertList(): Arr1jbyte; overload; virtual; abstract;  // throws java.security.cert.CRLException
    function getSignature(): Arr1jbyte; overload; virtual; abstract;
    function getSigAlgName(): JLString; overload; virtual; abstract;
    function getSigAlgOID(): JLString; overload; virtual; abstract;
    function getSigAlgParams(): Arr1jbyte; overload; virtual; abstract;
  end;

  JSCX509CRLEntry = class abstract external 'java.security.cert' name 'X509CRLEntry' (JLObject, JSCX509Extension)
  public
    constructor create(); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function getEncoded(): Arr1jbyte; overload; virtual; abstract;  // throws java.security.cert.CRLException
    function getSerialNumber(): JMBigInteger; overload; virtual; abstract;
    function getCertificateIssuer(): JSAXX500Principal; overload; virtual;
    function getRevocationDate(): JUDate; overload; virtual; abstract;
    function hasExtensions(): jboolean; overload; virtual; abstract;
    function toString(): JLString; overload; virtual; abstract;
  end;

  JSSDSAParameterSpec = class external 'java.security.spec' name 'DSAParameterSpec' (JLObject, JSSAlgorithmParameterSpec, JSIDSAParams)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger); overload;
    function getG(): JMBigInteger; overload; virtual;
    function getP(): JMBigInteger; overload; virtual;
    function getQ(): JMBigInteger; overload; virtual;
  end;

  JSSECGenParameterSpec = class external 'java.security.spec' name 'ECGenParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: JLString); overload;
    function getName(): JLString; overload; virtual;
  end;

  JSSECParameterSpec = class external 'java.security.spec' name 'ECParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: JSSEllipticCurve; para2: JSSECPoint; para3: JMBigInteger; para4: jint); overload;
    function getCofactor(): jint; overload; virtual;
    function getCurve(): JSSEllipticCurve; overload; virtual;
    function getGenerator(): JSSECPoint; overload; virtual;
    function getOrder(): JMBigInteger; overload; virtual;
  end;

  JSSMGF1ParameterSpec = class external 'java.security.spec' name 'MGF1ParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    final class var
      fSHA1: JSSMGF1ParameterSpec; external name 'SHA1';
      fSHA256: JSSMGF1ParameterSpec; external name 'SHA256';
      fSHA384: JSSMGF1ParameterSpec; external name 'SHA384';
      fSHA512: JSSMGF1ParameterSpec; external name 'SHA512';
  public
    constructor create(para1: JLString); overload;
    function getDigestAlgorithm(): JLString; overload; virtual;
  end;

  JSSPSSParameterSpec = class external 'java.security.spec' name 'PSSParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    final class var
      fDEFAULT: JSSPSSParameterSpec; external name 'DEFAULT';
  public
    constructor create(para1: jint); overload;
    constructor create(para1: JLString; para2: JLString; para3: JSSAlgorithmParameterSpec; para4: jint; para5: jint); overload;
    function getSaltLength(): jint; overload; virtual;
    function getDigestAlgorithm(): JLString; overload; virtual;
    function getMGFAlgorithm(): JLString; overload; virtual;
    function getMGFParameters(): JSSAlgorithmParameterSpec; overload; virtual;
    function getTrailerField(): jint; overload; virtual;
  end;

  JSSRSAKeyGenParameterSpec = class external 'java.security.spec' name 'RSAKeyGenParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    final class var
      fF0: JMBigInteger; external name 'F0';
      fF4: JMBigInteger; external name 'F4';
  public
    constructor create(para1: jint; para2: JMBigInteger); overload;
    function getKeysize(): jint; overload; virtual;
    function getPublicExponent(): JMBigInteger; overload; virtual;
  end;

  JCSDHGenParameterSpec = class external 'javax.crypto.spec' name 'DHGenParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: jint; para2: jint); overload;
    function getPrimeSize(): jint; overload; virtual;
    function getExponentSize(): jint; overload; virtual;
  end;

  JCSDHParameterSpec = class external 'javax.crypto.spec' name 'DHParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger); overload;
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: jint); overload;
    function getP(): JMBigInteger; overload; virtual;
    function getG(): JMBigInteger; overload; virtual;
    function getL(): jint; overload; virtual;
  end;

  JCSIvParameterSpec = class external 'javax.crypto.spec' name 'IvParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    constructor create(para1: Arr1jbyte; para2: jint; para3: jint); overload;
    constructor create(const para1: array of jbyte; para2: jint; para3: jint); overload;
    function getIV(): Arr1jbyte; overload; virtual;
  end;

  JCSOAEPParameterSpec = class external 'javax.crypto.spec' name 'OAEPParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    final class var
      fDEFAULT: JCSOAEPParameterSpec; external name 'DEFAULT';
  public
    constructor create(para1: JLString; para2: JLString; para3: JSSAlgorithmParameterSpec; para4: JCSPSource); overload;
    function getDigestAlgorithm(): JLString; overload; virtual;
    function getMGFAlgorithm(): JLString; overload; virtual;
    function getMGFParameters(): JSSAlgorithmParameterSpec; overload; virtual;
    function getPSource(): JCSPSource; overload; virtual;
  end;

  JCSPBEParameterSpec = class external 'javax.crypto.spec' name 'PBEParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: Arr1jbyte; para2: jint); overload;
    constructor create(const para1: array of jbyte; para2: jint); overload;
    function getSalt(): Arr1jbyte; overload; virtual;
    function getIterationCount(): jint; overload; virtual;
  end;

  JCSRC2ParameterSpec = class external 'javax.crypto.spec' name 'RC2ParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: Arr1jbyte); overload;
    constructor create(para1: jint; const para2: array of jbyte); overload;
    constructor create(para1: jint; para2: Arr1jbyte; para3: jint); overload;
    constructor create(para1: jint; const para2: array of jbyte; para3: jint); overload;
    function getEffectiveKeyBits(): jint; overload; virtual;
    function getIV(): Arr1jbyte; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  JCSRC5ParameterSpec = class external 'javax.crypto.spec' name 'RC5ParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: Arr1jbyte); overload;
    constructor create(para1: jint; para2: jint; para3: jint; const para4: array of jbyte); overload;
    constructor create(para1: jint; para2: jint; para3: jint; para4: Arr1jbyte; para5: jint); overload;
    constructor create(para1: jint; para2: jint; para3: jint; const para4: array of jbyte; para5: jint); overload;
    function getVersion(): jint; overload; virtual;
    function getRounds(): jint; overload; virtual;
    function getWordSize(): jint; overload; virtual;
    function getIV(): Arr1jbyte; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  JSSECFieldF2m = class external 'java.security.spec' name 'ECFieldF2m' (JLObject, JSSECField)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JMBigInteger); overload;
    constructor create(para1: jint; para2: Arr1jint); overload;
    constructor create(para1: jint; const para2: array of jint); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getFieldSize(): jint; overload; virtual;
    function getM(): jint; overload; virtual;
    function getMidTermsOfReductionPolynomial(): Arr1jint; overload; virtual;
    function getReductionPolynomial(): JMBigInteger; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  JSSECFieldFp = class external 'java.security.spec' name 'ECFieldFp' (JLObject, JSSECField)
  public
    constructor create(para1: JMBigInteger); overload;
    function getFieldSize(): jint; overload; virtual;
    function getP(): JMBigInteger; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  JSSDSAPrivateKeySpec = class external 'java.security.spec' name 'DSAPrivateKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger; para4: JMBigInteger); overload;
    function getG(): JMBigInteger; overload; virtual;
    function getP(): JMBigInteger; overload; virtual;
    function getQ(): JMBigInteger; overload; virtual;
    function getX(): JMBigInteger; overload; virtual;
  end;

  JSSDSAPublicKeySpec = class external 'java.security.spec' name 'DSAPublicKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger; para4: JMBigInteger); overload;
    function getG(): JMBigInteger; overload; virtual;
    function getP(): JMBigInteger; overload; virtual;
    function getQ(): JMBigInteger; overload; virtual;
    function getY(): JMBigInteger; overload; virtual;
  end;

  JSSECPrivateKeySpec = class external 'java.security.spec' name 'ECPrivateKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JSSECParameterSpec); overload;
    function getParams(): JSSECParameterSpec; overload; virtual;
    function getS(): JMBigInteger; overload; virtual;
  end;

  JSSECPublicKeySpec = class external 'java.security.spec' name 'ECPublicKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: JSSECPoint; para2: JSSECParameterSpec); overload;
    function getParams(): JSSECParameterSpec; overload; virtual;
    function getW(): JSSECPoint; overload; virtual;
  end;

  JSSEncodedKeySpec = class abstract external 'java.security.spec' name 'EncodedKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    function getEncoded(): Arr1jbyte; overload; virtual;
    function getFormat(): JLString; overload; virtual; abstract;
  end;

  JSSRSAPrivateKeySpec = class external 'java.security.spec' name 'RSAPrivateKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger); overload;
    function getModulus(): JMBigInteger; overload; virtual;
    function getPrivateExponent(): JMBigInteger; overload; virtual;
  end;

  JSSRSAPublicKeySpec = class external 'java.security.spec' name 'RSAPublicKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger); overload;
    function getModulus(): JMBigInteger; overload; virtual;
    function getPublicExponent(): JMBigInteger; overload; virtual;
  end;

  JCSDESKeySpec = class external 'javax.crypto.spec' name 'DESKeySpec' (JLObject, JSSKeySpec)
  public
    const
      DES_KEY_LEN = 8;
  public
    constructor create(para1: Arr1jbyte); overload;  // throws java.security.InvalidKeyException
    constructor create(const para1: array of jbyte); overload;  // throws java.security.InvalidKeyException
    constructor create(para1: Arr1jbyte; para2: jint); overload;  // throws java.security.InvalidKeyException
    constructor create(const para1: array of jbyte; para2: jint); overload;  // throws java.security.InvalidKeyException
    function getKey(): Arr1jbyte; overload; virtual;
    class function isParityAdjusted(para1: Arr1jbyte; para2: jint): jboolean; static; overload;  // throws java.security.InvalidKeyException
    class function isParityAdjusted(var para1: array of jbyte; para2: jint): jboolean; static; overload;  // throws java.security.InvalidKeyException
    class function isWeak(para1: Arr1jbyte; para2: jint): jboolean; static; overload;  // throws java.security.InvalidKeyException
    class function isWeak(var para1: array of jbyte; para2: jint): jboolean; static; overload;  // throws java.security.InvalidKeyException
  end;

  JCSDESedeKeySpec = class external 'javax.crypto.spec' name 'DESedeKeySpec' (JLObject, JSSKeySpec)
  public
    const
      DES_EDE_KEY_LEN = 24;
  public
    constructor create(para1: Arr1jbyte); overload;  // throws java.security.InvalidKeyException
    constructor create(const para1: array of jbyte); overload;  // throws java.security.InvalidKeyException
    constructor create(para1: Arr1jbyte; para2: jint); overload;  // throws java.security.InvalidKeyException
    constructor create(const para1: array of jbyte; para2: jint); overload;  // throws java.security.InvalidKeyException
    function getKey(): Arr1jbyte; overload; virtual;
    class function isParityAdjusted(para1: Arr1jbyte; para2: jint): jboolean; static; overload;  // throws java.security.InvalidKeyException
    class function isParityAdjusted(var para1: array of jbyte; para2: jint): jboolean; static; overload;  // throws java.security.InvalidKeyException
  end;

  JCSDHPrivateKeySpec = class external 'javax.crypto.spec' name 'DHPrivateKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger); overload;
    function getX(): JMBigInteger; overload; virtual;
    function getP(): JMBigInteger; overload; virtual;
    function getG(): JMBigInteger; overload; virtual;
  end;

  JCSDHPublicKeySpec = class external 'javax.crypto.spec' name 'DHPublicKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger); overload;
    function getY(): JMBigInteger; overload; virtual;
    function getP(): JMBigInteger; overload; virtual;
    function getG(): JMBigInteger; overload; virtual;
  end;

  JCSPBEKeySpec = class external 'javax.crypto.spec' name 'PBEKeySpec' (JLObject, JSSKeySpec)
  public
    constructor create(para1: Arr1jchar); overload;
    constructor create(const para1: array of jchar); overload;
    constructor create(para1: Arr1jchar; para2: Arr1jbyte; para3: jint; para4: jint); overload;
    constructor create(const para1: array of jchar; const para2: array of jbyte; para3: jint; para4: jint); overload;
    constructor create(para1: Arr1jchar; para2: Arr1jbyte; para3: jint); overload;
    constructor create(const para1: array of jchar; const para2: array of jbyte; para3: jint); overload;
    procedure clearPassword(); overload; virtual; final;
    function getPassword(): Arr1jchar; overload; virtual; final;
    function getSalt(): Arr1jbyte; overload; virtual; final;
    function getIterationCount(): jint; overload; virtual; final;
    function getKeyLength(): jint; overload; virtual; final;
  end;

  JSNClob = interface external 'java.sql' name 'NClob' (JSClob)
  end;

  JSConnection = interface external 'java.sql' name 'Connection' (JSWrapper, JLAutoCloseable)
    const
      TRANSACTION_NONE = 0;
      TRANSACTION_READ_COMMITTED = 2;
      TRANSACTION_READ_UNCOMMITTED = 1;
      TRANSACTION_REPEATABLE_READ = 4;
      TRANSACTION_SERIALIZABLE = 8;
    procedure clearWarnings(); overload;  // throws java.sql.SQLException
    procedure close(); overload;  // throws java.sql.SQLException
    procedure commit(); overload;  // throws java.sql.SQLException
    function createStatement(): JSStatement; overload;  // throws java.sql.SQLException
    function createStatement(para1: jint; para2: jint): JSStatement; overload;  // throws java.sql.SQLException
    function createStatement(para1: jint; para2: jint; para3: jint): JSStatement; overload;  // throws java.sql.SQLException
    function getAutoCommit(): jboolean; overload;  // throws java.sql.SQLException
    function getCatalog(): JLString; overload;  // throws java.sql.SQLException
    function getHoldability(): jint; overload;  // throws java.sql.SQLException
    function getMetaData(): JSDatabaseMetaData; overload;  // throws java.sql.SQLException
    function getTransactionIsolation(): jint; overload;  // throws java.sql.SQLException
    function getTypeMap(): JUMap; overload;  // throws java.sql.SQLException
    function getWarnings(): JSSQLWarning; overload;  // throws java.sql.SQLException
    function isClosed(): jboolean; overload;  // throws java.sql.SQLException
    function isReadOnly(): jboolean; overload;  // throws java.sql.SQLException
    function nativeSQL(para1: JLString): JLString; overload;  // throws java.sql.SQLException
    function prepareCall(para1: JLString): JSCallableStatement; overload;  // throws java.sql.SQLException
    function prepareCall(para1: JLString; para2: jint; para3: jint): JSCallableStatement; overload;  // throws java.sql.SQLException
    function prepareCall(para1: JLString; para2: jint; para3: jint; para4: jint): JSCallableStatement; overload;  // throws java.sql.SQLException
    function prepareStatement(para1: JLString): JSPreparedStatement; overload;  // throws java.sql.SQLException
    function prepareStatement(para1: JLString; para2: jint): JSPreparedStatement; overload;  // throws java.sql.SQLException
    function prepareStatement(para1: JLString; para2: Arr1jint): JSPreparedStatement; overload;  // throws java.sql.SQLException
    function prepareStatement(para1: JLString; var para2: array of jint): JSPreparedStatement; overload;  // throws java.sql.SQLException
    function prepareStatement(para1: JLString; para2: jint; para3: jint): JSPreparedStatement; overload;  // throws java.sql.SQLException
    function prepareStatement(para1: JLString; para2: jint; para3: jint; para4: jint): JSPreparedStatement; overload;  // throws java.sql.SQLException
    function prepareStatement(para1: JLString; para2: Arr1JLString): JSPreparedStatement; overload;  // throws java.sql.SQLException
    function prepareStatement(para1: JLString; var para2: array of JLString): JSPreparedStatement; overload;  // throws java.sql.SQLException
    procedure releaseSavepoint(para1: JSSavepoint); overload;  // throws java.sql.SQLException
    procedure rollback(); overload;  // throws java.sql.SQLException
    procedure rollback(para1: JSSavepoint); overload;  // throws java.sql.SQLException
    procedure setAutoCommit(para1: jboolean); overload;  // throws java.sql.SQLException
    procedure setCatalog(para1: JLString); overload;  // throws java.sql.SQLException
    procedure setHoldability(para1: jint); overload;  // throws java.sql.SQLException
    procedure setReadOnly(para1: jboolean); overload;  // throws java.sql.SQLException
    function setSavepoint(): JSSavepoint; overload;  // throws java.sql.SQLException
    function setSavepoint(para1: JLString): JSSavepoint; overload;  // throws java.sql.SQLException
    procedure setTransactionIsolation(para1: jint); overload;  // throws java.sql.SQLException
    procedure setTypeMap(para1: JUMap); overload;  // throws java.sql.SQLException
    function createClob(): JSClob; overload;  // throws java.sql.SQLException
    function createBlob(): JSBlob; overload;  // throws java.sql.SQLException
    function createNClob(): JSNClob; overload;  // throws java.sql.SQLException
    function createSQLXML(): JSSQLXML; overload;  // throws java.sql.SQLException
    function isValid(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    procedure setClientInfo(para1: JLString; para2: JLString); overload;  // throws java.sql.SQLClientInfoException
    procedure setClientInfo(para1: JUProperties); overload;  // throws java.sql.SQLClientInfoException
    function getClientInfo(para1: JLString): JLString; overload;  // throws java.sql.SQLException
    function getClientInfo(): JUProperties; overload;  // throws java.sql.SQLException
    function createArrayOf(para1: JLString; para2: Arr1JLObject): JSArray; overload;  // throws java.sql.SQLException
    function createArrayOf(para1: JLString; var para2: array of JLObject): JSArray; overload;  // throws java.sql.SQLException
    function createStruct(para1: JLString; para2: Arr1JLObject): JSStruct; overload;  // throws java.sql.SQLException
    function createStruct(para1: JLString; var para2: array of JLObject): JSStruct; overload;  // throws java.sql.SQLException
  end;

  JSDatabaseMetaData = interface external 'java.sql' name 'DatabaseMetaData' (JSWrapper)
    const
      attributeNoNulls = 0;
      attributeNullable = 1;
      attributeNullableUnknown = 2;
      bestRowNotPseudo = 1;
      bestRowPseudo = 2;
      bestRowSession = 2;
      bestRowTemporary = 0;
      bestRowTransaction = 1;
      bestRowUnknown = 0;
      columnNoNulls = 0;
      columnNullable = 1;
      columnNullableUnknown = 2;
      functionColumnIn = 1;
      functionColumnInOut = 2;
      functionColumnOut = 3;
      functionColumnResult = 5;
      functionColumnUnknown = 0;
      functionNoNulls = 0;
      functionNoTable = 1;
      functionNullable = 1;
      functionNullableUnknown = 2;
      functionResultUnknown = 0;
      functionReturn = 4;
      functionReturnsTable = 2;
      importedKeyCascade = 0;
      importedKeyInitiallyDeferred = 5;
      importedKeyInitiallyImmediate = 6;
      importedKeyNoAction = 3;
      importedKeyNotDeferrable = 7;
      importedKeyRestrict = 1;
      importedKeySetDefault = 4;
      importedKeySetNull = 2;
      procedureColumnIn = 1;
      procedureColumnInOut = 2;
      procedureColumnOut = 4;
      procedureColumnResult = 3;
      procedureColumnReturn = 5;
      procedureColumnUnknown = 0;
      procedureNoNulls = 0;
      procedureNoResult = 1;
      procedureNullable = 1;
      procedureNullableUnknown = 2;
      procedureResultUnknown = 0;
      procedureReturnsResult = 2;
      sqlStateSQL = 2;
      sqlStateSQL99 = 2;
      sqlStateXOpen = 1;
      tableIndexClustered = 1;
      tableIndexHashed = 2;
      tableIndexOther = 3;
      tableIndexStatistic = 0;
      typeNoNulls = 0;
      typeNullable = 1;
      typeNullableUnknown = 2;
      typePredBasic = 2;
      typePredChar = 1;
      typePredNone = 0;
      typeSearchable = 3;
      versionColumnNotPseudo = 1;
      versionColumnPseudo = 2;
      versionColumnUnknown = 0;
    function allProceduresAreCallable(): jboolean; overload;  // throws java.sql.SQLException
    function allTablesAreSelectable(): jboolean; overload;  // throws java.sql.SQLException
    function dataDefinitionCausesTransactionCommit(): jboolean; overload;  // throws java.sql.SQLException
    function dataDefinitionIgnoredInTransactions(): jboolean; overload;  // throws java.sql.SQLException
    function deletesAreDetected(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function doesMaxRowSizeIncludeBlobs(): jboolean; overload;  // throws java.sql.SQLException
    function getAttributes(para1: JLString; para2: JLString; para3: JLString; para4: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getBestRowIdentifier(para1: JLString; para2: JLString; para3: JLString; para4: jint; para5: jboolean): JSResultSet; overload;  // throws java.sql.SQLException
    function getCatalogs(): JSResultSet; overload;  // throws java.sql.SQLException
    function getCatalogSeparator(): JLString; overload;  // throws java.sql.SQLException
    function getCatalogTerm(): JLString; overload;  // throws java.sql.SQLException
    function getColumnPrivileges(para1: JLString; para2: JLString; para3: JLString; para4: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getColumns(para1: JLString; para2: JLString; para3: JLString; para4: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getConnection(): JSConnection; overload;  // throws java.sql.SQLException
    function getCrossReference(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString; para6: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getDatabaseMajorVersion(): jint; overload;  // throws java.sql.SQLException
    function getDatabaseMinorVersion(): jint; overload;  // throws java.sql.SQLException
    function getDatabaseProductName(): JLString; overload;  // throws java.sql.SQLException
    function getDatabaseProductVersion(): JLString; overload;  // throws java.sql.SQLException
    function getDefaultTransactionIsolation(): jint; overload;  // throws java.sql.SQLException
    function getDriverMajorVersion(): jint; overload;
    function getDriverMinorVersion(): jint; overload;
    function getDriverName(): JLString; overload;  // throws java.sql.SQLException
    function getDriverVersion(): JLString; overload;  // throws java.sql.SQLException
    function getExportedKeys(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getExtraNameCharacters(): JLString; overload;  // throws java.sql.SQLException
    function getIdentifierQuoteString(): JLString; overload;  // throws java.sql.SQLException
    function getImportedKeys(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getIndexInfo(para1: JLString; para2: JLString; para3: JLString; para4: jboolean; para5: jboolean): JSResultSet; overload;  // throws java.sql.SQLException
    function getJDBCMajorVersion(): jint; overload;  // throws java.sql.SQLException
    function getJDBCMinorVersion(): jint; overload;  // throws java.sql.SQLException
    function getMaxBinaryLiteralLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxCatalogNameLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxCharLiteralLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxColumnNameLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxColumnsInGroupBy(): jint; overload;  // throws java.sql.SQLException
    function getMaxColumnsInIndex(): jint; overload;  // throws java.sql.SQLException
    function getMaxColumnsInOrderBy(): jint; overload;  // throws java.sql.SQLException
    function getMaxColumnsInSelect(): jint; overload;  // throws java.sql.SQLException
    function getMaxColumnsInTable(): jint; overload;  // throws java.sql.SQLException
    function getMaxConnections(): jint; overload;  // throws java.sql.SQLException
    function getMaxCursorNameLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxIndexLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxProcedureNameLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxRowSize(): jint; overload;  // throws java.sql.SQLException
    function getMaxSchemaNameLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxStatementLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxStatements(): jint; overload;  // throws java.sql.SQLException
    function getMaxTableNameLength(): jint; overload;  // throws java.sql.SQLException
    function getMaxTablesInSelect(): jint; overload;  // throws java.sql.SQLException
    function getMaxUserNameLength(): jint; overload;  // throws java.sql.SQLException
    function getNumericFunctions(): JLString; overload;  // throws java.sql.SQLException
    function getPrimaryKeys(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getProcedureColumns(para1: JLString; para2: JLString; para3: JLString; para4: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getProcedures(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getProcedureTerm(): JLString; overload;  // throws java.sql.SQLException
    function getResultSetHoldability(): jint; overload;  // throws java.sql.SQLException
    function getSchemas(): JSResultSet; overload;  // throws java.sql.SQLException
    function getSchemaTerm(): JLString; overload;  // throws java.sql.SQLException
    function getSearchStringEscape(): JLString; overload;  // throws java.sql.SQLException
    function getSQLKeywords(): JLString; overload;  // throws java.sql.SQLException
    function getSQLStateType(): jint; overload;  // throws java.sql.SQLException
    function getStringFunctions(): JLString; overload;  // throws java.sql.SQLException
    function getSuperTables(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getSuperTypes(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getSystemFunctions(): JLString; overload;  // throws java.sql.SQLException
    function getTablePrivileges(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getTables(para1: JLString; para2: JLString; para3: JLString; para4: Arr1JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getTables(para1: JLString; para2: JLString; para3: JLString; var para4: array of JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getTableTypes(): JSResultSet; overload;  // throws java.sql.SQLException
    function getTimeDateFunctions(): JLString; overload;  // throws java.sql.SQLException
    function getTypeInfo(): JSResultSet; overload;  // throws java.sql.SQLException
    function getUDTs(para1: JLString; para2: JLString; para3: JLString; para4: Arr1jint): JSResultSet; overload;  // throws java.sql.SQLException
    function getUDTs(para1: JLString; para2: JLString; para3: JLString; var para4: array of jint): JSResultSet; overload;  // throws java.sql.SQLException
    function getURL(): JLString; overload;  // throws java.sql.SQLException
    function getUserName(): JLString; overload;  // throws java.sql.SQLException
    function getVersionColumns(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function insertsAreDetected(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function isCatalogAtStart(): jboolean; overload;  // throws java.sql.SQLException
    function isReadOnly(): jboolean; overload;  // throws java.sql.SQLException
    function locatorsUpdateCopy(): jboolean; overload;  // throws java.sql.SQLException
    function nullPlusNonNullIsNull(): jboolean; overload;  // throws java.sql.SQLException
    function nullsAreSortedAtEnd(): jboolean; overload;  // throws java.sql.SQLException
    function nullsAreSortedAtStart(): jboolean; overload;  // throws java.sql.SQLException
    function nullsAreSortedHigh(): jboolean; overload;  // throws java.sql.SQLException
    function nullsAreSortedLow(): jboolean; overload;  // throws java.sql.SQLException
    function othersDeletesAreVisible(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function othersInsertsAreVisible(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function othersUpdatesAreVisible(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function ownDeletesAreVisible(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function ownInsertsAreVisible(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function ownUpdatesAreVisible(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function storesLowerCaseIdentifiers(): jboolean; overload;  // throws java.sql.SQLException
    function storesLowerCaseQuotedIdentifiers(): jboolean; overload;  // throws java.sql.SQLException
    function storesMixedCaseIdentifiers(): jboolean; overload;  // throws java.sql.SQLException
    function storesMixedCaseQuotedIdentifiers(): jboolean; overload;  // throws java.sql.SQLException
    function storesUpperCaseIdentifiers(): jboolean; overload;  // throws java.sql.SQLException
    function storesUpperCaseQuotedIdentifiers(): jboolean; overload;  // throws java.sql.SQLException
    function supportsAlterTableWithAddColumn(): jboolean; overload;  // throws java.sql.SQLException
    function supportsAlterTableWithDropColumn(): jboolean; overload;  // throws java.sql.SQLException
    function supportsANSI92EntryLevelSQL(): jboolean; overload;  // throws java.sql.SQLException
    function supportsANSI92FullSQL(): jboolean; overload;  // throws java.sql.SQLException
    function supportsANSI92IntermediateSQL(): jboolean; overload;  // throws java.sql.SQLException
    function supportsBatchUpdates(): jboolean; overload;  // throws java.sql.SQLException
    function supportsCatalogsInDataManipulation(): jboolean; overload;  // throws java.sql.SQLException
    function supportsCatalogsInIndexDefinitions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsCatalogsInPrivilegeDefinitions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsCatalogsInProcedureCalls(): jboolean; overload;  // throws java.sql.SQLException
    function supportsCatalogsInTableDefinitions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsColumnAliasing(): jboolean; overload;  // throws java.sql.SQLException
    function supportsConvert(): jboolean; overload;  // throws java.sql.SQLException
    function supportsConvert(para1: jint; para2: jint): jboolean; overload;  // throws java.sql.SQLException
    function supportsCoreSQLGrammar(): jboolean; overload;  // throws java.sql.SQLException
    function supportsCorrelatedSubqueries(): jboolean; overload;  // throws java.sql.SQLException
    function supportsDataDefinitionAndDataManipulationTransactions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsDataManipulationTransactionsOnly(): jboolean; overload;  // throws java.sql.SQLException
    function supportsDifferentTableCorrelationNames(): jboolean; overload;  // throws java.sql.SQLException
    function supportsExpressionsInOrderBy(): jboolean; overload;  // throws java.sql.SQLException
    function supportsExtendedSQLGrammar(): jboolean; overload;  // throws java.sql.SQLException
    function supportsFullOuterJoins(): jboolean; overload;  // throws java.sql.SQLException
    function supportsGetGeneratedKeys(): jboolean; overload;  // throws java.sql.SQLException
    function supportsGroupBy(): jboolean; overload;  // throws java.sql.SQLException
    function supportsGroupByBeyondSelect(): jboolean; overload;  // throws java.sql.SQLException
    function supportsGroupByUnrelated(): jboolean; overload;  // throws java.sql.SQLException
    function supportsIntegrityEnhancementFacility(): jboolean; overload;  // throws java.sql.SQLException
    function supportsLikeEscapeClause(): jboolean; overload;  // throws java.sql.SQLException
    function supportsLimitedOuterJoins(): jboolean; overload;  // throws java.sql.SQLException
    function supportsMinimumSQLGrammar(): jboolean; overload;  // throws java.sql.SQLException
    function supportsMixedCaseIdentifiers(): jboolean; overload;  // throws java.sql.SQLException
    function supportsMixedCaseQuotedIdentifiers(): jboolean; overload;  // throws java.sql.SQLException
    function supportsMultipleOpenResults(): jboolean; overload;  // throws java.sql.SQLException
    function supportsMultipleResultSets(): jboolean; overload;  // throws java.sql.SQLException
    function supportsMultipleTransactions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsNamedParameters(): jboolean; overload;  // throws java.sql.SQLException
    function supportsNonNullableColumns(): jboolean; overload;  // throws java.sql.SQLException
    function supportsOpenCursorsAcrossCommit(): jboolean; overload;  // throws java.sql.SQLException
    function supportsOpenCursorsAcrossRollback(): jboolean; overload;  // throws java.sql.SQLException
    function supportsOpenStatementsAcrossCommit(): jboolean; overload;  // throws java.sql.SQLException
    function supportsOpenStatementsAcrossRollback(): jboolean; overload;  // throws java.sql.SQLException
    function supportsOrderByUnrelated(): jboolean; overload;  // throws java.sql.SQLException
    function supportsOuterJoins(): jboolean; overload;  // throws java.sql.SQLException
    function supportsPositionedDelete(): jboolean; overload;  // throws java.sql.SQLException
    function supportsPositionedUpdate(): jboolean; overload;  // throws java.sql.SQLException
    function supportsResultSetConcurrency(para1: jint; para2: jint): jboolean; overload;  // throws java.sql.SQLException
    function supportsResultSetHoldability(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function supportsResultSetType(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function supportsSavepoints(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSchemasInDataManipulation(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSchemasInIndexDefinitions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSchemasInPrivilegeDefinitions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSchemasInProcedureCalls(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSchemasInTableDefinitions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSelectForUpdate(): jboolean; overload;  // throws java.sql.SQLException
    function supportsStatementPooling(): jboolean; overload;  // throws java.sql.SQLException
    function supportsStoredProcedures(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSubqueriesInComparisons(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSubqueriesInExists(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSubqueriesInIns(): jboolean; overload;  // throws java.sql.SQLException
    function supportsSubqueriesInQuantifieds(): jboolean; overload;  // throws java.sql.SQLException
    function supportsTableCorrelationNames(): jboolean; overload;  // throws java.sql.SQLException
    function supportsTransactionIsolationLevel(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function supportsTransactions(): jboolean; overload;  // throws java.sql.SQLException
    function supportsUnion(): jboolean; overload;  // throws java.sql.SQLException
    function supportsUnionAll(): jboolean; overload;  // throws java.sql.SQLException
    function updatesAreDetected(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function usesLocalFilePerTable(): jboolean; overload;  // throws java.sql.SQLException
    function usesLocalFiles(): jboolean; overload;  // throws java.sql.SQLException
    function autoCommitFailureClosesAllResultSets(): jboolean; overload;  // throws java.sql.SQLException
    function getClientInfoProperties(): JSResultSet; overload;  // throws java.sql.SQLException
    function getFunctionColumns(para1: JLString; para2: JLString; para3: JLString; para4: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getFunctions(para1: JLString; para2: JLString; para3: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function getRowIdLifetime(): JSRowIdLifetime; overload;  // throws java.sql.SQLException
    function getSchemas(para1: JLString; para2: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function supportsStoredFunctionsUsingCallSyntax(): jboolean; overload;  // throws java.sql.SQLException
  end;

  JSParameterMetaData = interface external 'java.sql' name 'ParameterMetaData' (JSWrapper)
    const
      parameterModeIn = 1;
      parameterModeInOut = 2;
      parameterModeOut = 4;
      parameterModeUnknown = 0;
      parameterNoNulls = 0;
      parameterNullable = 1;
      parameterNullableUnknown = 2;
    function getParameterClassName(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getParameterCount(): jint; overload;  // throws java.sql.SQLException
    function getParameterMode(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getParameterType(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getParameterTypeName(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getPrecision(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getScale(para1: jint): jint; overload;  // throws java.sql.SQLException
    function isNullable(para1: jint): jint; overload;  // throws java.sql.SQLException
    function isSigned(para1: jint): jboolean; overload;  // throws java.sql.SQLException
  end;

  JSResultSet = interface external 'java.sql' name 'ResultSet' (JSWrapper, JLAutoCloseable)
    const
      CLOSE_CURSORS_AT_COMMIT = 2;
      CONCUR_READ_ONLY = 1007;
      CONCUR_UPDATABLE = 1008;
      FETCH_FORWARD = 1000;
      FETCH_REVERSE = 1001;
      FETCH_UNKNOWN = 1002;
      HOLD_CURSORS_OVER_COMMIT = 1;
      TYPE_FORWARD_ONLY = 1003;
      TYPE_SCROLL_INSENSITIVE = 1004;
      TYPE_SCROLL_SENSITIVE = 1005;
    function absolute(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    procedure afterLast(); overload;  // throws java.sql.SQLException
    procedure beforeFirst(); overload;  // throws java.sql.SQLException
    procedure cancelRowUpdates(); overload;  // throws java.sql.SQLException
    procedure clearWarnings(); overload;  // throws java.sql.SQLException
    procedure close(); overload;  // throws java.sql.SQLException
    procedure deleteRow(); overload;  // throws java.sql.SQLException
    function findColumn(para1: JLString): jint; overload;  // throws java.sql.SQLException
    function first(): jboolean; overload;  // throws java.sql.SQLException
    function getArray(para1: jint): JSArray; overload;  // throws java.sql.SQLException
    function getArray(para1: JLString): JSArray; overload;  // throws java.sql.SQLException
    function getAsciiStream(para1: jint): JIInputStream; overload;  // throws java.sql.SQLException
    function getAsciiStream(para1: JLString): JIInputStream; overload;  // throws java.sql.SQLException
    function getBigDecimal(para1: jint): JMBigDecimal; overload;  // throws java.sql.SQLException
    function getBigDecimal(para1: jint; para2: jint): JMBigDecimal; overload;  // throws java.sql.SQLException
    function getBigDecimal(para1: JLString): JMBigDecimal; overload;  // throws java.sql.SQLException
    function getBigDecimal(para1: JLString; para2: jint): JMBigDecimal; overload;  // throws java.sql.SQLException
    function getBinaryStream(para1: jint): JIInputStream; overload;  // throws java.sql.SQLException
    function getBinaryStream(para1: JLString): JIInputStream; overload;  // throws java.sql.SQLException
    function getBlob(para1: jint): JSBlob; overload;  // throws java.sql.SQLException
    function getBlob(para1: JLString): JSBlob; overload;  // throws java.sql.SQLException
    function getBoolean(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function getBoolean(para1: JLString): jboolean; overload;  // throws java.sql.SQLException
    function getByte(para1: jint): jbyte; overload;  // throws java.sql.SQLException
    function getByte(para1: JLString): jbyte; overload;  // throws java.sql.SQLException
    function getBytes(para1: jint): Arr1jbyte; overload;  // throws java.sql.SQLException
    function getBytes(para1: JLString): Arr1jbyte; overload;  // throws java.sql.SQLException
    function getCharacterStream(para1: jint): JIReader; overload;  // throws java.sql.SQLException
    function getCharacterStream(para1: JLString): JIReader; overload;  // throws java.sql.SQLException
    function getClob(para1: jint): JSClob; overload;  // throws java.sql.SQLException
    function getClob(para1: JLString): JSClob; overload;  // throws java.sql.SQLException
    function getConcurrency(): jint; overload;  // throws java.sql.SQLException
    function getCursorName(): JLString; overload;  // throws java.sql.SQLException
    function getDate(para1: jint): JSDate; overload;  // throws java.sql.SQLException
    function getDate(para1: jint; para2: JUCalendar): JSDate; overload;  // throws java.sql.SQLException
    function getDate(para1: JLString): JSDate; overload;  // throws java.sql.SQLException
    function getDate(para1: JLString; para2: JUCalendar): JSDate; overload;  // throws java.sql.SQLException
    function getDouble(para1: jint): jdouble; overload;  // throws java.sql.SQLException
    function getDouble(para1: JLString): jdouble; overload;  // throws java.sql.SQLException
    function getFetchDirection(): jint; overload;  // throws java.sql.SQLException
    function getFetchSize(): jint; overload;  // throws java.sql.SQLException
    function getFloat(para1: jint): jfloat; overload;  // throws java.sql.SQLException
    function getFloat(para1: JLString): jfloat; overload;  // throws java.sql.SQLException
    function getInt(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getInt(para1: JLString): jint; overload;  // throws java.sql.SQLException
    function getLong(para1: jint): jlong; overload;  // throws java.sql.SQLException
    function getLong(para1: JLString): jlong; overload;  // throws java.sql.SQLException
    function getMetaData(): JSResultSetMetaData; overload;  // throws java.sql.SQLException
    function getObject(para1: jint): JLObject; overload;  // throws java.sql.SQLException
    function getObject(para1: jint; para2: JUMap): JLObject; overload;  // throws java.sql.SQLException
    function getObject(para1: JLString): JLObject; overload;  // throws java.sql.SQLException
    function getObject(para1: JLString; para2: JUMap): JLObject; overload;  // throws java.sql.SQLException
    function getRef(para1: jint): JSRef; overload;  // throws java.sql.SQLException
    function getRef(para1: JLString): JSRef; overload;  // throws java.sql.SQLException
    function getRow(): jint; overload;  // throws java.sql.SQLException
    function getShort(para1: jint): jshort; overload;  // throws java.sql.SQLException
    function getShort(para1: JLString): jshort; overload;  // throws java.sql.SQLException
    function getStatement(): JSStatement; overload;  // throws java.sql.SQLException
    function getString(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getString(para1: JLString): JLString; overload;  // throws java.sql.SQLException
    function getTime(para1: jint): JSTime; overload;  // throws java.sql.SQLException
    function getTime(para1: jint; para2: JUCalendar): JSTime; overload;  // throws java.sql.SQLException
    function getTime(para1: JLString): JSTime; overload;  // throws java.sql.SQLException
    function getTime(para1: JLString; para2: JUCalendar): JSTime; overload;  // throws java.sql.SQLException
    function getTimestamp(para1: jint): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function getTimestamp(para1: jint; para2: JUCalendar): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function getTimestamp(para1: JLString): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function getTimestamp(para1: JLString; para2: JUCalendar): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function getType(): jint; overload;  // throws java.sql.SQLException
    function getUnicodeStream(para1: jint): JIInputStream; overload;  // throws java.sql.SQLException
    function getUnicodeStream(para1: JLString): JIInputStream; overload;  // throws java.sql.SQLException
    function getURL(para1: jint): JNURL; overload;  // throws java.sql.SQLException
    function getURL(para1: JLString): JNURL; overload;  // throws java.sql.SQLException
    function getWarnings(): JSSQLWarning; overload;  // throws java.sql.SQLException
    procedure insertRow(); overload;  // throws java.sql.SQLException
    function isAfterLast(): jboolean; overload;  // throws java.sql.SQLException
    function isBeforeFirst(): jboolean; overload;  // throws java.sql.SQLException
    function isFirst(): jboolean; overload;  // throws java.sql.SQLException
    function isLast(): jboolean; overload;  // throws java.sql.SQLException
    function last(): jboolean; overload;  // throws java.sql.SQLException
    procedure moveToCurrentRow(); overload;  // throws java.sql.SQLException
    procedure moveToInsertRow(); overload;  // throws java.sql.SQLException
    function next(): jboolean; overload;  // throws java.sql.SQLException
    function previous(): jboolean; overload;  // throws java.sql.SQLException
    procedure refreshRow(); overload;  // throws java.sql.SQLException
    function relative(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function rowDeleted(): jboolean; overload;  // throws java.sql.SQLException
    function rowInserted(): jboolean; overload;  // throws java.sql.SQLException
    function rowUpdated(): jboolean; overload;  // throws java.sql.SQLException
    procedure setFetchDirection(para1: jint); overload;  // throws java.sql.SQLException
    procedure setFetchSize(para1: jint); overload;  // throws java.sql.SQLException
    procedure updateArray(para1: jint; para2: JSArray); overload;  // throws java.sql.SQLException
    procedure updateArray(para1: JLString; para2: JSArray); overload;  // throws java.sql.SQLException
    procedure updateAsciiStream(para1: jint; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure updateAsciiStream(para1: JLString; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure updateBigDecimal(para1: jint; para2: JMBigDecimal); overload;  // throws java.sql.SQLException
    procedure updateBigDecimal(para1: JLString; para2: JMBigDecimal); overload;  // throws java.sql.SQLException
    procedure updateBinaryStream(para1: jint; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure updateBinaryStream(para1: JLString; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure updateBlob(para1: jint; para2: JSBlob); overload;  // throws java.sql.SQLException
    procedure updateBlob(para1: JLString; para2: JSBlob); overload;  // throws java.sql.SQLException
    procedure updateBoolean(para1: jint; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure updateBoolean(para1: JLString; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure updateByte(para1: jint; para2: jbyte); overload;  // throws java.sql.SQLException
    procedure updateByte(para1: JLString; para2: jbyte); overload;  // throws java.sql.SQLException
    procedure updateBytes(para1: jint; para2: Arr1jbyte); overload;  // throws java.sql.SQLException
    procedure updateBytes(para1: jint; var para2: array of jbyte); overload;  // throws java.sql.SQLException
    procedure updateBytes(para1: JLString; para2: Arr1jbyte); overload;  // throws java.sql.SQLException
    procedure updateBytes(para1: JLString; var para2: array of jbyte); overload;  // throws java.sql.SQLException
    procedure updateCharacterStream(para1: jint; para2: JIReader; para3: jint); overload;  // throws java.sql.SQLException
    procedure updateCharacterStream(para1: JLString; para2: JIReader; para3: jint); overload;  // throws java.sql.SQLException
    procedure updateClob(para1: jint; para2: JSClob); overload;  // throws java.sql.SQLException
    procedure updateClob(para1: JLString; para2: JSClob); overload;  // throws java.sql.SQLException
    procedure updateDate(para1: jint; para2: JSDate); overload;  // throws java.sql.SQLException
    procedure updateDate(para1: JLString; para2: JSDate); overload;  // throws java.sql.SQLException
    procedure updateDouble(para1: jint; para2: jdouble); overload;  // throws java.sql.SQLException
    procedure updateDouble(para1: JLString; para2: jdouble); overload;  // throws java.sql.SQLException
    procedure updateFloat(para1: jint; para2: jfloat); overload;  // throws java.sql.SQLException
    procedure updateFloat(para1: JLString; para2: jfloat); overload;  // throws java.sql.SQLException
    procedure updateInt(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure updateInt(para1: JLString; para2: jint); overload;  // throws java.sql.SQLException
    procedure updateLong(para1: jint; para2: jlong); overload;  // throws java.sql.SQLException
    procedure updateLong(para1: JLString; para2: jlong); overload;  // throws java.sql.SQLException
    procedure updateNull(para1: jint); overload;  // throws java.sql.SQLException
    procedure updateNull(para1: JLString); overload;  // throws java.sql.SQLException
    procedure updateObject(para1: jint; para2: JLObject); overload;  // throws java.sql.SQLException
    procedure updateObject(para1: jint; para2: JLObject; para3: jint); overload;  // throws java.sql.SQLException
    procedure updateObject(para1: JLString; para2: JLObject); overload;  // throws java.sql.SQLException
    procedure updateObject(para1: JLString; para2: JLObject; para3: jint); overload;  // throws java.sql.SQLException
    procedure updateRef(para1: jint; para2: JSRef); overload;  // throws java.sql.SQLException
    procedure updateRef(para1: JLString; para2: JSRef); overload;  // throws java.sql.SQLException
    procedure updateRow(); overload;  // throws java.sql.SQLException
    procedure updateShort(para1: jint; para2: jshort); overload;  // throws java.sql.SQLException
    procedure updateShort(para1: JLString; para2: jshort); overload;  // throws java.sql.SQLException
    procedure updateString(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure updateString(para1: JLString; para2: JLString); overload;  // throws java.sql.SQLException
    procedure updateTime(para1: jint; para2: JSTime); overload;  // throws java.sql.SQLException
    procedure updateTime(para1: JLString; para2: JSTime); overload;  // throws java.sql.SQLException
    procedure updateTimestamp(para1: jint; para2: JSqlTimestamp); overload;  // throws java.sql.SQLException
    procedure updateTimestamp(para1: JLString; para2: JSqlTimestamp); overload;  // throws java.sql.SQLException
    function wasNull(): jboolean; overload;  // throws java.sql.SQLException
    function getRowId(para1: jint): JSRowId; overload;  // throws java.sql.SQLException
    function getRowId(para1: JLString): JSRowId; overload;  // throws java.sql.SQLException
    procedure updateRowId(para1: jint; para2: JSRowId); overload;  // throws java.sql.SQLException
    procedure updateRowId(para1: JLString; para2: JSRowId); overload;  // throws java.sql.SQLException
    function getHoldability(): jint; overload;  // throws java.sql.SQLException
    function isClosed(): jboolean; overload;  // throws java.sql.SQLException
    procedure updateNString(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure updateNString(para1: JLString; para2: JLString); overload;  // throws java.sql.SQLException
    procedure updateNClob(para1: jint; para2: JSNClob); overload;  // throws java.sql.SQLException
    procedure updateNClob(para1: JLString; para2: JSNClob); overload;  // throws java.sql.SQLException
    function getNClob(para1: jint): JSNClob; overload;  // throws java.sql.SQLException
    function getNClob(para1: JLString): JSNClob; overload;  // throws java.sql.SQLException
    function getSQLXML(para1: jint): JSSQLXML; overload;  // throws java.sql.SQLException
    function getSQLXML(para1: JLString): JSSQLXML; overload;  // throws java.sql.SQLException
    procedure updateSQLXML(para1: jint; para2: JSSQLXML); overload;  // throws java.sql.SQLException
    procedure updateSQLXML(para1: JLString; para2: JSSQLXML); overload;  // throws java.sql.SQLException
    function getNString(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getNString(para1: JLString): JLString; overload;  // throws java.sql.SQLException
    function getNCharacterStream(para1: jint): JIReader; overload;  // throws java.sql.SQLException
    function getNCharacterStream(para1: JLString): JIReader; overload;  // throws java.sql.SQLException
    procedure updateNCharacterStream(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateNCharacterStream(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateAsciiStream(para1: jint; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateBinaryStream(para1: jint; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateCharacterStream(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateAsciiStream(para1: JLString; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateBinaryStream(para1: JLString; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateCharacterStream(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateBlob(para1: jint; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateBlob(para1: JLString; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateClob(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateClob(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateNClob(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateNClob(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure updateNCharacterStream(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure updateNCharacterStream(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure updateAsciiStream(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure updateBinaryStream(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure updateCharacterStream(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure updateAsciiStream(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure updateBinaryStream(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure updateCharacterStream(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure updateBlob(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure updateBlob(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure updateClob(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure updateClob(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure updateNClob(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure updateNClob(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
  end;

  JSResultSetMetaData = interface external 'java.sql' name 'ResultSetMetaData' (JSWrapper)
    const
      columnNoNulls = 0;
      columnNullable = 1;
      columnNullableUnknown = 2;
    function getCatalogName(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getColumnClassName(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getColumnCount(): jint; overload;  // throws java.sql.SQLException
    function getColumnDisplaySize(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getColumnLabel(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getColumnName(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getColumnType(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getColumnTypeName(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getPrecision(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getScale(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getSchemaName(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getTableName(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function isAutoIncrement(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function isCaseSensitive(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function isCurrency(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function isDefinitelyWritable(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function isNullable(para1: jint): jint; overload;  // throws java.sql.SQLException
    function isReadOnly(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function isSearchable(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function isSigned(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function isWritable(para1: jint): jboolean; overload;  // throws java.sql.SQLException
  end;

  JSStatement = interface external 'java.sql' name 'Statement' (JSWrapper, JLAutoCloseable)
    const
      CLOSE_ALL_RESULTS = 3;
      CLOSE_CURRENT_RESULT = 1;
      EXECUTE_FAILED = -3;
      KEEP_CURRENT_RESULT = 2;
      NO_GENERATED_KEYS = 2;
      RETURN_GENERATED_KEYS = 1;
      SUCCESS_NO_INFO = -2;
    procedure addBatch(para1: JLString); overload;  // throws java.sql.SQLException
    procedure cancel(); overload;  // throws java.sql.SQLException
    procedure clearBatch(); overload;  // throws java.sql.SQLException
    procedure clearWarnings(); overload;  // throws java.sql.SQLException
    procedure close(); overload;  // throws java.sql.SQLException
    function execute(para1: JLString): jboolean; overload;  // throws java.sql.SQLException
    function execute(para1: JLString; para2: jint): jboolean; overload;  // throws java.sql.SQLException
    function execute(para1: JLString; para2: Arr1jint): jboolean; overload;  // throws java.sql.SQLException
    function execute(para1: JLString; var para2: array of jint): jboolean; overload;  // throws java.sql.SQLException
    function execute(para1: JLString; para2: Arr1JLString): jboolean; overload;  // throws java.sql.SQLException
    function execute(para1: JLString; var para2: array of JLString): jboolean; overload;  // throws java.sql.SQLException
    function executeBatch(): Arr1jint; overload;  // throws java.sql.SQLException
    function executeQuery(para1: JLString): JSResultSet; overload;  // throws java.sql.SQLException
    function executeUpdate(para1: JLString): jint; overload;  // throws java.sql.SQLException
    function executeUpdate(para1: JLString; para2: jint): jint; overload;  // throws java.sql.SQLException
    function executeUpdate(para1: JLString; para2: Arr1jint): jint; overload;  // throws java.sql.SQLException
    function executeUpdate(para1: JLString; var para2: array of jint): jint; overload;  // throws java.sql.SQLException
    function executeUpdate(para1: JLString; para2: Arr1JLString): jint; overload;  // throws java.sql.SQLException
    function executeUpdate(para1: JLString; var para2: array of JLString): jint; overload;  // throws java.sql.SQLException
    function getConnection(): JSConnection; overload;  // throws java.sql.SQLException
    function getFetchDirection(): jint; overload;  // throws java.sql.SQLException
    function getFetchSize(): jint; overload;  // throws java.sql.SQLException
    function getGeneratedKeys(): JSResultSet; overload;  // throws java.sql.SQLException
    function getMaxFieldSize(): jint; overload;  // throws java.sql.SQLException
    function getMaxRows(): jint; overload;  // throws java.sql.SQLException
    function getMoreResults(): jboolean; overload;  // throws java.sql.SQLException
    function getMoreResults(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function getQueryTimeout(): jint; overload;  // throws java.sql.SQLException
    function getResultSet(): JSResultSet; overload;  // throws java.sql.SQLException
    function getResultSetConcurrency(): jint; overload;  // throws java.sql.SQLException
    function getResultSetHoldability(): jint; overload;  // throws java.sql.SQLException
    function getResultSetType(): jint; overload;  // throws java.sql.SQLException
    function getUpdateCount(): jint; overload;  // throws java.sql.SQLException
    function getWarnings(): JSSQLWarning; overload;  // throws java.sql.SQLException
    procedure setCursorName(para1: JLString); overload;  // throws java.sql.SQLException
    procedure setEscapeProcessing(para1: jboolean); overload;  // throws java.sql.SQLException
    procedure setFetchDirection(para1: jint); overload;  // throws java.sql.SQLException
    procedure setFetchSize(para1: jint); overload;  // throws java.sql.SQLException
    procedure setMaxFieldSize(para1: jint); overload;  // throws java.sql.SQLException
    procedure setMaxRows(para1: jint); overload;  // throws java.sql.SQLException
    procedure setQueryTimeout(para1: jint); overload;  // throws java.sql.SQLException
    function isClosed(): jboolean; overload;  // throws java.sql.SQLException
    procedure setPoolable(para1: jboolean); overload;  // throws java.sql.SQLException
    function isPoolable(): jboolean; overload;  // throws java.sql.SQLException
  end;

  JUHashtable = class external 'java.util' name 'Hashtable' (JUDictionary, JUMap, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jfloat); overload;
    constructor create(para1: JUMap); overload;
    function clone(): JLObject; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    procedure putAll(para1: JUMap); overload; virtual;
  strict protected
    procedure rehash(); overload; virtual;
  public
    function remove(para1: JLObject): JLObject; overload; virtual;
    procedure clear(); overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function values(): JUCollection; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function keys(): JUEnumeration; overload; virtual;
    function elements(): JUEnumeration; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JUStringTokenizer = class external 'java.util' name 'StringTokenizer' (JLObject, JUEnumeration)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jboolean); overload;
    function countTokens(): jint; overload; virtual;
    function hasMoreElements(): jboolean; overload; virtual;
    function hasMoreTokens(): jboolean; overload; virtual;
    function nextElement(): JLObject; overload; virtual;
    function nextToken(): JLString; overload; virtual;
    function nextToken(para1: JLString): JLString; overload; virtual;
  end;

  JBPropertyChangeListener = interface external 'java.beans' name 'PropertyChangeListener' (JUEventListener)
    procedure propertyChange(para1: JBPropertyChangeEvent); overload;
  end;

  JUEventListenerProxy = class abstract external 'java.util' name 'EventListenerProxy' (JLObject, JUEventListener)
  public
    constructor create(para1: JUEventListener); overload;
    function getListener(): JUEventListener; overload; virtual;
  end;

  JUPNodeChangeListener = interface external 'java.util.prefs' name 'NodeChangeListener' (JUEventListener)
    procedure childAdded(para1: JUPNodeChangeEvent); overload;
    procedure childRemoved(para1: JUPNodeChangeEvent); overload;
  end;

  JUPPreferenceChangeListener = interface external 'java.util.prefs' name 'PreferenceChangeListener' (JUEventListener)
    procedure preferenceChange(para1: JUPPreferenceChangeEvent); overload;
  end;

  JNSHandshakeCompletedListener = interface external 'javax.net.ssl' name 'HandshakeCompletedListener' (JUEventListener)
    procedure handshakeCompleted(para1: JNSHandshakeCompletedEvent); overload;
  end;

  JNSSSLSessionBindingListener = interface external 'javax.net.ssl' name 'SSLSessionBindingListener' (JUEventListener)
    procedure valueBound(para1: JNSSSLSessionBindingEvent); overload;
    procedure valueUnbound(para1: JNSSSLSessionBindingEvent); overload;
  end;

  JSConnectionEventListener = interface external 'javax.sql' name 'ConnectionEventListener' (JUEventListener)
    procedure connectionClosed(para1: JSConnectionEvent); overload;
    procedure connectionErrorOccurred(para1: JSConnectionEvent); overload;
  end;

  JSRowSetListener = interface external 'javax.sql' name 'RowSetListener' (JUEventListener)
    procedure cursorMoved(para1: JSRowSetEvent); overload;
    procedure rowChanged(para1: JSRowSetEvent); overload;
    procedure rowSetChanged(para1: JSRowSetEvent); overload;
  end;

  JSStatementEventListener = interface external 'javax.sql' name 'StatementEventListener' (JUEventListener)
    procedure statementClosed(para1: JSStatementEvent); overload;
    procedure statementErrorOccurred(para1: JSStatementEvent); overload;
  end;

  ACContentQueryMap = class external 'android.content' name 'ContentQueryMap' (JUObservable)
  public
    constructor create(para1: ADCursor; para2: JLString; para3: jboolean; para4: AOHandler); overload;
    procedure setKeepUpdated(para1: jboolean); overload; virtual;
    function getValues(para1: JLString): ACContentValues; overload; virtual;
    procedure requery(); overload; virtual;
    function getRows(): JUMap; overload; virtual;
    procedure close(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  JUListResourceBundle = class abstract external 'java.util' name 'ListResourceBundle' (JUResourceBundle)
  public
    constructor create(); overload;
  strict protected
    function getContents(): Arr2JLObject; overload; virtual; abstract;
  public
    function getKeys(): JUEnumeration; overload; virtual;
    function handleGetObject(para1: JLString): JLObject; overload; virtual; final;
  strict protected
    function handleKeySet(): JUSet; overload; virtual;
  end;

  JUPropertyResourceBundle = class external 'java.util' name 'PropertyResourceBundle' (JUResourceBundle)
  public
    constructor create(para1: JIInputStream); overload;  // throws java.io.IOException
    constructor create(para1: JIReader); overload;  // throws java.io.IOException
  strict protected
    function handleKeySet(): JUSet; overload; virtual;
  public
    function getKeys(): JUEnumeration; overload; virtual;
    function handleGetObject(para1: JLString): JLObject; overload; virtual;
  end;

  JUCExecutorCompletionService = class external 'java.util.concurrent' name 'ExecutorCompletionService' (JLObject, JUCCompletionService)
  public
    constructor create(para1: JUCExecutor); overload;
    constructor create(para1: JUCExecutor; para2: JUCBlockingQueue); overload;
    function submit(para1: JUCCallable): JUCFuture; overload; virtual;
    function submit(para1: JLRunnable; para2: JLObject): JUCFuture; overload; virtual;
    function take(): JUCFuture; overload; virtual;  // throws java.lang.InterruptedException
    function poll(): JUCFuture; overload; virtual;
    function poll(para1: jlong; para2: JUCTimeUnit): JUCFuture; overload; virtual;  // throws java.lang.InterruptedException
  end;

  JUCExecutorService = interface external 'java.util.concurrent' name 'ExecutorService' (JUCExecutor)
    procedure shutdown(); overload;
    function shutdownNow(): JUList; overload;
    function isShutdown(): jboolean; overload;
    function isTerminated(): jboolean; overload;
    function awaitTermination(para1: jlong; para2: JUCTimeUnit): jboolean; overload;  // throws java.lang.InterruptedException
    function submit(para1: JUCCallable): JUCFuture; overload;
    function submit(para1: JLRunnable; para2: JLObject): JUCFuture; overload;
    function submit(para1: JLRunnable): JUCFuture; overload;
    function invokeAll(para1: JUCollection): JUList; overload;  // throws java.lang.InterruptedException
    function invokeAll(para1: JUCollection; para2: jlong; para3: JUCTimeUnit): JUList; overload;  // throws java.lang.InterruptedException
    function invokeAny(para1: JUCollection): JLObject; overload;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    function invokeAny(para1: JUCollection; para2: jlong; para3: JUCTimeUnit): JLObject; overload;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
  end;

  JUCRunnableFuture = interface external 'java.util.concurrent' name 'RunnableFuture' (JLRunnable, JUCFuture)
    procedure run(); overload;
  end;

  JUCLReentrantLock = class external 'java.util.concurrent.locks' name 'ReentrantLock' (JLObject, JUCLLock, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jboolean); overload;
    procedure lock(); overload; virtual;
    procedure lockInterruptibly(); overload; virtual;  // throws java.lang.InterruptedException
    function tryLock(): jboolean; overload; virtual;
    function tryLock(para1: jlong; para2: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    procedure unlock(); overload; virtual;
    function newCondition(): JUCLCondition; overload; virtual;
    function getHoldCount(): jint; overload; virtual;
    function isHeldByCurrentThread(): jboolean; overload; virtual;
    function isLocked(): jboolean; overload; virtual;
    function isFair(): jboolean; overload; virtual; final;
  strict protected
    function getOwner(): JLThread; overload; virtual;
  public
    function hasQueuedThreads(): jboolean; overload; virtual; final;
    function hasQueuedThread(para1: JLThread): jboolean; overload; virtual; final;
    function getQueueLength(): jint; overload; virtual; final;
  strict protected
    function getQueuedThreads(): JUCollection; overload; virtual;
  public
    function hasWaiters(para1: JUCLCondition): jboolean; overload; virtual;
    function getWaitQueueLength(para1: JUCLCondition): jint; overload; virtual;
  strict protected
    function getWaitingThreads(para1: JUCLCondition): JUCollection; overload; virtual;
  public
    function toString(): JLString; overload; virtual;
  end;

  JUCLReentrantReadWriteLock = class external 'java.util.concurrent.locks' name 'ReentrantReadWriteLock' (JLObject, JUCLReadWriteLock, JISerializable)
  public
    type
      InnerWriteLock = class;
      Arr1InnerWriteLock = array of InnerWriteLock;
      Arr2InnerWriteLock = array of Arr1InnerWriteLock;
      Arr3InnerWriteLock = array of Arr2InnerWriteLock;
      InnerReadLock = class;
      Arr1InnerReadLock = array of InnerReadLock;
      Arr2InnerReadLock = array of Arr1InnerReadLock;
      Arr3InnerReadLock = array of Arr2InnerReadLock;
      InnerWriteLock = class external 'java.util.concurrent.locks' name 'WriteLock' (JLObject, JUCLLock, JISerializable)
      strict protected
        constructor create(para1: JUCLReentrantReadWriteLock); overload;
      public
        procedure lock(); overload; virtual;
        procedure lockInterruptibly(); overload; virtual;  // throws java.lang.InterruptedException
        function tryLock(): jboolean; overload; virtual;
        function tryLock(para1: jlong; para2: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
        procedure unlock(); overload; virtual;
        function newCondition(): JUCLCondition; overload; virtual;
        function toString(): JLString; overload; virtual;
        function isHeldByCurrentThread(): jboolean; overload; virtual;
        function getHoldCount(): jint; overload; virtual;
      end;

      InnerReadLock = class external 'java.util.concurrent.locks' name 'ReadLock' (JLObject, JUCLLock, JISerializable)
      strict protected
        constructor create(para1: JUCLReentrantReadWriteLock); overload;
      public
        procedure lock(); overload; virtual;
        procedure lockInterruptibly(); overload; virtual;  // throws java.lang.InterruptedException
        function tryLock(): jboolean; overload; virtual;
        function tryLock(para1: jlong; para2: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
        procedure unlock(); overload; virtual;
        function newCondition(): JUCLCondition; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  public
    constructor create(); overload;
    constructor create(para1: jboolean); overload;
    function writeLock(): JUCLReentrantReadWriteLock.InnerWriteLock; overload; virtual;
    function readLock(): JUCLReentrantReadWriteLock.InnerReadLock; overload; virtual;
    function isFair(): jboolean; overload; virtual; final;
  strict protected
    function getOwner(): JLThread; overload; virtual;
  public
    function getReadLockCount(): jint; overload; virtual;
    function isWriteLocked(): jboolean; overload; virtual;
    function isWriteLockedByCurrentThread(): jboolean; overload; virtual;
    function getWriteHoldCount(): jint; overload; virtual;
    function getReadHoldCount(): jint; overload; virtual;
  strict protected
    function getQueuedWriterThreads(): JUCollection; overload; virtual;
    function getQueuedReaderThreads(): JUCollection; overload; virtual;
  public
    function hasQueuedThreads(): jboolean; overload; virtual; final;
    function hasQueuedThread(para1: JLThread): jboolean; overload; virtual; final;
    function getQueueLength(): jint; overload; virtual; final;
  strict protected
    function getQueuedThreads(): JUCollection; overload; virtual;
  public
    function hasWaiters(para1: JUCLCondition): jboolean; overload; virtual;
    function getWaitQueueLength(para1: JUCLCondition): jint; overload; virtual;
  strict protected
    function getWaitingThreads(para1: JUCLCondition): JUCollection; overload; virtual;
  public
    function toString(): JLString; overload; virtual;
    function writeLock(): JUCLLock; overload; virtual;
    function readLock(): JUCLLock; overload; virtual;
  end;

  JULSimpleFormatter = class external 'java.util.logging' name 'SimpleFormatter' (JULFormatter)
  public
    constructor create(); overload;
    function format(para1: JULLogRecord): JLString; overload; virtual;
  end;

  JULXMLFormatter = class external 'java.util.logging' name 'XMLFormatter' (JULFormatter)
  public
    constructor create(); overload;
    function format(para1: JULLogRecord): JLString; overload; virtual;
    function getHead(para1: JULHandler): JLString; overload; virtual;
    function getTail(para1: JULHandler): JLString; overload; virtual;
  end;

  JULMemoryHandler = class external 'java.util.logging' name 'MemoryHandler' (JULHandler)
  public
    constructor create(); overload;
    constructor create(para1: JULHandler; para2: jint; para3: JULLevel); overload;
    procedure close(); overload; virtual;
    procedure flush(); overload; virtual;
    procedure publish(para1: JULLogRecord); overload; virtual;
    function getPushLevel(): JULLevel; overload; virtual;
    function isLoggable(para1: JULLogRecord): jboolean; overload; virtual;
    procedure push(); overload; virtual;
    procedure setPushLevel(para1: JULLevel); overload; virtual;
  end;

  JULStreamHandler = class external 'java.util.logging' name 'StreamHandler' (JULHandler)
  public
    constructor create(); overload;
    constructor create(para1: JIOutputStream; para2: JULFormatter); overload;
  strict protected
    procedure setOutputStream(para1: JIOutputStream); overload; virtual;
  public
    procedure setEncoding(para1: JLString); overload; virtual;  // throws java.io.UnsupportedEncodingException
    procedure close(); overload; virtual;
    procedure flush(); overload; virtual;
    procedure publish(para1: JULLogRecord); overload; virtual;
    function isLoggable(para1: JULLogRecord): jboolean; overload; virtual;
  end;

  JUPAbstractPreferences = class abstract external 'java.util.prefs' name 'AbstractPreferences' (JUPPreferences)
  strict protected
    final var
      flock: JLObject; external name 'lock';
  strict protected
    var
      fnewNode: jboolean; external name 'newNode';
  strict protected
    constructor create(para1: JUPAbstractPreferences; para2: JLString); overload;
    function cachedChildren(): Arr1JUPAbstractPreferences; overload; virtual; final;
    function getChild(para1: JLString): JUPAbstractPreferences; overload; virtual;  // throws java.util.prefs.BackingStoreException
    function isRemoved(): jboolean; overload; virtual;
    procedure flushSpi(); overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    function childrenNamesSpi(): Arr1JLString; overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    function childSpi(para1: JLString): JUPAbstractPreferences; overload; virtual; abstract;
    procedure putSpi(para1: JLString; para2: JLString); overload; virtual; abstract;
    function getSpi(para1: JLString): JLString; overload; virtual; abstract;
    function keysSpi(): Arr1JLString; overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    procedure removeNodeSpi(); overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
    procedure removeSpi(para1: JLString); overload; virtual; abstract;
    procedure syncSpi(); overload; virtual; abstract;  // throws java.util.prefs.BackingStoreException
  public
    function absolutePath(): JLString; overload; virtual;
    function childrenNames(): Arr1JLString; overload; virtual;  // throws java.util.prefs.BackingStoreException
    procedure clear(); overload; virtual;  // throws java.util.prefs.BackingStoreException
    procedure exportNode(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException, java.util.prefs.BackingStoreException
    procedure exportSubtree(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException, java.util.prefs.BackingStoreException
    procedure flush(); overload; virtual;  // throws java.util.prefs.BackingStoreException
    function get(para1: JLString; para2: JLString): JLString; overload; virtual;
    function getBoolean(para1: JLString; para2: jboolean): jboolean; overload; virtual;
    function getByteArray(para1: JLString; para2: Arr1jbyte): Arr1jbyte; overload; virtual;
    function getByteArray(para1: JLString; var para2: array of jbyte): Arr1jbyte; overload; virtual;
    function getDouble(para1: JLString; para2: jdouble): jdouble; overload; virtual;
    function getFloat(para1: JLString; para2: jfloat): jfloat; overload; virtual;
    function getInt(para1: JLString; para2: jint): jint; overload; virtual;
    function getLong(para1: JLString; para2: jlong): jlong; overload; virtual;
    function isUserNode(): jboolean; overload; virtual;
    function keys(): Arr1JLString; overload; virtual;  // throws java.util.prefs.BackingStoreException
    function name(): JLString; overload; virtual;
    function node(para1: JLString): JUPPreferences; overload; virtual;
    function nodeExists(para1: JLString): jboolean; overload; virtual;  // throws java.util.prefs.BackingStoreException
    function parent(): JUPPreferences; overload; virtual;
    procedure put(para1: JLString; para2: JLString); overload; virtual;
    procedure putBoolean(para1: JLString; para2: jboolean); overload; virtual;
    procedure putByteArray(para1: JLString; para2: Arr1jbyte); overload; virtual;
    procedure putByteArray(para1: JLString; var para2: array of jbyte); overload; virtual;
    procedure putDouble(para1: JLString; para2: jdouble); overload; virtual;
    procedure putFloat(para1: JLString; para2: jfloat); overload; virtual;
    procedure putInt(para1: JLString; para2: jint); overload; virtual;
    procedure putLong(para1: JLString; para2: jlong); overload; virtual;
    procedure remove(para1: JLString); overload; virtual;
    procedure removeNode(); overload; virtual;  // throws java.util.prefs.BackingStoreException
    procedure addNodeChangeListener(para1: JUPNodeChangeListener); overload; virtual;
    procedure addPreferenceChangeListener(para1: JUPPreferenceChangeListener); overload; virtual;
    procedure removeNodeChangeListener(para1: JUPNodeChangeListener); overload; virtual;
    procedure removePreferenceChangeListener(para1: JUPPreferenceChangeListener); overload; virtual;
    procedure sync(); overload; virtual;  // throws java.util.prefs.BackingStoreException
    function toString(): JLString; overload; virtual;
  end;

  JURMatcher = class sealed external 'java.util.regex' name 'Matcher' (JLObject, JURMatchResult)
  public
    function appendReplacement(para1: JLStringBuffer; para2: JLString): JURMatcher; overload; virtual;
    function reset(): JURMatcher; overload; virtual;
    function reset(para1: JLCharSequence): JURMatcher; overload; virtual;
    function usePattern(para1: JURPattern): JURMatcher; overload; virtual;
    function region(para1: jint; para2: jint): JURMatcher; overload; virtual;
    function appendTail(para1: JLStringBuffer): JLStringBuffer; overload; virtual;
    function replaceFirst(para1: JLString): JLString; overload; virtual;
    function replaceAll(para1: JLString): JLString; overload; virtual;
    function pattern(): JURPattern; overload; virtual;
    function find(para1: jint): jboolean; overload; virtual;
    function find(): jboolean; overload; virtual;
    function lookingAt(): jboolean; overload; virtual;
    function matches(): jboolean; overload; virtual;
    class function quoteReplacement(para1: JLString): JLString; static; overload;
    function toMatchResult(): JURMatchResult; overload; virtual;
    function useAnchoringBounds(para1: jboolean): JURMatcher; overload; virtual;
    function hasAnchoringBounds(): jboolean; overload; virtual;
    function useTransparentBounds(para1: jboolean): JURMatcher; overload; virtual;
    function hasTransparentBounds(): jboolean; overload; virtual;
    function regionStart(): jint; overload; virtual;
    function regionEnd(): jint; overload; virtual;
    function requireEnd(): jboolean; overload; virtual;
    function hitEnd(): jboolean; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function toString(): JLString; overload; virtual;
    function &end(): jint; overload; virtual;
    function &end(para1: jint): jint; overload; virtual;
    function group(): JLString; overload; virtual;
    function group(para1: jint): JLString; overload; virtual;
    function groupCount(): jint; overload; virtual;
    function start(): jint; overload; virtual;
    function start(para1: jint): jint; overload; virtual;  // throws java.lang.IllegalStateException
  end;

  JUZAdler32 = class external 'java.util.zip' name 'Adler32' (JLObject, JUZChecksum)
  public
    constructor create(); overload;
    function getValue(): jlong; overload; virtual;
    procedure reset(); overload; virtual;
    procedure update(para1: jint); overload; virtual;
    procedure update(para1: Arr1jbyte); overload; virtual;
    procedure update(var para1: array of jbyte); overload; virtual;
    procedure update(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure update(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
  end;

  JUZCRC32 = class external 'java.util.zip' name 'CRC32' (JLObject, JUZChecksum)
  public
    constructor create(); overload;
    function getValue(): jlong; overload; virtual;
    procedure reset(); overload; virtual;
    procedure update(para1: jint); overload; virtual;
    procedure update(para1: Arr1jbyte); overload; virtual;
    procedure update(var para1: array of jbyte); overload; virtual;
    procedure update(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure update(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
  end;

  JUJJarFile = class external 'java.util.jar' name 'JarFile' (JUZZipFile)
  public
    const
      MANIFEST_NAME = 'META-INF/MANIFEST.MF';
  public
    constructor create(para1: JIFile); overload;  // throws java.io.IOException
    constructor create(para1: JIFile; para2: jboolean); overload;  // throws java.io.IOException
    constructor create(para1: JIFile; para2: jboolean; para3: jint); overload;  // throws java.io.IOException
    constructor create(para1: JLString); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: jboolean); overload;  // throws java.io.IOException
    function entries(): JUEnumeration; overload; virtual;
    function getJarEntry(para1: JLString): JUJJarEntry; overload; virtual;
    function getManifest(): JUJManifest; overload; virtual;  // throws java.io.IOException
    function getInputStream(para1: JUZZipEntry): JIInputStream; overload; virtual;  // throws java.io.IOException
    function getEntry(para1: JLString): JUZZipEntry; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  JCNullCipher = class external 'javax.crypto' name 'NullCipher' (JCCipher)
  public
    constructor create(); overload;
  end;

  JMKEEGL10 = interface external 'javax.microedition.khronos.egl' name 'EGL10' (JMKEEGL)
    const
      EGL_ALPHA_FORMAT = 12424;
      EGL_ALPHA_MASK_SIZE = 12350;
      EGL_ALPHA_SIZE = 12321;
      EGL_BAD_ACCESS = 12290;
      EGL_BAD_ALLOC = 12291;
      EGL_BAD_ATTRIBUTE = 12292;
      EGL_BAD_CONFIG = 12293;
      EGL_BAD_CONTEXT = 12294;
      EGL_BAD_CURRENT_SURFACE = 12295;
      EGL_BAD_DISPLAY = 12296;
      EGL_BAD_MATCH = 12297;
      EGL_BAD_NATIVE_PIXMAP = 12298;
      EGL_BAD_NATIVE_WINDOW = 12299;
      EGL_BAD_PARAMETER = 12300;
      EGL_BAD_SURFACE = 12301;
      EGL_BLUE_SIZE = 12322;
      EGL_BUFFER_SIZE = 12320;
      EGL_COLORSPACE = 12423;
      EGL_COLOR_BUFFER_TYPE = 12351;
      EGL_CONFIG_CAVEAT = 12327;
      EGL_CONFIG_ID = 12328;
      EGL_CORE_NATIVE_ENGINE = 12379;
    final class var
      fEGL_DEFAULT_DISPLAY: JLObject; external name 'EGL_DEFAULT_DISPLAY';
    const
      EGL_DEPTH_SIZE = 12325;
      EGL_DONT_CARE = -1;
      EGL_DRAW = 12377;
      EGL_EXTENSIONS = 12373;
      EGL_GREEN_SIZE = 12323;
      EGL_HEIGHT = 12374;
      EGL_HORIZONTAL_RESOLUTION = 12432;
      EGL_LARGEST_PBUFFER = 12376;
      EGL_LEVEL = 12329;
      EGL_LUMINANCE_BUFFER = 12431;
      EGL_LUMINANCE_SIZE = 12349;
      EGL_MAX_PBUFFER_HEIGHT = 12330;
      EGL_MAX_PBUFFER_PIXELS = 12331;
      EGL_MAX_PBUFFER_WIDTH = 12332;
      EGL_NATIVE_RENDERABLE = 12333;
      EGL_NATIVE_VISUAL_ID = 12334;
      EGL_NATIVE_VISUAL_TYPE = 12335;
      EGL_NONE = 12344;
      EGL_NON_CONFORMANT_CONFIG = 12369;
      EGL_NOT_INITIALIZED = 12289;
    final class var
      fEGL_NO_CONTEXT: JMKEEGLContext; external name 'EGL_NO_CONTEXT';
      fEGL_NO_DISPLAY: JMKEEGLDisplay; external name 'EGL_NO_DISPLAY';
      fEGL_NO_SURFACE: JMKEEGLSurface; external name 'EGL_NO_SURFACE';
    const
      EGL_PBUFFER_BIT = 1;
      EGL_PIXEL_ASPECT_RATIO = 12434;
      EGL_PIXMAP_BIT = 2;
      EGL_READ = 12378;
      EGL_RED_SIZE = 12324;
      EGL_RENDERABLE_TYPE = 12352;
      EGL_RENDER_BUFFER = 12422;
      EGL_RGB_BUFFER = 12430;
      EGL_SAMPLES = 12337;
      EGL_SAMPLE_BUFFERS = 12338;
      EGL_SINGLE_BUFFER = 12421;
      EGL_SLOW_CONFIG = 12368;
      EGL_STENCIL_SIZE = 12326;
      EGL_SUCCESS = 12288;
      EGL_SURFACE_TYPE = 12339;
      EGL_TRANSPARENT_BLUE_VALUE = 12341;
      EGL_TRANSPARENT_GREEN_VALUE = 12342;
      EGL_TRANSPARENT_RED_VALUE = 12343;
      EGL_TRANSPARENT_RGB = 12370;
      EGL_TRANSPARENT_TYPE = 12340;
      EGL_VENDOR = 12371;
      EGL_VERSION = 12372;
      EGL_VERTICAL_RESOLUTION = 12433;
      EGL_WIDTH = 12375;
      EGL_WINDOW_BIT = 4;
    function eglChooseConfig(para1: JMKEEGLDisplay; para2: Arr1jint; para3: Arr1JMKEEGLConfig; para4: jint; para5: Arr1jint): jboolean; overload;
    function eglChooseConfig(para1: JMKEEGLDisplay; var para2: array of jint; var para3: array of JMKEEGLConfig; para4: jint; var para5: array of jint): jboolean; overload;
    function eglCopyBuffers(para1: JMKEEGLDisplay; para2: JMKEEGLSurface; para3: JLObject): jboolean; overload;
    function eglCreateContext(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: JMKEEGLContext; para4: Arr1jint): JMKEEGLContext; overload;
    function eglCreateContext(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: JMKEEGLContext; var para4: array of jint): JMKEEGLContext; overload;
    function eglCreatePbufferSurface(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: Arr1jint): JMKEEGLSurface; overload;
    function eglCreatePbufferSurface(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; var para3: array of jint): JMKEEGLSurface; overload;
    function eglCreatePixmapSurface(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: JLObject; para4: Arr1jint): JMKEEGLSurface; overload;
    function eglCreatePixmapSurface(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: JLObject; var para4: array of jint): JMKEEGLSurface; overload;
    function eglCreateWindowSurface(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: JLObject; para4: Arr1jint): JMKEEGLSurface; overload;
    function eglCreateWindowSurface(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: JLObject; var para4: array of jint): JMKEEGLSurface; overload;
    function eglDestroyContext(para1: JMKEEGLDisplay; para2: JMKEEGLContext): jboolean; overload;
    function eglDestroySurface(para1: JMKEEGLDisplay; para2: JMKEEGLSurface): jboolean; overload;
    function eglGetConfigAttrib(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: jint; para4: Arr1jint): jboolean; overload;
    function eglGetConfigAttrib(para1: JMKEEGLDisplay; para2: JMKEEGLConfig; para3: jint; var para4: array of jint): jboolean; overload;
    function eglGetConfigs(para1: JMKEEGLDisplay; para2: Arr1JMKEEGLConfig; para3: jint; para4: Arr1jint): jboolean; overload;
    function eglGetConfigs(para1: JMKEEGLDisplay; var para2: array of JMKEEGLConfig; para3: jint; var para4: array of jint): jboolean; overload;
    function eglGetCurrentContext(): JMKEEGLContext; overload;
    function eglGetCurrentDisplay(): JMKEEGLDisplay; overload;
    function eglGetCurrentSurface(para1: jint): JMKEEGLSurface; overload;
    function eglGetDisplay(para1: JLObject): JMKEEGLDisplay; overload;
    function eglGetError(): jint; overload;
    function eglInitialize(para1: JMKEEGLDisplay; para2: Arr1jint): jboolean; overload;
    function eglInitialize(para1: JMKEEGLDisplay; var para2: array of jint): jboolean; overload;
    function eglMakeCurrent(para1: JMKEEGLDisplay; para2: JMKEEGLSurface; para3: JMKEEGLSurface; para4: JMKEEGLContext): jboolean; overload;
    function eglQueryContext(para1: JMKEEGLDisplay; para2: JMKEEGLContext; para3: jint; para4: Arr1jint): jboolean; overload;
    function eglQueryContext(para1: JMKEEGLDisplay; para2: JMKEEGLContext; para3: jint; var para4: array of jint): jboolean; overload;
    function eglQueryString(para1: JMKEEGLDisplay; para2: jint): JLString; overload;
    function eglQuerySurface(para1: JMKEEGLDisplay; para2: JMKEEGLSurface; para3: jint; para4: Arr1jint): jboolean; overload;
    function eglQuerySurface(para1: JMKEEGLDisplay; para2: JMKEEGLSurface; para3: jint; var para4: array of jint): jboolean; overload;
    function eglSwapBuffers(para1: JMKEEGLDisplay; para2: JMKEEGLSurface): jboolean; overload;
    function eglTerminate(para1: JMKEEGLDisplay): jboolean; overload;
    function eglWaitGL(): jboolean; overload;
    function eglWaitNative(para1: jint; para2: JLObject): jboolean; overload;
  end;

  JMKOGL10 = interface external 'javax.microedition.khronos.opengles' name 'GL10' (JMKOGL)
    const
      GL_ADD = 260;
      GL_ALIASED_LINE_WIDTH_RANGE = 33902;
      GL_ALIASED_POINT_SIZE_RANGE = 33901;
      GL_ALPHA = 6406;
      GL_ALPHA_BITS = 3413;
      GL_ALPHA_TEST = 3008;
      GL_ALWAYS = 519;
      GL_AMBIENT = 4608;
      GL_AMBIENT_AND_DIFFUSE = 5634;
      GL_AND = 5377;
      GL_AND_INVERTED = 5380;
      GL_AND_REVERSE = 5378;
      GL_BACK = 1029;
      GL_BLEND = 3042;
      GL_BLUE_BITS = 3412;
      GL_BYTE = 5120;
      GL_CCW = 2305;
      GL_CLAMP_TO_EDGE = 33071;
      GL_CLEAR = 5376;
      GL_COLOR_ARRAY = 32886;
      GL_COLOR_BUFFER_BIT = 16384;
      GL_COLOR_LOGIC_OP = 3058;
      GL_COLOR_MATERIAL = 2903;
      GL_COMPRESSED_TEXTURE_FORMATS = 34467;
      GL_CONSTANT_ATTENUATION = 4615;
      GL_COPY = 5379;
      GL_COPY_INVERTED = 5388;
      GL_CULL_FACE = 2884;
      GL_CW = 2304;
      GL_DECAL = 8449;
      GL_DECR = 7683;
      GL_DEPTH_BITS = 3414;
      GL_DEPTH_BUFFER_BIT = 256;
      GL_DEPTH_TEST = 2929;
      GL_DIFFUSE = 4609;
      GL_DITHER = 3024;
      GL_DONT_CARE = 4352;
      GL_DST_ALPHA = 772;
      GL_DST_COLOR = 774;
      GL_EMISSION = 5632;
      GL_EQUAL = 514;
      GL_EQUIV = 5385;
      GL_EXP = 2048;
      GL_EXP2 = 2049;
      GL_EXTENSIONS = 7939;
      GL_FALSE = 0;
      GL_FASTEST = 4353;
      GL_FIXED = 5132;
      GL_FLAT = 7424;
      GL_FLOAT = 5126;
      GL_FOG = 2912;
      GL_FOG_COLOR = 2918;
      GL_FOG_DENSITY = 2914;
      GL_FOG_END = 2916;
      GL_FOG_HINT = 3156;
      GL_FOG_MODE = 2917;
      GL_FOG_START = 2915;
      GL_FRONT = 1028;
      GL_FRONT_AND_BACK = 1032;
      GL_GEQUAL = 518;
      GL_GREATER = 516;
      GL_GREEN_BITS = 3411;
      GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739;
      GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738;
      GL_INCR = 7682;
      GL_INVALID_ENUM = 1280;
      GL_INVALID_OPERATION = 1282;
      GL_INVALID_VALUE = 1281;
      GL_INVERT = 5386;
      GL_KEEP = 7680;
      GL_LEQUAL = 515;
      GL_LESS = 513;
      GL_LIGHT0 = 16384;
      GL_LIGHT1 = 16385;
      GL_LIGHT2 = 16386;
      GL_LIGHT3 = 16387;
      GL_LIGHT4 = 16388;
      GL_LIGHT5 = 16389;
      GL_LIGHT6 = 16390;
      GL_LIGHT7 = 16391;
      GL_LIGHTING = 2896;
      GL_LIGHT_MODEL_AMBIENT = 2899;
      GL_LIGHT_MODEL_TWO_SIDE = 2898;
      GL_LINEAR = 9729;
      GL_LINEAR_ATTENUATION = 4616;
      GL_LINEAR_MIPMAP_LINEAR = 9987;
      GL_LINEAR_MIPMAP_NEAREST = 9985;
      GL_LINES = 1;
      GL_LINE_LOOP = 2;
      GL_LINE_SMOOTH = 2848;
      GL_LINE_SMOOTH_HINT = 3154;
      GL_LINE_STRIP = 3;
      GL_LUMINANCE = 6409;
      GL_LUMINANCE_ALPHA = 6410;
      GL_MAX_ELEMENTS_INDICES = 33001;
      GL_MAX_ELEMENTS_VERTICES = 33000;
      GL_MAX_LIGHTS = 3377;
      GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
      GL_MAX_PROJECTION_STACK_DEPTH = 3384;
      GL_MAX_TEXTURE_SIZE = 3379;
      GL_MAX_TEXTURE_STACK_DEPTH = 3385;
      GL_MAX_TEXTURE_UNITS = 34018;
      GL_MAX_VIEWPORT_DIMS = 3386;
      GL_MODELVIEW = 5888;
      GL_MODULATE = 8448;
      GL_MULTISAMPLE = 32925;
      GL_NAND = 5390;
      GL_NEAREST = 9728;
      GL_NEAREST_MIPMAP_LINEAR = 9986;
      GL_NEAREST_MIPMAP_NEAREST = 9984;
      GL_NEVER = 512;
      GL_NICEST = 4354;
      GL_NOOP = 5381;
      GL_NOR = 5384;
      GL_NORMALIZE = 2977;
      GL_NORMAL_ARRAY = 32885;
      GL_NOTEQUAL = 517;
      GL_NO_ERROR = 0;
      GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
      GL_ONE = 1;
      GL_ONE_MINUS_DST_ALPHA = 773;
      GL_ONE_MINUS_DST_COLOR = 775;
      GL_ONE_MINUS_SRC_ALPHA = 771;
      GL_ONE_MINUS_SRC_COLOR = 769;
      GL_OR = 5383;
      GL_OR_INVERTED = 5389;
      GL_OR_REVERSE = 5387;
      GL_OUT_OF_MEMORY = 1285;
      GL_PACK_ALIGNMENT = 3333;
      GL_PALETTE4_R5_G6_B5_OES = 35730;
      GL_PALETTE4_RGB5_A1_OES = 35732;
      GL_PALETTE4_RGB8_OES = 35728;
      GL_PALETTE4_RGBA4_OES = 35731;
      GL_PALETTE4_RGBA8_OES = 35729;
      GL_PALETTE8_R5_G6_B5_OES = 35735;
      GL_PALETTE8_RGB5_A1_OES = 35737;
      GL_PALETTE8_RGB8_OES = 35733;
      GL_PALETTE8_RGBA4_OES = 35736;
      GL_PALETTE8_RGBA8_OES = 35734;
      GL_PERSPECTIVE_CORRECTION_HINT = 3152;
      GL_POINTS = 0;
      GL_POINT_FADE_THRESHOLD_SIZE = 33064;
      GL_POINT_SIZE = 2833;
      GL_POINT_SMOOTH = 2832;
      GL_POINT_SMOOTH_HINT = 3153;
      GL_POLYGON_OFFSET_FILL = 32823;
      GL_POLYGON_SMOOTH_HINT = 3155;
      GL_POSITION = 4611;
      GL_PROJECTION = 5889;
      GL_QUADRATIC_ATTENUATION = 4617;
      GL_RED_BITS = 3410;
      GL_RENDERER = 7937;
      GL_REPEAT = 10497;
      GL_REPLACE = 7681;
      GL_RESCALE_NORMAL = 32826;
      GL_RGB = 6407;
      GL_RGBA = 6408;
      GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
      GL_SAMPLE_ALPHA_TO_ONE = 32927;
      GL_SAMPLE_COVERAGE = 32928;
      GL_SCISSOR_TEST = 3089;
      GL_SET = 5391;
      GL_SHININESS = 5633;
      GL_SHORT = 5122;
      GL_SMOOTH = 7425;
      GL_SMOOTH_LINE_WIDTH_RANGE = 2850;
      GL_SMOOTH_POINT_SIZE_RANGE = 2834;
      GL_SPECULAR = 4610;
      GL_SPOT_CUTOFF = 4614;
      GL_SPOT_DIRECTION = 4612;
      GL_SPOT_EXPONENT = 4613;
      GL_SRC_ALPHA = 770;
      GL_SRC_ALPHA_SATURATE = 776;
      GL_SRC_COLOR = 768;
      GL_STACK_OVERFLOW = 1283;
      GL_STACK_UNDERFLOW = 1284;
      GL_STENCIL_BITS = 3415;
      GL_STENCIL_BUFFER_BIT = 1024;
      GL_STENCIL_TEST = 2960;
      GL_SUBPIXEL_BITS = 3408;
      GL_TEXTURE = 5890;
      GL_TEXTURE0 = 33984;
      GL_TEXTURE1 = 33985;
      GL_TEXTURE10 = 33994;
      GL_TEXTURE11 = 33995;
      GL_TEXTURE12 = 33996;
      GL_TEXTURE13 = 33997;
      GL_TEXTURE14 = 33998;
      GL_TEXTURE15 = 33999;
      GL_TEXTURE16 = 34000;
      GL_TEXTURE17 = 34001;
      GL_TEXTURE18 = 34002;
      GL_TEXTURE19 = 34003;
      GL_TEXTURE2 = 33986;
      GL_TEXTURE20 = 34004;
      GL_TEXTURE21 = 34005;
      GL_TEXTURE22 = 34006;
      GL_TEXTURE23 = 34007;
      GL_TEXTURE24 = 34008;
      GL_TEXTURE25 = 34009;
      GL_TEXTURE26 = 34010;
      GL_TEXTURE27 = 34011;
      GL_TEXTURE28 = 34012;
      GL_TEXTURE29 = 34013;
      GL_TEXTURE3 = 33987;
      GL_TEXTURE30 = 34014;
      GL_TEXTURE31 = 34015;
      GL_TEXTURE4 = 33988;
      GL_TEXTURE5 = 33989;
      GL_TEXTURE6 = 33990;
      GL_TEXTURE7 = 33991;
      GL_TEXTURE8 = 33992;
      GL_TEXTURE9 = 33993;
      GL_TEXTURE_2D = 3553;
      GL_TEXTURE_COORD_ARRAY = 32888;
      GL_TEXTURE_ENV = 8960;
      GL_TEXTURE_ENV_COLOR = 8705;
      GL_TEXTURE_ENV_MODE = 8704;
      GL_TEXTURE_MAG_FILTER = 10240;
      GL_TEXTURE_MIN_FILTER = 10241;
      GL_TEXTURE_WRAP_S = 10242;
      GL_TEXTURE_WRAP_T = 10243;
      GL_TRIANGLES = 4;
      GL_TRIANGLE_FAN = 6;
      GL_TRIANGLE_STRIP = 5;
      GL_TRUE = 1;
      GL_UNPACK_ALIGNMENT = 3317;
      GL_UNSIGNED_BYTE = 5121;
      GL_UNSIGNED_SHORT = 5123;
      GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
      GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
      GL_UNSIGNED_SHORT_5_6_5 = 33635;
      GL_VENDOR = 7936;
      GL_VERSION = 7938;
      GL_VERTEX_ARRAY = 32884;
      GL_XOR = 5382;
      GL_ZERO = 0;
    procedure glActiveTexture(para1: jint); overload;
    procedure glAlphaFunc(para1: jint; para2: jfloat); overload;
    procedure glAlphaFuncx(para1: jint; para2: jint); overload;
    procedure glBindTexture(para1: jint; para2: jint); overload;
    procedure glBlendFunc(para1: jint; para2: jint); overload;
    procedure glClear(para1: jint); overload;
    procedure glClearColor(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    procedure glClearColorx(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glClearDepthf(para1: jfloat); overload;
    procedure glClearDepthx(para1: jint); overload;
    procedure glClearStencil(para1: jint); overload;
    procedure glClientActiveTexture(para1: jint); overload;
    procedure glColor4f(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    procedure glColor4x(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glColorMask(para1: jboolean; para2: jboolean; para3: jboolean; para4: jboolean); overload;
    procedure glColorPointer(para1: jint; para2: jint; para3: jint; para4: JNBuffer); overload;
    procedure glCompressedTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JNBuffer); overload;
    procedure glCompressedTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); overload;
    procedure glCopyTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); overload;
    procedure glCopyTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); overload;
    procedure glCullFace(para1: jint); overload;
    procedure glDeleteTextures(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glDeleteTextures(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glDeleteTextures(para1: jint; para2: JNIntBuffer); overload;
    procedure glDepthFunc(para1: jint); overload;
    procedure glDepthMask(para1: jboolean); overload;
    procedure glDepthRangef(para1: jfloat; para2: jfloat); overload;
    procedure glDepthRangex(para1: jint; para2: jint); overload;
    procedure glDisable(para1: jint); overload;
    procedure glDisableClientState(para1: jint); overload;
    procedure glDrawArrays(para1: jint; para2: jint; para3: jint); overload;
    procedure glDrawElements(para1: jint; para2: jint; para3: jint; para4: JNBuffer); overload;
    procedure glEnable(para1: jint); overload;
    procedure glEnableClientState(para1: jint); overload;
    procedure glFinish(); overload;
    procedure glFlush(); overload;
    procedure glFogf(para1: jint; para2: jfloat); overload;
    procedure glFogfv(para1: jint; para2: Arr1jfloat; para3: jint); overload;
    procedure glFogfv(para1: jint; var para2: array of jfloat; para3: jint); overload;
    procedure glFogfv(para1: jint; para2: JNFloatBuffer); overload;
    procedure glFogx(para1: jint; para2: jint); overload;
    procedure glFogxv(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glFogxv(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glFogxv(para1: jint; para2: JNIntBuffer); overload;
    procedure glFrontFace(para1: jint); overload;
    procedure glFrustumf(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); overload;
    procedure glFrustumx(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload;
    procedure glGenTextures(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glGenTextures(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glGenTextures(para1: jint; para2: JNIntBuffer); overload;
    function glGetError(): jint; overload;
    procedure glGetIntegerv(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glGetIntegerv(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glGetIntegerv(para1: jint; para2: JNIntBuffer); overload;
    function glGetString(para1: jint): JLString; overload;
    procedure glHint(para1: jint; para2: jint); overload;
    procedure glLightModelf(para1: jint; para2: jfloat); overload;
    procedure glLightModelfv(para1: jint; para2: Arr1jfloat; para3: jint); overload;
    procedure glLightModelfv(para1: jint; var para2: array of jfloat; para3: jint); overload;
    procedure glLightModelfv(para1: jint; para2: JNFloatBuffer); overload;
    procedure glLightModelx(para1: jint; para2: jint); overload;
    procedure glLightModelxv(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glLightModelxv(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glLightModelxv(para1: jint; para2: JNIntBuffer); overload;
    procedure glLightf(para1: jint; para2: jint; para3: jfloat); overload;
    procedure glLightfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glLightfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glLightfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glLightx(para1: jint; para2: jint; para3: jint); overload;
    procedure glLightxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glLightxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glLightxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glLineWidth(para1: jfloat); overload;
    procedure glLineWidthx(para1: jint); overload;
    procedure glLoadIdentity(); overload;
    procedure glLoadMatrixf(para1: Arr1jfloat; para2: jint); overload;
    procedure glLoadMatrixf(var para1: array of jfloat; para2: jint); overload;
    procedure glLoadMatrixf(para1: JNFloatBuffer); overload;
    procedure glLoadMatrixx(para1: Arr1jint; para2: jint); overload;
    procedure glLoadMatrixx(var para1: array of jint; para2: jint); overload;
    procedure glLoadMatrixx(para1: JNIntBuffer); overload;
    procedure glLogicOp(para1: jint); overload;
    procedure glMaterialf(para1: jint; para2: jint; para3: jfloat); overload;
    procedure glMaterialfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glMaterialfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glMaterialfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glMaterialx(para1: jint; para2: jint; para3: jint); overload;
    procedure glMaterialxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glMaterialxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glMaterialxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glMatrixMode(para1: jint); overload;
    procedure glMultMatrixf(para1: Arr1jfloat; para2: jint); overload;
    procedure glMultMatrixf(var para1: array of jfloat; para2: jint); overload;
    procedure glMultMatrixf(para1: JNFloatBuffer); overload;
    procedure glMultMatrixx(para1: Arr1jint; para2: jint); overload;
    procedure glMultMatrixx(var para1: array of jint; para2: jint); overload;
    procedure glMultMatrixx(para1: JNIntBuffer); overload;
    procedure glMultiTexCoord4f(para1: jint; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat); overload;
    procedure glMultiTexCoord4x(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    procedure glNormal3f(para1: jfloat; para2: jfloat; para3: jfloat); overload;
    procedure glNormal3x(para1: jint; para2: jint; para3: jint); overload;
    procedure glNormalPointer(para1: jint; para2: jint; para3: JNBuffer); overload;
    procedure glOrthof(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); overload;
    procedure glOrthox(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload;
    procedure glPixelStorei(para1: jint; para2: jint); overload;
    procedure glPointSize(para1: jfloat); overload;
    procedure glPointSizex(para1: jint); overload;
    procedure glPolygonOffset(para1: jfloat; para2: jfloat); overload;
    procedure glPolygonOffsetx(para1: jint; para2: jint); overload;
    procedure glPopMatrix(); overload;
    procedure glPushMatrix(); overload;
    procedure glReadPixels(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: JNBuffer); overload;
    procedure glRotatef(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    procedure glRotatex(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glSampleCoverage(para1: jfloat; para2: jboolean); overload;
    procedure glSampleCoveragex(para1: jint; para2: jboolean); overload;
    procedure glScalef(para1: jfloat; para2: jfloat; para3: jfloat); overload;
    procedure glScalex(para1: jint; para2: jint; para3: jint); overload;
    procedure glScissor(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glShadeModel(para1: jint); overload;
    procedure glStencilFunc(para1: jint; para2: jint; para3: jint); overload;
    procedure glStencilMask(para1: jint); overload;
    procedure glStencilOp(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexCoordPointer(para1: jint; para2: jint; para3: jint; para4: JNBuffer); overload;
    procedure glTexEnvf(para1: jint; para2: jint; para3: jfloat); overload;
    procedure glTexEnvfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glTexEnvfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glTexEnvfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glTexEnvx(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexEnvxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glTexEnvxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glTexEnvxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); overload;
    procedure glTexParameterf(para1: jint; para2: jint; para3: jfloat); overload;
    procedure glTexParameterx(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexSubImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); overload;
    procedure glTranslatef(para1: jfloat; para2: jfloat; para3: jfloat); overload;
    procedure glTranslatex(para1: jint; para2: jint; para3: jint); overload;
    procedure glVertexPointer(para1: jint; para2: jint; para3: jint; para4: JNBuffer); overload;
    procedure glViewport(para1: jint; para2: jint; para3: jint; para4: jint); overload;
  end;

  JMKOGL10Ext = interface external 'javax.microedition.khronos.opengles' name 'GL10Ext' (JMKOGL)
    function glQueryMatrixxOES(para1: Arr1jint; para2: jint; para3: Arr1jint; para4: jint): jint; overload;
    function glQueryMatrixxOES(var para1: array of jint; para2: jint; var para3: array of jint; para4: jint): jint; overload;
    function glQueryMatrixxOES(para1: JNIntBuffer; para2: JNIntBuffer): jint; overload;
  end;

  JMKOGL11Ext = interface external 'javax.microedition.khronos.opengles' name 'GL11Ext' (JMKOGL)
    const
      GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 35742;
      GL_MATRIX_INDEX_ARRAY_OES = 34884;
      GL_MATRIX_INDEX_ARRAY_POINTER_OES = 34889;
      GL_MATRIX_INDEX_ARRAY_SIZE_OES = 34886;
      GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 34888;
      GL_MATRIX_INDEX_ARRAY_TYPE_OES = 34887;
      GL_MATRIX_PALETTE_OES = 34880;
      GL_MAX_PALETTE_MATRICES_OES = 34882;
      GL_MAX_VERTEX_UNITS_OES = 34468;
      GL_TEXTURE_CROP_RECT_OES = 35741;
      GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 34974;
      GL_WEIGHT_ARRAY_OES = 34477;
      GL_WEIGHT_ARRAY_POINTER_OES = 34476;
      GL_WEIGHT_ARRAY_SIZE_OES = 34475;
      GL_WEIGHT_ARRAY_STRIDE_OES = 34474;
      GL_WEIGHT_ARRAY_TYPE_OES = 34473;
    procedure glTexParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glTexParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glCurrentPaletteMatrixOES(para1: jint); overload;
    procedure glDrawTexfOES(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat); overload;
    procedure glDrawTexfvOES(para1: Arr1jfloat; para2: jint); overload;
    procedure glDrawTexfvOES(var para1: array of jfloat; para2: jint); overload;
    procedure glDrawTexfvOES(para1: JNFloatBuffer); overload;
    procedure glDrawTexiOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    procedure glDrawTexivOES(para1: Arr1jint; para2: jint); overload;
    procedure glDrawTexivOES(var para1: array of jint; para2: jint); overload;
    procedure glDrawTexivOES(para1: JNIntBuffer); overload;
    procedure glDrawTexsOES(para1: jshort; para2: jshort; para3: jshort; para4: jshort; para5: jshort); overload;
    procedure glDrawTexsvOES(para1: Arr1jshort; para2: jint); overload;
    procedure glDrawTexsvOES(var para1: array of jshort; para2: jint); overload;
    procedure glDrawTexsvOES(para1: JNShortBuffer); overload;
    procedure glDrawTexxOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    procedure glDrawTexxvOES(para1: Arr1jint; para2: jint); overload;
    procedure glDrawTexxvOES(var para1: array of jint; para2: jint); overload;
    procedure glDrawTexxvOES(para1: JNIntBuffer); overload;
    procedure glEnable(para1: jint); overload;
    procedure glEnableClientState(para1: jint); overload;
    procedure glLoadPaletteFromModelViewMatrixOES(); overload;
    procedure glMatrixIndexPointerOES(para1: jint; para2: jint; para3: jint; para4: JNBuffer); overload;
    procedure glMatrixIndexPointerOES(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glWeightPointerOES(para1: jint; para2: jint; para3: jint; para4: JNBuffer); overload;
    procedure glWeightPointerOES(para1: jint; para2: jint; para3: jint; para4: jint); overload;
  end;

  JMKOGL11ExtensionPack = interface external 'javax.microedition.khronos.opengles' name 'GL11ExtensionPack' (JMKOGL)
    const
      GL_BLEND_DST_ALPHA = 32970;
      GL_BLEND_DST_RGB = 32968;
      GL_BLEND_EQUATION = 32777;
      GL_BLEND_EQUATION_ALPHA = 34877;
      GL_BLEND_EQUATION_RGB = 32777;
      GL_BLEND_SRC_ALPHA = 32971;
      GL_BLEND_SRC_RGB = 32969;
      GL_COLOR_ATTACHMENT0_OES = 36064;
      GL_COLOR_ATTACHMENT10_OES = 36074;
      GL_COLOR_ATTACHMENT11_OES = 36075;
      GL_COLOR_ATTACHMENT12_OES = 36076;
      GL_COLOR_ATTACHMENT13_OES = 36077;
      GL_COLOR_ATTACHMENT14_OES = 36078;
      GL_COLOR_ATTACHMENT15_OES = 36079;
      GL_COLOR_ATTACHMENT1_OES = 36065;
      GL_COLOR_ATTACHMENT2_OES = 36066;
      GL_COLOR_ATTACHMENT3_OES = 36067;
      GL_COLOR_ATTACHMENT4_OES = 36068;
      GL_COLOR_ATTACHMENT5_OES = 36069;
      GL_COLOR_ATTACHMENT6_OES = 36070;
      GL_COLOR_ATTACHMENT7_OES = 36071;
      GL_COLOR_ATTACHMENT8_OES = 36072;
      GL_COLOR_ATTACHMENT9_OES = 36073;
      GL_DECR_WRAP = 34056;
      GL_DEPTH_ATTACHMENT_OES = 36096;
      GL_DEPTH_COMPONENT = 6402;
      GL_DEPTH_COMPONENT16 = 33189;
      GL_DEPTH_COMPONENT24 = 33190;
      GL_DEPTH_COMPONENT32 = 33191;
      GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 36049;
      GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 36048;
      GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 36051;
      GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 36050;
      GL_FRAMEBUFFER_BINDING_OES = 36006;
      GL_FRAMEBUFFER_COMPLETE_OES = 36053;
      GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 36054;
      GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 36057;
      GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 36059;
      GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 36058;
      GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 36055;
      GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 36060;
      GL_FRAMEBUFFER_OES = 36160;
      GL_FRAMEBUFFER_UNSUPPORTED_OES = 36061;
      GL_FUNC_ADD = 32774;
      GL_FUNC_REVERSE_SUBTRACT = 32779;
      GL_FUNC_SUBTRACT = 32778;
      GL_INCR_WRAP = 34055;
      GL_INVALID_FRAMEBUFFER_OPERATION_OES = 1286;
      GL_MAX_COLOR_ATTACHMENTS_OES = 36063;
      GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
      GL_MAX_RENDERBUFFER_SIZE_OES = 34024;
      GL_MIRRORED_REPEAT = 33648;
      GL_NORMAL_MAP = 34065;
      GL_REFLECTION_MAP = 34066;
      GL_RENDERBUFFER_ALPHA_SIZE_OES = 36179;
      GL_RENDERBUFFER_BINDING_OES = 36007;
      GL_RENDERBUFFER_BLUE_SIZE_OES = 36178;
      GL_RENDERBUFFER_DEPTH_SIZE_OES = 36180;
      GL_RENDERBUFFER_GREEN_SIZE_OES = 36177;
      GL_RENDERBUFFER_HEIGHT_OES = 36163;
      GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 36164;
      GL_RENDERBUFFER_OES = 36161;
      GL_RENDERBUFFER_RED_SIZE_OES = 36176;
      GL_RENDERBUFFER_STENCIL_SIZE_OES = 36181;
      GL_RENDERBUFFER_WIDTH_OES = 36162;
      GL_RGB565_OES = 36194;
      GL_RGB5_A1 = 32855;
      GL_RGB8 = 32849;
      GL_RGBA4 = 32854;
      GL_RGBA8 = 32856;
      GL_STENCIL_ATTACHMENT_OES = 36128;
      GL_STENCIL_INDEX = 6401;
      GL_STENCIL_INDEX1_OES = 36166;
      GL_STENCIL_INDEX4_OES = 36167;
      GL_STENCIL_INDEX8_OES = 36168;
      GL_STR = -1;
      GL_TEXTURE_BINDING_CUBE_MAP = 34068;
      GL_TEXTURE_CUBE_MAP = 34067;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
      GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
      GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
      GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
      GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
      GL_TEXTURE_GEN_MODE = 9472;
      GL_TEXTURE_GEN_STR = 36192;
    procedure glBindFramebufferOES(para1: jint; para2: jint); overload;
    procedure glBindRenderbufferOES(para1: jint; para2: jint); overload;
    procedure glBindTexture(para1: jint; para2: jint); overload;
    procedure glBlendEquation(para1: jint); overload;
    procedure glBlendEquationSeparate(para1: jint; para2: jint); overload;
    procedure glBlendFuncSeparate(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    function glCheckFramebufferStatusOES(para1: jint): jint; overload;
    procedure glCompressedTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JNBuffer); overload;
    procedure glCopyTexImage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); overload;
    procedure glDeleteFramebuffersOES(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glDeleteFramebuffersOES(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glDeleteFramebuffersOES(para1: jint; para2: JNIntBuffer); overload;
    procedure glDeleteRenderbuffersOES(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glDeleteRenderbuffersOES(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glDeleteRenderbuffersOES(para1: jint; para2: JNIntBuffer); overload;
    procedure glEnable(para1: jint); overload;
    procedure glFramebufferRenderbufferOES(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glFramebufferTexture2DOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    procedure glGenerateMipmapOES(para1: jint); overload;
    procedure glGenFramebuffersOES(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glGenFramebuffersOES(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glGenFramebuffersOES(para1: jint; para2: JNIntBuffer); overload;
    procedure glGenRenderbuffersOES(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glGenRenderbuffersOES(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glGenRenderbuffersOES(para1: jint; para2: JNIntBuffer); overload;
    procedure glGetFramebufferAttachmentParameterivOES(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); overload;
    procedure glGetFramebufferAttachmentParameterivOES(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); overload;
    procedure glGetFramebufferAttachmentParameterivOES(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); overload;
    procedure glGetIntegerv(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glGetIntegerv(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glGetIntegerv(para1: jint; para2: JNIntBuffer); overload;
    procedure glGetRenderbufferParameterivOES(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetRenderbufferParameterivOES(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetRenderbufferParameterivOES(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glGetTexGenfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glGetTexGenfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glGetTexGenfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glGetTexGeniv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetTexGeniv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetTexGeniv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glGetTexGenxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetTexGenxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetTexGenxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    function glIsFramebufferOES(para1: jint): jboolean; overload;
    function glIsRenderbufferOES(para1: jint): jboolean; overload;
    procedure glRenderbufferStorageOES(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glStencilOp(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexEnvf(para1: jint; para2: jint; para3: jfloat); overload;
    procedure glTexEnvfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glTexEnvfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glTexEnvfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glTexEnvx(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexEnvxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glTexEnvxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glTexEnvxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glTexGenf(para1: jint; para2: jint; para3: jfloat); overload;
    procedure glTexGenfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glTexGenfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glTexGenfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glTexGeni(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexGeniv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glTexGeniv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glTexGeniv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glTexGenx(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexGenxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glTexGenxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glTexGenxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glTexParameterf(para1: jint; para2: jint; para3: jfloat); overload;
  end;

  JNSSSLServerSocketFactory = class abstract external 'javax.net.ssl' name 'SSLServerSocketFactory' (JNServerSocketFactory)
  strict protected
    constructor create(); overload;
  public
    class function getDefault(): JNServerSocketFactory; static; overload;
    function getDefaultCipherSuites(): Arr1JLString; overload; virtual; abstract;
    function getSupportedCipherSuites(): Arr1JLString; overload; virtual; abstract;
  end;

  JNSSSLSocketFactory = class abstract external 'javax.net.ssl' name 'SSLSocketFactory' (JNSocketFactory)
  public
    constructor create(); overload;
    class function getDefault(): JNSocketFactory; static; overload;
    function getDefaultCipherSuites(): Arr1JLString; overload; virtual; abstract;
    function getSupportedCipherSuites(): Arr1JLString; overload; virtual; abstract;
    function createSocket(para1: JNSocket; para2: JLString; para3: jint; para4: jboolean): JNSocket; overload; virtual; abstract;  // throws java.io.IOException
  end;

  OAHCSX509HostnameVerifier = interface external 'org.apache.http.conn.ssl' name 'X509HostnameVerifier' (JNSHostnameVerifier)
    function verify(para1: JLString; para2: JNSSSLSession): jboolean; overload;
    procedure verify(para1: JLString; para2: JNSSSLSocket); overload;  // throws java.io.IOException
    procedure verify(para1: JLString; para2: JSCX509Certificate); overload;  // throws javax.net.ssl.SSLException
    procedure verify(para1: JLString; para2: Arr1JLString; para3: Arr1JLString); overload;  // throws javax.net.ssl.SSLException
    procedure verify(para1: JLString; var para2: array of JLString; var para3: array of JLString); overload;  // throws javax.net.ssl.SSLException
  end;

  JNSX509KeyManager = interface external 'javax.net.ssl' name 'X509KeyManager' (JNSKeyManager)
    function chooseClientAlias(para1: Arr1JLString; para2: Arr1JSPrincipal; para3: JNSocket): JLString; overload;
    function chooseClientAlias(var para1: array of JLString; var para2: array of JSPrincipal; para3: JNSocket): JLString; overload;
    function chooseServerAlias(para1: JLString; para2: Arr1JSPrincipal; para3: JNSocket): JLString; overload;
    function chooseServerAlias(para1: JLString; var para2: array of JSPrincipal; para3: JNSocket): JLString; overload;
    function getCertificateChain(para1: JLString): Arr1JSCX509Certificate; overload;
    function getClientAliases(para1: JLString; para2: Arr1JSPrincipal): Arr1JLString; overload;
    function getClientAliases(para1: JLString; var para2: array of JSPrincipal): Arr1JLString; overload;
    function getServerAliases(para1: JLString; para2: Arr1JSPrincipal): Arr1JLString; overload;
    function getServerAliases(para1: JLString; var para2: array of JSPrincipal): Arr1JLString; overload;
    function getPrivateKey(para1: JLString): JSPrivateKey; overload;
  end;

  JNSCertPathTrustManagerParameters = class external 'javax.net.ssl' name 'CertPathTrustManagerParameters' (JLObject, JNSManagerFactoryParameters)
  public
    constructor create(para1: JSCCertPathParameters); overload;
    function getParameters(): JSCCertPathParameters; overload; virtual;
  end;

  JNSX509TrustManager = interface external 'javax.net.ssl' name 'X509TrustManager' (JNSTrustManager)
    procedure checkClientTrusted(para1: Arr1JSCX509Certificate; para2: JLString); overload;  // throws java.security.cert.CertificateException
    procedure checkClientTrusted(var para1: array of JSCX509Certificate; para2: JLString); overload;  // throws java.security.cert.CertificateException
    procedure checkServerTrusted(para1: Arr1JSCX509Certificate; para2: JLString); overload;  // throws java.security.cert.CertificateException
    procedure checkServerTrusted(var para1: array of JSCX509Certificate; para2: JLString); overload;  // throws java.security.cert.CertificateException
    function getAcceptedIssuers(): Arr1JSCX509Certificate; overload;
  end;

  JSKeyStore = class external 'java.security' name 'KeyStore' (JLObject)
  public
    type
      InnerProtectionParameter = interface;
      Arr1InnerProtectionParameter = array of InnerProtectionParameter;
      Arr2InnerProtectionParameter = array of Arr1InnerProtectionParameter;
      Arr3InnerProtectionParameter = array of Arr2InnerProtectionParameter;
      InnerEntry = interface;
      Arr1InnerEntry = array of InnerEntry;
      Arr2InnerEntry = array of Arr1InnerEntry;
      Arr3InnerEntry = array of Arr2InnerEntry;
      InnerLoadStoreParameter = interface;
      Arr1InnerLoadStoreParameter = array of InnerLoadStoreParameter;
      Arr2InnerLoadStoreParameter = array of Arr1InnerLoadStoreParameter;
      Arr3InnerLoadStoreParameter = array of Arr2InnerLoadStoreParameter;
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerPasswordProtection = class;
      Arr1InnerPasswordProtection = array of InnerPasswordProtection;
      Arr2InnerPasswordProtection = array of Arr1InnerPasswordProtection;
      Arr3InnerPasswordProtection = array of Arr2InnerPasswordProtection;
      InnerCallbackHandlerProtection = class;
      Arr1InnerCallbackHandlerProtection = array of InnerCallbackHandlerProtection;
      Arr2InnerCallbackHandlerProtection = array of Arr1InnerCallbackHandlerProtection;
      Arr3InnerCallbackHandlerProtection = array of Arr2InnerCallbackHandlerProtection;
      InnerTrustedCertificateEntry = class;
      Arr1InnerTrustedCertificateEntry = array of InnerTrustedCertificateEntry;
      Arr2InnerTrustedCertificateEntry = array of Arr1InnerTrustedCertificateEntry;
      Arr3InnerTrustedCertificateEntry = array of Arr2InnerTrustedCertificateEntry;
      InnerSecretKeyEntry = class;
      Arr1InnerSecretKeyEntry = array of InnerSecretKeyEntry;
      Arr2InnerSecretKeyEntry = array of Arr1InnerSecretKeyEntry;
      Arr3InnerSecretKeyEntry = array of Arr2InnerSecretKeyEntry;
      InnerPrivateKeyEntry = class;
      Arr1InnerPrivateKeyEntry = array of InnerPrivateKeyEntry;
      Arr2InnerPrivateKeyEntry = array of Arr1InnerPrivateKeyEntry;
      Arr3InnerPrivateKeyEntry = array of Arr2InnerPrivateKeyEntry;
      InnerProtectionParameter = interface external 'java.security' name 'ProtectionParameter' 
      end;

      InnerEntry = interface external 'java.security' name 'Entry' 
      end;

      InnerLoadStoreParameter = interface external 'java.security' name 'LoadStoreParameter' 
        function getProtectionParameter(): JSKeyStore.InnerProtectionParameter; overload;
      end;

      InnerBuilder = class abstract external 'java.security' name 'Builder' (JLObject)
      strict protected
        constructor create(); overload;
      public
        function getKeyStore(): JSKeyStore; overload; virtual; abstract;  // throws java.security.KeyStoreException
        function getProtectionParameter(para1: JLString): JSKeyStore.InnerProtectionParameter; overload; virtual; abstract;  // throws java.security.KeyStoreException
        class function newInstance(para1: JSKeyStore; para2: JSKeyStore.InnerProtectionParameter): JSKeyStore.InnerBuilder; static; overload;
        class function newInstance(para1: JLString; para2: JSProvider; para3: JIFile; para4: JSKeyStore.InnerProtectionParameter): JSKeyStore.InnerBuilder; static; overload;
        class function newInstance(para1: JLString; para2: JSProvider; para3: JSKeyStore.InnerProtectionParameter): JSKeyStore.InnerBuilder; static; overload;
      end;

      InnerPasswordProtection = class external 'java.security' name 'PasswordProtection' (JLObject, JSKeyStore.InnerProtectionParameter, JSADestroyable)
      public
        constructor create(para1: Arr1jchar); overload;
        constructor create(const para1: array of jchar); overload;
        function getPassword(): Arr1jchar; overload; virtual;
        procedure destroy(); overload; virtual;  // throws javax.security.auth.DestroyFailedException
        function isDestroyed(): jboolean; overload; virtual;
      end;

      InnerCallbackHandlerProtection = class external 'java.security' name 'CallbackHandlerProtection' (JLObject, JSKeyStore.InnerProtectionParameter)
      public
        constructor create(para1: JSACCallbackHandler); overload;
        function getCallbackHandler(): JSACCallbackHandler; overload; virtual;
      end;

      InnerTrustedCertificateEntry = class sealed external 'java.security' name 'TrustedCertificateEntry' (JLObject, JSKeyStore.InnerEntry)
      public
        constructor create(para1: JSCCertificate); overload;
        function getTrustedCertificate(): JSCCertificate; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerSecretKeyEntry = class sealed external 'java.security' name 'SecretKeyEntry' (JLObject, JSKeyStore.InnerEntry)
      public
        constructor create(para1: JCSecretKey); overload;
        function getSecretKey(): JCSecretKey; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerPrivateKeyEntry = class sealed external 'java.security' name 'PrivateKeyEntry' (JLObject, JSKeyStore.InnerEntry)
      public
        constructor create(para1: JSPrivateKey; para2: Arr1JSCCertificate); overload;
        constructor create(para1: JSPrivateKey; const para2: array of JSCCertificate); overload;
        function getPrivateKey(): JSPrivateKey; overload; virtual;
        function getCertificateChain(): Arr1JSCCertificate; overload; virtual;
        function getCertificate(): JSCCertificate; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  strict protected
    constructor create(para1: JSKeyStoreSpi; para2: JSProvider; para3: JLString); overload;
  public
    class function getInstance(para1: JLString): JSKeyStore; static; overload;  // throws java.security.KeyStoreException
    class function getInstance(para1: JLString; para2: JLString): JSKeyStore; static; overload;  // throws java.security.KeyStoreException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSKeyStore; static; overload;  // throws java.security.KeyStoreException
    class function getDefaultType(): JLString; static; overload; final;
    function getProvider(): JSProvider; overload; virtual; final;
    function getType(): JLString; overload; virtual; final;
    function getKey(para1: JLString; para2: Arr1jchar): JSKey; overload; virtual; final;  // throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    function getKey(para1: JLString; var para2: array of jchar): JSKey; overload; virtual; final;  // throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    function getCertificateChain(para1: JLString): Arr1JSCCertificate; overload; virtual; final;  // throws java.security.KeyStoreException
    function getCertificate(para1: JLString): JSCCertificate; overload; virtual; final;  // throws java.security.KeyStoreException
    function getCreationDate(para1: JLString): JUDate; overload; virtual; final;  // throws java.security.KeyStoreException
    procedure setKeyEntry(para1: JLString; para2: JSKey; para3: Arr1jchar; para4: Arr1JSCCertificate); overload; virtual; final;  // throws java.security.KeyStoreException
    procedure setKeyEntry(para1: JLString; para2: JSKey; var para3: array of jchar; var para4: array of JSCCertificate); overload; virtual; final;  // throws java.security.KeyStoreException
    procedure setKeyEntry(para1: JLString; para2: Arr1jbyte; para3: Arr1JSCCertificate); overload; virtual; final;  // throws java.security.KeyStoreException
    procedure setKeyEntry(para1: JLString; var para2: array of jbyte; var para3: array of JSCCertificate); overload; virtual; final;  // throws java.security.KeyStoreException
    procedure setCertificateEntry(para1: JLString; para2: JSCCertificate); overload; virtual; final;  // throws java.security.KeyStoreException
    procedure deleteEntry(para1: JLString); overload; virtual; final;  // throws java.security.KeyStoreException
    function aliases(): JUEnumeration; overload; virtual; final;  // throws java.security.KeyStoreException
    function containsAlias(para1: JLString): jboolean; overload; virtual; final;  // throws java.security.KeyStoreException
    function size(): jint; overload; virtual; final;  // throws java.security.KeyStoreException
    function isKeyEntry(para1: JLString): jboolean; overload; virtual; final;  // throws java.security.KeyStoreException
    function isCertificateEntry(para1: JLString): jboolean; overload; virtual; final;  // throws java.security.KeyStoreException
    function getCertificateAlias(para1: JSCCertificate): JLString; overload; virtual; final;  // throws java.security.KeyStoreException
    procedure store(para1: JIOutputStream; para2: Arr1jchar); overload; virtual; final;  // throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure store(para1: JIOutputStream; var para2: array of jchar); overload; virtual; final;  // throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure store(para1: JSKeyStore.InnerLoadStoreParameter); overload; virtual; final;  // throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure load(para1: JIInputStream; para2: Arr1jchar); overload; virtual; final;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure load(para1: JIInputStream; var para2: array of jchar); overload; virtual; final;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure load(para1: JSKeyStore.InnerLoadStoreParameter); overload; virtual; final;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    function getEntry(para1: JLString; para2: JSKeyStore.InnerProtectionParameter): JSKeyStore.InnerEntry; overload; virtual; final;  // throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException, java.security.KeyStoreException
    procedure setEntry(para1: JLString; para2: JSKeyStore.InnerEntry; para3: JSKeyStore.InnerProtectionParameter); overload; virtual; final;  // throws java.security.KeyStoreException
    function entryInstanceOf(para1: JLString; para2: JLClass): jboolean; overload; virtual; final;  // throws java.security.KeyStoreException
  end;

  JSACPasswordCallback = class external 'javax.security.auth.callback' name 'PasswordCallback' (JLObject, JSACCallback, JISerializable)
  public
    constructor create(para1: JLString; para2: jboolean); overload;
    function getPrompt(): JLString; overload; virtual;
    function isEchoOn(): jboolean; overload; virtual;
    procedure setPassword(para1: Arr1jchar); overload; virtual;
    procedure setPassword(var para1: array of jchar); overload; virtual;
    function getPassword(): Arr1jchar; overload; virtual;
    procedure clearPassword(); overload; virtual;
  end;

  JxSCX509Certificate = class abstract external 'javax.security.cert' name 'X509Certificate' (JxSCCertificate)
  public
    constructor create(); overload;
    class function getInstance(para1: JIInputStream): JxSCX509Certificate; static; overload; final;  // throws javax.security.cert.CertificateException
    class function getInstance(para1: Arr1jbyte): JxSCX509Certificate; static; overload; final;  // throws javax.security.cert.CertificateException
    class function getInstance(var para1: array of jbyte): JxSCX509Certificate; static; overload; final;  // throws javax.security.cert.CertificateException
    procedure checkValidity(); overload; virtual; abstract;  // throws javax.security.cert.CertificateExpiredException, javax.security.cert.CertificateNotYetValidException
    procedure checkValidity(para1: JUDate); overload; virtual; abstract;  // throws javax.security.cert.CertificateExpiredException, javax.security.cert.CertificateNotYetValidException
    function getVersion(): jint; overload; virtual; abstract;
    function getSerialNumber(): JMBigInteger; overload; virtual; abstract;
    function getIssuerDN(): JSPrincipal; overload; virtual; abstract;
    function getSubjectDN(): JSPrincipal; overload; virtual; abstract;
    function getNotBefore(): JUDate; overload; virtual; abstract;
    function getNotAfter(): JUDate; overload; virtual; abstract;
    function getSigAlgName(): JLString; overload; virtual; abstract;
    function getSigAlgOID(): JLString; overload; virtual; abstract;
    function getSigAlgParams(): Arr1jbyte; overload; virtual; abstract;
  end;

  JSConnectionPoolDataSource = interface external 'javax.sql' name 'ConnectionPoolDataSource' (JSCommonDataSource)
    function getPooledConnection(): JSPooledConnection; overload;  // throws java.sql.SQLException
    function getPooledConnection(para1: JLString; para2: JLString): JSPooledConnection; overload;  // throws java.sql.SQLException
  end;

  JSDataSource = interface external 'javax.sql' name 'DataSource' (JSCommonDataSource, JSWrapper)
    function getConnection(): JSConnection; overload;  // throws java.sql.SQLException
    function getConnection(para1: JLString; para2: JLString): JSConnection; overload;  // throws java.sql.SQLException
  end;

  JXDDuration = class abstract external 'javax.xml.datatype' name 'Duration' (JLObject)
  public
    constructor create(); overload;
    function getXMLSchemaType(): JXNQName; overload; virtual;
    function getSign(): jint; overload; virtual; abstract;
    function getYears(): jint; overload; virtual;
    function getMonths(): jint; overload; virtual;
    function getDays(): jint; overload; virtual;
    function getHours(): jint; overload; virtual;
    function getMinutes(): jint; overload; virtual;
    function getSeconds(): jint; overload; virtual;
    function getTimeInMillis(para1: JUCalendar): jlong; overload; virtual;
    function getTimeInMillis(para1: JUDate): jlong; overload; virtual;
    function getField(para1: JXDDatatypeConstants.InnerField): JLNumber; overload; virtual; abstract;
    function isSet(para1: JXDDatatypeConstants.InnerField): jboolean; overload; virtual; abstract;
    function add(para1: JXDDuration): JXDDuration; overload; virtual; abstract;
    procedure addTo(para1: JUCalendar); overload; virtual; abstract;
    procedure addTo(para1: JUDate); overload; virtual;
    function subtract(para1: JXDDuration): JXDDuration; overload; virtual;
    function multiply(para1: jint): JXDDuration; overload; virtual;
    function multiply(para1: JMBigDecimal): JXDDuration; overload; virtual; abstract;
    function negate(): JXDDuration; overload; virtual; abstract;
    function normalizeWith(para1: JUCalendar): JXDDuration; overload; virtual; abstract;
    function compare(para1: JXDDuration): jint; overload; virtual; abstract;
    function isLongerThan(para1: JXDDuration): jboolean; overload; virtual;
    function isShorterThan(para1: JXDDuration): jboolean; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual; abstract;
    function toString(): JLString; overload; virtual;
  end;

  JXTDDOMResult = class external 'javax.xml.transform.dom' name 'DOMResult' (JLObject, JXTResult)
  public
    const
      FEATURE = 'http://javax.xml.transform.dom.DOMResult/feature';
  public
    constructor create(); overload;
    constructor create(para1: OWDNode); overload;
    constructor create(para1: OWDNode; para2: JLString); overload;
    constructor create(para1: OWDNode; para2: OWDNode); overload;
    constructor create(para1: OWDNode; para2: OWDNode; para3: JLString); overload;
    procedure setNode(para1: OWDNode); overload; virtual;
    function getNode(): OWDNode; overload; virtual;
    procedure setNextSibling(para1: OWDNode); overload; virtual;
    function getNextSibling(): OWDNode; overload; virtual;
    procedure setSystemId(para1: JLString); overload; virtual;
    function getSystemId(): JLString; overload; virtual;
  end;

  JXTSSAXResult = class external 'javax.xml.transform.sax' name 'SAXResult' (JLObject, JXTResult)
  public
    const
      FEATURE = 'http://javax.xml.transform.sax.SAXResult/feature';
  public
    constructor create(); overload;
    constructor create(para1: OXSContentHandler); overload;
    procedure setHandler(para1: OXSContentHandler); overload; virtual;
    function getHandler(): OXSContentHandler; overload; virtual;
    procedure setLexicalHandler(para1: OXSELexicalHandler); overload; virtual;
    function getLexicalHandler(): OXSELexicalHandler; overload; virtual;
    procedure setSystemId(para1: JLString); overload; virtual;
    function getSystemId(): JLString; overload; virtual;
  end;

  JXTSStreamResult = class external 'javax.xml.transform.stream' name 'StreamResult' (JLObject, JXTResult)
  public
    const
      FEATURE = 'http://javax.xml.transform.stream.StreamResult/feature';
  public
    constructor create(); overload;
    constructor create(para1: JIOutputStream); overload;
    constructor create(para1: JIWriter); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JIFile); overload;
    procedure setOutputStream(para1: JIOutputStream); overload; virtual;
    function getOutputStream(): JIOutputStream; overload; virtual;
    procedure setWriter(para1: JIWriter); overload; virtual;
    function getWriter(): JIWriter; overload; virtual;
    procedure setSystemId(para1: JLString); overload; virtual;
    procedure setSystemId(para1: JIFile); overload; virtual;
    function getSystemId(): JLString; overload; virtual;
  end;

  JXTDDOMSource = class external 'javax.xml.transform.dom' name 'DOMSource' (JLObject, JXTSource)
  public
    const
      FEATURE = 'http://javax.xml.transform.dom.DOMSource/feature';
  public
    constructor create(); overload;
    constructor create(para1: OWDNode); overload;
    constructor create(para1: OWDNode; para2: JLString); overload;
    procedure setNode(para1: OWDNode); overload; virtual;
    function getNode(): OWDNode; overload; virtual;
    procedure setSystemId(para1: JLString); overload; virtual;
    function getSystemId(): JLString; overload; virtual;
  end;

  JXTSSAXSource = class external 'javax.xml.transform.sax' name 'SAXSource' (JLObject, JXTSource)
  public
    const
      FEATURE = 'http://javax.xml.transform.sax.SAXSource/feature';
  public
    constructor create(); overload;
    constructor create(para1: OXSXMLReader; para2: OXSInputSource); overload;
    constructor create(para1: OXSInputSource); overload;
    procedure setXMLReader(para1: OXSXMLReader); overload; virtual;
    function getXMLReader(): OXSXMLReader; overload; virtual;
    procedure setInputSource(para1: OXSInputSource); overload; virtual;
    function getInputSource(): OXSInputSource; overload; virtual;
    procedure setSystemId(para1: JLString); overload; virtual;
    function getSystemId(): JLString; overload; virtual;
    class function sourceToInputSource(para1: JXTSource): OXSInputSource; static; overload;
  end;

  JXTSStreamSource = class external 'javax.xml.transform.stream' name 'StreamSource' (JLObject, JXTSource)
  public
    const
      FEATURE = 'http://javax.xml.transform.stream.StreamSource/feature';
  public
    constructor create(); overload;
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIInputStream; para2: JLString); overload;
    constructor create(para1: JIReader); overload;
    constructor create(para1: JIReader; para2: JLString); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JIFile); overload;
    procedure setInputStream(para1: JIInputStream); overload; virtual;
    function getInputStream(): JIInputStream; overload; virtual;
    procedure setReader(para1: JIReader); overload; virtual;
    function getReader(): JIReader; overload; virtual;
    procedure setPublicId(para1: JLString); overload; virtual;
    function getPublicId(): JLString; overload; virtual;
    procedure setSystemId(para1: JLString); overload; virtual;
    function getSystemId(): JLString; overload; virtual;
    procedure setSystemId(para1: JIFile); overload; virtual;
  end;

  JXTDDOMLocator = interface external 'javax.xml.transform.dom' name 'DOMLocator' (JXTSourceLocator)
    function getOriginatingNode(): OWDNode; overload;
  end;

  JXTSSAXTransformerFactory = class abstract external 'javax.xml.transform.sax' name 'SAXTransformerFactory' (JXTTransformerFactory)
  public
    const
      FEATURE = 'http://javax.xml.transform.sax.SAXTransformerFactory/feature';
      FEATURE_XMLFILTER = 'http://javax.xml.transform.sax.SAXTransformerFactory/feature/xmlfilter';
  strict protected
    constructor create(); overload;
  public
    function newTransformerHandler(para1: JXTSource): JXTSTransformerHandler; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function newTransformerHandler(para1: JXTTemplates): JXTSTransformerHandler; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function newTransformerHandler(): JXTSTransformerHandler; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function newTemplatesHandler(): JXTSTemplatesHandler; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function newXMLFilter(para1: JXTSource): OXSXMLFilter; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
    function newXMLFilter(para1: JXTTemplates): OXSXMLFilter; overload; virtual; abstract;  // throws javax.xml.transform.TransformerConfigurationException
  end;

  JFTestCase = class abstract external 'junit.framework' name 'TestCase' (JFAssert, JFTest)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    function countTestCases(): jint; overload; virtual;
  strict protected
    function createResult(): JFTestResult; overload; virtual;
  public
    function run(): JFTestResult; overload; virtual;
    procedure run(para1: JFTestResult); overload; virtual;
    procedure runBare(); overload; virtual;  // throws java.lang.Throwable
  strict protected
    procedure runTest(); overload; virtual;  // throws java.lang.Throwable
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    function toString(): JLString; overload; virtual;
    function getName(): JLString; overload; virtual;
    procedure setName(para1: JLString); overload; virtual;
  end;

  JFTestSuite = class external 'junit.framework' name 'TestSuite' (JLObject, JFTest)
  public
    constructor create(); overload;
    constructor create(para1: JLClass); overload;
    constructor create(para1: JLClass; para2: JLString); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: Arr1JLClass); overload;
    constructor create(const para1: array of JLClass); overload;
    constructor create(para1: Arr1JLClass; para2: JLString); overload;
    constructor create(const para1: array of JLClass; para2: JLString); overload;
    class function createTest(para1: JLClass; para2: JLString): JFTest; static; overload;
    class function getTestConstructor(para1: JLClass): JLRConstructor; static; overload;  // throws java.lang.NoSuchMethodException
    class function warning(para1: JLString): JFTest; static; overload;
    procedure addTest(para1: JFTest); overload; virtual;
    procedure addTestSuite(para1: JLClass); overload; virtual;
    function countTestCases(): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    procedure run(para1: JFTestResult); overload; virtual;
    procedure runTest(para1: JFTest; para2: JFTestResult); overload; virtual;
    procedure setName(para1: JLString); overload; virtual;
    function testAt(para1: jint): JFTest; overload; virtual;
    function testCount(): jint; overload; virtual;
    function tests(): JUEnumeration; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JRBaseTestRunner = class abstract external 'junit.runner' name 'BaseTestRunner' (JLObject, JFTestListener)
  public
    const
      SUITE_METHODNAME = 'suite';
  public
    constructor create(); overload;
    procedure startTest(para1: JFTest); overload; virtual;
  strict protected
    class procedure setPreferences(para1: JUProperties); static; overload;
    class function getPreferences(): JUProperties; static; overload;
  public
    class procedure savePreferences(); static; overload;  // throws java.io.IOException
    procedure setPreference(para1: JLString; para2: JLString); overload; virtual;
    procedure endTest(para1: JFTest); overload; virtual;
    procedure addError(para1: JFTest; para2: JLThrowable); overload; virtual;
    procedure addFailure(para1: JFTest; para2: JFAssertionFailedError); overload; virtual;
    procedure testStarted(para1: JLString); overload; virtual; abstract;
    procedure testEnded(para1: JLString); overload; virtual; abstract;
    procedure testFailed(para1: jint; para2: JFTest; para3: JLThrowable); overload; virtual; abstract;
    function getTest(para1: JLString): JFTest; overload; virtual;
    function elapsedTimeAsString(para1: jlong): JLString; overload; virtual;
  strict protected
    function processArguments(para1: Arr1JLString): JLString; overload; virtual;
    function processArguments(var para1: array of JLString): JLString; overload; virtual;
  public
    procedure setLoading(para1: jboolean); overload; virtual;
    function extractClassName(para1: JLString): JLString; overload; virtual;
    class function truncate(para1: JLString): JLString; static; overload;
  strict protected
    procedure runFailed(para1: JLString); overload; virtual; abstract;
  public
    function getLoader(): JRTestSuiteLoader; overload; virtual;
  strict protected
    function loadSuiteClass(para1: JLString): JLClass; overload; virtual;  // throws java.lang.ClassNotFoundException
    procedure clearStatus(); overload; virtual;
    function useReloadingTestSuiteLoader(): jboolean; overload; virtual;
  public
    class function getPreference(para1: JLString): JLString; static; overload;
    class function getPreference(para1: JLString; para2: jint): jint; static; overload;
    class function getFilteredTrace(para1: JLThrowable): JLString; static; overload;
    class function inVAJava(): jboolean; static; overload;
    class function getFilteredTrace(para1: JLString): JLString; static; overload;
  strict protected
    class function showStackRaw(): jboolean; static; overload;
  end;

  OAHIDefaultConnectionReuseStrategy = class external 'org.apache.http.impl' name 'DefaultConnectionReuseStrategy' (JLObject, OAHConnectionReuseStrategy)
  public
    constructor create(); overload;
    function keepAlive(para1: OAHHttpResponse; para2: OAHPHttpContext): jboolean; overload; virtual;
  strict protected
    function createTokenIterator(para1: OAHHeaderIterator): OAHTokenIterator; overload; virtual;
  end;

  OAHINoConnectionReuseStrategy = class external 'org.apache.http.impl' name 'NoConnectionReuseStrategy' (JLObject, OAHConnectionReuseStrategy)
  public
    constructor create(); overload;
    function keepAlive(para1: OAHHttpResponse; para2: OAHPHttpContext): jboolean; overload; virtual;
  end;

  OAHFormattedHeader = interface external 'org.apache.http' name 'FormattedHeader' (OAHHeader)
    function getBuffer(): OAHUCharArrayBuffer; overload;
    function getValuePos(): jint; overload;
  end;

  OAHMBasicHeader = class external 'org.apache.http.message' name 'BasicHeader' (JLObject, OAHHeader, JLCloneable)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getName(): JLString; overload; virtual;
    function getValue(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function getElements(): Arr1OAHHeaderElement; overload; virtual;  // throws org.apache.http.ParseException
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHMBasicHeaderElement = class external 'org.apache.http.message' name 'BasicHeaderElement' (JLObject, OAHHeaderElement, JLCloneable)
  public
    constructor create(para1: JLString; para2: JLString; para3: Arr1OAHNameValuePair); overload;
    constructor create(para1: JLString; para2: JLString; const para3: array of OAHNameValuePair); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getName(): JLString; overload; virtual;
    function getValue(): JLString; overload; virtual;
    function getParameters(): Arr1OAHNameValuePair; overload; virtual;
    function getParameterCount(): jint; overload; virtual;
    function getParameter(para1: jint): OAHNameValuePair; overload; virtual;
    function getParameterByName(para1: JLString): OAHNameValuePair; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHHttpClientConnection = interface external 'org.apache.http' name 'HttpClientConnection' (OAHHttpConnection)
    function isResponseAvailable(para1: jint): jboolean; overload;  // throws java.io.IOException
    procedure sendRequestHeader(para1: OAHHttpRequest); overload;  // throws org.apache.http.HttpException, java.io.IOException
    procedure sendRequestEntity(para1: OAHHttpEntityEnclosingRequest); overload;  // throws org.apache.http.HttpException, java.io.IOException
    function receiveResponseHeader(): OAHHttpResponse; overload;  // throws org.apache.http.HttpException, java.io.IOException
    procedure receiveResponseEntity(para1: OAHHttpResponse); overload;  // throws org.apache.http.HttpException, java.io.IOException
    procedure flush(); overload;  // throws java.io.IOException
  end;

  OAHHttpInetConnection = interface external 'org.apache.http' name 'HttpInetConnection' (OAHHttpConnection)
    function getLocalAddress(): JNInetAddress; overload;
    function getLocalPort(): jint; overload;
    function getRemoteAddress(): JNInetAddress; overload;
    function getRemotePort(): jint; overload;
  end;

  OAHHttpServerConnection = interface external 'org.apache.http' name 'HttpServerConnection' (OAHHttpConnection)
    function receiveRequestHeader(): OAHHttpRequest; overload;  // throws org.apache.http.HttpException, java.io.IOException
    procedure receiveRequestEntity(para1: OAHHttpEntityEnclosingRequest); overload;  // throws org.apache.http.HttpException, java.io.IOException
    procedure sendResponseHeader(para1: OAHHttpResponse); overload;  // throws org.apache.http.HttpException, java.io.IOException
    procedure sendResponseEntity(para1: OAHHttpResponse); overload;  // throws org.apache.http.HttpException, java.io.IOException
    procedure flush(); overload;  // throws java.io.IOException
  end;

  OAHIHttpConnectionMetricsImpl = class external 'org.apache.http.impl' name 'HttpConnectionMetricsImpl' (JLObject, OAHHttpConnectionMetrics)
  public
    const
      RECEIVED_BYTES_COUNT = 'http.received-bytes-count';
      REQUEST_COUNT = 'http.request-count';
      RESPONSE_COUNT = 'http.response-count';
      SENT_BYTES_COUNT = 'http.sent-bytes-count';
  public
    constructor create(para1: OAHIHttpTransportMetrics; para2: OAHIHttpTransportMetrics); overload;
    function getReceivedBytesCount(): jlong; overload; virtual;
    function getSentBytesCount(): jlong; overload; virtual;
    function getRequestCount(): jlong; overload; virtual;
    procedure incrementRequestCount(); overload; virtual;
    function getResponseCount(): jlong; overload; virtual;
    procedure incrementResponseCount(); overload; virtual;
    function getMetric(para1: JLString): JLObject; overload; virtual;
    procedure setMetric(para1: JLString; para2: JLObject); overload; virtual;
    procedure reset(); overload; virtual;
  end;

  OAHEAbstractHttpEntity = class abstract external 'org.apache.http.entity' name 'AbstractHttpEntity' (JLObject, OAHHttpEntity)
  strict protected
    var
      fchunked: jboolean; external name 'chunked';
      fcontentEncoding: OAHHeader; external name 'contentEncoding';
      fcontentType: OAHHeader; external name 'contentType';
  strict protected
    constructor create(); overload;
  public
    function getContentType(): OAHHeader; overload; virtual;
    function getContentEncoding(): OAHHeader; overload; virtual;
    function isChunked(): jboolean; overload; virtual;
    procedure setContentType(para1: OAHHeader); overload; virtual;
    procedure setContentType(para1: JLString); overload; virtual;
    procedure setContentEncoding(para1: OAHHeader); overload; virtual;
    procedure setContentEncoding(para1: JLString); overload; virtual;
    procedure setChunked(para1: jboolean); overload; virtual;
    procedure consumeContent(); overload; virtual;  // throws java.io.IOException, java.lang.UnsupportedOperationException
  end;

  OAHEHttpEntityWrapper = class external 'org.apache.http.entity' name 'HttpEntityWrapper' (JLObject, OAHHttpEntity)
  strict protected
    var
      fwrappedEntity: OAHHttpEntity; external name 'wrappedEntity';
  public
    constructor create(para1: OAHHttpEntity); overload;
    function isRepeatable(): jboolean; overload; virtual;
    function isChunked(): jboolean; overload; virtual;
    function getContentLength(): jlong; overload; virtual;
    function getContentType(): OAHHeader; overload; virtual;
    function getContentEncoding(): OAHHeader; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;  // throws java.io.IOException
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function isStreaming(): jboolean; overload; virtual;
    procedure consumeContent(); overload; virtual;  // throws java.io.IOException
  end;

  OAHHttpRequest = interface external 'org.apache.http' name 'HttpRequest' (OAHHttpMessage)
    function getRequestLine(): OAHRequestLine; overload;
  end;

  OAHHttpResponse = interface external 'org.apache.http' name 'HttpResponse' (OAHHttpMessage)
    function getStatusLine(): OAHStatusLine; overload;
    procedure setStatusLine(para1: OAHStatusLine); overload;
    procedure setStatusLine(para1: OAHProtocolVersion; para2: jint); overload;
    procedure setStatusLine(para1: OAHProtocolVersion; para2: jint; para3: JLString); overload;
    procedure setStatusCode(para1: jint); overload;  // throws java.lang.IllegalStateException
    procedure setReasonPhrase(para1: JLString); overload;  // throws java.lang.IllegalStateException
    function getEntity(): OAHHttpEntity; overload;
    procedure setEntity(para1: OAHHttpEntity); overload;
    function getLocale(): JULocale; overload;
    procedure setLocale(para1: JULocale); overload;
  end;

  OAHMAbstractHttpMessage = class abstract external 'org.apache.http.message' name 'AbstractHttpMessage' (JLObject, OAHHttpMessage)
  strict protected
    var
      fheadergroup: OAHMHeaderGroup; external name 'headergroup';
      fparams: OAHPHttpParams; external name 'params';
  strict protected
    constructor create(para1: OAHPHttpParams); overload;
    constructor create(); overload;
  public
    function containsHeader(para1: JLString): jboolean; overload; virtual;
    function getHeaders(para1: JLString): Arr1OAHHeader; overload; virtual;
    function getFirstHeader(para1: JLString): OAHHeader; overload; virtual;
    function getLastHeader(para1: JLString): OAHHeader; overload; virtual;
    function getAllHeaders(): Arr1OAHHeader; overload; virtual;
    procedure addHeader(para1: OAHHeader); overload; virtual;
    procedure addHeader(para1: JLString; para2: JLString); overload; virtual;
    procedure setHeader(para1: OAHHeader); overload; virtual;
    procedure setHeader(para1: JLString; para2: JLString); overload; virtual;
    procedure setHeaders(para1: Arr1OAHHeader); overload; virtual;
    procedure setHeaders(var para1: array of OAHHeader); overload; virtual;
    procedure removeHeader(para1: OAHHeader); overload; virtual;
    procedure removeHeaders(para1: JLString); overload; virtual;
    function headerIterator(): OAHHeaderIterator; overload; virtual;
    function headerIterator(para1: JLString): OAHHeaderIterator; overload; virtual;
    function getParams(): OAHPHttpParams; overload; virtual;
    procedure setParams(para1: OAHPHttpParams); overload; virtual;
  end;

  OAHIDefaultHttpRequestFactory = class external 'org.apache.http.impl' name 'DefaultHttpRequestFactory' (JLObject, OAHHttpRequestFactory)
  public
    constructor create(); overload;
    function newHttpRequest(para1: OAHRequestLine): OAHHttpRequest; overload; virtual;  // throws org.apache.http.MethodNotSupportedException
    function newHttpRequest(para1: JLString; para2: JLString): OAHHttpRequest; overload; virtual;  // throws org.apache.http.MethodNotSupportedException
  end;

  OAHCPRequestAddCookies = class external 'org.apache.http.client.protocol' name 'RequestAddCookies' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHCPRequestDefaultHeaders = class external 'org.apache.http.client.protocol' name 'RequestDefaultHeaders' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHCPRequestProxyAuthentication = class external 'org.apache.http.client.protocol' name 'RequestProxyAuthentication' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHCPRequestTargetAuthentication = class external 'org.apache.http.client.protocol' name 'RequestTargetAuthentication' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPRequestConnControl = class external 'org.apache.http.protocol' name 'RequestConnControl' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPRequestContent = class external 'org.apache.http.protocol' name 'RequestContent' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPRequestDate = class external 'org.apache.http.protocol' name 'RequestDate' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPRequestExpectContinue = class external 'org.apache.http.protocol' name 'RequestExpectContinue' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPRequestTargetHost = class external 'org.apache.http.protocol' name 'RequestTargetHost' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPRequestUserAgent = class external 'org.apache.http.protocol' name 'RequestUserAgent' (JLObject, OAHHttpRequestInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHIDefaultHttpResponseFactory = class external 'org.apache.http.impl' name 'DefaultHttpResponseFactory' (JLObject, OAHHttpResponseFactory)
  strict protected
    final var
      freasonCatalog: OAHReasonPhraseCatalog; external name 'reasonCatalog';
  public
    constructor create(para1: OAHReasonPhraseCatalog); overload;
    constructor create(); overload;
    function newHttpResponse(para1: OAHProtocolVersion; para2: jint; para3: OAHPHttpContext): OAHHttpResponse; overload; virtual;
    function newHttpResponse(para1: OAHStatusLine; para2: OAHPHttpContext): OAHHttpResponse; overload; virtual;
  strict protected
    function determineLocale(para1: OAHPHttpContext): JULocale; overload; virtual;
  end;

  OAHCPResponseProcessCookies = class external 'org.apache.http.client.protocol' name 'ResponseProcessCookies' (JLObject, OAHHttpResponseInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpResponse; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPHttpProcessor = interface external 'org.apache.http.protocol' name 'HttpProcessor' (OAHHttpRequestInterceptor, OAHHttpResponseInterceptor)
  end;

  OAHPResponseConnControl = class external 'org.apache.http.protocol' name 'ResponseConnControl' (JLObject, OAHHttpResponseInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpResponse; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPResponseContent = class external 'org.apache.http.protocol' name 'ResponseContent' (JLObject, OAHHttpResponseInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpResponse; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPResponseDate = class external 'org.apache.http.protocol' name 'ResponseDate' (JLObject, OAHHttpResponseInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpResponse; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHPResponseServer = class external 'org.apache.http.protocol' name 'ResponseServer' (JLObject, OAHHttpResponseInterceptor)
  public
    constructor create(); overload;
    procedure process(para1: OAHHttpResponse; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHMBasicNameValuePair = class external 'org.apache.http.message' name 'BasicNameValuePair' (JLObject, OAHNameValuePair, JLCloneable)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getName(): JLString; overload; virtual;
    function getValue(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHIEnglishReasonPhraseCatalog = class external 'org.apache.http.impl' name 'EnglishReasonPhraseCatalog' (JLObject, OAHReasonPhraseCatalog)
  public
    final class var
      fINSTANCE: OAHIEnglishReasonPhraseCatalog; external name 'INSTANCE';
  strict protected
    constructor create(); overload;
  public
    function getReason(para1: jint; para2: JULocale): JLString; overload; virtual;
  end;

  OAHMBasicRequestLine = class external 'org.apache.http.message' name 'BasicRequestLine' (JLObject, OAHRequestLine, JLCloneable)
  public
    constructor create(para1: JLString; para2: JLString; para3: OAHProtocolVersion); overload;
    function getMethod(): JLString; overload; virtual;
    function getProtocolVersion(): OAHProtocolVersion; overload; virtual;
    function getUri(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHMBasicStatusLine = class external 'org.apache.http.message' name 'BasicStatusLine' (JLObject, OAHStatusLine, JLCloneable)
  public
    constructor create(para1: OAHProtocolVersion; para2: jint; para3: JLString); overload;
    function getStatusCode(): jint; overload; virtual;
    function getProtocolVersion(): OAHProtocolVersion; overload; virtual;
    function getReasonPhrase(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHIAAuthSchemeBase = class abstract external 'org.apache.http.impl.auth' name 'AuthSchemeBase' (JLObject, OAHAAuthScheme)
  public
    constructor create(); overload;
    procedure processChallenge(para1: OAHHeader); overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
  strict protected
    procedure parseChallenge(para1: OAHUCharArrayBuffer; para2: jint; para3: jint); overload; virtual; abstract;  // throws org.apache.http.auth.MalformedChallengeException
  public
    function isProxy(): jboolean; overload; virtual;
  end;

  OAHIABasicSchemeFactory = class external 'org.apache.http.impl.auth' name 'BasicSchemeFactory' (JLObject, OAHAAuthSchemeFactory)
  public
    constructor create(); overload;
    function newInstance(para1: OAHPHttpParams): OAHAAuthScheme; overload; virtual;
  end;

  OAHIADigestSchemeFactory = class external 'org.apache.http.impl.auth' name 'DigestSchemeFactory' (JLObject, OAHAAuthSchemeFactory)
  public
    constructor create(); overload;
    function newInstance(para1: OAHPHttpParams): OAHAAuthScheme; overload; virtual;
  end;

  OAHANTCredentials = class external 'org.apache.http.auth' name 'NTCredentials' (JLObject, OAHACredentials)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload;
    function getUserPrincipal(): JSPrincipal; overload; virtual;
    function getUserName(): JLString; overload; virtual;
    function getPassword(): JLString; overload; virtual;
    function getDomain(): JLString; overload; virtual;
    function getWorkstation(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OAHAUsernamePasswordCredentials = class external 'org.apache.http.auth' name 'UsernamePasswordCredentials' (JLObject, OAHACredentials)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getUserPrincipal(): JSPrincipal; overload; virtual;
    function getUserName(): JLString; overload; virtual;
    function getPassword(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  OAHICAbstractAuthenticationHandler = class abstract external 'org.apache.http.impl.client' name 'AbstractAuthenticationHandler' (JLObject, OAHCAuthenticationHandler)
  public
    constructor create(); overload;
  strict protected
    function parseChallenges(para1: Arr1OAHHeader): JUMap; overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
    function parseChallenges(var para1: array of OAHHeader): JUMap; overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
    function getAuthPreferences(): JUList; overload; virtual;
  public
    function selectScheme(para1: JUMap; para2: OAHHttpResponse; para3: OAHPHttpContext): OAHAAuthScheme; overload; virtual;  // throws org.apache.http.auth.AuthenticationException
  end;

  OAHICBasicCookieStore = class external 'org.apache.http.impl.client' name 'BasicCookieStore' (JLObject, OAHCCookieStore)
  public
    constructor create(); overload;
    procedure addCookie(para1: OAHCCookie); overload; virtual;
    procedure addCookies(para1: Arr1OAHCCookie); overload; virtual;
    procedure addCookies(var para1: array of OAHCCookie); overload; virtual;
    function getCookies(): JUList; overload; virtual;
    function clearExpired(para1: JUDate): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure clear(); overload; virtual;
  end;

  OAHICBasicCredentialsProvider = class external 'org.apache.http.impl.client' name 'BasicCredentialsProvider' (JLObject, OAHCCredentialsProvider)
  public
    constructor create(); overload;
    procedure setCredentials(para1: OAHAAuthScope; para2: OAHACredentials); overload; virtual;
    function getCredentials(para1: OAHAAuthScope): OAHACredentials; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure clear(); overload; virtual;
  end;

  ANHAndroidHttpClient = class sealed external 'android.net.http' name 'AndroidHttpClient' (JLObject, OAHCHttpClient)
  public
    class var
      fDEFAULT_SYNC_MIN_GZIP_BYTES: jlong; external name 'DEFAULT_SYNC_MIN_GZIP_BYTES';
  public
    class function newInstance(para1: JLString; para2: ACContext): ANHAndroidHttpClient; static; overload;
    class function newInstance(para1: JLString): ANHAndroidHttpClient; static; overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    class procedure modifyRequestToAcceptGzipResponse(para1: OAHHttpRequest); static; overload;
    class function getUngzippedContent(para1: OAHHttpEntity): JIInputStream; static; overload;  // throws java.io.IOException
    procedure close(); overload; virtual;
    function getParams(): OAHPHttpParams; overload; virtual;
    function getConnectionManager(): OAHCClientConnectionManager; overload; virtual;
    function execute(para1: OAHCMHttpUriRequest): OAHHttpResponse; overload; virtual;  // throws java.io.IOException
    function execute(para1: OAHCMHttpUriRequest; para2: OAHPHttpContext): OAHHttpResponse; overload; virtual;  // throws java.io.IOException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest): OAHHttpResponse; overload; virtual;  // throws java.io.IOException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHHttpResponse; overload; virtual;  // throws java.io.IOException
    function execute(para1: OAHCMHttpUriRequest; para2: OAHCResponseHandler): JLObject; overload; virtual;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHCMHttpUriRequest; para2: OAHCResponseHandler; para3: OAHPHttpContext): JLObject; overload; virtual;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHCResponseHandler): JLObject; overload; virtual;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHCResponseHandler; para4: OAHPHttpContext): JLObject; overload; virtual;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    class function getCompressedEntity(para1: Arr1jbyte; para2: ACContentResolver): OAHEAbstractHttpEntity; static; overload;  // throws java.io.IOException
    class function getCompressedEntity(var para1: array of jbyte; para2: ACContentResolver): OAHEAbstractHttpEntity; static; overload;  // throws java.io.IOException
    class function getMinGzipSize(para1: ACContentResolver): jlong; static; overload;
    procedure enableCurlLogging(para1: JLString; para2: jint); overload; virtual;
    procedure disableCurlLogging(); overload; virtual;
    class function parseDate(para1: JLString): jlong; static; overload;
  end;

  OAHICAbstractHttpClient = class abstract external 'org.apache.http.impl.client' name 'AbstractHttpClient' (JLObject, OAHCHttpClient)
  strict protected
    constructor create(para1: OAHCClientConnectionManager; para2: OAHPHttpParams); overload;
    function createHttpParams(): OAHPHttpParams; overload; virtual; abstract;
    function createHttpContext(): OAHPHttpContext; overload; virtual; abstract;
    function createRequestExecutor(): OAHPHttpRequestExecutor; overload; virtual; abstract;
    function createClientConnectionManager(): OAHCClientConnectionManager; overload; virtual; abstract;
    function createAuthSchemeRegistry(): OAHAAuthSchemeRegistry; overload; virtual; abstract;
    function createCookieSpecRegistry(): OAHCCookieSpecRegistry; overload; virtual; abstract;
    function createConnectionReuseStrategy(): OAHConnectionReuseStrategy; overload; virtual; abstract;
    function createConnectionKeepAliveStrategy(): OAHCConnectionKeepAliveStrategy; overload; virtual; abstract;
    function createHttpProcessor(): OAHPBasicHttpProcessor; overload; virtual; abstract;
    function createHttpRequestRetryHandler(): OAHCHttpRequestRetryHandler; overload; virtual; abstract;
    function createRedirectHandler(): OAHCRedirectHandler; overload; virtual; abstract;
    function createTargetAuthenticationHandler(): OAHCAuthenticationHandler; overload; virtual; abstract;
    function createProxyAuthenticationHandler(): OAHCAuthenticationHandler; overload; virtual; abstract;
    function createCookieStore(): OAHCCookieStore; overload; virtual; abstract;
    function createCredentialsProvider(): OAHCCredentialsProvider; overload; virtual; abstract;
    function createHttpRoutePlanner(): OAHCRHttpRoutePlanner; overload; virtual; abstract;
    function createUserTokenHandler(): OAHCUserTokenHandler; overload; virtual; abstract;
  public
    function getParams(): OAHPHttpParams; overload; virtual; final;
    procedure setParams(para1: OAHPHttpParams); overload; virtual;
    function getConnectionManager(): OAHCClientConnectionManager; overload; virtual; final;
    function getRequestExecutor(): OAHPHttpRequestExecutor; overload; virtual; final;
    function getAuthSchemes(): OAHAAuthSchemeRegistry; overload; virtual; final;
    procedure setAuthSchemes(para1: OAHAAuthSchemeRegistry); overload; virtual;
    function getCookieSpecs(): OAHCCookieSpecRegistry; overload; virtual; final;
    procedure setCookieSpecs(para1: OAHCCookieSpecRegistry); overload; virtual;
    function getConnectionReuseStrategy(): OAHConnectionReuseStrategy; overload; virtual; final;
    procedure setReuseStrategy(para1: OAHConnectionReuseStrategy); overload; virtual;
    function getConnectionKeepAliveStrategy(): OAHCConnectionKeepAliveStrategy; overload; virtual; final;
    procedure setKeepAliveStrategy(para1: OAHCConnectionKeepAliveStrategy); overload; virtual;
    function getHttpRequestRetryHandler(): OAHCHttpRequestRetryHandler; overload; virtual; final;
    procedure setHttpRequestRetryHandler(para1: OAHCHttpRequestRetryHandler); overload; virtual;
    function getRedirectHandler(): OAHCRedirectHandler; overload; virtual; final;
    procedure setRedirectHandler(para1: OAHCRedirectHandler); overload; virtual;
    function getTargetAuthenticationHandler(): OAHCAuthenticationHandler; overload; virtual; final;
    procedure setTargetAuthenticationHandler(para1: OAHCAuthenticationHandler); overload; virtual;
    function getProxyAuthenticationHandler(): OAHCAuthenticationHandler; overload; virtual; final;
    procedure setProxyAuthenticationHandler(para1: OAHCAuthenticationHandler); overload; virtual;
    function getCookieStore(): OAHCCookieStore; overload; virtual; final;
    procedure setCookieStore(para1: OAHCCookieStore); overload; virtual;
    function getCredentialsProvider(): OAHCCredentialsProvider; overload; virtual; final;
    procedure setCredentialsProvider(para1: OAHCCredentialsProvider); overload; virtual;
    function getRoutePlanner(): OAHCRHttpRoutePlanner; overload; virtual; final;
    procedure setRoutePlanner(para1: OAHCRHttpRoutePlanner); overload; virtual;
    function getUserTokenHandler(): OAHCUserTokenHandler; overload; virtual; final;
    procedure setUserTokenHandler(para1: OAHCUserTokenHandler); overload; virtual;
  strict protected
    function getHttpProcessor(): OAHPBasicHttpProcessor; overload; virtual; final;
  public
    procedure addResponseInterceptor(para1: OAHHttpResponseInterceptor); overload; virtual;
    procedure addResponseInterceptor(para1: OAHHttpResponseInterceptor; para2: jint); overload; virtual;
    function getResponseInterceptor(para1: jint): OAHHttpResponseInterceptor; overload; virtual;
    function getResponseInterceptorCount(): jint; overload; virtual;
    procedure clearResponseInterceptors(); overload; virtual;
    procedure removeResponseInterceptorByClass(para1: JLClass); overload; virtual;
    procedure addRequestInterceptor(para1: OAHHttpRequestInterceptor); overload; virtual;
    procedure addRequestInterceptor(para1: OAHHttpRequestInterceptor; para2: jint); overload; virtual;
    function getRequestInterceptor(para1: jint): OAHHttpRequestInterceptor; overload; virtual;
    function getRequestInterceptorCount(): jint; overload; virtual;
    procedure clearRequestInterceptors(); overload; virtual;
    procedure removeRequestInterceptorByClass(para1: JLClass); overload; virtual;
    function execute(para1: OAHCMHttpUriRequest): OAHHttpResponse; overload; virtual; final;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHCMHttpUriRequest; para2: OAHPHttpContext): OAHHttpResponse; overload; virtual; final;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest): OAHHttpResponse; overload; virtual; final;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHHttpResponse; overload; virtual; final;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
  strict protected
    function createClientRequestDirector(para1: OAHPHttpRequestExecutor; para2: OAHCClientConnectionManager; para3: OAHConnectionReuseStrategy; para4: OAHCConnectionKeepAliveStrategy; para5: OAHCRHttpRoutePlanner; para6: OAHPHttpProcessor; para7: OAHCHttpRequestRetryHandler; para8: OAHCRedirectHandler; para9: OAHCAuthenticationHandler; para10: OAHCAuthenticationHandler; para11: OAHCUserTokenHandler; para12: OAHPHttpParams): OAHCRequestDirector; overload; virtual;
    function determineParams(para1: OAHHttpRequest): OAHPHttpParams; overload; virtual;
  public
    function execute(para1: OAHCMHttpUriRequest; para2: OAHCResponseHandler): JLObject; overload; virtual;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHCMHttpUriRequest; para2: OAHCResponseHandler; para3: OAHPHttpContext): JLObject; overload; virtual;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHCResponseHandler): JLObject; overload; virtual;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHCResponseHandler; para4: OAHPHttpContext): JLObject; overload; virtual;  // throws java.io.IOException, org.apache.http.client.ClientProtocolException
  end;

  OAHICDefaultHttpRequestRetryHandler = class external 'org.apache.http.impl.client' name 'DefaultHttpRequestRetryHandler' (JLObject, OAHCHttpRequestRetryHandler)
  public
    constructor create(para1: jint; para2: jboolean); overload;
    constructor create(); overload;
    function retryRequest(para1: JIIOException; para2: jint; para3: OAHPHttpContext): jboolean; overload; virtual;
    function isRequestSentRetryEnabled(): jboolean; overload; virtual;
    function getRetryCount(): jint; overload; virtual;
  end;

  OAHICDefaultRedirectHandler = class external 'org.apache.http.impl.client' name 'DefaultRedirectHandler' (JLObject, OAHCRedirectHandler)
  public
    constructor create(); overload;
    function isRedirectRequested(para1: OAHHttpResponse; para2: OAHPHttpContext): jboolean; overload; virtual;
    function getLocationURI(para1: OAHHttpResponse; para2: OAHPHttpContext): JNURI; overload; virtual;  // throws org.apache.http.ProtocolException
  end;

  OAHICDefaultRequestDirector = class external 'org.apache.http.impl.client' name 'DefaultRequestDirector' (JLObject, OAHCRequestDirector)
  strict protected
    final var
      fconnManager: OAHCClientConnectionManager; external name 'connManager';
      fhttpProcessor: OAHPHttpProcessor; external name 'httpProcessor';
      fkeepAliveStrategy: OAHCConnectionKeepAliveStrategy; external name 'keepAliveStrategy';
  strict protected
    var
      fmanagedConn: OAHCManagedClientConnection; external name 'managedConn';
  strict protected
    final var
      fparams: OAHPHttpParams; external name 'params';
      fredirectHandler: OAHCRedirectHandler; external name 'redirectHandler';
      frequestExec: OAHPHttpRequestExecutor; external name 'requestExec';
      fretryHandler: OAHCHttpRequestRetryHandler; external name 'retryHandler';
      freuseStrategy: OAHConnectionReuseStrategy; external name 'reuseStrategy';
      froutePlanner: OAHCRHttpRoutePlanner; external name 'routePlanner';
  public
    constructor create(para1: OAHPHttpRequestExecutor; para2: OAHCClientConnectionManager; para3: OAHConnectionReuseStrategy; para4: OAHCConnectionKeepAliveStrategy; para5: OAHCRHttpRoutePlanner; para6: OAHPHttpProcessor; para7: OAHCHttpRequestRetryHandler; para8: OAHCRedirectHandler; para9: OAHCAuthenticationHandler; para10: OAHCAuthenticationHandler; para11: OAHCUserTokenHandler; para12: OAHPHttpParams); overload;
  strict protected
    procedure rewriteRequestURI(para1: OAHICRequestWrapper; para2: OAHCRHttpRoute); overload; virtual;  // throws org.apache.http.ProtocolException
  public
    function execute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHHttpResponse; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  strict protected
    procedure releaseConnection(); overload; virtual;
    function determineRoute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHCRHttpRoute; overload; virtual;  // throws org.apache.http.HttpException
    procedure establishRoute(para1: OAHCRHttpRoute; para2: OAHPHttpContext); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    function createTunnelToTarget(para1: OAHCRHttpRoute; para2: OAHPHttpContext): jboolean; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    function createTunnelToProxy(para1: OAHCRHttpRoute; para2: jint; para3: OAHPHttpContext): jboolean; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    function createConnectRequest(para1: OAHCRHttpRoute; para2: OAHPHttpContext): OAHHttpRequest; overload; virtual;
    function handleResponse(para1: OAHICRoutedRequest; para2: OAHHttpResponse; para3: OAHPHttpContext): OAHICRoutedRequest; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHICBasicResponseHandler = class external 'org.apache.http.impl.client' name 'BasicResponseHandler' (JLObject, OAHCResponseHandler)
  public
    constructor create(); overload;
    function handleResponse(para1: OAHHttpResponse): JLString; overload; virtual;  // throws org.apache.http.client.HttpResponseException, java.io.IOException
    function handleResponse(para1: OAHHttpResponse): JLObject; overload; virtual;  // throws org.apache.http.client.ClientProtocolException, java.io.IOException
  end;

  OAHICDefaultUserTokenHandler = class external 'org.apache.http.impl.client' name 'DefaultUserTokenHandler' (JLObject, OAHCUserTokenHandler)
  public
    constructor create(); overload;
    function getUserToken(para1: OAHPHttpContext): JLObject; overload; virtual;
  end;

  OAHCPClientContextConfigurer = class external 'org.apache.http.client.protocol' name 'ClientContextConfigurer' (JLObject, OAHCPClientContext)
  public
    constructor create(para1: OAHPHttpContext); overload;
    procedure setCookieSpecRegistry(para1: OAHCCookieSpecRegistry); overload; virtual;
    procedure setAuthSchemeRegistry(para1: OAHAAuthSchemeRegistry); overload; virtual;
    procedure setCookieStore(para1: OAHCCookieStore); overload; virtual;
    procedure setCredentialsProvider(para1: OAHCCredentialsProvider); overload; virtual;
    procedure setAuthSchemePref(para1: JUList); overload; virtual;
  end;

  OAHICSingleClientConnManager = class external 'org.apache.http.impl.conn' name 'SingleClientConnManager' (JLObject, OAHCClientConnectionManager)
  public
    type
      InnerConnAdapter = class;
      Arr1InnerConnAdapter = array of InnerConnAdapter;
      Arr2InnerConnAdapter = array of Arr1InnerConnAdapter;
      Arr3InnerConnAdapter = array of Arr2InnerConnAdapter;
      InnerPoolEntry = class;
      Arr1InnerPoolEntry = array of InnerPoolEntry;
      Arr2InnerPoolEntry = array of Arr1InnerPoolEntry;
      Arr3InnerPoolEntry = array of Arr2InnerPoolEntry;
      InnerConnAdapter = class external 'org.apache.http.impl.conn' name 'ConnAdapter' 
      end;

      InnerPoolEntry = class external 'org.apache.http.impl.conn' name 'PoolEntry' 
      end;

  public
    const
      MISUSE_MESSAGE = 'Invalid use of SingleClientConnManager: connection still allocated.'#$000a'Make sure to release the connection before allocating another one.';
  strict protected
    var
      falwaysShutDown: jboolean; external name 'alwaysShutDown';
      fconnOperator: OAHCClientConnectionOperator; external name 'connOperator';
      fconnectionExpiresTime: jlong; external name 'connectionExpiresTime';
      fisShutDown: jboolean; external name 'isShutDown';
      flastReleaseTime: jlong; external name 'lastReleaseTime';
      fmanagedConn: OAHICSingleClientConnManager.InnerConnAdapter; external name 'managedConn';
      fschemeRegistry: OAHCSSchemeRegistry; external name 'schemeRegistry';
      funiquePoolEntry: OAHICSingleClientConnManager.InnerPoolEntry; external name 'uniquePoolEntry';
  public
    constructor create(para1: OAHPHttpParams; para2: OAHCSSchemeRegistry); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function getSchemeRegistry(): OAHCSSchemeRegistry; overload; virtual;
  strict protected
    function createConnectionOperator(para1: OAHCSSchemeRegistry): OAHCClientConnectionOperator; overload; virtual;
    procedure assertStillUp(); overload; virtual; final;  // throws java.lang.IllegalStateException
  public
    function requestConnection(para1: OAHCRHttpRoute; para2: JLObject): OAHCClientConnectionRequest; overload; virtual; final;
    function getConnection(para1: OAHCRHttpRoute; para2: JLObject): OAHCManagedClientConnection; overload; virtual;
    procedure releaseConnection(para1: OAHCManagedClientConnection; para2: jlong; para3: JUCTimeUnit); overload; virtual;
    procedure closeExpiredConnections(); overload; virtual;
    procedure closeIdleConnections(para1: jlong; para2: JUCTimeUnit); overload; virtual;
    procedure shutdown(); overload; virtual;
  strict protected
    procedure revokeConnection(); overload; virtual;
  end;

  OAHICTThreadSafeClientConnManager = class external 'org.apache.http.impl.conn.tsccm' name 'ThreadSafeClientConnManager' (JLObject, OAHCClientConnectionManager)
  strict protected
    var
      fconnOperator: OAHCClientConnectionOperator; external name 'connOperator';
  strict protected
    final var
      fconnectionPool: OAHICTAbstractConnPool; external name 'connectionPool';
  strict protected
    var
      fschemeRegistry: OAHCSSchemeRegistry; external name 'schemeRegistry';
  public
    constructor create(para1: OAHPHttpParams; para2: OAHCSSchemeRegistry); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
    function createConnectionPool(para1: OAHPHttpParams): OAHICTAbstractConnPool; overload; virtual;
    function createConnectionOperator(para1: OAHCSSchemeRegistry): OAHCClientConnectionOperator; overload; virtual;
  public
    function getSchemeRegistry(): OAHCSSchemeRegistry; overload; virtual;
    function requestConnection(para1: OAHCRHttpRoute; para2: JLObject): OAHCClientConnectionRequest; overload; virtual;
    procedure releaseConnection(para1: OAHCManagedClientConnection; para2: jlong; para3: JUCTimeUnit); overload; virtual;
    procedure shutdown(); overload; virtual;
    function getConnectionsInPool(para1: OAHCRHttpRoute): jint; overload; virtual;
    function getConnectionsInPool(): jint; overload; virtual;
    procedure closeIdleConnections(para1: jlong; para2: JUCTimeUnit); overload; virtual;
    procedure closeExpiredConnections(); overload; virtual;
  end;

  OAHICDefaultClientConnectionOperator = class external 'org.apache.http.impl.conn' name 'DefaultClientConnectionOperator' (JLObject, OAHCClientConnectionOperator)
  strict protected
    var
      fschemeRegistry: OAHCSSchemeRegistry; external name 'schemeRegistry';
  public
    constructor create(para1: OAHCSSchemeRegistry); overload;
    function createConnection(): OAHCOperatedClientConnection; overload; virtual;
    procedure openConnection(para1: OAHCOperatedClientConnection; para2: OAHHttpHost; para3: JNInetAddress; para4: OAHPHttpContext; para5: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure updateSecureConnection(para1: OAHCOperatedClientConnection; para2: OAHHttpHost; para3: OAHPHttpContext; para4: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure prepareSocket(para1: JNSocket; para2: OAHPHttpContext; para3: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
  end;

  OAHICDefaultConnectionKeepAliveStrategy = class external 'org.apache.http.impl.client' name 'DefaultConnectionKeepAliveStrategy' (JLObject, OAHCConnectionKeepAliveStrategy)
  public
    constructor create(); overload;
    function getKeepAliveDuration(para1: OAHHttpResponse; para2: OAHPHttpContext): jlong; overload; virtual;
  end;

  OAHCBasicEofSensorWatcher = class external 'org.apache.http.conn' name 'BasicEofSensorWatcher' (JLObject, OAHCEofSensorWatcher)
  strict protected
    var
      fattemptReuse: jboolean; external name 'attemptReuse';
      fmanagedConn: OAHCManagedClientConnection; external name 'managedConn';
  public
    constructor create(para1: OAHCManagedClientConnection; para2: jboolean); overload;
    function eofDetected(para1: JIInputStream): jboolean; overload; virtual;  // throws java.io.IOException
    function streamClosed(para1: JIInputStream): jboolean; overload; virtual;  // throws java.io.IOException
    function streamAbort(para1: JIInputStream): jboolean; overload; virtual;  // throws java.io.IOException
  end;

  OAHCPConnManagerParams = class sealed external 'org.apache.http.conn.params' name 'ConnManagerParams' (JLObject, OAHCPConnManagerPNames)
  public
    const
      DEFAULT_MAX_TOTAL_CONNECTIONS = 20;
  public
    constructor create(); overload;
    class function getTimeout(para1: OAHPHttpParams): jlong; static; overload;
    class procedure setTimeout(para1: OAHPHttpParams; para2: jlong); static; overload;
    class procedure setMaxConnectionsPerRoute(para1: OAHPHttpParams; para2: OAHCPConnPerRoute); static; overload;
    class function getMaxConnectionsPerRoute(para1: OAHPHttpParams): OAHCPConnPerRoute; static; overload;
    class procedure setMaxTotalConnections(para1: OAHPHttpParams; para2: jint); static; overload;
    class function getMaxTotalConnections(para1: OAHPHttpParams): jint; static; overload;
  end;

  OAHCPConnPerRouteBean = class sealed external 'org.apache.http.conn.params' name 'ConnPerRouteBean' (JLObject, OAHCPConnPerRoute)
  public
    const
      DEFAULT_MAX_CONNECTIONS_PER_ROUTE = 2;
  public
    constructor create(para1: jint); overload;
    constructor create(); overload;
    function getDefaultMax(): jint; overload; virtual;
    procedure setDefaultMaxPerRoute(para1: jint); overload; virtual;
    procedure setMaxForRoute(para1: OAHCRHttpRoute; para2: jint); overload; virtual;
    function getMaxForRoute(para1: OAHCRHttpRoute): jint; overload; virtual;
    procedure setMaxForRoutes(para1: JUMap); overload; virtual;
  end;

  OAHCPConnRouteParams = class external 'org.apache.http.conn.params' name 'ConnRouteParams' (JLObject, OAHCPConnRoutePNames)
  public
    final class var
      fNO_HOST: OAHHttpHost; external name 'NO_HOST';
      fNO_ROUTE: OAHCRHttpRoute; external name 'NO_ROUTE';
  public
    class function getDefaultProxy(para1: OAHPHttpParams): OAHHttpHost; static; overload;
    class procedure setDefaultProxy(para1: OAHPHttpParams; para2: OAHHttpHost); static; overload;
    class function getForcedRoute(para1: OAHPHttpParams): OAHCRHttpRoute; static; overload;
    class procedure setForcedRoute(para1: OAHPHttpParams; para2: OAHCRHttpRoute); static; overload;
    class function getLocalAddress(para1: OAHPHttpParams): JNInetAddress; static; overload;
    class procedure setLocalAddress(para1: OAHPHttpParams; para2: JNInetAddress); static; overload;
  end;

  OAHCRBasicRouteDirector = class external 'org.apache.http.conn.routing' name 'BasicRouteDirector' (JLObject, OAHCRHttpRouteDirector)
  public
    constructor create(); overload;
    function nextStep(para1: OAHCRRouteInfo; para2: OAHCRRouteInfo): jint; overload; virtual;
  strict protected
    function firstStep(para1: OAHCRRouteInfo): jint; overload; virtual;
    function directStep(para1: OAHCRRouteInfo; para2: OAHCRRouteInfo): jint; overload; virtual;
    function proxiedStep(para1: OAHCRRouteInfo; para2: OAHCRRouteInfo): jint; overload; virtual;
  end;

  OAHICDefaultHttpRoutePlanner = class external 'org.apache.http.impl.conn' name 'DefaultHttpRoutePlanner' (JLObject, OAHCRHttpRoutePlanner)
  strict protected
    var
      fschemeRegistry: OAHCSSchemeRegistry; external name 'schemeRegistry';
  public
    constructor create(para1: OAHCSSchemeRegistry); overload;
    function determineRoute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHCRHttpRoute; overload; virtual;  // throws org.apache.http.HttpException
  end;

  OAHICProxySelectorRoutePlanner = class external 'org.apache.http.impl.conn' name 'ProxySelectorRoutePlanner' (JLObject, OAHCRHttpRoutePlanner)
  strict protected
    var
      fproxySelector: JNProxySelector; external name 'proxySelector';
      fschemeRegistry: OAHCSSchemeRegistry; external name 'schemeRegistry';
  public
    constructor create(para1: OAHCSSchemeRegistry; para2: JNProxySelector); overload;
    function getProxySelector(): JNProxySelector; overload; virtual;
    procedure setProxySelector(para1: JNProxySelector); overload; virtual;
    function determineRoute(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHCRHttpRoute; overload; virtual;  // throws org.apache.http.HttpException
  strict protected
    function determineProxy(para1: OAHHttpHost; para2: OAHHttpRequest; para3: OAHPHttpContext): OAHHttpHost; overload; virtual;  // throws org.apache.http.HttpException
    function getHost(para1: JNInetSocketAddress): JLString; overload; virtual;
    function chooseProxy(para1: JUList; para2: OAHHttpHost; para3: OAHHttpRequest; para4: OAHPHttpContext): JNProxy; overload; virtual;
  end;

  OAHCMultihomePlainSocketFactory = class sealed external 'org.apache.http.conn' name 'MultihomePlainSocketFactory' (JLObject, OAHCSSocketFactory)
  public
    class function getSocketFactory(): OAHCMultihomePlainSocketFactory; static; overload;
    function createSocket(): JNSocket; overload; virtual;
    function connectSocket(para1: JNSocket; para2: JLString; para3: jint; para4: JNInetAddress; para5: jint; para6: OAHPHttpParams): JNSocket; overload; virtual;  // throws java.io.IOException
    function isSecure(para1: JNSocket): jboolean; overload; virtual; final;  // throws java.lang.IllegalArgumentException
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  OAHCSLayeredSocketFactory = interface external 'org.apache.http.conn.scheme' name 'LayeredSocketFactory' (OAHCSSocketFactory)
    function createSocket(para1: JNSocket; para2: JLString; para3: jint; para4: jboolean): JNSocket; overload;  // throws java.io.IOException, java.net.UnknownHostException
  end;

  OAHCSPlainSocketFactory = class sealed external 'org.apache.http.conn.scheme' name 'PlainSocketFactory' (JLObject, OAHCSSocketFactory)
  public
    constructor create(para1: OAHCSHostNameResolver); overload;
    constructor create(); overload;
    class function getSocketFactory(): OAHCSPlainSocketFactory; static; overload;
    function createSocket(): JNSocket; overload; virtual;
    function connectSocket(para1: JNSocket; para2: JLString; para3: jint; para4: JNInetAddress; para5: jint; para6: OAHPHttpParams): JNSocket; overload; virtual;  // throws java.io.IOException
    function isSecure(para1: JNSocket): jboolean; overload; virtual; final;  // throws java.lang.IllegalArgumentException
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  OAHCClientCookie = interface external 'org.apache.http.cookie' name 'ClientCookie' (OAHCCookie)
    const
      COMMENTURL_ATTR = 'commenturl';
      COMMENT_ATTR = 'comment';
      DISCARD_ATTR = 'discard';
      DOMAIN_ATTR = 'domain';
      EXPIRES_ATTR = 'expires';
      MAX_AGE_ATTR = 'max-age';
      PATH_ATTR = 'path';
      PORT_ATTR = 'port';
      SECURE_ATTR = 'secure';
      VERSION_ATTR = 'version';
    function getAttribute(para1: JLString): JLString; overload;
    function containsAttribute(para1: JLString): jboolean; overload;
  end;

  OAHCSetCookie = interface external 'org.apache.http.cookie' name 'SetCookie' (OAHCCookie)
    procedure setValue(para1: JLString); overload;
    procedure setComment(para1: JLString); overload;
    procedure setExpiryDate(para1: JUDate); overload;
    procedure setDomain(para1: JLString); overload;
    procedure setPath(para1: JLString); overload;
    procedure setSecure(para1: jboolean); overload;
    procedure setVersion(para1: jint); overload;
  end;

  OAHICAbstractCookieAttributeHandler = class abstract external 'org.apache.http.impl.cookie' name 'AbstractCookieAttributeHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICBasicDomainHandler = class external 'org.apache.http.impl.cookie' name 'BasicDomainHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICBasicPathHandler = class external 'org.apache.http.impl.cookie' name 'BasicPathHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICRFC2109DomainHandler = class external 'org.apache.http.impl.cookie' name 'RFC2109DomainHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICRFC2965CommentUrlAttributeHandler = class external 'org.apache.http.impl.cookie' name 'RFC2965CommentUrlAttributeHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICRFC2965DiscardAttributeHandler = class external 'org.apache.http.impl.cookie' name 'RFC2965DiscardAttributeHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICRFC2965DomainAttributeHandler = class external 'org.apache.http.impl.cookie' name 'RFC2965DomainAttributeHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function domainMatch(para1: JLString; para2: JLString): jboolean; overload; virtual;
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICRFC2965PortAttributeHandler = class external 'org.apache.http.impl.cookie' name 'RFC2965PortAttributeHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICRFC2965VersionAttributeHandler = class external 'org.apache.http.impl.cookie' name 'RFC2965VersionAttributeHandler' (JLObject, OAHCCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICAbstractCookieSpec = class abstract external 'org.apache.http.impl.cookie' name 'AbstractCookieSpec' (JLObject, OAHCCookieSpec)
  public
    constructor create(); overload;
    procedure registerAttribHandler(para1: JLString; para2: OAHCCookieAttributeHandler); overload; virtual;
  strict protected
    function findAttribHandler(para1: JLString): OAHCCookieAttributeHandler; overload; virtual;
    function getAttribHandler(para1: JLString): OAHCCookieAttributeHandler; overload; virtual;
    function getAttribHandlers(): JUCollection; overload; virtual;
  end;

  OAHICBestMatchSpec = class external 'org.apache.http.impl.cookie' name 'BestMatchSpec' (JLObject, OAHCCookieSpec)
  public
    constructor create(para1: Arr1JLString; para2: jboolean); overload;
    constructor create(const para1: array of JLString; para2: jboolean); overload;
    constructor create(); overload;
    function parse(para1: OAHHeader; para2: OAHCCookieOrigin): JUList; overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
    function formatCookies(para1: JUList): JUList; overload; virtual;
    function getVersion(): jint; overload; virtual;
    function getVersionHeader(): OAHHeader; overload; virtual;
  end;

  OAHICBestMatchSpecFactory = class external 'org.apache.http.impl.cookie' name 'BestMatchSpecFactory' (JLObject, OAHCCookieSpecFactory)
  public
    constructor create(); overload;
    function newInstance(para1: OAHPHttpParams): OAHCCookieSpec; overload; virtual;
  end;

  OAHICBrowserCompatSpecFactory = class external 'org.apache.http.impl.cookie' name 'BrowserCompatSpecFactory' (JLObject, OAHCCookieSpecFactory)
  public
    constructor create(); overload;
    function newInstance(para1: OAHPHttpParams): OAHCCookieSpec; overload; virtual;
  end;

  OAHICNetscapeDraftSpecFactory = class external 'org.apache.http.impl.cookie' name 'NetscapeDraftSpecFactory' (JLObject, OAHCCookieSpecFactory)
  public
    constructor create(); overload;
    function newInstance(para1: OAHPHttpParams): OAHCCookieSpec; overload; virtual;
  end;

  OAHICRFC2109SpecFactory = class external 'org.apache.http.impl.cookie' name 'RFC2109SpecFactory' (JLObject, OAHCCookieSpecFactory)
  public
    constructor create(); overload;
    function newInstance(para1: OAHPHttpParams): OAHCCookieSpec; overload; virtual;
  end;

  OAHICRFC2965SpecFactory = class external 'org.apache.http.impl.cookie' name 'RFC2965SpecFactory' (JLObject, OAHCCookieSpecFactory)
  public
    constructor create(); overload;
    function newInstance(para1: OAHPHttpParams): OAHCCookieSpec; overload; virtual;
  end;

  OAHIELaxContentLengthStrategy = class external 'org.apache.http.impl.entity' name 'LaxContentLengthStrategy' (JLObject, OAHEContentLengthStrategy)
  public
    constructor create(); overload;
    function determineLength(para1: OAHHttpMessage): jlong; overload; virtual;  // throws org.apache.http.HttpException
  end;

  OAHIEStrictContentLengthStrategy = class external 'org.apache.http.impl.entity' name 'StrictContentLengthStrategy' (JLObject, OAHEContentLengthStrategy)
  public
    constructor create(); overload;
    function determineLength(para1: OAHHttpMessage): jlong; overload; virtual;  // throws org.apache.http.HttpException
  end;

  OAHICTBasicPoolEntry = class external 'org.apache.http.impl.conn.tsccm' name 'BasicPoolEntry' (OAHICAbstractPoolEntry)
  public
    constructor create(para1: OAHCClientConnectionOperator; para2: OAHCRHttpRoute; para3: JLRReferenceQueue); overload;
  strict protected
    function getConnection(): OAHCOperatedClientConnection; overload; virtual; final;
    function getPlannedRoute(): OAHCRHttpRoute; overload; virtual; final;
    function getWeakRef(): OAHICTBasicPoolEntryRef; overload; virtual; final;
  end;

  OAHICTAbstractConnPool = class abstract external 'org.apache.http.impl.conn.tsccm' name 'AbstractConnPool' (JLObject, OAHICTRefQueueHandler)
  strict protected
    var
      fidleConnHandler: OAHICIdleConnectionHandler; external name 'idleConnHandler';
      fisShutDown: jboolean; external name 'isShutDown';
      fissuedConnections: JUSet; external name 'issuedConnections';
      fnumConnections: jint; external name 'numConnections';
  strict protected
    final var
      fpoolLock: JUCLLock; external name 'poolLock';
  strict protected
    var
      frefQueue: JLRReferenceQueue; external name 'refQueue';
  strict protected
    constructor create(); overload;
  public
    procedure enableConnectionGC(); overload; virtual;  // throws java.lang.IllegalStateException
    function getEntry(para1: OAHCRHttpRoute; para2: JLObject; para3: jlong; para4: JUCTimeUnit): OAHICTBasicPoolEntry; overload; virtual; final;  // throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException
    function requestPoolEntry(para1: OAHCRHttpRoute; para2: JLObject): OAHICTPoolEntryRequest; overload; virtual; abstract;
    procedure freeEntry(para1: OAHICTBasicPoolEntry; para2: jboolean; para3: jlong; para4: JUCTimeUnit); overload; virtual; abstract;
    procedure handleReference(para1: JLRReference); overload; virtual;
  strict protected
    procedure handleLostEntry(para1: OAHCRHttpRoute); overload; virtual; abstract;
  public
    procedure closeIdleConnections(para1: jlong; para2: JUCTimeUnit); overload; virtual;
    procedure closeExpiredConnections(); overload; virtual;
    procedure deleteClosedConnections(); overload; virtual; abstract;
    procedure shutdown(); overload; virtual;
  strict protected
    procedure closeConnection(para1: OAHCOperatedClientConnection); overload; virtual;
  end;

  OAHIIAbstractMessageParser = class abstract external 'org.apache.http.impl.io' name 'AbstractMessageParser' (JLObject, OAHIHttpMessageParser)
  strict protected
    final var
      flineParser: OAHMLineParser; external name 'lineParser';
  public
    constructor create(para1: OAHISessionInputBuffer; para2: OAHMLineParser; para3: OAHPHttpParams); overload;
    class function parseHeaders(para1: OAHISessionInputBuffer; para2: jint; para3: jint; para4: OAHMLineParser): Arr1OAHHeader; static; overload;  // throws org.apache.http.HttpException, java.io.IOException
  strict protected
    function parseHead(para1: OAHISessionInputBuffer): OAHHttpMessage; overload; virtual; abstract;  // throws java.io.IOException, org.apache.http.HttpException, org.apache.http.ParseException
  public
    function parse(): OAHHttpMessage; overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException
  end;

  OAHIIAbstractMessageWriter = class abstract external 'org.apache.http.impl.io' name 'AbstractMessageWriter' (JLObject, OAHIHttpMessageWriter)
  strict protected
    final var
      flineBuf: OAHUCharArrayBuffer; external name 'lineBuf';
      flineFormatter: OAHMLineFormatter; external name 'lineFormatter';
      fsessionBuffer: OAHISessionOutputBuffer; external name 'sessionBuffer';
  public
    constructor create(para1: OAHISessionOutputBuffer; para2: OAHMLineFormatter; para3: OAHPHttpParams); overload;
  strict protected
    procedure writeHeadLine(para1: OAHHttpMessage); overload; virtual; abstract;  // throws java.io.IOException
  public
    procedure write(para1: OAHHttpMessage); overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException
  end;

  OAHIIHttpTransportMetricsImpl = class external 'org.apache.http.impl.io' name 'HttpTransportMetricsImpl' (JLObject, OAHIHttpTransportMetrics)
  public
    constructor create(); overload;
    function getBytesTransferred(): jlong; overload; virtual;
    procedure setBytesTransferred(para1: jlong); overload; virtual;
    procedure incrementBytesTransferred(para1: jlong); overload; virtual;
    procedure reset(); overload; virtual;
  end;

  OAHICLoggingSessionInputBuffer = class external 'org.apache.http.impl.conn' name 'LoggingSessionInputBuffer' (JLObject, OAHISessionInputBuffer)
  public
    constructor create(para1: OAHISessionInputBuffer; para2: OAHICWire); overload;
    function isDataAvailable(para1: jint): jboolean; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
    function readLine(): JLString; overload; virtual;  // throws java.io.IOException
    function readLine(para1: OAHUCharArrayBuffer): jint; overload; virtual;  // throws java.io.IOException
    function getMetrics(): OAHIHttpTransportMetrics; overload; virtual;
  end;

  OAHIIAbstractSessionInputBuffer = class abstract external 'org.apache.http.impl.io' name 'AbstractSessionInputBuffer' (JLObject, OAHISessionInputBuffer)
  public
    constructor create(); overload;
  strict protected
    procedure init(para1: JIInputStream; para2: jint; para3: OAHPHttpParams); overload; virtual;
    function fillBuffer(): jint; overload; virtual;  // throws java.io.IOException
    function hasBufferedData(): jboolean; overload; virtual;
  public
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
    function readLine(para1: OAHUCharArrayBuffer): jint; overload; virtual;  // throws java.io.IOException
    function readLine(): JLString; overload; virtual;  // throws java.io.IOException
    function getMetrics(): OAHIHttpTransportMetrics; overload; virtual;
  end;

  OAHICLoggingSessionOutputBuffer = class external 'org.apache.http.impl.conn' name 'LoggingSessionOutputBuffer' (JLObject, OAHISessionOutputBuffer)
  public
    constructor create(para1: OAHISessionOutputBuffer; para2: OAHICWire); overload;
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure writeLine(para1: OAHUCharArrayBuffer); overload; virtual;  // throws java.io.IOException
    procedure writeLine(para1: JLString); overload; virtual;  // throws java.io.IOException
    function getMetrics(): OAHIHttpTransportMetrics; overload; virtual;
  end;

  OAHIIAbstractSessionOutputBuffer = class abstract external 'org.apache.http.impl.io' name 'AbstractSessionOutputBuffer' (JLObject, OAHISessionOutputBuffer)
  public
    constructor create(); overload;
  strict protected
    procedure init(para1: JIOutputStream; para2: jint; para3: OAHPHttpParams); overload; virtual;
    procedure flushBuffer(); overload; virtual;  // throws java.io.IOException
  public
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure writeLine(para1: JLString); overload; virtual;  // throws java.io.IOException
    procedure writeLine(para1: OAHUCharArrayBuffer); overload; virtual;  // throws java.io.IOException
    function getMetrics(): OAHIHttpTransportMetrics; overload; virtual;
  end;

  OAHMBasicHeaderValueFormatter = class external 'org.apache.http.message' name 'BasicHeaderValueFormatter' (JLObject, OAHMHeaderValueFormatter)
  public
    final class var
      fDEFAULT: OAHMBasicHeaderValueFormatter; external name 'DEFAULT';
  public
    const
      SEPARATORS = ' ;,:@()<>\"/[]?={}'#$0009'';
      UNSAFE_CHARS = '"\';
  public
    constructor create(); overload;
    class function formatElements(para1: Arr1OAHHeaderElement; para2: jboolean; para3: OAHMHeaderValueFormatter): JLString; static; overload; final;
    class function formatElements(var para1: array of OAHHeaderElement; para2: jboolean; para3: OAHMHeaderValueFormatter): JLString; static; overload; final;
    function formatElements(para1: OAHUCharArrayBuffer; para2: Arr1OAHHeaderElement; para3: jboolean): OAHUCharArrayBuffer; overload; virtual;
    function formatElements(para1: OAHUCharArrayBuffer; var para2: array of OAHHeaderElement; para3: jboolean): OAHUCharArrayBuffer; overload; virtual;
  strict protected
    function estimateElementsLen(para1: Arr1OAHHeaderElement): jint; overload; virtual;
    function estimateElementsLen(var para1: array of OAHHeaderElement): jint; overload; virtual;
  public
    class function formatHeaderElement(para1: OAHHeaderElement; para2: jboolean; para3: OAHMHeaderValueFormatter): JLString; static; overload; final;
    function formatHeaderElement(para1: OAHUCharArrayBuffer; para2: OAHHeaderElement; para3: jboolean): OAHUCharArrayBuffer; overload; virtual;
  strict protected
    function estimateHeaderElementLen(para1: OAHHeaderElement): jint; overload; virtual;
  public
    class function formatParameters(para1: Arr1OAHNameValuePair; para2: jboolean; para3: OAHMHeaderValueFormatter): JLString; static; overload; final;
    class function formatParameters(var para1: array of OAHNameValuePair; para2: jboolean; para3: OAHMHeaderValueFormatter): JLString; static; overload; final;
    function formatParameters(para1: OAHUCharArrayBuffer; para2: Arr1OAHNameValuePair; para3: jboolean): OAHUCharArrayBuffer; overload; virtual;
    function formatParameters(para1: OAHUCharArrayBuffer; var para2: array of OAHNameValuePair; para3: jboolean): OAHUCharArrayBuffer; overload; virtual;
  strict protected
    function estimateParametersLen(para1: Arr1OAHNameValuePair): jint; overload; virtual;
    function estimateParametersLen(var para1: array of OAHNameValuePair): jint; overload; virtual;
  public
    class function formatNameValuePair(para1: OAHNameValuePair; para2: jboolean; para3: OAHMHeaderValueFormatter): JLString; static; overload; final;
    function formatNameValuePair(para1: OAHUCharArrayBuffer; para2: OAHNameValuePair; para3: jboolean): OAHUCharArrayBuffer; overload; virtual;
  strict protected
    function estimateNameValuePairLen(para1: OAHNameValuePair): jint; overload; virtual;
    procedure doFormatValue(para1: OAHUCharArrayBuffer; para2: JLString; para3: jboolean); overload; virtual;
    function isSeparator(para1: jchar): jboolean; overload; virtual;
    function isUnsafe(para1: jchar): jboolean; overload; virtual;
  end;

  OAHMBasicHeaderValueParser = class external 'org.apache.http.message' name 'BasicHeaderValueParser' (JLObject, OAHMHeaderValueParser)
  public
    final class var
      fDEFAULT: OAHMBasicHeaderValueParser; external name 'DEFAULT';
  public
    constructor create(); overload;
    class function parseElements(para1: JLString; para2: OAHMHeaderValueParser): Arr1OAHHeaderElement; static; overload; final;  // throws org.apache.http.ParseException
    function parseElements(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): Arr1OAHHeaderElement; overload; virtual;
    class function parseHeaderElement(para1: JLString; para2: OAHMHeaderValueParser): OAHHeaderElement; static; overload; final;  // throws org.apache.http.ParseException
    function parseHeaderElement(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHHeaderElement; overload; virtual;
  strict protected
    function createHeaderElement(para1: JLString; para2: JLString; para3: Arr1OAHNameValuePair): OAHHeaderElement; overload; virtual;
    function createHeaderElement(para1: JLString; para2: JLString; var para3: array of OAHNameValuePair): OAHHeaderElement; overload; virtual;
  public
    class function parseParameters(para1: JLString; para2: OAHMHeaderValueParser): Arr1OAHNameValuePair; static; overload; final;  // throws org.apache.http.ParseException
    function parseParameters(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): Arr1OAHNameValuePair; overload; virtual;
    class function parseNameValuePair(para1: JLString; para2: OAHMHeaderValueParser): OAHNameValuePair; static; overload; final;  // throws org.apache.http.ParseException
    function parseNameValuePair(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHNameValuePair; overload; virtual;
    function parseNameValuePair(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor; para3: Arr1jchar): OAHNameValuePair; overload; virtual;
    function parseNameValuePair(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor; var para3: array of jchar): OAHNameValuePair; overload; virtual;
  strict protected
    function createNameValuePair(para1: JLString; para2: JLString): OAHNameValuePair; overload; virtual;
  end;

  OAHMBasicLineFormatter = class external 'org.apache.http.message' name 'BasicLineFormatter' (JLObject, OAHMLineFormatter)
  public
    final class var
      fDEFAULT: OAHMBasicLineFormatter; external name 'DEFAULT';
  public
    constructor create(); overload;
  strict protected
    function initBuffer(para1: OAHUCharArrayBuffer): OAHUCharArrayBuffer; overload; virtual;
  public
    class function formatProtocolVersion(para1: OAHProtocolVersion; para2: OAHMLineFormatter): JLString; static; overload; final;
    function appendProtocolVersion(para1: OAHUCharArrayBuffer; para2: OAHProtocolVersion): OAHUCharArrayBuffer; overload; virtual;
  strict protected
    function estimateProtocolVersionLen(para1: OAHProtocolVersion): jint; overload; virtual;
  public
    class function formatRequestLine(para1: OAHRequestLine; para2: OAHMLineFormatter): JLString; static; overload; final;
    function formatRequestLine(para1: OAHUCharArrayBuffer; para2: OAHRequestLine): OAHUCharArrayBuffer; overload; virtual;
  strict protected
    procedure doFormatRequestLine(para1: OAHUCharArrayBuffer; para2: OAHRequestLine); overload; virtual;
  public
    class function formatStatusLine(para1: OAHStatusLine; para2: OAHMLineFormatter): JLString; static; overload; final;
    function formatStatusLine(para1: OAHUCharArrayBuffer; para2: OAHStatusLine): OAHUCharArrayBuffer; overload; virtual;
  strict protected
    procedure doFormatStatusLine(para1: OAHUCharArrayBuffer; para2: OAHStatusLine); overload; virtual;
  public
    class function formatHeader(para1: OAHHeader; para2: OAHMLineFormatter): JLString; static; overload; final;
    function formatHeader(para1: OAHUCharArrayBuffer; para2: OAHHeader): OAHUCharArrayBuffer; overload; virtual;
  strict protected
    procedure doFormatHeader(para1: OAHUCharArrayBuffer; para2: OAHHeader); overload; virtual;
  end;

  OAHMBasicLineParser = class external 'org.apache.http.message' name 'BasicLineParser' (JLObject, OAHMLineParser)
  public
    final class var
      fDEFAULT: OAHMBasicLineParser; external name 'DEFAULT';
  strict protected
    final var
      fprotocol: OAHProtocolVersion; external name 'protocol';
  public
    constructor create(para1: OAHProtocolVersion); overload;
    constructor create(); overload;
    class function parseProtocolVersion(para1: JLString; para2: OAHMLineParser): OAHProtocolVersion; static; overload; final;  // throws org.apache.http.ParseException
    function parseProtocolVersion(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHProtocolVersion; overload; virtual;  // throws org.apache.http.ParseException
  strict protected
    function createProtocolVersion(para1: jint; para2: jint): OAHProtocolVersion; overload; virtual;
  public
    function hasProtocolVersion(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): jboolean; overload; virtual;
    class function parseRequestLine(para1: JLString; para2: OAHMLineParser): OAHRequestLine; static; overload; final;  // throws org.apache.http.ParseException
    function parseRequestLine(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHRequestLine; overload; virtual;  // throws org.apache.http.ParseException
  strict protected
    function createRequestLine(para1: JLString; para2: JLString; para3: OAHProtocolVersion): OAHRequestLine; overload; virtual;
  public
    class function parseStatusLine(para1: JLString; para2: OAHMLineParser): OAHStatusLine; static; overload; final;  // throws org.apache.http.ParseException
    function parseStatusLine(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor): OAHStatusLine; overload; virtual;  // throws org.apache.http.ParseException
  strict protected
    function createStatusLine(para1: OAHProtocolVersion; para2: jint; para3: JLString): OAHStatusLine; overload; virtual;
  public
    class function parseHeader(para1: JLString; para2: OAHMLineParser): OAHHeader; static; overload; final;  // throws org.apache.http.ParseException
    function parseHeader(para1: OAHUCharArrayBuffer): OAHHeader; overload; virtual;  // throws org.apache.http.ParseException
  strict protected
    procedure skipWhitespace(para1: OAHUCharArrayBuffer; para2: OAHMParserCursor); overload; virtual;
  end;

  OAHPHttpConnectionParams = class sealed external 'org.apache.http.params' name 'HttpConnectionParams' (JLObject, OAHPCoreConnectionPNames)
  public
    class function getSoTimeout(para1: OAHPHttpParams): jint; static; overload;
    class procedure setSoTimeout(para1: OAHPHttpParams; para2: jint); static; overload;
    class function getTcpNoDelay(para1: OAHPHttpParams): jboolean; static; overload;
    class procedure setTcpNoDelay(para1: OAHPHttpParams; para2: jboolean); static; overload;
    class function getSocketBufferSize(para1: OAHPHttpParams): jint; static; overload;
    class procedure setSocketBufferSize(para1: OAHPHttpParams; para2: jint); static; overload;
    class function getLinger(para1: OAHPHttpParams): jint; static; overload;
    class procedure setLinger(para1: OAHPHttpParams; para2: jint); static; overload;
    class function getConnectionTimeout(para1: OAHPHttpParams): jint; static; overload;
    class procedure setConnectionTimeout(para1: OAHPHttpParams; para2: jint); static; overload;
    class function isStaleCheckingEnabled(para1: OAHPHttpParams): jboolean; static; overload;
    class procedure setStaleCheckingEnabled(para1: OAHPHttpParams; para2: jboolean); static; overload;
  end;

  OAHCPAllClientPNames = interface external 'org.apache.http.client.params' name 'AllClientPNames' (OAHPCoreConnectionPNames, OAHPCoreProtocolPNames, OAHCPClientPNames, OAHAPAuthPNames, OAHCPCookieSpecPNames, OAHCPConnConnectionPNames, OAHCPConnManagerPNames, OAHCPConnRoutePNames)
  end;

  OAHPHttpProtocolParams = class sealed external 'org.apache.http.params' name 'HttpProtocolParams' (JLObject, OAHPCoreProtocolPNames)
  public
    class function getHttpElementCharset(para1: OAHPHttpParams): JLString; static; overload;
    class procedure setHttpElementCharset(para1: OAHPHttpParams; para2: JLString); static; overload;
    class function getContentCharset(para1: OAHPHttpParams): JLString; static; overload;
    class procedure setContentCharset(para1: OAHPHttpParams; para2: JLString); static; overload;
    class function getVersion(para1: OAHPHttpParams): OAHProtocolVersion; static; overload;
    class procedure setVersion(para1: OAHPHttpParams; para2: OAHProtocolVersion); static; overload;
    class function getUserAgent(para1: OAHPHttpParams): JLString; static; overload;
    class procedure setUserAgent(para1: OAHPHttpParams; para2: JLString); static; overload;
    class function useExpectContinue(para1: OAHPHttpParams): jboolean; static; overload;
    class procedure setUseExpectContinue(para1: OAHPHttpParams; para2: jboolean); static; overload;
  end;

  OAHAPAuthParamBean = class external 'org.apache.http.auth.params' name 'AuthParamBean' (OAHPHttpAbstractParamBean)
  public
    constructor create(para1: OAHPHttpParams); overload;
    procedure setCredentialCharset(para1: JLString); overload; virtual;
  end;

  OAHCPClientParamBean = class external 'org.apache.http.client.params' name 'ClientParamBean' (OAHPHttpAbstractParamBean)
  public
    constructor create(para1: OAHPHttpParams); overload;
    procedure setConnectionManagerFactoryClassName(para1: JLString); overload; virtual;
    procedure setConnectionManagerFactory(para1: OAHCClientConnectionManagerFactory); overload; virtual;
    procedure setHandleRedirects(para1: jboolean); overload; virtual;
    procedure setRejectRelativeRedirect(para1: jboolean); overload; virtual;
    procedure setMaxRedirects(para1: jint); overload; virtual;
    procedure setAllowCircularRedirects(para1: jboolean); overload; virtual;
    procedure setHandleAuthentication(para1: jboolean); overload; virtual;
    procedure setCookiePolicy(para1: JLString); overload; virtual;
    procedure setVirtualHost(para1: OAHHttpHost); overload; virtual;
    procedure setDefaultHeaders(para1: JUCollection); overload; virtual;
    procedure setDefaultHost(para1: OAHHttpHost); overload; virtual;
  end;

  OAHCPConnConnectionParamBean = class external 'org.apache.http.conn.params' name 'ConnConnectionParamBean' (OAHPHttpAbstractParamBean)
  public
    constructor create(para1: OAHPHttpParams); overload;
    procedure setMaxStatusLineGarbage(para1: jint); overload; virtual;
  end;

  OAHCPConnManagerParamBean = class external 'org.apache.http.conn.params' name 'ConnManagerParamBean' (OAHPHttpAbstractParamBean)
  public
    constructor create(para1: OAHPHttpParams); overload;
    procedure setTimeout(para1: jlong); overload; virtual;
    procedure setMaxTotalConnections(para1: jint); overload; virtual;
    procedure setConnectionsPerRoute(para1: OAHCPConnPerRouteBean); overload; virtual;
  end;

  OAHCPConnRouteParamBean = class external 'org.apache.http.conn.params' name 'ConnRouteParamBean' (OAHPHttpAbstractParamBean)
  public
    constructor create(para1: OAHPHttpParams); overload;
    procedure setDefaultProxy(para1: OAHHttpHost); overload; virtual;
    procedure setLocalAddress(para1: JNInetAddress); overload; virtual;
    procedure setForcedRoute(para1: OAHCRHttpRoute); overload; virtual;
  end;

  OAHCPCookieSpecParamBean = class external 'org.apache.http.cookie.params' name 'CookieSpecParamBean' (OAHPHttpAbstractParamBean)
  public
    constructor create(para1: OAHPHttpParams); overload;
    procedure setDatePatterns(para1: JUCollection); overload; virtual;
    procedure setSingleHeader(para1: jboolean); overload; virtual;
  end;

  OAHPHttpConnectionParamBean = class external 'org.apache.http.params' name 'HttpConnectionParamBean' (OAHPHttpAbstractParamBean)
  public
    constructor create(para1: OAHPHttpParams); overload;
    procedure setSoTimeout(para1: jint); overload; virtual;
    procedure setTcpNoDelay(para1: jboolean); overload; virtual;
    procedure setSocketBufferSize(para1: jint); overload; virtual;
    procedure setLinger(para1: jint); overload; virtual;
    procedure setConnectionTimeout(para1: jint); overload; virtual;
    procedure setStaleCheckingEnabled(para1: jboolean); overload; virtual;
  end;

  OAHPHttpProtocolParamBean = class external 'org.apache.http.params' name 'HttpProtocolParamBean' (OAHPHttpAbstractParamBean)
  public
    constructor create(para1: OAHPHttpParams); overload;
    procedure setHttpElementCharset(para1: JLString); overload; virtual;
    procedure setContentCharset(para1: JLString); overload; virtual;
    procedure setVersion(para1: OAHHttpVersion); overload; virtual;
    procedure setUserAgent(para1: JLString); overload; virtual;
    procedure setUseExpectContinue(para1: jboolean); overload; virtual;
  end;

  OAHPAbstractHttpParams = class abstract external 'org.apache.http.params' name 'AbstractHttpParams' (JLObject, OAHPHttpParams)
  strict protected
    constructor create(); overload;
  public
    function getLongParameter(para1: JLString; para2: jlong): jlong; overload; virtual;
    function setLongParameter(para1: JLString; para2: jlong): OAHPHttpParams; overload; virtual;
    function getIntParameter(para1: JLString; para2: jint): jint; overload; virtual;
    function setIntParameter(para1: JLString; para2: jint): OAHPHttpParams; overload; virtual;
    function getDoubleParameter(para1: JLString; para2: jdouble): jdouble; overload; virtual;
    function setDoubleParameter(para1: JLString; para2: jdouble): OAHPHttpParams; overload; virtual;
    function getBooleanParameter(para1: JLString; para2: jboolean): jboolean; overload; virtual;
    function setBooleanParameter(para1: JLString; para2: jboolean): OAHPHttpParams; overload; virtual;
    function isParameterTrue(para1: JLString): jboolean; overload; virtual;
    function isParameterFalse(para1: JLString): jboolean; overload; virtual;
  end;

  OAHPBasicHttpContext = class external 'org.apache.http.protocol' name 'BasicHttpContext' (JLObject, OAHPHttpContext)
  public
    constructor create(); overload;
    constructor create(para1: OAHPHttpContext); overload;
    function getAttribute(para1: JLString): JLObject; overload; virtual;
    procedure setAttribute(para1: JLString; para2: JLObject); overload; virtual;
    function removeAttribute(para1: JLString): JLObject; overload; virtual;
  end;

  OAHPDefaultedHttpContext = class sealed external 'org.apache.http.protocol' name 'DefaultedHttpContext' (JLObject, OAHPHttpContext)
  public
    constructor create(para1: OAHPHttpContext; para2: OAHPHttpContext); overload;
    function getAttribute(para1: JLString): JLObject; overload; virtual;
    function removeAttribute(para1: JLString): JLObject; overload; virtual;
    procedure setAttribute(para1: JLString; para2: JLObject); overload; virtual;
    function getDefaults(): OAHPHttpContext; overload; virtual;
  end;

  OAHPHttpRequestHandlerRegistry = class external 'org.apache.http.protocol' name 'HttpRequestHandlerRegistry' (JLObject, OAHPHttpRequestHandlerResolver)
  public
    constructor create(); overload;
    procedure register(para1: JLString; para2: OAHPHttpRequestHandler); overload; virtual;
    procedure unregister(para1: JLString); overload; virtual;
    procedure setHandlers(para1: JUMap); overload; virtual;
    function lookup(para1: JLString): OAHPHttpRequestHandler; overload; virtual;
  strict protected
    function matchUriRequestPattern(para1: JLString; para2: JLString): jboolean; overload; virtual;
  end;

  OWDAttr = interface external 'org.w3c.dom' name 'Attr' (OWDNode)
    function getName(): JLString; overload;
    function getSpecified(): jboolean; overload;
    function getValue(): JLString; overload;
    procedure setValue(para1: JLString); overload;  // throws org.w3c.dom.DOMException
    function getOwnerElement(): OWDElement; overload;
    function getSchemaTypeInfo(): OWDTypeInfo; overload;
    function isId(): jboolean; overload;
  end;

  OWDCharacterData = interface external 'org.w3c.dom' name 'CharacterData' (OWDNode)
    function getData(): JLString; overload;  // throws org.w3c.dom.DOMException
    procedure setData(para1: JLString); overload;  // throws org.w3c.dom.DOMException
    function getLength(): jint; overload;
    function substringData(para1: jint; para2: jint): JLString; overload;  // throws org.w3c.dom.DOMException
    procedure appendData(para1: JLString); overload;  // throws org.w3c.dom.DOMException
    procedure insertData(para1: jint; para2: JLString); overload;  // throws org.w3c.dom.DOMException
    procedure deleteData(para1: jint; para2: jint); overload;  // throws org.w3c.dom.DOMException
    procedure replaceData(para1: jint; para2: jint; para3: JLString); overload;  // throws org.w3c.dom.DOMException
  end;

  OWDDocument = interface external 'org.w3c.dom' name 'Document' (OWDNode)
    function getDoctype(): OWDDocumentType; overload;
    function getImplementation(): OWDDOMImplementation; overload;
    function getDocumentElement(): OWDElement; overload;
    function createElement(para1: JLString): OWDElement; overload;  // throws org.w3c.dom.DOMException
    function createDocumentFragment(): OWDDocumentFragment; overload;
    function createTextNode(para1: JLString): OWDText; overload;
    function createComment(para1: JLString): OWDComment; overload;
    function createCDATASection(para1: JLString): OWDCDATASection; overload;  // throws org.w3c.dom.DOMException
    function createProcessingInstruction(para1: JLString; para2: JLString): OWDProcessingInstruction; overload;  // throws org.w3c.dom.DOMException
    function createAttribute(para1: JLString): OWDAttr; overload;  // throws org.w3c.dom.DOMException
    function createEntityReference(para1: JLString): OWDEntityReference; overload;  // throws org.w3c.dom.DOMException
    function getElementsByTagName(para1: JLString): OWDNodeList; overload;
    function importNode(para1: OWDNode; para2: jboolean): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function createElementNS(para1: JLString; para2: JLString): OWDElement; overload;  // throws org.w3c.dom.DOMException
    function createAttributeNS(para1: JLString; para2: JLString): OWDAttr; overload;  // throws org.w3c.dom.DOMException
    function getElementsByTagNameNS(para1: JLString; para2: JLString): OWDNodeList; overload;
    function getElementById(para1: JLString): OWDElement; overload;
    function getInputEncoding(): JLString; overload;
    function getXmlEncoding(): JLString; overload;
    function getXmlStandalone(): jboolean; overload;
    procedure setXmlStandalone(para1: jboolean); overload;  // throws org.w3c.dom.DOMException
    function getXmlVersion(): JLString; overload;
    procedure setXmlVersion(para1: JLString); overload;  // throws org.w3c.dom.DOMException
    function getStrictErrorChecking(): jboolean; overload;
    procedure setStrictErrorChecking(para1: jboolean); overload;
    function getDocumentURI(): JLString; overload;
    procedure setDocumentURI(para1: JLString); overload;
    function adoptNode(para1: OWDNode): OWDNode; overload;  // throws org.w3c.dom.DOMException
    function getDomConfig(): OWDDOMConfiguration; overload;
    procedure normalizeDocument(); overload;
    function renameNode(para1: OWDNode; para2: JLString; para3: JLString): OWDNode; overload;  // throws org.w3c.dom.DOMException
  end;

  OWDDocumentFragment = interface external 'org.w3c.dom' name 'DocumentFragment' (OWDNode)
  end;

  OWDDocumentType = interface external 'org.w3c.dom' name 'DocumentType' (OWDNode)
    function getName(): JLString; overload;
    function getEntities(): OWDNamedNodeMap; overload;
    function getNotations(): OWDNamedNodeMap; overload;
    function getPublicId(): JLString; overload;
    function getSystemId(): JLString; overload;
    function getInternalSubset(): JLString; overload;
  end;

  OWDElement = interface external 'org.w3c.dom' name 'Element' (OWDNode)
    function getTagName(): JLString; overload;
    function getAttribute(para1: JLString): JLString; overload;
    procedure setAttribute(para1: JLString; para2: JLString); overload;  // throws org.w3c.dom.DOMException
    procedure removeAttribute(para1: JLString); overload;  // throws org.w3c.dom.DOMException
    function getAttributeNode(para1: JLString): OWDAttr; overload;
    function setAttributeNode(para1: OWDAttr): OWDAttr; overload;  // throws org.w3c.dom.DOMException
    function removeAttributeNode(para1: OWDAttr): OWDAttr; overload;  // throws org.w3c.dom.DOMException
    function getElementsByTagName(para1: JLString): OWDNodeList; overload;
    function getAttributeNS(para1: JLString; para2: JLString): JLString; overload;  // throws org.w3c.dom.DOMException
    procedure setAttributeNS(para1: JLString; para2: JLString; para3: JLString); overload;  // throws org.w3c.dom.DOMException
    procedure removeAttributeNS(para1: JLString; para2: JLString); overload;  // throws org.w3c.dom.DOMException
    function getAttributeNodeNS(para1: JLString; para2: JLString): OWDAttr; overload;  // throws org.w3c.dom.DOMException
    function setAttributeNodeNS(para1: OWDAttr): OWDAttr; overload;  // throws org.w3c.dom.DOMException
    function getElementsByTagNameNS(para1: JLString; para2: JLString): OWDNodeList; overload;  // throws org.w3c.dom.DOMException
    function hasAttribute(para1: JLString): jboolean; overload;
    function hasAttributeNS(para1: JLString; para2: JLString): jboolean; overload;  // throws org.w3c.dom.DOMException
    function getSchemaTypeInfo(): OWDTypeInfo; overload;
    procedure setIdAttribute(para1: JLString; para2: jboolean); overload;  // throws org.w3c.dom.DOMException
    procedure setIdAttributeNS(para1: JLString; para2: JLString; para3: jboolean); overload;  // throws org.w3c.dom.DOMException
    procedure setIdAttributeNode(para1: OWDAttr; para2: jboolean); overload;  // throws org.w3c.dom.DOMException
  end;

  OWDEntity = interface external 'org.w3c.dom' name 'Entity' (OWDNode)
    function getPublicId(): JLString; overload;
    function getSystemId(): JLString; overload;
    function getNotationName(): JLString; overload;
    function getInputEncoding(): JLString; overload;
    function getXmlEncoding(): JLString; overload;
    function getXmlVersion(): JLString; overload;
  end;

  OWDEntityReference = interface external 'org.w3c.dom' name 'EntityReference' (OWDNode)
  end;

  OWDNotation = interface external 'org.w3c.dom' name 'Notation' (OWDNode)
    function getPublicId(): JLString; overload;
    function getSystemId(): JLString; overload;
  end;

  OWDProcessingInstruction = interface external 'org.w3c.dom' name 'ProcessingInstruction' (OWDNode)
    function getTarget(): JLString; overload;
    function getData(): JLString; overload;
    procedure setData(para1: JLString); overload;  // throws org.w3c.dom.DOMException
  end;

  OXSHAttributeListImpl = class external 'org.xml.sax.helpers' name 'AttributeListImpl' (JLObject, OXSAttributeList)
  public
    constructor create(); overload;
    constructor create(para1: OXSAttributeList); overload;
    procedure setAttributeList(para1: OXSAttributeList); overload; virtual;
    procedure addAttribute(para1: JLString; para2: JLString; para3: JLString); overload; virtual;
    procedure removeAttribute(para1: JLString); overload; virtual;
    procedure clear(); overload; virtual;
    function getLength(): jint; overload; virtual;
    function getName(para1: jint): JLString; overload; virtual;
    function getType(para1: jint): JLString; overload; virtual;
    function getValue(para1: jint): JLString; overload; virtual;
    function getType(para1: JLString): JLString; overload; virtual;
    function getValue(para1: JLString): JLString; overload; virtual;
  end;

  OXSEAttributes2 = interface external 'org.xml.sax.ext' name 'Attributes2' (OXSAttributes)
    function isDeclared(para1: jint): jboolean; overload;
    function isDeclared(para1: JLString): jboolean; overload;
    function isDeclared(para1: JLString; para2: JLString): jboolean; overload;
    function isSpecified(para1: jint): jboolean; overload;
    function isSpecified(para1: JLString; para2: JLString): jboolean; overload;
    function isSpecified(para1: JLString): jboolean; overload;
  end;

  OXSHAttributesImpl = class external 'org.xml.sax.helpers' name 'AttributesImpl' (JLObject, OXSAttributes)
  public
    constructor create(); overload;
    constructor create(para1: OXSAttributes); overload;
    function getLength(): jint; overload; virtual;
    function getURI(para1: jint): JLString; overload; virtual;
    function getLocalName(para1: jint): JLString; overload; virtual;
    function getQName(para1: jint): JLString; overload; virtual;
    function getType(para1: jint): JLString; overload; virtual;
    function getValue(para1: jint): JLString; overload; virtual;
    function getIndex(para1: JLString; para2: JLString): jint; overload; virtual;
    function getIndex(para1: JLString): jint; overload; virtual;
    function getType(para1: JLString; para2: JLString): JLString; overload; virtual;
    function getType(para1: JLString): JLString; overload; virtual;
    function getValue(para1: JLString; para2: JLString): JLString; overload; virtual;
    function getValue(para1: JLString): JLString; overload; virtual;
    procedure clear(); overload; virtual;
    procedure setAttributes(para1: OXSAttributes); overload; virtual;
    procedure addAttribute(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload; virtual;
    procedure setAttribute(para1: jint; para2: JLString; para3: JLString; para4: JLString; para5: JLString; para6: JLString); overload; virtual;
    procedure removeAttribute(para1: jint); overload; virtual;
    procedure setURI(para1: jint; para2: JLString); overload; virtual;
    procedure setLocalName(para1: jint; para2: JLString); overload; virtual;
    procedure setQName(para1: jint; para2: JLString); overload; virtual;
    procedure setType(para1: jint; para2: JLString); overload; virtual;
    procedure setValue(para1: jint; para2: JLString); overload; virtual;
  end;

  JXTSTemplatesHandler = interface external 'javax.xml.transform.sax' name 'TemplatesHandler' (OXSContentHandler)
    function getTemplates(): JXTTemplates; overload;
    procedure setSystemId(para1: JLString); overload;
    function getSystemId(): JLString; overload;
  end;

  JXVValidatorHandler = class abstract external 'javax.xml.validation' name 'ValidatorHandler' (JLObject, OXSContentHandler)
  strict protected
    constructor create(); overload;
  public
    procedure setContentHandler(para1: OXSContentHandler); overload; virtual; abstract;
    function getContentHandler(): OXSContentHandler; overload; virtual; abstract;
    procedure setErrorHandler(para1: OXSErrorHandler); overload; virtual; abstract;
    function getErrorHandler(): OXSErrorHandler; overload; virtual; abstract;
    procedure setResourceResolver(para1: OWDLLSResourceResolver); overload; virtual; abstract;
    function getResourceResolver(): OWDLLSResourceResolver; overload; virtual; abstract;
    function getTypeInfoProvider(): JXVTypeInfoProvider; overload; virtual; abstract;
    function getFeature(para1: JLString): jboolean; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setProperty(para1: JLString; para2: JLObject); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getProperty(para1: JLString): JLObject; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
  end;

  OXSEEntityResolver2 = interface external 'org.xml.sax.ext' name 'EntityResolver2' (OXSEntityResolver)
    function getExternalSubset(para1: JLString; para2: JLString): OXSInputSource; overload;  // throws org.xml.sax.SAXException, java.io.IOException
    function resolveEntity(para1: JLString; para2: JLString; para3: JLString; para4: JLString): OXSInputSource; overload;  // throws org.xml.sax.SAXException, java.io.IOException
  end;

  OXSHandlerBase = class external 'org.xml.sax' name 'HandlerBase' (JLObject, OXSEntityResolver, OXSDTDHandler, OXSDocumentHandler, OXSErrorHandler)
  public
    constructor create(); overload;
    function resolveEntity(para1: JLString; para2: JLString): OXSInputSource; overload; virtual;  // throws org.xml.sax.SAXException
    procedure notationDecl(para1: JLString; para2: JLString; para3: JLString); overload; virtual;
    procedure unparsedEntityDecl(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload; virtual;
    procedure setDocumentLocator(para1: OXSLocator); overload; virtual;
    procedure startDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startElement(para1: JLString; para2: OXSAttributeList); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endElement(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure processingInstruction(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure warning(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
    procedure error(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
    procedure fatalError(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
  end;

  OXSHDefaultHandler = class external 'org.xml.sax.helpers' name 'DefaultHandler' (JLObject, OXSEntityResolver, OXSDTDHandler, OXSContentHandler, OXSErrorHandler)
  public
    constructor create(); overload;
    function resolveEntity(para1: JLString; para2: JLString): OXSInputSource; overload; virtual;  // throws java.io.IOException, org.xml.sax.SAXException
    procedure notationDecl(para1: JLString; para2: JLString; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure unparsedEntityDecl(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure setDocumentLocator(para1: OXSLocator); overload; virtual;
    procedure startDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startPrefixMapping(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endPrefixMapping(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startElement(para1: JLString; para2: JLString; para3: JLString; para4: OXSAttributes); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endElement(para1: JLString; para2: JLString; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure processingInstruction(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure skippedEntity(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure warning(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
    procedure error(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
    procedure fatalError(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
  end;

  OXSELocator2 = interface external 'org.xml.sax.ext' name 'Locator2' (OXSLocator)
    function getXMLVersion(): JLString; overload;
    function getEncoding(): JLString; overload;
  end;

  OXSHLocatorImpl = class external 'org.xml.sax.helpers' name 'LocatorImpl' (JLObject, OXSLocator)
  public
    constructor create(); overload;
    constructor create(para1: OXSLocator); overload;
    function getPublicId(): JLString; overload; virtual;
    function getSystemId(): JLString; overload; virtual;
    function getLineNumber(): jint; overload; virtual;
    function getColumnNumber(): jint; overload; virtual;
    procedure setPublicId(para1: JLString); overload; virtual;
    procedure setSystemId(para1: JLString); overload; virtual;
    procedure setLineNumber(para1: jint); overload; virtual;
    procedure setColumnNumber(para1: jint); overload; virtual;
  end;

  OXSHXMLReaderAdapter = class external 'org.xml.sax.helpers' name 'XMLReaderAdapter' (JLObject, OXSParser, OXSContentHandler)
  public
    constructor create(); overload;  // throws org.xml.sax.SAXException
    constructor create(para1: OXSXMLReader); overload;
    procedure setLocale(para1: JULocale); overload; virtual;  // throws org.xml.sax.SAXException
    procedure setEntityResolver(para1: OXSEntityResolver); overload; virtual;
    procedure setDTDHandler(para1: OXSDTDHandler); overload; virtual;
    procedure setDocumentHandler(para1: OXSDocumentHandler); overload; virtual;
    procedure setErrorHandler(para1: OXSErrorHandler); overload; virtual;
    procedure parse(para1: JLString); overload; virtual;  // throws java.io.IOException, org.xml.sax.SAXException
    procedure parse(para1: OXSInputSource); overload; virtual;  // throws java.io.IOException, org.xml.sax.SAXException
    procedure setDocumentLocator(para1: OXSLocator); overload; virtual;
    procedure startDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startPrefixMapping(para1: JLString; para2: JLString); overload; virtual;
    procedure endPrefixMapping(para1: JLString); overload; virtual;
    procedure startElement(para1: JLString; para2: JLString; para3: JLString; para4: OXSAttributes); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endElement(para1: JLString; para2: JLString; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure processingInstruction(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure skippedEntity(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
  end;

  OXSXMLFilter = interface external 'org.xml.sax' name 'XMLFilter' (OXSXMLReader)
    procedure setParent(para1: OXSXMLReader); overload;
    function getParent(): OXSXMLReader; overload;
  end;

  OXSHParserAdapter = class external 'org.xml.sax.helpers' name 'ParserAdapter' (JLObject, OXSXMLReader, OXSDocumentHandler)
  public
    constructor create(); overload;  // throws org.xml.sax.SAXException
    constructor create(para1: OXSParser); overload;
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getFeature(para1: JLString): jboolean; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setProperty(para1: JLString; para2: JLObject); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getProperty(para1: JLString): JLObject; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setEntityResolver(para1: OXSEntityResolver); overload; virtual;
    function getEntityResolver(): OXSEntityResolver; overload; virtual;
    procedure setDTDHandler(para1: OXSDTDHandler); overload; virtual;
    function getDTDHandler(): OXSDTDHandler; overload; virtual;
    procedure setContentHandler(para1: OXSContentHandler); overload; virtual;
    function getContentHandler(): OXSContentHandler; overload; virtual;
    procedure setErrorHandler(para1: OXSErrorHandler); overload; virtual;
    function getErrorHandler(): OXSErrorHandler; overload; virtual;
    procedure parse(para1: JLString); overload; virtual;  // throws java.io.IOException, org.xml.sax.SAXException
    procedure parse(para1: OXSInputSource); overload; virtual;  // throws java.io.IOException, org.xml.sax.SAXException
    procedure setDocumentLocator(para1: OXSLocator); overload; virtual;
    procedure startDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startElement(para1: JLString; para2: OXSAttributeList); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endElement(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure processingInstruction(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
  end;

  OXVSDriver = class external 'org.xmlpull.v1.sax2' name 'Driver' (JLObject, OXSLocator, OXSXMLReader, OXSAttributes)
  strict protected
    const
      APACHE_DYNAMIC_VALIDATION_FEATURE = 'http://apache.org/xml/features/validation/dynamic';
      APACHE_SCHEMA_VALIDATION_FEATURE = 'http://apache.org/xml/features/validation/schema';
      DECLARATION_HANDLER_PROPERTY = 'http://xml.org/sax/properties/declaration-handler';
      LEXICAL_HANDLER_PROPERTY = 'http://xml.org/sax/properties/lexical-handler';
      NAMESPACES_FEATURE = 'http://xml.org/sax/features/namespaces';
      NAMESPACE_PREFIXES_FEATURE = 'http://xml.org/sax/features/namespace-prefixes';
      VALIDATION_FEATURE = 'http://xml.org/sax/features/validation';
  strict protected
    var
      fcontentHandler: OXSContentHandler; external name 'contentHandler';
      ferrorHandler: OXSErrorHandler; external name 'errorHandler';
      fpp: OXVXmlPullParser; external name 'pp';
      fsystemId: JLString; external name 'systemId';
  public
    constructor create(); overload;  // throws org.xmlpull.v1.XmlPullParserException
    constructor create(para1: OXVXmlPullParser); overload;  // throws org.xmlpull.v1.XmlPullParserException
    function getLength(): jint; overload; virtual;
    function getURI(para1: jint): JLString; overload; virtual;
    function getLocalName(para1: jint): JLString; overload; virtual;
    function getQName(para1: jint): JLString; overload; virtual;
    function getType(para1: jint): JLString; overload; virtual;
    function getValue(para1: jint): JLString; overload; virtual;
    function getIndex(para1: JLString; para2: JLString): jint; overload; virtual;
    function getIndex(para1: JLString): jint; overload; virtual;
    function getType(para1: JLString; para2: JLString): JLString; overload; virtual;
    function getType(para1: JLString): JLString; overload; virtual;
    function getValue(para1: JLString; para2: JLString): JLString; overload; virtual;
    function getValue(para1: JLString): JLString; overload; virtual;
    function getPublicId(): JLString; overload; virtual;
    function getSystemId(): JLString; overload; virtual;
    function getLineNumber(): jint; overload; virtual;
    function getColumnNumber(): jint; overload; virtual;
    function getFeature(para1: JLString): jboolean; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getProperty(para1: JLString): JLObject; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setProperty(para1: JLString; para2: JLObject); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setEntityResolver(para1: OXSEntityResolver); overload; virtual;
    function getEntityResolver(): OXSEntityResolver; overload; virtual;
    procedure setDTDHandler(para1: OXSDTDHandler); overload; virtual;
    function getDTDHandler(): OXSDTDHandler; overload; virtual;
    procedure setContentHandler(para1: OXSContentHandler); overload; virtual;
    function getContentHandler(): OXSContentHandler; overload; virtual;
    procedure setErrorHandler(para1: OXSErrorHandler); overload; virtual;
    function getErrorHandler(): OXSErrorHandler; overload; virtual;
    procedure parse(para1: OXSInputSource); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parseSubTree(para1: OXVXmlPullParser); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
  strict protected
    procedure startElement(para1: JLString; para2: JLString; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException
  end;

  JXTSTransformerHandler = interface external 'javax.xml.transform.sax' name 'TransformerHandler' (OXSContentHandler, OXSELexicalHandler, OXSDTDHandler)
    procedure setResult(para1: JXTResult); overload;  // throws java.lang.IllegalArgumentException
    procedure setSystemId(para1: JLString); overload;
    function getSystemId(): JLString; overload;
    function getTransformer(): JXTTransformer; overload;
  end;

  ACRXmlResourceParser = interface external 'android.content.res' name 'XmlResourceParser' (OXVXmlPullParser, AUAttributeSet, JLAutoCloseable)
    procedure close(); overload;
  end;

  AAAuthenticatorException = class external 'android.accounts' name 'AuthenticatorException' (AAAccountsException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  AANetworkErrorException = class external 'android.accounts' name 'NetworkErrorException' (AAAccountsException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  AAOperationCanceledException = class external 'android.accounts' name 'OperationCanceledException' (AAAccountsException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  AAPendingIntent = class sealed external 'android.app' name 'PendingIntent' (JLObject, AOParcelable)
  public
    type
      InnerOnFinished = interface;
      Arr1InnerOnFinished = array of InnerOnFinished;
      Arr2InnerOnFinished = array of Arr1InnerOnFinished;
      Arr3InnerOnFinished = array of Arr2InnerOnFinished;
      InnerCanceledException = class;
      Arr1InnerCanceledException = array of InnerCanceledException;
      Arr2InnerCanceledException = array of Arr1InnerCanceledException;
      Arr3InnerCanceledException = array of Arr2InnerCanceledException;
      InnerOnFinished = interface external 'android.app' name 'OnFinished' 
        procedure onSendFinished(para1: AAPendingIntent; para2: ACIntent; para3: jint; para4: JLString; para5: AOBundle); overload;
      end;

      InnerCanceledException = class external 'android.app' name 'CanceledException' (AUAndroidException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        constructor create(para1: JLException); overload;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_CANCEL_CURRENT = 268435456;
      FLAG_NO_CREATE = 536870912;
      FLAG_ONE_SHOT = 1073741824;
      FLAG_UPDATE_CURRENT = 134217728;
  public
    class function getActivity(para1: ACContext; para2: jint; para3: ACIntent; para4: jint): AAPendingIntent; static; overload;
    class function getActivity(para1: ACContext; para2: jint; para3: ACIntent; para4: jint; para5: AOBundle): AAPendingIntent; static; overload;
    class function getActivities(para1: ACContext; para2: jint; para3: Arr1ACIntent; para4: jint): AAPendingIntent; static; overload;
    class function getActivities(para1: ACContext; para2: jint; var para3: array of ACIntent; para4: jint): AAPendingIntent; static; overload;
    class function getActivities(para1: ACContext; para2: jint; para3: Arr1ACIntent; para4: jint; para5: AOBundle): AAPendingIntent; static; overload;
    class function getActivities(para1: ACContext; para2: jint; var para3: array of ACIntent; para4: jint; para5: AOBundle): AAPendingIntent; static; overload;
    class function getBroadcast(para1: ACContext; para2: jint; para3: ACIntent; para4: jint): AAPendingIntent; static; overload;
    class function getService(para1: ACContext; para2: jint; para3: ACIntent; para4: jint): AAPendingIntent; static; overload;
    function getIntentSender(): ACIntentSender; overload; virtual;
    procedure cancel(); overload; virtual;
    procedure send(); overload; virtual;  // throws android.app.PendingIntent$CanceledException
    procedure send(para1: jint); overload; virtual;  // throws android.app.PendingIntent$CanceledException
    procedure send(para1: ACContext; para2: jint; para3: ACIntent); overload; virtual;  // throws android.app.PendingIntent$CanceledException
    procedure send(para1: jint; para2: AAPendingIntent.InnerOnFinished; para3: AOHandler); overload; virtual;  // throws android.app.PendingIntent$CanceledException
    procedure send(para1: ACContext; para2: jint; para3: ACIntent; para4: AAPendingIntent.InnerOnFinished; para5: AOHandler); overload; virtual;  // throws android.app.PendingIntent$CanceledException
    procedure send(para1: ACContext; para2: jint; para3: ACIntent; para4: AAPendingIntent.InnerOnFinished; para5: AOHandler; para6: JLString); overload; virtual;  // throws android.app.PendingIntent$CanceledException
    function getTargetPackage(): JLString; overload; virtual;
    function getCreatorPackage(): JLString; overload; virtual;
    function getCreatorUid(): jint; overload; virtual;
    function getCreatorUserHandle(): AOUserHandle; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    class procedure writePendingIntentOrNullToParcel(para1: AAPendingIntent; para2: AOParcel); static; overload;
    class function readPendingIntentOrNullFromParcel(para1: AOParcel): AAPendingIntent; static; overload;
  end;

  ACIntentFilter = class external 'android.content' name 'IntentFilter' (JLObject, AOParcelable)
  public
    type
      InnerAuthorityEntry = class;
      Arr1InnerAuthorityEntry = array of InnerAuthorityEntry;
      Arr2InnerAuthorityEntry = array of Arr1InnerAuthorityEntry;
      Arr3InnerAuthorityEntry = array of Arr2InnerAuthorityEntry;
      InnerMalformedMimeTypeException = class;
      Arr1InnerMalformedMimeTypeException = array of InnerMalformedMimeTypeException;
      Arr2InnerMalformedMimeTypeException = array of Arr1InnerMalformedMimeTypeException;
      Arr3InnerMalformedMimeTypeException = array of Arr2InnerMalformedMimeTypeException;
      InnerAuthorityEntry = class sealed external 'android.content' name 'AuthorityEntry' (JLObject)
      public
        constructor create(para1: JLString; para2: JLString); overload;
        function getHost(): JLString; overload; virtual;
        function getPort(): jint; overload; virtual;
        function match(para1: ANUri): jint; overload; virtual;
      end;

      InnerMalformedMimeTypeException = class external 'android.content' name 'MalformedMimeTypeException' (AUAndroidException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      MATCH_ADJUSTMENT_MASK = 65535;
      MATCH_ADJUSTMENT_NORMAL = 32768;
      MATCH_CATEGORY_EMPTY = 1048576;
      MATCH_CATEGORY_HOST = 3145728;
      MATCH_CATEGORY_MASK = 268369920;
      MATCH_CATEGORY_PATH = 5242880;
      MATCH_CATEGORY_PORT = 4194304;
      MATCH_CATEGORY_SCHEME = 2097152;
      MATCH_CATEGORY_SCHEME_SPECIFIC_PART = 5767168;
      MATCH_CATEGORY_TYPE = 6291456;
      NO_MATCH_ACTION = -3;
      NO_MATCH_CATEGORY = -4;
      NO_MATCH_DATA = -2;
      NO_MATCH_TYPE = -1;
      SYSTEM_HIGH_PRIORITY = 1000;
      SYSTEM_LOW_PRIORITY = -1000;
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;  // throws android.content.IntentFilter$MalformedMimeTypeException
    constructor create(para1: ACIntentFilter); overload;
    class function create_(para1: JLString; para2: JLString): ACIntentFilter; static; external name 'create'; overload;
    procedure setPriority(para1: jint); overload; virtual; final;
    function getPriority(): jint; overload; virtual; final;
    procedure addAction(para1: JLString); overload; virtual; final;
    function countActions(): jint; overload; virtual; final;
    function getAction(para1: jint): JLString; overload; virtual; final;
    function hasAction(para1: JLString): jboolean; overload; virtual; final;
    function matchAction(para1: JLString): jboolean; overload; virtual; final;
    function actionsIterator(): JUIterator; overload; virtual; final;
    procedure addDataType(para1: JLString); overload; virtual; final;  // throws android.content.IntentFilter$MalformedMimeTypeException
    function hasDataType(para1: JLString): jboolean; overload; virtual; final;
    function countDataTypes(): jint; overload; virtual; final;
    function getDataType(para1: jint): JLString; overload; virtual; final;
    function typesIterator(): JUIterator; overload; virtual; final;
    procedure addDataScheme(para1: JLString); overload; virtual; final;
    function countDataSchemes(): jint; overload; virtual; final;
    function getDataScheme(para1: jint): JLString; overload; virtual; final;
    function hasDataScheme(para1: JLString): jboolean; overload; virtual; final;
    function schemesIterator(): JUIterator; overload; virtual; final;
    procedure addDataSchemeSpecificPart(para1: JLString; para2: jint); overload; virtual; final;
    function countDataSchemeSpecificParts(): jint; overload; virtual; final;
    function getDataSchemeSpecificPart(para1: jint): AOPatternMatcher; overload; virtual; final;
    function hasDataSchemeSpecificPart(para1: JLString): jboolean; overload; virtual; final;
    function schemeSpecificPartsIterator(): JUIterator; overload; virtual; final;
    procedure addDataAuthority(para1: JLString; para2: JLString); overload; virtual; final;
    function countDataAuthorities(): jint; overload; virtual; final;
    function getDataAuthority(para1: jint): ACIntentFilter.InnerAuthorityEntry; overload; virtual; final;
    function hasDataAuthority(para1: ANUri): jboolean; overload; virtual; final;
    function authoritiesIterator(): JUIterator; overload; virtual; final;
    procedure addDataPath(para1: JLString; para2: jint); overload; virtual; final;
    function countDataPaths(): jint; overload; virtual; final;
    function getDataPath(para1: jint): AOPatternMatcher; overload; virtual; final;
    function hasDataPath(para1: JLString): jboolean; overload; virtual; final;
    function pathsIterator(): JUIterator; overload; virtual; final;
    function matchDataAuthority(para1: ANUri): jint; overload; virtual; final;
    function matchData(para1: JLString; para2: JLString; para3: ANUri): jint; overload; virtual; final;
    procedure addCategory(para1: JLString); overload; virtual; final;
    function countCategories(): jint; overload; virtual; final;
    function getCategory(para1: jint): JLString; overload; virtual; final;
    function hasCategory(para1: JLString): jboolean; overload; virtual; final;
    function categoriesIterator(): JUIterator; overload; virtual; final;
    function matchCategories(para1: JUSet): JLString; overload; virtual; final;
    function match(para1: ACContentResolver; para2: ACIntent; para3: jboolean; para4: JLString): jint; overload; virtual; final;
    function match(para1: JLString; para2: JLString; para3: JLString; para4: ANUri; para5: JUSet; para6: JLString): jint; overload; virtual; final;
    procedure writeToXml(para1: OXVXmlSerializer); overload; virtual;  // throws java.io.IOException
    procedure readFromXml(para1: OXVXmlPullParser); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function describeContents(): jint; overload; virtual; final;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual; final;
  end;

  ACIntentSender = class external 'android.content' name 'IntentSender' (JLObject, AOParcelable)
  public
    type
      InnerOnFinished = interface;
      Arr1InnerOnFinished = array of InnerOnFinished;
      Arr2InnerOnFinished = array of Arr1InnerOnFinished;
      Arr3InnerOnFinished = array of Arr2InnerOnFinished;
      InnerSendIntentException = class;
      Arr1InnerSendIntentException = array of InnerSendIntentException;
      Arr2InnerSendIntentException = array of Arr1InnerSendIntentException;
      Arr3InnerSendIntentException = array of Arr2InnerSendIntentException;
      InnerOnFinished = interface external 'android.content' name 'OnFinished' 
        procedure onSendFinished(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: JLString; para5: AOBundle); overload;
      end;

      InnerSendIntentException = class external 'android.content' name 'SendIntentException' (AUAndroidException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        constructor create(para1: JLException); overload;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    procedure sendIntent(para1: ACContext; para2: jint; para3: ACIntent; para4: ACIntentSender.InnerOnFinished; para5: AOHandler); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure sendIntent(para1: ACContext; para2: jint; para3: ACIntent; para4: ACIntentSender.InnerOnFinished; para5: AOHandler; para6: JLString); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    function getTargetPackage(): JLString; overload; virtual;
    function getCreatorPackage(): JLString; overload; virtual;
    function getCreatorUid(): jint; overload; virtual;
    function getCreatorUserHandle(): AOUserHandle; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    class procedure writeIntentSenderOrNullToParcel(para1: ACIntentSender; para2: AOParcel); static; overload;
    class function readIntentSenderOrNullFromParcel(para1: AOParcel): ACIntentSender; static; overload;
  end;

  ACPPackageManager = class abstract external 'android.content.pm' name 'PackageManager' (JLObject)
  public
    type
      InnerNameNotFoundException = class;
      Arr1InnerNameNotFoundException = array of InnerNameNotFoundException;
      Arr2InnerNameNotFoundException = array of Arr1InnerNameNotFoundException;
      Arr3InnerNameNotFoundException = array of Arr2InnerNameNotFoundException;
      InnerNameNotFoundException = class external 'android.content.pm' name 'NameNotFoundException' (AUAndroidException)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
      end;

  public
    const
      COMPONENT_ENABLED_STATE_DEFAULT = 0;
      COMPONENT_ENABLED_STATE_DISABLED = 2;
      COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED = 4;
      COMPONENT_ENABLED_STATE_DISABLED_USER = 3;
      COMPONENT_ENABLED_STATE_ENABLED = 1;
      DONT_KILL_APP = 1;
      EXTRA_VERIFICATION_ID = 'android.content.pm.extra.VERIFICATION_ID';
      EXTRA_VERIFICATION_RESULT = 'android.content.pm.extra.VERIFICATION_RESULT';
      FEATURE_APP_WIDGETS = 'android.software.app_widgets';
      FEATURE_AUDIO_LOW_LATENCY = 'android.hardware.audio.low_latency';
      FEATURE_AUDIO_OUTPUT = 'android.hardware.audio.output';
      FEATURE_BACKUP = 'android.software.backup';
      FEATURE_BLUETOOTH = 'android.hardware.bluetooth';
      FEATURE_BLUETOOTH_LE = 'android.hardware.bluetooth_le';
      FEATURE_CAMERA = 'android.hardware.camera';
      FEATURE_CAMERA_ANY = 'android.hardware.camera.any';
      FEATURE_CAMERA_AUTOFOCUS = 'android.hardware.camera.autofocus';
      FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING = 'android.hardware.camera.capability.manual_post_processing';
      FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR = 'android.hardware.camera.capability.manual_sensor';
      FEATURE_CAMERA_CAPABILITY_RAW = 'android.hardware.camera.capability.raw';
      FEATURE_CAMERA_EXTERNAL = 'android.hardware.camera.external';
      FEATURE_CAMERA_FLASH = 'android.hardware.camera.flash';
      FEATURE_CAMERA_FRONT = 'android.hardware.camera.front';
      FEATURE_CAMERA_LEVEL_FULL = 'android.hardware.camera.level.full';
      FEATURE_CONNECTION_SERVICE = 'android.software.connectionservice';
      FEATURE_CONSUMER_IR = 'android.hardware.consumerir';
      FEATURE_DEVICE_ADMIN = 'android.software.device_admin';
      FEATURE_FAKETOUCH = 'android.hardware.faketouch';
      FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT = 'android.hardware.faketouch.multitouch.distinct';
      FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND = 'android.hardware.faketouch.multitouch.jazzhand';
      FEATURE_GAMEPAD = 'android.hardware.gamepad';
      FEATURE_HOME_SCREEN = 'android.software.home_screen';
      FEATURE_INPUT_METHODS = 'android.software.input_methods';
      FEATURE_LEANBACK = 'android.software.leanback';
      FEATURE_LIVE_TV = 'android.software.live_tv';
      FEATURE_LIVE_WALLPAPER = 'android.software.live_wallpaper';
      FEATURE_LOCATION = 'android.hardware.location';
      FEATURE_LOCATION_GPS = 'android.hardware.location.gps';
      FEATURE_LOCATION_NETWORK = 'android.hardware.location.network';
      FEATURE_MANAGED_USERS = 'android.software.managed_users';
      FEATURE_MICROPHONE = 'android.hardware.microphone';
      FEATURE_NFC = 'android.hardware.nfc';
      FEATURE_NFC_HOST_CARD_EMULATION = 'android.hardware.nfc.hce';
      FEATURE_OPENGLES_EXTENSION_PACK = 'android.hardware.opengles.aep';
      FEATURE_PRINTING = 'android.software.print';
      FEATURE_SCREEN_LANDSCAPE = 'android.hardware.screen.landscape';
      FEATURE_SCREEN_PORTRAIT = 'android.hardware.screen.portrait';
      FEATURE_SECURELY_REMOVES_USERS = 'android.software.securely_removes_users';
      FEATURE_SENSOR_ACCELEROMETER = 'android.hardware.sensor.accelerometer';
      FEATURE_SENSOR_AMBIENT_TEMPERATURE = 'android.hardware.sensor.ambient_temperature';
      FEATURE_SENSOR_BAROMETER = 'android.hardware.sensor.barometer';
      FEATURE_SENSOR_COMPASS = 'android.hardware.sensor.compass';
      FEATURE_SENSOR_GYROSCOPE = 'android.hardware.sensor.gyroscope';
      FEATURE_SENSOR_HEART_RATE = 'android.hardware.sensor.heartrate';
      FEATURE_SENSOR_HEART_RATE_ECG = 'android.hardware.sensor.heartrate.ecg';
      FEATURE_SENSOR_LIGHT = 'android.hardware.sensor.light';
      FEATURE_SENSOR_PROXIMITY = 'android.hardware.sensor.proximity';
      FEATURE_SENSOR_RELATIVE_HUMIDITY = 'android.hardware.sensor.relative_humidity';
      FEATURE_SENSOR_STEP_COUNTER = 'android.hardware.sensor.stepcounter';
      FEATURE_SENSOR_STEP_DETECTOR = 'android.hardware.sensor.stepdetector';
      FEATURE_SIP = 'android.software.sip';
      FEATURE_SIP_VOIP = 'android.software.sip.voip';
      FEATURE_TELEPHONY = 'android.hardware.telephony';
      FEATURE_TELEPHONY_CDMA = 'android.hardware.telephony.cdma';
      FEATURE_TELEPHONY_GSM = 'android.hardware.telephony.gsm';
      FEATURE_TELEVISION = 'android.hardware.type.television' deprecated;
      FEATURE_TOUCHSCREEN = 'android.hardware.touchscreen';
      FEATURE_TOUCHSCREEN_MULTITOUCH = 'android.hardware.touchscreen.multitouch';
      FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT = 'android.hardware.touchscreen.multitouch.distinct';
      FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND = 'android.hardware.touchscreen.multitouch.jazzhand';
      FEATURE_USB_ACCESSORY = 'android.hardware.usb.accessory';
      FEATURE_USB_HOST = 'android.hardware.usb.host';
      FEATURE_VERIFIED_BOOT = 'android.software.verified_boot';
      FEATURE_WATCH = 'android.hardware.type.watch';
      FEATURE_WEBVIEW = 'android.software.webview';
      FEATURE_WIFI = 'android.hardware.wifi';
      FEATURE_WIFI_DIRECT = 'android.hardware.wifi.direct';
      GET_ACTIVITIES = 1;
      GET_CONFIGURATIONS = 16384;
      GET_DISABLED_COMPONENTS = 512;
      GET_DISABLED_UNTIL_USED_COMPONENTS = 32768;
      GET_GIDS = 256;
      GET_INSTRUMENTATION = 16;
      GET_INTENT_FILTERS = 32;
      GET_META_DATA = 128;
      GET_PERMISSIONS = 4096;
      GET_PROVIDERS = 8;
      GET_RECEIVERS = 2;
      GET_RESOLVED_FILTER = 64;
      GET_SERVICES = 4;
      GET_SHARED_LIBRARY_FILES = 1024;
      GET_SIGNATURES = 64;
      GET_UNINSTALLED_PACKAGES = 8192;
      GET_URI_PERMISSION_PATTERNS = 2048;
      MATCH_DEFAULT_ONLY = 65536;
      MAXIMUM_VERIFICATION_TIMEOUT = jlong(3600000);
      PERMISSION_DENIED = -1;
      PERMISSION_GRANTED = 0;
      SIGNATURE_FIRST_NOT_SIGNED = -1;
      SIGNATURE_MATCH = 0;
      SIGNATURE_NEITHER_SIGNED = 1;
      SIGNATURE_NO_MATCH = -3;
      SIGNATURE_SECOND_NOT_SIGNED = -2;
      SIGNATURE_UNKNOWN_PACKAGE = -4;
      VERIFICATION_ALLOW = 1;
      VERIFICATION_REJECT = -1;
  public
    constructor create(); overload;
    function getPackageInfo(para1: JLString; para2: jint): ACPPackageInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function currentToCanonicalPackageNames(para1: Arr1JLString): Arr1JLString; overload; virtual; abstract;
    function currentToCanonicalPackageNames(var para1: array of JLString): Arr1JLString; overload; virtual; abstract;
    function canonicalToCurrentPackageNames(para1: Arr1JLString): Arr1JLString; overload; virtual; abstract;
    function canonicalToCurrentPackageNames(var para1: array of JLString): Arr1JLString; overload; virtual; abstract;
    function getLaunchIntentForPackage(para1: JLString): ACIntent; overload; virtual; abstract;
    function getLeanbackLaunchIntentForPackage(para1: JLString): ACIntent; overload; virtual; abstract;
    function getPackageGids(para1: JLString): Arr1jint; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getPermissionInfo(para1: JLString; para2: jint): ACPPermissionInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function queryPermissionsByGroup(para1: JLString; para2: jint): JUList; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getPermissionGroupInfo(para1: JLString; para2: jint): ACPPermissionGroupInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getAllPermissionGroups(para1: jint): JUList; overload; virtual; abstract;
    function getApplicationInfo(para1: JLString; para2: jint): ACPApplicationInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityInfo(para1: ACComponentName; para2: jint): ACPActivityInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getReceiverInfo(para1: ACComponentName; para2: jint): ACPActivityInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getServiceInfo(para1: ACComponentName; para2: jint): ACPServiceInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getProviderInfo(para1: ACComponentName; para2: jint): ACPProviderInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getInstalledPackages(para1: jint): JUList; overload; virtual; abstract;
    function getPackagesHoldingPermissions(para1: Arr1JLString; para2: jint): JUList; overload; virtual; abstract;
    function getPackagesHoldingPermissions(var para1: array of JLString; para2: jint): JUList; overload; virtual; abstract;
    function checkPermission(para1: JLString; para2: JLString): jint; overload; virtual; abstract;
    function addPermission(para1: ACPPermissionInfo): jboolean; overload; virtual; abstract;
    function addPermissionAsync(para1: ACPPermissionInfo): jboolean; overload; virtual; abstract;
    procedure removePermission(para1: JLString); overload; virtual; abstract;
    function checkSignatures(para1: JLString; para2: JLString): jint; overload; virtual; abstract;
    function checkSignatures(para1: jint; para2: jint): jint; overload; virtual; abstract;
    function getPackagesForUid(para1: jint): Arr1JLString; overload; virtual; abstract;
    function getNameForUid(para1: jint): JLString; overload; virtual; abstract;
    function getInstalledApplications(para1: jint): JUList; overload; virtual; abstract;
    function getSystemSharedLibraryNames(): Arr1JLString; overload; virtual; abstract;
    function getSystemAvailableFeatures(): Arr1ACPFeatureInfo; overload; virtual; abstract;
    function hasSystemFeature(para1: JLString): jboolean; overload; virtual; abstract;
    function resolveActivity(para1: ACIntent; para2: jint): ACPResolveInfo; overload; virtual; abstract;
    function queryIntentActivities(para1: ACIntent; para2: jint): JUList; overload; virtual; abstract;
    function queryIntentActivityOptions(para1: ACComponentName; para2: Arr1ACIntent; para3: ACIntent; para4: jint): JUList; overload; virtual; abstract;
    function queryIntentActivityOptions(para1: ACComponentName; var para2: array of ACIntent; para3: ACIntent; para4: jint): JUList; overload; virtual; abstract;
    function queryBroadcastReceivers(para1: ACIntent; para2: jint): JUList; overload; virtual; abstract;
    function resolveService(para1: ACIntent; para2: jint): ACPResolveInfo; overload; virtual; abstract;
    function queryIntentServices(para1: ACIntent; para2: jint): JUList; overload; virtual; abstract;
    function queryIntentContentProviders(para1: ACIntent; para2: jint): JUList; overload; virtual; abstract;
    function resolveContentProvider(para1: JLString; para2: jint): ACPProviderInfo; overload; virtual; abstract;
    function queryContentProviders(para1: JLString; para2: jint; para3: jint): JUList; overload; virtual; abstract;
    function getInstrumentationInfo(para1: ACComponentName; para2: jint): ACPInstrumentationInfo; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function queryInstrumentation(para1: JLString; para2: jint): JUList; overload; virtual; abstract;
    function getDrawable(para1: JLString; para2: jint; para3: ACPApplicationInfo): AGDDrawable; overload; virtual; abstract;
    function getActivityIcon(para1: ACComponentName): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityIcon(para1: ACIntent): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityBanner(para1: ACComponentName): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityBanner(para1: ACIntent): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getDefaultActivityIcon(): AGDDrawable; overload; virtual; abstract;
    function getApplicationIcon(para1: ACPApplicationInfo): AGDDrawable; overload; virtual; abstract;
    function getApplicationIcon(para1: JLString): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getApplicationBanner(para1: ACPApplicationInfo): AGDDrawable; overload; virtual; abstract;
    function getApplicationBanner(para1: JLString): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityLogo(para1: ACComponentName): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityLogo(para1: ACIntent): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getApplicationLogo(para1: ACPApplicationInfo): AGDDrawable; overload; virtual; abstract;
    function getApplicationLogo(para1: JLString): AGDDrawable; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getUserBadgedIcon(para1: AGDDrawable; para2: AOUserHandle): AGDDrawable; overload; virtual; abstract;
    function getUserBadgedDrawableForDensity(para1: AGDDrawable; para2: AOUserHandle; para3: AGRect; para4: jint): AGDDrawable; overload; virtual; abstract;
    function getUserBadgedLabel(para1: JLCharSequence; para2: AOUserHandle): JLCharSequence; overload; virtual; abstract;
    function getText(para1: JLString; para2: jint; para3: ACPApplicationInfo): JLCharSequence; overload; virtual; abstract;
    function getXml(para1: JLString; para2: jint; para3: ACPApplicationInfo): ACRXmlResourceParser; overload; virtual; abstract;
    function getApplicationLabel(para1: ACPApplicationInfo): JLCharSequence; overload; virtual; abstract;
    function getResourcesForActivity(para1: ACComponentName): ACRResources; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getResourcesForApplication(para1: ACPApplicationInfo): ACRResources; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getResourcesForApplication(para1: JLString): ACRResources; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getPackageArchiveInfo(para1: JLString; para2: jint): ACPPackageInfo; overload; virtual;
    procedure verifyPendingInstall(para1: jint; para2: jint); overload; virtual; abstract;
    procedure extendVerificationTimeout(para1: jint; para2: jint; para3: jlong); overload; virtual; abstract;
    procedure setInstallerPackageName(para1: JLString; para2: JLString); overload; virtual; abstract;
    function getInstallerPackageName(para1: JLString): JLString; overload; virtual; abstract;
    procedure addPackageToPreferred(para1: JLString); overload; virtual; abstract;
    procedure removePackageFromPreferred(para1: JLString); overload; virtual; abstract;
    function getPreferredPackages(para1: jint): JUList; overload; virtual; abstract;
    procedure addPreferredActivity(para1: ACIntentFilter; para2: jint; para3: Arr1ACComponentName; para4: ACComponentName); overload; virtual; abstract;
    procedure addPreferredActivity(para1: ACIntentFilter; para2: jint; var para3: array of ACComponentName; para4: ACComponentName); overload; virtual; abstract;
    procedure clearPackagePreferredActivities(para1: JLString); overload; virtual; abstract;
    function getPreferredActivities(para1: JUList; para2: JUList; para3: JLString): jint; overload; virtual; abstract;
    procedure setComponentEnabledSetting(para1: ACComponentName; para2: jint; para3: jint); overload; virtual; abstract;
    function getComponentEnabledSetting(para1: ACComponentName): jint; overload; virtual; abstract;
    procedure setApplicationEnabledSetting(para1: JLString; para2: jint; para3: jint); overload; virtual; abstract;
    function getApplicationEnabledSetting(para1: JLString): jint; overload; virtual; abstract;
    function isSafeMode(): jboolean; overload; virtual; abstract;
    function getPackageInstaller(): ACPPackageInstaller; overload; virtual; abstract;
  end;

  AORemoteException = class external 'android.os' name 'RemoteException' (AUAndroidException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  APSettings = class sealed external 'android.provider' name 'Settings' (JLObject)
  public
    type
      InnerNameValueTable = class;
      Arr1InnerNameValueTable = array of InnerNameValueTable;
      Arr2InnerNameValueTable = array of Arr1InnerNameValueTable;
      Arr3InnerNameValueTable = array of Arr2InnerNameValueTable;
      InnerSettingNotFoundException = class;
      Arr1InnerSettingNotFoundException = array of InnerSettingNotFoundException;
      Arr2InnerSettingNotFoundException = array of Arr1InnerSettingNotFoundException;
      Arr3InnerSettingNotFoundException = array of Arr2InnerSettingNotFoundException;
      InnerGlobal = class;
      Arr1InnerGlobal = array of InnerGlobal;
      Arr2InnerGlobal = array of Arr1InnerGlobal;
      Arr3InnerGlobal = array of Arr2InnerGlobal;
      InnerSecure = class;
      Arr1InnerSecure = array of InnerSecure;
      Arr2InnerSecure = array of Arr1InnerSecure;
      Arr3InnerSecure = array of Arr2InnerSecure;
      InnerSystem = class;
      Arr1InnerSystem = array of InnerSystem;
      Arr2InnerSystem = array of Arr1InnerSystem;
      Arr3InnerSystem = array of Arr2InnerSystem;
      InnerNameValueTable = class external 'android.provider' name 'NameValueTable' (JLObject, APBaseColumns)
      public
        const
          NAME = 'name';
          VALUE = 'value';
      public
        constructor create(); overload;
      strict protected
        class function putString(para1: ACContentResolver; para2: ANUri; para3: JLString; para4: JLString): jboolean; static; overload;
      public
        class function getUriFor(para1: ANUri; para2: JLString): ANUri; static; overload;
      end;

      InnerSettingNotFoundException = class external 'android.provider' name 'SettingNotFoundException' (AUAndroidException)
      public
        constructor create(para1: JLString); overload;
      end;

      InnerGlobal = class sealed external 'android.provider' name 'Global' (InnerNameValueTable)
      public
        const
          ADB_ENABLED = 'adb_enabled';
          AIRPLANE_MODE_ON = 'airplane_mode_on';
          AIRPLANE_MODE_RADIOS = 'airplane_mode_radios';
          ALWAYS_FINISH_ACTIVITIES = 'always_finish_activities';
          ANIMATOR_DURATION_SCALE = 'animator_duration_scale';
          AUTO_TIME = 'auto_time';
          AUTO_TIME_ZONE = 'auto_time_zone';
          BLUETOOTH_ON = 'bluetooth_on';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DATA_ROAMING = 'data_roaming';
          DEBUG_APP = 'debug_app';
          DEVELOPMENT_SETTINGS_ENABLED = 'development_settings_enabled';
          DEVICE_PROVISIONED = 'device_provisioned';
          HTTP_PROXY = 'http_proxy';
          INSTALL_NON_MARKET_APPS = 'install_non_market_apps' deprecated;
          MODE_RINGER = 'mode_ringer';
          NETWORK_PREFERENCE = 'network_preference';
          RADIO_BLUETOOTH = 'bluetooth';
          RADIO_CELL = 'cell';
          RADIO_NFC = 'nfc';
          RADIO_WIFI = 'wifi';
          SHOW_PROCESSES = 'show_processes';
          STAY_ON_WHILE_PLUGGED_IN = 'stay_on_while_plugged_in';
          SYS_PROP_SETTING_VERSION = 'sys.settings_global_version';
          TRANSITION_ANIMATION_SCALE = 'transition_animation_scale';
          USB_MASS_STORAGE_ENABLED = 'usb_mass_storage_enabled';
          USE_GOOGLE_MAIL = 'use_google_mail';
          WAIT_FOR_DEBUGGER = 'wait_for_debugger';
          WIFI_MAX_DHCP_RETRY_COUNT = 'wifi_max_dhcp_retry_count';
          WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS = 'wifi_mobile_data_transition_wakelock_timeout_ms';
          WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON = 'wifi_networks_available_notification_on';
          WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY = 'wifi_networks_available_repeat_delay';
          WIFI_NUM_OPEN_NETWORKS_KEPT = 'wifi_num_open_networks_kept';
          WIFI_ON = 'wifi_on';
          WIFI_SLEEP_POLICY = 'wifi_sleep_policy';
          WIFI_SLEEP_POLICY_DEFAULT = 0;
          WIFI_SLEEP_POLICY_NEVER = 2;
          WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED = 1;
          WIFI_WATCHDOG_ON = 'wifi_watchdog_on';
          WINDOW_ANIMATION_SCALE = 'window_animation_scale';
      public
        constructor create(); overload;
        class function getString(para1: ACContentResolver; para2: JLString): JLString; static; overload;
        class function putString(para1: ACContentResolver; para2: JLString; para3: JLString): jboolean; static; overload;
        class function getUriFor(para1: JLString): ANUri; static; overload;
        class function getInt(para1: ACContentResolver; para2: JLString; para3: jint): jint; static; overload;
        class function getInt(para1: ACContentResolver; para2: JLString): jint; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putInt(para1: ACContentResolver; para2: JLString; para3: jint): jboolean; static; overload;
        class function getLong(para1: ACContentResolver; para2: JLString; para3: jlong): jlong; static; overload;
        class function getLong(para1: ACContentResolver; para2: JLString): jlong; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putLong(para1: ACContentResolver; para2: JLString; para3: jlong): jboolean; static; overload;
        class function getFloat(para1: ACContentResolver; para2: JLString; para3: jfloat): jfloat; static; overload;
        class function getFloat(para1: ACContentResolver; para2: JLString): jfloat; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putFloat(para1: ACContentResolver; para2: JLString; para3: jfloat): jboolean; static; overload;
      end;

      InnerSecure = class sealed external 'android.provider' name 'Secure' (InnerNameValueTable)
      public
        const
          ACCESSIBILITY_DISPLAY_INVERSION_ENABLED = 'accessibility_display_inversion_enabled';
          ACCESSIBILITY_ENABLED = 'accessibility_enabled';
          ACCESSIBILITY_SPEAK_PASSWORD = 'speak_password';
          ADB_ENABLED = 'adb_enabled' deprecated;
          ALLOWED_GEOLOCATION_ORIGINS = 'allowed_geolocation_origins';
          ALLOW_MOCK_LOCATION = 'mock_location';
          ANDROID_ID = 'android_id';
          BACKGROUND_DATA = 'background_data' deprecated;
          BLUETOOTH_ON = 'bluetooth_on' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DATA_ROAMING = 'data_roaming' deprecated;
          DEFAULT_INPUT_METHOD = 'default_input_method';
          DEVELOPMENT_SETTINGS_ENABLED = 'development_settings_enabled' deprecated;
          DEVICE_PROVISIONED = 'device_provisioned' deprecated;
          ENABLED_ACCESSIBILITY_SERVICES = 'enabled_accessibility_services';
          ENABLED_INPUT_METHODS = 'enabled_input_methods';
          HTTP_PROXY = 'http_proxy' deprecated;
          INPUT_METHOD_SELECTOR_VISIBILITY = 'input_method_selector_visibility';
          INSTALL_NON_MARKET_APPS = 'install_non_market_apps';
          LOCATION_MODE = 'location_mode';
          LOCATION_MODE_BATTERY_SAVING = 2;
          LOCATION_MODE_HIGH_ACCURACY = 3;
          LOCATION_MODE_OFF = 0;
          LOCATION_MODE_SENSORS_ONLY = 1;
          LOCATION_PROVIDERS_ALLOWED = 'location_providers_allowed' deprecated;
          LOCK_PATTERN_ENABLED = 'lock_pattern_autolock';
          LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED = 'lock_pattern_tactile_feedback_enabled' deprecated;
          LOCK_PATTERN_VISIBLE = 'lock_pattern_visible_pattern';
          LOGGING_ID = 'logging_id' deprecated;
          NETWORK_PREFERENCE = 'network_preference' deprecated;
          PARENTAL_CONTROL_ENABLED = 'parental_control_enabled';
          PARENTAL_CONTROL_LAST_UPDATE = 'parental_control_last_update';
          PARENTAL_CONTROL_REDIRECT_URL = 'parental_control_redirect_url';
          SELECTED_INPUT_METHOD_SUBTYPE = 'selected_input_method_subtype';
          SETTINGS_CLASSNAME = 'settings_classname';
          SKIP_FIRST_USE_HINTS = 'skip_first_use_hints';
          SYS_PROP_SETTING_VERSION = 'sys.settings_secure_version';
          TOUCH_EXPLORATION_ENABLED = 'touch_exploration_enabled';
          TTS_DEFAULT_COUNTRY = 'tts_default_country' deprecated;
          TTS_DEFAULT_LANG = 'tts_default_lang' deprecated;
          TTS_DEFAULT_PITCH = 'tts_default_pitch';
          TTS_DEFAULT_RATE = 'tts_default_rate';
          TTS_DEFAULT_SYNTH = 'tts_default_synth';
          TTS_DEFAULT_VARIANT = 'tts_default_variant' deprecated;
          TTS_ENABLED_PLUGINS = 'tts_enabled_plugins';
          TTS_USE_DEFAULTS = 'tts_use_defaults' deprecated;
          USB_MASS_STORAGE_ENABLED = 'usb_mass_storage_enabled' deprecated;
          USE_GOOGLE_MAIL = 'use_google_mail' deprecated;
          WIFI_MAX_DHCP_RETRY_COUNT = 'wifi_max_dhcp_retry_count' deprecated;
          WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS = 'wifi_mobile_data_transition_wakelock_timeout_ms' deprecated;
          WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON = 'wifi_networks_available_notification_on' deprecated;
          WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY = 'wifi_networks_available_repeat_delay' deprecated;
          WIFI_NUM_OPEN_NETWORKS_KEPT = 'wifi_num_open_networks_kept' deprecated;
          WIFI_ON = 'wifi_on' deprecated;
          WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE = 'wifi_watchdog_acceptable_packet_loss_percentage' deprecated;
          WIFI_WATCHDOG_AP_COUNT = 'wifi_watchdog_ap_count' deprecated;
          WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS = 'wifi_watchdog_background_check_delay_ms' deprecated;
          WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED = 'wifi_watchdog_background_check_enabled' deprecated;
          WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS = 'wifi_watchdog_background_check_timeout_ms' deprecated;
          WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT = 'wifi_watchdog_initial_ignored_ping_count' deprecated;
          WIFI_WATCHDOG_MAX_AP_CHECKS = 'wifi_watchdog_max_ap_checks' deprecated;
          WIFI_WATCHDOG_ON = 'wifi_watchdog_on' deprecated;
          WIFI_WATCHDOG_PING_COUNT = 'wifi_watchdog_ping_count' deprecated;
          WIFI_WATCHDOG_PING_DELAY_MS = 'wifi_watchdog_ping_delay_ms' deprecated;
          WIFI_WATCHDOG_PING_TIMEOUT_MS = 'wifi_watchdog_ping_timeout_ms' deprecated;
          WIFI_WATCHDOG_WATCH_LIST = 'wifi_watchdog_watch_list' deprecated;
      public
        constructor create(); overload;
        class function getString(para1: ACContentResolver; para2: JLString): JLString; static; overload;
        class function putString(para1: ACContentResolver; para2: JLString; para3: JLString): jboolean; static; overload;
        class function getUriFor(para1: JLString): ANUri; static; overload;
        class function getInt(para1: ACContentResolver; para2: JLString; para3: jint): jint; static; overload;
        class function getInt(para1: ACContentResolver; para2: JLString): jint; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putInt(para1: ACContentResolver; para2: JLString; para3: jint): jboolean; static; overload;
        class function getLong(para1: ACContentResolver; para2: JLString; para3: jlong): jlong; static; overload;
        class function getLong(para1: ACContentResolver; para2: JLString): jlong; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putLong(para1: ACContentResolver; para2: JLString; para3: jlong): jboolean; static; overload;
        class function getFloat(para1: ACContentResolver; para2: JLString; para3: jfloat): jfloat; static; overload;
        class function getFloat(para1: ACContentResolver; para2: JLString): jfloat; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putFloat(para1: ACContentResolver; para2: JLString; para3: jfloat): jboolean; static; overload;
        class function isLocationProviderEnabled(para1: ACContentResolver; para2: JLString): jboolean; static; overload; final;
        class procedure setLocationProviderEnabled(para1: ACContentResolver; para2: JLString; para3: jboolean); static; overload; final;
      end;

      InnerSystem = class sealed external 'android.provider' name 'System' (InnerNameValueTable)
      public
        const
          ACCELEROMETER_ROTATION = 'accelerometer_rotation';
          ADB_ENABLED = 'adb_enabled' deprecated;
          AIRPLANE_MODE_ON = 'airplane_mode_on' deprecated;
          AIRPLANE_MODE_RADIOS = 'airplane_mode_radios' deprecated;
          ALARM_ALERT = 'alarm_alert';
          ALWAYS_FINISH_ACTIVITIES = 'always_finish_activities' deprecated;
          ANDROID_ID = 'android_id' deprecated;
          ANIMATOR_DURATION_SCALE = 'animator_duration_scale' deprecated;
          APPEND_FOR_LAST_AUDIBLE = '_last_audible';
          AUTO_TIME = 'auto_time' deprecated;
          AUTO_TIME_ZONE = 'auto_time_zone' deprecated;
          BLUETOOTH_DISCOVERABILITY = 'bluetooth_discoverability';
          BLUETOOTH_DISCOVERABILITY_TIMEOUT = 'bluetooth_discoverability_timeout';
          BLUETOOTH_ON = 'bluetooth_on' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DATA_ROAMING = 'data_roaming' deprecated;
          DATE_FORMAT = 'date_format';
          DEBUG_APP = 'debug_app' deprecated;
      public
        final class var
          fDEFAULT_ALARM_ALERT_URI: ANUri; external name 'DEFAULT_ALARM_ALERT_URI';
          fDEFAULT_NOTIFICATION_URI: ANUri; external name 'DEFAULT_NOTIFICATION_URI';
          fDEFAULT_RINGTONE_URI: ANUri; external name 'DEFAULT_RINGTONE_URI';
      public
        const
          DEVICE_PROVISIONED = 'device_provisioned' deprecated;
          DIM_SCREEN = 'dim_screen' deprecated;
          DTMF_TONE_WHEN_DIALING = 'dtmf_tone';
          END_BUTTON_BEHAVIOR = 'end_button_behavior';
          FONT_SCALE = 'font_scale';
          HAPTIC_FEEDBACK_ENABLED = 'haptic_feedback_enabled';
          HTTP_PROXY = 'http_proxy' deprecated;
          INSTALL_NON_MARKET_APPS = 'install_non_market_apps' deprecated;
          LOCATION_PROVIDERS_ALLOWED = 'location_providers_allowed' deprecated;
          LOCK_PATTERN_ENABLED = 'lock_pattern_autolock' deprecated;
          LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED = 'lock_pattern_tactile_feedback_enabled' deprecated;
          LOCK_PATTERN_VISIBLE = 'lock_pattern_visible_pattern' deprecated;
          LOGGING_ID = 'logging_id' deprecated;
          MODE_RINGER = 'mode_ringer' deprecated;
          MODE_RINGER_STREAMS_AFFECTED = 'mode_ringer_streams_affected';
          MUTE_STREAMS_AFFECTED = 'mute_streams_affected';
          NETWORK_PREFERENCE = 'network_preference' deprecated;
          NEXT_ALARM_FORMATTED = 'next_alarm_formatted' deprecated;
          NOTIFICATION_SOUND = 'notification_sound';
          PARENTAL_CONTROL_ENABLED = 'parental_control_enabled' deprecated;
          PARENTAL_CONTROL_LAST_UPDATE = 'parental_control_last_update' deprecated;
          PARENTAL_CONTROL_REDIRECT_URL = 'parental_control_redirect_url' deprecated;
          RADIO_BLUETOOTH = 'bluetooth' deprecated;
          RADIO_CELL = 'cell' deprecated;
          RADIO_NFC = 'nfc' deprecated;
          RADIO_WIFI = 'wifi' deprecated;
          RINGTONE = 'ringtone';
          SCREEN_BRIGHTNESS = 'screen_brightness';
          SCREEN_BRIGHTNESS_MODE = 'screen_brightness_mode';
          SCREEN_BRIGHTNESS_MODE_AUTOMATIC = 1;
          SCREEN_BRIGHTNESS_MODE_MANUAL = 0;
          SCREEN_OFF_TIMEOUT = 'screen_off_timeout';
          SETTINGS_CLASSNAME = 'settings_classname' deprecated;
          SETUP_WIZARD_HAS_RUN = 'setup_wizard_has_run';
          SHOW_GTALK_SERVICE_STATUS = 'SHOW_GTALK_SERVICE_STATUS';
          SHOW_PROCESSES = 'show_processes' deprecated;
          SHOW_WEB_SUGGESTIONS = 'show_web_suggestions' deprecated;
          SOUND_EFFECTS_ENABLED = 'sound_effects_enabled';
          STAY_ON_WHILE_PLUGGED_IN = 'stay_on_while_plugged_in' deprecated;
          SYS_PROP_SETTING_VERSION = 'sys.settings_system_version';
          TEXT_AUTO_CAPS = 'auto_caps';
          TEXT_AUTO_PUNCTUATE = 'auto_punctuate';
          TEXT_AUTO_REPLACE = 'auto_replace';
          TEXT_SHOW_PASSWORD = 'show_password';
          TIME_12_24 = 'time_12_24';
          TRANSITION_ANIMATION_SCALE = 'transition_animation_scale' deprecated;
          USB_MASS_STORAGE_ENABLED = 'usb_mass_storage_enabled' deprecated;
          USER_ROTATION = 'user_rotation';
          USE_GOOGLE_MAIL = 'use_google_mail' deprecated;
          VIBRATE_ON = 'vibrate_on';
          VOLUME_ALARM = 'volume_alarm';
          VOLUME_BLUETOOTH_SCO = 'volume_bluetooth_sco';
          VOLUME_MUSIC = 'volume_music';
          VOLUME_NOTIFICATION = 'volume_notification';
          VOLUME_RING = 'volume_ring';
      public
        final class var
          fVOLUME_SETTINGS: Arr1JLString; external name 'VOLUME_SETTINGS';
      public
        const
          VOLUME_SYSTEM = 'volume_system';
          VOLUME_VOICE = 'volume_voice';
          WAIT_FOR_DEBUGGER = 'wait_for_debugger' deprecated;
          WALLPAPER_ACTIVITY = 'wallpaper_activity' deprecated;
          WIFI_MAX_DHCP_RETRY_COUNT = 'wifi_max_dhcp_retry_count' deprecated;
          WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS = 'wifi_mobile_data_transition_wakelock_timeout_ms' deprecated;
          WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON = 'wifi_networks_available_notification_on' deprecated;
          WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY = 'wifi_networks_available_repeat_delay' deprecated;
          WIFI_NUM_OPEN_NETWORKS_KEPT = 'wifi_num_open_networks_kept' deprecated;
          WIFI_ON = 'wifi_on' deprecated;
          WIFI_SLEEP_POLICY = 'wifi_sleep_policy' deprecated;
          WIFI_SLEEP_POLICY_DEFAULT = 0 deprecated;
          WIFI_SLEEP_POLICY_NEVER = 2 deprecated;
          WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED = 1 deprecated;
          WIFI_STATIC_DNS1 = 'wifi_static_dns1' deprecated;
          WIFI_STATIC_DNS2 = 'wifi_static_dns2' deprecated;
          WIFI_STATIC_GATEWAY = 'wifi_static_gateway' deprecated;
          WIFI_STATIC_IP = 'wifi_static_ip' deprecated;
          WIFI_STATIC_NETMASK = 'wifi_static_netmask' deprecated;
          WIFI_USE_STATIC_IP = 'wifi_use_static_ip' deprecated;
          WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE = 'wifi_watchdog_acceptable_packet_loss_percentage' deprecated;
          WIFI_WATCHDOG_AP_COUNT = 'wifi_watchdog_ap_count' deprecated;
          WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS = 'wifi_watchdog_background_check_delay_ms' deprecated;
          WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED = 'wifi_watchdog_background_check_enabled' deprecated;
          WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS = 'wifi_watchdog_background_check_timeout_ms' deprecated;
          WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT = 'wifi_watchdog_initial_ignored_ping_count' deprecated;
          WIFI_WATCHDOG_MAX_AP_CHECKS = 'wifi_watchdog_max_ap_checks' deprecated;
          WIFI_WATCHDOG_ON = 'wifi_watchdog_on' deprecated;
          WIFI_WATCHDOG_PING_COUNT = 'wifi_watchdog_ping_count' deprecated;
          WIFI_WATCHDOG_PING_DELAY_MS = 'wifi_watchdog_ping_delay_ms' deprecated;
          WIFI_WATCHDOG_PING_TIMEOUT_MS = 'wifi_watchdog_ping_timeout_ms' deprecated;
          WINDOW_ANIMATION_SCALE = 'window_animation_scale' deprecated;
      public
        constructor create(); overload;
        class function getString(para1: ACContentResolver; para2: JLString): JLString; static; overload;
        class function putString(para1: ACContentResolver; para2: JLString; para3: JLString): jboolean; static; overload;
        class function getUriFor(para1: JLString): ANUri; static; overload;
        class function getInt(para1: ACContentResolver; para2: JLString; para3: jint): jint; static; overload;
        class function getInt(para1: ACContentResolver; para2: JLString): jint; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putInt(para1: ACContentResolver; para2: JLString; para3: jint): jboolean; static; overload;
        class function getLong(para1: ACContentResolver; para2: JLString; para3: jlong): jlong; static; overload;
        class function getLong(para1: ACContentResolver; para2: JLString): jlong; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putLong(para1: ACContentResolver; para2: JLString; para3: jlong): jboolean; static; overload;
        class function getFloat(para1: ACContentResolver; para2: JLString; para3: jfloat): jfloat; static; overload;
        class function getFloat(para1: ACContentResolver; para2: JLString): jfloat; static; overload;  // throws android.provider.Settings$SettingNotFoundException
        class function putFloat(para1: ACContentResolver; para2: JLString; para3: jfloat): jboolean; static; overload;
        class procedure getConfiguration(para1: ACContentResolver; para2: ACRConfiguration); static; overload;
        class function putConfiguration(para1: ACContentResolver; para2: ACRConfiguration): jboolean; static; overload;
        class function getShowGTalkServiceStatus(para1: ACContentResolver): jboolean; static; overload;
        class procedure setShowGTalkServiceStatus(para1: ACContentResolver; para2: jboolean); static; overload;
      end;

  public
    const
      ACTION_ACCESSIBILITY_SETTINGS = 'android.settings.ACCESSIBILITY_SETTINGS';
      ACTION_ADD_ACCOUNT = 'android.settings.ADD_ACCOUNT_SETTINGS';
      ACTION_AIRPLANE_MODE_SETTINGS = 'android.settings.AIRPLANE_MODE_SETTINGS';
      ACTION_APN_SETTINGS = 'android.settings.APN_SETTINGS';
      ACTION_APPLICATION_DETAILS_SETTINGS = 'android.settings.APPLICATION_DETAILS_SETTINGS';
      ACTION_APPLICATION_DEVELOPMENT_SETTINGS = 'android.settings.APPLICATION_DEVELOPMENT_SETTINGS';
      ACTION_APPLICATION_SETTINGS = 'android.settings.APPLICATION_SETTINGS';
      ACTION_BLUETOOTH_SETTINGS = 'android.settings.BLUETOOTH_SETTINGS';
      ACTION_CAPTIONING_SETTINGS = 'android.settings.CAPTIONING_SETTINGS';
      ACTION_CAST_SETTINGS = 'android.settings.CAST_SETTINGS';
      ACTION_DATA_ROAMING_SETTINGS = 'android.settings.DATA_ROAMING_SETTINGS';
      ACTION_DATE_SETTINGS = 'android.settings.DATE_SETTINGS';
      ACTION_DEVICE_INFO_SETTINGS = 'android.settings.DEVICE_INFO_SETTINGS';
      ACTION_DISPLAY_SETTINGS = 'android.settings.DISPLAY_SETTINGS';
      ACTION_DREAM_SETTINGS = 'android.settings.DREAM_SETTINGS';
      ACTION_HOME_SETTINGS = 'android.settings.HOME_SETTINGS';
      ACTION_INPUT_METHOD_SETTINGS = 'android.settings.INPUT_METHOD_SETTINGS';
      ACTION_INPUT_METHOD_SUBTYPE_SETTINGS = 'android.settings.INPUT_METHOD_SUBTYPE_SETTINGS';
      ACTION_INTERNAL_STORAGE_SETTINGS = 'android.settings.INTERNAL_STORAGE_SETTINGS';
      ACTION_LOCALE_SETTINGS = 'android.settings.LOCALE_SETTINGS';
      ACTION_LOCATION_SOURCE_SETTINGS = 'android.settings.LOCATION_SOURCE_SETTINGS';
      ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS = 'android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS';
      ACTION_MANAGE_APPLICATIONS_SETTINGS = 'android.settings.MANAGE_APPLICATIONS_SETTINGS';
      ACTION_MEMORY_CARD_SETTINGS = 'android.settings.MEMORY_CARD_SETTINGS';
      ACTION_NETWORK_OPERATOR_SETTINGS = 'android.settings.NETWORK_OPERATOR_SETTINGS';
      ACTION_NFCSHARING_SETTINGS = 'android.settings.NFCSHARING_SETTINGS';
      ACTION_NFC_PAYMENT_SETTINGS = 'android.settings.NFC_PAYMENT_SETTINGS';
      ACTION_NFC_SETTINGS = 'android.settings.NFC_SETTINGS';
      ACTION_PRINT_SETTINGS = 'android.settings.ACTION_PRINT_SETTINGS';
      ACTION_PRIVACY_SETTINGS = 'android.settings.PRIVACY_SETTINGS';
      ACTION_QUICK_LAUNCH_SETTINGS = 'android.settings.QUICK_LAUNCH_SETTINGS';
      ACTION_SEARCH_SETTINGS = 'android.search.action.SEARCH_SETTINGS';
      ACTION_SECURITY_SETTINGS = 'android.settings.SECURITY_SETTINGS';
      ACTION_SETTINGS = 'android.settings.SETTINGS';
      ACTION_SHOW_REGULATORY_INFO = 'android.settings.SHOW_REGULATORY_INFO';
      ACTION_SOUND_SETTINGS = 'android.settings.SOUND_SETTINGS';
      ACTION_SYNC_SETTINGS = 'android.settings.SYNC_SETTINGS';
      ACTION_USAGE_ACCESS_SETTINGS = 'android.settings.USAGE_ACCESS_SETTINGS';
      ACTION_USER_DICTIONARY_SETTINGS = 'android.settings.USER_DICTIONARY_SETTINGS';
      ACTION_VOICE_INPUT_SETTINGS = 'android.settings.VOICE_INPUT_SETTINGS';
      ACTION_WIFI_IP_SETTINGS = 'android.settings.WIFI_IP_SETTINGS';
      ACTION_WIFI_SETTINGS = 'android.settings.WIFI_SETTINGS';
      ACTION_WIRELESS_SETTINGS = 'android.settings.WIRELESS_SETTINGS';
      AUTHORITY = 'settings';
      EXTRA_ACCOUNT_TYPES = 'account_types';
      EXTRA_AUTHORITIES = 'authorities';
      EXTRA_INPUT_METHOD_ID = 'input_method_id';
  public
    constructor create(); overload;
  end;

  JSDigestException = class external 'java.security' name 'DigestException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSInvalidAlgorithmParameterException = class external 'java.security' name 'InvalidAlgorithmParameterException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSKeyException = class external 'java.security' name 'KeyException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSKeyStoreException = class external 'java.security' name 'KeyStoreException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSNoSuchAlgorithmException = class external 'java.security' name 'NoSuchAlgorithmException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSNoSuchProviderException = class external 'java.security' name 'NoSuchProviderException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JSSignatureException = class external 'java.security' name 'SignatureException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSUnrecoverableEntryException = class external 'java.security' name 'UnrecoverableEntryException' (JSGeneralSecurityException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JSCCRLException = class external 'java.security.cert' name 'CRLException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSCCertPathBuilderException = class external 'java.security.cert' name 'CertPathBuilderException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JSCCertPathValidatorException = class external 'java.security.cert' name 'CertPathValidatorException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString; para2: JLThrowable; para3: JSCCertPath; para4: jint); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    function getCertPath(): JSCCertPath; overload; virtual;
    function getIndex(): jint; overload; virtual;
  end;

  JSCCertStoreException = class external 'java.security.cert' name 'CertStoreException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JSCCertificateException = class external 'java.security.cert' name 'CertificateException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSSInvalidKeySpecException = class external 'java.security.spec' name 'InvalidKeySpecException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSSInvalidParameterSpecException = class external 'java.security.spec' name 'InvalidParameterSpecException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JCBadPaddingException = class external 'javax.crypto' name 'BadPaddingException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JCExemptionMechanismException = class external 'javax.crypto' name 'ExemptionMechanismException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JCIllegalBlockSizeException = class external 'javax.crypto' name 'IllegalBlockSizeException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JCNoSuchPaddingException = class external 'javax.crypto' name 'NoSuchPaddingException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JCShortBufferException = class external 'javax.crypto' name 'ShortBufferException' (JSGeneralSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JSALLoginException = class external 'javax.security.auth.login' name 'LoginException' (JSGeneralSecurityException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JxSCCertificateEncodingException = class external 'javax.security.cert' name 'CertificateEncodingException' (JxSCCertificateException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JxSCCertificateExpiredException = class external 'javax.security.cert' name 'CertificateExpiredException' (JxSCCertificateException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JxSCCertificateNotYetValidException = class external 'javax.security.cert' name 'CertificateNotYetValidException' (JxSCCertificateException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JxSCCertificateParsingException = class external 'javax.security.cert' name 'CertificateParsingException' (JxSCCertificateException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JXTTransformerConfigurationException = class external 'javax.xml.transform' name 'TransformerConfigurationException' (JXTTransformerException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JXTSourceLocator); overload;
    constructor create(para1: JLString; para2: JXTSourceLocator; para3: JLThrowable); overload;
  end;

  JXXXPathExpressionException = class external 'javax.xml.xpath' name 'XPathExpressionException' (JXXXPathException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JXXXPathFactoryConfigurationException = class external 'javax.xml.xpath' name 'XPathFactoryConfigurationException' (JXXXPathException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  OAHMethodNotSupportedException = class external 'org.apache.http' name 'MethodNotSupportedException' (OAHHttpException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OAHProtocolException = class external 'org.apache.http' name 'ProtocolException' (OAHHttpException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OAHICTunnelRefusedException = class external 'org.apache.http.impl.client' name 'TunnelRefusedException' (OAHHttpException)
  public
    constructor create(para1: JLString; para2: OAHHttpResponse); overload;
    function getResponse(): OAHHttpResponse; overload; virtual;
  end;

  OXSSAXNotRecognizedException = class external 'org.xml.sax' name 'SAXNotRecognizedException' (OXSSAXException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OXSSAXNotSupportedException = class external 'org.xml.sax' name 'SAXNotSupportedException' (OXSSAXException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OXSSAXParseException = class external 'org.xml.sax' name 'SAXParseException' (OXSSAXException)
  public
    constructor create(para1: JLString; para2: OXSLocator); overload;
    constructor create(para1: JLString; para2: OXSLocator; para3: JLException); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: jint; para5: jint); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: jint; para5: jint; para6: JLException); overload;
    function getPublicId(): JLString; overload; virtual;
    function getSystemId(): JLString; overload; virtual;
    function getLineNumber(): jint; overload; virtual;
    function getColumnNumber(): jint; overload; virtual;
  end;

  AAAnimatorListenerAdapter = class abstract external 'android.animation' name 'AnimatorListenerAdapter' (JLObject, AAAnimator.InnerAnimatorListener, AAAnimator.InnerAnimatorPauseListener)
  public
    constructor create(); overload;
    procedure onAnimationCancel(para1: AAAnimator); overload; virtual;
    procedure onAnimationEnd(para1: AAAnimator); overload; virtual;
    procedure onAnimationRepeat(para1: AAAnimator); overload; virtual;
    procedure onAnimationStart(para1: AAAnimator); overload; virtual;
    procedure onAnimationPause(para1: AAAnimator); overload; virtual;
    procedure onAnimationResume(para1: AAAnimator); overload; virtual;
  end;

  AAAnimatorSet = class sealed external 'android.animation' name 'AnimatorSet' (AAAnimator)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.animation' name 'Builder' 
      end;

  public
    constructor create(); overload;
    procedure playTogether(para1: Arr1AAAnimator); overload; virtual;
    procedure playTogether(const para1: array of AAAnimator); overload; virtual;
    procedure playTogether(para1: JUCollection); overload; virtual;
    procedure playSequentially(para1: Arr1AAAnimator); overload; virtual;
    procedure playSequentially(const para1: array of AAAnimator); overload; virtual;
    procedure playSequentially(para1: JUList); overload; virtual;
    function getChildAnimations(): JUArrayList; overload; virtual;
    procedure setTarget(para1: JLObject); overload; virtual;
    procedure setInterpolator(para1: AATimeInterpolator); overload; virtual;
    function getInterpolator(): AATimeInterpolator; overload; virtual;
    function play(para1: AAAnimator): AAAnimatorSet.InnerBuilder; overload; virtual;
    procedure cancel(); overload; virtual;
    procedure &end(); overload; virtual;
    function isRunning(): jboolean; overload; virtual;
    function isStarted(): jboolean; overload; virtual;
    function getStartDelay(): jlong; overload; virtual;
    procedure setStartDelay(para1: jlong); overload; virtual;
    function getDuration(): jlong; overload; virtual;
    function setDuration(para1: jlong): AAAnimatorSet; overload; virtual;
    procedure setupStartValues(); overload; virtual;
    procedure setupEndValues(); overload; virtual;
    procedure pause(); overload; virtual;
    procedure resume(); overload; virtual;
    procedure start(); overload; virtual;
    function clone(): AAAnimatorSet; overload; virtual;
    function clone(): AAAnimator; overload; virtual;
    function setDuration(para1: jlong): AAAnimator; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AAValueAnimator = class external 'android.animation' name 'ValueAnimator' (AAAnimator)
  public
    type
      InnerAnimatorUpdateListener = interface;
      Arr1InnerAnimatorUpdateListener = array of InnerAnimatorUpdateListener;
      Arr2InnerAnimatorUpdateListener = array of Arr1InnerAnimatorUpdateListener;
      Arr3InnerAnimatorUpdateListener = array of Arr2InnerAnimatorUpdateListener;
      InnerAnimatorUpdateListener = interface external 'android.animation' name 'AnimatorUpdateListener' 
        procedure onAnimationUpdate(para1: AAValueAnimator); overload;
      end;

  public
    const
      INFINITE = -1;
      RESTART = 1;
      REVERSE = 2;
  public
    constructor create(); overload;
    class function ofInt(para1: Arr1jint): AAValueAnimator; static; overload;
    class function ofInt(const para1: array of jint): AAValueAnimator; static; overload;
    class function ofArgb(para1: Arr1jint): AAValueAnimator; static; overload;
    class function ofArgb(const para1: array of jint): AAValueAnimator; static; overload;
    class function ofFloat(para1: Arr1jfloat): AAValueAnimator; static; overload;
    class function ofFloat(const para1: array of jfloat): AAValueAnimator; static; overload;
    class function ofPropertyValuesHolder(para1: Arr1AAPropertyValuesHolder): AAValueAnimator; static; overload;
    class function ofPropertyValuesHolder(const para1: array of AAPropertyValuesHolder): AAValueAnimator; static; overload;
    class function ofObject(para1: AATypeEvaluator; para2: Arr1JLObject): AAValueAnimator; static; overload;
    class function ofObject(para1: AATypeEvaluator; const para2: array of JLObject): AAValueAnimator; static; overload;
    procedure setIntValues(para1: Arr1jint); overload; virtual;
    procedure setIntValues(const para1: array of jint); overload; virtual;
    procedure setFloatValues(para1: Arr1jfloat); overload; virtual;
    procedure setFloatValues(const para1: array of jfloat); overload; virtual;
    procedure setObjectValues(para1: Arr1JLObject); overload; virtual;
    procedure setObjectValues(const para1: array of JLObject); overload; virtual;
    procedure setValues(para1: Arr1AAPropertyValuesHolder); overload; virtual;
    procedure setValues(const para1: array of AAPropertyValuesHolder); overload; virtual;
    function getValues(): Arr1AAPropertyValuesHolder; overload; virtual;
    function setDuration(para1: jlong): AAValueAnimator; overload; virtual;
    function getDuration(): jlong; overload; virtual;
    procedure setCurrentPlayTime(para1: jlong); overload; virtual;
    function getCurrentPlayTime(): jlong; overload; virtual;
    function getStartDelay(): jlong; overload; virtual;
    procedure setStartDelay(para1: jlong); overload; virtual;
    class function getFrameDelay(): jlong; static; overload;
    class procedure setFrameDelay(para1: jlong); static; overload;
    function getAnimatedValue(): JLObject; overload; virtual;
    function getAnimatedValue(para1: JLString): JLObject; overload; virtual;
    procedure setRepeatCount(para1: jint); overload; virtual;
    function getRepeatCount(): jint; overload; virtual;
    procedure setRepeatMode(para1: jint); overload; virtual;
    function getRepeatMode(): jint; overload; virtual;
    procedure addUpdateListener(para1: AAValueAnimator.InnerAnimatorUpdateListener); overload; virtual;
    procedure removeAllUpdateListeners(); overload; virtual;
    procedure removeUpdateListener(para1: AAValueAnimator.InnerAnimatorUpdateListener); overload; virtual;
    procedure setInterpolator(para1: AATimeInterpolator); overload; virtual;
    function getInterpolator(): AATimeInterpolator; overload; virtual;
    procedure setEvaluator(para1: AATypeEvaluator); overload; virtual;
    procedure start(); overload; virtual;
    procedure cancel(); overload; virtual;
    procedure &end(); overload; virtual;
    procedure resume(); overload; virtual;
    procedure pause(); overload; virtual;
    function isRunning(): jboolean; overload; virtual;
    function isStarted(): jboolean; overload; virtual;
    procedure reverse_(); external name 'reverse'; overload; virtual;
    function getAnimatedFraction(): jfloat; overload; virtual;
    function clone(): AAValueAnimator; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): AAAnimator; overload; virtual;
    function setDuration(para1: jlong): AAAnimator; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AVViewPropertyAnimator = class external 'android.view' name 'ViewPropertyAnimator' (JLObject)
  public
    function setDuration(para1: jlong): AVViewPropertyAnimator; overload; virtual;
    function getDuration(): jlong; overload; virtual;
    function getStartDelay(): jlong; overload; virtual;
    function setStartDelay(para1: jlong): AVViewPropertyAnimator; overload; virtual;
    function setInterpolator(para1: AATimeInterpolator): AVViewPropertyAnimator; overload; virtual;
    function getInterpolator(): AATimeInterpolator; overload; virtual;
    function setListener(para1: AAAnimator.InnerAnimatorListener): AVViewPropertyAnimator; overload; virtual;
    function setUpdateListener(para1: AAValueAnimator.InnerAnimatorUpdateListener): AVViewPropertyAnimator; overload; virtual;
    procedure start(); overload; virtual;
    procedure cancel(); overload; virtual;
    function x(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function xBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function y(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function yBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function z(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function zBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function rotation(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function rotationBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function rotationX(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function rotationXBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function rotationY(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function rotationYBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function translationX(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function translationXBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function translationY(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function translationYBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function translationZ(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function translationZBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function scaleX(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function scaleXBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function scaleY(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function scaleYBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function alpha(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function alphaBy(para1: jfloat): AVViewPropertyAnimator; overload; virtual;
    function withLayer(): AVViewPropertyAnimator; overload; virtual;
    function withStartAction(para1: JLRunnable): AVViewPropertyAnimator; overload; virtual;
    function withEndAction(para1: JLRunnable): AVViewPropertyAnimator; overload; virtual;
  end;

  AGDSPathShape = class external 'android.graphics.drawable.shapes' name 'PathShape' (AGDSShape)
  public
    constructor create(para1: AGPath; para2: jfloat; para3: jfloat); overload;
    procedure draw(para1: AGCanvas; para2: AGPaint); overload; virtual;
  strict protected
    procedure onResize(para1: jfloat; para2: jfloat); overload; virtual;
  public
    function clone(): AGDSPathShape; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): AGDSShape; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AGDSRectShape = class external 'android.graphics.drawable.shapes' name 'RectShape' (AGDSShape)
  public
    constructor create(); overload;
    procedure draw(para1: AGCanvas; para2: AGPaint); overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
  strict protected
    procedure onResize(para1: jfloat; para2: jfloat); overload; virtual;
    function rect(): AGRectF; overload; virtual; final;
  public
    function clone(): AGDSRectShape; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): AGDSShape; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AVAAlphaAnimation = class external 'android.view.animation' name 'AlphaAnimation' (AVAAnimation)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: jfloat; para2: jfloat); overload;
  strict protected
    procedure applyTransformation(para1: jfloat; para2: AVATransformation); overload; virtual;
  public
    function willChangeTransformationMatrix(): jboolean; overload; virtual;
    function willChangeBounds(): jboolean; overload; virtual;
  end;

  AVAAnimationSet = class external 'android.view.animation' name 'AnimationSet' (AVAAnimation)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: jboolean); overload;
  strict protected
    function clone(): AVAAnimationSet; overload; virtual;  // throws java.lang.CloneNotSupportedException
  public
    procedure setFillAfter(para1: jboolean); overload; virtual;
    procedure setFillBefore(para1: jboolean); overload; virtual;
    procedure setRepeatMode(para1: jint); overload; virtual;
    procedure setStartOffset(para1: jlong); overload; virtual;
    procedure setDuration(para1: jlong); overload; virtual;
    procedure addAnimation(para1: AVAAnimation); overload; virtual;
    procedure setStartTime(para1: jlong); overload; virtual;
    function getStartTime(): jlong; overload; virtual;
    procedure restrictDuration(para1: jlong); overload; virtual;
    function getDuration(): jlong; overload; virtual;
    function computeDurationHint(): jlong; overload; virtual;
    function getTransformation(para1: jlong; para2: AVATransformation): jboolean; overload; virtual;
    procedure scaleCurrentDuration(para1: jfloat); overload; virtual;
    procedure initialize(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure reset(); overload; virtual;
    function getAnimations(): JUList; overload; virtual;
    function willChangeTransformationMatrix(): jboolean; overload; virtual;
    function willChangeBounds(): jboolean; overload; virtual;
  strict protected
    function clone(): AVAAnimation; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AVARotateAnimation = class external 'android.view.animation' name 'RotateAnimation' (AVAAnimation)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: jfloat; para2: jfloat); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jint; para4: jfloat; para5: jint; para6: jfloat); overload;
  strict protected
    procedure applyTransformation(para1: jfloat; para2: AVATransformation); overload; virtual;
  public
    procedure initialize(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  end;

  AVAScaleAnimation = class external 'android.view.animation' name 'ScaleAnimation' (AVAAnimation)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jint; para6: jfloat; para7: jint; para8: jfloat); overload;
  strict protected
    procedure applyTransformation(para1: jfloat; para2: AVATransformation); overload; virtual;
  public
    procedure initialize(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  end;

  AVATranslateAnimation = class external 'android.view.animation' name 'TranslateAnimation' (AVAAnimation)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    constructor create(para1: jint; para2: jfloat; para3: jint; para4: jfloat; para5: jint; para6: jfloat; para7: jint; para8: jfloat); overload;
  strict protected
    procedure applyTransformation(para1: jfloat; para2: AVATransformation); overload; virtual;
  public
    procedure initialize(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  end;

  JSCX509CRLSelector = class external 'java.security.cert' name 'X509CRLSelector' (JLObject, JSCCRLSelector)
  public
    constructor create(); overload;
    procedure setIssuers(para1: JUCollection); overload; virtual;
    procedure setIssuerNames(para1: JUCollection); overload; virtual;  // throws java.io.IOException
    procedure addIssuer(para1: JSAXX500Principal); overload; virtual;
    procedure addIssuerName(para1: JLString); overload; virtual;  // throws java.io.IOException
    procedure addIssuerName(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure addIssuerName(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure setMinCRLNumber(para1: JMBigInteger); overload; virtual;
    procedure setMaxCRLNumber(para1: JMBigInteger); overload; virtual;
    procedure setDateAndTime(para1: JUDate); overload; virtual;
    procedure setCertificateChecking(para1: JSCX509Certificate); overload; virtual;
    function getIssuers(): JUCollection; overload; virtual;
    function getIssuerNames(): JUCollection; overload; virtual;
    function getMinCRL(): JMBigInteger; overload; virtual;
    function getMaxCRL(): JMBigInteger; overload; virtual;
    function getDateAndTime(): JUDate; overload; virtual;
    function getCertificateChecking(): JSCX509Certificate; overload; virtual;
    function toString(): JLString; overload; virtual;
    function match(para1: JSCCRL): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;
  end;

  JSCPKIXParameters = class external 'java.security.cert' name 'PKIXParameters' (JLObject, JSCCertPathParameters)
  public
    constructor create(para1: JUSet); overload;  // throws java.security.InvalidAlgorithmParameterException
    constructor create(para1: JSKeyStore); overload;  // throws java.security.KeyStoreException, java.security.InvalidAlgorithmParameterException
    function getTrustAnchors(): JUSet; overload; virtual;
    procedure setTrustAnchors(para1: JUSet); overload; virtual;  // throws java.security.InvalidAlgorithmParameterException
    function isAnyPolicyInhibited(): jboolean; overload; virtual;
    procedure setAnyPolicyInhibited(para1: jboolean); overload; virtual;
    function getCertPathCheckers(): JUList; overload; virtual;
    procedure setCertPathCheckers(para1: JUList); overload; virtual;
    procedure addCertPathChecker(para1: JSCPKIXCertPathChecker); overload; virtual;
    function getCertStores(): JUList; overload; virtual;
    procedure setCertStores(para1: JUList); overload; virtual;
    procedure addCertStore(para1: JSCCertStore); overload; virtual;
    function getDate(): JUDate; overload; virtual;
    procedure setDate(para1: JUDate); overload; virtual;
    function isExplicitPolicyRequired(): jboolean; overload; virtual;
    procedure setExplicitPolicyRequired(para1: jboolean); overload; virtual;
    function getInitialPolicies(): JUSet; overload; virtual;
    procedure setInitialPolicies(para1: JUSet); overload; virtual;
    function isPolicyMappingInhibited(): jboolean; overload; virtual;
    procedure setPolicyMappingInhibited(para1: jboolean); overload; virtual;
    function getPolicyQualifiersRejected(): jboolean; overload; virtual;
    procedure setPolicyQualifiersRejected(para1: jboolean); overload; virtual;
    function isRevocationEnabled(): jboolean; overload; virtual;
    procedure setRevocationEnabled(para1: jboolean); overload; virtual;
    function getSigProvider(): JLString; overload; virtual;
    procedure setSigProvider(para1: JLString); overload; virtual;
    function getTargetCertConstraints(): JSCCertSelector; overload; virtual;
    procedure setTargetCertConstraints(para1: JSCCertSelector); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSCPKIXCertPathValidatorResult = class external 'java.security.cert' name 'PKIXCertPathValidatorResult' (JLObject, JSCCertPathValidatorResult)
  public
    constructor create(para1: JSCTrustAnchor; para2: JSCPolicyNode; para3: JSPublicKey); overload;
    function getPolicyTree(): JSCPolicyNode; overload; virtual;
    function getPublicKey(): JSPublicKey; overload; virtual;
    function getTrustAnchor(): JSCTrustAnchor; overload; virtual;
    function clone(): JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSCX509CertSelector = class external 'java.security.cert' name 'X509CertSelector' (JLObject, JSCCertSelector)
  public
    constructor create(); overload;
    procedure setCertificate(para1: JSCX509Certificate); overload; virtual;
    function getCertificate(): JSCX509Certificate; overload; virtual;
    procedure setSerialNumber(para1: JMBigInteger); overload; virtual;
    function getSerialNumber(): JMBigInteger; overload; virtual;
    procedure setIssuer(para1: JSAXX500Principal); overload; virtual;
    function getIssuer(): JSAXX500Principal; overload; virtual;
    procedure setIssuer(para1: JLString); overload; virtual;  // throws java.io.IOException
    function getIssuerAsString(): JLString; overload; virtual;
    procedure setIssuer(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure setIssuer(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    function getIssuerAsBytes(): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    procedure setSubject(para1: JSAXX500Principal); overload; virtual;
    function getSubject(): JSAXX500Principal; overload; virtual;
    procedure setSubject(para1: JLString); overload; virtual;  // throws java.io.IOException
    function getSubjectAsString(): JLString; overload; virtual;
    procedure setSubject(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure setSubject(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    function getSubjectAsBytes(): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    procedure setSubjectKeyIdentifier(para1: Arr1jbyte); overload; virtual;
    procedure setSubjectKeyIdentifier(var para1: array of jbyte); overload; virtual;
    function getSubjectKeyIdentifier(): Arr1jbyte; overload; virtual;
    procedure setAuthorityKeyIdentifier(para1: Arr1jbyte); overload; virtual;
    procedure setAuthorityKeyIdentifier(var para1: array of jbyte); overload; virtual;
    function getAuthorityKeyIdentifier(): Arr1jbyte; overload; virtual;
    procedure setCertificateValid(para1: JUDate); overload; virtual;
    function getCertificateValid(): JUDate; overload; virtual;
    procedure setPrivateKeyValid(para1: JUDate); overload; virtual;
    function getPrivateKeyValid(): JUDate; overload; virtual;
    procedure setSubjectPublicKeyAlgID(para1: JLString); overload; virtual;  // throws java.io.IOException
    function getSubjectPublicKeyAlgID(): JLString; overload; virtual;
    procedure setSubjectPublicKey(para1: JSPublicKey); overload; virtual;
    procedure setSubjectPublicKey(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure setSubjectPublicKey(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    function getSubjectPublicKey(): JSPublicKey; overload; virtual;
    procedure setKeyUsage(para1: Arr1jboolean); overload; virtual;
    procedure setKeyUsage(var para1: array of jboolean); overload; virtual;
    function getKeyUsage(): Arr1jboolean; overload; virtual;
    procedure setExtendedKeyUsage(para1: JUSet); overload; virtual;  // throws java.io.IOException
    function getExtendedKeyUsage(): JUSet; overload; virtual;
    procedure setMatchAllSubjectAltNames(para1: jboolean); overload; virtual;
    function getMatchAllSubjectAltNames(): jboolean; overload; virtual;
    procedure setSubjectAlternativeNames(para1: JUCollection); overload; virtual;  // throws java.io.IOException
    procedure addSubjectAlternativeName(para1: jint; para2: JLString); overload; virtual;  // throws java.io.IOException
    procedure addSubjectAlternativeName(para1: jint; para2: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure addSubjectAlternativeName(para1: jint; var para2: array of jbyte); overload; virtual;  // throws java.io.IOException
    function getSubjectAlternativeNames(): JUCollection; overload; virtual;
    procedure setNameConstraints(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure setNameConstraints(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    function getNameConstraints(): Arr1jbyte; overload; virtual;
    procedure setBasicConstraints(para1: jint); overload; virtual;
    function getBasicConstraints(): jint; overload; virtual;
    procedure setPolicy(para1: JUSet); overload; virtual;  // throws java.io.IOException
    function getPolicy(): JUSet; overload; virtual;
    procedure addPathToName(para1: jint; para2: JLString); overload; virtual;  // throws java.io.IOException
    procedure setPathToNames(para1: JUCollection); overload; virtual;  // throws java.io.IOException
    procedure addPathToName(para1: jint; para2: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure addPathToName(para1: jint; var para2: array of jbyte); overload; virtual;  // throws java.io.IOException
    function getPathToNames(): JUCollection; overload; virtual;
    function toString(): JLString; overload; virtual;
    function match(para1: JSCCertificate): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;
  end;

  JSCCollectionCertStoreParameters = class external 'java.security.cert' name 'CollectionCertStoreParameters' (JLObject, JSCCertStoreParameters)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    function clone(): JLObject; overload; virtual;
    function getCollection(): JUCollection; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSCLDAPCertStoreParameters = class external 'java.security.cert' name 'LDAPCertStoreParameters' (JLObject, JSCCertStoreParameters)
  public
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    function clone(): JLObject; overload; virtual;
    function getPort(): jint; overload; virtual;
    function getServerName(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JTAttributedCharacterIterator = interface external 'java.text' name 'AttributedCharacterIterator' (JTCharacterIterator)
    type
      InnerAttribute = class;
      Arr1InnerAttribute = array of InnerAttribute;
      Arr2InnerAttribute = array of Arr1InnerAttribute;
      Arr3InnerAttribute = array of Arr2InnerAttribute;
      InnerAttribute = class external 'java.text' name 'Attribute' (JLObject, JISerializable)
      public
        final class var
          fINPUT_METHOD_SEGMENT: JTAttributedCharacterIterator.InnerAttribute; external name 'INPUT_METHOD_SEGMENT';
          fLANGUAGE: JTAttributedCharacterIterator.InnerAttribute; external name 'LANGUAGE';
          fREADING: JTAttributedCharacterIterator.InnerAttribute; external name 'READING';
      strict protected
        constructor create(para1: JLString); overload;
      public
        function equals(para1: JLObject): jboolean; overload; virtual; final;
      strict protected
        function getName(): JLString; overload; virtual;
      public
        function hashCode(): jint; overload; virtual; final;
      strict protected
        function readResolve(): JLObject; overload; virtual;  // throws java.io.InvalidObjectException
      public
        function toString(): JLString; overload; virtual;
      end;

    function getAllAttributeKeys(): JUSet; overload;
    function getAttribute(para1: JTAttributedCharacterIterator.InnerAttribute): JLObject; overload;
    function getAttributes(): JUMap; overload;
    function getRunLimit(): jint; overload;
    function getRunLimit(para1: JTAttributedCharacterIterator.InnerAttribute): jint; overload;
    function getRunLimit(para1: JUSet): jint; overload;
    function getRunStart(): jint; overload;
    function getRunStart(para1: JTAttributedCharacterIterator.InnerAttribute): jint; overload;
    function getRunStart(para1: JUSet): jint; overload;
  end;

  JTStringCharacterIterator = class sealed external 'java.text' name 'StringCharacterIterator' (JLObject, JTCharacterIterator)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: JLString; para2: jint; para3: jint; para4: jint); overload;
    function clone(): JLObject; overload; virtual;
    function current(): jchar; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function first(): jchar; overload; virtual;
    function getBeginIndex(): jint; overload; virtual;
    function getEndIndex(): jint; overload; virtual;
    function getIndex(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function last(): jchar; overload; virtual;
    function next(): jchar; overload; virtual;
    function previous(): jchar; overload; virtual;
    function setIndex(para1: jint): jchar; overload; virtual;
    procedure setText(para1: JLString); overload; virtual;
  end;

  JUJJarEntry = class external 'java.util.jar' name 'JarEntry' (JUZZipEntry)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JUZZipEntry); overload;
    constructor create(para1: JUJJarEntry); overload;
    function getAttributes(): JUJAttributes; overload; virtual;  // throws java.io.IOException
    function getCertificates(): Arr1JSCCertificate; overload; virtual;
    function getCodeSigners(): Arr1JSCodeSigner; overload; virtual;
  end;

  ATMMockResources = class external 'android.test.mock' name 'MockResources' (ACRResources)
  public
    constructor create(); overload;
    procedure updateConfiguration(para1: ACRConfiguration; para2: AUDisplayMetrics); overload; virtual;
    function getText(para1: jint): JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getQuantityText(para1: jint; para2: jint): JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getString(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getString(para1: jint; para2: Arr1JLObject): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getString(para1: jint; const para2: array of JLObject): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getQuantityString(para1: jint; para2: jint; para3: Arr1JLObject): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getQuantityString(para1: jint; para2: jint; const para3: array of JLObject): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getQuantityString(para1: jint; para2: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getText(para1: jint; para2: JLCharSequence): JLCharSequence; overload; virtual;
    function getTextArray(para1: jint): Arr1JLCharSequence; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getStringArray(para1: jint): Arr1JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getIntArray(para1: jint): Arr1jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function obtainTypedArray(para1: jint): ACRTypedArray; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDimension(para1: jint): jfloat; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDimensionPixelOffset(para1: jint): jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDimensionPixelSize(para1: jint): jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getDrawable(para1: jint): AGDDrawable; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getMovie(para1: jint): AGMovie; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getColor(para1: jint): jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getColorStateList(para1: jint): ACRColorStateList; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getInteger(para1: jint): jint; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getLayout(para1: jint): ACRXmlResourceParser; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getAnimation(para1: jint): ACRXmlResourceParser; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getXml(para1: jint): ACRXmlResourceParser; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function openRawResource(para1: jint): JIInputStream; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function openRawResourceFd(para1: jint): ACRAssetFileDescriptor; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    procedure getValue(para1: jint; para2: AUTypedValue; para3: jboolean); overload; virtual;  // throws android.content.res.Resources$NotFoundException
    procedure getValue(para1: JLString; para2: AUTypedValue; para3: jboolean); overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function obtainAttributes(para1: AUAttributeSet; para2: Arr1jint): ACRTypedArray; overload; virtual;
    function obtainAttributes(para1: AUAttributeSet; var para2: array of jint): ACRTypedArray; overload; virtual;
    function getDisplayMetrics(): AUDisplayMetrics; overload; virtual;
    function getConfiguration(): ACRConfiguration; overload; virtual;
    function getIdentifier(para1: JLString; para2: JLString; para3: JLString): jint; overload; virtual;
    function getResourceName(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getResourcePackageName(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getResourceTypeName(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
    function getResourceEntryName(para1: jint): JLString; overload; virtual;  // throws android.content.res.Resources$NotFoundException
  end;

  ADSSQLiteException = class external 'android.database.sqlite' name 'SQLiteException' (ADSQLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  ARRSDriverException = class external 'android.renderscript' name 'RSDriverException' (ARRSRuntimeException)
  public
    constructor create(para1: JLString); overload;
  end;

  ARRSIllegalArgumentException = class external 'android.renderscript' name 'RSIllegalArgumentException' (ARRSRuntimeException)
  public
    constructor create(para1: JLString); overload;
  end;

  ARRSInvalidStateException = class external 'android.renderscript' name 'RSInvalidStateException' (ARRSRuntimeException)
  public
    constructor create(para1: JLString); overload;
  end;

  ACReceiverCallNotAllowedException = class external 'android.content' name 'ReceiverCallNotAllowedException' (AUAndroidRuntimeException)
  public
    constructor create(para1: JLString); overload;
  end;

  AOBadParcelableException = class external 'android.os' name 'BadParcelableException' (AUAndroidRuntimeException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLException); overload;
  end;

  AVKeyCharacterMap = class external 'android.view' name 'KeyCharacterMap' (JLObject, AOParcelable)
  public
    type
      InnerUnavailableException = class;
      Arr1InnerUnavailableException = array of InnerUnavailableException;
      Arr2InnerUnavailableException = array of Arr1InnerUnavailableException;
      Arr3InnerUnavailableException = array of Arr2InnerUnavailableException;
      InnerKeyData = class;
      Arr1InnerKeyData = array of InnerKeyData;
      Arr2InnerKeyData = array of Arr1InnerKeyData;
      Arr3InnerKeyData = array of Arr2InnerKeyData;
      InnerUnavailableException = class external 'android.view' name 'UnavailableException' (AUAndroidRuntimeException)
      public
        constructor create(para1: JLString); overload;
      end;

      InnerKeyData = class external 'android.view' name 'KeyData' (JLObject)
      public
        const
          META_LENGTH = 4;
      public
        var
          fdisplayLabel: jchar; external name 'displayLabel';
          fmeta: Arr1jchar; external name 'meta';
          fnumber: jchar; external name 'number';
      public
        constructor create(); overload;
      end;

  public
    const
      ALPHA = 3;
      BUILT_IN_KEYBOARD = 0 deprecated;
      COMBINING_ACCENT = -2147483648;
      COMBINING_ACCENT_MASK = 2147483647;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FULL = 4;
      HEX_INPUT = 61184;
      MODIFIER_BEHAVIOR_CHORDED = 0;
      MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED = 1;
      NUMERIC = 1;
      PICKER_DIALOG_INPUT = 61185;
      PREDICTIVE = 2;
      SPECIAL_FUNCTION = 5;
      VIRTUAL_KEYBOARD = -1;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    class function load(para1: jint): AVKeyCharacterMap; static; overload;
    function get(para1: jint; para2: jint): jint; overload; virtual;
    function getNumber(para1: jint): jchar; overload; virtual;
    function getMatch(para1: jint; para2: Arr1jchar): jchar; overload; virtual;
    function getMatch(para1: jint; var para2: array of jchar): jchar; overload; virtual;
    function getMatch(para1: jint; para2: Arr1jchar; para3: jint): jchar; overload; virtual;
    function getMatch(para1: jint; var para2: array of jchar; para3: jint): jchar; overload; virtual;
    function getDisplayLabel(para1: jint): jchar; overload; virtual;
    class function getDeadChar(para1: jint; para2: jint): jint; static; overload;
    function getKeyData(para1: jint; para2: AVKeyCharacterMap.InnerKeyData): jboolean; overload; virtual;
    function getEvents(para1: Arr1jchar): Arr1AVKeyEvent; overload; virtual;
    function getEvents(var para1: array of jchar): Arr1AVKeyEvent; overload; virtual;
    function isPrintingKey(para1: jint): jboolean; overload; virtual;
    function getKeyboardType(): jint; overload; virtual;
    function getModifierBehavior(): jint; overload; virtual;
    class function deviceHasKey(para1: jint): jboolean; static; overload;
    class function deviceHasKeys(para1: Arr1jint): Arr1jboolean; static; overload;
    class function deviceHasKeys(var para1: array of jint): Arr1jboolean; static; overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  JSAccessControlException = class external 'java.security' name 'AccessControlException' (JLSecurityException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JSPermission); overload;
    function getPermission(): JSPermission; overload; virtual;
  end;

  JUInputMismatchException = class external 'java.util' name 'InputMismatchException' (JUNoSuchElementException, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JUCScheduledFuture = interface external 'java.util.concurrent' name 'ScheduledFuture' (JUCDelayed, JUCFuture)
  end;

  OAHMBasicHeaderElementIterator = class external 'org.apache.http.message' name 'BasicHeaderElementIterator' (JLObject, OAHHeaderElementIterator)
  public
    constructor create(para1: OAHHeaderIterator; para2: OAHMHeaderValueParser); overload;
    constructor create(para1: OAHHeaderIterator); overload;
    function hasNext(): jboolean; overload; virtual;
    function nextElement(): OAHHeaderElement; overload; virtual;  // throws java.util.NoSuchElementException
    function next(): JLObject; overload; virtual; final;  // throws java.util.NoSuchElementException
    procedure remove(); overload; virtual;  // throws java.lang.UnsupportedOperationException
  end;

  OAHMBasicHeaderIterator = class external 'org.apache.http.message' name 'BasicHeaderIterator' (JLObject, OAHHeaderIterator)
  strict protected
    final var
      fallHeaders: Arr1OAHHeader; external name 'allHeaders';
  strict protected
    var
      fcurrentIndex: jint; external name 'currentIndex';
      fheaderName: JLString; external name 'headerName';
  public
    constructor create(para1: Arr1OAHHeader; para2: JLString); overload;
    constructor create(const para1: array of OAHHeader; para2: JLString); overload;
  strict protected
    function findNext(para1: jint): jint; overload; virtual;
    function filterHeader(para1: jint): jboolean; overload; virtual;
  public
    function hasNext(): jboolean; overload; virtual;
    function nextHeader(): OAHHeader; overload; virtual;  // throws java.util.NoSuchElementException
    function next(): JLObject; overload; virtual; final;  // throws java.util.NoSuchElementException
    procedure remove(); overload; virtual;  // throws java.lang.UnsupportedOperationException
  end;

  OAHMBasicListHeaderIterator = class external 'org.apache.http.message' name 'BasicListHeaderIterator' (JLObject, OAHHeaderIterator)
  strict protected
    final var
      fallHeaders: JUList; external name 'allHeaders';
  strict protected
    var
      fcurrentIndex: jint; external name 'currentIndex';
      fheaderName: JLString; external name 'headerName';
      flastIndex: jint; external name 'lastIndex';
  public
    constructor create(para1: JUList; para2: JLString); overload;
  strict protected
    function findNext(para1: jint): jint; overload; virtual;
    function filterHeader(para1: jint): jboolean; overload; virtual;
  public
    function hasNext(): jboolean; overload; virtual;
    function nextHeader(): OAHHeader; overload; virtual;  // throws java.util.NoSuchElementException
    function next(): JLObject; overload; virtual; final;  // throws java.util.NoSuchElementException
    procedure remove(); overload; virtual;  // throws java.lang.UnsupportedOperationException
  end;

  OAHMBasicTokenIterator = class external 'org.apache.http.message' name 'BasicTokenIterator' (JLObject, OAHTokenIterator)
  public
    const
      HTTP_SEPARATORS = ' ,;=()<>@:\"/[]?{}'#$0009'';
  strict protected
    var
      fcurrentHeader: JLString; external name 'currentHeader';
      fcurrentToken: JLString; external name 'currentToken';
  strict protected
    final var
      fheaderIt: OAHHeaderIterator; external name 'headerIt';
  strict protected
    var
      fsearchPos: jint; external name 'searchPos';
  public
    constructor create(para1: OAHHeaderIterator); overload;
    function hasNext(): jboolean; overload; virtual;
    function nextToken(): JLString; overload; virtual;  // throws java.util.NoSuchElementException, org.apache.http.ParseException
    function next(): JLObject; overload; virtual; final;  // throws java.util.NoSuchElementException, org.apache.http.ParseException
    procedure remove(); overload; virtual; final;  // throws java.lang.UnsupportedOperationException
  strict protected
    function findNext(para1: jint): jint; overload; virtual;  // throws org.apache.http.ParseException
    function createToken(para1: JLString; para2: jint; para3: jint): JLString; overload; virtual;
    function findTokenStart(para1: jint): jint; overload; virtual;
    function findTokenSeparator(para1: jint): jint; overload; virtual;
    function findTokenEnd(para1: jint): jint; overload; virtual;
    function isTokenSeparator(para1: jchar): jboolean; overload; virtual;
    function isWhitespace(para1: jchar): jboolean; overload; virtual;
    function isTokenChar(para1: jchar): jboolean; overload; virtual;
    function isHttpSeparator(para1: jchar): jboolean; overload; virtual;
  end;

  ACPApplicationInfo = class external 'android.content.pm' name 'ApplicationInfo' (ACPPackageItemInfo, AOParcelable)
  public
    type
      InnerDisplayNameComparator = class;
      Arr1InnerDisplayNameComparator = array of InnerDisplayNameComparator;
      Arr2InnerDisplayNameComparator = array of Arr1InnerDisplayNameComparator;
      Arr3InnerDisplayNameComparator = array of Arr2InnerDisplayNameComparator;
      InnerDisplayNameComparator = class external 'android.content.pm' name 'DisplayNameComparator' (JLObject, JUComparator)
      public
        constructor create(para1: ACPPackageManager); overload;
        function compare(para1: ACPApplicationInfo; para2: ACPApplicationInfo): jint; overload; virtual; final;
        function compare(para1: JLObject; para2: JLObject): jint; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_ALLOW_BACKUP = 32768;
      FLAG_ALLOW_CLEAR_USER_DATA = 64;
      FLAG_ALLOW_TASK_REPARENTING = 32;
      FLAG_DEBUGGABLE = 2;
      FLAG_EXTERNAL_STORAGE = 262144;
      FLAG_FACTORY_TEST = 16;
      FLAG_FULL_BACKUP_ONLY = 67108864;
      FLAG_HAS_CODE = 4;
      FLAG_INSTALLED = 8388608;
      FLAG_IS_DATA_ONLY = 16777216;
      FLAG_IS_GAME = 33554432;
      FLAG_KILL_AFTER_RESTORE = 65536;
      FLAG_LARGE_HEAP = 1048576;
      FLAG_MULTIARCH = -2147483648;
      FLAG_PERSISTENT = 8;
      FLAG_RESIZEABLE_FOR_SCREENS = 4096;
      FLAG_RESTORE_ANY_VERSION = 131072;
      FLAG_STOPPED = 2097152;
      FLAG_SUPPORTS_LARGE_SCREENS = 2048;
      FLAG_SUPPORTS_NORMAL_SCREENS = 1024;
      FLAG_SUPPORTS_RTL = 4194304;
      FLAG_SUPPORTS_SCREEN_DENSITIES = 8192;
      FLAG_SUPPORTS_SMALL_SCREENS = 512;
      FLAG_SUPPORTS_XLARGE_SCREENS = 524288;
      FLAG_SYSTEM = 1;
      FLAG_TEST_ONLY = 256;
      FLAG_UPDATED_SYSTEM_APP = 128;
      FLAG_VM_SAFE_MODE = 16384;
  public
    var
      fbackupAgentName: JLString; external name 'backupAgentName';
      fclassName: JLString; external name 'className';
      fcompatibleWidthLimitDp: jint; external name 'compatibleWidthLimitDp';
      fdataDir: JLString; external name 'dataDir';
      fdescriptionRes: jint; external name 'descriptionRes';
      fenabled: jboolean; external name 'enabled';
      fflags: jint; external name 'flags';
      flargestWidthLimitDp: jint; external name 'largestWidthLimitDp';
      fmanageSpaceActivityName: JLString; external name 'manageSpaceActivityName';
      fnativeLibraryDir: JLString; external name 'nativeLibraryDir';
      fpermission: JLString; external name 'permission';
      fprocessName: JLString; external name 'processName';
      fpublicSourceDir: JLString; external name 'publicSourceDir';
      frequiresSmallestWidthDp: jint; external name 'requiresSmallestWidthDp';
      fsharedLibraryFiles: Arr1JLString; external name 'sharedLibraryFiles';
      fsourceDir: JLString; external name 'sourceDir';
      fsplitPublicSourceDirs: Arr1JLString; external name 'splitPublicSourceDirs';
      fsplitSourceDirs: Arr1JLString; external name 'splitSourceDirs';
      ftargetSdkVersion: jint; external name 'targetSdkVersion';
      ftaskAffinity: JLString; external name 'taskAffinity';
      ftheme: jint; external name 'theme';
      fuiOptions: jint; external name 'uiOptions';
      fuid: jint; external name 'uid';
  public
    constructor create(); overload;
    constructor create(para1: ACPApplicationInfo); overload;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function loadDescription(para1: ACPPackageManager): JLCharSequence; overload; virtual;
  end;

  ACPComponentInfo = class external 'android.content.pm' name 'ComponentInfo' (ACPPackageItemInfo)
  public
    var
      fapplicationInfo: ACPApplicationInfo; external name 'applicationInfo';
      fdescriptionRes: jint; external name 'descriptionRes';
      fenabled: jboolean; external name 'enabled';
      fexported: jboolean; external name 'exported';
      fprocessName: JLString; external name 'processName';
  public
    constructor create(); overload;
    constructor create(para1: ACPComponentInfo); overload;
  strict protected
    constructor create(para1: AOParcel); overload;
  public
    function loadLabel(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    function getIconResource(): jint; overload; virtual; final;
    function getLogoResource(): jint; overload; virtual; final;
    function getBannerResource(): jint; overload; virtual; final;
  strict protected
    procedure dumpFront(para1: AUPrinter; para2: JLString); overload; virtual;
    procedure dumpBack(para1: AUPrinter; para2: JLString); overload; virtual;
  public
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACPInstrumentationInfo = class external 'android.content.pm' name 'InstrumentationInfo' (ACPPackageItemInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      fdataDir: JLString; external name 'dataDir';
      ffunctionalTest: jboolean; external name 'functionalTest';
      fhandleProfiling: jboolean; external name 'handleProfiling';
      fpublicSourceDir: JLString; external name 'publicSourceDir';
      fsourceDir: JLString; external name 'sourceDir';
      fsplitPublicSourceDirs: Arr1JLString; external name 'splitPublicSourceDirs';
      fsplitSourceDirs: Arr1JLString; external name 'splitSourceDirs';
      ftargetPackage: JLString; external name 'targetPackage';
  public
    constructor create(); overload;
    constructor create(para1: ACPInstrumentationInfo); overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACPPermissionGroupInfo = class external 'android.content.pm' name 'PermissionGroupInfo' (ACPPackageItemInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_PERSONAL_INFO = 1;
  public
    var
      fdescriptionRes: jint; external name 'descriptionRes';
      fflags: jint; external name 'flags';
      fnonLocalizedDescription: JLCharSequence; external name 'nonLocalizedDescription';
      fpriority: jint; external name 'priority';
  public
    constructor create(); overload;
    constructor create(para1: ACPPermissionGroupInfo); overload;
    function loadDescription(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACPPermissionInfo = class external 'android.content.pm' name 'PermissionInfo' (ACPPackageItemInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_COSTS_MONEY = 1;
      PROTECTION_DANGEROUS = 1;
      PROTECTION_FLAG_APPOP = 64;
      PROTECTION_FLAG_DEVELOPMENT = 32;
      PROTECTION_FLAG_SYSTEM = 16;
      PROTECTION_MASK_BASE = 15;
      PROTECTION_MASK_FLAGS = 240;
      PROTECTION_NORMAL = 0;
      PROTECTION_SIGNATURE = 2;
      PROTECTION_SIGNATURE_OR_SYSTEM = 3;
  public
    var
      fdescriptionRes: jint; external name 'descriptionRes';
      fflags: jint; external name 'flags';
      fgroup: JLString; external name 'group';
      fnonLocalizedDescription: JLCharSequence; external name 'nonLocalizedDescription';
      fprotectionLevel: jint; external name 'protectionLevel';
  public
    constructor create(); overload;
    constructor create(para1: ACPPermissionInfo); overload;
    function loadDescription(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATTextPaint = class external 'android.text' name 'TextPaint' (AGPaint)
  public
    var
      fbaselineShift: jint; external name 'baselineShift';
      fbgColor: jint; external name 'bgColor';
      fdensity: jfloat; external name 'density';
      fdrawableState: Arr1jint; external name 'drawableState';
      flinkColor: jint; external name 'linkColor';
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: AGPaint); overload;
    procedure &set(para1: ATTextPaint); overload; virtual;
  end;

  AGPorterDuffColorFilter = class external 'android.graphics' name 'PorterDuffColorFilter' (AGColorFilter)
  public
    constructor create(para1: jint; para2: AGPorterDuff.InnerMode); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  AGPorterDuffXfermode = class external 'android.graphics' name 'PorterDuffXfermode' (AGXfermode)
  public
    constructor create(para1: AGPorterDuff.InnerMode); overload;
  end;

  AGBitmapShader = class external 'android.graphics' name 'BitmapShader' (AGShader)
  public
    constructor create(para1: AGBitmap; para2: AGShader.InnerTileMode; para3: AGShader.InnerTileMode); overload;
  end;

  AGComposeShader = class external 'android.graphics' name 'ComposeShader' (AGShader)
  public
    constructor create(para1: AGShader; para2: AGShader; para3: AGXfermode); overload;
    constructor create(para1: AGShader; para2: AGShader; para3: AGPorterDuff.InnerMode); overload;
  end;

  AGLinearGradient = class external 'android.graphics' name 'LinearGradient' (AGShader)
  public
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: Arr1jint; para6: Arr1jfloat; para7: AGShader.InnerTileMode); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; const para5: array of jint; const para6: array of jfloat; para7: AGShader.InnerTileMode); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jint; para6: jint; para7: AGShader.InnerTileMode); overload;
  end;

  AGRadialGradient = class external 'android.graphics' name 'RadialGradient' (AGShader)
  public
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: Arr1jint; para5: Arr1jfloat; para6: AGShader.InnerTileMode); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; const para4: array of jint; const para5: array of jfloat; para6: AGShader.InnerTileMode); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jint; para5: jint; para6: AGShader.InnerTileMode); overload;
  end;

  AGSweepGradient = class external 'android.graphics' name 'SweepGradient' (AGShader)
  public
    constructor create(para1: jfloat; para2: jfloat; para3: Arr1jint; para4: Arr1jfloat); overload;
    constructor create(para1: jfloat; para2: jfloat; const para3: array of jint; const para4: array of jfloat); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jint; para4: jint); overload;
  end;

  JNSSSLEngine = class abstract external 'javax.net.ssl' name 'SSLEngine' (JLObject)
  strict protected
    constructor create(); overload;
    constructor create(para1: JLString; para2: jint); overload;
  public
    function getPeerHost(): JLString; overload; virtual;
    function getPeerPort(): jint; overload; virtual;
    procedure beginHandshake(); overload; virtual; abstract;  // throws javax.net.ssl.SSLException
    procedure closeInbound(); overload; virtual; abstract;  // throws javax.net.ssl.SSLException
    procedure closeOutbound(); overload; virtual; abstract;
    function getDelegatedTask(): JLRunnable; overload; virtual; abstract;
    function getEnabledCipherSuites(): Arr1JLString; overload; virtual; abstract;
    function getEnabledProtocols(): Arr1JLString; overload; virtual; abstract;
    function getEnableSessionCreation(): jboolean; overload; virtual; abstract;
    function getHandshakeStatus(): JNSSSLEngineResult.InnerHandshakeStatus; overload; virtual; abstract;
    function getNeedClientAuth(): jboolean; overload; virtual; abstract;
    function getSession(): JNSSSLSession; overload; virtual; abstract;
    function getSupportedCipherSuites(): Arr1JLString; overload; virtual; abstract;
    function getSupportedProtocols(): Arr1JLString; overload; virtual; abstract;
    function getUseClientMode(): jboolean; overload; virtual; abstract;
    function getWantClientAuth(): jboolean; overload; virtual; abstract;
    function isInboundDone(): jboolean; overload; virtual; abstract;
    function isOutboundDone(): jboolean; overload; virtual; abstract;
    procedure setEnabledCipherSuites(para1: Arr1JLString); overload; virtual; abstract;
    procedure setEnabledCipherSuites(var para1: array of JLString); overload; virtual; abstract;
    procedure setEnabledProtocols(para1: Arr1JLString); overload; virtual; abstract;
    procedure setEnabledProtocols(var para1: array of JLString); overload; virtual; abstract;
    procedure setEnableSessionCreation(para1: jboolean); overload; virtual; abstract;
    procedure setNeedClientAuth(para1: jboolean); overload; virtual; abstract;
    procedure setUseClientMode(para1: jboolean); overload; virtual; abstract;
    procedure setWantClientAuth(para1: jboolean); overload; virtual; abstract;
    function unwrap(para1: JNByteBuffer; para2: Arr1JNByteBuffer; para3: jint; para4: jint): JNSSSLEngineResult; overload; virtual; abstract;  // throws javax.net.ssl.SSLException
    function unwrap(para1: JNByteBuffer; var para2: array of JNByteBuffer; para3: jint; para4: jint): JNSSSLEngineResult; overload; virtual; abstract;  // throws javax.net.ssl.SSLException
    function wrap(para1: Arr1JNByteBuffer; para2: jint; para3: jint; para4: JNByteBuffer): JNSSSLEngineResult; overload; virtual; abstract;  // throws javax.net.ssl.SSLException
    function wrap(var para1: array of JNByteBuffer; para2: jint; para3: jint; para4: JNByteBuffer): JNSSSLEngineResult; overload; virtual; abstract;  // throws javax.net.ssl.SSLException
    function unwrap(para1: JNByteBuffer; para2: JNByteBuffer): JNSSSLEngineResult; overload; virtual;  // throws javax.net.ssl.SSLException
    function unwrap(para1: JNByteBuffer; para2: Arr1JNByteBuffer): JNSSSLEngineResult; overload; virtual;  // throws javax.net.ssl.SSLException
    function unwrap(para1: JNByteBuffer; var para2: array of JNByteBuffer): JNSSSLEngineResult; overload; virtual;  // throws javax.net.ssl.SSLException
    function wrap(para1: Arr1JNByteBuffer; para2: JNByteBuffer): JNSSSLEngineResult; overload; virtual;  // throws javax.net.ssl.SSLException
    function wrap(var para1: array of JNByteBuffer; para2: JNByteBuffer): JNSSSLEngineResult; overload; virtual;  // throws javax.net.ssl.SSLException
    function wrap(para1: JNByteBuffer; para2: JNByteBuffer): JNSSSLEngineResult; overload; virtual;  // throws javax.net.ssl.SSLException
    function getSSLParameters(): JNSSSLParameters; overload; virtual;
    procedure setSSLParameters(para1: JNSSSLParameters); overload; virtual;
  end;

  OAHCRHttpRoute = class sealed external 'org.apache.http.conn.routing' name 'HttpRoute' (JLObject, OAHCRRouteInfo, JLCloneable)
  public
    constructor create(para1: OAHHttpHost; para2: JNInetAddress; para3: Arr1OAHHttpHost; para4: jboolean; para5: OAHCRRouteInfo.InnerTunnelType; para6: OAHCRRouteInfo.InnerLayerType); overload;
    constructor create(para1: OAHHttpHost; para2: JNInetAddress; const para3: array of OAHHttpHost; para4: jboolean; para5: OAHCRRouteInfo.InnerTunnelType; para6: OAHCRRouteInfo.InnerLayerType); overload;
    constructor create(para1: OAHHttpHost; para2: JNInetAddress; para3: OAHHttpHost; para4: jboolean; para5: OAHCRRouteInfo.InnerTunnelType; para6: OAHCRRouteInfo.InnerLayerType); overload;
    constructor create(para1: OAHHttpHost; para2: JNInetAddress; para3: jboolean); overload;
    constructor create(para1: OAHHttpHost); overload;
    constructor create(para1: OAHHttpHost; para2: JNInetAddress; para3: OAHHttpHost; para4: jboolean); overload;
    function getTargetHost(): OAHHttpHost; overload; virtual; final;
    function getLocalAddress(): JNInetAddress; overload; virtual; final;
    function getHopCount(): jint; overload; virtual; final;
    function getHopTarget(para1: jint): OAHHttpHost; overload; virtual; final;
    function getProxyHost(): OAHHttpHost; overload; virtual; final;
    function getTunnelType(): OAHCRRouteInfo.InnerTunnelType; overload; virtual; final;
    function isTunnelled(): jboolean; overload; virtual; final;
    function getLayerType(): OAHCRRouteInfo.InnerLayerType; overload; virtual; final;
    function isLayered(): jboolean; overload; virtual; final;
    function isSecure(): jboolean; overload; virtual; final;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual; final;
    function toString(): JLString; overload; virtual; final;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHCRRouteTracker = class sealed external 'org.apache.http.conn.routing' name 'RouteTracker' (JLObject, OAHCRRouteInfo, JLCloneable)
  public
    constructor create(para1: OAHHttpHost; para2: JNInetAddress); overload;
    constructor create(para1: OAHCRHttpRoute); overload;
    procedure connectTarget(para1: jboolean); overload; virtual; final;
    procedure connectProxy(para1: OAHHttpHost; para2: jboolean); overload; virtual; final;
    procedure tunnelTarget(para1: jboolean); overload; virtual; final;
    procedure tunnelProxy(para1: OAHHttpHost; para2: jboolean); overload; virtual; final;
    procedure layerProtocol(para1: jboolean); overload; virtual; final;
    function getTargetHost(): OAHHttpHost; overload; virtual; final;
    function getLocalAddress(): JNInetAddress; overload; virtual; final;
    function getHopCount(): jint; overload; virtual; final;
    function getHopTarget(para1: jint): OAHHttpHost; overload; virtual; final;
    function getProxyHost(): OAHHttpHost; overload; virtual; final;
    function isConnected(): jboolean; overload; virtual; final;
    function getTunnelType(): OAHCRRouteInfo.InnerTunnelType; overload; virtual; final;
    function isTunnelled(): jboolean; overload; virtual; final;
    function getLayerType(): OAHCRRouteInfo.InnerLayerType; overload; virtual; final;
    function isLayered(): jboolean; overload; virtual; final;
    function isSecure(): jboolean; overload; virtual; final;
    function toRoute(): OAHCRHttpRoute; overload; virtual; final;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual; final;
    function toString(): JLString; overload; virtual; final;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JNInet4Address = class sealed external 'java.net' name 'Inet4Address' (JNInetAddress)
  public
    function isAnyLocalAddress(): jboolean; overload; virtual;
    function isLinkLocalAddress(): jboolean; overload; virtual;
    function isLoopbackAddress(): jboolean; overload; virtual;
    function isMCGlobal(): jboolean; overload; virtual;
    function isMCLinkLocal(): jboolean; overload; virtual;
    function isMCNodeLocal(): jboolean; overload; virtual;
    function isMCOrgLocal(): jboolean; overload; virtual;
    function isMCSiteLocal(): jboolean; overload; virtual;
    function isMulticastAddress(): jboolean; overload; virtual;
    function isSiteLocalAddress(): jboolean; overload; virtual;
  end;

  JNInet6Address = class sealed external 'java.net' name 'Inet6Address' (JNInetAddress)
  public
    class function getByAddress(para1: JLString; para2: Arr1jbyte; para3: jint): JNInet6Address; static; overload;  // throws java.net.UnknownHostException
    class function getByAddress(para1: JLString; var para2: array of jbyte; para3: jint): JNInet6Address; static; overload;  // throws java.net.UnknownHostException
    class function getByAddress(para1: JLString; para2: Arr1jbyte; para3: JNNetworkInterface): JNInet6Address; static; overload;  // throws java.net.UnknownHostException
    class function getByAddress(para1: JLString; var para2: array of jbyte; para3: JNNetworkInterface): JNInet6Address; static; overload;  // throws java.net.UnknownHostException
    function isAnyLocalAddress(): jboolean; overload; virtual;
    function isIPv4CompatibleAddress(): jboolean; overload; virtual;
    function isLinkLocalAddress(): jboolean; overload; virtual;
    function isLoopbackAddress(): jboolean; overload; virtual;
    function isMCGlobal(): jboolean; overload; virtual;
    function isMCLinkLocal(): jboolean; overload; virtual;
    function isMCNodeLocal(): jboolean; overload; virtual;
    function isMCOrgLocal(): jboolean; overload; virtual;
    function isMCSiteLocal(): jboolean; overload; virtual;
    function isMulticastAddress(): jboolean; overload; virtual;
    function isSiteLocalAddress(): jboolean; overload; virtual;
    function getScopeId(): jint; overload; virtual;
    function getScopedInterface(): JNNetworkInterface; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JNInetSocketAddress = class external 'java.net' name 'InetSocketAddress' (JNSocketAddress)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: JNInetAddress; para2: jint); overload;
    constructor create(para1: JLString; para2: jint); overload;
    class function createUnresolved(para1: JLString; para2: jint): JNInetSocketAddress; static; overload;
    function getPort(): jint; overload; virtual; final;
    function getAddress(): JNInetAddress; overload; virtual; final;
    function getHostName(): JLString; overload; virtual; final;
    function getHostString(): JLString; overload; virtual; final;
    function isUnresolved(): jboolean; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual; final;
  end;

  JSPrivateKey = interface external 'java.security' name 'PrivateKey' (JSKey)
    const
      serialVersionUID = jlong(6034044314589513430);
  end;

  JSPublicKey = interface external 'java.security' name 'PublicKey' (JSKey)
    const
      serialVersionUID = jlong(7187392471159151072);
  end;

  JCSecretKey = interface external 'javax.crypto' name 'SecretKey' (JSKey)
    const
      serialVersionUID = jlong(-4795878709595146952);
  end;

  JSPermissions = class sealed external 'java.security' name 'Permissions' (JSPermissionCollection, JISerializable)
  public
    constructor create(); overload;
    procedure add(para1: JSPermission); overload; virtual;
    function elements(): JUEnumeration; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSCX509Certificate = class abstract external 'java.security.cert' name 'X509Certificate' (JSCCertificate, JSCX509Extension)
  strict protected
    constructor create(); overload;
  public
    procedure checkValidity(); overload; virtual; abstract;  // throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    procedure checkValidity(para1: JUDate); overload; virtual; abstract;  // throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    function getVersion(): jint; overload; virtual; abstract;
    function getSerialNumber(): JMBigInteger; overload; virtual; abstract;
    function getIssuerDN(): JSPrincipal; overload; virtual; abstract;
    function getIssuerX500Principal(): JSAXX500Principal; overload; virtual;
    function getSubjectDN(): JSPrincipal; overload; virtual; abstract;
    function getSubjectX500Principal(): JSAXX500Principal; overload; virtual;
    function getNotBefore(): JUDate; overload; virtual; abstract;
    function getNotAfter(): JUDate; overload; virtual; abstract;
    function getTBSCertificate(): Arr1jbyte; overload; virtual; abstract;  // throws java.security.cert.CertificateEncodingException
    function getSignature(): Arr1jbyte; overload; virtual; abstract;
    function getSigAlgName(): JLString; overload; virtual; abstract;
    function getSigAlgOID(): JLString; overload; virtual; abstract;
    function getSigAlgParams(): Arr1jbyte; overload; virtual; abstract;
    function getIssuerUniqueID(): Arr1jboolean; overload; virtual; abstract;
    function getSubjectUniqueID(): Arr1jboolean; overload; virtual; abstract;
    function getKeyUsage(): Arr1jboolean; overload; virtual; abstract;
    function getExtendedKeyUsage(): JUList; overload; virtual;  // throws java.security.cert.CertificateParsingException
    function getBasicConstraints(): jint; overload; virtual; abstract;
    function getSubjectAlternativeNames(): JUCollection; overload; virtual;  // throws java.security.cert.CertificateParsingException
    function getIssuerAlternativeNames(): JUCollection; overload; virtual;  // throws java.security.cert.CertificateParsingException
  end;

  JSBatchUpdateException = class external 'java.sql' name 'BatchUpdateException' (JSSQLException, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: Arr1jint; para2: JLThrowable); overload;
    constructor create(const para1: array of jint; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: Arr1jint; para3: JLThrowable); overload;
    constructor create(para1: JLString; const para2: array of jint; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: Arr1jint; para4: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; const para3: array of jint; para4: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: Arr1jint; para5: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; const para4: array of jint; para5: JLThrowable); overload;
    constructor create(para1: Arr1jint); overload;
    constructor create(const para1: array of jint); overload;
    constructor create(para1: JLString; para2: Arr1jint); overload;
    constructor create(para1: JLString; const para2: array of jint); overload;
    constructor create(para1: JLString; para2: JLString; para3: Arr1jint); overload;
    constructor create(para1: JLString; para2: JLString; const para3: array of jint); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: Arr1jint); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; const para4: array of jint); overload;
    function getUpdateCounts(): Arr1jint; overload; virtual;
  end;

  JSSQLClientInfoException = class external 'java.sql' name 'SQLClientInfoException' (JSSQLException)
  public
    constructor create(); overload;
    constructor create(para1: JUMap); overload;
    constructor create(para1: JUMap; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JUMap); overload;
    constructor create(para1: JLString; para2: JUMap; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JUMap); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JUMap; para5: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JUMap); overload;
    constructor create(para1: JLString; para2: JLString; para3: JUMap; para4: JLThrowable); overload;
    function getFailedProperties(): JUMap; overload; virtual;
  end;

  JSSQLNonTransientException = class external 'java.sql' name 'SQLNonTransientException' (JSSQLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLRecoverableException = class external 'java.sql' name 'SQLRecoverableException' (JSSQLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLTransientException = class external 'java.sql' name 'SQLTransientException' (JSSQLException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLWarning = class external 'java.sql' name 'SQLWarning' (JSSQLException, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
    function getNextWarning(): JSSQLWarning; overload; virtual;
    procedure setNextWarning(para1: JSSQLWarning); overload; virtual;
  end;

  JSDate = class external 'java.sql' name 'Date' (JUDate)
  public
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    constructor create(para1: jlong); overload;
    function getHours(): jint; overload; virtual;
    function getMinutes(): jint; overload; virtual;
    function getSeconds(): jint; overload; virtual;
    procedure setHours(para1: jint); overload; virtual;
    procedure setMinutes(para1: jint); overload; virtual;
    procedure setSeconds(para1: jint); overload; virtual;
    procedure setTime(para1: jlong); overload; virtual;
    function toString(): JLString; overload; virtual;
    class function valueOf(para1: JLString): JSDate; static; overload;
  end;

  JSTime = class external 'java.sql' name 'Time' (JUDate)
  public
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    constructor create(para1: jlong); overload;
    function getDate(): jint; overload; virtual;
    function getDay(): jint; overload; virtual;
    function getMonth(): jint; overload; virtual;
    function getYear(): jint; overload; virtual;
    procedure setDate(para1: jint); overload; virtual;
    procedure setMonth(para1: jint); overload; virtual;
    procedure setYear(para1: jint); overload; virtual;
    procedure setTime(para1: jlong); overload; virtual;
    function toString(): JLString; overload; virtual;
    class function valueOf(para1: JLString): JSTime; static; overload;
  end;

  JSqlTimestamp = class external 'java.sql' name 'Timestamp' (JUDate)
  public
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint); overload;  // throws java.lang.IllegalArgumentException
    constructor create(para1: jlong); overload;
    function after(para1: JSqlTimestamp): jboolean; overload; virtual;
    function before(para1: JSqlTimestamp): jboolean; overload; virtual;
    function compareTo(para1: JUDate): jint; overload; virtual;  // throws java.lang.ClassCastException
    function compareTo(para1: JSqlTimestamp): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function equals(para1: JSqlTimestamp): jboolean; overload; virtual;
    function getNanos(): jint; overload; virtual;
    function getTime(): jlong; overload; virtual;
    procedure setNanos(para1: jint); overload; virtual;  // throws java.lang.IllegalArgumentException
    procedure setTime(para1: jlong); overload; virtual;
    function toString(): JLString; overload; virtual;
    class function valueOf(para1: JLString): JSqlTimestamp; static; overload;  // throws java.lang.IllegalArgumentException
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  JBPropertyChangeEvent = class external 'java.beans' name 'PropertyChangeEvent' (JUEventObject)
  public
    constructor create(para1: JLObject; para2: JLString; para3: JLObject; para4: JLObject); overload;
    function getPropertyName(): JLString; overload; virtual;
    procedure setPropagationId(para1: JLObject); overload; virtual;
    function getPropagationId(): JLObject; overload; virtual;
    function getOldValue(): JLObject; overload; virtual;
    function getNewValue(): JLObject; overload; virtual;
  end;

  JUPNodeChangeEvent = class external 'java.util.prefs' name 'NodeChangeEvent' (JUEventObject, JISerializable)
  public
    constructor create(para1: JUPPreferences; para2: JUPPreferences); overload;
    function getParent(): JUPPreferences; overload; virtual;
    function getChild(): JUPPreferences; overload; virtual;
  end;

  JUPPreferenceChangeEvent = class external 'java.util.prefs' name 'PreferenceChangeEvent' (JUEventObject, JISerializable)
  public
    constructor create(para1: JUPPreferences; para2: JLString; para3: JLString); overload;
    function getKey(): JLString; overload; virtual;
    function getNewValue(): JLString; overload; virtual;
    function getNode(): JUPPreferences; overload; virtual;
  end;

  JNSHandshakeCompletedEvent = class external 'javax.net.ssl' name 'HandshakeCompletedEvent' (JUEventObject)
  public
    constructor create(para1: JNSSSLSocket; para2: JNSSSLSession); overload;
    function getSession(): JNSSSLSession; overload; virtual;
    function getCipherSuite(): JLString; overload; virtual;
    function getLocalCertificates(): Arr1JSCCertificate; overload; virtual;
    function getPeerCertificates(): Arr1JSCCertificate; overload; virtual;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getPeerCertificateChain(): Arr1JxSCX509Certificate; overload; virtual;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getPeerPrincipal(): JSPrincipal; overload; virtual;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getLocalPrincipal(): JSPrincipal; overload; virtual;
    function getSocket(): JNSSSLSocket; overload; virtual;
  end;

  JNSSSLSessionBindingEvent = class external 'javax.net.ssl' name 'SSLSessionBindingEvent' (JUEventObject)
  public
    constructor create(para1: JNSSSLSession; para2: JLString); overload;
    function getName(): JLString; overload; virtual;
    function getSession(): JNSSSLSession; overload; virtual;
  end;

  JSConnectionEvent = class external 'javax.sql' name 'ConnectionEvent' (JUEventObject, JISerializable)
  public
    constructor create(para1: JSPooledConnection); overload;
    constructor create(para1: JSPooledConnection; para2: JSSQLException); overload;
    function getSQLException(): JSSQLException; overload; virtual;
  end;

  JSRowSetEvent = class external 'javax.sql' name 'RowSetEvent' (JUEventObject, JISerializable)
  public
    constructor create(para1: JSRowSet); overload;
  end;

  JSStatementEvent = class external 'javax.sql' name 'StatementEvent' (JUEventObject)
  public
    constructor create(para1: JSPooledConnection; para2: JSPreparedStatement; para3: JSSQLException); overload;
    constructor create(para1: JSPooledConnection; para2: JSPreparedStatement); overload;
    function getStatement(): JSPreparedStatement; overload; virtual;
    function getSQLException(): JSSQLException; overload; virtual;
  end;

  JSSecureRandom = class external 'java.security' name 'SecureRandom' (JURandom)
  public
    constructor create(); overload;
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
  strict protected
    constructor create(para1: JSSecureRandomSpi; para2: JSProvider); overload;
  public
    class function getInstance(para1: JLString): JSSecureRandom; static; overload;  // throws java.security.NoSuchAlgorithmException
    class function getInstance(para1: JLString; para2: JLString): JSSecureRandom; static; overload;  // throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    class function getInstance(para1: JLString; para2: JSProvider): JSSecureRandom; static; overload;  // throws java.security.NoSuchAlgorithmException
    function getProvider(): JSProvider; overload; virtual; final;
    function getAlgorithm(): JLString; overload; virtual;
    procedure setSeed(para1: Arr1jbyte); overload; virtual;
    procedure setSeed(var para1: array of jbyte); overload; virtual;
    procedure setSeed(para1: jlong); overload; virtual;
    procedure nextBytes(para1: Arr1jbyte); overload; virtual;
    procedure nextBytes(var para1: array of jbyte); overload; virtual;
  strict protected
    function next(para1: jint): jint; overload; virtual; final;
  public
    class function getSeed(para1: jint): Arr1jbyte; static; overload;
    function generateSeed(para1: jint): Arr1jbyte; overload; virtual;
  end;

  JUSimpleTimeZone = class external 'java.util' name 'SimpleTimeZone' (JUTimeZone)
  public
    const
      STANDARD_TIME = 1;
      UTC_TIME = 2;
      WALL_TIME = 0;
  public
    constructor create(para1: jint; para2: JLString); overload;
    constructor create(para1: jint; para2: JLString; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint); overload;
    constructor create(para1: jint; para2: JLString; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint; para11: jint); overload;
    constructor create(para1: jint; para2: JLString; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint; para11: jint; para12: jint; para13: jint); overload;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getDSTSavings(): jint; overload; virtual;
    function getOffset(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint): jint; overload; virtual;
    function getOffset(para1: jlong): jint; overload; virtual;
    function getRawOffset(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function hasSameRules(para1: JUTimeZone): jboolean; overload; virtual;
    function inDaylightTime(para1: JUDate): jboolean; overload; virtual;
    procedure setDSTSavings(para1: jint); overload; virtual;
    procedure setEndRule(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure setEndRule(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setEndRule(para1: jint; para2: jint; para3: jint; para4: jint; para5: jboolean); overload; virtual;
    procedure setRawOffset(para1: jint); overload; virtual;
    procedure setStartRule(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure setStartRule(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setStartRule(para1: jint; para2: jint; para3: jint; para4: jint; para5: jboolean); overload; virtual;
    procedure setStartYear(para1: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
    function useDaylightTime(): jboolean; overload; virtual;
  end;

  JUCLAbstractQueuedLongSynchronizer = class abstract external 'java.util.concurrent.locks' name 'AbstractQueuedLongSynchronizer' (JUCLAbstractOwnableSynchronizer, JISerializable)
  public
    type
      InnerConditionObject = class;
      Arr1InnerConditionObject = array of InnerConditionObject;
      Arr2InnerConditionObject = array of Arr1InnerConditionObject;
      Arr3InnerConditionObject = array of Arr2InnerConditionObject;
      InnerConditionObject = class external 'java.util.concurrent.locks' name 'ConditionObject' 
      end;

  strict protected
    constructor create(); overload;
    function getState(): jlong; overload; virtual; final;
    procedure setState(para1: jlong); overload; virtual; final;
    function compareAndSetState(para1: jlong; para2: jlong): jboolean; overload; virtual; final;
    function tryAcquire(para1: jlong): jboolean; overload; virtual;
    function tryRelease(para1: jlong): jboolean; overload; virtual;
    function tryAcquireShared(para1: jlong): jlong; overload; virtual;
    function tryReleaseShared(para1: jlong): jboolean; overload; virtual;
    function isHeldExclusively(): jboolean; overload; virtual;
  public
    procedure acquire(para1: jlong); overload; virtual; final;
    procedure acquireInterruptibly(para1: jlong); overload; virtual; final;  // throws java.lang.InterruptedException
    function tryAcquireNanos(para1: jlong; para2: jlong): jboolean; overload; virtual; final;  // throws java.lang.InterruptedException
    function release(para1: jlong): jboolean; overload; virtual; final;
    procedure acquireShared(para1: jlong); overload; virtual; final;
    procedure acquireSharedInterruptibly(para1: jlong); overload; virtual; final;  // throws java.lang.InterruptedException
    function tryAcquireSharedNanos(para1: jlong; para2: jlong): jboolean; overload; virtual; final;  // throws java.lang.InterruptedException
    function releaseShared(para1: jlong): jboolean; overload; virtual; final;
    function hasQueuedThreads(): jboolean; overload; virtual; final;
    function hasContended(): jboolean; overload; virtual; final;
    function getFirstQueuedThread(): JLThread; overload; virtual; final;
    function isQueued(para1: JLThread): jboolean; overload; virtual; final;
    function hasQueuedPredecessors(): jboolean; overload; virtual; final;
    function getQueueLength(): jint; overload; virtual; final;
    function getQueuedThreads(): JUCollection; overload; virtual; final;
    function getExclusiveQueuedThreads(): JUCollection; overload; virtual; final;
    function getSharedQueuedThreads(): JUCollection; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    function owns(para1: JUCLAbstractQueuedLongSynchronizer.InnerConditionObject): jboolean; overload; virtual; final;
    function hasWaiters(para1: JUCLAbstractQueuedLongSynchronizer.InnerConditionObject): jboolean; overload; virtual; final;
    function getWaitQueueLength(para1: JUCLAbstractQueuedLongSynchronizer.InnerConditionObject): jint; overload; virtual; final;
    function getWaitingThreads(para1: JUCLAbstractQueuedLongSynchronizer.InnerConditionObject): JUCollection; overload; virtual; final;
  end;

  JUCLAbstractQueuedSynchronizer = class abstract external 'java.util.concurrent.locks' name 'AbstractQueuedSynchronizer' (JUCLAbstractOwnableSynchronizer, JISerializable)
  public
    type
      InnerConditionObject = class;
      Arr1InnerConditionObject = array of InnerConditionObject;
      Arr2InnerConditionObject = array of Arr1InnerConditionObject;
      Arr3InnerConditionObject = array of Arr2InnerConditionObject;
      InnerConditionObject = class external 'java.util.concurrent.locks' name 'ConditionObject' 
      end;

  strict protected
    constructor create(); overload;
    function getState(): jint; overload; virtual; final;
    procedure setState(para1: jint); overload; virtual; final;
    function compareAndSetState(para1: jint; para2: jint): jboolean; overload; virtual; final;
    function tryAcquire(para1: jint): jboolean; overload; virtual;
    function tryRelease(para1: jint): jboolean; overload; virtual;
    function tryAcquireShared(para1: jint): jint; overload; virtual;
    function tryReleaseShared(para1: jint): jboolean; overload; virtual;
    function isHeldExclusively(): jboolean; overload; virtual;
  public
    procedure acquire(para1: jint); overload; virtual; final;
    procedure acquireInterruptibly(para1: jint); overload; virtual; final;  // throws java.lang.InterruptedException
    function tryAcquireNanos(para1: jint; para2: jlong): jboolean; overload; virtual; final;  // throws java.lang.InterruptedException
    function release(para1: jint): jboolean; overload; virtual; final;
    procedure acquireShared(para1: jint); overload; virtual; final;
    procedure acquireSharedInterruptibly(para1: jint); overload; virtual; final;  // throws java.lang.InterruptedException
    function tryAcquireSharedNanos(para1: jint; para2: jlong): jboolean; overload; virtual; final;  // throws java.lang.InterruptedException
    function releaseShared(para1: jint): jboolean; overload; virtual; final;
    function hasQueuedThreads(): jboolean; overload; virtual; final;
    function hasContended(): jboolean; overload; virtual; final;
    function getFirstQueuedThread(): JLThread; overload; virtual; final;
    function isQueued(para1: JLThread): jboolean; overload; virtual; final;
    function hasQueuedPredecessors(): jboolean; overload; virtual; final;
    function getQueueLength(): jint; overload; virtual; final;
    function getQueuedThreads(): JUCollection; overload; virtual; final;
    function getExclusiveQueuedThreads(): JUCollection; overload; virtual; final;
    function getSharedQueuedThreads(): JUCollection; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    function owns(para1: JUCLAbstractQueuedSynchronizer.InnerConditionObject): jboolean; overload; virtual; final;
    function hasWaiters(para1: JUCLAbstractQueuedSynchronizer.InnerConditionObject): jboolean; overload; virtual; final;
    function getWaitQueueLength(para1: JUCLAbstractQueuedSynchronizer.InnerConditionObject): jint; overload; virtual; final;
    function getWaitingThreads(para1: JUCLAbstractQueuedSynchronizer.InnerConditionObject): JUCollection; overload; virtual; final;
  end;

  OAHHttpVersion = class sealed external 'org.apache.http' name 'HttpVersion' (OAHProtocolVersion, JISerializable)
  public
    const
      HTTP = 'HTTP';
  public
    final class var
      fHTTP_0_9: OAHHttpVersion; external name 'HTTP_0_9';
      fHTTP_1_0: OAHHttpVersion; external name 'HTTP_1_0';
      fHTTP_1_1: OAHHttpVersion; external name 'HTTP_1_1';
  public
    constructor create(para1: jint; para2: jint); overload;
    function forVersion(para1: jint; para2: jint): OAHProtocolVersion; overload; virtual;
  end;

  JNSocketTimeoutException = class external 'java.net' name 'SocketTimeoutException' (JIInterruptedIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OAHCConnectTimeoutException = class external 'org.apache.http.conn' name 'ConnectTimeoutException' (JIInterruptedIOException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIInvalidClassException = class external 'java.io' name 'InvalidClassException' (JIObjectStreamException)
  public
    var
      fclassname: JLString; external name 'classname';
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getMessage(): JLString; overload; virtual;
  end;

  JIInvalidObjectException = class external 'java.io' name 'InvalidObjectException' (JIObjectStreamException)
  public
    constructor create(para1: JLString); overload;
  end;

  JINotActiveException = class external 'java.io' name 'NotActiveException' (JIObjectStreamException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JINotSerializableException = class external 'java.io' name 'NotSerializableException' (JIObjectStreamException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIOptionalDataException = class external 'java.io' name 'OptionalDataException' (JIObjectStreamException)
  public
    var
      feof: jboolean; external name 'eof';
      flength: jint; external name 'length';
  end;

  JIStreamCorruptedException = class external 'java.io' name 'StreamCorruptedException' (JIObjectStreamException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JIWriteAbortedException = class external 'java.io' name 'WriteAbortedException' (JIObjectStreamException)
  public
    var
      fdetail: JLException; external name 'detail';
  public
    constructor create(para1: JLString; para2: JLException); overload;
    function getMessage(): JLString; overload; virtual;
    function getCause(): JLThrowable; overload; virtual;
  end;

  JNBindException = class external 'java.net' name 'BindException' (JNSocketException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNConnectException = class external 'java.net' name 'ConnectException' (JNSocketException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNNoRouteToHostException = class external 'java.net' name 'NoRouteToHostException' (JNSocketException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNPortUnreachableException = class external 'java.net' name 'PortUnreachableException' (JNSocketException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNCAsynchronousCloseException = class external 'java.nio.channels' name 'AsynchronousCloseException' (JNCClosedChannelException)
  public
    constructor create(); overload;
  end;

  JUJJarException = class external 'java.util.jar' name 'JarException' (JUZZipException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JNSSSLHandshakeException = class external 'javax.net.ssl' name 'SSLHandshakeException' (JNSSSLException)
  public
    constructor create(para1: JLString); overload;
  end;

  JNSSSLKeyException = class external 'javax.net.ssl' name 'SSLKeyException' (JNSSSLException)
  public
    constructor create(para1: JLString); overload;
  end;

  JNSSSLPeerUnverifiedException = class external 'javax.net.ssl' name 'SSLPeerUnverifiedException' (JNSSSLException)
  public
    constructor create(para1: JLString); overload;
  end;

  JNSSSLProtocolException = class external 'javax.net.ssl' name 'SSLProtocolException' (JNSSSLException)
  public
    constructor create(para1: JLString); overload;
  end;

  OAHCHttpResponseException = class external 'org.apache.http.client' name 'HttpResponseException' (OAHCClientProtocolException)
  public
    constructor create(para1: jint; para2: JLString); overload;
    function getStatusCode(): jint; overload; virtual;
  end;

  ATComparisonFailure = class external 'android.test' name 'ComparisonFailure' (ATAssertionFailedError)
  public
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;
    function getMessage(): JLString; overload; virtual;
  end;

  JLInternalError = class external 'java.lang' name 'InternalError' (JLVirtualMachineError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLOutOfMemoryError = class external 'java.lang' name 'OutOfMemoryError' (JLVirtualMachineError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLStackOverflowError = class external 'java.lang' name 'StackOverflowError' (JLVirtualMachineError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLUnknownError = class external 'java.lang' name 'UnknownError' (JLVirtualMachineError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JFComparisonFailure = class external 'junit.framework' name 'ComparisonFailure' (JFAssertionFailedError)
  public
    constructor create(para1: JLString; para2: JLString; para3: JLString); overload;
    function getMessage(): JLString; overload; virtual;
    function getActual(): JLString; overload; virtual;
    function getExpected(): JLString; overload; virtual;
  end;

  ATAlteredCharSequence = class external 'android.text' name 'AlteredCharSequence' (JLObject, JLCharSequence, ATGetChars)
  public
    class function make(para1: JLCharSequence; para2: Arr1jchar; para3: jint; para4: jint): ATAlteredCharSequence; static; overload;
    class function make(para1: JLCharSequence; var para2: array of jchar; para3: jint; para4: jint): ATAlteredCharSequence; static; overload;
    function charAt(para1: jint): jchar; overload; virtual;
    function length(): jint; overload; virtual;
    function subSequence(para1: jint; para2: jint): JLCharSequence; overload; virtual;
    procedure getChars(para1: jint; para2: jint; para3: Arr1jchar; para4: jint); overload; virtual;
    procedure getChars(para1: jint; para2: jint; var para3: array of jchar; para4: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ATSpannable = interface external 'android.text' name 'Spannable' (ATSpanned)
    type
      InnerFactory = class;
      Arr1InnerFactory = array of InnerFactory;
      Arr2InnerFactory = array of Arr1InnerFactory;
      Arr3InnerFactory = array of Arr2InnerFactory;
      InnerFactory = class external 'android.text' name 'Factory' (JLObject)
      public
        constructor create(); overload;
        class function getInstance(): ATSpannable.InnerFactory; static; overload;
        function newSpannable(para1: JLCharSequence): ATSpannable; overload; virtual;
      end;

    procedure setSpan(para1: JLObject; para2: jint; para3: jint; para4: jint); overload;
    procedure removeSpan(para1: JLObject); overload;
  end;

  ATSpannedString = class sealed external 'android.text' name 'SpannedString' (ATSpannableStringInternal, JLCharSequence, ATGetChars, ATSpanned)
  public
    constructor create(para1: JLCharSequence); overload;
    function subSequence(para1: jint; para2: jint): JLCharSequence; overload; virtual;
    class function valueOf(para1: JLCharSequence): ATSpannedString; static; overload;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function nextSpanTransition(para1: jint; para2: jint; para3: JLClass): jint; overload; virtual;
    function getSpans(para1: jint; para2: jint; para3: JLClass): Arr1JLObject; overload; virtual;
    function getSpanFlags(para1: JLObject): jint; overload; virtual;
    function getSpanEnd(para1: JLObject): jint; overload; virtual;
    function getSpanStart(para1: JLObject): jint; overload; virtual;
  end;

  JLUnsupportedClassVersionError = class external 'java.lang' name 'UnsupportedClassVersionError' (JLClassFormatError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLRGenericSignatureFormatError = class external 'java.lang.reflect' name 'GenericSignatureFormatError' (JLClassFormatError)
  public
    constructor create(); overload;
  end;

  JLAbstractMethodError = class external 'java.lang' name 'AbstractMethodError' (JLIncompatibleClassChangeError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLIllegalAccessError = class external 'java.lang' name 'IllegalAccessError' (JLIncompatibleClassChangeError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLInstantiationError = class external 'java.lang' name 'InstantiationError' (JLIncompatibleClassChangeError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLNoSuchFieldError = class external 'java.lang' name 'NoSuchFieldError' (JLIncompatibleClassChangeError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JLNoSuchMethodError = class external 'java.lang' name 'NoSuchMethodError' (JLIncompatibleClassChangeError)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  JUDuplicateFormatFlagsException = class external 'java.util' name 'DuplicateFormatFlagsException' (JUIllegalFormatException)
  public
    constructor create(para1: JLString); overload;
    function getFlags(): JLString; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUFormatFlagsConversionMismatchException = class external 'java.util' name 'FormatFlagsConversionMismatchException' (JUIllegalFormatException, JISerializable)
  public
    constructor create(para1: JLString; para2: jchar); overload;
    function getFlags(): JLString; overload; virtual;
    function getConversion(): jchar; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUIllegalFormatCodePointException = class external 'java.util' name 'IllegalFormatCodePointException' (JUIllegalFormatException, JISerializable)
  public
    constructor create(para1: jint); overload;
    function getCodePoint(): jint; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUIllegalFormatConversionException = class external 'java.util' name 'IllegalFormatConversionException' (JUIllegalFormatException, JISerializable)
  public
    constructor create(para1: jchar; para2: JLClass); overload;
    function getArgumentClass(): JLClass; overload; virtual;
    function getConversion(): jchar; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUIllegalFormatFlagsException = class external 'java.util' name 'IllegalFormatFlagsException' (JUIllegalFormatException, JISerializable)
  public
    constructor create(para1: JLString); overload;
    function getFlags(): JLString; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUIllegalFormatPrecisionException = class external 'java.util' name 'IllegalFormatPrecisionException' (JUIllegalFormatException)
  public
    constructor create(para1: jint); overload;
    function getPrecision(): jint; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUIllegalFormatWidthException = class external 'java.util' name 'IllegalFormatWidthException' (JUIllegalFormatException)
  public
    constructor create(para1: jint); overload;
    function getWidth(): jint; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUMissingFormatArgumentException = class external 'java.util' name 'MissingFormatArgumentException' (JUIllegalFormatException)
  public
    constructor create(para1: JLString); overload;
    function getFormatSpecifier(): JLString; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUMissingFormatWidthException = class external 'java.util' name 'MissingFormatWidthException' (JUIllegalFormatException)
  public
    constructor create(para1: JLString); overload;
    function getFormatSpecifier(): JLString; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUUnknownFormatConversionException = class external 'java.util' name 'UnknownFormatConversionException' (JUIllegalFormatException)
  public
    constructor create(para1: JLString); overload;
    function getConversion(): JLString; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUUnknownFormatFlagsException = class external 'java.util' name 'UnknownFormatFlagsException' (JUIllegalFormatException)
  public
    constructor create(para1: JLString); overload;
    function getFlags(): JLString; overload; virtual;
    function getMessage(): JLString; overload; virtual;
  end;

  JUNavigableMap = interface external 'java.util' name 'NavigableMap' (JUSortedMap)
    function lowerEntry(para1: JLObject): JUMap.InnerEntry; overload;
    function lowerKey(para1: JLObject): JLObject; overload;
    function floorEntry(para1: JLObject): JUMap.InnerEntry; overload;
    function floorKey(para1: JLObject): JLObject; overload;
    function ceilingEntry(para1: JLObject): JUMap.InnerEntry; overload;
    function ceilingKey(para1: JLObject): JLObject; overload;
    function higherEntry(para1: JLObject): JUMap.InnerEntry; overload;
    function higherKey(para1: JLObject): JLObject; overload;
    function firstEntry(): JUMap.InnerEntry; overload;
    function lastEntry(): JUMap.InnerEntry; overload;
    function pollFirstEntry(): JUMap.InnerEntry; overload;
    function pollLastEntry(): JUMap.InnerEntry; overload;
    function descendingMap(): JUNavigableMap; overload;
    function navigableKeySet(): JUNavigableSet; overload;
    function descendingKeySet(): JUNavigableSet; overload;
    function subMap(para1: JLObject; para2: jboolean; para3: JLObject; para4: jboolean): JUNavigableMap; overload;
    function headMap(para1: JLObject; para2: jboolean): JUNavigableMap; overload;
    function tailMap(para1: JLObject; para2: jboolean): JUNavigableMap; overload;
    function subMap(para1: JLObject; para2: JLObject): JUSortedMap; overload;
    function headMap(para1: JLObject): JUSortedMap; overload;
    function tailMap(para1: JLObject): JUSortedMap; overload;
  end;

  JUCConcurrentHashMap = class external 'java.util.concurrent' name 'ConcurrentHashMap' (JUAbstractMap, JUCConcurrentMap, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JUMap); overload;
    constructor create(para1: jint; para2: jfloat); overload;
    constructor create(para1: jint; para2: jfloat; para3: jint); overload;
    function size(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    procedure putAll(para1: JUMap); overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    procedure clear(); overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function values(): JUCollection; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function putIfAbsent(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    function remove(para1: JLObject; para2: JLObject): jboolean; overload; virtual;
    function replace(para1: JLObject; para2: JLObject; para3: JLObject): jboolean; overload; virtual;
    function replace(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function keys(): JUEnumeration; overload; virtual;
    function elements(): JUEnumeration; overload; virtual;
  end;

  JULinkedHashSet = class external 'java.util' name 'LinkedHashSet' (JUHashSet, JUSet, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jfloat); overload;
    constructor create(para1: JUCollection); overload;
  end;

  JUNavigableSet = interface external 'java.util' name 'NavigableSet' (JUSortedSet)
    function lower(para1: JLObject): JLObject; overload;
    function floor(para1: JLObject): JLObject; overload;
    function ceiling(para1: JLObject): JLObject; overload;
    function higher(para1: JLObject): JLObject; overload;
    function pollFirst(): JLObject; overload;
    function pollLast(): JLObject; overload;
    function iterator(): JUIterator; overload;
    function descendingSet(): JUNavigableSet; overload;
    function descendingIterator(): JUIterator; overload;
    function subSet(para1: JLObject; para2: jboolean; para3: JLObject; para4: jboolean): JUNavigableSet; overload;
    function headSet(para1: JLObject; para2: jboolean): JUNavigableSet; overload;
    function tailSet(para1: JLObject; para2: jboolean): JUNavigableSet; overload;
    function subSet(para1: JLObject; para2: JLObject): JUSortedSet; overload;
    function headSet(para1: JLObject): JUSortedSet; overload;
    function tailSet(para1: JLObject): JUSortedSet; overload;
  end;

  JUAbstractList = class abstract external 'java.util' name 'AbstractList' (JUAbstractCollection, JUList)
  strict protected
    var
      fmodCount: jint; external name 'modCount';
  strict protected
    constructor create(); overload;
  public
    procedure add(para1: jint; para2: JLObject); overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function addAll(para1: jint; para2: JUCollection): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function get(para1: jint): JLObject; overload; virtual; abstract;
    function hashCode(): jint; overload; virtual;
    function indexOf(para1: JLObject): jint; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function lastIndexOf(para1: JLObject): jint; overload; virtual;
    function listIterator(): JUListIterator; overload; virtual;
    function listIterator(para1: jint): JUListIterator; overload; virtual;
    function remove(para1: jint): JLObject; overload; virtual;
  strict protected
    procedure removeRange(para1: jint; para2: jint); overload; virtual;
  public
    function &set(para1: jint; para2: JLObject): JLObject; overload; virtual;
    function subList(para1: jint; para2: jint): JUList; overload; virtual;
  end;

  JUCCopyOnWriteArrayList = class external 'java.util.concurrent' name 'CopyOnWriteArrayList' (JLObject, JUList, JURandomAccess, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    constructor create(para1: Arr1JLObject); overload;
    constructor create(const para1: array of JLObject); overload;
    function clone(): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function get(para1: jint): JLObject; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function containsAll(para1: JUCollection): jboolean; overload; virtual;
    function indexOf(para1: JLObject; para2: jint): jint; overload; virtual;
    function indexOf(para1: JLObject): jint; overload; virtual;
    function lastIndexOf(para1: JLObject; para2: jint): jint; overload; virtual;
    function lastIndexOf(para1: JLObject): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function listIterator(para1: jint): JUListIterator; overload; virtual;
    function listIterator(): JUListIterator; overload; virtual;
    function subList(para1: jint; para2: jint): JUList; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    procedure add(para1: jint; para2: JLObject); overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
    function addAll(para1: jint; para2: JUCollection): jboolean; overload; virtual;
    function addAllAbsent(para1: JUCollection): jint; overload; virtual;
    function addIfAbsent(para1: JLObject): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function remove(para1: jint): JLObject; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function removeAll(para1: JUCollection): jboolean; overload; virtual;
    function retainAll(para1: JUCollection): jboolean; overload; virtual;
    function &set(para1: jint; para2: JLObject): JLObject; overload; virtual;
  end;

  JUAbstractQueue = class abstract external 'java.util' name 'AbstractQueue' (JUAbstractCollection, JUQueue)
  strict protected
    constructor create(); overload;
  public
    function add(para1: JLObject): jboolean; overload; virtual;
    function remove(): JLObject; overload; virtual;
    function element(): JLObject; overload; virtual;
    procedure clear(); overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
  end;

  JUDeque = interface external 'java.util' name 'Deque' (JUQueue)
    procedure addFirst(para1: JLObject); overload;
    procedure addLast(para1: JLObject); overload;
    function offerFirst(para1: JLObject): jboolean; overload;
    function offerLast(para1: JLObject): jboolean; overload;
    function removeFirst(): JLObject; overload;
    function removeLast(): JLObject; overload;
    function pollFirst(): JLObject; overload;
    function pollLast(): JLObject; overload;
    function getFirst(): JLObject; overload;
    function getLast(): JLObject; overload;
    function peekFirst(): JLObject; overload;
    function peekLast(): JLObject; overload;
    function removeFirstOccurrence(para1: JLObject): jboolean; overload;
    function removeLastOccurrence(para1: JLObject): jboolean; overload;
    function add(para1: JLObject): jboolean; overload;
    function offer(para1: JLObject): jboolean; overload;
    function remove(): JLObject; overload;
    function poll(): JLObject; overload;
    function element(): JLObject; overload;
    function peek(): JLObject; overload;
    procedure push(para1: JLObject); overload;
    function pop(): JLObject; overload;
    function remove(para1: JLObject): jboolean; overload;
    function contains(para1: JLObject): jboolean; overload;
    function size(): jint; overload;
    function iterator(): JUIterator; overload;
    function descendingIterator(): JUIterator; overload;
  end;

  JUCBlockingQueue = interface external 'java.util.concurrent' name 'BlockingQueue' (JUQueue)
    function add(para1: JLObject): jboolean; overload;
    function offer(para1: JLObject): jboolean; overload;
    procedure put(para1: JLObject); overload;  // throws java.lang.InterruptedException
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload;  // throws java.lang.InterruptedException
    function take(): JLObject; overload;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload;  // throws java.lang.InterruptedException
    function remainingCapacity(): jint; overload;
    function remove(para1: JLObject): jboolean; overload;
    function contains(para1: JLObject): jboolean; overload;
    function drainTo(para1: JUCollection): jint; overload;
    function drainTo(para1: JUCollection; para2: jint): jint; overload;
  end;

  AVAAccelerateDecelerateInterpolator = class external 'android.view.animation' name 'AccelerateDecelerateInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AVAAccelerateInterpolator = class external 'android.view.animation' name 'AccelerateInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(); overload;
    constructor create(para1: jfloat); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AVAAnticipateInterpolator = class external 'android.view.animation' name 'AnticipateInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(); overload;
    constructor create(para1: jfloat); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AVAAnticipateOvershootInterpolator = class external 'android.view.animation' name 'AnticipateOvershootInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(); overload;
    constructor create(para1: jfloat); overload;
    constructor create(para1: jfloat; para2: jfloat); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AVABounceInterpolator = class external 'android.view.animation' name 'BounceInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AVACycleInterpolator = class external 'android.view.animation' name 'CycleInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(para1: jfloat); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AVADecelerateInterpolator = class external 'android.view.animation' name 'DecelerateInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(); overload;
    constructor create(para1: jfloat); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AVALinearInterpolator = class external 'android.view.animation' name 'LinearInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AVAOvershootInterpolator = class external 'android.view.animation' name 'OvershootInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(); overload;
    constructor create(para1: jfloat); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  ACContentProvider = class abstract external 'android.content' name 'ContentProvider' (JLObject, ACComponentCallbacks2)
  public
    type
      InnerPipeDataWriter = interface;
      Arr1InnerPipeDataWriter = array of InnerPipeDataWriter;
      Arr2InnerPipeDataWriter = array of Arr1InnerPipeDataWriter;
      Arr3InnerPipeDataWriter = array of Arr2InnerPipeDataWriter;
      InnerPipeDataWriter = interface external 'android.content' name 'PipeDataWriter' 
        procedure writeDataToPipe(para1: AOParcelFileDescriptor; para2: ANUri; para3: JLString; para4: AOBundle; para5: JLObject); overload;
      end;

  public
    constructor create(); overload;
    function getContext(): ACContext; overload; virtual; final;
    function getCallingPackage(): JLString; overload; virtual; final;
  strict protected
    procedure setReadPermission(para1: JLString); overload; virtual; final;
  public
    function getReadPermission(): JLString; overload; virtual; final;
  strict protected
    procedure setWritePermission(para1: JLString); overload; virtual; final;
  public
    function getWritePermission(): JLString; overload; virtual; final;
  strict protected
    procedure setPathPermissions(para1: Arr1ACPPathPermission); overload; virtual; final;
    procedure setPathPermissions(var para1: array of ACPPathPermission); overload; virtual; final;
  public
    function getPathPermissions(): Arr1ACPPathPermission; overload; virtual; final;
    function onCreate(): jboolean; overload; virtual; abstract;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    procedure onLowMemory(); overload; virtual;
    procedure onTrimMemory(para1: jint); overload; virtual;
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString): ADCursor; overload; virtual; abstract;
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString): ADCursor; overload; virtual; abstract;
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString; para6: AOCancellationSignal): ADCursor; overload; virtual;
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString; para6: AOCancellationSignal): ADCursor; overload; virtual;
    function getType(para1: ANUri): JLString; overload; virtual; abstract;
    function canonicalize(para1: ANUri): ANUri; overload; virtual;
    function uncanonicalize(para1: ANUri): ANUri; overload; virtual;
    function insert(para1: ANUri; para2: ACContentValues): ANUri; overload; virtual; abstract;
    function bulkInsert(para1: ANUri; para2: Arr1ACContentValues): jint; overload; virtual;
    function bulkInsert(para1: ANUri; var para2: array of ACContentValues): jint; overload; virtual;
    function delete(para1: ANUri; para2: JLString; para3: Arr1JLString): jint; overload; virtual; abstract;
    function delete(para1: ANUri; para2: JLString; var para3: array of JLString): jint; overload; virtual; abstract;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; para4: Arr1JLString): jint; overload; virtual; abstract;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; var para4: array of JLString): jint; overload; virtual; abstract;
    function openFile(para1: ANUri; para2: JLString): AOParcelFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
    function openFile(para1: ANUri; para2: JLString; para3: AOCancellationSignal): AOParcelFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
    function openAssetFile(para1: ANUri; para2: JLString): ACRAssetFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
    function openAssetFile(para1: ANUri; para2: JLString; para3: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
  strict protected
    function openFileHelper(para1: ANUri; para2: JLString): AOParcelFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
  public
    function getStreamTypes(para1: ANUri; para2: JLString): Arr1JLString; overload; virtual;
    function openTypedAssetFile(para1: ANUri; para2: JLString; para3: AOBundle): ACRAssetFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
    function openTypedAssetFile(para1: ANUri; para2: JLString; para3: AOBundle; para4: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
    function openPipeHelper(para1: ANUri; para2: JLString; para3: AOBundle; para4: JLObject; para5: ACContentProvider.InnerPipeDataWriter): AOParcelFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
  strict protected
    function isTemporary(): jboolean; overload; virtual;
  public
    procedure attachInfo(para1: ACContext; para2: ACPProviderInfo); overload; virtual;
    function applyBatch(para1: JUArrayList): Arr1ACContentProviderResult; overload; virtual;  // throws android.content.OperationApplicationException
    function call(para1: JLString; para2: JLString; para3: AOBundle): AOBundle; overload; virtual;
    procedure shutdown(); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
  end;

  ACCursorLoader = class external 'android.content' name 'CursorLoader' (ACAsyncTaskLoader)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: ANUri; para3: Arr1JLString; para4: JLString; para5: Arr1JLString; para6: JLString); overload;
    constructor create(para1: ACContext; para2: ANUri; const para3: array of JLString; para4: JLString; const para5: array of JLString; para6: JLString); overload;
    function loadInBackground(): ADCursor; overload; virtual;
    procedure cancelLoadInBackground(); overload; virtual;
    procedure deliverResult(para1: ADCursor); overload; virtual;
  strict protected
    procedure onStartLoading(); overload; virtual;
    procedure onStopLoading(); overload; virtual;
  public
    procedure onCanceled(para1: ADCursor); overload; virtual;
  strict protected
    procedure onReset(); overload; virtual;
  public
    function getUri(): ANUri; overload; virtual;
    procedure setUri(para1: ANUri); overload; virtual;
    function getProjection(): Arr1JLString; overload; virtual;
    procedure setProjection(para1: Arr1JLString); overload; virtual;
    procedure setProjection(var para1: array of JLString); overload; virtual;
    function getSelection(): JLString; overload; virtual;
    procedure setSelection(para1: JLString); overload; virtual;
    function getSelectionArgs(): Arr1JLString; overload; virtual;
    procedure setSelectionArgs(para1: Arr1JLString); overload; virtual;
    procedure setSelectionArgs(var para1: array of JLString); overload; virtual;
    function getSortOrder(): JLString; overload; virtual;
    procedure setSortOrder(para1: JLString); overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; para4: Arr1JLString); overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; var para4: array of JLString); overload; virtual;
    function loadInBackground(): JLObject; overload; virtual;
    procedure onCanceled(para1: JLObject); overload; virtual;
    procedure deliverResult(para1: JLObject); overload; virtual;
  end;

  ADAbstractCursor = class abstract external 'android.database' name 'AbstractCursor' (JLObject, ADCrossProcessCursor)
  public
    type
      InnerSelfContentObserver = class;
      Arr1InnerSelfContentObserver = array of InnerSelfContentObserver;
      Arr2InnerSelfContentObserver = array of Arr1InnerSelfContentObserver;
      Arr3InnerSelfContentObserver = array of Arr2InnerSelfContentObserver;
      InnerSelfContentObserver = class external 'android.database' name 'SelfContentObserver' (ADContentObserver)
      public
        constructor create(para1: ADAbstractCursor); overload;
        function deliverSelfNotifications(): jboolean; overload; virtual;
        procedure onChange(para1: jboolean); overload; virtual;
      end;

  strict protected
    var
      fmClosed: jboolean; external name 'mClosed';
      fmContentResolver: ACContentResolver; external name 'mContentResolver';
      fmCurrentRowID: JLLong deprecated; external name 'mCurrentRowID';
      fmPos: jint; external name 'mPos';
      fmRowIdColumnIndex: jint deprecated; external name 'mRowIdColumnIndex';
      fmUpdatedRows: JUHashMap deprecated; external name 'mUpdatedRows';
  public
    constructor create(); overload;
    function getCount(): jint; overload; virtual; abstract;
    function getColumnNames(): Arr1JLString; overload; virtual; abstract;
    function getString(para1: jint): JLString; overload; virtual; abstract;
    function getShort(para1: jint): jshort; overload; virtual; abstract;
    function getInt(para1: jint): jint; overload; virtual; abstract;
    function getLong(para1: jint): jlong; overload; virtual; abstract;
    function getFloat(para1: jint): jfloat; overload; virtual; abstract;
    function getDouble(para1: jint): jdouble; overload; virtual; abstract;
    function isNull(para1: jint): jboolean; overload; virtual; abstract;
    function getType(para1: jint): jint; overload; virtual;
    function getBlob(para1: jint): Arr1jbyte; overload; virtual;
    function getWindow(): ADCursorWindow; overload; virtual;
    function getColumnCount(): jint; overload; virtual;
    procedure deactivate(); overload; virtual;
    function requery(): jboolean; overload; virtual;
    function isClosed(): jboolean; overload; virtual;
    procedure close(); overload; virtual;
    function onMove(para1: jint; para2: jint): jboolean; overload; virtual;
    procedure copyStringToBuffer(para1: jint; para2: ADCharArrayBuffer); overload; virtual;
    function getPosition(): jint; overload; virtual; final;
    function moveToPosition(para1: jint): jboolean; overload; virtual; final;
    procedure fillWindow(para1: jint; para2: ADCursorWindow); overload; virtual;
    function move(para1: jint): jboolean; overload; virtual; final;
    function moveToFirst(): jboolean; overload; virtual; final;
    function moveToLast(): jboolean; overload; virtual; final;
    function moveToNext(): jboolean; overload; virtual; final;
    function moveToPrevious(): jboolean; overload; virtual; final;
    function isFirst(): jboolean; overload; virtual; final;
    function isLast(): jboolean; overload; virtual; final;
    function isBeforeFirst(): jboolean; overload; virtual; final;
    function isAfterLast(): jboolean; overload; virtual; final;
    function getColumnIndex(para1: JLString): jint; overload; virtual;
    function getColumnIndexOrThrow(para1: JLString): jint; overload; virtual;
    function getColumnName(para1: jint): JLString; overload; virtual;
    procedure registerContentObserver(para1: ADContentObserver); overload; virtual;
    procedure unregisterContentObserver(para1: ADContentObserver); overload; virtual;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload; virtual;
  strict protected
    procedure onChange(para1: jboolean); overload; virtual;
  public
    procedure setNotificationUri(para1: ACContentResolver; para2: ANUri); overload; virtual;
    function getNotificationUri(): ANUri; overload; virtual;
    function getWantsAllOnMoveCalls(): jboolean; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function respond(para1: AOBundle): AOBundle; overload; virtual;
  strict protected
    function isFieldUpdated(para1: jint): jboolean; overload; virtual;
    function getUpdatedField(para1: jint): JLObject; overload; virtual;
    procedure checkPosition(); overload; virtual;
    procedure finalize(); overload; virtual;
  end;

  ADCrossProcessCursorWrapper = class external 'android.database' name 'CrossProcessCursorWrapper' (ADCursorWrapper, ADCrossProcessCursor)
  public
    constructor create(para1: ADCursor); overload;
    procedure fillWindow(para1: jint; para2: ADCursorWindow); overload; virtual;
    function getWindow(): ADCursorWindow; overload; virtual;
    function onMove(para1: jint; para2: jint): jboolean; overload; virtual;
  end;

  ACContext = class abstract external 'android.content' name 'Context' (JLObject)
  public
    const
      ACCESSIBILITY_SERVICE = 'accessibility';
      ACCOUNT_SERVICE = 'account';
      ACTIVITY_SERVICE = 'activity';
      ALARM_SERVICE = 'alarm';
      APPWIDGET_SERVICE = 'appwidget';
      APP_OPS_SERVICE = 'appops';
      AUDIO_SERVICE = 'audio';
      BATTERY_SERVICE = 'batterymanager';
      BIND_ABOVE_CLIENT = 8;
      BIND_ADJUST_WITH_ACTIVITY = 128;
      BIND_ALLOW_OOM_MANAGEMENT = 16;
      BIND_AUTO_CREATE = 1;
      BIND_DEBUG_UNBIND = 2;
      BIND_IMPORTANT = 64;
      BIND_NOT_FOREGROUND = 4;
      BIND_WAIVE_PRIORITY = 32;
      BLUETOOTH_SERVICE = 'bluetooth';
      CAMERA_SERVICE = 'camera';
      CAPTIONING_SERVICE = 'captioning';
      CLIPBOARD_SERVICE = 'clipboard';
      CONNECTIVITY_SERVICE = 'connectivity';
      CONSUMER_IR_SERVICE = 'consumer_ir';
      CONTEXT_IGNORE_SECURITY = 2;
      CONTEXT_INCLUDE_CODE = 1;
      CONTEXT_RESTRICTED = 4;
      DEVICE_POLICY_SERVICE = 'device_policy';
      DISPLAY_SERVICE = 'display';
      DOWNLOAD_SERVICE = 'download';
      DROPBOX_SERVICE = 'dropbox';
      INPUT_METHOD_SERVICE = 'input_method';
      INPUT_SERVICE = 'input';
      JOB_SCHEDULER_SERVICE = 'jobscheduler';
      KEYGUARD_SERVICE = 'keyguard';
      LAUNCHER_APPS_SERVICE = 'launcherapps';
      LAYOUT_INFLATER_SERVICE = 'layout_inflater';
      LOCATION_SERVICE = 'location';
      MEDIA_PROJECTION_SERVICE = 'media_projection';
      MEDIA_ROUTER_SERVICE = 'media_router';
      MEDIA_SESSION_SERVICE = 'media_session';
      MODE_APPEND = 32768;
      MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;
      MODE_MULTI_PROCESS = 4;
      MODE_PRIVATE = 0;
      MODE_WORLD_READABLE = 1 deprecated;
      MODE_WORLD_WRITEABLE = 2 deprecated;
      NFC_SERVICE = 'nfc';
      NOTIFICATION_SERVICE = 'notification';
      NSD_SERVICE = 'servicediscovery';
      POWER_SERVICE = 'power';
      PRINT_SERVICE = 'print';
      RESTRICTIONS_SERVICE = 'restrictions';
      SEARCH_SERVICE = 'search';
      SENSOR_SERVICE = 'sensor';
      STORAGE_SERVICE = 'storage';
      TELECOM_SERVICE = 'telecom';
      TELEPHONY_SERVICE = 'phone';
      TEXT_SERVICES_MANAGER_SERVICE = 'textservices';
      TV_INPUT_SERVICE = 'tv_input';
      UI_MODE_SERVICE = 'uimode';
      USB_SERVICE = 'usb';
      USER_SERVICE = 'user';
      VIBRATOR_SERVICE = 'vibrator';
      WALLPAPER_SERVICE = 'wallpaper';
      WIFI_P2P_SERVICE = 'wifip2p';
      WIFI_SERVICE = 'wifi';
      WINDOW_SERVICE = 'window';
  public
    constructor create(); overload;
    function getAssets(): ACRAssetManager; overload; virtual; abstract;
    function getResources(): ACRResources; overload; virtual; abstract;
    function getPackageManager(): ACPPackageManager; overload; virtual; abstract;
    function getContentResolver(): ACContentResolver; overload; virtual; abstract;
    function getMainLooper(): AOLooper; overload; virtual; abstract;
    function getApplicationContext(): ACContext; overload; virtual; abstract;
    procedure registerComponentCallbacks(para1: ACComponentCallbacks); overload; virtual;
    procedure unregisterComponentCallbacks(para1: ACComponentCallbacks); overload; virtual;
    function getText(para1: jint): JLCharSequence; overload; virtual; final;
    function getString(para1: jint): JLString; overload; virtual; final;
    function getString(para1: jint; para2: Arr1JLObject): JLString; overload; virtual; final;
    function getString(para1: jint; const para2: array of JLObject): JLString; overload; virtual; final;
    function getDrawable(para1: jint): AGDDrawable; overload; virtual; final;
    procedure setTheme(para1: jint); overload; virtual; abstract;
    function getTheme(): ACRResources.InnerTheme; overload; virtual; abstract;
    function obtainStyledAttributes(para1: Arr1jint): ACRTypedArray; overload; virtual; final;
    function obtainStyledAttributes(var para1: array of jint): ACRTypedArray; overload; virtual; final;
    function obtainStyledAttributes(para1: jint; para2: Arr1jint): ACRTypedArray; overload; virtual; final;  // throws android.content.res.Resources$NotFoundException
    function obtainStyledAttributes(para1: jint; var para2: array of jint): ACRTypedArray; overload; virtual; final;  // throws android.content.res.Resources$NotFoundException
    function obtainStyledAttributes(para1: AUAttributeSet; para2: Arr1jint): ACRTypedArray; overload; virtual; final;
    function obtainStyledAttributes(para1: AUAttributeSet; var para2: array of jint): ACRTypedArray; overload; virtual; final;
    function obtainStyledAttributes(para1: AUAttributeSet; para2: Arr1jint; para3: jint; para4: jint): ACRTypedArray; overload; virtual; final;
    function obtainStyledAttributes(para1: AUAttributeSet; var para2: array of jint; para3: jint; para4: jint): ACRTypedArray; overload; virtual; final;
    function getClassLoader(): JLClassLoader; overload; virtual; abstract;
    function getPackageName(): JLString; overload; virtual; abstract;
    function getApplicationInfo(): ACPApplicationInfo; overload; virtual; abstract;
    function getPackageResourcePath(): JLString; overload; virtual; abstract;
    function getPackageCodePath(): JLString; overload; virtual; abstract;
    function getSharedPreferences(para1: JLString; para2: jint): ACSharedPreferences; overload; virtual; abstract;
    function openFileInput(para1: JLString): JIFileInputStream; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function openFileOutput(para1: JLString; para2: jint): JIFileOutputStream; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function deleteFile(para1: JLString): jboolean; overload; virtual; abstract;
    function getFileStreamPath(para1: JLString): JIFile; overload; virtual; abstract;
    function getFilesDir(): JIFile; overload; virtual; abstract;
    function getNoBackupFilesDir(): JIFile; overload; virtual; abstract;
    function getExternalFilesDir(para1: JLString): JIFile; overload; virtual; abstract;
    function getExternalFilesDirs(para1: JLString): Arr1JIFile; overload; virtual; abstract;
    function getObbDir(): JIFile; overload; virtual; abstract;
    function getObbDirs(): Arr1JIFile; overload; virtual; abstract;
    function getCacheDir(): JIFile; overload; virtual; abstract;
    function getCodeCacheDir(): JIFile; overload; virtual; abstract;
    function getExternalCacheDir(): JIFile; overload; virtual; abstract;
    function getExternalCacheDirs(): Arr1JIFile; overload; virtual; abstract;
    function getExternalMediaDirs(): Arr1JIFile; overload; virtual; abstract;
    function fileList(): Arr1JLString; overload; virtual; abstract;
    function getDir(para1: JLString; para2: jint): JIFile; overload; virtual; abstract;
    function openOrCreateDatabase(para1: JLString; para2: jint; para3: ADSSQLiteDatabase.InnerCursorFactory): ADSSQLiteDatabase; overload; virtual; abstract;
    function openOrCreateDatabase(para1: JLString; para2: jint; para3: ADSSQLiteDatabase.InnerCursorFactory; para4: ADDatabaseErrorHandler): ADSSQLiteDatabase; overload; virtual; abstract;
    function deleteDatabase(para1: JLString): jboolean; overload; virtual; abstract;
    function getDatabasePath(para1: JLString): JIFile; overload; virtual; abstract;
    function databaseList(): Arr1JLString; overload; virtual; abstract;
    function getWallpaper(): AGDDrawable; overload; virtual; abstract;
    function peekWallpaper(): AGDDrawable; overload; virtual; abstract;
    function getWallpaperDesiredMinimumWidth(): jint; overload; virtual; abstract;
    function getWallpaperDesiredMinimumHeight(): jint; overload; virtual; abstract;
    procedure setWallpaper(para1: AGBitmap); overload; virtual; abstract;  // throws java.io.IOException
    procedure setWallpaper(para1: JIInputStream); overload; virtual; abstract;  // throws java.io.IOException
    procedure clearWallpaper(); overload; virtual; abstract;  // throws java.io.IOException
    procedure startActivity(para1: ACIntent); overload; virtual; abstract;
    procedure startActivity(para1: ACIntent; para2: AOBundle); overload; virtual; abstract;
    procedure startActivities(para1: Arr1ACIntent); overload; virtual; abstract;
    procedure startActivities(var para1: array of ACIntent); overload; virtual; abstract;
    procedure startActivities(para1: Arr1ACIntent; para2: AOBundle); overload; virtual; abstract;
    procedure startActivities(var para1: array of ACIntent; para2: AOBundle); overload; virtual; abstract;
    procedure startIntentSender(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: jint; para5: jint); overload; virtual; abstract;  // throws android.content.IntentSender$SendIntentException
    procedure startIntentSender(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: jint; para5: jint; para6: AOBundle); overload; virtual; abstract;  // throws android.content.IntentSender$SendIntentException
    procedure sendBroadcast(para1: ACIntent); overload; virtual; abstract;
    procedure sendBroadcast(para1: ACIntent; para2: JLString); overload; virtual; abstract;
    procedure sendOrderedBroadcast(para1: ACIntent; para2: JLString); overload; virtual; abstract;
    procedure sendOrderedBroadcast(para1: ACIntent; para2: JLString; para3: ACBroadcastReceiver; para4: AOHandler; para5: jint; para6: JLString; para7: AOBundle); overload; virtual; abstract;
    procedure sendBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual; abstract;
    procedure sendBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: JLString); overload; virtual; abstract;
    procedure sendOrderedBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: JLString; para4: ACBroadcastReceiver; para5: AOHandler; para6: jint; para7: JLString; para8: AOBundle); overload; virtual; abstract;
    procedure sendStickyBroadcast(para1: ACIntent); overload; virtual; abstract;
    procedure sendStickyOrderedBroadcast(para1: ACIntent; para2: ACBroadcastReceiver; para3: AOHandler; para4: jint; para5: JLString; para6: AOBundle); overload; virtual; abstract;
    procedure removeStickyBroadcast(para1: ACIntent); overload; virtual; abstract;
    procedure sendStickyBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual; abstract;
    procedure sendStickyOrderedBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: ACBroadcastReceiver; para4: AOHandler; para5: jint; para6: JLString; para7: AOBundle); overload; virtual; abstract;
    procedure removeStickyBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual; abstract;
    function registerReceiver(para1: ACBroadcastReceiver; para2: ACIntentFilter): ACIntent; overload; virtual; abstract;
    function registerReceiver(para1: ACBroadcastReceiver; para2: ACIntentFilter; para3: JLString; para4: AOHandler): ACIntent; overload; virtual; abstract;
    procedure unregisterReceiver(para1: ACBroadcastReceiver); overload; virtual; abstract;
    function startService(para1: ACIntent): ACComponentName; overload; virtual; abstract;
    function stopService(para1: ACIntent): jboolean; overload; virtual; abstract;
    function bindService(para1: ACIntent; para2: ACServiceConnection; para3: jint): jboolean; overload; virtual; abstract;
    procedure unbindService(para1: ACServiceConnection); overload; virtual; abstract;
    function startInstrumentation(para1: ACComponentName; para2: JLString; para3: AOBundle): jboolean; overload; virtual; abstract;
    function getSystemService(para1: JLString): JLObject; overload; virtual; abstract;
    function checkPermission(para1: JLString; para2: jint; para3: jint): jint; overload; virtual; abstract;
    function checkCallingPermission(para1: JLString): jint; overload; virtual; abstract;
    function checkCallingOrSelfPermission(para1: JLString): jint; overload; virtual; abstract;
    procedure enforcePermission(para1: JLString; para2: jint; para3: jint; para4: JLString); overload; virtual; abstract;
    procedure enforceCallingPermission(para1: JLString; para2: JLString); overload; virtual; abstract;
    procedure enforceCallingOrSelfPermission(para1: JLString; para2: JLString); overload; virtual; abstract;
    procedure grantUriPermission(para1: JLString; para2: ANUri; para3: jint); overload; virtual; abstract;
    procedure revokeUriPermission(para1: ANUri; para2: jint); overload; virtual; abstract;
    function checkUriPermission(para1: ANUri; para2: jint; para3: jint; para4: jint): jint; overload; virtual; abstract;
    function checkCallingUriPermission(para1: ANUri; para2: jint): jint; overload; virtual; abstract;
    function checkCallingOrSelfUriPermission(para1: ANUri; para2: jint): jint; overload; virtual; abstract;
    function checkUriPermission(para1: ANUri; para2: JLString; para3: JLString; para4: jint; para5: jint; para6: jint): jint; overload; virtual; abstract;
    procedure enforceUriPermission(para1: ANUri; para2: jint; para3: jint; para4: jint; para5: JLString); overload; virtual; abstract;
    procedure enforceCallingUriPermission(para1: ANUri; para2: jint; para3: JLString); overload; virtual; abstract;
    procedure enforceCallingOrSelfUriPermission(para1: ANUri; para2: jint; para3: JLString); overload; virtual; abstract;
    procedure enforceUriPermission(para1: ANUri; para2: JLString; para3: JLString; para4: jint; para5: jint; para6: jint; para7: JLString); overload; virtual; abstract;
    function createPackageContext(para1: JLString; para2: jint): ACContext; overload; virtual; abstract;  // throws android.content.pm.PackageManager$NameNotFoundException
    function createConfigurationContext(para1: ACRConfiguration): ACContext; overload; virtual; abstract;
    function createDisplayContext(para1: AVDisplay): ACContext; overload; virtual; abstract;
    function isRestricted(): jboolean; overload; virtual;
  end;

  ADSSQLiteCursorDriver = interface external 'android.database.sqlite' name 'SQLiteCursorDriver' 
    function query(para1: ADSSQLiteDatabase.InnerCursorFactory; para2: Arr1JLString): ADCursor; overload;
    function query(para1: ADSSQLiteDatabase.InnerCursorFactory; var para2: array of JLString): ADCursor; overload;
    procedure cursorDeactivated(); overload;
    procedure cursorRequeried(para1: ADCursor); overload;
    procedure cursorClosed(); overload;
    procedure setBindArguments(para1: Arr1JLString); overload;
    procedure setBindArguments(var para1: array of JLString); overload;
  end;

  ADSSQLiteOpenHelper = class abstract external 'android.database.sqlite' name 'SQLiteOpenHelper' (JLObject)
  public
    constructor create(para1: ACContext; para2: JLString; para3: ADSSQLiteDatabase.InnerCursorFactory; para4: jint); overload;
    constructor create(para1: ACContext; para2: JLString; para3: ADSSQLiteDatabase.InnerCursorFactory; para4: jint; para5: ADDatabaseErrorHandler); overload;
    function getDatabaseName(): JLString; overload; virtual;
    procedure setWriteAheadLoggingEnabled(para1: jboolean); overload; virtual;
    function getWritableDatabase(): ADSSQLiteDatabase; overload; virtual;
    function getReadableDatabase(): ADSSQLiteDatabase; overload; virtual;
    procedure close(); overload; virtual;
    procedure onConfigure(para1: ADSSQLiteDatabase); overload; virtual;
    procedure onCreate(para1: ADSSQLiteDatabase); overload; virtual; abstract;
    procedure onUpgrade(para1: ADSSQLiteDatabase; para2: jint; para3: jint); overload; virtual; abstract;
    procedure onDowngrade(para1: ADSSQLiteDatabase; para2: jint; para3: jint); overload; virtual;
    procedure onOpen(para1: ADSSQLiteDatabase); overload; virtual;
  end;

  ADSSQLiteQueryBuilder = class external 'android.database.sqlite' name 'SQLiteQueryBuilder' (JLObject)
  public
    constructor create(); overload;
    procedure setDistinct(para1: jboolean); overload; virtual;
    function getTables(): JLString; overload; virtual;
    procedure setTables(para1: JLString); overload; virtual;
    procedure appendWhere(para1: JLCharSequence); overload; virtual;
    procedure appendWhereEscapeString(para1: JLString); overload; virtual;
    procedure setProjectionMap(para1: JUMap); overload; virtual;
    procedure setCursorFactory(para1: ADSSQLiteDatabase.InnerCursorFactory); overload; virtual;
    procedure setStrict(para1: jboolean); overload; virtual;
    class function buildQueryString(para1: jboolean; para2: JLString; para3: Arr1JLString; para4: JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString): JLString; static; overload;
    class function buildQueryString(para1: jboolean; para2: JLString; var para3: array of JLString; para4: JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString): JLString; static; overload;
    class procedure appendColumns(para1: JLStringBuilder; para2: Arr1JLString); static; overload;
    class procedure appendColumns(para1: JLStringBuilder; var para2: array of JLString); static; overload;
    function query(para1: ADSSQLiteDatabase; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString; para6: JLString; para7: JLString): ADCursor; overload; virtual;
    function query(para1: ADSSQLiteDatabase; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString; para6: JLString; para7: JLString): ADCursor; overload; virtual;
    function query(para1: ADSSQLiteDatabase; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString): ADCursor; overload; virtual;
    function query(para1: ADSSQLiteDatabase; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString): ADCursor; overload; virtual;
    function query(para1: ADSSQLiteDatabase; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString; para9: AOCancellationSignal): ADCursor; overload; virtual;
    function query(para1: ADSSQLiteDatabase; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString; para6: JLString; para7: JLString; para8: JLString; para9: AOCancellationSignal): ADCursor; overload; virtual;
    function buildQuery(para1: Arr1JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString; para6: JLString): JLString; overload; virtual;
    function buildQuery(var para1: array of JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString; para6: JLString): JLString; overload; virtual;
    function buildQuery(para1: Arr1JLString; para2: JLString; para3: Arr1JLString; para4: JLString; para5: JLString; para6: JLString; para7: JLString): JLString; overload; virtual;
    function buildQuery(var para1: array of JLString; para2: JLString; var para3: array of JLString; para4: JLString; para5: JLString; para6: JLString; para7: JLString): JLString; overload; virtual;
    function buildUnionSubQuery(para1: JLString; para2: Arr1JLString; para3: JUSet; para4: jint; para5: JLString; para6: JLString; para7: JLString; para8: JLString): JLString; overload; virtual;
    function buildUnionSubQuery(para1: JLString; var para2: array of JLString; para3: JUSet; para4: jint; para5: JLString; para6: JLString; para7: JLString; para8: JLString): JLString; overload; virtual;
    function buildUnionSubQuery(para1: JLString; para2: Arr1JLString; para3: JUSet; para4: jint; para5: JLString; para6: JLString; para7: Arr1JLString; para8: JLString; para9: JLString): JLString; overload; virtual;
    function buildUnionSubQuery(para1: JLString; var para2: array of JLString; para3: JUSet; para4: jint; para5: JLString; para6: JLString; var para7: array of JLString; para8: JLString; para9: JLString): JLString; overload; virtual;
    function buildUnionQuery(para1: Arr1JLString; para2: JLString; para3: JLString): JLString; overload; virtual;
    function buildUnionQuery(var para1: array of JLString; para2: JLString; para3: JLString): JLString; overload; virtual;
  end;

  ADSSQLiteQuery = class sealed external 'android.database.sqlite' name 'SQLiteQuery' (ADSSQLiteProgram)
  public
    function toString(): JLString; overload; virtual;
  end;

  ADSSQLiteStatement = class sealed external 'android.database.sqlite' name 'SQLiteStatement' (ADSSQLiteProgram)
  public
    procedure execute(); overload; virtual;
    function executeUpdateDelete(): jint; overload; virtual;
    function executeInsert(): jlong; overload; virtual;
    function simpleQueryForLong(): jlong; overload; virtual;
    function simpleQueryForString(): JLString; overload; virtual;
    function simpleQueryForBlobFileDescriptor(): AOParcelFileDescriptor; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ACPLabeledIntent = class external 'android.content.pm' name 'LabeledIntent' (ACIntent)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: ACIntent; para2: JLString; para3: jint; para4: jint); overload;
    constructor create(para1: ACIntent; para2: JLString; para3: JLCharSequence; para4: jint); overload;
    constructor create(para1: JLString; para2: jint; para3: jint); overload;
    constructor create(para1: JLString; para2: JLCharSequence; para3: jint); overload;
    function getSourcePackage(): JLString; overload; virtual;
    function getLabelResource(): jint; overload; virtual;
    function getNonLocalizedLabel(): JLCharSequence; overload; virtual;
    function getIconResource(): jint; overload; virtual;
    function loadLabel(para1: ACPPackageManager): JLCharSequence; overload; virtual;
    function loadIcon(para1: ACPPackageManager): AGDDrawable; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure readFromParcel(para1: AOParcel); overload; virtual;
  end;

  AGBitmapFactory = class external 'android.graphics' name 'BitmapFactory' (JLObject)
  public
    type
      InnerOptions = class;
      Arr1InnerOptions = array of InnerOptions;
      Arr2InnerOptions = array of Arr1InnerOptions;
      Arr3InnerOptions = array of Arr2InnerOptions;
      InnerOptions = class external 'android.graphics' name 'Options' (JLObject)
      public
        var
          finBitmap: AGBitmap; external name 'inBitmap';
          finDensity: jint; external name 'inDensity';
          finDither: jboolean; external name 'inDither';
          finInputShareable: jboolean deprecated; external name 'inInputShareable';
          finJustDecodeBounds: jboolean; external name 'inJustDecodeBounds';
          finMutable: jboolean; external name 'inMutable';
          finPreferQualityOverSpeed: jboolean; external name 'inPreferQualityOverSpeed';
          finPreferredConfig: AGBitmap.InnerConfig; external name 'inPreferredConfig';
          finPremultiplied: jboolean; external name 'inPremultiplied';
          finPurgeable: jboolean deprecated; external name 'inPurgeable';
          finSampleSize: jint; external name 'inSampleSize';
          finScaled: jboolean; external name 'inScaled';
          finScreenDensity: jint; external name 'inScreenDensity';
          finTargetDensity: jint; external name 'inTargetDensity';
          finTempStorage: Arr1jbyte; external name 'inTempStorage';
          fmCancel: jboolean; external name 'mCancel';
          foutHeight: jint; external name 'outHeight';
          foutMimeType: JLString; external name 'outMimeType';
          foutWidth: jint; external name 'outWidth';
      public
        constructor create(); overload;
        procedure requestCancelDecode(); overload; virtual;
      end;

  public
    constructor create(); overload;
    class function decodeFile(para1: JLString; para2: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
    class function decodeFile(para1: JLString): AGBitmap; static; overload;
    class function decodeResourceStream(para1: ACRResources; para2: AUTypedValue; para3: JIInputStream; para4: AGRect; para5: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
    class function decodeResource(para1: ACRResources; para2: jint; para3: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
    class function decodeResource(para1: ACRResources; para2: jint): AGBitmap; static; overload;
    class function decodeByteArray(para1: Arr1jbyte; para2: jint; para3: jint; para4: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
    class function decodeByteArray(var para1: array of jbyte; para2: jint; para3: jint; para4: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
    class function decodeByteArray(para1: Arr1jbyte; para2: jint; para3: jint): AGBitmap; static; overload;
    class function decodeByteArray(var para1: array of jbyte; para2: jint; para3: jint): AGBitmap; static; overload;
    class function decodeStream(para1: JIInputStream; para2: AGRect; para3: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
    class function decodeStream(para1: JIInputStream): AGBitmap; static; overload;
    class function decodeFileDescriptor(para1: JIFileDescriptor; para2: AGRect; para3: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
    class function decodeFileDescriptor(para1: JIFileDescriptor): AGBitmap; static; overload;
  end;

  AGCanvas = class external 'android.graphics' name 'Canvas' (JLObject)
  public
    type
      InnerVertexMode = class;
      Arr1InnerVertexMode = array of InnerVertexMode;
      Arr2InnerVertexMode = array of Arr1InnerVertexMode;
      Arr3InnerVertexMode = array of Arr2InnerVertexMode;
      InnerEdgeType = class;
      Arr1InnerEdgeType = array of InnerEdgeType;
      Arr2InnerEdgeType = array of Arr1InnerEdgeType;
      Arr3InnerEdgeType = array of Arr2InnerEdgeType;
      InnerVertexMode = class sealed external 'android.graphics' name 'VertexMode' (JLEnum)
      public
        final class var
          fTRIANGLES: AGCanvas.InnerVertexMode; external name 'TRIANGLES';
          fTRIANGLE_FAN: AGCanvas.InnerVertexMode; external name 'TRIANGLE_FAN';
          fTRIANGLE_STRIP: AGCanvas.InnerVertexMode; external name 'TRIANGLE_STRIP';
      public
        class function values(): AGCanvas.Arr1InnerVertexMode; static; overload;
        class function valueOf(para1: JLString): AGCanvas.InnerVertexMode; static; overload;
      end;

      InnerEdgeType = class sealed external 'android.graphics' name 'EdgeType' (JLEnum)
      public
        final class var
          fAA: AGCanvas.InnerEdgeType; external name 'AA';
          fBW: AGCanvas.InnerEdgeType; external name 'BW';
      public
        class function values(): AGCanvas.Arr1InnerEdgeType; static; overload;
        class function valueOf(para1: JLString): AGCanvas.InnerEdgeType; static; overload;
      end;

  public
    const
      ALL_SAVE_FLAG = 31;
      CLIP_SAVE_FLAG = 2;
      CLIP_TO_LAYER_SAVE_FLAG = 16;
      FULL_COLOR_LAYER_SAVE_FLAG = 8;
      HAS_ALPHA_LAYER_SAVE_FLAG = 4;
      MATRIX_SAVE_FLAG = 1;
  public
    constructor create(); overload;
    constructor create(para1: AGBitmap); overload;
    function isHardwareAccelerated(): jboolean; overload; virtual;
    procedure setBitmap(para1: AGBitmap); overload; virtual;
    function isOpaque(): jboolean; overload; virtual;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
    function getDensity(): jint; overload; virtual;
    procedure setDensity(para1: jint); overload; virtual;
    function getMaximumBitmapWidth(): jint; overload; virtual;
    function getMaximumBitmapHeight(): jint; overload; virtual;
    function save(): jint; overload; virtual;
    function save(para1: jint): jint; overload; virtual;
    function saveLayer(para1: AGRectF; para2: AGPaint; para3: jint): jint; overload; virtual;
    function saveLayer(para1: AGRectF; para2: AGPaint): jint; overload; virtual;
    function saveLayer(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGPaint; para6: jint): jint; overload; virtual;
    function saveLayer(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGPaint): jint; overload; virtual;
    function saveLayerAlpha(para1: AGRectF; para2: jint; para3: jint): jint; overload; virtual;
    function saveLayerAlpha(para1: AGRectF; para2: jint): jint; overload; virtual;
    function saveLayerAlpha(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jint; para6: jint): jint; overload; virtual;
    function saveLayerAlpha(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jint): jint; overload; virtual;
    procedure restore(); overload; virtual;
    function getSaveCount(): jint; overload; virtual;
    procedure restoreToCount(para1: jint); overload; virtual;
    procedure translate(para1: jfloat; para2: jfloat); overload; virtual;
    procedure scale(para1: jfloat; para2: jfloat); overload; virtual;
    procedure scale(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual; final;
    procedure rotate(para1: jfloat); overload; virtual;
    procedure rotate(para1: jfloat; para2: jfloat; para3: jfloat); overload; virtual; final;
    procedure skew(para1: jfloat; para2: jfloat); overload; virtual;
    procedure concat(para1: AGMatrix); overload; virtual;
    procedure setMatrix(para1: AGMatrix); overload; virtual;
    procedure getMatrix(para1: AGMatrix); overload; virtual;
    function getMatrix(): AGMatrix; overload; virtual; final;
    function clipRect(para1: AGRectF; para2: AGRegion.InnerOp): jboolean; overload; virtual;
    function clipRect(para1: AGRect; para2: AGRegion.InnerOp): jboolean; overload; virtual;
    function clipRect(para1: AGRectF): jboolean; overload; virtual;
    function clipRect(para1: AGRect): jboolean; overload; virtual;
    function clipRect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGRegion.InnerOp): jboolean; overload; virtual;
    function clipRect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function clipRect(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    function clipPath(para1: AGPath; para2: AGRegion.InnerOp): jboolean; overload; virtual;
    function clipPath(para1: AGPath): jboolean; overload; virtual;
    function clipRegion(para1: AGRegion; para2: AGRegion.InnerOp): jboolean; overload; virtual;
    function clipRegion(para1: AGRegion): jboolean; overload; virtual;
    function getDrawFilter(): AGDrawFilter; overload; virtual;
    procedure setDrawFilter(para1: AGDrawFilter); overload; virtual;
    function quickReject(para1: AGRectF; para2: AGCanvas.InnerEdgeType): jboolean; overload; virtual;
    function quickReject(para1: AGPath; para2: AGCanvas.InnerEdgeType): jboolean; overload; virtual;
    function quickReject(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGCanvas.InnerEdgeType): jboolean; overload; virtual;
    function getClipBounds(para1: AGRect): jboolean; overload; virtual;
    function getClipBounds(): AGRect; overload; virtual; final;
    procedure drawRGB(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure drawARGB(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure drawColor(para1: jint); overload; virtual;
    procedure drawColor(para1: jint; para2: AGPorterDuff.InnerMode); overload; virtual;
    procedure drawPaint(para1: AGPaint); overload; virtual;
    procedure drawPoints(para1: Arr1jfloat; para2: jint; para3: jint; para4: AGPaint); overload; virtual;
    procedure drawPoints(var para1: array of jfloat; para2: jint; para3: jint; para4: AGPaint); overload; virtual;
    procedure drawPoints(para1: Arr1jfloat; para2: AGPaint); overload; virtual;
    procedure drawPoints(var para1: array of jfloat; para2: AGPaint); overload; virtual;
    procedure drawPoint(para1: jfloat; para2: jfloat; para3: AGPaint); overload; virtual;
    procedure drawLine(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGPaint); overload; virtual;
    procedure drawLines(para1: Arr1jfloat; para2: jint; para3: jint; para4: AGPaint); overload; virtual;
    procedure drawLines(var para1: array of jfloat; para2: jint; para3: jint; para4: AGPaint); overload; virtual;
    procedure drawLines(para1: Arr1jfloat; para2: AGPaint); overload; virtual;
    procedure drawLines(var para1: array of jfloat; para2: AGPaint); overload; virtual;
    procedure drawRect(para1: AGRectF; para2: AGPaint); overload; virtual;
    procedure drawRect(para1: AGRect; para2: AGPaint); overload; virtual;
    procedure drawRect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGPaint); overload; virtual;
    procedure drawOval(para1: AGRectF; para2: AGPaint); overload; virtual;
    procedure drawOval(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: AGPaint); overload; virtual;
    procedure drawCircle(para1: jfloat; para2: jfloat; para3: jfloat; para4: AGPaint); overload; virtual;
    procedure drawArc(para1: AGRectF; para2: jfloat; para3: jfloat; para4: jboolean; para5: AGPaint); overload; virtual;
    procedure drawArc(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jboolean; para8: AGPaint); overload; virtual;
    procedure drawRoundRect(para1: AGRectF; para2: jfloat; para3: jfloat; para4: AGPaint); overload; virtual;
    procedure drawRoundRect(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: AGPaint); overload; virtual;
    procedure drawPath(para1: AGPath; para2: AGPaint); overload; virtual;
    procedure drawBitmap(para1: AGBitmap; para2: jfloat; para3: jfloat; para4: AGPaint); overload; virtual;
    procedure drawBitmap(para1: AGBitmap; para2: AGRect; para3: AGRectF; para4: AGPaint); overload; virtual;
    procedure drawBitmap(para1: AGBitmap; para2: AGRect; para3: AGRect; para4: AGPaint); overload; virtual;
    procedure drawBitmap(para1: Arr1jint; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: jint; para7: jint; para8: jboolean; para9: AGPaint); overload; virtual;
    procedure drawBitmap(var para1: array of jint; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: jint; para7: jint; para8: jboolean; para9: AGPaint); overload; virtual;
    procedure drawBitmap(para1: Arr1jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jboolean; para9: AGPaint); overload; virtual;
    procedure drawBitmap(var para1: array of jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jboolean; para9: AGPaint); overload; virtual;
    procedure drawBitmap(para1: AGBitmap; para2: AGMatrix; para3: AGPaint); overload; virtual;
    procedure drawBitmapMesh(para1: AGBitmap; para2: jint; para3: jint; para4: Arr1jfloat; para5: jint; para6: Arr1jint; para7: jint; para8: AGPaint); overload; virtual;
    procedure drawBitmapMesh(para1: AGBitmap; para2: jint; para3: jint; var para4: array of jfloat; para5: jint; var para6: array of jint; para7: jint; para8: AGPaint); overload; virtual;
    procedure drawVertices(para1: AGCanvas.InnerVertexMode; para2: jint; para3: Arr1jfloat; para4: jint; para5: Arr1jfloat; para6: jint; para7: Arr1jint; para8: jint; para9: Arr1jshort; para10: jint; para11: jint; para12: AGPaint); overload; virtual;
    procedure drawVertices(para1: AGCanvas.InnerVertexMode; para2: jint; var para3: array of jfloat; para4: jint; var para5: array of jfloat; para6: jint; var para7: array of jint; para8: jint; var para9: array of jshort; para10: jint; para11: jint; para12: AGPaint); overload; virtual;
    procedure drawText(para1: Arr1jchar; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: AGPaint); overload; virtual;
    procedure drawText(var para1: array of jchar; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: AGPaint); overload; virtual;
    procedure drawText(para1: JLString; para2: jfloat; para3: jfloat; para4: AGPaint); overload; virtual;
    procedure drawText(para1: JLString; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: AGPaint); overload; virtual;
    procedure drawText(para1: JLCharSequence; para2: jint; para3: jint; para4: jfloat; para5: jfloat; para6: AGPaint); overload; virtual;
    procedure drawPosText(para1: Arr1jchar; para2: jint; para3: jint; para4: Arr1jfloat; para5: AGPaint); overload; virtual;
    procedure drawPosText(var para1: array of jchar; para2: jint; para3: jint; var para4: array of jfloat; para5: AGPaint); overload; virtual;
    procedure drawPosText(para1: JLString; para2: Arr1jfloat; para3: AGPaint); overload; virtual;
    procedure drawPosText(para1: JLString; var para2: array of jfloat; para3: AGPaint); overload; virtual;
    procedure drawTextOnPath(para1: Arr1jchar; para2: jint; para3: jint; para4: AGPath; para5: jfloat; para6: jfloat; para7: AGPaint); overload; virtual;
    procedure drawTextOnPath(var para1: array of jchar; para2: jint; para3: jint; para4: AGPath; para5: jfloat; para6: jfloat; para7: AGPaint); overload; virtual;
    procedure drawTextOnPath(para1: JLString; para2: AGPath; para3: jfloat; para4: jfloat; para5: AGPaint); overload; virtual;
    procedure drawPicture(para1: AGPicture); overload; virtual;
    procedure drawPicture(para1: AGPicture; para2: AGRectF); overload; virtual;
    procedure drawPicture(para1: AGPicture; para2: AGRect); overload; virtual;
  end;

  ANWWifiInfo = class external 'android.net.wifi' name 'WifiInfo' (JLObject, AOParcelable)
  public
    const
      FREQUENCY_UNITS = 'MHz';
      LINK_SPEED_UNITS = 'Mbps';
  public
    function getSSID(): JLString; overload; virtual;
    function getBSSID(): JLString; overload; virtual;
    function getRssi(): jint; overload; virtual;
    function getLinkSpeed(): jint; overload; virtual;
    function getFrequency(): jint; overload; virtual;
    function getMacAddress(): JLString; overload; virtual;
    function getNetworkId(): jint; overload; virtual;
    function getSupplicantState(): ANWSupplicantState; overload; virtual;
    function getIpAddress(): jint; overload; virtual;
    function getHiddenSSID(): jboolean; overload; virtual;
    class function getDetailedStateOf(para1: ANWSupplicantState): ANNetworkInfo.InnerDetailedState; static; overload;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACContentUris = class external 'android.content' name 'ContentUris' (JLObject)
  public
    constructor create(); overload;
    class function parseId(para1: ANUri): jlong; static; overload;
    class function appendId(para1: ANUri.InnerBuilder; para2: jlong): ANUri.InnerBuilder; static; overload;
    class function withAppendedId(para1: ANUri; para2: jlong): ANUri; static; overload;
  end;

  AAActivityManager = class external 'android.app' name 'ActivityManager' (JLObject)
  public
    type
      InnerAppTask = class;
      Arr1InnerAppTask = array of InnerAppTask;
      Arr2InnerAppTask = array of Arr1InnerAppTask;
      Arr3InnerAppTask = array of Arr2InnerAppTask;
      InnerRunningAppProcessInfo = class;
      Arr1InnerRunningAppProcessInfo = array of InnerRunningAppProcessInfo;
      Arr2InnerRunningAppProcessInfo = array of Arr1InnerRunningAppProcessInfo;
      Arr3InnerRunningAppProcessInfo = array of Arr2InnerRunningAppProcessInfo;
      InnerProcessErrorStateInfo = class;
      Arr1InnerProcessErrorStateInfo = array of InnerProcessErrorStateInfo;
      Arr2InnerProcessErrorStateInfo = array of Arr1InnerProcessErrorStateInfo;
      Arr3InnerProcessErrorStateInfo = array of Arr2InnerProcessErrorStateInfo;
      InnerMemoryInfo = class;
      Arr1InnerMemoryInfo = array of InnerMemoryInfo;
      Arr2InnerMemoryInfo = array of Arr1InnerMemoryInfo;
      Arr3InnerMemoryInfo = array of Arr2InnerMemoryInfo;
      InnerRunningServiceInfo = class;
      Arr1InnerRunningServiceInfo = array of InnerRunningServiceInfo;
      Arr2InnerRunningServiceInfo = array of Arr1InnerRunningServiceInfo;
      Arr3InnerRunningServiceInfo = array of Arr2InnerRunningServiceInfo;
      InnerRunningTaskInfo = class;
      Arr1InnerRunningTaskInfo = array of InnerRunningTaskInfo;
      Arr2InnerRunningTaskInfo = array of Arr1InnerRunningTaskInfo;
      Arr3InnerRunningTaskInfo = array of Arr2InnerRunningTaskInfo;
      InnerRecentTaskInfo = class;
      Arr1InnerRecentTaskInfo = array of InnerRecentTaskInfo;
      Arr2InnerRecentTaskInfo = array of Arr1InnerRecentTaskInfo;
      Arr3InnerRecentTaskInfo = array of Arr2InnerRecentTaskInfo;
      InnerTaskDescription = class;
      Arr1InnerTaskDescription = array of InnerTaskDescription;
      Arr2InnerTaskDescription = array of Arr1InnerTaskDescription;
      Arr3InnerTaskDescription = array of Arr2InnerTaskDescription;
      InnerAppTask = class external 'android.app' name 'AppTask' (JLObject)
      public
        procedure finishAndRemoveTask(); overload; virtual;
        function getTaskInfo(): AAActivityManager.InnerRecentTaskInfo; overload; virtual;
        procedure moveToFront(); overload; virtual;
        procedure startActivity(para1: ACContext; para2: ACIntent; para3: AOBundle); overload; virtual;
        procedure setExcludeFromRecents(para1: jboolean); overload; virtual;
      end;

      InnerRunningAppProcessInfo = class external 'android.app' name 'RunningAppProcessInfo' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        const
          IMPORTANCE_BACKGROUND = 400;
          IMPORTANCE_EMPTY = 500;
          IMPORTANCE_FOREGROUND = 100;
          IMPORTANCE_GONE = 1000;
          IMPORTANCE_PERCEPTIBLE = 130;
          IMPORTANCE_SERVICE = 300;
          IMPORTANCE_VISIBLE = 200;
          REASON_PROVIDER_IN_USE = 1;
          REASON_SERVICE_IN_USE = 2;
          REASON_UNKNOWN = 0;
      public
        var
          fimportance: jint; external name 'importance';
          fimportanceReasonCode: jint; external name 'importanceReasonCode';
          fimportanceReasonComponent: ACComponentName; external name 'importanceReasonComponent';
          fimportanceReasonPid: jint; external name 'importanceReasonPid';
          flastTrimLevel: jint; external name 'lastTrimLevel';
          flru: jint; external name 'lru';
          fpid: jint; external name 'pid';
          fpkgList: Arr1JLString; external name 'pkgList';
          fprocessName: JLString; external name 'processName';
          fuid: jint; external name 'uid';
      public
        constructor create(); overload;
        constructor create(para1: JLString; para2: jint; para3: Arr1JLString); overload;
        constructor create(para1: JLString; para2: jint; const para3: array of JLString); overload;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
      end;

      InnerProcessErrorStateInfo = class external 'android.app' name 'ProcessErrorStateInfo' (JLObject, AOParcelable)
      public
        const
          CRASHED = 1;
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        const
          NOT_RESPONDING = 2;
          NO_ERROR = 0;
      public
        var
          fcondition: jint; external name 'condition';
          fcrashData: Arr1jbyte; external name 'crashData';
          flongMsg: JLString; external name 'longMsg';
          fpid: jint; external name 'pid';
          fprocessName: JLString; external name 'processName';
          fshortMsg: JLString; external name 'shortMsg';
          fstackTrace: JLString; external name 'stackTrace';
          ftag: JLString; external name 'tag';
          fuid: jint; external name 'uid';
      public
        constructor create(); overload;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
      end;

      InnerMemoryInfo = class external 'android.app' name 'MemoryInfo' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        var
          favailMem: jlong; external name 'availMem';
          flowMemory: jboolean; external name 'lowMemory';
          fthreshold: jlong; external name 'threshold';
          ftotalMem: jlong; external name 'totalMem';
      public
        constructor create(); overload;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
      end;

      InnerRunningServiceInfo = class external 'android.app' name 'RunningServiceInfo' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        const
          FLAG_FOREGROUND = 2;
          FLAG_PERSISTENT_PROCESS = 8;
          FLAG_STARTED = 1;
          FLAG_SYSTEM_PROCESS = 4;
      public
        var
          factiveSince: jlong; external name 'activeSince';
          fclientCount: jint; external name 'clientCount';
          fclientLabel: jint; external name 'clientLabel';
          fclientPackage: JLString; external name 'clientPackage';
          fcrashCount: jint; external name 'crashCount';
          fflags: jint; external name 'flags';
          fforeground: jboolean; external name 'foreground';
          flastActivityTime: jlong; external name 'lastActivityTime';
          fpid: jint; external name 'pid';
          fprocess: JLString; external name 'process';
          frestarting: jlong; external name 'restarting';
          fservice: ACComponentName; external name 'service';
          fstarted: jboolean; external name 'started';
          fuid: jint; external name 'uid';
      public
        constructor create(); overload;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
      end;

      InnerRunningTaskInfo = class external 'android.app' name 'RunningTaskInfo' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        var
          fbaseActivity: ACComponentName; external name 'baseActivity';
          fdescription: JLCharSequence; external name 'description';
          fid: jint; external name 'id';
          fnumActivities: jint; external name 'numActivities';
          fnumRunning: jint; external name 'numRunning';
          fthumbnail: AGBitmap; external name 'thumbnail';
          ftopActivity: ACComponentName; external name 'topActivity';
      public
        constructor create(); overload;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
      end;

      InnerRecentTaskInfo = class external 'android.app' name 'RecentTaskInfo' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        var
          faffiliatedTaskId: jint; external name 'affiliatedTaskId';
          fbaseIntent: ACIntent; external name 'baseIntent';
          fdescription: JLCharSequence; external name 'description';
          fid: jint; external name 'id';
          forigActivity: ACComponentName; external name 'origActivity';
          fpersistentId: jint; external name 'persistentId';
          ftaskDescription: AAActivityManager.InnerTaskDescription; external name 'taskDescription';
      public
        constructor create(); overload;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
      end;

      InnerTaskDescription = class external 'android.app' name 'TaskDescription' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        constructor create(para1: JLString; para2: AGBitmap; para3: jint); overload;
        constructor create(para1: JLString; para2: AGBitmap); overload;
        constructor create(para1: JLString); overload;
        constructor create(); overload;
        constructor create(para1: AAActivityManager.InnerTaskDescription); overload;
        function getLabel(): JLString; overload; virtual;
        function getIcon(): AGBitmap; overload; virtual;
        function getPrimaryColor(): jint; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  public
    const
      META_HOME_ALTERNATE = 'android.app.home.alternate';
      MOVE_TASK_NO_USER_ACTION = 2;
      MOVE_TASK_WITH_HOME = 1;
      RECENT_IGNORE_UNAVAILABLE = 2;
      RECENT_WITH_EXCLUDED = 1;
  public
    function getMemoryClass(): jint; overload; virtual;
    function getLargeMemoryClass(): jint; overload; virtual;
    function isLowRamDevice(): jboolean; overload; virtual;
    function getRecentTasks(para1: jint; para2: jint): JUList; overload; virtual;  // throws java.lang.SecurityException
    function getAppTasks(): JUList; overload; virtual;
    function getAppTaskThumbnailSize(): AUSize; overload; virtual;
    function addAppTask(para1: AAActivity; para2: ACIntent; para3: AAActivityManager.InnerTaskDescription; para4: AGBitmap): jint; overload; virtual;
    function getRunningTasks(para1: jint): JUList; overload; virtual;  // throws java.lang.SecurityException
    procedure moveTaskToFront(para1: jint; para2: jint); overload; virtual;
    procedure moveTaskToFront(para1: jint; para2: jint; para3: AOBundle); overload; virtual;
    function getRunningServices(para1: jint): JUList; overload; virtual;  // throws java.lang.SecurityException
    function getRunningServiceControlPanel(para1: ACComponentName): AAPendingIntent; overload; virtual;  // throws java.lang.SecurityException
    procedure getMemoryInfo(para1: AAActivityManager.InnerMemoryInfo); overload; virtual;
    function clearApplicationUserData(): jboolean; overload; virtual;
    function getProcessesInErrorState(): JUList; overload; virtual;
    function getRunningAppProcesses(): JUList; overload; virtual;
    class procedure getMyMemoryState(para1: AAActivityManager.InnerRunningAppProcessInfo); static; overload;
    function getProcessMemoryInfo(para1: Arr1jint): AODebug.Arr1InnerMemoryInfo; overload; virtual;
    function getProcessMemoryInfo(var para1: array of jint): AODebug.Arr1InnerMemoryInfo; overload; virtual;
    procedure restartPackage(para1: JLString); overload; virtual;
    procedure killBackgroundProcesses(para1: JLString); overload; virtual;
    function getDeviceConfigurationInfo(): ACPConfigurationInfo; overload; virtual;
    function getLauncherLargeIconDensity(): jint; overload; virtual;
    function getLauncherLargeIconSize(): jint; overload; virtual;
    class function isUserAMonkey(): jboolean; static; overload;
    class function isRunningInTestHarness(): jboolean; static; overload;
    procedure dumpPackageState(para1: JIFileDescriptor; para2: JLString); overload; virtual;
    function isInLockTaskMode(): jboolean; overload; virtual;
  end;

  ACPPathPermission = class external 'android.content.pm' name 'PathPermission' (AOPatternMatcher)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JLString; para2: jint; para3: JLString; para4: JLString); overload;
    constructor create(para1: AOParcel); overload;
    function getReadPermission(): JLString; overload; virtual;
    function getWritePermission(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATAnnotation = class external 'android.text' name 'Annotation' (JLObject, ATParcelableSpan)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getKey(): JLString; overload; virtual;
    function getValue(): JLString; overload; virtual;
  end;

  ATSAlignmentSpan = interface external 'android.text.style' name 'AlignmentSpan' (ATSParagraphStyle)
    type
      InnerStandard = class;
      Arr1InnerStandard = array of InnerStandard;
      Arr2InnerStandard = array of Arr1InnerStandard;
      Arr3InnerStandard = array of Arr2InnerStandard;
      InnerStandard = class external 'android.text.style' name 'Standard' (JLObject, ATSAlignmentSpan, ATParcelableSpan)
      public
        constructor create(para1: ATLayout.InnerAlignment); overload;
        constructor create(para1: AOParcel); overload;
        function getSpanTypeId(): jint; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function getAlignment(): ATLayout.InnerAlignment; overload; virtual;
      end;

    function getAlignment(): ATLayout.InnerAlignment; overload;
  end;

  ATSBackgroundColorSpan = class external 'android.text.style' name 'BackgroundColorSpan' (ATSCharacterStyle, ATSUpdateAppearance, ATParcelableSpan)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getBackgroundColor(): jint; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATSEasyEditSpan = class external 'android.text.style' name 'EasyEditSpan' (JLObject, ATParcelableSpan)
  public
    const
      EXTRA_TEXT_CHANGED_TYPE = 'android.text.style.EXTRA_TEXT_CHANGED_TYPE';
      TEXT_DELETED = 1;
      TEXT_MODIFIED = 2;
  public
    constructor create(); overload;
    constructor create(para1: AAPendingIntent); overload;
    constructor create(para1: AOParcel); overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getSpanTypeId(): jint; overload; virtual;
  end;

  ATSForegroundColorSpan = class external 'android.text.style' name 'ForegroundColorSpan' (ATSCharacterStyle, ATSUpdateAppearance, ATParcelableSpan)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getForegroundColor(): jint; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATSStrikethroughSpan = class external 'android.text.style' name 'StrikethroughSpan' (ATSCharacterStyle, ATSUpdateAppearance, ATParcelableSpan)
  public
    constructor create(); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATSSuggestionSpan = class external 'android.text.style' name 'SuggestionSpan' (ATSCharacterStyle, ATParcelableSpan)
  public
    const
      ACTION_SUGGESTION_PICKED = 'android.text.style.SUGGESTION_PICKED';
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_AUTO_CORRECTION = 4;
      FLAG_EASY_CORRECT = 1;
      FLAG_MISSPELLED = 2;
      SUGGESTIONS_MAX_SIZE = 5;
      SUGGESTION_SPAN_PICKED_AFTER = 'after';
      SUGGESTION_SPAN_PICKED_BEFORE = 'before';
      SUGGESTION_SPAN_PICKED_HASHCODE = 'hashcode';
  public
    constructor create(para1: ACContext; para2: Arr1JLString; para3: jint); overload;
    constructor create(para1: ACContext; const para2: array of JLString; para3: jint); overload;
    constructor create(para1: JULocale; para2: Arr1JLString; para3: jint); overload;
    constructor create(para1: JULocale; const para2: array of JLString; para3: jint); overload;
    constructor create(para1: ACContext; para2: JULocale; para3: Arr1JLString; para4: jint; para5: JLClass); overload;
    constructor create(para1: ACContext; para2: JULocale; const para3: array of JLString; para4: jint; para5: JLClass); overload;
    constructor create(para1: AOParcel); overload;
    function getSuggestions(): Arr1JLString; overload; virtual;
    function getLocale(): JLString; overload; virtual;
    function getFlags(): jint; overload; virtual;
    procedure setFlags(para1: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getSpanTypeId(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATSUnderlineSpan = class external 'android.text.style' name 'UnderlineSpan' (ATSCharacterStyle, ATSUpdateAppearance, ATParcelableSpan)
  public
    constructor create(); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATBoringLayout = class external 'android.text' name 'BoringLayout' (ATLayout, ATTextUtils.InnerEllipsizeCallback)
  public
    type
      InnerMetrics = class;
      Arr1InnerMetrics = array of InnerMetrics;
      Arr2InnerMetrics = array of Arr1InnerMetrics;
      Arr3InnerMetrics = array of Arr2InnerMetrics;
      InnerMetrics = class external 'android.text' name 'Metrics' (AGPaint.InnerFontMetricsInt)
      public
        var
          fwidth: jint; external name 'width';
      public
        constructor create(); overload;
        function toString(): JLString; overload; virtual;
      end;

  public
    constructor create(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat; para7: ATBoringLayout.InnerMetrics; para8: jboolean); overload;
    constructor create(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat; para7: ATBoringLayout.InnerMetrics; para8: jboolean; para9: ATTextUtils.InnerTruncateAt; para10: jint); overload;
    class function make(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat; para7: ATBoringLayout.InnerMetrics; para8: jboolean): ATBoringLayout; static; overload;
    class function make(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat; para7: ATBoringLayout.InnerMetrics; para8: jboolean; para9: ATTextUtils.InnerTruncateAt; para10: jint): ATBoringLayout; static; overload;
    function replaceOrMake(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat; para7: ATBoringLayout.InnerMetrics; para8: jboolean): ATBoringLayout; overload; virtual;
    function replaceOrMake(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat; para7: ATBoringLayout.InnerMetrics; para8: jboolean; para9: ATTextUtils.InnerTruncateAt; para10: jint): ATBoringLayout; overload; virtual;
    class function isBoring(para1: JLCharSequence; para2: ATTextPaint): ATBoringLayout.InnerMetrics; static; overload;
    class function isBoring(para1: JLCharSequence; para2: ATTextPaint; para3: ATBoringLayout.InnerMetrics): ATBoringLayout.InnerMetrics; static; overload;
    function getHeight(): jint; overload; virtual;
    function getLineCount(): jint; overload; virtual;
    function getLineTop(para1: jint): jint; overload; virtual;
    function getLineDescent(para1: jint): jint; overload; virtual;
    function getLineStart(para1: jint): jint; overload; virtual;
    function getParagraphDirection(para1: jint): jint; overload; virtual;
    function getLineContainsTab(para1: jint): jboolean; overload; virtual;
    function getLineMax(para1: jint): jfloat; overload; virtual;
    function getLineDirections(para1: jint): ATLayout.InnerDirections; overload; virtual; final;
    function getTopPadding(): jint; overload; virtual;
    function getBottomPadding(): jint; overload; virtual;
    function getEllipsisCount(para1: jint): jint; overload; virtual;
    function getEllipsisStart(para1: jint): jint; overload; virtual;
    function getEllipsizedWidth(): jint; overload; virtual;
    procedure draw(para1: AGCanvas; para2: AGPath; para3: AGPaint; para4: jint); overload; virtual;
    procedure ellipsized(para1: jint; para2: jint); overload; virtual;
  end;

  ATDynamicLayout = class external 'android.text' name 'DynamicLayout' (ATLayout)
  public
    constructor create(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat; para7: jboolean); overload;
    constructor create(para1: JLCharSequence; para2: JLCharSequence; para3: ATTextPaint; para4: jint; para5: ATLayout.InnerAlignment; para6: jfloat; para7: jfloat; para8: jboolean); overload;
    constructor create(para1: JLCharSequence; para2: JLCharSequence; para3: ATTextPaint; para4: jint; para5: ATLayout.InnerAlignment; para6: jfloat; para7: jfloat; para8: jboolean; para9: ATTextUtils.InnerTruncateAt; para10: jint); overload;
    function getLineCount(): jint; overload; virtual;
    function getLineTop(para1: jint): jint; overload; virtual;
    function getLineDescent(para1: jint): jint; overload; virtual;
    function getLineStart(para1: jint): jint; overload; virtual;
    function getLineContainsTab(para1: jint): jboolean; overload; virtual;
    function getParagraphDirection(para1: jint): jint; overload; virtual;
    function getLineDirections(para1: jint): ATLayout.InnerDirections; overload; virtual; final;
    function getTopPadding(): jint; overload; virtual;
    function getBottomPadding(): jint; overload; virtual;
    function getEllipsizedWidth(): jint; overload; virtual;
    function getEllipsisStart(para1: jint): jint; overload; virtual;
    function getEllipsisCount(para1: jint): jint; overload; virtual;
  end;

  ATStaticLayout = class external 'android.text' name 'StaticLayout' (ATLayout)
  public
    constructor create(para1: JLCharSequence; para2: ATTextPaint; para3: jint; para4: ATLayout.InnerAlignment; para5: jfloat; para6: jfloat; para7: jboolean); overload;
    constructor create(para1: JLCharSequence; para2: jint; para3: jint; para4: ATTextPaint; para5: jint; para6: ATLayout.InnerAlignment; para7: jfloat; para8: jfloat; para9: jboolean); overload;
    constructor create(para1: JLCharSequence; para2: jint; para3: jint; para4: ATTextPaint; para5: jint; para6: ATLayout.InnerAlignment; para7: jfloat; para8: jfloat; para9: jboolean; para10: ATTextUtils.InnerTruncateAt; para11: jint); overload;
    function getLineForVertical(para1: jint): jint; overload; virtual;
    function getLineCount(): jint; overload; virtual;
    function getLineTop(para1: jint): jint; overload; virtual;
    function getLineDescent(para1: jint): jint; overload; virtual;
    function getLineStart(para1: jint): jint; overload; virtual;
    function getParagraphDirection(para1: jint): jint; overload; virtual;
    function getLineContainsTab(para1: jint): jboolean; overload; virtual;
    function getLineDirections(para1: jint): ATLayout.InnerDirections; overload; virtual; final;
    function getTopPadding(): jint; overload; virtual;
    function getBottomPadding(): jint; overload; virtual;
    function getEllipsisCount(para1: jint): jint; overload; virtual;
    function getEllipsisStart(para1: jint): jint; overload; virtual;
    function getEllipsizedWidth(): jint; overload; virtual;
  end;

  APPreference = class external 'android.preference' name 'Preference' (JLObject, JLComparable)
  public
    type
      InnerBaseSavedState = class;
      Arr1InnerBaseSavedState = array of InnerBaseSavedState;
      Arr2InnerBaseSavedState = array of Arr1InnerBaseSavedState;
      Arr3InnerBaseSavedState = array of Arr2InnerBaseSavedState;
      InnerOnPreferenceClickListener = interface;
      Arr1InnerOnPreferenceClickListener = array of InnerOnPreferenceClickListener;
      Arr2InnerOnPreferenceClickListener = array of Arr1InnerOnPreferenceClickListener;
      Arr3InnerOnPreferenceClickListener = array of Arr2InnerOnPreferenceClickListener;
      InnerOnPreferenceChangeListener = interface;
      Arr1InnerOnPreferenceChangeListener = array of InnerOnPreferenceChangeListener;
      Arr2InnerOnPreferenceChangeListener = array of Arr1InnerOnPreferenceChangeListener;
      Arr3InnerOnPreferenceChangeListener = array of Arr2InnerOnPreferenceChangeListener;
      InnerBaseSavedState = class external 'android.preference' name 'BaseSavedState' (AVAbsSavedState)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        constructor create(para1: AOParcel); overload;
        constructor create(para1: AOParcelable); overload;
      end;

      InnerOnPreferenceClickListener = interface external 'android.preference' name 'OnPreferenceClickListener' 
        function onPreferenceClick(para1: APPreference): jboolean; overload;
      end;

      InnerOnPreferenceChangeListener = interface external 'android.preference' name 'OnPreferenceChangeListener' 
        function onPreferenceChange(para1: APPreference; para2: JLObject): jboolean; overload;
      end;

  public
    const
      DEFAULT_ORDER = 2147483647;
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
  strict protected
    function onGetDefaultValue(para1: ACRTypedArray; para2: jint): JLObject; overload; virtual;
  public
    procedure setIntent(para1: ACIntent); overload; virtual;
    function getIntent(): ACIntent; overload; virtual;
    procedure setFragment(para1: JLString); overload; virtual;
    function getFragment(): JLString; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function peekExtras(): AOBundle; overload; virtual;
    procedure setLayoutResource(para1: jint); overload; virtual;
    function getLayoutResource(): jint; overload; virtual;
    procedure setWidgetLayoutResource(para1: jint); overload; virtual;
    function getWidgetLayoutResource(): jint; overload; virtual;
    function getView(para1: AVView; para2: AVViewGroup): AVView; overload; virtual;
  strict protected
    function onCreateView(para1: AVViewGroup): AVView; overload; virtual;
    procedure onBindView(para1: AVView); overload; virtual;
  public
    procedure setOrder(para1: jint); overload; virtual;
    function getOrder(): jint; overload; virtual;
    procedure setTitle(para1: JLCharSequence); overload; virtual;
    procedure setTitle(para1: jint); overload; virtual;
    function getTitleRes(): jint; overload; virtual;
    function getTitle(): JLCharSequence; overload; virtual;
    procedure setIcon(para1: AGDDrawable); overload; virtual;
    procedure setIcon(para1: jint); overload; virtual;
    function getIcon(): AGDDrawable; overload; virtual;
    function getSummary(): JLCharSequence; overload; virtual;
    procedure setSummary(para1: JLCharSequence); overload; virtual;
    procedure setSummary(para1: jint); overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    procedure setSelectable(para1: jboolean); overload; virtual;
    function isSelectable(): jboolean; overload; virtual;
    procedure setShouldDisableView(para1: jboolean); overload; virtual;
    function getShouldDisableView(): jboolean; overload; virtual;
  strict protected
    procedure onClick(); overload; virtual;
  public
    procedure setKey(para1: JLString); overload; virtual;
    function getKey(): JLString; overload; virtual;
    function hasKey(): jboolean; overload; virtual;
    function isPersistent(): jboolean; overload; virtual;
  strict protected
    function shouldPersist(): jboolean; overload; virtual;
  public
    procedure setPersistent(para1: jboolean); overload; virtual;
  strict protected
    function callChangeListener(para1: JLObject): jboolean; overload; virtual;
  public
    procedure setOnPreferenceChangeListener(para1: APPreference.InnerOnPreferenceChangeListener); overload; virtual;
    function getOnPreferenceChangeListener(): APPreference.InnerOnPreferenceChangeListener; overload; virtual;
    procedure setOnPreferenceClickListener(para1: APPreference.InnerOnPreferenceClickListener); overload; virtual;
    function getOnPreferenceClickListener(): APPreference.InnerOnPreferenceClickListener; overload; virtual;
    function getContext(): ACContext; overload; virtual;
    function getSharedPreferences(): ACSharedPreferences; overload; virtual;
    function getEditor(): ACSharedPreferences.InnerEditor; overload; virtual;
    function shouldCommit(): jboolean; overload; virtual;
    function compareTo(para1: APPreference): jint; overload; virtual;
  strict protected
    procedure notifyChanged(); overload; virtual;
    procedure notifyHierarchyChanged(); overload; virtual;
  public
    function getPreferenceManager(): APPreferenceManager; overload; virtual;
  strict protected
    procedure onAttachedToHierarchy(para1: APPreferenceManager); overload; virtual;
    procedure onAttachedToActivity(); overload; virtual;
    function findPreferenceInHierarchy(para1: JLString): APPreference; overload; virtual;
  public
    procedure notifyDependencyChange(para1: jboolean); overload; virtual;
    procedure onDependencyChanged(para1: APPreference; para2: jboolean); overload; virtual;
    procedure onParentChanged(para1: APPreference; para2: jboolean); overload; virtual;
    function shouldDisableDependents(): jboolean; overload; virtual;
    procedure setDependency(para1: JLString); overload; virtual;
    function getDependency(): JLString; overload; virtual;
  strict protected
    procedure onPrepareForRemoval(); overload; virtual;
  public
    procedure setDefaultValue(para1: JLObject); overload; virtual;
  strict protected
    procedure onSetInitialValue(para1: jboolean; para2: JLObject); overload; virtual;
    function persistString(para1: JLString): jboolean; overload; virtual;
    function getPersistedString(para1: JLString): JLString; overload; virtual;
    function persistInt(para1: jint): jboolean; overload; virtual;
    function getPersistedInt(para1: jint): jint; overload; virtual;
    function persistFloat(para1: jfloat): jboolean; overload; virtual;
    function getPersistedFloat(para1: jfloat): jfloat; overload; virtual;
    function persistLong(para1: jlong): jboolean; overload; virtual;
    function getPersistedLong(para1: jlong): jlong; overload; virtual;
    function persistBoolean(para1: jboolean): jboolean; overload; virtual;
    function getPersistedBoolean(para1: jboolean): jboolean; overload; virtual;
  public
    function toString(): JLString; overload; virtual;
    procedure saveHierarchyState(para1: AOBundle); overload; virtual;
  strict protected
    function onSaveInstanceState(): AOParcelable; overload; virtual;
  public
    procedure restoreHierarchyState(para1: AOBundle); overload; virtual;
  strict protected
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  public
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  AVMotionEvent = class sealed external 'android.view' name 'MotionEvent' (AVInputEvent, AOParcelable)
  public
    type
      InnerPointerProperties = class;
      Arr1InnerPointerProperties = array of InnerPointerProperties;
      Arr2InnerPointerProperties = array of Arr1InnerPointerProperties;
      Arr3InnerPointerProperties = array of Arr2InnerPointerProperties;
      InnerPointerCoords = class;
      Arr1InnerPointerCoords = array of InnerPointerCoords;
      Arr2InnerPointerCoords = array of Arr1InnerPointerCoords;
      Arr3InnerPointerCoords = array of Arr2InnerPointerCoords;
      InnerPointerProperties = class sealed external 'android.view' name 'PointerProperties' (JLObject)
      public
        var
          fid: jint; external name 'id';
          ftoolType: jint; external name 'toolType';
      public
        constructor create(); overload;
        constructor create(para1: AVMotionEvent.InnerPointerProperties); overload;
        procedure clear(); overload; virtual;
        procedure copyFrom(para1: AVMotionEvent.InnerPointerProperties); overload; virtual;
        function equals(para1: JLObject): jboolean; overload; virtual;
        function hashCode(): jint; overload; virtual;
      end;

      InnerPointerCoords = class sealed external 'android.view' name 'PointerCoords' (JLObject)
      public
        var
          forientation: jfloat; external name 'orientation';
          fpressure: jfloat; external name 'pressure';
          fsize: jfloat; external name 'size';
          ftoolMajor: jfloat; external name 'toolMajor';
          ftoolMinor: jfloat; external name 'toolMinor';
          ftouchMajor: jfloat; external name 'touchMajor';
          ftouchMinor: jfloat; external name 'touchMinor';
          fx: jfloat; external name 'x';
          fy: jfloat; external name 'y';
      public
        constructor create(); overload;
        constructor create(para1: AVMotionEvent.InnerPointerCoords); overload;
        procedure clear(); overload; virtual;
        procedure copyFrom(para1: AVMotionEvent.InnerPointerCoords); overload; virtual;
        function getAxisValue(para1: jint): jfloat; overload; virtual;
        procedure setAxisValue(para1: jint; para2: jfloat); overload; virtual;
      end;

  public
    const
      ACTION_CANCEL = 3;
      ACTION_DOWN = 0;
      ACTION_HOVER_ENTER = 9;
      ACTION_HOVER_EXIT = 10;
      ACTION_HOVER_MOVE = 7;
      ACTION_MASK = 255;
      ACTION_MOVE = 2;
      ACTION_OUTSIDE = 4;
      ACTION_POINTER_1_DOWN = 5 deprecated;
      ACTION_POINTER_1_UP = 6 deprecated;
      ACTION_POINTER_2_DOWN = 261 deprecated;
      ACTION_POINTER_2_UP = 262 deprecated;
      ACTION_POINTER_3_DOWN = 517 deprecated;
      ACTION_POINTER_3_UP = 518 deprecated;
      ACTION_POINTER_DOWN = 5;
      ACTION_POINTER_ID_MASK = 65280 deprecated;
      ACTION_POINTER_ID_SHIFT = 8 deprecated;
      ACTION_POINTER_INDEX_MASK = 65280;
      ACTION_POINTER_INDEX_SHIFT = 8;
      ACTION_POINTER_UP = 6;
      ACTION_SCROLL = 8;
      ACTION_UP = 1;
      AXIS_BRAKE = 23;
      AXIS_DISTANCE = 24;
      AXIS_GAS = 22;
      AXIS_GENERIC_1 = 32;
      AXIS_GENERIC_10 = 41;
      AXIS_GENERIC_11 = 42;
      AXIS_GENERIC_12 = 43;
      AXIS_GENERIC_13 = 44;
      AXIS_GENERIC_14 = 45;
      AXIS_GENERIC_15 = 46;
      AXIS_GENERIC_16 = 47;
      AXIS_GENERIC_2 = 33;
      AXIS_GENERIC_3 = 34;
      AXIS_GENERIC_4 = 35;
      AXIS_GENERIC_5 = 36;
      AXIS_GENERIC_6 = 37;
      AXIS_GENERIC_7 = 38;
      AXIS_GENERIC_8 = 39;
      AXIS_GENERIC_9 = 40;
      AXIS_HAT_X = 15;
      AXIS_HAT_Y = 16;
      AXIS_HSCROLL = 10;
      AXIS_LTRIGGER = 17;
      AXIS_ORIENTATION = 8;
      AXIS_PRESSURE = 2;
      AXIS_RTRIGGER = 18;
      AXIS_RUDDER = 20;
      AXIS_RX = 12;
      AXIS_RY = 13;
      AXIS_RZ = 14;
      AXIS_SIZE = 3;
      AXIS_THROTTLE = 19;
      AXIS_TILT = 25;
      AXIS_TOOL_MAJOR = 6;
      AXIS_TOOL_MINOR = 7;
      AXIS_TOUCH_MAJOR = 4;
      AXIS_TOUCH_MINOR = 5;
      AXIS_VSCROLL = 9;
      AXIS_WHEEL = 21;
      AXIS_X = 0;
      AXIS_Y = 1;
      AXIS_Z = 11;
      BUTTON_BACK = 8;
      BUTTON_FORWARD = 16;
      BUTTON_PRIMARY = 1;
      BUTTON_SECONDARY = 2;
      BUTTON_TERTIARY = 4;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      EDGE_BOTTOM = 2;
      EDGE_LEFT = 4;
      EDGE_RIGHT = 8;
      EDGE_TOP = 1;
      FLAG_WINDOW_IS_OBSCURED = 1;
      INVALID_POINTER_ID = -1;
      TOOL_TYPE_ERASER = 4;
      TOOL_TYPE_FINGER = 1;
      TOOL_TYPE_MOUSE = 3;
      TOOL_TYPE_STYLUS = 2;
      TOOL_TYPE_UNKNOWN = 0;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    class function obtain(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: AVMotionEvent.Arr1InnerPointerProperties; para6: AVMotionEvent.Arr1InnerPointerCoords; para7: jint; para8: jint; para9: jfloat; para10: jfloat; para11: jint; para12: jint; para13: jint; para14: jint): AVMotionEvent; static; overload;
    class function obtain(para1: jlong; para2: jlong; para3: jint; para4: jint; var para5: array of AVMotionEvent.InnerPointerProperties; var para6: array of AVMotionEvent.InnerPointerCoords; para7: jint; para8: jint; para9: jfloat; para10: jfloat; para11: jint; para12: jint; para13: jint; para14: jint): AVMotionEvent; static; overload;
    class function obtain(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: Arr1jint; para6: AVMotionEvent.Arr1InnerPointerCoords; para7: jint; para8: jfloat; para9: jfloat; para10: jint; para11: jint; para12: jint; para13: jint): AVMotionEvent; static; overload;
    class function obtain(para1: jlong; para2: jlong; para3: jint; para4: jint; var para5: array of jint; var para6: array of AVMotionEvent.InnerPointerCoords; para7: jint; para8: jfloat; para9: jfloat; para10: jint; para11: jint; para12: jint; para13: jint): AVMotionEvent; static; overload;
    class function obtain(para1: jlong; para2: jlong; para3: jint; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jint; para9: jfloat; para10: jfloat; para11: jint; para12: jint): AVMotionEvent; static; overload;
    class function obtain(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat; para9: jint; para10: jfloat; para11: jfloat; para12: jint; para13: jint): AVMotionEvent; static; overload;
    class function obtain(para1: jlong; para2: jlong; para3: jint; para4: jfloat; para5: jfloat; para6: jint): AVMotionEvent; static; overload;
    class function obtain(para1: AVMotionEvent): AVMotionEvent; static; overload;
    class function obtainNoHistory(para1: AVMotionEvent): AVMotionEvent; static; overload;
    procedure recycle(); overload; virtual; final;
    function getDeviceId(): jint; overload; virtual; final;
    function getSource(): jint; overload; virtual; final;
    procedure setSource(para1: jint); overload; virtual; final;
    function getAction(): jint; overload; virtual; final;
    function getActionMasked(): jint; overload; virtual; final;
    function getActionIndex(): jint; overload; virtual; final;
    function getFlags(): jint; overload; virtual; final;
    function getDownTime(): jlong; overload; virtual; final;
    function getEventTime(): jlong; overload; virtual; final;
    function getX(): jfloat; overload; virtual; final;
    function getY(): jfloat; overload; virtual; final;
    function getPressure(): jfloat; overload; virtual; final;
    function getSize(): jfloat; overload; virtual; final;
    function getTouchMajor(): jfloat; overload; virtual; final;
    function getTouchMinor(): jfloat; overload; virtual; final;
    function getToolMajor(): jfloat; overload; virtual; final;
    function getToolMinor(): jfloat; overload; virtual; final;
    function getOrientation(): jfloat; overload; virtual; final;
    function getAxisValue(para1: jint): jfloat; overload; virtual; final;
    function getPointerCount(): jint; overload; virtual; final;
    function getPointerId(para1: jint): jint; overload; virtual; final;
    function getToolType(para1: jint): jint; overload; virtual; final;
    function findPointerIndex(para1: jint): jint; overload; virtual; final;
    function getX(para1: jint): jfloat; overload; virtual; final;
    function getY(para1: jint): jfloat; overload; virtual; final;
    function getPressure(para1: jint): jfloat; overload; virtual; final;
    function getSize(para1: jint): jfloat; overload; virtual; final;
    function getTouchMajor(para1: jint): jfloat; overload; virtual; final;
    function getTouchMinor(para1: jint): jfloat; overload; virtual; final;
    function getToolMajor(para1: jint): jfloat; overload; virtual; final;
    function getToolMinor(para1: jint): jfloat; overload; virtual; final;
    function getOrientation(para1: jint): jfloat; overload; virtual; final;
    function getAxisValue(para1: jint; para2: jint): jfloat; overload; virtual; final;
    procedure getPointerCoords(para1: jint; para2: AVMotionEvent.InnerPointerCoords); overload; virtual; final;
    procedure getPointerProperties(para1: jint; para2: AVMotionEvent.InnerPointerProperties); overload; virtual; final;
    function getMetaState(): jint; overload; virtual; final;
    function getButtonState(): jint; overload; virtual; final;
    function getRawX(): jfloat; overload; virtual; final;
    function getRawY(): jfloat; overload; virtual; final;
    function getXPrecision(): jfloat; overload; virtual; final;
    function getYPrecision(): jfloat; overload; virtual; final;
    function getHistorySize(): jint; overload; virtual; final;
    function getHistoricalEventTime(para1: jint): jlong; overload; virtual; final;
    function getHistoricalX(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalY(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalPressure(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalSize(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalTouchMajor(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalTouchMinor(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalToolMajor(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalToolMinor(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalOrientation(para1: jint): jfloat; overload; virtual; final;
    function getHistoricalAxisValue(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalX(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalY(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalPressure(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalSize(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalTouchMajor(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalTouchMinor(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalToolMajor(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalToolMinor(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalOrientation(para1: jint; para2: jint): jfloat; overload; virtual; final;
    function getHistoricalAxisValue(para1: jint; para2: jint; para3: jint): jfloat; overload; virtual; final;
    procedure getHistoricalPointerCoords(para1: jint; para2: jint; para3: AVMotionEvent.InnerPointerCoords); overload; virtual; final;
    function getEdgeFlags(): jint; overload; virtual; final;
    procedure setEdgeFlags(para1: jint); overload; virtual; final;
    procedure setAction(para1: jint); overload; virtual; final;
    procedure offsetLocation(para1: jfloat; para2: jfloat); overload; virtual; final;
    procedure setLocation(para1: jfloat; para2: jfloat); overload; virtual; final;
    procedure transform(para1: AGMatrix); overload; virtual; final;
    procedure addBatch(para1: jlong; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jint); overload; virtual; final;
    procedure addBatch(para1: jlong; para2: AVMotionEvent.Arr1InnerPointerCoords; para3: jint); overload; virtual; final;
    procedure addBatch(para1: jlong; var para2: array of AVMotionEvent.InnerPointerCoords; para3: jint); overload; virtual; final;
    function toString(): JLString; overload; virtual;
    class function actionToString(para1: jint): JLString; static; overload;
    class function axisToString(para1: jint): JLString; static; overload;
    class function axisFromString(para1: JLString): jint; static; overload;
    function isButtonPressed(para1: jint): jboolean; overload; virtual; final;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  APCalendarContract = class sealed external 'android.provider' name 'CalendarContract' (JLObject)
  public
    type
      InnerExtendedPropertiesColumns = interface;
      Arr1InnerExtendedPropertiesColumns = array of InnerExtendedPropertiesColumns;
      Arr2InnerExtendedPropertiesColumns = array of Arr1InnerExtendedPropertiesColumns;
      Arr3InnerExtendedPropertiesColumns = array of Arr2InnerExtendedPropertiesColumns;
      InnerCalendarAlertsColumns = interface;
      Arr1InnerCalendarAlertsColumns = array of InnerCalendarAlertsColumns;
      Arr2InnerCalendarAlertsColumns = array of Arr1InnerCalendarAlertsColumns;
      Arr3InnerCalendarAlertsColumns = array of Arr2InnerCalendarAlertsColumns;
      InnerRemindersColumns = interface;
      Arr1InnerRemindersColumns = array of InnerRemindersColumns;
      Arr2InnerRemindersColumns = array of Arr1InnerRemindersColumns;
      Arr3InnerRemindersColumns = array of Arr2InnerRemindersColumns;
      InnerEventDaysColumns = interface;
      Arr1InnerEventDaysColumns = array of InnerEventDaysColumns;
      Arr2InnerEventDaysColumns = array of Arr1InnerEventDaysColumns;
      Arr3InnerEventDaysColumns = array of Arr2InnerEventDaysColumns;
      InnerCalendarCacheColumns = interface;
      Arr1InnerCalendarCacheColumns = array of InnerCalendarCacheColumns;
      Arr2InnerCalendarCacheColumns = array of Arr1InnerCalendarCacheColumns;
      Arr3InnerCalendarCacheColumns = array of Arr2InnerCalendarCacheColumns;
      InnerEventsColumns = interface;
      Arr1InnerEventsColumns = array of InnerEventsColumns;
      Arr2InnerEventsColumns = array of Arr1InnerEventsColumns;
      Arr3InnerEventsColumns = array of Arr2InnerEventsColumns;
      InnerAttendeesColumns = interface;
      Arr1InnerAttendeesColumns = array of InnerAttendeesColumns;
      Arr2InnerAttendeesColumns = array of Arr1InnerAttendeesColumns;
      Arr3InnerAttendeesColumns = array of Arr2InnerAttendeesColumns;
      InnerCalendarColumns = interface;
      Arr1InnerCalendarColumns = array of InnerCalendarColumns;
      Arr2InnerCalendarColumns = array of Arr1InnerCalendarColumns;
      Arr3InnerCalendarColumns = array of Arr2InnerCalendarColumns;
      InnerCalendarSyncColumns = interface;
      Arr1InnerCalendarSyncColumns = array of InnerCalendarSyncColumns;
      Arr2InnerCalendarSyncColumns = array of Arr1InnerCalendarSyncColumns;
      Arr3InnerCalendarSyncColumns = array of Arr2InnerCalendarSyncColumns;
      InnerSyncState = class;
      Arr1InnerSyncState = array of InnerSyncState;
      Arr2InnerSyncState = array of Arr1InnerSyncState;
      Arr3InnerSyncState = array of Arr2InnerSyncState;
      InnerColorsColumns = interface;
      Arr1InnerColorsColumns = array of InnerColorsColumns;
      Arr2InnerColorsColumns = array of Arr1InnerColorsColumns;
      Arr3InnerColorsColumns = array of Arr2InnerColorsColumns;
      InnerEventDays = class;
      Arr1InnerEventDays = array of InnerEventDays;
      Arr2InnerEventDays = array of Arr1InnerEventDays;
      Arr3InnerEventDays = array of Arr2InnerEventDays;
      InnerCalendarCache = class;
      Arr1InnerCalendarCache = array of InnerCalendarCache;
      Arr2InnerCalendarCache = array of Arr1InnerCalendarCache;
      Arr3InnerCalendarCache = array of Arr2InnerCalendarCache;
      InnerExtendedProperties = class;
      Arr1InnerExtendedProperties = array of InnerExtendedProperties;
      Arr2InnerExtendedProperties = array of Arr1InnerExtendedProperties;
      Arr3InnerExtendedProperties = array of Arr2InnerExtendedProperties;
      InnerReminders = class;
      Arr1InnerReminders = array of InnerReminders;
      Arr2InnerReminders = array of Arr1InnerReminders;
      Arr3InnerReminders = array of Arr2InnerReminders;
      InnerAttendees = class;
      Arr1InnerAttendees = array of InnerAttendees;
      Arr2InnerAttendees = array of Arr1InnerAttendees;
      Arr3InnerAttendees = array of Arr2InnerAttendees;
      InnerCalendarAlerts = class;
      Arr1InnerCalendarAlerts = array of InnerCalendarAlerts;
      Arr2InnerCalendarAlerts = array of Arr1InnerCalendarAlerts;
      Arr3InnerCalendarAlerts = array of Arr2InnerCalendarAlerts;
      InnerInstances = class;
      Arr1InnerInstances = array of InnerInstances;
      Arr2InnerInstances = array of Arr1InnerInstances;
      Arr3InnerInstances = array of Arr2InnerInstances;
      InnerSyncColumns = interface;
      Arr1InnerSyncColumns = array of InnerSyncColumns;
      Arr2InnerSyncColumns = array of Arr1InnerSyncColumns;
      Arr3InnerSyncColumns = array of Arr2InnerSyncColumns;
      InnerColors = class;
      Arr1InnerColors = array of InnerColors;
      Arr2InnerColors = array of Arr1InnerColors;
      Arr3InnerColors = array of Arr2InnerColors;
      InnerEvents = class;
      Arr1InnerEvents = array of InnerEvents;
      Arr2InnerEvents = array of Arr1InnerEvents;
      Arr3InnerEvents = array of Arr2InnerEvents;
      InnerEventsEntity = class;
      Arr1InnerEventsEntity = array of InnerEventsEntity;
      Arr2InnerEventsEntity = array of Arr1InnerEventsEntity;
      Arr3InnerEventsEntity = array of Arr2InnerEventsEntity;
      InnerCalendars = class;
      Arr1InnerCalendars = array of InnerCalendars;
      Arr2InnerCalendars = array of Arr1InnerCalendars;
      Arr3InnerCalendars = array of Arr2InnerCalendars;
      InnerCalendarEntity = class;
      Arr1InnerCalendarEntity = array of InnerCalendarEntity;
      Arr2InnerCalendarEntity = array of Arr1InnerCalendarEntity;
      Arr3InnerCalendarEntity = array of Arr2InnerCalendarEntity;
      InnerExtendedPropertiesColumns = interface external 'android.provider' name 'ExtendedPropertiesColumns' 
        const
          EVENT_ID = 'event_id';
          NAME = 'name';
          VALUE = 'value';
      end;

      InnerCalendarAlertsColumns = interface external 'android.provider' name 'CalendarAlertsColumns' 
        const
          ALARM_TIME = 'alarmTime';
          &BEGIN = 'begin';
          CREATION_TIME = 'creationTime';
          DEFAULT_SORT_ORDER = 'begin ASC,title ASC';
          &END = 'end';
          EVENT_ID = 'event_id';
          MINUTES = 'minutes';
          NOTIFY_TIME = 'notifyTime';
          RECEIVED_TIME = 'receivedTime';
          STATE = 'state';
          STATE_DISMISSED = 2;
          STATE_FIRED = 1;
          STATE_SCHEDULED = 0;
      end;

      InnerRemindersColumns = interface external 'android.provider' name 'RemindersColumns' 
        const
          EVENT_ID = 'event_id';
          METHOD = 'method';
          METHOD_ALARM = 4;
          METHOD_ALERT = 1;
          METHOD_DEFAULT = 0;
          METHOD_EMAIL = 2;
          METHOD_SMS = 3;
          MINUTES = 'minutes';
          MINUTES_DEFAULT = -1;
      end;

      InnerEventDaysColumns = interface external 'android.provider' name 'EventDaysColumns' 
        const
          ENDDAY = 'endDay';
          STARTDAY = 'startDay';
      end;

      InnerCalendarCacheColumns = interface external 'android.provider' name 'CalendarCacheColumns' 
        const
          KEY = 'key';
          VALUE = 'value';
      end;

      InnerEventsColumns = interface external 'android.provider' name 'EventsColumns' 
        const
          ACCESS_CONFIDENTIAL = 1;
          ACCESS_DEFAULT = 0;
          ACCESS_LEVEL = 'accessLevel';
          ACCESS_PRIVATE = 2;
          ACCESS_PUBLIC = 3;
          ALL_DAY = 'allDay';
          AVAILABILITY = 'availability';
          AVAILABILITY_BUSY = 0;
          AVAILABILITY_FREE = 1;
          AVAILABILITY_TENTATIVE = 2;
          CALENDAR_ID = 'calendar_id';
          CAN_INVITE_OTHERS = 'canInviteOthers';
          CUSTOM_APP_PACKAGE = 'customAppPackage';
          CUSTOM_APP_URI = 'customAppUri';
          DESCRIPTION = 'description';
          DISPLAY_COLOR = 'displayColor';
          DTEND = 'dtend';
          DTSTART = 'dtstart';
          DURATION = 'duration';
          EVENT_COLOR = 'eventColor';
          EVENT_COLOR_KEY = 'eventColor_index';
          EVENT_END_TIMEZONE = 'eventEndTimezone';
          EVENT_LOCATION = 'eventLocation';
          EVENT_TIMEZONE = 'eventTimezone';
          EXDATE = 'exdate';
          EXRULE = 'exrule';
          GUESTS_CAN_INVITE_OTHERS = 'guestsCanInviteOthers';
          GUESTS_CAN_MODIFY = 'guestsCanModify';
          GUESTS_CAN_SEE_GUESTS = 'guestsCanSeeGuests';
          HAS_ALARM = 'hasAlarm';
          HAS_ATTENDEE_DATA = 'hasAttendeeData';
          HAS_EXTENDED_PROPERTIES = 'hasExtendedProperties';
          IS_ORGANIZER = 'isOrganizer';
          LAST_DATE = 'lastDate';
          LAST_SYNCED = 'lastSynced';
          ORGANIZER = 'organizer';
          ORIGINAL_ALL_DAY = 'originalAllDay';
          ORIGINAL_ID = 'original_id';
          ORIGINAL_INSTANCE_TIME = 'originalInstanceTime';
          ORIGINAL_SYNC_ID = 'original_sync_id';
          RDATE = 'rdate';
          RRULE = 'rrule';
          SELF_ATTENDEE_STATUS = 'selfAttendeeStatus';
          STATUS = 'eventStatus';
          STATUS_CANCELED = 2;
          STATUS_CONFIRMED = 1;
          STATUS_TENTATIVE = 0;
          SYNC_DATA1 = 'sync_data1';
          SYNC_DATA10 = 'sync_data10';
          SYNC_DATA2 = 'sync_data2';
          SYNC_DATA3 = 'sync_data3';
          SYNC_DATA4 = 'sync_data4';
          SYNC_DATA5 = 'sync_data5';
          SYNC_DATA6 = 'sync_data6';
          SYNC_DATA7 = 'sync_data7';
          SYNC_DATA8 = 'sync_data8';
          SYNC_DATA9 = 'sync_data9';
          TITLE = 'title';
          UID_2445 = 'uid2445';
      end;

      InnerAttendeesColumns = interface external 'android.provider' name 'AttendeesColumns' 
        const
          ATTENDEE_EMAIL = 'attendeeEmail';
          ATTENDEE_IDENTITY = 'attendeeIdentity';
          ATTENDEE_ID_NAMESPACE = 'attendeeIdNamespace';
          ATTENDEE_NAME = 'attendeeName';
          ATTENDEE_RELATIONSHIP = 'attendeeRelationship';
          ATTENDEE_STATUS = 'attendeeStatus';
          ATTENDEE_STATUS_ACCEPTED = 1;
          ATTENDEE_STATUS_DECLINED = 2;
          ATTENDEE_STATUS_INVITED = 3;
          ATTENDEE_STATUS_NONE = 0;
          ATTENDEE_STATUS_TENTATIVE = 4;
          ATTENDEE_TYPE = 'attendeeType';
          EVENT_ID = 'event_id';
          RELATIONSHIP_ATTENDEE = 1;
          RELATIONSHIP_NONE = 0;
          RELATIONSHIP_ORGANIZER = 2;
          RELATIONSHIP_PERFORMER = 3;
          RELATIONSHIP_SPEAKER = 4;
          TYPE_NONE = 0;
          TYPE_OPTIONAL = 2;
          TYPE_REQUIRED = 1;
          TYPE_RESOURCE = 3;
      end;

      InnerCalendarColumns = interface external 'android.provider' name 'CalendarColumns' 
        const
          ALLOWED_ATTENDEE_TYPES = 'allowedAttendeeTypes';
          ALLOWED_AVAILABILITY = 'allowedAvailability';
          ALLOWED_REMINDERS = 'allowedReminders';
          CALENDAR_ACCESS_LEVEL = 'calendar_access_level';
          CALENDAR_COLOR = 'calendar_color';
          CALENDAR_COLOR_KEY = 'calendar_color_index';
          CALENDAR_DISPLAY_NAME = 'calendar_displayName';
          CALENDAR_TIME_ZONE = 'calendar_timezone';
          CAL_ACCESS_CONTRIBUTOR = 500;
          CAL_ACCESS_EDITOR = 600;
          CAL_ACCESS_FREEBUSY = 100;
          CAL_ACCESS_NONE = 0;
          CAL_ACCESS_OVERRIDE = 400;
          CAL_ACCESS_OWNER = 700;
          CAL_ACCESS_READ = 200;
          CAL_ACCESS_RESPOND = 300;
          CAL_ACCESS_ROOT = 800;
          CAN_MODIFY_TIME_ZONE = 'canModifyTimeZone';
          CAN_ORGANIZER_RESPOND = 'canOrganizerRespond';
          IS_PRIMARY = 'isPrimary';
          MAX_REMINDERS = 'maxReminders';
          OWNER_ACCOUNT = 'ownerAccount';
          SYNC_EVENTS = 'sync_events';
          VISIBLE = 'visible';
      end;

      InnerCalendarSyncColumns = interface external 'android.provider' name 'CalendarSyncColumns' 
        const
          CAL_SYNC1 = 'cal_sync1';
          CAL_SYNC10 = 'cal_sync10';
          CAL_SYNC2 = 'cal_sync2';
          CAL_SYNC3 = 'cal_sync3';
          CAL_SYNC4 = 'cal_sync4';
          CAL_SYNC5 = 'cal_sync5';
          CAL_SYNC6 = 'cal_sync6';
          CAL_SYNC7 = 'cal_sync7';
          CAL_SYNC8 = 'cal_sync8';
          CAL_SYNC9 = 'cal_sync9';
      end;

      InnerSyncState = class sealed external 'android.provider' name 'SyncState' (JLObject, APSyncStateContract.InnerColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      end;

      InnerColorsColumns = interface external 'android.provider' name 'ColorsColumns' (APSyncStateContract.InnerColumns)
        const
          COLOR = 'color';
          COLOR_KEY = 'color_index';
          COLOR_TYPE = 'color_type';
          TYPE_CALENDAR = 0;
          TYPE_EVENT = 1;
      end;

      InnerEventDays = class sealed external 'android.provider' name 'EventDays' (JLObject, APCalendarContract.InnerEventDaysColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function query(para1: ACContentResolver; para2: jint; para3: jint; para4: Arr1JLString): ADCursor; static; overload; final;
        class function query(para1: ACContentResolver; para2: jint; para3: jint; var para4: array of JLString): ADCursor; static; overload; final;
      end;

      InnerCalendarCache = class sealed external 'android.provider' name 'CalendarCache' (JLObject, APCalendarContract.InnerCalendarCacheColumns)
      public
        const
          KEY_TIMEZONE_INSTANCES = 'timezoneInstances';
          KEY_TIMEZONE_INSTANCES_PREVIOUS = 'timezoneInstancesPrevious';
          KEY_TIMEZONE_TYPE = 'timezoneType';
          TIMEZONE_TYPE_AUTO = 'auto';
          TIMEZONE_TYPE_HOME = 'home';
      public
        final class var
          fURI: ANUri; external name 'URI';
      end;

      InnerExtendedProperties = class sealed external 'android.provider' name 'ExtendedProperties' (JLObject, APBaseColumns, APCalendarContract.InnerExtendedPropertiesColumns, APCalendarContract.InnerEventsColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      end;

      InnerReminders = class sealed external 'android.provider' name 'Reminders' (JLObject, APBaseColumns, APCalendarContract.InnerRemindersColumns, APCalendarContract.InnerEventsColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function query(para1: ACContentResolver; para2: jlong; para3: Arr1JLString): ADCursor; static; overload; final;
        class function query(para1: ACContentResolver; para2: jlong; var para3: array of JLString): ADCursor; static; overload; final;
      end;

      InnerAttendees = class sealed external 'android.provider' name 'Attendees' (JLObject, APBaseColumns, APCalendarContract.InnerAttendeesColumns, APCalendarContract.InnerEventsColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function query(para1: ACContentResolver; para2: jlong; para3: Arr1JLString): ADCursor; static; overload; final;
        class function query(para1: ACContentResolver; para2: jlong; var para3: array of JLString): ADCursor; static; overload; final;
      end;

      InnerCalendarAlerts = class sealed external 'android.provider' name 'CalendarAlerts' (JLObject, APBaseColumns, APCalendarContract.InnerCalendarAlertsColumns, APCalendarContract.InnerEventsColumns, APCalendarContract.InnerCalendarColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          fCONTENT_URI_BY_INSTANCE: ANUri; external name 'CONTENT_URI_BY_INSTANCE';
      end;

      InnerInstances = class sealed external 'android.provider' name 'Instances' (JLObject, APBaseColumns, APCalendarContract.InnerEventsColumns, APCalendarContract.InnerCalendarColumns)
      public
        const
          &BEGIN = 'begin';
      public
        final class var
          fCONTENT_BY_DAY_URI: ANUri; external name 'CONTENT_BY_DAY_URI';
          fCONTENT_SEARCH_BY_DAY_URI: ANUri; external name 'CONTENT_SEARCH_BY_DAY_URI';
          fCONTENT_SEARCH_URI: ANUri; external name 'CONTENT_SEARCH_URI';
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          &END = 'end';
          END_DAY = 'endDay';
          END_MINUTE = 'endMinute';
          EVENT_ID = 'event_id';
          START_DAY = 'startDay';
          START_MINUTE = 'startMinute';
      public
        class function query(para1: ACContentResolver; para2: Arr1JLString; para3: jlong; para4: jlong): ADCursor; static; overload; final;
        class function query(para1: ACContentResolver; var para2: array of JLString; para3: jlong; para4: jlong): ADCursor; static; overload; final;
        class function query(para1: ACContentResolver; para2: Arr1JLString; para3: jlong; para4: jlong; para5: JLString): ADCursor; static; overload; final;
        class function query(para1: ACContentResolver; var para2: array of JLString; para3: jlong; para4: jlong; para5: JLString): ADCursor; static; overload; final;
      end;

      InnerSyncColumns = interface external 'android.provider' name 'SyncColumns' (APCalendarContract.InnerCalendarSyncColumns)
        const
          ACCOUNT_NAME = 'account_name';
          ACCOUNT_TYPE = 'account_type';
          CAN_PARTIALLY_UPDATE = 'canPartiallyUpdate';
          DELETED = 'deleted';
          DIRTY = 'dirty';
          MUTATORS = 'mutators';
          _SYNC_ID = '_sync_id';
      end;

      InnerColors = class sealed external 'android.provider' name 'Colors' (JLObject, APCalendarContract.InnerColorsColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      end;

      InnerEvents = class sealed external 'android.provider' name 'Events' (JLObject, APBaseColumns, APCalendarContract.InnerSyncColumns, APCalendarContract.InnerEventsColumns, APCalendarContract.InnerCalendarColumns)
      public
        final class var
          fCONTENT_EXCEPTION_URI: ANUri; external name 'CONTENT_EXCEPTION_URI';
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      end;

      InnerEventsEntity = class sealed external 'android.provider' name 'EventsEntity' (JLObject, APBaseColumns, APCalendarContract.InnerSyncColumns, APCalendarContract.InnerEventsColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function newEntityIterator(para1: ADCursor; para2: ACContentResolver): ACEntityIterator; static; overload;
        class function newEntityIterator(para1: ADCursor; para2: ACContentProviderClient): ACEntityIterator; static; overload;
      end;

      InnerCalendars = class sealed external 'android.provider' name 'Calendars' (JLObject, APBaseColumns, APCalendarContract.InnerSyncColumns, APCalendarContract.InnerCalendarColumns)
      public
        const
          CALENDAR_LOCATION = 'calendar_location';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'calendar_displayName';
          NAME = 'name';
      end;

      InnerCalendarEntity = class sealed external 'android.provider' name 'CalendarEntity' (JLObject, APBaseColumns, APCalendarContract.InnerSyncColumns, APCalendarContract.InnerCalendarColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function newEntityIterator(para1: ADCursor): ACEntityIterator; static; overload;
      end;

  public
    const
      ACCOUNT_TYPE_LOCAL = 'LOCAL';
      ACTION_EVENT_REMINDER = 'android.intent.action.EVENT_REMINDER';
      ACTION_HANDLE_CUSTOM_EVENT = 'android.provider.calendar.action.HANDLE_CUSTOM_EVENT';
      AUTHORITY = 'com.android.calendar';
      CALLER_IS_SYNCADAPTER = 'caller_is_syncadapter';
  public
    final class var
      fCONTENT_URI: ANUri; external name 'CONTENT_URI';
  public
    const
      EXTRA_CUSTOM_APP_URI = 'customAppUri';
      EXTRA_EVENT_ALL_DAY = 'allDay';
      EXTRA_EVENT_BEGIN_TIME = 'beginTime';
      EXTRA_EVENT_END_TIME = 'endTime';
  end;

  APContactsContract = class sealed external 'android.provider' name 'ContactsContract' (JLObject)
  public
    type
      InnerIntents = class;
      Arr1InnerIntents = array of InnerIntents;
      Arr2InnerIntents = array of Arr1InnerIntents;
      Arr3InnerIntents = array of Arr2InnerIntents;
      InnerDisplayPhoto = class;
      Arr1InnerDisplayPhoto = array of InnerDisplayPhoto;
      Arr2InnerDisplayPhoto = array of Arr1InnerDisplayPhoto;
      Arr3InnerDisplayPhoto = array of Arr2InnerDisplayPhoto;
      InnerQuickContact = class;
      Arr1InnerQuickContact = array of InnerQuickContact;
      Arr2InnerQuickContact = array of Arr1InnerQuickContact;
      Arr3InnerQuickContact = array of Arr2InnerQuickContact;
      InnerPinnedPositions = class;
      Arr1InnerPinnedPositions = array of InnerPinnedPositions;
      Arr2InnerPinnedPositions = array of Arr1InnerPinnedPositions;
      Arr3InnerPinnedPositions = array of Arr2InnerPinnedPositions;
      InnerDataUsageFeedback = class;
      Arr1InnerDataUsageFeedback = array of InnerDataUsageFeedback;
      Arr2InnerDataUsageFeedback = array of Arr1InnerDataUsageFeedback;
      Arr3InnerDataUsageFeedback = array of Arr2InnerDataUsageFeedback;
      InnerSettingsColumns = interface;
      Arr1InnerSettingsColumns = array of InnerSettingsColumns;
      Arr2InnerSettingsColumns = array of Arr1InnerSettingsColumns;
      Arr3InnerSettingsColumns = array of Arr2InnerSettingsColumns;
      InnerGroupsColumns = interface;
      Arr1InnerGroupsColumns = array of InnerGroupsColumns;
      Arr2InnerGroupsColumns = array of Arr1InnerGroupsColumns;
      Arr3InnerGroupsColumns = array of Arr2InnerGroupsColumns;
      InnerSearchSnippets = class;
      Arr1InnerSearchSnippets = array of InnerSearchSnippets;
      Arr2InnerSearchSnippets = array of Arr1InnerSearchSnippets;
      Arr3InnerSearchSnippets = array of Arr2InnerSearchSnippets;
      InnerPresenceColumns = interface;
      Arr1InnerPresenceColumns = array of InnerPresenceColumns;
      Arr2InnerPresenceColumns = array of Arr1InnerPresenceColumns;
      Arr3InnerPresenceColumns = array of Arr2InnerPresenceColumns;
      InnerPhoneLookupColumns = interface;
      Arr1InnerPhoneLookupColumns = array of InnerPhoneLookupColumns;
      Arr2InnerPhoneLookupColumns = array of Arr1InnerPhoneLookupColumns;
      Arr3InnerPhoneLookupColumns = array of Arr2InnerPhoneLookupColumns;
      InnerDataUsageStatColumns = interface;
      Arr1InnerDataUsageStatColumns = array of InnerDataUsageStatColumns;
      Arr2InnerDataUsageStatColumns = array of Arr1InnerDataUsageStatColumns;
      Arr3InnerDataUsageStatColumns = array of Arr2InnerDataUsageStatColumns;
      InnerDataColumns = interface;
      Arr1InnerDataColumns = array of InnerDataColumns;
      Arr2InnerDataColumns = array of Arr1InnerDataColumns;
      Arr3InnerDataColumns = array of Arr2InnerDataColumns;
      InnerStreamItemPhotosColumns = interface;
      Arr1InnerStreamItemPhotosColumns = array of InnerStreamItemPhotosColumns;
      Arr2InnerStreamItemPhotosColumns = array of Arr1InnerStreamItemPhotosColumns;
      Arr3InnerStreamItemPhotosColumns = array of Arr2InnerStreamItemPhotosColumns;
      InnerStreamItemsColumns = interface;
      Arr1InnerStreamItemsColumns = array of InnerStreamItemsColumns;
      Arr2InnerStreamItemsColumns = array of Arr1InnerStreamItemsColumns;
      Arr3InnerStreamItemsColumns = array of Arr2InnerStreamItemsColumns;
      InnerStatusColumns = interface;
      Arr1InnerStatusColumns = array of InnerStatusColumns;
      Arr2InnerStatusColumns = array of Arr1InnerStatusColumns;
      Arr3InnerStatusColumns = array of Arr2InnerStatusColumns;
      InnerRawContactsColumns = interface;
      Arr1InnerRawContactsColumns = array of InnerRawContactsColumns;
      Arr2InnerRawContactsColumns = array of Arr1InnerRawContactsColumns;
      Arr3InnerRawContactsColumns = array of Arr2InnerRawContactsColumns;
      InnerDeletedContactsColumns = interface;
      Arr1InnerDeletedContactsColumns = array of InnerDeletedContactsColumns;
      Arr2InnerDeletedContactsColumns = array of Arr1InnerDeletedContactsColumns;
      Arr3InnerDeletedContactsColumns = array of Arr2InnerDeletedContactsColumns;
      InnerContactNameColumns = interface;
      Arr1InnerContactNameColumns = array of InnerContactNameColumns;
      Arr2InnerContactNameColumns = array of Arr1InnerContactNameColumns;
      Arr3InnerContactNameColumns = array of Arr2InnerContactNameColumns;
      InnerDisplayNameSources = interface;
      Arr1InnerDisplayNameSources = array of InnerDisplayNameSources;
      Arr2InnerDisplayNameSources = array of Arr1InnerDisplayNameSources;
      Arr3InnerDisplayNameSources = array of Arr2InnerDisplayNameSources;
      InnerPhoneticNameStyle = interface;
      Arr1InnerPhoneticNameStyle = array of InnerPhoneticNameStyle;
      Arr2InnerPhoneticNameStyle = array of Arr1InnerPhoneticNameStyle;
      Arr3InnerPhoneticNameStyle = array of Arr2InnerPhoneticNameStyle;
      InnerFullNameStyle = interface;
      Arr1InnerFullNameStyle = array of InnerFullNameStyle;
      Arr2InnerFullNameStyle = array of Arr1InnerFullNameStyle;
      Arr3InnerFullNameStyle = array of Arr2InnerFullNameStyle;
      InnerContactStatusColumns = interface;
      Arr1InnerContactStatusColumns = array of InnerContactStatusColumns;
      Arr2InnerContactStatusColumns = array of Arr1InnerContactStatusColumns;
      Arr3InnerContactStatusColumns = array of Arr2InnerContactStatusColumns;
      InnerContactsColumns = interface;
      Arr1InnerContactsColumns = array of InnerContactsColumns;
      Arr2InnerContactsColumns = array of Arr1InnerContactsColumns;
      Arr3InnerContactsColumns = array of Arr2InnerContactsColumns;
      InnerContactOptionsColumns = interface;
      Arr1InnerContactOptionsColumns = array of InnerContactOptionsColumns;
      Arr2InnerContactOptionsColumns = array of Arr1InnerContactOptionsColumns;
      Arr3InnerContactOptionsColumns = array of Arr2InnerContactOptionsColumns;
      InnerBaseSyncColumns = interface;
      Arr1InnerBaseSyncColumns = array of InnerBaseSyncColumns;
      Arr2InnerBaseSyncColumns = array of Arr1InnerBaseSyncColumns;
      Arr3InnerBaseSyncColumns = array of Arr2InnerBaseSyncColumns;
      InnerAggregationExceptions = class;
      Arr1InnerAggregationExceptions = array of InnerAggregationExceptions;
      Arr2InnerAggregationExceptions = array of Arr1InnerAggregationExceptions;
      Arr3InnerAggregationExceptions = array of Arr2InnerAggregationExceptions;
      InnerDirectory = class;
      Arr1InnerDirectory = array of InnerDirectory;
      Arr2InnerDirectory = array of Arr1InnerDirectory;
      Arr3InnerDirectory = array of Arr2InnerDirectory;
      InnerProfileSyncState = class;
      Arr1InnerProfileSyncState = array of InnerProfileSyncState;
      Arr2InnerProfileSyncState = array of Arr1InnerProfileSyncState;
      Arr3InnerProfileSyncState = array of Arr2InnerProfileSyncState;
      InnerSyncState = class;
      Arr1InnerSyncState = array of InnerSyncState;
      Arr2InnerSyncState = array of Arr1InnerSyncState;
      Arr3InnerSyncState = array of Arr2InnerSyncState;
      InnerSettings = class;
      Arr1InnerSettings = array of InnerSettings;
      Arr2InnerSettings = array of Arr1InnerSettings;
      Arr3InnerSettings = array of Arr2InnerSettings;
      InnerStreamItemPhotos = class;
      Arr1InnerStreamItemPhotos = array of InnerStreamItemPhotos;
      Arr2InnerStreamItemPhotos = array of Arr1InnerStreamItemPhotos;
      Arr3InnerStreamItemPhotos = array of Arr2InnerStreamItemPhotos;
      InnerStreamItems = class;
      Arr1InnerStreamItems = array of InnerStreamItems;
      Arr2InnerStreamItems = array of Arr1InnerStreamItems;
      Arr3InnerStreamItems = array of Arr2InnerStreamItems;
      InnerStatusUpdates = class;
      Arr1InnerStatusUpdates = array of InnerStatusUpdates;
      Arr2InnerStatusUpdates = array of Arr1InnerStatusUpdates;
      Arr3InnerStatusUpdates = array of Arr2InnerStatusUpdates;
      InnerRawContactsEntity = class;
      Arr1InnerRawContactsEntity = array of InnerRawContactsEntity;
      Arr2InnerRawContactsEntity = array of Arr1InnerRawContactsEntity;
      Arr3InnerRawContactsEntity = array of Arr2InnerRawContactsEntity;
      InnerDeletedContacts = class;
      Arr1InnerDeletedContacts = array of InnerDeletedContacts;
      Arr2InnerDeletedContacts = array of Arr1InnerDeletedContacts;
      Arr3InnerDeletedContacts = array of Arr2InnerDeletedContacts;
      InnerPhoneLookup = class;
      Arr1InnerPhoneLookup = array of InnerPhoneLookup;
      Arr2InnerPhoneLookup = array of Arr1InnerPhoneLookup;
      Arr3InnerPhoneLookup = array of Arr2InnerPhoneLookup;
      InnerDataColumnsWithJoins = interface;
      Arr1InnerDataColumnsWithJoins = array of InnerDataColumnsWithJoins;
      Arr2InnerDataColumnsWithJoins = array of Arr1InnerDataColumnsWithJoins;
      Arr3InnerDataColumnsWithJoins = array of Arr2InnerDataColumnsWithJoins;
      InnerProfile = class;
      Arr1InnerProfile = array of InnerProfile;
      Arr2InnerProfile = array of Arr1InnerProfile;
      Arr3InnerProfile = array of Arr2InnerProfile;
      InnerSyncColumns = interface;
      Arr1InnerSyncColumns = array of InnerSyncColumns;
      Arr2InnerSyncColumns = array of Arr1InnerSyncColumns;
      Arr3InnerSyncColumns = array of Arr2InnerSyncColumns;
      InnerPresence = class;
      Arr1InnerPresence = array of InnerPresence;
      Arr2InnerPresence = array of Arr1InnerPresence;
      Arr3InnerPresence = array of Arr2InnerPresence;
      InnerCommonDataKinds = class;
      Arr1InnerCommonDataKinds = array of InnerCommonDataKinds;
      Arr2InnerCommonDataKinds = array of Arr1InnerCommonDataKinds;
      Arr3InnerCommonDataKinds = array of Arr2InnerCommonDataKinds;
      InnerData = class;
      Arr1InnerData = array of InnerData;
      Arr2InnerData = array of Arr1InnerData;
      Arr3InnerData = array of Arr2InnerData;
      InnerGroups = class;
      Arr1InnerGroups = array of InnerGroups;
      Arr2InnerGroups = array of Arr1InnerGroups;
      Arr3InnerGroups = array of Arr2InnerGroups;
      InnerRawContacts = class;
      Arr1InnerRawContacts = array of InnerRawContacts;
      Arr2InnerRawContacts = array of Arr1InnerRawContacts;
      Arr3InnerRawContacts = array of Arr2InnerRawContacts;
      InnerContacts = class;
      Arr1InnerContacts = array of InnerContacts;
      Arr2InnerContacts = array of Arr1InnerContacts;
      Arr3InnerContacts = array of Arr2InnerContacts;
      InnerIntents = class sealed external 'android.provider' name 'Intents' (JLObject)
      public
        type
          InnerInsert = class;
          Arr1InnerInsert = array of InnerInsert;
          Arr2InnerInsert = array of Arr1InnerInsert;
          Arr3InnerInsert = array of Arr2InnerInsert;
          InnerInsert = class sealed external 'android.provider' name 'Insert' (JLObject)
          public
            const
              ACTION = 'android.intent.action.INSERT';
              COMPANY = 'company';
              DATA = 'data';
              EMAIL = 'email';
              EMAIL_ISPRIMARY = 'email_isprimary';
              EMAIL_TYPE = 'email_type';
              FULL_MODE = 'full_mode';
              IM_HANDLE = 'im_handle';
              IM_ISPRIMARY = 'im_isprimary';
              IM_PROTOCOL = 'im_protocol';
              JOB_TITLE = 'job_title';
              NAME = 'name';
              NOTES = 'notes';
              PHONE = 'phone';
              PHONETIC_NAME = 'phonetic_name';
              PHONE_ISPRIMARY = 'phone_isprimary';
              PHONE_TYPE = 'phone_type';
              POSTAL = 'postal';
              POSTAL_ISPRIMARY = 'postal_isprimary';
              POSTAL_TYPE = 'postal_type';
              SECONDARY_EMAIL = 'secondary_email';
              SECONDARY_EMAIL_TYPE = 'secondary_email_type';
              SECONDARY_PHONE = 'secondary_phone';
              SECONDARY_PHONE_TYPE = 'secondary_phone_type';
              TERTIARY_EMAIL = 'tertiary_email';
              TERTIARY_EMAIL_TYPE = 'tertiary_email_type';
              TERTIARY_PHONE = 'tertiary_phone';
              TERTIARY_PHONE_TYPE = 'tertiary_phone_type';
          public
            constructor create(); overload;
          end;

      public
        const
          ATTACH_IMAGE = 'com.android.contacts.action.ATTACH_IMAGE';
          CONTACTS_DATABASE_CREATED = 'android.provider.Contacts.DATABASE_CREATED';
          EXTRA_CREATE_DESCRIPTION = 'com.android.contacts.action.CREATE_DESCRIPTION';
          EXTRA_FORCE_CREATE = 'com.android.contacts.action.FORCE_CREATE';
          INVITE_CONTACT = 'com.android.contacts.action.INVITE_CONTACT';
          SEARCH_SUGGESTION_CLICKED = 'android.provider.Contacts.SEARCH_SUGGESTION_CLICKED';
          SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED = 'android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED';
          SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED = 'android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED';
          SHOW_OR_CREATE_CONTACT = 'com.android.contacts.action.SHOW_OR_CREATE_CONTACT';
      public
        constructor create(); overload;
      end;

      InnerDisplayPhoto = class sealed external 'android.provider' name 'DisplayPhoto' (JLObject)
      public
        final class var
          fCONTENT_MAX_DIMENSIONS_URI: ANUri; external name 'CONTENT_MAX_DIMENSIONS_URI';
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DISPLAY_MAX_DIM = 'display_max_dim';
          THUMBNAIL_MAX_DIM = 'thumbnail_max_dim';
      end;

      InnerQuickContact = class sealed external 'android.provider' name 'QuickContact' (JLObject)
      public
        const
          ACTION_QUICK_CONTACT = 'android.provider.action.QUICK_CONTACT';
          EXTRA_EXCLUDE_MIMES = 'android.provider.extra.EXCLUDE_MIMES';
          MODE_LARGE = 3;
          MODE_MEDIUM = 2;
          MODE_SMALL = 1;
      public
        constructor create(); overload;
        class procedure showQuickContact(para1: ACContext; para2: AVView; para3: ANUri; para4: jint; para5: Arr1JLString); static; overload;
        class procedure showQuickContact(para1: ACContext; para2: AVView; para3: ANUri; para4: jint; var para5: array of JLString); static; overload;
        class procedure showQuickContact(para1: ACContext; para2: AGRect; para3: ANUri; para4: jint; para5: Arr1JLString); static; overload;
        class procedure showQuickContact(para1: ACContext; para2: AGRect; para3: ANUri; para4: jint; var para5: array of JLString); static; overload;
      end;

      InnerPinnedPositions = class sealed external 'android.provider' name 'PinnedPositions' (JLObject)
      public
        const
          DEMOTED = -1;
          UNPINNED = 0;
      public
        constructor create(); overload;
        class procedure undemote(para1: ACContentResolver; para2: jlong); static; overload;
        class procedure pin(para1: ACContentResolver; para2: jlong; para3: jint); static; overload;
      end;

      InnerDataUsageFeedback = class sealed external 'android.provider' name 'DataUsageFeedback' (JLObject)
      public
        final class var
          fDELETE_USAGE_URI: ANUri; external name 'DELETE_USAGE_URI';
          fFEEDBACK_URI: ANUri; external name 'FEEDBACK_URI';
      public
        const
          USAGE_TYPE = 'type';
          USAGE_TYPE_CALL = 'call';
          USAGE_TYPE_LONG_TEXT = 'long_text';
          USAGE_TYPE_SHORT_TEXT = 'short_text';
      public
        constructor create(); overload;
      end;

      InnerSettingsColumns = interface external 'android.provider' name 'SettingsColumns' 
        const
          ACCOUNT_NAME = 'account_name';
          ACCOUNT_TYPE = 'account_type';
          ANY_UNSYNCED = 'any_unsynced';
          DATA_SET = 'data_set';
          SHOULD_SYNC = 'should_sync';
          UNGROUPED_COUNT = 'summ_count';
          UNGROUPED_VISIBLE = 'ungrouped_visible';
          UNGROUPED_WITH_PHONES = 'summ_phones';
      end;

      InnerGroupsColumns = interface external 'android.provider' name 'GroupsColumns' 
        const
          AUTO_ADD = 'auto_add';
          DATA_SET = 'data_set';
          DELETED = 'deleted';
          FAVORITES = 'favorites';
          GROUP_IS_READ_ONLY = 'group_is_read_only';
          GROUP_VISIBLE = 'group_visible';
          NOTES = 'notes';
          RES_PACKAGE = 'res_package';
          SHOULD_SYNC = 'should_sync';
          SUMMARY_COUNT = 'summ_count';
          SUMMARY_WITH_PHONES = 'summ_phones';
          SYSTEM_ID = 'system_id';
          TITLE = 'title';
          TITLE_RES = 'title_res';
      end;

      InnerSearchSnippets = class external 'android.provider' name 'SearchSnippets' (JLObject)
      public
        const
          DEFERRED_SNIPPETING_KEY = 'deferred_snippeting';
          SNIPPET = 'snippet';
      public
        constructor create(); overload;
      end;

      InnerPresenceColumns = interface external 'android.provider' name 'PresenceColumns' 
        const
          CUSTOM_PROTOCOL = 'custom_protocol';
          DATA_ID = 'presence_data_id';
          IM_ACCOUNT = 'im_account';
          IM_HANDLE = 'im_handle';
          PROTOCOL = 'protocol';
      end;

      InnerPhoneLookupColumns = interface external 'android.provider' name 'PhoneLookupColumns' 
        const
          &LABEL = 'label';
          NORMALIZED_NUMBER = 'normalized_number';
          NUMBER = 'number';
          &TYPE = 'type';
      end;

      InnerDataUsageStatColumns = interface external 'android.provider' name 'DataUsageStatColumns' 
        const
          LAST_TIME_USED = 'last_time_used';
          TIMES_USED = 'times_used';
      end;

      InnerDataColumns = interface external 'android.provider' name 'DataColumns' 
        const
          DATA1 = 'data1';
          DATA10 = 'data10';
          DATA11 = 'data11';
          DATA12 = 'data12';
          DATA13 = 'data13';
          DATA14 = 'data14';
          DATA15 = 'data15';
          DATA2 = 'data2';
          DATA3 = 'data3';
          DATA4 = 'data4';
          DATA5 = 'data5';
          DATA6 = 'data6';
          DATA7 = 'data7';
          DATA8 = 'data8';
          DATA9 = 'data9';
          DATA_VERSION = 'data_version';
          IS_PRIMARY = 'is_primary';
          IS_READ_ONLY = 'is_read_only';
          IS_SUPER_PRIMARY = 'is_super_primary';
          MIMETYPE = 'mimetype';
          RAW_CONTACT_ID = 'raw_contact_id';
          RES_PACKAGE = 'res_package';
          SYNC1 = 'data_sync1';
          SYNC2 = 'data_sync2';
          SYNC3 = 'data_sync3';
          SYNC4 = 'data_sync4';
      end;

      InnerStreamItemPhotosColumns = interface external 'android.provider' name 'StreamItemPhotosColumns' 
        const
          PHOTO_FILE_ID = 'photo_file_id' deprecated;
          PHOTO_URI = 'photo_uri' deprecated;
          SORT_INDEX = 'sort_index' deprecated;
          STREAM_ITEM_ID = 'stream_item_id' deprecated;
          SYNC1 = 'stream_item_photo_sync1' deprecated;
          SYNC2 = 'stream_item_photo_sync2' deprecated;
          SYNC3 = 'stream_item_photo_sync3' deprecated;
          SYNC4 = 'stream_item_photo_sync4' deprecated;
      end;

      InnerStreamItemsColumns = interface external 'android.provider' name 'StreamItemsColumns' 
        const
          ACCOUNT_NAME = 'account_name' deprecated;
          ACCOUNT_TYPE = 'account_type' deprecated;
          COMMENTS = 'comments' deprecated;
          CONTACT_ID = 'contact_id' deprecated;
          CONTACT_LOOKUP_KEY = 'contact_lookup' deprecated;
          DATA_SET = 'data_set' deprecated;
          RAW_CONTACT_ID = 'raw_contact_id' deprecated;
          RAW_CONTACT_SOURCE_ID = 'raw_contact_source_id' deprecated;
          RES_ICON = 'icon' deprecated;
          RES_LABEL = 'label' deprecated;
          RES_PACKAGE = 'res_package' deprecated;
          SYNC1 = 'stream_item_sync1' deprecated;
          SYNC2 = 'stream_item_sync2' deprecated;
          SYNC3 = 'stream_item_sync3' deprecated;
          SYNC4 = 'stream_item_sync4' deprecated;
          TEXT = 'text' deprecated;
          TIMESTAMP = 'timestamp' deprecated;
      end;

      InnerStatusColumns = interface external 'android.provider' name 'StatusColumns' 
        const
          AVAILABLE = 5;
          AWAY = 2;
          CAPABILITY_HAS_CAMERA = 4;
          CAPABILITY_HAS_VIDEO = 2;
          CAPABILITY_HAS_VOICE = 1;
          CHAT_CAPABILITY = 'chat_capability';
          DO_NOT_DISTURB = 4;
          IDLE = 3;
          INVISIBLE = 1;
          OFFLINE = 0;
          PRESENCE = 'mode';
          PRESENCE_CUSTOM_STATUS = 'status' deprecated;
          PRESENCE_STATUS = 'mode' deprecated;
          STATUS = 'status';
          STATUS_ICON = 'status_icon';
          STATUS_LABEL = 'status_label';
          STATUS_RES_PACKAGE = 'status_res_package';
          STATUS_TIMESTAMP = 'status_ts';
      end;

      InnerRawContactsColumns = interface external 'android.provider' name 'RawContactsColumns' 
        const
          ACCOUNT_TYPE_AND_DATA_SET = 'account_type_and_data_set';
          AGGREGATION_MODE = 'aggregation_mode';
          CONTACT_ID = 'contact_id';
          DATA_SET = 'data_set';
          DELETED = 'deleted';
          RAW_CONTACT_IS_READ_ONLY = 'raw_contact_is_read_only';
          RAW_CONTACT_IS_USER_PROFILE = 'raw_contact_is_user_profile';
      end;

      InnerDeletedContactsColumns = interface external 'android.provider' name 'DeletedContactsColumns' 
        const
          CONTACT_DELETED_TIMESTAMP = 'contact_deleted_timestamp';
          CONTACT_ID = 'contact_id';
      end;

      InnerContactNameColumns = interface external 'android.provider' name 'ContactNameColumns' 
        const
          DISPLAY_NAME_ALTERNATIVE = 'display_name_alt';
          DISPLAY_NAME_PRIMARY = 'display_name';
          DISPLAY_NAME_SOURCE = 'display_name_source';
          PHONETIC_NAME = 'phonetic_name';
          PHONETIC_NAME_STYLE = 'phonetic_name_style';
          SORT_KEY_ALTERNATIVE = 'sort_key_alt';
          SORT_KEY_PRIMARY = 'sort_key';
      end;

      InnerDisplayNameSources = interface external 'android.provider' name 'DisplayNameSources' 
        const
          EMAIL = 10;
          NICKNAME = 35;
          ORGANIZATION = 30;
          PHONE = 20;
          STRUCTURED_NAME = 40;
          UNDEFINED = 0;
      end;

      InnerPhoneticNameStyle = interface external 'android.provider' name 'PhoneticNameStyle' 
        const
          JAPANESE = 4;
          KOREAN = 5;
          PINYIN = 3;
          UNDEFINED = 0;
      end;

      InnerFullNameStyle = interface external 'android.provider' name 'FullNameStyle' 
        const
          CHINESE = 3;
          CJK = 2;
          JAPANESE = 4;
          KOREAN = 5;
          UNDEFINED = 0;
          WESTERN = 1;
      end;

      InnerContactStatusColumns = interface external 'android.provider' name 'ContactStatusColumns' 
        const
          CONTACT_CHAT_CAPABILITY = 'contact_chat_capability';
          CONTACT_PRESENCE = 'contact_presence';
          CONTACT_STATUS = 'contact_status';
          CONTACT_STATUS_ICON = 'contact_status_icon';
          CONTACT_STATUS_LABEL = 'contact_status_label';
          CONTACT_STATUS_RES_PACKAGE = 'contact_status_res_package';
          CONTACT_STATUS_TIMESTAMP = 'contact_status_ts';
      end;

      InnerContactsColumns = interface external 'android.provider' name 'ContactsColumns' 
        const
          CONTACT_LAST_UPDATED_TIMESTAMP = 'contact_last_updated_timestamp';
          DISPLAY_NAME = 'display_name';
          HAS_PHONE_NUMBER = 'has_phone_number';
          IN_DEFAULT_DIRECTORY = 'in_default_directory';
          IN_VISIBLE_GROUP = 'in_visible_group';
          IS_USER_PROFILE = 'is_user_profile';
          LOOKUP_KEY = 'lookup';
          NAME_RAW_CONTACT_ID = 'name_raw_contact_id';
          PHOTO_FILE_ID = 'photo_file_id';
          PHOTO_ID = 'photo_id';
          PHOTO_THUMBNAIL_URI = 'photo_thumb_uri';
          PHOTO_URI = 'photo_uri';
      end;

      InnerContactOptionsColumns = interface external 'android.provider' name 'ContactOptionsColumns' 
        const
          CUSTOM_RINGTONE = 'custom_ringtone';
          LAST_TIME_CONTACTED = 'last_time_contacted';
          PINNED = 'pinned';
          SEND_TO_VOICEMAIL = 'send_to_voicemail';
          STARRED = 'starred';
          TIMES_CONTACTED = 'times_contacted';
      end;

      InnerBaseSyncColumns = interface external 'android.provider' name 'BaseSyncColumns' 
        const
          SYNC1 = 'sync1';
          SYNC2 = 'sync2';
          SYNC3 = 'sync3';
          SYNC4 = 'sync4';
      end;

      InnerAggregationExceptions = class sealed external 'android.provider' name 'AggregationExceptions' (JLObject, APBaseColumns)
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/aggregation_exception';
          CONTENT_TYPE = 'vnd.android.cursor.dir/aggregation_exception';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          RAW_CONTACT_ID1 = 'raw_contact_id1';
          RAW_CONTACT_ID2 = 'raw_contact_id2';
          &TYPE = 'type';
          TYPE_AUTOMATIC = 0;
          TYPE_KEEP_SEPARATE = 2;
          TYPE_KEEP_TOGETHER = 1;
      end;

      InnerDirectory = class sealed external 'android.provider' name 'Directory' (JLObject, APBaseColumns)
      public
        const
          ACCOUNT_NAME = 'accountName';
          ACCOUNT_TYPE = 'accountType';
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/contact_directory';
          CONTENT_TYPE = 'vnd.android.cursor.dir/contact_directories';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DEFAULT = jlong(0);
          DIRECTORY_AUTHORITY = 'authority';
          DISPLAY_NAME = 'displayName';
          EXPORT_SUPPORT = 'exportSupport';
          EXPORT_SUPPORT_ANY_ACCOUNT = 2;
          EXPORT_SUPPORT_NONE = 0;
          EXPORT_SUPPORT_SAME_ACCOUNT_ONLY = 1;
          LOCAL_INVISIBLE = jlong(1);
          PACKAGE_NAME = 'packageName';
          PHOTO_SUPPORT = 'photoSupport';
          PHOTO_SUPPORT_FULL = 3;
          PHOTO_SUPPORT_FULL_SIZE_ONLY = 2;
          PHOTO_SUPPORT_NONE = 0;
          PHOTO_SUPPORT_THUMBNAIL_ONLY = 1;
          SHORTCUT_SUPPORT = 'shortcutSupport';
          SHORTCUT_SUPPORT_DATA_ITEMS_ONLY = 1;
          SHORTCUT_SUPPORT_FULL = 2;
          SHORTCUT_SUPPORT_NONE = 0;
          TYPE_RESOURCE_ID = 'typeResourceId';
      public
        class procedure notifyDirectoryChange(para1: ACContentResolver); static; overload;
      end;

      InnerProfileSyncState = class sealed external 'android.provider' name 'ProfileSyncState' (JLObject, APSyncStateContract.InnerColumns)
      public
        const
          CONTENT_DIRECTORY = 'syncstate';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function get(para1: ACContentProviderClient; para2: AAAccount): Arr1jbyte; static; overload;  // throws android.os.RemoteException
        class function getWithUri(para1: ACContentProviderClient; para2: AAAccount): AUPair; static; overload;  // throws android.os.RemoteException
        class procedure &set(para1: ACContentProviderClient; para2: AAAccount; para3: Arr1jbyte); static; overload;  // throws android.os.RemoteException
        class procedure &set(para1: ACContentProviderClient; para2: AAAccount; var para3: array of jbyte); static; overload;  // throws android.os.RemoteException
        class function newSetOperation(para1: AAAccount; para2: Arr1jbyte): ACContentProviderOperation; static; overload;
        class function newSetOperation(para1: AAAccount; var para2: array of jbyte): ACContentProviderOperation; static; overload;
      end;

      InnerSyncState = class sealed external 'android.provider' name 'SyncState' (JLObject, APSyncStateContract.InnerColumns)
      public
        const
          CONTENT_DIRECTORY = 'syncstate';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function get(para1: ACContentProviderClient; para2: AAAccount): Arr1jbyte; static; overload;  // throws android.os.RemoteException
        class function getWithUri(para1: ACContentProviderClient; para2: AAAccount): AUPair; static; overload;  // throws android.os.RemoteException
        class procedure &set(para1: ACContentProviderClient; para2: AAAccount; para3: Arr1jbyte); static; overload;  // throws android.os.RemoteException
        class procedure &set(para1: ACContentProviderClient; para2: AAAccount; var para3: array of jbyte); static; overload;  // throws android.os.RemoteException
        class function newSetOperation(para1: AAAccount; para2: Arr1jbyte): ACContentProviderOperation; static; overload;
        class function newSetOperation(para1: AAAccount; var para2: array of jbyte): ACContentProviderOperation; static; overload;
      end;

      InnerSettings = class sealed external 'android.provider' name 'Settings' (JLObject, APContactsContract.InnerSettingsColumns)
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/setting';
          CONTENT_TYPE = 'vnd.android.cursor.dir/setting';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      end;

      InnerStreamItemPhotos = class sealed external 'android.provider' name 'StreamItemPhotos' (JLObject, APBaseColumns, APContactsContract.InnerStreamItemPhotosColumns)
      public
        const
          PHOTO = 'photo' deprecated;
      end;

      InnerStreamItems = class sealed external 'android.provider' name 'StreamItems' (JLObject, APBaseColumns, APContactsContract.InnerStreamItemsColumns)
      public
        type
          InnerStreamItemPhotos = class;
          Arr1InnerStreamItemPhotos = array of InnerStreamItemPhotos;
          Arr2InnerStreamItemPhotos = array of Arr1InnerStreamItemPhotos;
          Arr3InnerStreamItemPhotos = array of Arr2InnerStreamItemPhotos;
          InnerStreamItemPhotos = class sealed external 'android.provider' name 'StreamItemPhotos' (JLObject, APBaseColumns, APContactsContract.InnerStreamItemPhotosColumns)
          public
            const
              CONTENT_DIRECTORY = 'photo' deprecated;
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/stream_item_photo' deprecated;
              CONTENT_TYPE = 'vnd.android.cursor.dir/stream_item_photo' deprecated;
          end;

      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/stream_item' deprecated;
      public
        final class var
          fCONTENT_LIMIT_URI: ANUri deprecated; external name 'CONTENT_LIMIT_URI';
          fCONTENT_PHOTO_URI: ANUri deprecated; external name 'CONTENT_PHOTO_URI';
      public
        const
          CONTENT_TYPE = 'vnd.android.cursor.dir/stream_item' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          MAX_ITEMS = 'max_items' deprecated;
      end;

      InnerStatusUpdates = class external 'android.provider' name 'StatusUpdates' (JLObject, APContactsContract.InnerStatusColumns, APContactsContract.InnerPresenceColumns)
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/status-update';
          CONTENT_TYPE = 'vnd.android.cursor.dir/status-update';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          fPROFILE_CONTENT_URI: ANUri; external name 'PROFILE_CONTENT_URI';
      public
        class function getPresenceIconResourceId(para1: jint): jint; static; overload; final;
        class function getPresencePrecedence(para1: jint): jint; static; overload; final;
      end;

      InnerRawContactsEntity = class sealed external 'android.provider' name 'RawContactsEntity' (JLObject, APBaseColumns, APContactsContract.InnerDataColumns, APContactsContract.InnerRawContactsColumns)
      public
        const
          CONTENT_TYPE = 'vnd.android.cursor.dir/raw_contact_entity';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DATA_ID = 'data_id';
      public
        final class var
          fPROFILE_CONTENT_URI: ANUri; external name 'PROFILE_CONTENT_URI';
      end;

      InnerDeletedContacts = class sealed external 'android.provider' name 'DeletedContacts' (JLObject, APContactsContract.InnerDeletedContactsColumns)
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DAYS_KEPT_MILLISECONDS = jlong(2592000000);
      end;

      InnerPhoneLookup = class sealed external 'android.provider' name 'PhoneLookup' (JLObject, APBaseColumns, APContactsContract.InnerPhoneLookupColumns, APContactsContract.InnerContactsColumns, APContactsContract.InnerContactOptionsColumns)
      public
        final class var
          fCONTENT_FILTER_URI: ANUri; external name 'CONTENT_FILTER_URI';
          fENTERPRISE_CONTENT_FILTER_URI: ANUri; external name 'ENTERPRISE_CONTENT_FILTER_URI';
      public
        const
          QUERY_PARAMETER_SIP_ADDRESS = 'sip';
      end;

      InnerDataColumnsWithJoins = interface external 'android.provider' name 'DataColumnsWithJoins' (APBaseColumns, APContactsContract.InnerDataColumns, APContactsContract.InnerStatusColumns, APContactsContract.InnerRawContactsColumns, APContactsContract.InnerContactsColumns, APContactsContract.InnerContactNameColumns, APContactsContract.InnerContactOptionsColumns, APContactsContract.InnerContactStatusColumns, APContactsContract.InnerDataUsageStatColumns)
      end;

      InnerProfile = class sealed external 'android.provider' name 'Profile' (JLObject, APBaseColumns, APContactsContract.InnerContactsColumns, APContactsContract.InnerContactOptionsColumns, APContactsContract.InnerContactNameColumns, APContactsContract.InnerContactStatusColumns)
      public
        final class var
          fCONTENT_RAW_CONTACTS_URI: ANUri; external name 'CONTENT_RAW_CONTACTS_URI';
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          fCONTENT_VCARD_URI: ANUri; external name 'CONTENT_VCARD_URI';
      public
        const
          MIN_ID = jlong(9223372034707292160);
      end;

      InnerSyncColumns = interface external 'android.provider' name 'SyncColumns' (APContactsContract.InnerBaseSyncColumns)
        const
          ACCOUNT_NAME = 'account_name';
          ACCOUNT_TYPE = 'account_type';
          DIRTY = 'dirty';
          SOURCE_ID = 'sourceid';
          VERSION = 'version';
      end;

      InnerPresence = class sealed external 'android.provider' name 'Presence' (InnerStatusUpdates)
      public
        constructor create(); overload;
      end;

      InnerCommonDataKinds = class sealed external 'android.provider' name 'CommonDataKinds' (JLObject)
      public
        type
          InnerBaseTypes = interface;
          Arr1InnerBaseTypes = array of InnerBaseTypes;
          Arr2InnerBaseTypes = array of Arr1InnerBaseTypes;
          Arr3InnerBaseTypes = array of Arr2InnerBaseTypes;
          InnerIdentity = class;
          Arr1InnerIdentity = array of InnerIdentity;
          Arr2InnerIdentity = array of Arr1InnerIdentity;
          Arr3InnerIdentity = array of Arr2InnerIdentity;
          InnerGroupMembership = class;
          Arr1InnerGroupMembership = array of InnerGroupMembership;
          Arr2InnerGroupMembership = array of Arr1InnerGroupMembership;
          Arr3InnerGroupMembership = array of Arr2InnerGroupMembership;
          InnerNote = class;
          Arr1InnerNote = array of InnerNote;
          Arr2InnerNote = array of Arr1InnerNote;
          Arr3InnerNote = array of Arr2InnerNote;
          InnerPhoto = class;
          Arr1InnerPhoto = array of InnerPhoto;
          Arr2InnerPhoto = array of Arr1InnerPhoto;
          Arr3InnerPhoto = array of Arr2InnerPhoto;
          InnerStructuredName = class;
          Arr1InnerStructuredName = array of InnerStructuredName;
          Arr2InnerStructuredName = array of Arr1InnerStructuredName;
          Arr3InnerStructuredName = array of Arr2InnerStructuredName;
          InnerCommonColumns = interface;
          Arr1InnerCommonColumns = array of InnerCommonColumns;
          Arr2InnerCommonColumns = array of Arr1InnerCommonColumns;
          Arr3InnerCommonColumns = array of Arr2InnerCommonColumns;
          InnerContactables = class;
          Arr1InnerContactables = array of InnerContactables;
          Arr2InnerContactables = array of Arr1InnerContactables;
          Arr3InnerContactables = array of Arr2InnerContactables;
          InnerCallable = class;
          Arr1InnerCallable = array of InnerCallable;
          Arr2InnerCallable = array of Arr1InnerCallable;
          Arr3InnerCallable = array of Arr2InnerCallable;
          InnerSipAddress = class;
          Arr1InnerSipAddress = array of InnerSipAddress;
          Arr2InnerSipAddress = array of Arr1InnerSipAddress;
          Arr3InnerSipAddress = array of Arr2InnerSipAddress;
          InnerWebsite = class;
          Arr1InnerWebsite = array of InnerWebsite;
          Arr2InnerWebsite = array of Arr1InnerWebsite;
          Arr3InnerWebsite = array of Arr2InnerWebsite;
          InnerEvent = class;
          Arr1InnerEvent = array of InnerEvent;
          Arr2InnerEvent = array of Arr1InnerEvent;
          Arr3InnerEvent = array of Arr2InnerEvent;
          InnerRelation = class;
          Arr1InnerRelation = array of InnerRelation;
          Arr2InnerRelation = array of Arr1InnerRelation;
          Arr3InnerRelation = array of Arr2InnerRelation;
          InnerOrganization = class;
          Arr1InnerOrganization = array of InnerOrganization;
          Arr2InnerOrganization = array of Arr1InnerOrganization;
          Arr3InnerOrganization = array of Arr2InnerOrganization;
          InnerIm = class;
          Arr1InnerIm = array of InnerIm;
          Arr2InnerIm = array of Arr1InnerIm;
          Arr3InnerIm = array of Arr2InnerIm;
          InnerStructuredPostal = class;
          Arr1InnerStructuredPostal = array of InnerStructuredPostal;
          Arr2InnerStructuredPostal = array of Arr1InnerStructuredPostal;
          Arr3InnerStructuredPostal = array of Arr2InnerStructuredPostal;
          InnerEmail = class;
          Arr1InnerEmail = array of InnerEmail;
          Arr2InnerEmail = array of Arr1InnerEmail;
          Arr3InnerEmail = array of Arr2InnerEmail;
          InnerPhone = class;
          Arr1InnerPhone = array of InnerPhone;
          Arr2InnerPhone = array of Arr1InnerPhone;
          Arr3InnerPhone = array of Arr2InnerPhone;
          InnerNickname = class;
          Arr1InnerNickname = array of InnerNickname;
          Arr2InnerNickname = array of Arr1InnerNickname;
          Arr3InnerNickname = array of Arr2InnerNickname;
          InnerBaseTypes = interface external 'android.provider' name 'BaseTypes' 
            const
              TYPE_CUSTOM = 0;
          end;

          InnerIdentity = class sealed external 'android.provider' name 'Identity' (JLObject, APContactsContract.InnerDataColumnsWithJoins)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/identity';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              IDENTITY = 'data1';
              NAMESPACE = 'data2';
          end;

          InnerGroupMembership = class sealed external 'android.provider' name 'GroupMembership' (JLObject, APContactsContract.InnerDataColumnsWithJoins)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/group_membership';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              GROUP_ROW_ID = 'data1';
              GROUP_SOURCE_ID = 'group_sourceid';
          end;

          InnerNote = class sealed external 'android.provider' name 'Note' (JLObject, APContactsContract.InnerDataColumnsWithJoins)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/note';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              NOTE = 'data1';
          end;

          InnerPhoto = class sealed external 'android.provider' name 'Photo' (JLObject, APContactsContract.InnerDataColumnsWithJoins)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/photo';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              PHOTO = 'data15';
              PHOTO_FILE_ID = 'data14';
          end;

          InnerStructuredName = class sealed external 'android.provider' name 'StructuredName' (JLObject, APContactsContract.InnerDataColumnsWithJoins)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/name';
              DISPLAY_NAME = 'data1';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              FAMILY_NAME = 'data3';
              FULL_NAME_STYLE = 'data10';
              GIVEN_NAME = 'data2';
              MIDDLE_NAME = 'data5';
              PHONETIC_FAMILY_NAME = 'data9';
              PHONETIC_GIVEN_NAME = 'data7';
              PHONETIC_MIDDLE_NAME = 'data8';
              PREFIX = 'data4';
              SUFFIX = 'data6';
          end;

          InnerCommonColumns = interface external 'android.provider' name 'CommonColumns' (APContactsContract.InnerCommonDataKinds.InnerBaseTypes)
            const
              DATA = 'data1';
              &LABEL = 'data3';
              &TYPE = 'data2';
          end;

          InnerContactables = class sealed external 'android.provider' name 'Contactables' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            final class var
              fCONTENT_FILTER_URI: ANUri; external name 'CONTENT_FILTER_URI';
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              VISIBLE_CONTACTS_ONLY = 'visible_contacts_only';
          public
            constructor create(); overload;
          end;

          InnerCallable = class sealed external 'android.provider' name 'Callable' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            final class var
              fCONTENT_FILTER_URI: ANUri; external name 'CONTENT_FILTER_URI';
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
          public
            constructor create(); overload;
          end;

          InnerSipAddress = class sealed external 'android.provider' name 'SipAddress' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/sip_address';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              SIP_ADDRESS = 'data1';
              TYPE_HOME = 1;
              TYPE_OTHER = 3;
              TYPE_WORK = 2;
          public
            class function getTypeLabelResource(para1: jint): jint; static; overload; final;
            class function getTypeLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
          end;

          InnerWebsite = class sealed external 'android.provider' name 'Website' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/website';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              TYPE_BLOG = 2;
              TYPE_FTP = 6;
              TYPE_HOME = 4;
              TYPE_HOMEPAGE = 1;
              TYPE_OTHER = 7;
              TYPE_PROFILE = 3;
              TYPE_WORK = 5;
              URL = 'data1';
          end;

          InnerEvent = class sealed external 'android.provider' name 'Event' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/contact_event';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              START_DATE = 'data1';
              TYPE_ANNIVERSARY = 1;
              TYPE_BIRTHDAY = 3;
              TYPE_OTHER = 2;
          public
            class function getTypeResource(para1: JLInteger): jint; static; overload;
            class function getTypeLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
          end;

          InnerRelation = class sealed external 'android.provider' name 'Relation' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/relation';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              NAME = 'data1';
              TYPE_ASSISTANT = 1;
              TYPE_BROTHER = 2;
              TYPE_CHILD = 3;
              TYPE_DOMESTIC_PARTNER = 4;
              TYPE_FATHER = 5;
              TYPE_FRIEND = 6;
              TYPE_MANAGER = 7;
              TYPE_MOTHER = 8;
              TYPE_PARENT = 9;
              TYPE_PARTNER = 10;
              TYPE_REFERRED_BY = 11;
              TYPE_RELATIVE = 12;
              TYPE_SISTER = 13;
              TYPE_SPOUSE = 14;
          public
            class function getTypeLabelResource(para1: jint): jint; static; overload; final;
            class function getTypeLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
          end;

          InnerOrganization = class sealed external 'android.provider' name 'Organization' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              COMPANY = 'data1';
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/organization';
              DEPARTMENT = 'data5';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              JOB_DESCRIPTION = 'data6';
              OFFICE_LOCATION = 'data9';
              PHONETIC_NAME = 'data8';
              SYMBOL = 'data7';
              TITLE = 'data4';
              TYPE_OTHER = 2;
              TYPE_WORK = 1;
          public
            class function getTypeLabelResource(para1: jint): jint; static; overload; final;
            class function getTypeLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
          end;

          InnerIm = class sealed external 'android.provider' name 'Im' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/im';
              CUSTOM_PROTOCOL = 'data6';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              PROTOCOL = 'data5';
              PROTOCOL_AIM = 0;
              PROTOCOL_CUSTOM = -1;
              PROTOCOL_GOOGLE_TALK = 5;
              PROTOCOL_ICQ = 6;
              PROTOCOL_JABBER = 7;
              PROTOCOL_MSN = 1;
              PROTOCOL_NETMEETING = 8;
              PROTOCOL_QQ = 4;
              PROTOCOL_SKYPE = 3;
              PROTOCOL_YAHOO = 2;
              TYPE_HOME = 1;
              TYPE_OTHER = 3;
              TYPE_WORK = 2;
          public
            class function getTypeLabelResource(para1: jint): jint; static; overload; final;
            class function getTypeLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
            class function getProtocolLabelResource(para1: jint): jint; static; overload; final;
            class function getProtocolLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
          end;

          InnerStructuredPostal = class sealed external 'android.provider' name 'StructuredPostal' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              CITY = 'data7';
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/postal-address_v2';
              CONTENT_TYPE = 'vnd.android.cursor.dir/postal-address_v2';
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              COUNTRY = 'data10';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              FORMATTED_ADDRESS = 'data1';
              NEIGHBORHOOD = 'data6';
              POBOX = 'data5';
              POSTCODE = 'data9';
              REGION = 'data8';
              STREET = 'data4';
              TYPE_HOME = 1;
              TYPE_OTHER = 3;
              TYPE_WORK = 2;
          public
            class function getTypeLabelResource(para1: jint): jint; static; overload; final;
            class function getTypeLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
          end;

          InnerEmail = class sealed external 'android.provider' name 'Email' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              ADDRESS = 'data1';
          public
            final class var
              fCONTENT_FILTER_URI: ANUri; external name 'CONTENT_FILTER_URI';
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/email_v2';
          public
            final class var
              fCONTENT_LOOKUP_URI: ANUri; external name 'CONTENT_LOOKUP_URI';
          public
            const
              CONTENT_TYPE = 'vnd.android.cursor.dir/email_v2';
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DISPLAY_NAME = 'data4';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              TYPE_HOME = 1;
              TYPE_MOBILE = 4;
              TYPE_OTHER = 3;
              TYPE_WORK = 2;
          public
            class function getTypeLabelResource(para1: jint): jint; static; overload; final;
            class function getTypeLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
          end;

          InnerPhone = class sealed external 'android.provider' name 'Phone' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            final class var
              fCONTENT_FILTER_URI: ANUri; external name 'CONTENT_FILTER_URI';
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/phone_v2';
              CONTENT_TYPE = 'vnd.android.cursor.dir/phone_v2';
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              NORMALIZED_NUMBER = 'data4';
              NUMBER = 'data1';
              SEARCH_DISPLAY_NAME_KEY = 'search_display_name';
              SEARCH_PHONE_NUMBER_KEY = 'search_phone_number';
              TYPE_ASSISTANT = 19;
              TYPE_CALLBACK = 8;
              TYPE_CAR = 9;
              TYPE_COMPANY_MAIN = 10;
              TYPE_FAX_HOME = 5;
              TYPE_FAX_WORK = 4;
              TYPE_HOME = 1;
              TYPE_ISDN = 11;
              TYPE_MAIN = 12;
              TYPE_MMS = 20;
              TYPE_MOBILE = 2;
              TYPE_OTHER = 7;
              TYPE_OTHER_FAX = 13;
              TYPE_PAGER = 6;
              TYPE_RADIO = 14;
              TYPE_TELEX = 15;
              TYPE_TTY_TDD = 16;
              TYPE_WORK = 3;
              TYPE_WORK_MOBILE = 17;
              TYPE_WORK_PAGER = 18;
          public
            class function getTypeLabelResource(para1: jint): jint; static; overload; final;
            class function getTypeLabel(para1: ACRResources; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
          end;

          InnerNickname = class sealed external 'android.provider' name 'Nickname' (JLObject, APContactsContract.InnerDataColumnsWithJoins, APContactsContract.InnerCommonDataKinds.InnerCommonColumns)
          public
            const
              CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/nickname';
              EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
              EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
              EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
              NAME = 'data1';
              TYPE_DEFAULT = 1;
              TYPE_INITIALS = 5;
              TYPE_MAIDEN_NAME = 3;
              TYPE_MAINDEN_NAME = 3 deprecated;
              TYPE_OTHER_NAME = 2;
              TYPE_SHORT_NAME = 4;
          end;

      end;

      InnerData = class sealed external 'android.provider' name 'Data' (JLObject, APContactsContract.InnerDataColumnsWithJoins)
      public
        const
          CONTENT_TYPE = 'vnd.android.cursor.dir/data';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
          EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
          EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
          VISIBLE_CONTACTS_ONLY = 'visible_contacts_only';
      public
        class function getContactLookupUri(para1: ACContentResolver; para2: ANUri): ANUri; static; overload;
      end;

      InnerGroups = class sealed external 'android.provider' name 'Groups' (JLObject, APBaseColumns, APContactsContract.InnerGroupsColumns, APContactsContract.InnerSyncColumns)
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/group';
      public
        final class var
          fCONTENT_SUMMARY_URI: ANUri; external name 'CONTENT_SUMMARY_URI';
      public
        const
          CONTENT_TYPE = 'vnd.android.cursor.dir/group';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function newEntityIterator(para1: ADCursor): ACEntityIterator; static; overload;
      end;

      InnerRawContacts = class sealed external 'android.provider' name 'RawContacts' (JLObject, APBaseColumns, APContactsContract.InnerRawContactsColumns, APContactsContract.InnerContactOptionsColumns, APContactsContract.InnerContactNameColumns, APContactsContract.InnerSyncColumns)
      public
        type
          InnerDisplayPhoto = class;
          Arr1InnerDisplayPhoto = array of InnerDisplayPhoto;
          Arr2InnerDisplayPhoto = array of Arr1InnerDisplayPhoto;
          Arr3InnerDisplayPhoto = array of Arr2InnerDisplayPhoto;
          InnerStreamItems = class;
          Arr1InnerStreamItems = array of InnerStreamItems;
          Arr2InnerStreamItems = array of Arr1InnerStreamItems;
          Arr3InnerStreamItems = array of Arr2InnerStreamItems;
          InnerEntity = class;
          Arr1InnerEntity = array of InnerEntity;
          Arr2InnerEntity = array of Arr1InnerEntity;
          Arr3InnerEntity = array of Arr2InnerEntity;
          InnerData = class;
          Arr1InnerData = array of InnerData;
          Arr2InnerData = array of Arr1InnerData;
          Arr3InnerData = array of Arr2InnerData;
          InnerDisplayPhoto = class sealed external 'android.provider' name 'DisplayPhoto' (JLObject)
          public
            const
              CONTENT_DIRECTORY = 'display_photo';
          end;

          InnerStreamItems = class sealed external 'android.provider' name 'StreamItems' (JLObject, APBaseColumns, APContactsContract.InnerStreamItemsColumns)
          public
            const
              CONTENT_DIRECTORY = 'stream_items' deprecated;
          end;

          InnerEntity = class sealed external 'android.provider' name 'Entity' (JLObject, APBaseColumns, APContactsContract.InnerDataColumns)
          public
            const
              CONTENT_DIRECTORY = 'entity';
              DATA_ID = 'data_id';
          end;

          InnerData = class sealed external 'android.provider' name 'Data' (JLObject, APBaseColumns, APContactsContract.InnerDataColumns)
          public
            const
              CONTENT_DIRECTORY = 'data';
          end;

      public
        const
          AGGREGATION_MODE_DEFAULT = 0;
          AGGREGATION_MODE_DISABLED = 3;
          AGGREGATION_MODE_IMMEDIATE = 1 deprecated;
          AGGREGATION_MODE_SUSPENDED = 2;
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/raw_contact';
          CONTENT_TYPE = 'vnd.android.cursor.dir/raw_contact';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        class function getContactLookupUri(para1: ACContentResolver; para2: ANUri): ANUri; static; overload;
        class function newEntityIterator(para1: ADCursor): ACEntityIterator; static; overload;
      end;

      InnerContacts = class external 'android.provider' name 'Contacts' (JLObject, APBaseColumns, APContactsContract.InnerContactsColumns, APContactsContract.InnerContactOptionsColumns, APContactsContract.InnerContactNameColumns, APContactsContract.InnerContactStatusColumns)
      public
        type
          InnerPhoto = class;
          Arr1InnerPhoto = array of InnerPhoto;
          Arr2InnerPhoto = array of Arr1InnerPhoto;
          Arr3InnerPhoto = array of Arr2InnerPhoto;
          InnerStreamItems = class;
          Arr1InnerStreamItems = array of InnerStreamItems;
          Arr2InnerStreamItems = array of Arr1InnerStreamItems;
          Arr3InnerStreamItems = array of Arr2InnerStreamItems;
          InnerData = class;
          Arr1InnerData = array of InnerData;
          Arr2InnerData = array of Arr1InnerData;
          Arr3InnerData = array of Arr2InnerData;
          InnerAggregationSuggestions = class;
          Arr1InnerAggregationSuggestions = array of InnerAggregationSuggestions;
          Arr2InnerAggregationSuggestions = array of Arr1InnerAggregationSuggestions;
          Arr3InnerAggregationSuggestions = array of Arr2InnerAggregationSuggestions;
          InnerEntity = class;
          Arr1InnerEntity = array of InnerEntity;
          Arr2InnerEntity = array of Arr1InnerEntity;
          Arr3InnerEntity = array of Arr2InnerEntity;
          InnerPhoto = class sealed external 'android.provider' name 'Photo' (JLObject, APBaseColumns, APContactsContract.InnerDataColumnsWithJoins)
          public
            const
              CONTENT_DIRECTORY = 'photo';
              DISPLAY_PHOTO = 'display_photo';
              PHOTO = 'data15';
              PHOTO_FILE_ID = 'data14';
          end;

          InnerStreamItems = class sealed external 'android.provider' name 'StreamItems' (JLObject, APContactsContract.InnerStreamItemsColumns)
          public
            const
              CONTENT_DIRECTORY = 'stream_items' deprecated;
          end;

          InnerData = class sealed external 'android.provider' name 'Data' (JLObject, APBaseColumns, APContactsContract.InnerDataColumns)
          public
            const
              CONTENT_DIRECTORY = 'data';
          end;

          InnerAggregationSuggestions = class sealed external 'android.provider' name 'AggregationSuggestions' (JLObject, APBaseColumns, APContactsContract.InnerContactsColumns, APContactsContract.InnerContactOptionsColumns, APContactsContract.InnerContactStatusColumns)
          public
            const
              CONTENT_DIRECTORY = 'suggestions';
          end;

          InnerEntity = class sealed external 'android.provider' name 'Entity' (JLObject, APBaseColumns, APContactsContract.InnerContactsColumns, APContactsContract.InnerContactNameColumns, APContactsContract.InnerRawContactsColumns, APContactsContract.InnerBaseSyncColumns, APContactsContract.InnerSyncColumns, APContactsContract.InnerDataColumns, APContactsContract.InnerStatusColumns, APContactsContract.InnerContactOptionsColumns, APContactsContract.InnerContactStatusColumns, APContactsContract.InnerDataUsageStatColumns)
          public
            const
              CONTENT_DIRECTORY = 'entities';
              DATA_ID = 'data_id';
              RAW_CONTACT_ID = 'raw_contact_id';
          end;

      public
        final class var
          fCONTENT_FILTER_URI: ANUri; external name 'CONTENT_FILTER_URI';
          fCONTENT_FREQUENT_URI: ANUri; external name 'CONTENT_FREQUENT_URI';
          fCONTENT_GROUP_URI: ANUri; external name 'CONTENT_GROUP_URI';
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/contact';
      public
        final class var
          fCONTENT_LOOKUP_URI: ANUri; external name 'CONTENT_LOOKUP_URI';
          fCONTENT_MULTI_VCARD_URI: ANUri; external name 'CONTENT_MULTI_VCARD_URI';
          fCONTENT_STREQUENT_FILTER_URI: ANUri; external name 'CONTENT_STREQUENT_FILTER_URI';
          fCONTENT_STREQUENT_URI: ANUri; external name 'CONTENT_STREQUENT_URI';
      public
        const
          CONTENT_TYPE = 'vnd.android.cursor.dir/contact';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          CONTENT_VCARD_TYPE = 'text/x-vcard';
      public
        final class var
          fCONTENT_VCARD_URI: ANUri; external name 'CONTENT_VCARD_URI';
      public
        const
          EXTRA_ADDRESS_BOOK_INDEX = 'android.provider.extra.ADDRESS_BOOK_INDEX';
          EXTRA_ADDRESS_BOOK_INDEX_COUNTS = 'android.provider.extra.ADDRESS_BOOK_INDEX_COUNTS';
          EXTRA_ADDRESS_BOOK_INDEX_TITLES = 'android.provider.extra.ADDRESS_BOOK_INDEX_TITLES';
      public
        class function getLookupUri(para1: ACContentResolver; para2: ANUri): ANUri; static; overload;
        class function getLookupUri(para1: jlong; para2: JLString): ANUri; static; overload;
        class function lookupContact(para1: ACContentResolver; para2: ANUri): ANUri; static; overload;
        class procedure markAsContacted(para1: ACContentResolver; para2: jlong); static; overload;
        class function isEnterpriseContactId(para1: jlong): jboolean; static; overload;
        class function openContactPhotoInputStream(para1: ACContentResolver; para2: ANUri; para3: jboolean): JIInputStream; static; overload;
        class function openContactPhotoInputStream(para1: ACContentResolver; para2: ANUri): JIInputStream; static; overload;
      end;

  public
    const
      AUTHORITY = 'com.android.contacts';
  public
    final class var
      fAUTHORITY_URI: ANUri; external name 'AUTHORITY_URI';
  public
    const
      CALLER_IS_SYNCADAPTER = 'caller_is_syncadapter';
      DEFERRED_SNIPPETING = 'deferred_snippeting';
      DEFERRED_SNIPPETING_QUERY = 'deferred_snippeting_query';
      DIRECTORY_PARAM_KEY = 'directory';
      LIMIT_PARAM_KEY = 'limit';
      PRIMARY_ACCOUNT_NAME = 'name_for_primary_account';
      PRIMARY_ACCOUNT_TYPE = 'type_for_primary_account';
      REMOVE_DUPLICATE_ENTRIES = 'remove_duplicate_entries';
      STREQUENT_PHONE_ONLY = 'strequent_phone_only';
  public
    constructor create(); overload;
    class function isProfileId(para1: jlong): jboolean; static; overload;
  end;

  ARScriptC = class external 'android.renderscript' name 'ScriptC' (ARScript)
  strict protected
    constructor create(para1: jint; para2: ARRenderScript); overload;
    constructor create(para1: jlong; para2: ARRenderScript); overload;
    constructor create(para1: ARRenderScript; para2: ACRResources; para3: jint); overload;
    constructor create(para1: ARRenderScript; para2: JLString; para3: Arr1jbyte; para4: Arr1jbyte); overload;
    constructor create(para1: ARRenderScript; para2: JLString; const para3: array of jbyte; const para4: array of jbyte); overload;
  end;

  ARAllocationAdapter = class external 'android.renderscript' name 'AllocationAdapter' (ARAllocation)
  public
    procedure setLOD(para1: jint); overload; virtual;
    procedure setFace(para1: ARType.InnerCubemapFace); overload; virtual;
    procedure setY(para1: jint); overload; virtual;
    procedure setZ(para1: jint); overload; virtual;
    class function create1D(para1: ARRenderScript; para2: ARAllocation): ARAllocationAdapter; static; overload;
    class function create2D(para1: ARRenderScript; para2: ARAllocation): ARAllocationAdapter; static; overload;
    procedure resize(para1: jint); overload; virtual;
  end;

  ATPhoneNumberFormattingTextWatcher = class external 'android.telephony' name 'PhoneNumberFormattingTextWatcher' (JLObject, ATTextWatcher)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    procedure beforeTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure afterTextChanged(para1: ATEditable); overload; virtual;
  end;

  ATMPasswordTransformationMethod = class external 'android.text.method' name 'PasswordTransformationMethod' (JLObject, ATMTransformationMethod, ATTextWatcher)
  public
    constructor create(); overload;
    function getTransformation(para1: JLCharSequence; para2: AVView): JLCharSequence; overload; virtual;
    class function getInstance(): ATMPasswordTransformationMethod; static; overload;
    procedure beforeTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure afterTextChanged(para1: ATEditable); overload; virtual;
    procedure onFocusChanged(para1: AVView; para2: JLCharSequence; para3: jboolean; para4: jint; para5: AGRect); overload; virtual;
  end;

  ATMNumberKeyListener = class abstract external 'android.text.method' name 'NumberKeyListener' (ATMBaseKeyListener, ATInputFilter)
  public
    constructor create(); overload;
  strict protected
    function getAcceptedChars(): Arr1jchar; overload; virtual; abstract;
    function lookup(para1: AVKeyEvent; para2: ATSpannable): jint; overload; virtual;
  public
    function filter(para1: JLCharSequence; para2: jint; para3: jint; para4: ATSpanned; para5: jint; para6: jint): JLCharSequence; overload; virtual;
  strict protected
    class function ok(para1: Arr1jchar; para2: jchar): jboolean; static; overload;
    class function ok(var para1: array of jchar; para2: jchar): jboolean; static; overload;
  public
    function onKeyDown(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
  end;

  ATMTextKeyListener = class external 'android.text.method' name 'TextKeyListener' (ATMBaseKeyListener, ATSpanWatcher)
  public
    type
      InnerCapitalize = class;
      Arr1InnerCapitalize = array of InnerCapitalize;
      Arr2InnerCapitalize = array of Arr1InnerCapitalize;
      Arr3InnerCapitalize = array of Arr2InnerCapitalize;
      InnerCapitalize = class sealed external 'android.text.method' name 'Capitalize' (JLEnum)
      public
        final class var
          fCHARACTERS: ATMTextKeyListener.InnerCapitalize; external name 'CHARACTERS';
          fNONE: ATMTextKeyListener.InnerCapitalize; external name 'NONE';
          fSENTENCES: ATMTextKeyListener.InnerCapitalize; external name 'SENTENCES';
          fWORDS: ATMTextKeyListener.InnerCapitalize; external name 'WORDS';
      public
        class function values(): ATMTextKeyListener.Arr1InnerCapitalize; static; overload;
        class function valueOf(para1: JLString): ATMTextKeyListener.InnerCapitalize; static; overload;
      end;

  public
    constructor create(para1: ATMTextKeyListener.InnerCapitalize; para2: jboolean); overload;
    class function getInstance(para1: jboolean; para2: ATMTextKeyListener.InnerCapitalize): ATMTextKeyListener; static; overload;
    class function getInstance(): ATMTextKeyListener; static; overload;
    class function shouldCap(para1: ATMTextKeyListener.InnerCapitalize; para2: JLCharSequence; para3: jint): jboolean; static; overload;
    function getInputType(): jint; overload; virtual;
    function onKeyDown(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    function onKeyOther(para1: AVView; para2: ATEditable; para3: AVKeyEvent): jboolean; overload; virtual;
    class procedure clear(para1: ATEditable); static; overload;
    procedure onSpanAdded(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint); overload; virtual;
    procedure onSpanRemoved(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint); overload; virtual;
    procedure onSpanChanged(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint; para5: jint; para6: jint); overload; virtual;
    procedure release(); overload; virtual;
  end;

  ATMArrowKeyMovementMethod = class external 'android.text.method' name 'ArrowKeyMovementMethod' (ATMBaseMovementMethod, ATMMovementMethod)
  public
    constructor create(); overload;
  strict protected
    function handleMovementKey(para1: AWTextView; para2: ATSpannable; para3: jint; para4: jint; para5: AVKeyEvent): jboolean; overload; virtual;
    function left(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function right(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function up(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function down(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function pageUp(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function pageDown(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function top(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function bottom(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function lineStart(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function lineEnd(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function home(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function &end(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
  public
    function onTouchEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload; virtual;
    function canSelectArbitrarily(): jboolean; overload; virtual;
    procedure initialize(para1: AWTextView; para2: ATSpannable); overload; virtual;
    procedure onTakeFocus(para1: AWTextView; para2: ATSpannable; para3: jint); overload; virtual;
    class function getInstance(): ATMMovementMethod; static; overload;
  end;

  ATMScrollingMovementMethod = class external 'android.text.method' name 'ScrollingMovementMethod' (ATMBaseMovementMethod, ATMMovementMethod)
  public
    constructor create(); overload;
  strict protected
    function left(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function right(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function up(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function down(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function pageUp(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function pageDown(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function top(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function bottom(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function lineStart(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function lineEnd(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function home(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function &end(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
  public
    function onTouchEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload; virtual;
    procedure onTakeFocus(para1: AWTextView; para2: ATSpannable; para3: jint); overload; virtual;
    class function getInstance(): ATMMovementMethod; static; overload;
  end;

  ATMHideReturnsTransformationMethod = class external 'android.text.method' name 'HideReturnsTransformationMethod' (ATMReplacementTransformationMethod)
  public
    constructor create(); overload;
  strict protected
    function getOriginal(): Arr1jchar; overload; virtual;
    function getReplacement(): Arr1jchar; overload; virtual;
  public
    class function getInstance(): ATMHideReturnsTransformationMethod; static; overload;
  end;

  ATMSingleLineTransformationMethod = class external 'android.text.method' name 'SingleLineTransformationMethod' (ATMReplacementTransformationMethod)
  public
    constructor create(); overload;
  strict protected
    function getOriginal(): Arr1jchar; overload; virtual;
    function getReplacement(): Arr1jchar; overload; virtual;
  public
    class function getInstance(): ATMSingleLineTransformationMethod; static; overload;
  end;

  ATSLeadingMarginSpan = interface external 'android.text.style' name 'LeadingMarginSpan' (ATSParagraphStyle)
    type
      InnerStandard = class;
      Arr1InnerStandard = array of InnerStandard;
      Arr2InnerStandard = array of Arr1InnerStandard;
      Arr3InnerStandard = array of Arr2InnerStandard;
      InnerLeadingMarginSpan2 = interface;
      Arr1InnerLeadingMarginSpan2 = array of InnerLeadingMarginSpan2;
      Arr2InnerLeadingMarginSpan2 = array of Arr1InnerLeadingMarginSpan2;
      Arr3InnerLeadingMarginSpan2 = array of Arr2InnerLeadingMarginSpan2;
      InnerStandard = class external 'android.text.style' name 'Standard' (JLObject, ATSLeadingMarginSpan, ATParcelableSpan)
      public
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint); overload;
        constructor create(para1: AOParcel); overload;
        function getSpanTypeId(): jint; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function getLeadingMargin(para1: jboolean): jint; overload; virtual;
        procedure drawLeadingMargin(para1: AGCanvas; para2: AGPaint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JLCharSequence; para9: jint; para10: jint; para11: jboolean; para12: ATLayout); overload; virtual;
      end;

      InnerLeadingMarginSpan2 = interface external 'android.text.style' name 'LeadingMarginSpan2' (ATSLeadingMarginSpan, ATSWrapTogetherSpan)
        function getLeadingMarginLineCount(): jint; overload;
      end;

    function getLeadingMargin(para1: jboolean): jint; overload;
    procedure drawLeadingMargin(para1: AGCanvas; para2: AGPaint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JLCharSequence; para9: jint; para10: jint; para11: jboolean; para12: ATLayout); overload;
  end;

  ATSLineHeightSpan = interface external 'android.text.style' name 'LineHeightSpan' (ATSParagraphStyle, ATSWrapTogetherSpan)
    type
      InnerWithDensity = interface;
      Arr1InnerWithDensity = array of InnerWithDensity;
      Arr2InnerWithDensity = array of Arr1InnerWithDensity;
      Arr3InnerWithDensity = array of Arr2InnerWithDensity;
      InnerWithDensity = interface external 'android.text.style' name 'WithDensity' (ATSLineHeightSpan)
        procedure chooseHeight(para1: JLCharSequence; para2: jint; para3: jint; para4: jint; para5: jint; para6: AGPaint.InnerFontMetricsInt; para7: ATTextPaint); overload;
      end;

    procedure chooseHeight(para1: JLCharSequence; para2: jint; para3: jint; para4: jint; para5: jint; para6: AGPaint.InnerFontMetricsInt); overload;
  end;

  ATSURLSpan = class external 'android.text.style' name 'URLSpan' (ATSClickableSpan, ATParcelableSpan)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getURL(): JLString; overload; virtual;
    procedure onClick(para1: AVView); overload; virtual;
  end;

  ATSMetricAffectingSpan = class abstract external 'android.text.style' name 'MetricAffectingSpan' (ATSCharacterStyle, ATSUpdateLayout)
  public
    constructor create(); overload;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual; abstract;
    function getUnderlying(): ATSMetricAffectingSpan; overload; virtual;
    function getUnderlying(): ATSCharacterStyle; overload; virtual;
  end;

  AVMenuItem = interface external 'android.view' name 'MenuItem' 
    type
      InnerOnActionExpandListener = interface;
      Arr1InnerOnActionExpandListener = array of InnerOnActionExpandListener;
      Arr2InnerOnActionExpandListener = array of Arr1InnerOnActionExpandListener;
      Arr3InnerOnActionExpandListener = array of Arr2InnerOnActionExpandListener;
      InnerOnMenuItemClickListener = interface;
      Arr1InnerOnMenuItemClickListener = array of InnerOnMenuItemClickListener;
      Arr2InnerOnMenuItemClickListener = array of Arr1InnerOnMenuItemClickListener;
      Arr3InnerOnMenuItemClickListener = array of Arr2InnerOnMenuItemClickListener;
      InnerOnActionExpandListener = interface external 'android.view' name 'OnActionExpandListener' 
        function onMenuItemActionExpand(para1: AVMenuItem): jboolean; overload;
        function onMenuItemActionCollapse(para1: AVMenuItem): jboolean; overload;
      end;

      InnerOnMenuItemClickListener = interface external 'android.view' name 'OnMenuItemClickListener' 
        function onMenuItemClick(para1: AVMenuItem): jboolean; overload;
      end;

    const
      SHOW_AS_ACTION_ALWAYS = 2;
      SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW = 8;
      SHOW_AS_ACTION_IF_ROOM = 1;
      SHOW_AS_ACTION_NEVER = 0;
      SHOW_AS_ACTION_WITH_TEXT = 4;
    function getItemId(): jint; overload;
    function getGroupId(): jint; overload;
    function getOrder(): jint; overload;
    function setTitle(para1: JLCharSequence): AVMenuItem; overload;
    function setTitle(para1: jint): AVMenuItem; overload;
    function getTitle(): JLCharSequence; overload;
    function setTitleCondensed(para1: JLCharSequence): AVMenuItem; overload;
    function getTitleCondensed(): JLCharSequence; overload;
    function setIcon(para1: AGDDrawable): AVMenuItem; overload;
    function setIcon(para1: jint): AVMenuItem; overload;
    function getIcon(): AGDDrawable; overload;
    function setIntent(para1: ACIntent): AVMenuItem; overload;
    function getIntent(): ACIntent; overload;
    function setShortcut(para1: jchar; para2: jchar): AVMenuItem; overload;
    function setNumericShortcut(para1: jchar): AVMenuItem; overload;
    function getNumericShortcut(): jchar; overload;
    function setAlphabeticShortcut(para1: jchar): AVMenuItem; overload;
    function getAlphabeticShortcut(): jchar; overload;
    function setCheckable(para1: jboolean): AVMenuItem; overload;
    function isCheckable(): jboolean; overload;
    function setChecked(para1: jboolean): AVMenuItem; overload;
    function isChecked(): jboolean; overload;
    function setVisible(para1: jboolean): AVMenuItem; overload;
    function isVisible(): jboolean; overload;
    function setEnabled(para1: jboolean): AVMenuItem; overload;
    function isEnabled(): jboolean; overload;
    function hasSubMenu(): jboolean; overload;
    function getSubMenu(): AVSubMenu; overload;
    function setOnMenuItemClickListener(para1: AVMenuItem.InnerOnMenuItemClickListener): AVMenuItem; overload;
    function getMenuInfo(): AVContextMenu.InnerContextMenuInfo; overload;
    procedure setShowAsAction(para1: jint); overload;
    function setShowAsActionFlags(para1: jint): AVMenuItem; overload;
    function setActionView(para1: AVView): AVMenuItem; overload;
    function setActionView(para1: jint): AVMenuItem; overload;
    function getActionView(): AVView; overload;
    function setActionProvider(para1: AVActionProvider): AVMenuItem; overload;
    function getActionProvider(): AVActionProvider; overload;
    function expandActionView(): jboolean; overload;
    function collapseActionView(): jboolean; overload;
    function isActionViewExpanded(): jboolean; overload;
    function setOnActionExpandListener(para1: AVMenuItem.InnerOnActionExpandListener): AVMenuItem; overload;
  end;

  AVWindow = class abstract external 'android.view' name 'Window' (JLObject)
  public
    type
      InnerCallback = interface;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = interface external 'android.view' name 'Callback' 
        function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload;
        function dispatchKeyShortcutEvent(para1: AVKeyEvent): jboolean; overload;
        function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload;
        function dispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload;
        function dispatchGenericMotionEvent(para1: AVMotionEvent): jboolean; overload;
        function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload;
        function onCreatePanelView(para1: jint): AVView; overload;
        function onCreatePanelMenu(para1: jint; para2: AVMenu): jboolean; overload;
        function onPreparePanel(para1: jint; para2: AVView; para3: AVMenu): jboolean; overload;
        function onMenuOpened(para1: jint; para2: AVMenu): jboolean; overload;
        function onMenuItemSelected(para1: jint; para2: AVMenuItem): jboolean; overload;
        procedure onWindowAttributesChanged(para1: AVWindowManager.InnerLayoutParams); overload;
        procedure onContentChanged(); overload;
        procedure onWindowFocusChanged(para1: jboolean); overload;
        procedure onAttachedToWindow(); overload;
        procedure onDetachedFromWindow(); overload;
        procedure onPanelClosed(para1: jint; para2: AVMenu); overload;
        function onSearchRequested(): jboolean; overload;
        function onWindowStartingActionMode(para1: AVActionMode.InnerCallback): AVActionMode; overload;
        procedure onActionModeStarted(para1: AVActionMode); overload;
        procedure onActionModeFinished(para1: AVActionMode); overload;
      end;

  strict protected
    const
      DEFAULT_FEATURES = 65;
  public
    const
      FEATURE_ACTION_BAR = 8;
      FEATURE_ACTION_BAR_OVERLAY = 9;
      FEATURE_ACTION_MODE_OVERLAY = 10;
      FEATURE_ACTIVITY_TRANSITIONS = 13;
      FEATURE_CONTENT_TRANSITIONS = 12;
      FEATURE_CONTEXT_MENU = 6;
      FEATURE_CUSTOM_TITLE = 7;
      FEATURE_INDETERMINATE_PROGRESS = 5;
      FEATURE_LEFT_ICON = 3;
      FEATURE_NO_TITLE = 1;
      FEATURE_OPTIONS_PANEL = 0;
      FEATURE_PROGRESS = 2;
      FEATURE_RIGHT_ICON = 4;
      FEATURE_SWIPE_TO_DISMISS = 11;
      ID_ANDROID_CONTENT = 16908290;
      NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME = 'android:navigation:background';
      PROGRESS_END = 10000;
      PROGRESS_INDETERMINATE_OFF = -4;
      PROGRESS_INDETERMINATE_ON = -3;
      PROGRESS_SECONDARY_END = 30000;
      PROGRESS_SECONDARY_START = 20000;
      PROGRESS_START = 0;
      PROGRESS_VISIBILITY_OFF = -2;
      PROGRESS_VISIBILITY_ON = -1;
      STATUS_BAR_BACKGROUND_TRANSITION_NAME = 'android:status:background';
  public
    constructor create(para1: ACContext); overload;
    function getContext(): ACContext; overload; virtual; final;
    function getWindowStyle(): ACRTypedArray; overload; virtual; final;
    procedure setContainer(para1: AVWindow); overload; virtual;
    function getContainer(): AVWindow; overload; virtual; final;
    function hasChildren(): jboolean; overload; virtual; final;
    procedure setWindowManager(para1: AVWindowManager; para2: AOIBinder; para3: JLString); overload; virtual;
    procedure setWindowManager(para1: AVWindowManager; para2: AOIBinder; para3: JLString; para4: jboolean); overload; virtual;
    function getWindowManager(): AVWindowManager; overload; virtual;
    procedure setCallback(para1: AVWindow.InnerCallback); overload; virtual;
    function getCallback(): AVWindow.InnerCallback; overload; virtual; final;
    procedure takeSurface(para1: AVSurfaceHolder.InnerCallback2); overload; virtual; abstract;
    procedure takeInputQueue(para1: AVInputQueue.InnerCallback); overload; virtual; abstract;
    function isFloating(): jboolean; overload; virtual; abstract;
    procedure setLayout(para1: jint; para2: jint); overload; virtual;
    procedure setGravity(para1: jint); overload; virtual;
    procedure setType(para1: jint); overload; virtual;
    procedure setFormat(para1: jint); overload; virtual;
    procedure setWindowAnimations(para1: jint); overload; virtual;
    procedure setSoftInputMode(para1: jint); overload; virtual;
    procedure addFlags(para1: jint); overload; virtual;
    procedure clearFlags(para1: jint); overload; virtual;
    procedure setFlags(para1: jint; para2: jint); overload; virtual;
    procedure setDimAmount(para1: jfloat); overload; virtual;
    procedure setAttributes(para1: AVWindowManager.InnerLayoutParams); overload; virtual;
    function getAttributes(): AVWindowManager.InnerLayoutParams; overload; virtual; final;
  strict protected
    function getForcedWindowFlags(): jint; overload; virtual; final;
    function hasSoftInputMode(): jboolean; overload; virtual; final;
  public
    function requestFeature(para1: jint): jboolean; overload; virtual;
    procedure makeActive(); overload; virtual; final;
    function isActive(): jboolean; overload; virtual; final;
    function findViewById(para1: jint): AVView; overload; virtual;
    procedure setContentView(para1: jint); overload; virtual; abstract;
    procedure setContentView(para1: AVView); overload; virtual; abstract;
    procedure setContentView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual; abstract;
    procedure addContentView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual; abstract;
    function getCurrentFocus(): AVView; overload; virtual; abstract;
    function getLayoutInflater(): AVLayoutInflater; overload; virtual; abstract;
    procedure setTitle(para1: JLCharSequence); overload; virtual; abstract;
    procedure setTitleColor(para1: jint); overload; virtual; abstract;
    procedure openPanel(para1: jint; para2: AVKeyEvent); overload; virtual; abstract;
    procedure closePanel(para1: jint); overload; virtual; abstract;
    procedure togglePanel(para1: jint; para2: AVKeyEvent); overload; virtual; abstract;
    procedure invalidatePanelMenu(para1: jint); overload; virtual; abstract;
    function performPanelShortcut(para1: jint; para2: jint; para3: AVKeyEvent; para4: jint): jboolean; overload; virtual; abstract;
    function performPanelIdentifierAction(para1: jint; para2: jint; para3: jint): jboolean; overload; virtual; abstract;
    procedure closeAllPanels(); overload; virtual; abstract;
    function performContextMenuIdentifierAction(para1: jint; para2: jint): jboolean; overload; virtual; abstract;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual; abstract;
    procedure setBackgroundDrawableResource(para1: jint); overload; virtual;
    procedure setBackgroundDrawable(para1: AGDDrawable); overload; virtual; abstract;
    procedure setFeatureDrawableResource(para1: jint; para2: jint); overload; virtual; abstract;
    procedure setFeatureDrawableUri(para1: jint; para2: ANUri); overload; virtual; abstract;
    procedure setFeatureDrawable(para1: jint; para2: AGDDrawable); overload; virtual; abstract;
    procedure setFeatureDrawableAlpha(para1: jint; para2: jint); overload; virtual; abstract;
    procedure setFeatureInt(para1: jint; para2: jint); overload; virtual; abstract;
    procedure takeKeyEvents(para1: jboolean); overload; virtual; abstract;
    function superDispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual; abstract;
    function superDispatchKeyShortcutEvent(para1: AVKeyEvent): jboolean; overload; virtual; abstract;
    function superDispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual; abstract;
    function superDispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual; abstract;
    function superDispatchGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual; abstract;
    function getDecorView(): AVView; overload; virtual; abstract;
    function peekDecorView(): AVView; overload; virtual; abstract;
    function saveHierarchyState(): AOBundle; overload; virtual; abstract;
    procedure restoreHierarchyState(para1: AOBundle); overload; virtual; abstract;
  strict protected
    procedure onActive(); overload; virtual; abstract;
    function getFeatures(): jint; overload; virtual; final;
  public
    function hasFeature(para1: jint): jboolean; overload; virtual;
  strict protected
    function getLocalFeatures(): jint; overload; virtual; final;
    procedure setDefaultWindowFormat(para1: jint); overload; virtual;
  public
    procedure setChildDrawable(para1: jint; para2: AGDDrawable); overload; virtual; abstract;
    procedure setChildInt(para1: jint; para2: jint); overload; virtual; abstract;
    function isShortcutKey(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual; abstract;
    procedure setVolumeControlStream(para1: jint); overload; virtual; abstract;
    function getVolumeControlStream(): jint; overload; virtual; abstract;
    procedure setMediaController(para1: AMSMediaController); overload; virtual;
    function getMediaController(): AMSMediaController; overload; virtual;
    procedure setUiOptions(para1: jint); overload; virtual;
    procedure setUiOptions(para1: jint; para2: jint); overload; virtual;
    procedure setIcon(para1: jint); overload; virtual;
    procedure setLogo(para1: jint); overload; virtual;
    procedure setLocalFocus(para1: jboolean; para2: jboolean); overload; virtual;
    procedure injectInputEvent(para1: AVInputEvent); overload; virtual;
    function getTransitionManager(): ATTransitionManager; overload; virtual;
    procedure setTransitionManager(para1: ATTransitionManager); overload; virtual;
    function getContentScene(): ATScene; overload; virtual;
    procedure setEnterTransition(para1: ATTransition); overload; virtual;
    procedure setReturnTransition(para1: ATTransition); overload; virtual;
    procedure setExitTransition(para1: ATTransition); overload; virtual;
    procedure setReenterTransition(para1: ATTransition); overload; virtual;
    function getEnterTransition(): ATTransition; overload; virtual;
    function getReturnTransition(): ATTransition; overload; virtual;
    function getExitTransition(): ATTransition; overload; virtual;
    function getReenterTransition(): ATTransition; overload; virtual;
    procedure setSharedElementEnterTransition(para1: ATTransition); overload; virtual;
    procedure setSharedElementReturnTransition(para1: ATTransition); overload; virtual;
    function getSharedElementEnterTransition(): ATTransition; overload; virtual;
    function getSharedElementReturnTransition(): ATTransition; overload; virtual;
    procedure setSharedElementExitTransition(para1: ATTransition); overload; virtual;
    procedure setSharedElementReenterTransition(para1: ATTransition); overload; virtual;
    function getSharedElementExitTransition(): ATTransition; overload; virtual;
    function getSharedElementReenterTransition(): ATTransition; overload; virtual;
    procedure setAllowEnterTransitionOverlap(para1: jboolean); overload; virtual;
    function getAllowEnterTransitionOverlap(): jboolean; overload; virtual;
    procedure setAllowReturnTransitionOverlap(para1: jboolean); overload; virtual;
    function getAllowReturnTransitionOverlap(): jboolean; overload; virtual;
    function getTransitionBackgroundFadeDuration(): jlong; overload; virtual;
    procedure setTransitionBackgroundFadeDuration(para1: jlong); overload; virtual;
    function getSharedElementsUseOverlay(): jboolean; overload; virtual;
    procedure setSharedElementsUseOverlay(para1: jboolean); overload; virtual;
    function getStatusBarColor(): jint; overload; virtual; abstract;
    procedure setStatusBarColor(para1: jint); overload; virtual; abstract;
    function getNavigationBarColor(): jint; overload; virtual; abstract;
    procedure setNavigationBarColor(para1: jint); overload; virtual; abstract;
  end;

  AWWrapperListAdapter = interface external 'android.widget' name 'WrapperListAdapter' (AWListAdapter)
    function getWrappedAdapter(): AWListAdapter; overload;
  end;

  AWBaseAdapter = class abstract external 'android.widget' name 'BaseAdapter' (JLObject, AWListAdapter, AWSpinnerAdapter)
  public
    constructor create(); overload;
    function hasStableIds(): jboolean; overload; virtual;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    procedure notifyDataSetChanged(); overload; virtual;
    procedure notifyDataSetInvalidated(); overload; virtual;
    function areAllItemsEnabled(): jboolean; overload; virtual;
    function isEnabled(para1: jint): jboolean; overload; virtual;
    function getDropDownView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload; virtual;
    function getItemViewType(para1: jint): jint; overload; virtual;
    function getViewTypeCount(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
  end;

  AWCursorTreeAdapter = class abstract external 'android.widget' name 'CursorTreeAdapter' (AWBaseExpandableListAdapter, AWFilterable)
  public
    constructor create(para1: ADCursor; para2: ACContext); overload;
    constructor create(para1: ADCursor; para2: ACContext; para3: jboolean); overload;
  strict protected
    function getChildrenCursor(para1: ADCursor): ADCursor; overload; virtual; abstract;
  public
    procedure setGroupCursor(para1: ADCursor); overload; virtual;
    procedure setChildrenCursor(para1: jint; para2: ADCursor); overload; virtual;
    function getChild(para1: jint; para2: jint): ADCursor; overload; virtual;
    function getChildId(para1: jint; para2: jint): jlong; overload; virtual;
    function getChildrenCount(para1: jint): jint; overload; virtual;
    function getGroup(para1: jint): ADCursor; overload; virtual;
    function getGroupCount(): jint; overload; virtual;
    function getGroupId(para1: jint): jlong; overload; virtual;
    function getGroupView(para1: jint; para2: jboolean; para3: AVView; para4: AVViewGroup): AVView; overload; virtual;
  strict protected
    function newGroupView(para1: ACContext; para2: ADCursor; para3: jboolean; para4: AVViewGroup): AVView; overload; virtual; abstract;
    procedure bindGroupView(para1: AVView; para2: ACContext; para3: ADCursor; para4: jboolean); overload; virtual; abstract;
  public
    function getChildView(para1: jint; para2: jint; para3: jboolean; para4: AVView; para5: AVViewGroup): AVView; overload; virtual;
  strict protected
    function newChildView(para1: ACContext; para2: ADCursor; para3: jboolean; para4: AVViewGroup): AVView; overload; virtual; abstract;
    procedure bindChildView(para1: AVView; para2: ACContext; para3: ADCursor; para4: jboolean); overload; virtual; abstract;
  public
    function isChildSelectable(para1: jint; para2: jint): jboolean; overload; virtual;
    function hasStableIds(): jboolean; overload; virtual;
    procedure notifyDataSetChanged(); overload; virtual;
    procedure notifyDataSetChanged(para1: jboolean); overload; virtual;
    procedure notifyDataSetInvalidated(); overload; virtual;
    procedure onGroupCollapsed(para1: jint); overload; virtual;
    function convertToString(para1: ADCursor): JLString; overload; virtual;
    function runQueryOnBackgroundThread(para1: JLCharSequence): ADCursor; overload; virtual;
    function getFilter(): AWFilter; overload; virtual;
    function getFilterQueryProvider(): AWFilterQueryProvider; overload; virtual;
    procedure setFilterQueryProvider(para1: AWFilterQueryProvider); overload; virtual;
    procedure changeCursor(para1: ADCursor); overload; virtual;
    function getCursor(): ADCursor; overload; virtual;
    function getChild(para1: jint; para2: jint): JLObject; overload; virtual;
    function getGroup(para1: jint): JLObject; overload; virtual;
  end;

  AWSimpleExpandableListAdapter = class external 'android.widget' name 'SimpleExpandableListAdapter' (AWBaseExpandableListAdapter)
  public
    constructor create(para1: ACContext; para2: JUList; para3: jint; para4: Arr1JLString; para5: Arr1jint; para6: JUList; para7: jint; para8: Arr1JLString; para9: Arr1jint); overload;
    constructor create(para1: ACContext; para2: JUList; para3: jint; const para4: array of JLString; const para5: array of jint; para6: JUList; para7: jint; const para8: array of JLString; const para9: array of jint); overload;
    constructor create(para1: ACContext; para2: JUList; para3: jint; para4: jint; para5: Arr1JLString; para6: Arr1jint; para7: JUList; para8: jint; para9: Arr1JLString; para10: Arr1jint); overload;
    constructor create(para1: ACContext; para2: JUList; para3: jint; para4: jint; const para5: array of JLString; const para6: array of jint; para7: JUList; para8: jint; const para9: array of JLString; const para10: array of jint); overload;
    constructor create(para1: ACContext; para2: JUList; para3: jint; para4: jint; para5: Arr1JLString; para6: Arr1jint; para7: JUList; para8: jint; para9: jint; para10: Arr1JLString; para11: Arr1jint); overload;
    constructor create(para1: ACContext; para2: JUList; para3: jint; para4: jint; const para5: array of JLString; const para6: array of jint; para7: JUList; para8: jint; para9: jint; const para10: array of JLString; const para11: array of jint); overload;
    function getChild(para1: jint; para2: jint): JLObject; overload; virtual;
    function getChildId(para1: jint; para2: jint): jlong; overload; virtual;
    function getChildView(para1: jint; para2: jint; para3: jboolean; para4: AVView; para5: AVViewGroup): AVView; overload; virtual;
    function newChildView(para1: jboolean; para2: AVViewGroup): AVView; overload; virtual;
    function getChildrenCount(para1: jint): jint; overload; virtual;
    function getGroup(para1: jint): JLObject; overload; virtual;
    function getGroupCount(): jint; overload; virtual;
    function getGroupId(para1: jint): jlong; overload; virtual;
    function getGroupView(para1: jint; para2: jboolean; para3: AVView; para4: AVViewGroup): AVView; overload; virtual;
    function newGroupView(para1: jboolean; para2: AVViewGroup): AVView; overload; virtual;
    function isChildSelectable(para1: jint; para2: jint): jboolean; overload; virtual;
    function hasStableIds(): jboolean; overload; virtual;
  end;

  ANTBasicTagTechnology = class abstract external 'android.nfc.tech' name 'BasicTagTechnology' (JLObject, ANTTagTechnology)
  public
    function getTag(): ANTag; overload; virtual;
    function isConnected(): jboolean; overload; virtual;
    procedure connect(); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  AABBackupDataInputStream = class external 'android.app.backup' name 'BackupDataInputStream' (JIInputStream)
  public
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
    function getKey(): JLString; overload; virtual;
    function size(): jint; overload; virtual;
  end;

  JIByteArrayInputStream = class external 'java.io' name 'ByteArrayInputStream' (JIInputStream)
  strict protected
    var
      fbuf: Arr1jbyte; external name 'buf';
      fcount: jint; external name 'count';
      fmark: jint; external name 'mark';
      fpos: jint; external name 'pos';
  public
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    constructor create(para1: Arr1jbyte; para2: jint; para3: jint); overload;
    constructor create(const para1: array of jbyte; para2: jint; para3: jint); overload;
    function available(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;
    procedure reset(); overload; virtual;
    function skip(para1: jlong): jlong; overload; virtual;
  end;

  JIFileInputStream = class external 'java.io' name 'FileInputStream' (JIInputStream)
  public
    constructor create(para1: JIFile); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JIFileDescriptor); overload;
    constructor create(para1: JLString); overload;  // throws java.io.FileNotFoundException
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure finalize(); overload; virtual;  // throws java.io.IOException
  public
    function getChannel(): JNCFileChannel; overload; virtual;
    function getFD(): JIFileDescriptor; overload; virtual; final;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIFilterInputStream = class external 'java.io' name 'FilterInputStream' (JIInputStream)
  strict protected
    var
      fin: JIInputStream; external name 'in';
  strict protected
    constructor create(para1: JIInputStream); overload;
  public
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIPipedInputStream = class external 'java.io' name 'PipedInputStream' (JIInputStream)
  strict protected
    const
      PIPE_SIZE = 1024;
  strict protected
    var
      fbuffer: Arr1jbyte; external name 'buffer';
      fin: jint; external name 'in';
      fout: jint; external name 'out';
  public
    constructor create(); overload;
    constructor create(para1: JIPipedOutputStream); overload;  // throws java.io.IOException
    constructor create(para1: jint); overload;
    constructor create(para1: JIPipedOutputStream; para2: jint); overload;  // throws java.io.IOException
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(para1: JIPipedOutputStream); overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
  strict protected
    procedure receive(para1: jint); overload; virtual;  // throws java.io.IOException
  end;

  JISequenceInputStream = class external 'java.io' name 'SequenceInputStream' (JIInputStream)
  public
    constructor create(para1: JIInputStream; para2: JIInputStream); overload;
    constructor create(para1: JUEnumeration); overload;
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
  end;

  JIStringBufferInputStream = class external 'java.io' name 'StringBufferInputStream' (JIInputStream)
  strict protected
    var
      fbuffer: JLString; external name 'buffer';
      fcount: jint; external name 'count';
      fpos: jint; external name 'pos';
  public
    constructor create(para1: JLString); overload;
    function available(): jint; overload; virtual;
    function read(): jint; overload; virtual;
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;
    procedure reset(); overload; virtual;
    function skip(para1: jlong): jlong; overload; virtual;
  end;

  OAHCEofSensorInputStream = class external 'org.apache.http.conn' name 'EofSensorInputStream' (JIInputStream, OAHCConnectionReleaseTrigger)
  strict protected
    var
      fwrappedStream: JIInputStream; external name 'wrappedStream';
  public
    constructor create(para1: JIInputStream; para2: OAHCEofSensorWatcher); overload;
  strict protected
    function isReadAllowed(): jboolean; overload; virtual;  // throws java.io.IOException
  public
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure checkEOF(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure checkClose(); overload; virtual;  // throws java.io.IOException
    procedure checkAbort(); overload; virtual;  // throws java.io.IOException
  public
    procedure releaseConnection(); overload; virtual;  // throws java.io.IOException
    procedure abortConnection(); overload; virtual;  // throws java.io.IOException
  end;

  OAHIIChunkedInputStream = class external 'org.apache.http.impl.io' name 'ChunkedInputStream' (JIInputStream)
  public
    constructor create(para1: OAHISessionInputBuffer); overload;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    function getFooters(): Arr1OAHHeader; overload; virtual;
  end;

  OAHIIContentLengthInputStream = class external 'org.apache.http.impl.io' name 'ContentLengthInputStream' (JIInputStream)
  public
    constructor create(para1: OAHISessionInputBuffer; para2: jlong); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  OAHIIIdentityInputStream = class external 'org.apache.http.impl.io' name 'IdentityInputStream' (JIInputStream)
  public
    constructor create(para1: OAHISessionInputBuffer); overload;
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
  end;

  JIBufferedReader = class external 'java.io' name 'BufferedReader' (JIReader)
  public
    constructor create(para1: JIReader); overload;
    constructor create(para1: JIReader; para2: jint); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function readLine(): JLString; overload; virtual;  // throws java.io.IOException
    function ready(): jboolean; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JICharArrayReader = class external 'java.io' name 'CharArrayReader' (JIReader)
  strict protected
    var
      fbuf: Arr1jchar; external name 'buf';
      fcount: jint; external name 'count';
      fmarkedPos: jint; external name 'markedPos';
      fpos: jint; external name 'pos';
  public
    constructor create(para1: Arr1jchar); overload;
    constructor create(const para1: array of jchar); overload;
    constructor create(para1: Arr1jchar; para2: jint; para3: jint); overload;
    constructor create(const para1: array of jchar; para2: jint; para3: jint); overload;
    procedure close(); overload; virtual;
    procedure mark(para1: jint); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function ready(): jboolean; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIFilterReader = class abstract external 'java.io' name 'FilterReader' (JIReader)
  strict protected
    var
      fin: JIReader; external name 'in';
  strict protected
    constructor create(para1: JIReader); overload;
  public
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function ready(): jboolean; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIInputStreamReader = class external 'java.io' name 'InputStreamReader' (JIReader)
  public
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIInputStream; para2: JLString); overload;  // throws java.io.UnsupportedEncodingException
    constructor create(para1: JIInputStream; para2: JNCCharsetDecoder); overload;
    constructor create(para1: JIInputStream; para2: JNCCharset); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    function getEncoding(): JLString; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function ready(): jboolean; overload; virtual;  // throws java.io.IOException
  end;

  JIPipedReader = class external 'java.io' name 'PipedReader' (JIReader)
  public
    constructor create(); overload;
    constructor create(para1: JIPipedWriter); overload;  // throws java.io.IOException
    constructor create(para1: jint); overload;
    constructor create(para1: JIPipedWriter; para2: jint); overload;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(para1: JIPipedWriter); overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function ready(): jboolean; overload; virtual;  // throws java.io.IOException
  end;

  JIStringReader = class external 'java.io' name 'StringReader' (JIReader)
  public
    constructor create(para1: JLString); overload;
    procedure close(); overload; virtual;
    procedure mark(para1: jint); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function ready(): jboolean; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JNCInterruptibleChannel = interface external 'java.nio.channels' name 'InterruptibleChannel' (JNCChannel)
    procedure close(); overload;  // throws java.io.IOException
  end;

  JNCReadableByteChannel = interface external 'java.nio.channels' name 'ReadableByteChannel' (JNCChannel)
    function read(para1: JNByteBuffer): jint; overload;  // throws java.io.IOException
  end;

  JNCWritableByteChannel = interface external 'java.nio.channels' name 'WritableByteChannel' (JNCChannel)
    function write(para1: JNByteBuffer): jint; overload;  // throws java.io.IOException
  end;

  JIObjectInputStream = class external 'java.io' name 'ObjectInputStream' (JIInputStream, JIObjectInput, JIObjectStreamConstants)
  public
    type
      InnerGetField = class;
      Arr1InnerGetField = array of InnerGetField;
      Arr2InnerGetField = array of Arr1InnerGetField;
      Arr3InnerGetField = array of Arr2InnerGetField;
      InnerGetField = class abstract external 'java.io' name 'GetField' (JLObject)
      public
        constructor create(); overload;
        function getObjectStreamClass(): JIObjectStreamClass; overload; virtual; abstract;
        function defaulted(para1: JLString): jboolean; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: jboolean): jboolean; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: jchar): jchar; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: jbyte): jbyte; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: jshort): jshort; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: jint): jint; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: jlong): jlong; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: jfloat): jfloat; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: jdouble): jdouble; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
        function get(para1: JLString; para2: JLObject): JLObject; overload; virtual; abstract;  // throws java.io.IOException, java.lang.IllegalArgumentException
      end;

  strict protected
    constructor create(); overload;  // throws java.io.IOException
  public
    constructor create(para1: JIInputStream); overload;  // throws java.io.StreamCorruptedException, java.io.IOException
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure defaultReadObject(); overload; virtual;  // throws java.io.IOException, java.lang.ClassNotFoundException, java.io.NotActiveException
  strict protected
    function enableResolveObject(para1: jboolean): jboolean; overload; virtual;
  public
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function readBoolean(): jboolean; overload; virtual;  // throws java.io.IOException
    function readByte(): jbyte; overload; virtual;  // throws java.io.IOException
    function readChar(): jchar; overload; virtual;  // throws java.io.IOException
    function readDouble(): jdouble; overload; virtual;  // throws java.io.IOException
    function readFields(): JIObjectInputStream.InnerGetField; overload; virtual;  // throws java.io.IOException, java.lang.ClassNotFoundException, java.io.NotActiveException
    function readFloat(): jfloat; overload; virtual;  // throws java.io.IOException
    procedure readFully(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure readFully(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure readFully(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure readFully(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    function readInt(): jint; overload; virtual;  // throws java.io.IOException
    function readLine(): JLString; overload; virtual;  // throws java.io.IOException
    function readLong(): jlong; overload; virtual;  // throws java.io.IOException
  strict protected
    function readClassDescriptor(): JIObjectStreamClass; overload; virtual;  // throws java.io.IOException, java.lang.ClassNotFoundException
    function resolveProxyClass(para1: Arr1JLString): JLClass; overload; virtual;  // throws java.io.IOException, java.lang.ClassNotFoundException
    function resolveProxyClass(var para1: array of JLString): JLClass; overload; virtual;  // throws java.io.IOException, java.lang.ClassNotFoundException
  public
    function readObject(): JLObject; overload; virtual; final;  // throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    function readUnshared(): JLObject; overload; virtual;  // throws java.io.IOException, java.lang.ClassNotFoundException
  strict protected
    function readObjectOverride(): JLObject; overload; virtual;  // throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
  public
    function readShort(): jshort; overload; virtual;  // throws java.io.IOException
  strict protected
    procedure readStreamHeader(); overload; virtual;  // throws java.io.IOException, java.io.StreamCorruptedException
  public
    function readUnsignedByte(): jint; overload; virtual;  // throws java.io.IOException
    function readUnsignedShort(): jint; overload; virtual;  // throws java.io.IOException
    function readUTF(): JLString; overload; virtual;  // throws java.io.IOException
    procedure registerValidation(para1: JIObjectInputValidation; para2: jint); overload; virtual;  // throws java.io.NotActiveException, java.io.InvalidObjectException
  strict protected
    function resolveClass(para1: JIObjectStreamClass): JLClass; overload; virtual;  // throws java.io.IOException, java.lang.ClassNotFoundException
    function resolveObject(para1: JLObject): JLObject; overload; virtual;  // throws java.io.IOException
  public
    function skipBytes(para1: jint): jint; overload; virtual;  // throws java.io.IOException
  end;

  JIByteArrayOutputStream = class external 'java.io' name 'ByteArrayOutputStream' (JIOutputStream)
  strict protected
    var
      fbuf: Arr1jbyte; external name 'buf';
      fcount: jint; external name 'count';
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;
    function size(): jint; overload; virtual;
    function toByteArray(): Arr1jbyte; overload; virtual;
    function toString(): JLString; overload; virtual;
    function toString(para1: jint): JLString; overload; virtual;
    function toString(para1: JLString): JLString; overload; virtual;  // throws java.io.UnsupportedEncodingException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure write(para1: jint); overload; virtual;
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
  end;

  JIFileOutputStream = class external 'java.io' name 'FileOutputStream' (JIOutputStream)
  public
    constructor create(para1: JIFile); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JIFile; para2: jboolean); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JIFileDescriptor); overload;
    constructor create(para1: JLString); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JLString; para2: jboolean); overload;  // throws java.io.FileNotFoundException
    procedure close(); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure finalize(); overload; virtual;  // throws java.io.IOException
  public
    function getChannel(): JNCFileChannel; overload; virtual;
    function getFD(): JIFileDescriptor; overload; virtual; final;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
  end;

  JIFilterOutputStream = class external 'java.io' name 'FilterOutputStream' (JIOutputStream)
  strict protected
    var
      fout: JIOutputStream; external name 'out';
  public
    constructor create(para1: JIOutputStream); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
  end;

  JIObjectOutputStream = class external 'java.io' name 'ObjectOutputStream' (JIOutputStream, JIObjectOutput, JIObjectStreamConstants)
  public
    type
      InnerPutField = class;
      Arr1InnerPutField = array of InnerPutField;
      Arr2InnerPutField = array of Arr1InnerPutField;
      Arr3InnerPutField = array of Arr2InnerPutField;
      InnerPutField = class abstract external 'java.io' name 'PutField' (JLObject)
      public
        constructor create(); overload;
        procedure put(para1: JLString; para2: jboolean); overload; virtual; abstract;
        procedure put(para1: JLString; para2: jchar); overload; virtual; abstract;
        procedure put(para1: JLString; para2: jbyte); overload; virtual; abstract;
        procedure put(para1: JLString; para2: jshort); overload; virtual; abstract;
        procedure put(para1: JLString; para2: jint); overload; virtual; abstract;
        procedure put(para1: JLString; para2: jlong); overload; virtual; abstract;
        procedure put(para1: JLString; para2: jfloat); overload; virtual; abstract;
        procedure put(para1: JLString; para2: jdouble); overload; virtual; abstract;
        procedure put(para1: JLString; para2: JLObject); overload; virtual; abstract;
        procedure write(para1: JIObjectOutput); overload; virtual; abstract;  // throws java.io.IOException
      end;

  strict protected
    constructor create(); overload;  // throws java.io.IOException
  public
    constructor create(para1: JIOutputStream); overload;  // throws java.io.IOException
  strict protected
    procedure annotateClass(para1: JLClass); overload; virtual;  // throws java.io.IOException
    procedure annotateProxyClass(para1: JLClass); overload; virtual;  // throws java.io.IOException
  public
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure defaultWriteObject(); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure drain(); overload; virtual;  // throws java.io.IOException
    function enableReplaceObject(para1: jboolean): jboolean; overload; virtual;
  public
    procedure flush(); overload; virtual;  // throws java.io.IOException
    function putFields(): JIObjectOutputStream.InnerPutField; overload; virtual;  // throws java.io.IOException
  strict protected
    function replaceObject(para1: JLObject): JLObject; overload; virtual;  // throws java.io.IOException
  public
    procedure reset(); overload; virtual;  // throws java.io.IOException
    procedure useProtocolVersion(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure writeBoolean(para1: jboolean); overload; virtual;  // throws java.io.IOException
    procedure writeByte(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure writeBytes(para1: JLString); overload; virtual;  // throws java.io.IOException
    procedure writeChar(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure writeChars(para1: JLString); overload; virtual;  // throws java.io.IOException
    procedure writeDouble(para1: jdouble); overload; virtual;  // throws java.io.IOException
    procedure writeFields(); overload; virtual;  // throws java.io.IOException
    procedure writeFloat(para1: jfloat); overload; virtual;  // throws java.io.IOException
    procedure writeInt(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure writeLong(para1: jlong); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure writeClassDescriptor(para1: JIObjectStreamClass); overload; virtual;  // throws java.io.IOException
  public
    procedure writeObject(para1: JLObject); overload; virtual; final;  // throws java.io.IOException
    procedure writeUnshared(para1: JLObject); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure writeObjectOverride(para1: JLObject); overload; virtual;  // throws java.io.IOException
  public
    procedure writeShort(para1: jint); overload; virtual;  // throws java.io.IOException
  strict protected
    procedure writeStreamHeader(); overload; virtual;  // throws java.io.IOException
  public
    procedure writeUTF(para1: JLString); overload; virtual;  // throws java.io.IOException
  end;

  JIPipedOutputStream = class external 'java.io' name 'PipedOutputStream' (JIOutputStream)
  public
    constructor create(); overload;
    constructor create(para1: JIPipedInputStream); overload;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(para1: JIPipedInputStream); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
  end;

  OAHIIChunkedOutputStream = class external 'org.apache.http.impl.io' name 'ChunkedOutputStream' (JIOutputStream)
  public
    constructor create(para1: OAHISessionOutputBuffer; para2: jint); overload;  // throws java.io.IOException
    constructor create(para1: OAHISessionOutputBuffer); overload;  // throws java.io.IOException
  strict protected
    procedure flushCache(); overload; virtual;  // throws java.io.IOException
    procedure flushCacheWithAppend(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure flushCacheWithAppend(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure writeClosingChunk(); overload; virtual;  // throws java.io.IOException
  public
    procedure finish(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  OAHIIContentLengthOutputStream = class external 'org.apache.http.impl.io' name 'ContentLengthOutputStream' (JIOutputStream)
  public
    constructor create(para1: OAHISessionOutputBuffer; para2: jlong); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
  end;

  OAHIIIdentityOutputStream = class external 'org.apache.http.impl.io' name 'IdentityOutputStream' (JIOutputStream)
  public
    constructor create(para1: OAHISessionOutputBuffer); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
  end;

  JIBufferedWriter = class external 'java.io' name 'BufferedWriter' (JIWriter)
  public
    constructor create(para1: JIWriter); overload;
    constructor create(para1: JIWriter; para2: jint); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure newLine(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: JLString; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
  end;

  JICharArrayWriter = class external 'java.io' name 'CharArrayWriter' (JIWriter)
  strict protected
    var
      fbuf: Arr1jchar; external name 'buf';
      fcount: jint; external name 'count';
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    procedure close(); overload; virtual;
    procedure flush(); overload; virtual;
    procedure reset(); overload; virtual;
    function size(): jint; overload; virtual;
    function toCharArray(): Arr1jchar; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure write(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;
    procedure write(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;
    procedure write(para1: jint); overload; virtual;
    procedure write(para1: JLString; para2: jint; para3: jint); overload; virtual;
    procedure writeTo(para1: JIWriter); overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JICharArrayWriter; overload; virtual;
    function append(para1: JLCharSequence): JICharArrayWriter; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JICharArrayWriter; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence; para2: jint; para3: jint): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JLAppendable; overload; virtual;  // throws java.io.IOException
  end;

  JIFilterWriter = class abstract external 'java.io' name 'FilterWriter' (JIWriter)
  strict protected
    var
      fout: JIWriter; external name 'out';
  strict protected
    constructor create(para1: JIWriter); overload;
  public
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: JLString; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
  end;

  JIOutputStreamWriter = class external 'java.io' name 'OutputStreamWriter' (JIWriter)
  public
    constructor create(para1: JIOutputStream); overload;
    constructor create(para1: JIOutputStream; para2: JLString); overload;  // throws java.io.UnsupportedEncodingException
    constructor create(para1: JIOutputStream; para2: JNCCharset); overload;
    constructor create(para1: JIOutputStream; para2: JNCCharsetEncoder); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    function getEncoding(): JLString; overload; virtual;
    procedure write(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: JLString; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
  end;

  JIPipedWriter = class external 'java.io' name 'PipedWriter' (JIWriter)
  public
    constructor create(); overload;
    constructor create(para1: JIPipedReader); overload;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(para1: JIPipedReader); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
  end;

  JIPrintWriter = class external 'java.io' name 'PrintWriter' (JIWriter)
  strict protected
    var
      fout: JIWriter; external name 'out';
  public
    constructor create(para1: JIOutputStream); overload;
    constructor create(para1: JIOutputStream; para2: jboolean); overload;
    constructor create(para1: JIWriter); overload;
    constructor create(para1: JIWriter; para2: jboolean); overload;
    constructor create(para1: JIFile); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JIFile; para2: JLString); overload;  // throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    constructor create(para1: JLString); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JLString; para2: JLString); overload;  // throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    function checkError(): jboolean; overload; virtual;
  strict protected
    procedure clearError(); overload; virtual;
  public
    procedure close(); overload; virtual;
    procedure flush(); overload; virtual;
    function format(para1: JLString; para2: Arr1JLObject): JIPrintWriter; overload; virtual;
    function format(para1: JLString; const para2: array of JLObject): JIPrintWriter; overload; virtual;
    function format(para1: JULocale; para2: JLString; para3: Arr1JLObject): JIPrintWriter; overload; virtual;
    function format(para1: JULocale; para2: JLString; const para3: array of JLObject): JIPrintWriter; overload; virtual;
    function printf(para1: JLString; para2: Arr1JLObject): JIPrintWriter; overload; virtual;
    function printf(para1: JLString; const para2: array of JLObject): JIPrintWriter; overload; virtual;
    function printf(para1: JULocale; para2: JLString; para3: Arr1JLObject): JIPrintWriter; overload; virtual;
    function printf(para1: JULocale; para2: JLString; const para3: array of JLObject): JIPrintWriter; overload; virtual;
    procedure print(para1: Arr1jchar); overload; virtual;
    procedure print(var para1: array of jchar); overload; virtual;
    procedure print(para1: jchar); overload; virtual;
    procedure print(para1: jdouble); overload; virtual;
    procedure print(para1: jfloat); overload; virtual;
    procedure print(para1: jint); overload; virtual;
    procedure print(para1: jlong); overload; virtual;
    procedure print(para1: JLObject); overload; virtual;
    procedure print(para1: JLString); overload; virtual;
    procedure print(para1: jboolean); overload; virtual;
    procedure println(); overload; virtual;
    procedure println(para1: Arr1jchar); overload; virtual;
    procedure println(var para1: array of jchar); overload; virtual;
    procedure println(para1: jchar); overload; virtual;
    procedure println(para1: jdouble); overload; virtual;
    procedure println(para1: jfloat); overload; virtual;
    procedure println(para1: jint); overload; virtual;
    procedure println(para1: jlong); overload; virtual;
    procedure println(para1: JLObject); overload; virtual;
    procedure println(para1: JLString); overload; virtual;
    procedure println(para1: jboolean); overload; virtual;
  strict protected
    procedure setError(); overload; virtual;
  public
    procedure write(para1: Arr1jchar); overload; virtual;
    procedure write(var para1: array of jchar); overload; virtual;
    procedure write(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;
    procedure write(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;
    procedure write(para1: jint); overload; virtual;
    procedure write(para1: JLString); overload; virtual;
    procedure write(para1: JLString; para2: jint; para3: jint); overload; virtual;
    function append(para1: jchar): JIPrintWriter; overload; virtual;
    function append(para1: JLCharSequence): JIPrintWriter; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JIPrintWriter; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence; para2: jint; para3: jint): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JLAppendable; overload; virtual;  // throws java.io.IOException
  end;

  JIStringWriter = class external 'java.io' name 'StringWriter' (JIWriter)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;
    function getBuffer(): JLStringBuffer; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure write(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;
    procedure write(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;
    procedure write(para1: jint); overload; virtual;
    procedure write(para1: JLString); overload; virtual;
    procedure write(para1: JLString; para2: jint; para3: jint); overload; virtual;
    function append(para1: jchar): JIStringWriter; overload; virtual;
    function append(para1: JLCharSequence): JIStringWriter; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JIStringWriter; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JIWriter; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence; para2: jint; para3: jint): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JLAppendable; overload; virtual;  // throws java.io.IOException
  end;

  JNURLClassLoader = class external 'java.net' name 'URLClassLoader' (JSSecureClassLoader)
  public
    constructor create(para1: Arr1JNURL); overload;
    constructor create(const para1: array of JNURL); overload;
    constructor create(para1: Arr1JNURL; para2: JLClassLoader); overload;
    constructor create(const para1: array of JNURL; para2: JLClassLoader); overload;
    constructor create(para1: Arr1JNURL; para2: JLClassLoader; para3: JNURLStreamHandlerFactory); overload;
    constructor create(const para1: array of JNURL; para2: JLClassLoader; para3: JNURLStreamHandlerFactory); overload;
  strict protected
    procedure addURL(para1: JNURL); overload; virtual;
  public
    function findResources(para1: JLString): JUEnumeration; overload; virtual;  // throws java.io.IOException
  strict protected
    function getPermissions(para1: JSCodeSource): JSPermissionCollection; overload; virtual;
  public
    function getURLs(): Arr1JNURL; overload; virtual;
    class function newInstance(para1: Arr1JNURL): JNURLClassLoader; static; overload;
    class function newInstance(var para1: array of JNURL): JNURLClassLoader; static; overload;
    class function newInstance(para1: Arr1JNURL; para2: JLClassLoader): JNURLClassLoader; static; overload;
    class function newInstance(var para1: array of JNURL; para2: JLClassLoader): JNURLClassLoader; static; overload;
  strict protected
    function findClass(para1: JLString): JLClass; overload; virtual;  // throws java.lang.ClassNotFoundException
  public
    function findResource(para1: JLString): JNURL; overload; virtual;
  strict protected
    function definePackage(para1: JLString; para2: JUJManifest; para3: JNURL): JLPackage; overload; virtual;  // throws java.lang.IllegalArgumentException
  end;

  AWCookieSyncManager = class sealed external 'android.webkit' name 'CookieSyncManager' (AWWebSyncManager)
  strict protected
    const
      LOGTAG = 'websync';
  strict protected
    var
      fmDataBase: AWWebViewDatabase; external name 'mDataBase';
      fmHandler: AOHandler; external name 'mHandler';
  public
    class function getInstance(): AWCookieSyncManager; static; overload;
    class function createInstance(para1: ACContext): AWCookieSyncManager; static; overload;
    procedure sync(); overload; virtual;
  strict protected
    procedure syncFromRamToFlash(); overload; virtual;
  public
    procedure resetSync(); overload; virtual;
    procedure startSync(); overload; virtual;
    procedure stopSync(); overload; virtual;
    procedure run(); overload; virtual;
  end;

  AOHandlerThread = class external 'android.os' name 'HandlerThread' (JLThread)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: jint); overload;
  strict protected
    procedure onLooperPrepared(); overload; virtual;
  public
    procedure run(); overload; virtual;
    function getLooper(): AOLooper; overload; virtual;
    function quit(): jboolean; overload; virtual;
    function quitSafely(): jboolean; overload; virtual;
    function getThreadId(): jint; overload; virtual;
  end;

  JLThreadGroup = class external 'java.lang' name 'ThreadGroup' (JLObject, JLThread.InnerUncaughtExceptionHandler)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThreadGroup; para2: JLString); overload;
    function activeCount(): jint; overload; virtual;
    function activeGroupCount(): jint; overload; virtual;
    function allowThreadSuspension(para1: jboolean): jboolean; overload; virtual;
    procedure checkAccess(); overload; virtual; final;
    procedure destroy(); overload; virtual; final;
    function enumerate(para1: Arr1JLThread): jint; overload; virtual;
    function enumerate(var para1: array of JLThread): jint; overload; virtual;
    function enumerate(para1: Arr1JLThread; para2: jboolean): jint; overload; virtual;
    function enumerate(var para1: array of JLThread; para2: jboolean): jint; overload; virtual;
    function enumerate(para1: Arr1JLThreadGroup): jint; overload; virtual;
    function enumerate(var para1: array of JLThreadGroup): jint; overload; virtual;
    function enumerate(para1: Arr1JLThreadGroup; para2: jboolean): jint; overload; virtual;
    function enumerate(var para1: array of JLThreadGroup; para2: jboolean): jint; overload; virtual;
    function getMaxPriority(): jint; overload; virtual; final;
    function getName(): JLString; overload; virtual; final;
    function getParent(): JLThreadGroup; overload; virtual; final;
    procedure interrupt(); overload; virtual; final;
    function isDaemon(): jboolean; overload; virtual; final;
    function isDestroyed(): jboolean; overload; virtual;
    procedure list(); overload; virtual;
    function parentOf(para1: JLThreadGroup): jboolean; overload; virtual; final;
    procedure resume(); overload; virtual; final;
    procedure setDaemon(para1: jboolean); overload; virtual; final;
    procedure setMaxPriority(para1: jint); overload; virtual; final;
    procedure stop(); overload; virtual; final;
    procedure suspend(); overload; virtual; final;
    function toString(): JLString; overload; virtual;
    procedure uncaughtException(para1: JLThread; para2: JLThrowable); overload; virtual;
  end;

  OAHICTBasicPoolEntryRef = class external 'org.apache.http.impl.conn.tsccm' name 'BasicPoolEntryRef' (JLRWeakReference)
  public
    constructor create(para1: OAHICTBasicPoolEntry; para2: JLRReferenceQueue); overload;
    function getRoute(): OAHCRHttpRoute; overload; virtual; final;
  end;

  JNSHttpsURLConnection = class abstract external 'javax.net.ssl' name 'HttpsURLConnection' (JNHttpURLConnection)
  strict protected
    var
      fhostnameVerifier: JNSHostnameVerifier; external name 'hostnameVerifier';
  strict protected
    constructor create(para1: JNURL); overload;
  public
    class procedure setDefaultHostnameVerifier(para1: JNSHostnameVerifier); static; overload;
    class function getDefaultHostnameVerifier(): JNSHostnameVerifier; static; overload;
    class procedure setDefaultSSLSocketFactory(para1: JNSSSLSocketFactory); static; overload;
    class function getDefaultSSLSocketFactory(): JNSSSLSocketFactory; static; overload;
    function getCipherSuite(): JLString; overload; virtual; abstract;
    function getLocalCertificates(): Arr1JSCCertificate; overload; virtual; abstract;
    function getServerCertificates(): Arr1JSCCertificate; overload; virtual; abstract;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getPeerPrincipal(): JSPrincipal; overload; virtual;  // throws javax.net.ssl.SSLPeerUnverifiedException
    function getLocalPrincipal(): JSPrincipal; overload; virtual;
    procedure setHostnameVerifier(para1: JNSHostnameVerifier); overload; virtual;
    function getHostnameVerifier(): JNSHostnameVerifier; overload; virtual;
    procedure setSSLSocketFactory(para1: JNSSSLSocketFactory); overload; virtual;
    function getSSLSocketFactory(): JNSSSLSocketFactory; overload; virtual;
  end;

  JIFilePermission = class sealed external 'java.io' name 'FilePermission' (JSPermission, JISerializable)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JNSocketPermission = class sealed external 'java.net' name 'SocketPermission' (JSPermission, JISerializable)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSAllPermission = class sealed external 'java.security' name 'AllPermission' (JSPermission)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSBasicPermission = class abstract external 'java.security' name 'BasicPermission' (JSPermission, JISerializable)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSUnresolvedPermission = class sealed external 'java.security' name 'UnresolvedPermission' (JSPermission, JISerializable)
  public
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: Arr1JSCCertificate); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLString; const para4: array of JSCCertificate); overload;
    function getUnresolvedName(): JLString; overload; virtual;
    function getUnresolvedActions(): JLString; overload; virtual;
    function getUnresolvedType(): JLString; overload; virtual;
    function getUnresolvedCerts(): Arr1JSCCertificate; overload; virtual;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSAPrivateCredentialPermission = class sealed external 'javax.security.auth' name 'PrivateCredentialPermission' (JSPermission)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getPrincipals(): Arr2JLString; overload; virtual;
    function getCredentialClass(): JLString; overload; virtual;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSIdentityScope = class abstract external 'java.security' name 'IdentityScope' (JSIdentity)
  strict protected
    constructor create(); overload;
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JSIdentityScope); overload;  // throws java.security.KeyManagementException
    class function getSystemScope(): JSIdentityScope; static; overload;
  strict protected
    class procedure setSystemScope(para1: JSIdentityScope); static; overload;
  public
    function size(): jint; overload; virtual; abstract;
    function getIdentity(para1: JLString): JSIdentity; overload; virtual; abstract;
    function getIdentity(para1: JSPrincipal): JSIdentity; overload; virtual;
    function getIdentity(para1: JSPublicKey): JSIdentity; overload; virtual; abstract;
    procedure addIdentity(para1: JSIdentity); overload; virtual; abstract;  // throws java.security.KeyManagementException
    procedure removeIdentity(para1: JSIdentity); overload; virtual; abstract;  // throws java.security.KeyManagementException
    function identities(): JUEnumeration; overload; virtual; abstract;
    function toString(): JLString; overload; virtual;
  end;

  JSSigner = class abstract external 'java.security' name 'Signer' (JSIdentity)
  strict protected
    constructor create(); overload;
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JSIdentityScope); overload;  // throws java.security.KeyManagementException
    function getPrivateKey(): JSPrivateKey; overload; virtual;
    procedure setKeyPair(para1: JSKeyPair); overload; virtual; final;  // throws java.security.InvalidParameterException, java.security.KeyException
    function toString(): JLString; overload; virtual;
  end;

  JSSPKCS8EncodedKeySpec = class external 'java.security.spec' name 'PKCS8EncodedKeySpec' (JSSEncodedKeySpec)
  public
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    function getEncoded(): Arr1jbyte; overload; virtual;
    function getFormat(): JLString; overload; virtual; final;
  end;

  JSSX509EncodedKeySpec = class external 'java.security.spec' name 'X509EncodedKeySpec' (JSSEncodedKeySpec)
  public
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    function getEncoded(): Arr1jbyte; overload; virtual;
    function getFormat(): JLString; overload; virtual; final;
  end;

  JSSRSAMultiPrimePrivateCrtKeySpec = class external 'java.security.spec' name 'RSAMultiPrimePrivateCrtKeySpec' (JSSRSAPrivateKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger; para4: JMBigInteger; para5: JMBigInteger; para6: JMBigInteger; para7: JMBigInteger; para8: JMBigInteger; para9: Arr1JSSRSAOtherPrimeInfo); overload;
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger; para4: JMBigInteger; para5: JMBigInteger; para6: JMBigInteger; para7: JMBigInteger; para8: JMBigInteger; const para9: array of JSSRSAOtherPrimeInfo); overload;
    function getCrtCoefficient(): JMBigInteger; overload; virtual;
    function getOtherPrimeInfo(): Arr1JSSRSAOtherPrimeInfo; overload; virtual;
    function getPrimeExponentP(): JMBigInteger; overload; virtual;
    function getPrimeExponentQ(): JMBigInteger; overload; virtual;
    function getPrimeP(): JMBigInteger; overload; virtual;
    function getPrimeQ(): JMBigInteger; overload; virtual;
    function getPublicExponent(): JMBigInteger; overload; virtual;
  end;

  JSSRSAPrivateCrtKeySpec = class external 'java.security.spec' name 'RSAPrivateCrtKeySpec' (JSSRSAPrivateKeySpec)
  public
    constructor create(para1: JMBigInteger; para2: JMBigInteger; para3: JMBigInteger; para4: JMBigInteger; para5: JMBigInteger; para6: JMBigInteger; para7: JMBigInteger; para8: JMBigInteger); overload;
    function getCrtCoefficient(): JMBigInteger; overload; virtual;
    function getPrimeExponentP(): JMBigInteger; overload; virtual;
    function getPrimeExponentQ(): JMBigInteger; overload; virtual;
    function getPrimeP(): JMBigInteger; overload; virtual;
    function getPrimeQ(): JMBigInteger; overload; virtual;
    function getPublicExponent(): JMBigInteger; overload; virtual;
  end;

  JSRowSet = interface external 'javax.sql' name 'RowSet' (JSResultSet)
    procedure addRowSetListener(para1: JSRowSetListener); overload;
    procedure clearParameters(); overload;  // throws java.sql.SQLException
    procedure execute(); overload;  // throws java.sql.SQLException
    function getCommand(): JLString; overload;
    function getDataSourceName(): JLString; overload;
    function getEscapeProcessing(): jboolean; overload;  // throws java.sql.SQLException
    function getMaxFieldSize(): jint; overload;  // throws java.sql.SQLException
    function getMaxRows(): jint; overload;  // throws java.sql.SQLException
    function getPassword(): JLString; overload;
    function getQueryTimeout(): jint; overload;  // throws java.sql.SQLException
    function getTransactionIsolation(): jint; overload;
    function getTypeMap(): JUMap; overload;  // throws java.sql.SQLException
    function getUrl(): JLString; overload;  // throws java.sql.SQLException
    function getUsername(): JLString; overload;
    function isReadOnly(): jboolean; overload;
    procedure removeRowSetListener(para1: JSRowSetListener); overload;
    procedure setArray(para1: jint; para2: JSArray); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: jint; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: JLString; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setBigDecimal(para1: jint; para2: JMBigDecimal); overload;  // throws java.sql.SQLException
    procedure setBigDecimal(para1: JLString; para2: JMBigDecimal); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: jint; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: JLString; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: jint; para2: JSBlob); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: jint; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: JLString; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: JLString; para2: JSBlob); overload;  // throws java.sql.SQLException
    procedure setBoolean(para1: jint; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setBoolean(para1: JLString; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setByte(para1: jint; para2: jbyte); overload;  // throws java.sql.SQLException
    procedure setByte(para1: JLString; para2: jbyte); overload;  // throws java.sql.SQLException
    procedure setBytes(para1: jint; para2: Arr1jbyte); overload;  // throws java.sql.SQLException
    procedure setBytes(para1: jint; var para2: array of jbyte); overload;  // throws java.sql.SQLException
    procedure setBytes(para1: JLString; para2: Arr1jbyte); overload;  // throws java.sql.SQLException
    procedure setBytes(para1: JLString; var para2: array of jbyte); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: jint; para2: JIReader; para3: jint); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: JLString; para2: JIReader; para3: jint); overload;  // throws java.sql.SQLException
    procedure setClob(para1: jint; para2: JSClob); overload;  // throws java.sql.SQLException
    procedure setClob(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setClob(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setClob(para1: JLString; para2: JSClob); overload;  // throws java.sql.SQLException
    procedure setClob(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setClob(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setCommand(para1: JLString); overload;  // throws java.sql.SQLException
    procedure setConcurrency(para1: jint); overload;  // throws java.sql.SQLException
    procedure setDataSourceName(para1: JLString); overload;  // throws java.sql.SQLException
    procedure setDate(para1: jint; para2: JSDate); overload;  // throws java.sql.SQLException
    procedure setDate(para1: jint; para2: JSDate; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setDate(para1: JLString; para2: JSDate); overload;  // throws java.sql.SQLException
    procedure setDate(para1: JLString; para2: JSDate; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setDouble(para1: jint; para2: jdouble); overload;  // throws java.sql.SQLException
    procedure setDouble(para1: JLString; para2: jdouble); overload;  // throws java.sql.SQLException
    procedure setEscapeProcessing(para1: jboolean); overload;  // throws java.sql.SQLException
    procedure setFloat(para1: jint; para2: jfloat); overload;  // throws java.sql.SQLException
    procedure setFloat(para1: JLString; para2: jfloat); overload;  // throws java.sql.SQLException
    procedure setInt(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setInt(para1: JLString; para2: jint); overload;  // throws java.sql.SQLException
    procedure setLong(para1: jint; para2: jlong); overload;  // throws java.sql.SQLException
    procedure setLong(para1: JLString; para2: jlong); overload;  // throws java.sql.SQLException
    procedure setMaxFieldSize(para1: jint); overload;  // throws java.sql.SQLException
    procedure setMaxRows(para1: jint); overload;  // throws java.sql.SQLException
    procedure setNCharacterStream(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setNCharacterStream(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setNCharacterStream(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setNCharacterStream(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: jint; para2: JSNClob); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: JLString; para2: JSNClob); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setNString(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setNString(para1: JLString; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setNull(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setNull(para1: jint; para2: jint; para3: JLString); overload;  // throws java.sql.SQLException
    procedure setNull(para1: JLString; para2: jint); overload;  // throws java.sql.SQLException
    procedure setNull(para1: JLString; para2: jint; para3: JLString); overload;  // throws java.sql.SQLException
    procedure setObject(para1: jint; para2: JLObject); overload;  // throws java.sql.SQLException
    procedure setObject(para1: jint; para2: JLObject; para3: jint); overload;  // throws java.sql.SQLException
    procedure setObject(para1: jint; para2: JLObject; para3: jint; para4: jint); overload;  // throws java.sql.SQLException
    procedure setObject(para1: JLString; para2: JLObject); overload;  // throws java.sql.SQLException
    procedure setObject(para1: JLString; para2: JLObject; para3: jint); overload;  // throws java.sql.SQLException
    procedure setObject(para1: JLString; para2: JLObject; para3: jint; para4: jint); overload;  // throws java.sql.SQLException
    procedure setPassword(para1: JLString); overload;  // throws java.sql.SQLException
    procedure setQueryTimeout(para1: jint); overload;  // throws java.sql.SQLException
    procedure setReadOnly(para1: jboolean); overload;  // throws java.sql.SQLException
    procedure setRef(para1: jint; para2: JSRef); overload;  // throws java.sql.SQLException
    procedure setShort(para1: jint; para2: jshort); overload;  // throws java.sql.SQLException
    procedure setShort(para1: JLString; para2: jshort); overload;  // throws java.sql.SQLException
    procedure setString(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setString(para1: JLString; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setRowId(para1: jint; para2: JSRowId); overload;  // throws java.sql.SQLException
    procedure setRowId(para1: JLString; para2: JSRowId); overload;  // throws java.sql.SQLException
    procedure setSQLXML(para1: jint; para2: JSSQLXML); overload;  // throws java.sql.SQLException
    procedure setSQLXML(para1: JLString; para2: JSSQLXML); overload;  // throws java.sql.SQLException
    procedure setTime(para1: jint; para2: JSTime); overload;  // throws java.sql.SQLException
    procedure setTime(para1: jint; para2: JSTime; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setTime(para1: JLString; para2: JSTime); overload;  // throws java.sql.SQLException
    procedure setTime(para1: JLString; para2: JSTime; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setTimestamp(para1: jint; para2: JSqlTimestamp); overload;  // throws java.sql.SQLException
    procedure setTimestamp(para1: jint; para2: JSqlTimestamp; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setTimestamp(para1: JLString; para2: JSqlTimestamp); overload;  // throws java.sql.SQLException
    procedure setTimestamp(para1: JLString; para2: JSqlTimestamp; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setTransactionIsolation(para1: jint); overload;  // throws java.sql.SQLException
    procedure setType(para1: jint); overload;  // throws java.sql.SQLException
    procedure setTypeMap(para1: JUMap); overload;  // throws java.sql.SQLException
    procedure setUrl(para1: JLString); overload;  // throws java.sql.SQLException
    procedure setURL_(para1: jint; para2: JNURL); external name 'setURL'; overload;  // throws java.sql.SQLException
    procedure setUsername(para1: JLString); overload;  // throws java.sql.SQLException
  end;

  JSRowSetMetaData = interface external 'javax.sql' name 'RowSetMetaData' (JSResultSetMetaData)
    procedure setAutoIncrement(para1: jint; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setCaseSensitive(para1: jint; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setCatalogName(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setColumnCount(para1: jint); overload;  // throws java.sql.SQLException
    procedure setColumnDisplaySize(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setColumnLabel(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setColumnName(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setColumnType(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setColumnTypeName(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setCurrency(para1: jint; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setNullable(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setPrecision(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setScale(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setSchemaName(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setSearchable(para1: jint; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setSigned(para1: jint; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setTableName(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
  end;

  JSPreparedStatement = interface external 'java.sql' name 'PreparedStatement' (JSStatement)
    procedure addBatch(); overload;  // throws java.sql.SQLException
    procedure clearParameters(); overload;  // throws java.sql.SQLException
    function execute(): jboolean; overload;  // throws java.sql.SQLException
    function executeQuery(): JSResultSet; overload;  // throws java.sql.SQLException
    function executeUpdate(): jint; overload;  // throws java.sql.SQLException
    function getMetaData(): JSResultSetMetaData; overload;  // throws java.sql.SQLException
    function getParameterMetaData(): JSParameterMetaData; overload;  // throws java.sql.SQLException
    procedure setArray(para1: jint; para2: JSArray); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: jint; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setBigDecimal(para1: jint; para2: JMBigDecimal); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: jint; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: jint; para2: JSBlob); overload;  // throws java.sql.SQLException
    procedure setBoolean(para1: jint; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setByte(para1: jint; para2: jbyte); overload;  // throws java.sql.SQLException
    procedure setBytes(para1: jint; para2: Arr1jbyte); overload;  // throws java.sql.SQLException
    procedure setBytes(para1: jint; var para2: array of jbyte); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: jint; para2: JIReader; para3: jint); overload;  // throws java.sql.SQLException
    procedure setClob(para1: jint; para2: JSClob); overload;  // throws java.sql.SQLException
    procedure setDate(para1: jint; para2: JSDate); overload;  // throws java.sql.SQLException
    procedure setDate(para1: jint; para2: JSDate; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setDouble(para1: jint; para2: jdouble); overload;  // throws java.sql.SQLException
    procedure setFloat(para1: jint; para2: jfloat); overload;  // throws java.sql.SQLException
    procedure setInt(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setLong(para1: jint; para2: jlong); overload;  // throws java.sql.SQLException
    procedure setNull(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure setNull(para1: jint; para2: jint; para3: JLString); overload;  // throws java.sql.SQLException
    procedure setObject(para1: jint; para2: JLObject); overload;  // throws java.sql.SQLException
    procedure setObject(para1: jint; para2: JLObject; para3: jint); overload;  // throws java.sql.SQLException
    procedure setObject(para1: jint; para2: JLObject; para3: jint; para4: jint); overload;  // throws java.sql.SQLException
    procedure setRef(para1: jint; para2: JSRef); overload;  // throws java.sql.SQLException
    procedure setShort(para1: jint; para2: jshort); overload;  // throws java.sql.SQLException
    procedure setString(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setTime(para1: jint; para2: JSTime); overload;  // throws java.sql.SQLException
    procedure setTime(para1: jint; para2: JSTime; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setTimestamp(para1: jint; para2: JSqlTimestamp); overload;  // throws java.sql.SQLException
    procedure setTimestamp(para1: jint; para2: JSqlTimestamp; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setUnicodeStream(para1: jint; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setURL(para1: jint; para2: JNURL); overload;  // throws java.sql.SQLException
    procedure setRowId(para1: jint; para2: JSRowId); overload;  // throws java.sql.SQLException
    procedure setNString(para1: jint; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setNCharacterStream(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: jint; para2: JSNClob); overload;  // throws java.sql.SQLException
    procedure setClob(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: jint; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setSQLXML(para1: jint; para2: JSSQLXML); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: jint; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: jint; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: jint; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setNCharacterStream(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setClob(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: jint; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: jint; para2: JIReader); overload;  // throws java.sql.SQLException
  end;

  JUProperties = class external 'java.util' name 'Properties' (JUHashtable)
  strict protected
    var
      fdefaults: JUProperties; external name 'defaults';
  public
    constructor create(); overload;
    constructor create(para1: JUProperties); overload;
    function getProperty(para1: JLString): JLString; overload; virtual;
    function getProperty(para1: JLString; para2: JLString): JLString; overload; virtual;
    procedure list(para1: JIPrintStream); overload; virtual;
    procedure list(para1: JIPrintWriter); overload; virtual;
    procedure load(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    procedure load(para1: JIReader); overload; virtual;  // throws java.io.IOException
    function propertyNames(): JUEnumeration; overload; virtual;
    function stringPropertyNames(): JUSet; overload; virtual;
    procedure save(para1: JIOutputStream; para2: JLString); overload; virtual;
    function setProperty(para1: JLString; para2: JLString): JLObject; overload; virtual;
    procedure store(para1: JIOutputStream; para2: JLString); overload; virtual;  // throws java.io.IOException
    procedure store(para1: JIWriter; para2: JLString); overload; virtual;  // throws java.io.IOException
    procedure loadFromXML(para1: JIInputStream); overload; virtual;  // throws java.io.IOException, java.util.InvalidPropertiesFormatException
    procedure storeToXML(para1: JIOutputStream; para2: JLString); overload; virtual;  // throws java.io.IOException
    procedure storeToXML(para1: JIOutputStream; para2: JLString; para3: JLString); overload; virtual;  // throws java.io.IOException
  end;

  JBPropertyChangeListenerProxy = class external 'java.beans' name 'PropertyChangeListenerProxy' (JUEventListenerProxy, JBPropertyChangeListener)
  public
    constructor create(para1: JLString; para2: JBPropertyChangeListener); overload;
    function getPropertyName(): JLString; overload; virtual;
    procedure propertyChange(para1: JBPropertyChangeEvent); overload; virtual;
  end;

  JUCAbstractExecutorService = class abstract external 'java.util.concurrent' name 'AbstractExecutorService' (JLObject, JUCExecutorService)
  public
    constructor create(); overload;
  strict protected
    function newTaskFor(para1: JLRunnable; para2: JLObject): JUCRunnableFuture; overload; virtual;
    function newTaskFor(para1: JUCCallable): JUCRunnableFuture; overload; virtual;
  public
    function submit(para1: JLRunnable): JUCFuture; overload; virtual;
    function submit(para1: JLRunnable; para2: JLObject): JUCFuture; overload; virtual;
    function submit(para1: JUCCallable): JUCFuture; overload; virtual;
    function invokeAny(para1: JUCollection): JLObject; overload; virtual;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    function invokeAny(para1: JUCollection; para2: jlong; para3: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    function invokeAll(para1: JUCollection): JUList; overload; virtual;  // throws java.lang.InterruptedException
    function invokeAll(para1: JUCollection; para2: jlong; para3: JUCTimeUnit): JUList; overload; virtual;  // throws java.lang.InterruptedException
  end;

  JUCScheduledExecutorService = interface external 'java.util.concurrent' name 'ScheduledExecutorService' (JUCExecutorService)
    function schedule(para1: JLRunnable; para2: jlong; para3: JUCTimeUnit): JUCScheduledFuture; overload;
    function schedule(para1: JUCCallable; para2: jlong; para3: JUCTimeUnit): JUCScheduledFuture; overload;
    function scheduleAtFixedRate(para1: JLRunnable; para2: jlong; para3: jlong; para4: JUCTimeUnit): JUCScheduledFuture; overload;
    function scheduleWithFixedDelay(para1: JLRunnable; para2: jlong; para3: jlong; para4: JUCTimeUnit): JUCScheduledFuture; overload;
  end;

  JUCFutureTask = class external 'java.util.concurrent' name 'FutureTask' (JLObject, JUCRunnableFuture)
  public
    constructor create(para1: JUCCallable); overload;
    constructor create(para1: JLRunnable; para2: JLObject); overload;
    function isCancelled(): jboolean; overload; virtual;
    function isDone(): jboolean; overload; virtual;
    function cancel(para1: jboolean): jboolean; overload; virtual;
    function get(): JLObject; overload; virtual;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    function get(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
  strict protected
    procedure done(); overload; virtual;
    procedure &set(para1: JLObject); overload; virtual;
    procedure setException(para1: JLThrowable); overload; virtual;
  public
    procedure run(); overload; virtual;
  strict protected
    function runAndReset(): jboolean; overload; virtual;
  end;

  JULConsoleHandler = class external 'java.util.logging' name 'ConsoleHandler' (JULStreamHandler)
  public
    constructor create(); overload;
    procedure close(); overload; virtual;
    procedure publish(para1: JULLogRecord); overload; virtual;
  end;

  JULFileHandler = class external 'java.util.logging' name 'FileHandler' (JULStreamHandler)
  public
    constructor create(); overload;  // throws java.io.IOException
    constructor create(para1: JLString); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: jboolean); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: jint; para3: jint); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: jint; para3: jint; para4: jboolean); overload;  // throws java.io.IOException
    procedure close(); overload; virtual;
    procedure publish(para1: JULLogRecord); overload; virtual;
  end;

  JULSocketHandler = class external 'java.util.logging' name 'SocketHandler' (JULStreamHandler)
  public
    constructor create(); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: jint); overload;  // throws java.io.IOException
    procedure close(); overload; virtual;
    procedure publish(para1: JULLogRecord); overload; virtual;
  end;

  JMKEEGL11 = interface external 'javax.microedition.khronos.egl' name 'EGL11' (JMKEEGL10)
    const
      EGL_CONTEXT_LOST = 12302;
  end;

  JMKOGL11 = interface external 'javax.microedition.khronos.opengles' name 'GL11' (JMKOGL10)
    const
      GL_ACTIVE_TEXTURE = 34016;
      GL_ADD_SIGNED = 34164;
      GL_ALPHA_SCALE = 3356;
      GL_ALPHA_TEST_FUNC = 3009;
      GL_ALPHA_TEST_REF = 3010;
      GL_ARRAY_BUFFER = 34962;
      GL_ARRAY_BUFFER_BINDING = 34964;
      GL_BLEND_DST = 3040;
      GL_BLEND_SRC = 3041;
      GL_BUFFER_ACCESS = 35003;
      GL_BUFFER_SIZE = 34660;
      GL_BUFFER_USAGE = 34661;
      GL_CLIENT_ACTIVE_TEXTURE = 34017;
      GL_CLIP_PLANE0 = 12288;
      GL_CLIP_PLANE1 = 12289;
      GL_CLIP_PLANE2 = 12290;
      GL_CLIP_PLANE3 = 12291;
      GL_CLIP_PLANE4 = 12292;
      GL_CLIP_PLANE5 = 12293;
      GL_COLOR_ARRAY_BUFFER_BINDING = 34968;
      GL_COLOR_ARRAY_POINTER = 32912;
      GL_COLOR_ARRAY_SIZE = 32897;
      GL_COLOR_ARRAY_STRIDE = 32899;
      GL_COLOR_ARRAY_TYPE = 32898;
      GL_COLOR_CLEAR_VALUE = 3106;
      GL_COLOR_WRITEMASK = 3107;
      GL_COMBINE = 34160;
      GL_COMBINE_ALPHA = 34162;
      GL_COMBINE_RGB = 34161;
      GL_CONSTANT = 34166;
      GL_COORD_REPLACE_OES = 34914;
      GL_CULL_FACE_MODE = 2885;
      GL_CURRENT_COLOR = 2816;
      GL_CURRENT_NORMAL = 2818;
      GL_CURRENT_TEXTURE_COORDS = 2819;
      GL_DEPTH_CLEAR_VALUE = 2931;
      GL_DEPTH_FUNC = 2932;
      GL_DEPTH_RANGE = 2928;
      GL_DEPTH_WRITEMASK = 2930;
      GL_DOT3_RGB = 34478;
      GL_DOT3_RGBA = 34479;
      GL_DYNAMIC_DRAW = 35048;
      GL_ELEMENT_ARRAY_BUFFER = 34963;
      GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
      GL_FRONT_FACE = 2886;
      GL_GENERATE_MIPMAP = 33169;
      GL_GENERATE_MIPMAP_HINT = 33170;
      GL_INTERPOLATE = 34165;
      GL_LINE_WIDTH = 2849;
      GL_LOGIC_OP_MODE = 3056;
      GL_MATRIX_MODE = 2976;
      GL_MAX_CLIP_PLANES = 3378;
      GL_MODELVIEW_MATRIX = 2982;
      GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 35213;
      GL_MODELVIEW_STACK_DEPTH = 2979;
      GL_NORMAL_ARRAY_BUFFER_BINDING = 34967;
      GL_NORMAL_ARRAY_POINTER = 32911;
      GL_NORMAL_ARRAY_STRIDE = 32895;
      GL_NORMAL_ARRAY_TYPE = 32894;
      GL_OPERAND0_ALPHA = 34200;
      GL_OPERAND0_RGB = 34192;
      GL_OPERAND1_ALPHA = 34201;
      GL_OPERAND1_RGB = 34193;
      GL_OPERAND2_ALPHA = 34202;
      GL_OPERAND2_RGB = 34194;
      GL_POINT_DISTANCE_ATTENUATION = 33065;
      GL_POINT_FADE_THRESHOLD_SIZE = 33064;
      GL_POINT_SIZE = 2833;
      GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 35743;
      GL_POINT_SIZE_ARRAY_OES = 35740;
      GL_POINT_SIZE_ARRAY_POINTER_OES = 35212;
      GL_POINT_SIZE_ARRAY_STRIDE_OES = 35211;
      GL_POINT_SIZE_ARRAY_TYPE_OES = 35210;
      GL_POINT_SIZE_MAX = 33063;
      GL_POINT_SIZE_MIN = 33062;
      GL_POINT_SPRITE_OES = 34913;
      GL_POLYGON_OFFSET_FACTOR = 32824;
      GL_POLYGON_OFFSET_UNITS = 10752;
      GL_PREVIOUS = 34168;
      GL_PRIMARY_COLOR = 34167;
      GL_PROJECTION_MATRIX = 2983;
      GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 35214;
      GL_PROJECTION_STACK_DEPTH = 2980;
      GL_RGB_SCALE = 34163;
      GL_SAMPLES = 32937;
      GL_SAMPLE_BUFFERS = 32936;
      GL_SAMPLE_COVERAGE_INVERT = 32939;
      GL_SAMPLE_COVERAGE_VALUE = 32938;
      GL_SCISSOR_BOX = 3088;
      GL_SHADE_MODEL = 2900;
      GL_SRC0_ALPHA = 34184;
      GL_SRC0_RGB = 34176;
      GL_SRC1_ALPHA = 34185;
      GL_SRC1_RGB = 34177;
      GL_SRC2_ALPHA = 34186;
      GL_SRC2_RGB = 34178;
      GL_STATIC_DRAW = 35044;
      GL_STENCIL_CLEAR_VALUE = 2961;
      GL_STENCIL_FAIL = 2964;
      GL_STENCIL_FUNC = 2962;
      GL_STENCIL_PASS_DEPTH_FAIL = 2965;
      GL_STENCIL_PASS_DEPTH_PASS = 2966;
      GL_STENCIL_REF = 2967;
      GL_STENCIL_VALUE_MASK = 2963;
      GL_STENCIL_WRITEMASK = 2968;
      GL_SUBTRACT = 34023;
      GL_TEXTURE_BINDING_2D = 32873;
      GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;
      GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
      GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
      GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
      GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
      GL_TEXTURE_MATRIX = 2984;
      GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 35215;
      GL_TEXTURE_STACK_DEPTH = 2981;
      GL_VERTEX_ARRAY_BUFFER_BINDING = 34966;
      GL_VERTEX_ARRAY_POINTER = 32910;
      GL_VERTEX_ARRAY_SIZE = 32890;
      GL_VERTEX_ARRAY_STRIDE = 32892;
      GL_VERTEX_ARRAY_TYPE = 32891;
      GL_VIEWPORT = 2978;
      GL_WRITE_ONLY = 35001;
    procedure glGetPointerv(para1: jint; para2: Arr1JNBuffer); overload;
    procedure glGetPointerv(para1: jint; var para2: array of JNBuffer); overload;
    procedure glBindBuffer(para1: jint; para2: jint); overload;
    procedure glBufferData(para1: jint; para2: jint; para3: JNBuffer; para4: jint); overload;
    procedure glBufferSubData(para1: jint; para2: jint; para3: jint; para4: JNBuffer); overload;
    procedure glClipPlanef(para1: jint; para2: Arr1jfloat; para3: jint); overload;
    procedure glClipPlanef(para1: jint; var para2: array of jfloat; para3: jint); overload;
    procedure glClipPlanef(para1: jint; para2: JNFloatBuffer); overload;
    procedure glClipPlanex(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glClipPlanex(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glClipPlanex(para1: jint; para2: JNIntBuffer); overload;
    procedure glColor4ub(para1: jbyte; para2: jbyte; para3: jbyte; para4: jbyte); overload;
    procedure glColorPointer(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glDeleteBuffers(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glDeleteBuffers(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glDeleteBuffers(para1: jint; para2: JNIntBuffer); overload;
    procedure glDrawElements(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glGenBuffers(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glGenBuffers(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glGenBuffers(para1: jint; para2: JNIntBuffer); overload;
    procedure glGetBooleanv(para1: jint; para2: Arr1jboolean; para3: jint); overload;
    procedure glGetBooleanv(para1: jint; var para2: array of jboolean; para3: jint); overload;
    procedure glGetBooleanv(para1: jint; para2: JNIntBuffer); overload;
    procedure glGetBufferParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetBufferParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetBufferParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glGetClipPlanef(para1: jint; para2: Arr1jfloat; para3: jint); overload;
    procedure glGetClipPlanef(para1: jint; var para2: array of jfloat; para3: jint); overload;
    procedure glGetClipPlanef(para1: jint; para2: JNFloatBuffer); overload;
    procedure glGetClipPlanex(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glGetClipPlanex(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glGetClipPlanex(para1: jint; para2: JNIntBuffer); overload;
    procedure glGetFixedv(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glGetFixedv(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glGetFixedv(para1: jint; para2: JNIntBuffer); overload;
    procedure glGetFloatv(para1: jint; para2: Arr1jfloat; para3: jint); overload;
    procedure glGetFloatv(para1: jint; var para2: array of jfloat; para3: jint); overload;
    procedure glGetFloatv(para1: jint; para2: JNFloatBuffer); overload;
    procedure glGetLightfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glGetLightfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glGetLightfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glGetLightxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetLightxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetLightxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glGetMaterialfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glGetMaterialfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glGetMaterialfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glGetMaterialxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetMaterialxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetMaterialxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glGetTexEnviv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetTexEnviv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetTexEnviv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glGetTexEnvxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetTexEnvxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetTexEnvxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glGetTexParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glGetTexParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glGetTexParameterfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glGetTexParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetTexParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetTexParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glGetTexParameterxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glGetTexParameterxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glGetTexParameterxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    function glIsBuffer(para1: jint): jboolean; overload;
    function glIsEnabled(para1: jint): jboolean; overload;
    function glIsTexture(para1: jint): jboolean; overload;
    procedure glNormalPointer(para1: jint; para2: jint; para3: jint); overload;
    procedure glPointParameterf(para1: jint; para2: jfloat); overload;
    procedure glPointParameterfv(para1: jint; para2: Arr1jfloat; para3: jint); overload;
    procedure glPointParameterfv(para1: jint; var para2: array of jfloat; para3: jint); overload;
    procedure glPointParameterfv(para1: jint; para2: JNFloatBuffer); overload;
    procedure glPointParameterx(para1: jint; para2: jint); overload;
    procedure glPointParameterxv(para1: jint; para2: Arr1jint; para3: jint); overload;
    procedure glPointParameterxv(para1: jint; var para2: array of jint; para3: jint); overload;
    procedure glPointParameterxv(para1: jint; para2: JNIntBuffer); overload;
    procedure glPointSizePointerOES(para1: jint; para2: jint; para3: JNBuffer); overload;
    procedure glTexCoordPointer(para1: jint; para2: jint; para3: jint; para4: jint); overload;
    procedure glTexEnvi(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexEnviv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glTexEnviv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glTexEnviv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glTexParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); overload;
    procedure glTexParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); overload;
    procedure glTexParameterfv(para1: jint; para2: jint; para3: JNFloatBuffer); overload;
    procedure glTexParameteri(para1: jint; para2: jint; para3: jint); overload;
    procedure glTexParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glTexParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glTexParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glTexParameterxv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); overload;
    procedure glTexParameterxv(para1: jint; para2: jint; var para3: array of jint; para4: jint); overload;
    procedure glTexParameterxv(para1: jint; para2: jint; para3: JNIntBuffer); overload;
    procedure glVertexPointer(para1: jint; para2: jint; para3: jint; para4: jint); overload;
  end;

  ANSSLCertificateSocketFactory = class external 'android.net' name 'SSLCertificateSocketFactory' (JNSSSLSocketFactory)
  public
    constructor create(para1: jint); overload;
    class function getDefault(para1: jint): JNSocketFactory; static; overload;
    class function getDefault(para1: jint; para2: ANSSLSessionCache): JNSSSLSocketFactory; static; overload;
    class function getInsecure(para1: jint; para2: ANSSLSessionCache): JNSSSLSocketFactory; static; overload;
    class function getHttpSocketFactory(para1: jint; para2: ANSSLSessionCache): OAHCSSSLSocketFactory; static; overload;
    procedure setTrustManagers(para1: Arr1JNSTrustManager); overload; virtual;
    procedure setTrustManagers(var para1: array of JNSTrustManager); overload; virtual;
    procedure setNpnProtocols(para1: Arr2jbyte); overload; virtual;
    function getNpnSelectedProtocol(para1: JNSocket): Arr1jbyte; overload; virtual;
    procedure setKeyManagers(para1: Arr1JNSKeyManager); overload; virtual;
    procedure setKeyManagers(var para1: array of JNSKeyManager); overload; virtual;
    procedure setUseSessionTickets(para1: JNSocket; para2: jboolean); overload; virtual;
    procedure setHostname(para1: JNSocket; para2: JLString); overload; virtual;
    function createSocket(para1: JNSocket; para2: JLString; para3: jint; para4: jboolean): JNSocket; overload; virtual;  // throws java.io.IOException
    function createSocket(): JNSocket; overload; virtual;  // throws java.io.IOException
    function createSocket(para1: JNInetAddress; para2: jint; para3: JNInetAddress; para4: jint): JNSocket; overload; virtual;  // throws java.io.IOException
    function createSocket(para1: JNInetAddress; para2: jint): JNSocket; overload; virtual;  // throws java.io.IOException
    function createSocket(para1: JLString; para2: jint; para3: JNInetAddress; para4: jint): JNSocket; overload; virtual;  // throws java.io.IOException
    function createSocket(para1: JLString; para2: jint): JNSocket; overload; virtual;  // throws java.io.IOException
    function getDefaultCipherSuites(): Arr1JLString; overload; virtual;
    function getSupportedCipherSuites(): Arr1JLString; overload; virtual;
  end;

  OAHCSAbstractVerifier = class abstract external 'org.apache.http.conn.ssl' name 'AbstractVerifier' (JLObject, OAHCSX509HostnameVerifier)
  public
    constructor create(); overload;
    procedure verify(para1: JLString; para2: JNSSSLSocket); overload; virtual; final;  // throws java.io.IOException
    function verify(para1: JLString; para2: JNSSSLSession): jboolean; overload; virtual; final;
    procedure verify(para1: JLString; para2: JSCX509Certificate); overload; virtual; final;  // throws javax.net.ssl.SSLException
    procedure verify(para1: JLString; para2: Arr1JLString; para3: Arr1JLString; para4: jboolean); overload; virtual; final;  // throws javax.net.ssl.SSLException
    procedure verify(para1: JLString; var para2: array of JLString; var para3: array of JLString; para4: jboolean); overload; virtual; final;  // throws javax.net.ssl.SSLException
    class function acceptableCountryWildcard(para1: JLString): jboolean; static; overload;
    class function getCNs(para1: JSCX509Certificate): Arr1JLString; static; overload;
    class function getDNSSubjectAlts(para1: JSCX509Certificate): Arr1JLString; static; overload;
    class function countDots(para1: JLString): jint; static; overload;
  end;

  JNSX509ExtendedKeyManager = class abstract external 'javax.net.ssl' name 'X509ExtendedKeyManager' (JLObject, JNSX509KeyManager)
  strict protected
    constructor create(); overload;
  public
    function chooseEngineClientAlias(para1: Arr1JLString; para2: Arr1JSPrincipal; para3: JNSSSLEngine): JLString; overload; virtual;
    function chooseEngineClientAlias(var para1: array of JLString; var para2: array of JSPrincipal; para3: JNSSSLEngine): JLString; overload; virtual;
    function chooseEngineServerAlias(para1: JLString; para2: Arr1JSPrincipal; para3: JNSSSLEngine): JLString; overload; virtual;
    function chooseEngineServerAlias(para1: JLString; var para2: array of JSPrincipal; para3: JNSSSLEngine): JLString; overload; virtual;
  end;

  JSKeyStoreSpi = class abstract external 'java.security' name 'KeyStoreSpi' (JLObject)
  public
    constructor create(); overload;
    function engineGetKey(para1: JLString; para2: Arr1jchar): JSKey; overload; virtual; abstract;  // throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    function engineGetKey(para1: JLString; var para2: array of jchar): JSKey; overload; virtual; abstract;  // throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    function engineGetCertificateChain(para1: JLString): Arr1JSCCertificate; overload; virtual; abstract;
    function engineGetCertificate(para1: JLString): JSCCertificate; overload; virtual; abstract;
    function engineGetCreationDate(para1: JLString): JUDate; overload; virtual; abstract;
    procedure engineSetKeyEntry(para1: JLString; para2: JSKey; para3: Arr1jchar; para4: Arr1JSCCertificate); overload; virtual; abstract;  // throws java.security.KeyStoreException
    procedure engineSetKeyEntry(para1: JLString; para2: JSKey; var para3: array of jchar; var para4: array of JSCCertificate); overload; virtual; abstract;  // throws java.security.KeyStoreException
    procedure engineSetKeyEntry(para1: JLString; para2: Arr1jbyte; para3: Arr1JSCCertificate); overload; virtual; abstract;  // throws java.security.KeyStoreException
    procedure engineSetKeyEntry(para1: JLString; var para2: array of jbyte; var para3: array of JSCCertificate); overload; virtual; abstract;  // throws java.security.KeyStoreException
    procedure engineSetCertificateEntry(para1: JLString; para2: JSCCertificate); overload; virtual; abstract;  // throws java.security.KeyStoreException
    procedure engineDeleteEntry(para1: JLString); overload; virtual; abstract;  // throws java.security.KeyStoreException
    function engineAliases(): JUEnumeration; overload; virtual; abstract;
    function engineContainsAlias(para1: JLString): jboolean; overload; virtual; abstract;
    function engineSize(): jint; overload; virtual; abstract;
    function engineIsKeyEntry(para1: JLString): jboolean; overload; virtual; abstract;
    function engineIsCertificateEntry(para1: JLString): jboolean; overload; virtual; abstract;
    function engineGetCertificateAlias(para1: JSCCertificate): JLString; overload; virtual; abstract;
    procedure engineStore(para1: JIOutputStream; para2: Arr1jchar); overload; virtual; abstract;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure engineStore(para1: JIOutputStream; var para2: array of jchar); overload; virtual; abstract;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure engineStore(para1: JSKeyStore.InnerLoadStoreParameter); overload; virtual;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure engineLoad(para1: JIInputStream; para2: Arr1jchar); overload; virtual; abstract;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure engineLoad(para1: JIInputStream; var para2: array of jchar); overload; virtual; abstract;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    procedure engineLoad(para1: JSKeyStore.InnerLoadStoreParameter); overload; virtual;  // throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    function engineGetEntry(para1: JLString; para2: JSKeyStore.InnerProtectionParameter): JSKeyStore.InnerEntry; overload; virtual;  // throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException
    procedure engineSetEntry(para1: JLString; para2: JSKeyStore.InnerEntry; para3: JSKeyStore.InnerProtectionParameter); overload; virtual;  // throws java.security.KeyStoreException
    function engineEntryInstanceOf(para1: JLString; para2: JLClass): jboolean; overload; virtual;
  end;

  JNSKeyStoreBuilderParameters = class external 'javax.net.ssl' name 'KeyStoreBuilderParameters' (JLObject, JNSManagerFactoryParameters)
  public
    constructor create(para1: JSKeyStore.InnerBuilder); overload;
    constructor create(para1: JUList); overload;
    function getParameters(): JUList; overload; virtual;
  end;

  ATAndroidTestCase = class external 'android.test' name 'AndroidTestCase' (JFTestCase)
  strict protected
    var
      fmContext: ACContext; external name 'mContext';
  public
    constructor create(); overload;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    procedure testAndroidTestCaseSetupProperly(); overload; virtual;
    procedure setContext(para1: ACContext); overload; virtual;
    function getContext(): ACContext; overload; virtual;
    procedure assertActivityRequiresPermission(para1: JLString; para2: JLString; para3: JLString); overload; virtual;
    procedure assertReadingContentUriRequiresPermission(para1: ANUri; para2: JLString); overload; virtual;
    procedure assertWritingContentUriRequiresPermission(para1: ANUri; para2: JLString); overload; virtual;
  strict protected
    procedure scrubClass(para1: JLClass); overload; virtual;  // throws java.lang.IllegalAccessException
  end;

  ATInstrumentationTestCase = class external 'android.test' name 'InstrumentationTestCase' (JFTestCase)
  public
    constructor create(); overload;
    procedure injectInstrumentation(para1: AAInstrumentation); overload; virtual;
    procedure injectInsrumentation(para1: AAInstrumentation); overload; virtual;
    function getInstrumentation(): AAInstrumentation; overload; virtual;
    function launchActivity(para1: JLString; para2: JLClass; para3: AOBundle): AAActivity; overload; virtual; final;
    function launchActivityWithIntent(para1: JLString; para2: JLClass; para3: ACIntent): AAActivity; overload; virtual; final;
    procedure runTestOnUiThread(para1: JLRunnable); overload; virtual;  // throws java.lang.Throwable
  strict protected
    procedure runTest(); overload; virtual;  // throws java.lang.Throwable
  public
    procedure sendKeys(para1: JLString); overload; virtual;
    procedure sendKeys(para1: Arr1jint); overload; virtual;
    procedure sendKeys(const para1: array of jint); overload; virtual;
    procedure sendRepeatedKeys(para1: Arr1jint); overload; virtual;
    procedure sendRepeatedKeys(const para1: array of jint); overload; virtual;
  strict protected
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  end;

  ATSTestSuiteBuilder = class external 'android.test.suitebuilder' name 'TestSuiteBuilder' (JLObject)
  public
    type
      InnerFailedToCreateTests = class;
      Arr1InnerFailedToCreateTests = array of InnerFailedToCreateTests;
      Arr2InnerFailedToCreateTests = array of Arr1InnerFailedToCreateTests;
      Arr3InnerFailedToCreateTests = array of Arr2InnerFailedToCreateTests;
      InnerFailedToCreateTests = class external 'android.test.suitebuilder' name 'FailedToCreateTests' (JFTestCase)
      public
        constructor create(para1: JLException); overload;
        procedure testSuiteConstructionFailed(); overload; virtual;
      end;

  public
    constructor create(para1: JLClass); overload;
    constructor create(para1: JLString; para2: JLClassLoader); overload;
    function includePackages(para1: Arr1JLString): ATSTestSuiteBuilder; overload; virtual;
    function includePackages(const para1: array of JLString): ATSTestSuiteBuilder; overload; virtual;
    function excludePackages(para1: Arr1JLString): ATSTestSuiteBuilder; overload; virtual;
    function excludePackages(const para1: array of JLString): ATSTestSuiteBuilder; overload; virtual;
    function addRequirements(para1: JUList): ATSTestSuiteBuilder; overload; virtual;
    function includeAllPackagesUnderHere(): ATSTestSuiteBuilder; overload; virtual; final;
    function named(para1: JLString): ATSTestSuiteBuilder; overload; virtual;
    function build(): JFTestSuite; overload; virtual; final;
  strict protected
    function getSuiteName(): JLString; overload; virtual;
  public
    function addRequirements(para1: Arr1CAIUPredicate): ATSTestSuiteBuilder; overload; virtual; final;
    function addRequirements(const para1: array of CAIUPredicate): ATSTestSuiteBuilder; overload; virtual; final;
  end;

  ATInstrumentationTestSuite = class external 'android.test' name 'InstrumentationTestSuite' (JFTestSuite)
  public
    constructor create(para1: AAInstrumentation); overload;
    constructor create(para1: JLString; para2: AAInstrumentation); overload;
    constructor create(para1: JLClass; para2: AAInstrumentation); overload;
    procedure addTestSuite(para1: JLClass); overload; virtual;
    procedure runTest(para1: JFTest; para2: JFTestResult); overload; virtual;
  end;

  ATAndroidTestRunner = class external 'android.test' name 'AndroidTestRunner' (JRBaseTestRunner)
  public
    constructor create(); overload;
    procedure setTestClassName(para1: JLString; para2: JLString); overload; virtual;
    procedure setTest(para1: JFTest); overload; virtual;
    procedure clearTestListeners(); overload; virtual;
    procedure addTestListener(para1: JFTestListener); overload; virtual;
  strict protected
    function createTestResult(): JFTestResult; overload; virtual;
  public
    function getTestCases(): JUList; overload; virtual;
    function getTestClassName(): JLString; overload; virtual;
    function getTestResult(): JFTestResult; overload; virtual;
    procedure runTest(); overload; virtual;
    procedure runTest(para1: JFTestResult); overload; virtual;
    procedure setContext(para1: ACContext); overload; virtual;
    procedure setInstrumentation(para1: AAInstrumentation); overload; virtual;
    procedure setInstrumentaiton(para1: AAInstrumentation); overload; virtual;
  strict protected
    function loadSuiteClass(para1: JLString): JLClass; overload; virtual;  // throws java.lang.ClassNotFoundException
  public
    procedure testStarted(para1: JLString); overload; virtual;
    procedure testEnded(para1: JLString); overload; virtual;
    procedure testFailed(para1: jint; para2: JFTest; para3: JLThrowable); overload; virtual;
  strict protected
    procedure runFailed(para1: JLString); overload; virtual;
  end;

  OAHMBufferedHeader = class external 'org.apache.http.message' name 'BufferedHeader' (JLObject, OAHFormattedHeader, JLCloneable)
  public
    constructor create(para1: OAHUCharArrayBuffer); overload;  // throws org.apache.http.ParseException
    function getName(): JLString; overload; virtual;
    function getValue(): JLString; overload; virtual;
    function getElements(): Arr1OAHHeaderElement; overload; virtual;  // throws org.apache.http.ParseException
    function getValuePos(): jint; overload; virtual;
    function getBuffer(): OAHUCharArrayBuffer; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHIAbstractHttpClientConnection = class abstract external 'org.apache.http.impl' name 'AbstractHttpClientConnection' (JLObject, OAHHttpClientConnection)
  public
    constructor create(); overload;
  strict protected
    procedure assertOpen(); overload; virtual; abstract;  // throws java.lang.IllegalStateException
    function createEntityDeserializer(): OAHIEEntityDeserializer; overload; virtual;
    function createEntitySerializer(): OAHIEEntitySerializer; overload; virtual;
    function createHttpResponseFactory(): OAHHttpResponseFactory; overload; virtual;
    function createResponseParser(para1: OAHISessionInputBuffer; para2: OAHHttpResponseFactory; para3: OAHPHttpParams): OAHIHttpMessageParser; overload; virtual;
    function createRequestWriter(para1: OAHISessionOutputBuffer; para2: OAHPHttpParams): OAHIHttpMessageWriter; overload; virtual;
    procedure init(para1: OAHISessionInputBuffer; para2: OAHISessionOutputBuffer; para3: OAHPHttpParams); overload; virtual;
  public
    function isResponseAvailable(para1: jint): jboolean; overload; virtual;  // throws java.io.IOException
    procedure sendRequestHeader(para1: OAHHttpRequest); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    procedure sendRequestEntity(para1: OAHHttpEntityEnclosingRequest); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  strict protected
    procedure doFlush(); overload; virtual;  // throws java.io.IOException
  public
    procedure flush(); overload; virtual;  // throws java.io.IOException
    function receiveResponseHeader(): OAHHttpResponse; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    procedure receiveResponseEntity(para1: OAHHttpResponse); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    function isStale(): jboolean; overload; virtual;
    function getMetrics(): OAHHttpConnectionMetrics; overload; virtual;
  end;

  OAHCManagedClientConnection = interface external 'org.apache.http.conn' name 'ManagedClientConnection' (OAHHttpClientConnection, OAHHttpInetConnection, OAHCConnectionReleaseTrigger)
    function isSecure(): jboolean; overload;
    function getRoute(): OAHCRHttpRoute; overload;
    function getSSLSession(): JNSSSLSession; overload;
    procedure open(para1: OAHCRHttpRoute; para2: OAHPHttpContext; para3: OAHPHttpParams); overload;  // throws java.io.IOException
    procedure tunnelTarget(para1: jboolean; para2: OAHPHttpParams); overload;  // throws java.io.IOException
    procedure tunnelProxy(para1: OAHHttpHost; para2: jboolean; para3: OAHPHttpParams); overload;  // throws java.io.IOException
    procedure layerProtocol(para1: OAHPHttpContext; para2: OAHPHttpParams); overload;  // throws java.io.IOException
    procedure markReusable(); overload;
    procedure unmarkReusable(); overload;
    function isMarkedReusable(): jboolean; overload;
    procedure setState(para1: JLObject); overload;
    function getState(): JLObject; overload;
    procedure setIdleDuration(para1: jlong; para2: JUCTimeUnit); overload;
  end;

  OAHCOperatedClientConnection = interface external 'org.apache.http.conn' name 'OperatedClientConnection' (OAHHttpClientConnection, OAHHttpInetConnection)
    function getTargetHost(): OAHHttpHost; overload;
    function isSecure(): jboolean; overload;
    function getSocket(): JNSocket; overload;
    procedure opening(para1: JNSocket; para2: OAHHttpHost); overload;  // throws java.io.IOException
    procedure openCompleted(para1: jboolean; para2: OAHPHttpParams); overload;  // throws java.io.IOException
    procedure update(para1: JNSocket; para2: OAHHttpHost; para3: jboolean; para4: OAHPHttpParams); overload;  // throws java.io.IOException
  end;

  OAHIAbstractHttpServerConnection = class abstract external 'org.apache.http.impl' name 'AbstractHttpServerConnection' (JLObject, OAHHttpServerConnection)
  public
    constructor create(); overload;
  strict protected
    procedure assertOpen(); overload; virtual; abstract;  // throws java.lang.IllegalStateException
    function createEntityDeserializer(): OAHIEEntityDeserializer; overload; virtual;
    function createEntitySerializer(): OAHIEEntitySerializer; overload; virtual;
    function createHttpRequestFactory(): OAHHttpRequestFactory; overload; virtual;
    function createRequestParser(para1: OAHISessionInputBuffer; para2: OAHHttpRequestFactory; para3: OAHPHttpParams): OAHIHttpMessageParser; overload; virtual;
    function createResponseWriter(para1: OAHISessionOutputBuffer; para2: OAHPHttpParams): OAHIHttpMessageWriter; overload; virtual;
    procedure init(para1: OAHISessionInputBuffer; para2: OAHISessionOutputBuffer; para3: OAHPHttpParams); overload; virtual;
  public
    function receiveRequestHeader(): OAHHttpRequest; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    procedure receiveRequestEntity(para1: OAHHttpEntityEnclosingRequest); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  strict protected
    procedure doFlush(); overload; virtual;  // throws java.io.IOException
  public
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure sendResponseHeader(para1: OAHHttpResponse); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    procedure sendResponseEntity(para1: OAHHttpResponse); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    function isStale(): jboolean; overload; virtual;
    function getMetrics(): OAHHttpConnectionMetrics; overload; virtual;
  end;

  OAHEBasicHttpEntity = class external 'org.apache.http.entity' name 'BasicHttpEntity' (OAHEAbstractHttpEntity)
  public
    constructor create(); overload;
    function getContentLength(): jlong; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;  // throws java.lang.IllegalStateException
    function isRepeatable(): jboolean; overload; virtual;
    procedure setContentLength(para1: jlong); overload; virtual;
    procedure setContent(para1: JIInputStream); overload; virtual;
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function isStreaming(): jboolean; overload; virtual;
    procedure consumeContent(); overload; virtual;  // throws java.io.IOException
  end;

  OAHEByteArrayEntity = class external 'org.apache.http.entity' name 'ByteArrayEntity' (OAHEAbstractHttpEntity, JLCloneable)
  strict protected
    final var
      fcontent: Arr1jbyte; external name 'content';
  public
    constructor create(para1: Arr1jbyte); overload;
    constructor create(const para1: array of jbyte); overload;
    function isRepeatable(): jboolean; overload; virtual;
    function getContentLength(): jlong; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function isStreaming(): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHEEntityTemplate = class external 'org.apache.http.entity' name 'EntityTemplate' (OAHEAbstractHttpEntity)
  public
    constructor create(para1: OAHEContentProducer); overload;
    function getContentLength(): jlong; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;
    function isRepeatable(): jboolean; overload; virtual;
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function isStreaming(): jboolean; overload; virtual;
    procedure consumeContent(); overload; virtual;  // throws java.io.IOException
  end;

  OAHEFileEntity = class external 'org.apache.http.entity' name 'FileEntity' (OAHEAbstractHttpEntity, JLCloneable)
  strict protected
    final var
      ffile: JIFile; external name 'file';
  public
    constructor create(para1: JIFile; para2: JLString); overload;
    function isRepeatable(): jboolean; overload; virtual;
    function getContentLength(): jlong; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;  // throws java.io.IOException
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function isStreaming(): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHEInputStreamEntity = class external 'org.apache.http.entity' name 'InputStreamEntity' (OAHEAbstractHttpEntity)
  public
    constructor create(para1: JIInputStream; para2: jlong); overload;
    function isRepeatable(): jboolean; overload; virtual;
    function getContentLength(): jlong; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;  // throws java.io.IOException
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function isStreaming(): jboolean; overload; virtual;
    procedure consumeContent(); overload; virtual;  // throws java.io.IOException
  end;

  OAHESerializableEntity = class external 'org.apache.http.entity' name 'SerializableEntity' (OAHEAbstractHttpEntity)
  public
    constructor create(para1: JISerializable; para2: jboolean); overload;  // throws java.io.IOException
    function getContent(): JIInputStream; overload; virtual;  // throws java.io.IOException, java.lang.IllegalStateException
    function getContentLength(): jlong; overload; virtual;
    function isRepeatable(): jboolean; overload; virtual;
    function isStreaming(): jboolean; overload; virtual;
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
  end;

  OAHEStringEntity = class external 'org.apache.http.entity' name 'StringEntity' (OAHEAbstractHttpEntity, JLCloneable)
  strict protected
    final var
      fcontent: Arr1jbyte; external name 'content';
  public
    constructor create(para1: JLString; para2: JLString); overload;  // throws java.io.UnsupportedEncodingException
    constructor create(para1: JLString); overload;  // throws java.io.UnsupportedEncodingException
    function isRepeatable(): jboolean; overload; virtual;
    function getContentLength(): jlong; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;  // throws java.io.IOException
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function isStreaming(): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHCBasicManagedEntity = class external 'org.apache.http.conn' name 'BasicManagedEntity' (OAHEHttpEntityWrapper, OAHCConnectionReleaseTrigger, OAHCEofSensorWatcher)
  strict protected
    final var
      fattemptReuse: jboolean; external name 'attemptReuse';
  strict protected
    var
      fmanagedConn: OAHCManagedClientConnection; external name 'managedConn';
  public
    constructor create(para1: OAHHttpEntity; para2: OAHCManagedClientConnection; para3: jboolean); overload;
    function isRepeatable(): jboolean; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;  // throws java.io.IOException
    procedure consumeContent(); overload; virtual;  // throws java.io.IOException
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    procedure releaseConnection(); overload; virtual;  // throws java.io.IOException
    procedure abortConnection(); overload; virtual;  // throws java.io.IOException
    function eofDetected(para1: JIInputStream): jboolean; overload; virtual;  // throws java.io.IOException
    function streamClosed(para1: JIInputStream): jboolean; overload; virtual;  // throws java.io.IOException
    function streamAbort(para1: JIInputStream): jboolean; overload; virtual;  // throws java.io.IOException
  strict protected
    procedure releaseManagedConnection(); overload; virtual;  // throws java.io.IOException
  end;

  OAHEBufferedHttpEntity = class external 'org.apache.http.entity' name 'BufferedHttpEntity' (OAHEHttpEntityWrapper)
  public
    constructor create(para1: OAHHttpEntity); overload;  // throws java.io.IOException
    function getContentLength(): jlong; overload; virtual;
    function getContent(): JIInputStream; overload; virtual;  // throws java.io.IOException
    function isChunked(): jboolean; overload; virtual;
    function isRepeatable(): jboolean; overload; virtual;
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function isStreaming(): jboolean; overload; virtual;
  end;

  OAHHttpEntityEnclosingRequest = interface external 'org.apache.http' name 'HttpEntityEnclosingRequest' (OAHHttpRequest)
    function expectContinue(): jboolean; overload;
    procedure setEntity(para1: OAHHttpEntity); overload;
    function getEntity(): OAHHttpEntity; overload;
  end;

  OAHCMHttpUriRequest = interface external 'org.apache.http.client.methods' name 'HttpUriRequest' (OAHHttpRequest)
    function getMethod(): JLString; overload;
    function getURI(): JNURI; overload;
    procedure abort(); overload;  // throws java.lang.UnsupportedOperationException
    function isAborted(): jboolean; overload;
  end;

  OAHMBasicHttpRequest = class external 'org.apache.http.message' name 'BasicHttpRequest' (OAHMAbstractHttpMessage, OAHHttpRequest)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: OAHProtocolVersion); overload;
    constructor create(para1: OAHRequestLine); overload;
    function getProtocolVersion(): OAHProtocolVersion; overload; virtual;
    function getRequestLine(): OAHRequestLine; overload; virtual;
  end;

  OAHMBasicHttpResponse = class external 'org.apache.http.message' name 'BasicHttpResponse' (OAHMAbstractHttpMessage, OAHHttpResponse)
  public
    constructor create(para1: OAHStatusLine; para2: OAHReasonPhraseCatalog; para3: JULocale); overload;
    constructor create(para1: OAHStatusLine); overload;
    constructor create(para1: OAHProtocolVersion; para2: jint; para3: JLString); overload;
    function getProtocolVersion(): OAHProtocolVersion; overload; virtual;
    function getStatusLine(): OAHStatusLine; overload; virtual;
    function getEntity(): OAHHttpEntity; overload; virtual;
    function getLocale(): JULocale; overload; virtual;
    procedure setStatusLine(para1: OAHStatusLine); overload; virtual;
    procedure setStatusLine(para1: OAHProtocolVersion; para2: jint); overload; virtual;
    procedure setStatusLine(para1: OAHProtocolVersion; para2: jint; para3: JLString); overload; virtual;
    procedure setStatusCode(para1: jint); overload; virtual;
    procedure setReasonPhrase(para1: JLString); overload; virtual;
    procedure setEntity(para1: OAHHttpEntity); overload; virtual;
    procedure setLocale(para1: JULocale); overload; virtual;
  strict protected
    function getReason(para1: jint): JLString; overload; virtual;
  end;

  OAHPBasicHttpProcessor = class sealed external 'org.apache.http.protocol' name 'BasicHttpProcessor' (JLObject, OAHPHttpProcessor, OAHPHttpRequestInterceptorList, OAHPHttpResponseInterceptorList, JLCloneable)
  strict protected
    var
      frequestInterceptors: JUList; external name 'requestInterceptors';
      fresponseInterceptors: JUList; external name 'responseInterceptors';
  public
    constructor create(); overload;
    procedure addRequestInterceptor(para1: OAHHttpRequestInterceptor); overload; virtual;
    procedure addRequestInterceptor(para1: OAHHttpRequestInterceptor; para2: jint); overload; virtual;
    procedure addResponseInterceptor(para1: OAHHttpResponseInterceptor; para2: jint); overload; virtual;
    procedure removeRequestInterceptorByClass(para1: JLClass); overload; virtual;
    procedure removeResponseInterceptorByClass(para1: JLClass); overload; virtual;
    procedure addInterceptor(para1: OAHHttpRequestInterceptor); overload; virtual; final;
    procedure addInterceptor(para1: OAHHttpRequestInterceptor; para2: jint); overload; virtual; final;
    function getRequestInterceptorCount(): jint; overload; virtual;
    function getRequestInterceptor(para1: jint): OAHHttpRequestInterceptor; overload; virtual;
    procedure clearRequestInterceptors(); overload; virtual;
    procedure addResponseInterceptor(para1: OAHHttpResponseInterceptor); overload; virtual;
    procedure addInterceptor(para1: OAHHttpResponseInterceptor); overload; virtual; final;
    procedure addInterceptor(para1: OAHHttpResponseInterceptor; para2: jint); overload; virtual; final;
    function getResponseInterceptorCount(): jint; overload; virtual;
    function getResponseInterceptor(para1: jint): OAHHttpResponseInterceptor; overload; virtual;
    procedure clearResponseInterceptors(); overload; virtual;
    procedure setInterceptors(para1: JUList); overload; virtual;
    procedure clearInterceptors(); overload; virtual;
    procedure process(para1: OAHHttpRequest; para2: OAHPHttpContext); overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException
    procedure process(para1: OAHHttpResponse; para2: OAHPHttpContext); overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException
  strict protected
    procedure copyInterceptors(para1: OAHPBasicHttpProcessor); overload; virtual;
  public
    function copy(): OAHPBasicHttpProcessor; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHIANTLMScheme = class external 'org.apache.http.impl.auth' name 'NTLMScheme' (OAHIAAuthSchemeBase)
  public
    constructor create(para1: OAHIANTLMEngine); overload;
    function getSchemeName(): JLString; overload; virtual;
    function getParameter(para1: JLString): JLString; overload; virtual;
    function getRealm(): JLString; overload; virtual;
    function isConnectionBased(): jboolean; overload; virtual;
  strict protected
    procedure parseChallenge(para1: OAHUCharArrayBuffer; para2: jint; para3: jint); overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
  public
    function authenticate(para1: OAHACredentials; para2: OAHHttpRequest): OAHHeader; overload; virtual;  // throws org.apache.http.auth.AuthenticationException
    function isComplete(): jboolean; overload; virtual;
  end;

  OAHIARFC2617Scheme = class abstract external 'org.apache.http.impl.auth' name 'RFC2617Scheme' (OAHIAAuthSchemeBase)
  public
    constructor create(); overload;
  strict protected
    procedure parseChallenge(para1: OAHUCharArrayBuffer; para2: jint; para3: jint); overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
    function getParameters(): JUMap; overload; virtual;
  public
    function getParameter(para1: JLString): JLString; overload; virtual;
    function getRealm(): JLString; overload; virtual;
  end;

  OAHICDefaultProxyAuthenticationHandler = class external 'org.apache.http.impl.client' name 'DefaultProxyAuthenticationHandler' (OAHICAbstractAuthenticationHandler)
  public
    constructor create(); overload;
    function isAuthenticationRequested(para1: OAHHttpResponse; para2: OAHPHttpContext): jboolean; overload; virtual;
    function getChallenges(para1: OAHHttpResponse; para2: OAHPHttpContext): JUMap; overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
  end;

  OAHICDefaultTargetAuthenticationHandler = class external 'org.apache.http.impl.client' name 'DefaultTargetAuthenticationHandler' (OAHICAbstractAuthenticationHandler)
  public
    constructor create(); overload;
    function isAuthenticationRequested(para1: OAHHttpResponse; para2: OAHPHttpContext): jboolean; overload; virtual;
    function getChallenges(para1: OAHHttpResponse; para2: OAHPHttpContext): JUMap; overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
  end;

  OAHICDefaultHttpClient = class external 'org.apache.http.impl.client' name 'DefaultHttpClient' (OAHICAbstractHttpClient)
  public
    constructor create(para1: OAHCClientConnectionManager; para2: OAHPHttpParams); overload;
    constructor create(para1: OAHPHttpParams); overload;
    constructor create(); overload;
  strict protected
    function createHttpParams(): OAHPHttpParams; overload; virtual;
    function createRequestExecutor(): OAHPHttpRequestExecutor; overload; virtual;
    function createClientConnectionManager(): OAHCClientConnectionManager; overload; virtual;
    function createHttpContext(): OAHPHttpContext; overload; virtual;
    function createConnectionReuseStrategy(): OAHConnectionReuseStrategy; overload; virtual;
    function createConnectionKeepAliveStrategy(): OAHCConnectionKeepAliveStrategy; overload; virtual;
    function createAuthSchemeRegistry(): OAHAAuthSchemeRegistry; overload; virtual;
    function createCookieSpecRegistry(): OAHCCookieSpecRegistry; overload; virtual;
    function createHttpProcessor(): OAHPBasicHttpProcessor; overload; virtual;
    function createHttpRequestRetryHandler(): OAHCHttpRequestRetryHandler; overload; virtual;
    function createRedirectHandler(): OAHCRedirectHandler; overload; virtual;
    function createTargetAuthenticationHandler(): OAHCAuthenticationHandler; overload; virtual;
    function createProxyAuthenticationHandler(): OAHCAuthenticationHandler; overload; virtual;
    function createCookieStore(): OAHCCookieStore; overload; virtual;
    function createCredentialsProvider(): OAHCCredentialsProvider; overload; virtual;
    function createHttpRoutePlanner(): OAHCRHttpRoutePlanner; overload; virtual;
    function createUserTokenHandler(): OAHCUserTokenHandler; overload; virtual;
  end;

  OAHCSSSLSocketFactory = class external 'org.apache.http.conn.ssl' name 'SSLSocketFactory' (JLObject, OAHCSLayeredSocketFactory)
  public
    final class var
      fALLOW_ALL_HOSTNAME_VERIFIER: OAHCSX509HostnameVerifier; external name 'ALLOW_ALL_HOSTNAME_VERIFIER';
      fBROWSER_COMPATIBLE_HOSTNAME_VERIFIER: OAHCSX509HostnameVerifier; external name 'BROWSER_COMPATIBLE_HOSTNAME_VERIFIER';
  public
    const
      SSL = 'SSL';
      SSLV2 = 'SSLv2';
  public
    final class var
      fSTRICT_HOSTNAME_VERIFIER: OAHCSX509HostnameVerifier; external name 'STRICT_HOSTNAME_VERIFIER';
  public
    const
      TLS = 'TLS';
  public
    constructor create(para1: JLString; para2: JSKeyStore; para3: JLString; para4: JSKeyStore; para5: JSSecureRandom; para6: OAHCSHostNameResolver); overload;  // throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    constructor create(para1: JSKeyStore; para2: JLString; para3: JSKeyStore); overload;  // throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    constructor create(para1: JSKeyStore; para2: JLString); overload;  // throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    constructor create(para1: JSKeyStore); overload;  // throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    class function getSocketFactory(): OAHCSSSLSocketFactory; static; overload;
    function createSocket(): JNSocket; overload; virtual;  // throws java.io.IOException
    function connectSocket(para1: JNSocket; para2: JLString; para3: jint; para4: JNInetAddress; para5: jint; para6: OAHPHttpParams): JNSocket; overload; virtual;  // throws java.io.IOException
    function isSecure(para1: JNSocket): jboolean; overload; virtual;  // throws java.lang.IllegalArgumentException
    function createSocket(para1: JNSocket; para2: JLString; para3: jint; para4: jboolean): JNSocket; overload; virtual;  // throws java.io.IOException, java.net.UnknownHostException
    procedure setHostnameVerifier(para1: OAHCSX509HostnameVerifier); overload; virtual;
    function getHostnameVerifier(): OAHCSX509HostnameVerifier; overload; virtual;
  end;

  OAHCSetCookie2 = interface external 'org.apache.http.cookie' name 'SetCookie2' (OAHCSetCookie)
    procedure setCommentURL(para1: JLString); overload;
    procedure setPorts(para1: Arr1jint); overload;
    procedure setPorts(var para1: array of jint); overload;
    procedure setDiscard(para1: jboolean); overload;
  end;

  OAHICBasicClientCookie = class external 'org.apache.http.impl.cookie' name 'BasicClientCookie' (JLObject, OAHCSetCookie, OAHCClientCookie, JLCloneable)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getName(): JLString; overload; virtual;
    function getValue(): JLString; overload; virtual;
    procedure setValue(para1: JLString); overload; virtual;
    function getComment(): JLString; overload; virtual;
    procedure setComment(para1: JLString); overload; virtual;
    function getCommentURL(): JLString; overload; virtual;
    function getExpiryDate(): JUDate; overload; virtual;
    procedure setExpiryDate(para1: JUDate); overload; virtual;
    function isPersistent(): jboolean; overload; virtual;
    function getDomain(): JLString; overload; virtual;
    procedure setDomain(para1: JLString); overload; virtual;
    function getPath(): JLString; overload; virtual;
    procedure setPath(para1: JLString); overload; virtual;
    function isSecure(): jboolean; overload; virtual;
    procedure setSecure(para1: jboolean); overload; virtual;
    function getPorts(): Arr1jint; overload; virtual;
    function getVersion(): jint; overload; virtual;
    procedure setVersion(para1: jint); overload; virtual;
    function isExpired(para1: JUDate): jboolean; overload; virtual;
    procedure setAttribute(para1: JLString; para2: JLString); overload; virtual;
    function getAttribute(para1: JLString): JLString; overload; virtual;
    function containsAttribute(para1: JLString): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function toString(): JLString; overload; virtual;
  end;

  OAHICBasicCommentHandler = class external 'org.apache.http.impl.cookie' name 'BasicCommentHandler' (OAHICAbstractCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
  end;

  OAHICBasicExpiresHandler = class external 'org.apache.http.impl.cookie' name 'BasicExpiresHandler' (OAHICAbstractCookieAttributeHandler)
  public
    constructor create(para1: Arr1JLString); overload;
    constructor create(const para1: array of JLString); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
  end;

  OAHICBasicMaxAgeHandler = class external 'org.apache.http.impl.cookie' name 'BasicMaxAgeHandler' (OAHICAbstractCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
  end;

  OAHICBasicSecureHandler = class external 'org.apache.http.impl.cookie' name 'BasicSecureHandler' (OAHICAbstractCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICRFC2109VersionHandler = class external 'org.apache.http.impl.cookie' name 'RFC2109VersionHandler' (OAHICAbstractCookieAttributeHandler)
  public
    constructor create(); overload;
    procedure parse(para1: OAHCSetCookie; para2: JLString); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
  end;

  OAHICNetscapeDomainHandler = class external 'org.apache.http.impl.cookie' name 'NetscapeDomainHandler' (OAHICBasicDomainHandler)
  public
    constructor create(); overload;
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICCookieSpecBase = class abstract external 'org.apache.http.impl.cookie' name 'CookieSpecBase' (OAHICAbstractCookieSpec)
  public
    constructor create(); overload;
  strict protected
    class function getDefaultPath(para1: OAHCCookieOrigin): JLString; static; overload;
    class function getDefaultDomain(para1: OAHCCookieOrigin): JLString; static; overload;
    function parse(para1: Arr1OAHHeaderElement; para2: OAHCCookieOrigin): JUList; overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function parse(var para1: array of OAHHeaderElement; para2: OAHCCookieOrigin): JUList; overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
  public
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  end;

  OAHICTConnPoolByRoute = class external 'org.apache.http.impl.conn.tsccm' name 'ConnPoolByRoute' (OAHICTAbstractConnPool)
  strict protected
    var
      ffreeConnections: JUQueue; external name 'freeConnections';
  strict protected
    final var
      fmaxTotalConnections: jint; external name 'maxTotalConnections';
      foperator: OAHCClientConnectionOperator; external name 'operator';
      frouteToPool: JUMap; external name 'routeToPool';
  strict protected
    var
      fwaitingThreads: JUQueue; external name 'waitingThreads';
  public
    constructor create(para1: OAHCClientConnectionOperator; para2: OAHPHttpParams); overload;
  strict protected
    function createFreeConnQueue(): JUQueue; overload; virtual;
    function createWaitingThreadQueue(): JUQueue; overload; virtual;
    function createRouteToPoolMap(): JUMap; overload; virtual;
    function newRouteSpecificPool(para1: OAHCRHttpRoute): OAHICTRouteSpecificPool; overload; virtual;
    function newWaitingThread(para1: JUCLCondition; para2: OAHICTRouteSpecificPool): OAHICTWaitingThread; overload; virtual;
    function getRoutePool(para1: OAHCRHttpRoute; para2: jboolean): OAHICTRouteSpecificPool; overload; virtual;
  public
    function getConnectionsInPool(para1: OAHCRHttpRoute): jint; overload; virtual;
    function requestPoolEntry(para1: OAHCRHttpRoute; para2: JLObject): OAHICTPoolEntryRequest; overload; virtual;
  strict protected
    function getEntryBlocking(para1: OAHCRHttpRoute; para2: JLObject; para3: jlong; para4: JUCTimeUnit; para5: OAHICTWaitingThreadAborter): OAHICTBasicPoolEntry; overload; virtual;  // throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException
  public
    procedure freeEntry(para1: OAHICTBasicPoolEntry; para2: jboolean; para3: jlong; para4: JUCTimeUnit); overload; virtual;
  strict protected
    function getFreeEntry(para1: OAHICTRouteSpecificPool; para2: JLObject): OAHICTBasicPoolEntry; overload; virtual;
    function createEntry(para1: OAHICTRouteSpecificPool; para2: OAHCClientConnectionOperator): OAHICTBasicPoolEntry; overload; virtual;
    procedure deleteEntry(para1: OAHICTBasicPoolEntry); overload; virtual;
    procedure deleteLeastUsedEntry(); overload; virtual;
    procedure handleLostEntry(para1: OAHCRHttpRoute); overload; virtual;
    procedure notifyWaitingThread(para1: OAHICTRouteSpecificPool); overload; virtual;
  public
    procedure deleteClosedConnections(); overload; virtual;
    procedure shutdown(); overload; virtual;
  end;

  OAHICDefaultResponseParser = class external 'org.apache.http.impl.conn' name 'DefaultResponseParser' (OAHIIAbstractMessageParser)
  public
    constructor create(para1: OAHISessionInputBuffer; para2: OAHMLineParser; para3: OAHHttpResponseFactory; para4: OAHPHttpParams); overload;
  strict protected
    function parseHead(para1: OAHISessionInputBuffer): OAHHttpMessage; overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException
  end;

  OAHIIHttpRequestParser = class external 'org.apache.http.impl.io' name 'HttpRequestParser' (OAHIIAbstractMessageParser)
  public
    constructor create(para1: OAHISessionInputBuffer; para2: OAHMLineParser; para3: OAHHttpRequestFactory; para4: OAHPHttpParams); overload;
  strict protected
    function parseHead(para1: OAHISessionInputBuffer): OAHHttpMessage; overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException, org.apache.http.ParseException
  end;

  OAHIIHttpResponseParser = class external 'org.apache.http.impl.io' name 'HttpResponseParser' (OAHIIAbstractMessageParser)
  public
    constructor create(para1: OAHISessionInputBuffer; para2: OAHMLineParser; para3: OAHHttpResponseFactory; para4: OAHPHttpParams); overload;
  strict protected
    function parseHead(para1: OAHISessionInputBuffer): OAHHttpMessage; overload; virtual;  // throws java.io.IOException, org.apache.http.HttpException, org.apache.http.ParseException
  end;

  OAHIIHttpRequestWriter = class external 'org.apache.http.impl.io' name 'HttpRequestWriter' (OAHIIAbstractMessageWriter)
  public
    constructor create(para1: OAHISessionOutputBuffer; para2: OAHMLineFormatter; para3: OAHPHttpParams); overload;
  strict protected
    procedure writeHeadLine(para1: OAHHttpMessage); overload; virtual;  // throws java.io.IOException
  end;

  OAHIIHttpResponseWriter = class external 'org.apache.http.impl.io' name 'HttpResponseWriter' (OAHIIAbstractMessageWriter)
  public
    constructor create(para1: OAHISessionOutputBuffer; para2: OAHMLineFormatter; para3: OAHPHttpParams); overload;
  strict protected
    procedure writeHeadLine(para1: OAHHttpMessage); overload; virtual;  // throws java.io.IOException
  end;

  OAHIISocketInputBuffer = class external 'org.apache.http.impl.io' name 'SocketInputBuffer' (OAHIIAbstractSessionInputBuffer)
  public
    constructor create(para1: JNSocket; para2: jint; para3: OAHPHttpParams); overload;  // throws java.io.IOException
    function isDataAvailable(para1: jint): jboolean; overload; virtual;  // throws java.io.IOException
  end;

  OAHIISocketOutputBuffer = class external 'org.apache.http.impl.io' name 'SocketOutputBuffer' (OAHIIAbstractSessionOutputBuffer)
  public
    constructor create(para1: JNSocket; para2: jint; para3: OAHPHttpParams); overload;  // throws java.io.IOException
  end;

  OAHICClientParamsStack = class external 'org.apache.http.impl.client' name 'ClientParamsStack' (OAHPAbstractHttpParams)
  strict protected
    final var
      fapplicationParams: OAHPHttpParams; external name 'applicationParams';
      fclientParams: OAHPHttpParams; external name 'clientParams';
      foverrideParams: OAHPHttpParams; external name 'overrideParams';
      frequestParams: OAHPHttpParams; external name 'requestParams';
  public
    constructor create(para1: OAHPHttpParams; para2: OAHPHttpParams; para3: OAHPHttpParams; para4: OAHPHttpParams); overload;
    constructor create(para1: OAHICClientParamsStack); overload;
    constructor create(para1: OAHICClientParamsStack; para2: OAHPHttpParams; para3: OAHPHttpParams; para4: OAHPHttpParams; para5: OAHPHttpParams); overload;
    function getApplicationParams(): OAHPHttpParams; overload; virtual; final;
    function getClientParams(): OAHPHttpParams; overload; virtual; final;
    function getRequestParams(): OAHPHttpParams; overload; virtual; final;
    function getOverrideParams(): OAHPHttpParams; overload; virtual; final;
    function getParameter(para1: JLString): JLObject; overload; virtual;
    function setParameter(para1: JLString; para2: JLObject): OAHPHttpParams; overload; virtual;  // throws java.lang.UnsupportedOperationException
    function removeParameter(para1: JLString): jboolean; overload; virtual;
    function copy(): OAHPHttpParams; overload; virtual;
  end;

  OAHPBasicHttpParams = class sealed external 'org.apache.http.params' name 'BasicHttpParams' (OAHPAbstractHttpParams, JISerializable, JLCloneable)
  public
    constructor create(); overload;
    function getParameter(para1: JLString): JLObject; overload; virtual;
    function setParameter(para1: JLString; para2: JLObject): OAHPHttpParams; overload; virtual;
    function removeParameter(para1: JLString): jboolean; overload; virtual;
    procedure setParameters(para1: Arr1JLString; para2: JLObject); overload; virtual;
    procedure setParameters(var para1: array of JLString; para2: JLObject); overload; virtual;
    function isParameterSet(para1: JLString): jboolean; overload; virtual;
    function isParameterSetLocally(para1: JLString): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function copy(): OAHPHttpParams; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  strict protected
    procedure copyParams(para1: OAHPHttpParams); overload; virtual;
  end;

  OAHPDefaultedHttpParams = class sealed external 'org.apache.http.params' name 'DefaultedHttpParams' (OAHPAbstractHttpParams)
  public
    constructor create(para1: OAHPHttpParams; para2: OAHPHttpParams); overload;
    function copy(): OAHPHttpParams; overload; virtual;
    function getParameter(para1: JLString): JLObject; overload; virtual;
    function removeParameter(para1: JLString): jboolean; overload; virtual;
    function setParameter(para1: JLString; para2: JLObject): OAHPHttpParams; overload; virtual;
    function getDefaults(): OAHPHttpParams; overload; virtual;
  end;

  OAHPSyncBasicHttpContext = class external 'org.apache.http.protocol' name 'SyncBasicHttpContext' (OAHPBasicHttpContext)
  public
    constructor create(para1: OAHPHttpContext); overload;
    function getAttribute(para1: JLString): JLObject; overload; virtual;
    procedure setAttribute(para1: JLString; para2: JLObject); overload; virtual;
    function removeAttribute(para1: JLString): JLObject; overload; virtual;
  end;

  OWDComment = interface external 'org.w3c.dom' name 'Comment' (OWDCharacterData)
  end;

  OWDText = interface external 'org.w3c.dom' name 'Text' (OWDCharacterData)
    function splitText(para1: jint): OWDText; overload;  // throws org.w3c.dom.DOMException
    function isElementContentWhitespace(): jboolean; overload;
    function getWholeText(): JLString; overload;
    function replaceWholeText(para1: JLString): OWDText; overload;  // throws org.w3c.dom.DOMException
  end;

  OXSEAttributes2Impl = class external 'org.xml.sax.ext' name 'Attributes2Impl' (OXSHAttributesImpl, OXSEAttributes2)
  public
    constructor create(); overload;
    constructor create(para1: OXSAttributes); overload;
    function isDeclared(para1: jint): jboolean; overload; virtual;
    function isDeclared(para1: JLString; para2: JLString): jboolean; overload; virtual;
    function isDeclared(para1: JLString): jboolean; overload; virtual;
    function isSpecified(para1: jint): jboolean; overload; virtual;
    function isSpecified(para1: JLString; para2: JLString): jboolean; overload; virtual;
    function isSpecified(para1: JLString): jboolean; overload; virtual;
    procedure setAttributes(para1: OXSAttributes); overload; virtual;
    procedure addAttribute(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload; virtual;
    procedure removeAttribute(para1: jint); overload; virtual;
    procedure setDeclared(para1: jint; para2: jboolean); overload; virtual;
    procedure setSpecified(para1: jint; para2: jboolean); overload; virtual;
  end;

  OXSEDefaultHandler2 = class external 'org.xml.sax.ext' name 'DefaultHandler2' (OXSHDefaultHandler, OXSELexicalHandler, OXSEDeclHandler, OXSEEntityResolver2)
  public
    constructor create(); overload;
    procedure startCDATA(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endCDATA(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startDTD(para1: JLString; para2: JLString; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endDTD(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startEntity(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endEntity(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure comment(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure comment(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure attributeDecl(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure elementDecl(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure externalEntityDecl(para1: JLString; para2: JLString; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure internalEntityDecl(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    function getExternalSubset(para1: JLString; para2: JLString): OXSInputSource; overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    function resolveEntity(para1: JLString; para2: JLString; para3: JLString; para4: JLString): OXSInputSource; overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    function resolveEntity(para1: JLString; para2: JLString): OXSInputSource; overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
  end;

  OXSELocator2Impl = class external 'org.xml.sax.ext' name 'Locator2Impl' (OXSHLocatorImpl, OXSELocator2)
  public
    constructor create(); overload;
    constructor create(para1: OXSLocator); overload;
    function getXMLVersion(): JLString; overload; virtual;
    function getEncoding(): JLString; overload; virtual;
    procedure setXMLVersion(para1: JLString); overload; virtual;
    procedure setEncoding(para1: JLString); overload; virtual;
  end;

  OXSHXMLFilterImpl = class external 'org.xml.sax.helpers' name 'XMLFilterImpl' (JLObject, OXSXMLFilter, OXSEntityResolver, OXSDTDHandler, OXSContentHandler, OXSErrorHandler)
  public
    constructor create(); overload;
    constructor create(para1: OXSXMLReader); overload;
    procedure setParent(para1: OXSXMLReader); overload; virtual;
    function getParent(): OXSXMLReader; overload; virtual;
    procedure setFeature(para1: JLString; para2: jboolean); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getFeature(para1: JLString): jboolean; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setProperty(para1: JLString; para2: JLObject); overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    function getProperty(para1: JLString): JLObject; overload; virtual;  // throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    procedure setEntityResolver(para1: OXSEntityResolver); overload; virtual;
    function getEntityResolver(): OXSEntityResolver; overload; virtual;
    procedure setDTDHandler(para1: OXSDTDHandler); overload; virtual;
    function getDTDHandler(): OXSDTDHandler; overload; virtual;
    procedure setContentHandler(para1: OXSContentHandler); overload; virtual;
    function getContentHandler(): OXSContentHandler; overload; virtual;
    procedure setErrorHandler(para1: OXSErrorHandler); overload; virtual;
    function getErrorHandler(): OXSErrorHandler; overload; virtual;
    procedure parse(para1: OXSInputSource); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure parse(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    function resolveEntity(para1: JLString; para2: JLString): OXSInputSource; overload; virtual;  // throws org.xml.sax.SAXException, java.io.IOException
    procedure notationDecl(para1: JLString; para2: JLString; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure unparsedEntityDecl(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure setDocumentLocator(para1: OXSLocator); overload; virtual;
    procedure startDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endDocument(); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startPrefixMapping(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endPrefixMapping(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure startElement(para1: JLString; para2: JLString; para3: JLString; para4: OXSAttributes); overload; virtual;  // throws org.xml.sax.SAXException
    procedure endElement(para1: JLString; para2: JLString; para3: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure characters(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure ignorableWhitespace(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws org.xml.sax.SAXException
    procedure processingInstruction(para1: JLString; para2: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure skippedEntity(para1: JLString); overload; virtual;  // throws org.xml.sax.SAXException
    procedure warning(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
    procedure error(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
    procedure fatalError(para1: OXSSAXParseException); overload; virtual;  // throws org.xml.sax.SAXException
  end;

  ATMMockPackageManager = class external 'android.test.mock' name 'MockPackageManager' (ACPPackageManager)
  public
    constructor create(); overload;
    function getPackageInfo(para1: JLString; para2: jint): ACPPackageInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function currentToCanonicalPackageNames(para1: Arr1JLString): Arr1JLString; overload; virtual;
    function currentToCanonicalPackageNames(var para1: array of JLString): Arr1JLString; overload; virtual;
    function canonicalToCurrentPackageNames(para1: Arr1JLString): Arr1JLString; overload; virtual;
    function canonicalToCurrentPackageNames(var para1: array of JLString): Arr1JLString; overload; virtual;
    function getLaunchIntentForPackage(para1: JLString): ACIntent; overload; virtual;
    function getLeanbackLaunchIntentForPackage(para1: JLString): ACIntent; overload; virtual;
    function getPackageGids(para1: JLString): Arr1jint; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getPermissionInfo(para1: JLString; para2: jint): ACPPermissionInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function queryPermissionsByGroup(para1: JLString; para2: jint): JUList; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getPermissionGroupInfo(para1: JLString; para2: jint): ACPPermissionGroupInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getAllPermissionGroups(para1: jint): JUList; overload; virtual;
    function getApplicationInfo(para1: JLString; para2: jint): ACPApplicationInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityInfo(para1: ACComponentName; para2: jint): ACPActivityInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getReceiverInfo(para1: ACComponentName; para2: jint): ACPActivityInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getServiceInfo(para1: ACComponentName; para2: jint): ACPServiceInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getProviderInfo(para1: ACComponentName; para2: jint): ACPProviderInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getInstalledPackages(para1: jint): JUList; overload; virtual;
    function getPackagesHoldingPermissions(para1: Arr1JLString; para2: jint): JUList; overload; virtual;
    function getPackagesHoldingPermissions(var para1: array of JLString; para2: jint): JUList; overload; virtual;
    function checkPermission(para1: JLString; para2: JLString): jint; overload; virtual;
    function addPermission(para1: ACPPermissionInfo): jboolean; overload; virtual;
    function addPermissionAsync(para1: ACPPermissionInfo): jboolean; overload; virtual;
    procedure removePermission(para1: JLString); overload; virtual;
    function checkSignatures(para1: JLString; para2: JLString): jint; overload; virtual;
    function checkSignatures(para1: jint; para2: jint): jint; overload; virtual;
    function getPackagesForUid(para1: jint): Arr1JLString; overload; virtual;
    function getNameForUid(para1: jint): JLString; overload; virtual;
    function getInstalledApplications(para1: jint): JUList; overload; virtual;
    function resolveActivity(para1: ACIntent; para2: jint): ACPResolveInfo; overload; virtual;
    function queryIntentActivities(para1: ACIntent; para2: jint): JUList; overload; virtual;
    function queryIntentActivityOptions(para1: ACComponentName; para2: Arr1ACIntent; para3: ACIntent; para4: jint): JUList; overload; virtual;
    function queryIntentActivityOptions(para1: ACComponentName; var para2: array of ACIntent; para3: ACIntent; para4: jint): JUList; overload; virtual;
    function queryBroadcastReceivers(para1: ACIntent; para2: jint): JUList; overload; virtual;
    function resolveService(para1: ACIntent; para2: jint): ACPResolveInfo; overload; virtual;
    function queryIntentServices(para1: ACIntent; para2: jint): JUList; overload; virtual;
    function queryIntentContentProviders(para1: ACIntent; para2: jint): JUList; overload; virtual;
    function resolveContentProvider(para1: JLString; para2: jint): ACPProviderInfo; overload; virtual;
    function queryContentProviders(para1: JLString; para2: jint; para3: jint): JUList; overload; virtual;
    function getInstrumentationInfo(para1: ACComponentName; para2: jint): ACPInstrumentationInfo; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function queryInstrumentation(para1: JLString; para2: jint): JUList; overload; virtual;
    function getDrawable(para1: JLString; para2: jint; para3: ACPApplicationInfo): AGDDrawable; overload; virtual;
    function getActivityIcon(para1: ACComponentName): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityIcon(para1: ACIntent): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getDefaultActivityIcon(): AGDDrawable; overload; virtual;
    function getActivityBanner(para1: ACComponentName): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityBanner(para1: ACIntent): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getApplicationBanner(para1: ACPApplicationInfo): AGDDrawable; overload; virtual;
    function getApplicationBanner(para1: JLString): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getApplicationIcon(para1: ACPApplicationInfo): AGDDrawable; overload; virtual;
    function getApplicationIcon(para1: JLString): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityLogo(para1: ACComponentName): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getActivityLogo(para1: ACIntent): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getApplicationLogo(para1: ACPApplicationInfo): AGDDrawable; overload; virtual;
    function getApplicationLogo(para1: JLString): AGDDrawable; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getUserBadgedIcon(para1: AGDDrawable; para2: AOUserHandle): AGDDrawable; overload; virtual;
    function getUserBadgedDrawableForDensity(para1: AGDDrawable; para2: AOUserHandle; para3: AGRect; para4: jint): AGDDrawable; overload; virtual;
    function getUserBadgedLabel(para1: JLCharSequence; para2: AOUserHandle): JLCharSequence; overload; virtual;
    function getText(para1: JLString; para2: jint; para3: ACPApplicationInfo): JLCharSequence; overload; virtual;
    function getXml(para1: JLString; para2: jint; para3: ACPApplicationInfo): ACRXmlResourceParser; overload; virtual;
    function getApplicationLabel(para1: ACPApplicationInfo): JLCharSequence; overload; virtual;
    function getResourcesForActivity(para1: ACComponentName): ACRResources; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getResourcesForApplication(para1: ACPApplicationInfo): ACRResources; overload; virtual;
    function getResourcesForApplication(para1: JLString): ACRResources; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function getPackageArchiveInfo(para1: JLString; para2: jint): ACPPackageInfo; overload; virtual;
    procedure setInstallerPackageName(para1: JLString; para2: JLString); overload; virtual;
    function getInstallerPackageName(para1: JLString): JLString; overload; virtual;
    procedure addPackageToPreferred(para1: JLString); overload; virtual;
    procedure removePackageFromPreferred(para1: JLString); overload; virtual;
    function getPreferredPackages(para1: jint): JUList; overload; virtual;
    procedure setComponentEnabledSetting(para1: ACComponentName; para2: jint; para3: jint); overload; virtual;
    function getComponentEnabledSetting(para1: ACComponentName): jint; overload; virtual;
    procedure setApplicationEnabledSetting(para1: JLString; para2: jint; para3: jint); overload; virtual;
    function getApplicationEnabledSetting(para1: JLString): jint; overload; virtual;
    procedure addPreferredActivity(para1: ACIntentFilter; para2: jint; para3: Arr1ACComponentName; para4: ACComponentName); overload; virtual;
    procedure addPreferredActivity(para1: ACIntentFilter; para2: jint; var para3: array of ACComponentName; para4: ACComponentName); overload; virtual;
    procedure clearPackagePreferredActivities(para1: JLString); overload; virtual;
    function getPreferredActivities(para1: JUList; para2: JUList; para3: JLString): jint; overload; virtual;
    function getSystemSharedLibraryNames(): Arr1JLString; overload; virtual;
    function getSystemAvailableFeatures(): Arr1ACPFeatureInfo; overload; virtual;
    function hasSystemFeature(para1: JLString): jboolean; overload; virtual;
    function isSafeMode(): jboolean; overload; virtual;
    procedure verifyPendingInstall(para1: jint; para2: jint); overload; virtual;
    procedure extendVerificationTimeout(para1: jint; para2: jint; para3: jlong); overload; virtual;
    function getPackageInstaller(): ACPPackageInstaller; overload; virtual;
  end;

  AODeadObjectException = class external 'android.os' name 'DeadObjectException' (AORemoteException)
  public
    constructor create(); overload;
  end;

  AOTransactionTooLargeException = class external 'android.os' name 'TransactionTooLargeException' (AORemoteException)
  public
    constructor create(); overload;
  end;

  JSInvalidKeyException = class external 'java.security' name 'InvalidKeyException' (JSKeyException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSKeyManagementException = class external 'java.security' name 'KeyManagementException' (JSKeyException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSUnrecoverableKeyException = class external 'java.security' name 'UnrecoverableKeyException' (JSUnrecoverableEntryException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JSCCertificateEncodingException = class external 'java.security.cert' name 'CertificateEncodingException' (JSCCertificateException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JSCCertificateExpiredException = class external 'java.security.cert' name 'CertificateExpiredException' (JSCCertificateException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JSCCertificateNotYetValidException = class external 'java.security.cert' name 'CertificateNotYetValidException' (JSCCertificateException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
  end;

  JSCCertificateParsingException = class external 'java.security.cert' name 'CertificateParsingException' (JSCCertificateException)
  public
    constructor create(para1: JLString); overload;
    constructor create(); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  JXXXPathFunctionException = class external 'javax.xml.xpath' name 'XPathFunctionException' (JXXXPathExpressionException)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLThrowable); overload;
  end;

  OAHUnsupportedHttpVersionException = class external 'org.apache.http' name 'UnsupportedHttpVersionException' (OAHProtocolException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OAHAAuthenticationException = class external 'org.apache.http.auth' name 'AuthenticationException' (OAHProtocolException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OAHAMalformedChallengeException = class external 'org.apache.http.auth' name 'MalformedChallengeException' (OAHProtocolException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OAHCNonRepeatableRequestException = class external 'org.apache.http.client' name 'NonRepeatableRequestException' (OAHProtocolException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OAHCRedirectException = class external 'org.apache.http.client' name 'RedirectException' (OAHProtocolException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OAHCMalformedCookieException = class external 'org.apache.http.cookie' name 'MalformedCookieException' (OAHProtocolException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  AAObjectAnimator = class sealed external 'android.animation' name 'ObjectAnimator' (AAValueAnimator)
  public
    constructor create(); overload;
    procedure setPropertyName(para1: JLString); overload; virtual;
    procedure setProperty(para1: AUProperty); overload; virtual;
    function getPropertyName(): JLString; overload; virtual;
    class function ofInt(para1: JLObject; para2: JLString; para3: Arr1jint): AAObjectAnimator; static; overload;
    class function ofInt(para1: JLObject; para2: JLString; const para3: array of jint): AAObjectAnimator; static; overload;
    class function ofInt(para1: JLObject; para2: JLString; para3: JLString; para4: AGPath): AAObjectAnimator; static; overload;
    class function ofInt(para1: JLObject; para2: AUProperty; para3: Arr1jint): AAObjectAnimator; static; overload;
    class function ofInt(para1: JLObject; para2: AUProperty; const para3: array of jint): AAObjectAnimator; static; overload;
    class function ofInt(para1: JLObject; para2: AUProperty; para3: AUProperty; para4: AGPath): AAObjectAnimator; static; overload;
    class function ofMultiInt(para1: JLObject; para2: JLString; para3: Arr2jint): AAObjectAnimator; static; overload;
    class function ofMultiInt(para1: JLObject; para2: JLString; para3: AGPath): AAObjectAnimator; static; overload;
    class function ofMultiInt(para1: JLObject; para2: JLString; para3: AATypeConverter; para4: AATypeEvaluator; para5: Arr1JLObject): AAObjectAnimator; static; overload;
    class function ofMultiInt(para1: JLObject; para2: JLString; para3: AATypeConverter; para4: AATypeEvaluator; const para5: array of JLObject): AAObjectAnimator; static; overload;
    class function ofArgb(para1: JLObject; para2: JLString; para3: Arr1jint): AAObjectAnimator; static; overload;
    class function ofArgb(para1: JLObject; para2: JLString; const para3: array of jint): AAObjectAnimator; static; overload;
    class function ofArgb(para1: JLObject; para2: AUProperty; para3: Arr1jint): AAObjectAnimator; static; overload;
    class function ofArgb(para1: JLObject; para2: AUProperty; const para3: array of jint): AAObjectAnimator; static; overload;
    class function ofFloat(para1: JLObject; para2: JLString; para3: Arr1jfloat): AAObjectAnimator; static; overload;
    class function ofFloat(para1: JLObject; para2: JLString; const para3: array of jfloat): AAObjectAnimator; static; overload;
    class function ofFloat(para1: JLObject; para2: JLString; para3: JLString; para4: AGPath): AAObjectAnimator; static; overload;
    class function ofFloat(para1: JLObject; para2: AUProperty; para3: Arr1jfloat): AAObjectAnimator; static; overload;
    class function ofFloat(para1: JLObject; para2: AUProperty; const para3: array of jfloat): AAObjectAnimator; static; overload;
    class function ofFloat(para1: JLObject; para2: AUProperty; para3: AUProperty; para4: AGPath): AAObjectAnimator; static; overload;
    class function ofMultiFloat(para1: JLObject; para2: JLString; para3: Arr2jfloat): AAObjectAnimator; static; overload;
    class function ofMultiFloat(para1: JLObject; para2: JLString; para3: AGPath): AAObjectAnimator; static; overload;
    class function ofMultiFloat(para1: JLObject; para2: JLString; para3: AATypeConverter; para4: AATypeEvaluator; para5: Arr1JLObject): AAObjectAnimator; static; overload;
    class function ofMultiFloat(para1: JLObject; para2: JLString; para3: AATypeConverter; para4: AATypeEvaluator; const para5: array of JLObject): AAObjectAnimator; static; overload;
    class function ofObject(para1: JLObject; para2: JLString; para3: AATypeEvaluator; para4: Arr1JLObject): AAObjectAnimator; static; overload;
    class function ofObject(para1: JLObject; para2: JLString; para3: AATypeEvaluator; const para4: array of JLObject): AAObjectAnimator; static; overload;
    class function ofObject(para1: JLObject; para2: JLString; para3: AATypeConverter; para4: AGPath): AAObjectAnimator; static; overload;
    class function ofObject(para1: JLObject; para2: AUProperty; para3: AATypeEvaluator; para4: Arr1JLObject): AAObjectAnimator; static; overload;
    class function ofObject(para1: JLObject; para2: AUProperty; para3: AATypeEvaluator; const para4: array of JLObject): AAObjectAnimator; static; overload;
    class function ofObject(para1: JLObject; para2: AUProperty; para3: AATypeConverter; para4: AATypeEvaluator; para5: Arr1JLObject): AAObjectAnimator; static; overload;
    class function ofObject(para1: JLObject; para2: AUProperty; para3: AATypeConverter; para4: AATypeEvaluator; const para5: array of JLObject): AAObjectAnimator; static; overload;
    class function ofObject(para1: JLObject; para2: AUProperty; para3: AATypeConverter; para4: AGPath): AAObjectAnimator; static; overload;
    class function ofPropertyValuesHolder(para1: JLObject; para2: Arr1AAPropertyValuesHolder): AAObjectAnimator; static; overload;
    class function ofPropertyValuesHolder(para1: JLObject; const para2: array of AAPropertyValuesHolder): AAObjectAnimator; static; overload;
    procedure setIntValues(para1: Arr1jint); overload; virtual;
    procedure setIntValues(const para1: array of jint); overload; virtual;
    procedure setFloatValues(para1: Arr1jfloat); overload; virtual;
    procedure setFloatValues(const para1: array of jfloat); overload; virtual;
    procedure setObjectValues(para1: Arr1JLObject); overload; virtual;
    procedure setObjectValues(const para1: array of JLObject); overload; virtual;
    procedure setAutoCancel(para1: jboolean); overload; virtual;
    procedure start(); overload; virtual;
    function setDuration(para1: jlong): AAObjectAnimator; overload; virtual;
    function getTarget(): JLObject; overload; virtual;
    procedure setTarget(para1: JLObject); overload; virtual;
    procedure setupStartValues(); overload; virtual;
    procedure setupEndValues(); overload; virtual;
    function clone(): AAObjectAnimator; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): AAValueAnimator; overload; virtual;
    function setDuration(para1: jlong): AAValueAnimator; overload; virtual;
    function clone(): AAAnimator; overload; virtual;
    function setDuration(para1: jlong): AAAnimator; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AGDSArcShape = class external 'android.graphics.drawable.shapes' name 'ArcShape' (AGDSRectShape)
  public
    constructor create(para1: jfloat; para2: jfloat); overload;
    procedure draw(para1: AGCanvas; para2: AGPaint); overload; virtual;
  end;

  AGDSOvalShape = class external 'android.graphics.drawable.shapes' name 'OvalShape' (AGDSRectShape)
  public
    constructor create(); overload;
    procedure draw(para1: AGCanvas; para2: AGPaint); overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
  end;

  AGDSRoundRectShape = class external 'android.graphics.drawable.shapes' name 'RoundRectShape' (AGDSRectShape)
  public
    constructor create(para1: Arr1jfloat; para2: AGRectF; para3: Arr1jfloat); overload;
    constructor create(const para1: array of jfloat; para2: AGRectF; const para3: array of jfloat); overload;
    procedure draw(para1: AGCanvas; para2: AGPaint); overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
  strict protected
    procedure onResize(para1: jfloat; para2: jfloat); overload; virtual;
  public
    function clone(): AGDSRoundRectShape; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): AGDSRectShape; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): AGDSShape; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JSCPKIXBuilderParameters = class external 'java.security.cert' name 'PKIXBuilderParameters' (JSCPKIXParameters)
  public
    constructor create(para1: JUSet; para2: JSCCertSelector); overload;  // throws java.security.InvalidAlgorithmParameterException
    constructor create(para1: JSKeyStore; para2: JSCCertSelector); overload;  // throws java.security.KeyStoreException, java.security.InvalidAlgorithmParameterException
    function getMaxPathLength(): jint; overload; virtual;
    procedure setMaxPathLength(para1: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JSCPKIXCertPathBuilderResult = class external 'java.security.cert' name 'PKIXCertPathBuilderResult' (JSCPKIXCertPathValidatorResult, JSCCertPathBuilderResult)
  public
    constructor create(para1: JSCCertPath; para2: JSCTrustAnchor; para3: JSCPolicyNode; para4: JSPublicKey); overload;
    function getCertPath(): JSCCertPath; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JTAttributedString = class external 'java.text' name 'AttributedString' (JLObject)
  public
    constructor create(para1: JTAttributedCharacterIterator); overload;
    constructor create(para1: JTAttributedCharacterIterator; para2: jint; para3: jint); overload;
    constructor create(para1: JTAttributedCharacterIterator; para2: jint; para3: jint; para4: JTAttributedCharacterIterator.Arr1InnerAttribute); overload;
    constructor create(para1: JTAttributedCharacterIterator; para2: jint; para3: jint; const para4: array of JTAttributedCharacterIterator.InnerAttribute); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JUMap); overload;
    procedure addAttribute(para1: JTAttributedCharacterIterator.InnerAttribute; para2: JLObject); overload; virtual;
    procedure addAttribute(para1: JTAttributedCharacterIterator.InnerAttribute; para2: JLObject; para3: jint; para4: jint); overload; virtual;
    procedure addAttributes(para1: JUMap; para2: jint; para3: jint); overload; virtual;
    function getIterator(): JTAttributedCharacterIterator; overload; virtual;
    function getIterator(para1: JTAttributedCharacterIterator.Arr1InnerAttribute): JTAttributedCharacterIterator; overload; virtual;
    function getIterator(var para1: array of JTAttributedCharacterIterator.InnerAttribute): JTAttributedCharacterIterator; overload; virtual;
    function getIterator(para1: JTAttributedCharacterIterator.Arr1InnerAttribute; para2: jint; para3: jint): JTAttributedCharacterIterator; overload; virtual;
    function getIterator(var para1: array of JTAttributedCharacterIterator.InnerAttribute; para2: jint; para3: jint): JTAttributedCharacterIterator; overload; virtual;
  end;

  JTFormat = class abstract external 'java.text' name 'Format' (JLObject, JISerializable, JLCloneable)
  public
    type
      InnerField = class;
      Arr1InnerField = array of InnerField;
      Arr2InnerField = array of Arr1InnerField;
      Arr3InnerField = array of Arr2InnerField;
      InnerField = class external 'java.text' name 'Field' (JTAttributedCharacterIterator.InnerAttribute)
      strict protected
        constructor create(para1: JLString); overload;
      end;

  strict protected
    constructor create(); overload;
  public
    function clone(): JLObject; overload; virtual;
    function format(para1: JLObject): JLString; overload; virtual; final;
    function format(para1: JLObject; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; abstract;
    function formatToCharacterIterator(para1: JLObject): JTAttributedCharacterIterator; overload; virtual;
    function parseObject(para1: JLString): JLObject; overload; virtual;  // throws java.text.ParseException
    function parseObject(para1: JLString; para2: JTParsePosition): JLObject; overload; virtual; abstract;
  end;

  ADSSQLiteAbortException = class external 'android.database.sqlite' name 'SQLiteAbortException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteAccessPermException = class external 'android.database.sqlite' name 'SQLiteAccessPermException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteBindOrColumnIndexOutOfRangeException = class external 'android.database.sqlite' name 'SQLiteBindOrColumnIndexOutOfRangeException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteBlobTooBigException = class external 'android.database.sqlite' name 'SQLiteBlobTooBigException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteCantOpenDatabaseException = class external 'android.database.sqlite' name 'SQLiteCantOpenDatabaseException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteConstraintException = class external 'android.database.sqlite' name 'SQLiteConstraintException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteDatabaseCorruptException = class external 'android.database.sqlite' name 'SQLiteDatabaseCorruptException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteDatabaseLockedException = class external 'android.database.sqlite' name 'SQLiteDatabaseLockedException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteDatatypeMismatchException = class external 'android.database.sqlite' name 'SQLiteDatatypeMismatchException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteDiskIOException = class external 'android.database.sqlite' name 'SQLiteDiskIOException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteDoneException = class external 'android.database.sqlite' name 'SQLiteDoneException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteFullException = class external 'android.database.sqlite' name 'SQLiteFullException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteMisuseException = class external 'android.database.sqlite' name 'SQLiteMisuseException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteOutOfMemoryException = class external 'android.database.sqlite' name 'SQLiteOutOfMemoryException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteReadOnlyDatabaseException = class external 'android.database.sqlite' name 'SQLiteReadOnlyDatabaseException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ADSSQLiteTableLockedException = class external 'android.database.sqlite' name 'SQLiteTableLockedException' (ADSSQLiteException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  AVKeyEvent = class external 'android.view' name 'KeyEvent' (AVInputEvent, AOParcelable)
  public
    type
      InnerDispatcherState = class;
      Arr1InnerDispatcherState = array of InnerDispatcherState;
      Arr2InnerDispatcherState = array of Arr1InnerDispatcherState;
      Arr3InnerDispatcherState = array of Arr2InnerDispatcherState;
      InnerCallback = interface;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerDispatcherState = class external 'android.view' name 'DispatcherState' (JLObject)
      public
        constructor create(); overload;
        procedure reset(); overload; virtual;
        procedure reset(para1: JLObject); overload; virtual;
        procedure startTracking(para1: AVKeyEvent; para2: JLObject); overload; virtual;
        function isTracking(para1: AVKeyEvent): jboolean; overload; virtual;
        procedure performedLongPress(para1: AVKeyEvent); overload; virtual;
        procedure handleUpEvent(para1: AVKeyEvent); overload; virtual;
      end;

      InnerCallback = interface external 'android.view' name 'Callback' 
        function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload;
        function onKeyLongPress(para1: jint; para2: AVKeyEvent): jboolean; overload;
        function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload;
        function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload;
      end;

  public
    const
      ACTION_DOWN = 0;
      ACTION_MULTIPLE = 2;
      ACTION_UP = 1;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_CANCELED = 32;
      FLAG_CANCELED_LONG_PRESS = 256;
      FLAG_EDITOR_ACTION = 16;
      FLAG_FALLBACK = 1024;
      FLAG_FROM_SYSTEM = 8;
      FLAG_KEEP_TOUCH_MODE = 4;
      FLAG_LONG_PRESS = 128;
      FLAG_SOFT_KEYBOARD = 2;
      FLAG_TRACKING = 512;
      FLAG_VIRTUAL_HARD_KEY = 64;
      FLAG_WOKE_HERE = 1 deprecated;
      KEYCODE_0 = 7;
      KEYCODE_1 = 8;
      KEYCODE_11 = 227;
      KEYCODE_12 = 228;
      KEYCODE_2 = 9;
      KEYCODE_3 = 10;
      KEYCODE_3D_MODE = 206;
      KEYCODE_4 = 11;
      KEYCODE_5 = 12;
      KEYCODE_6 = 13;
      KEYCODE_7 = 14;
      KEYCODE_8 = 15;
      KEYCODE_9 = 16;
      KEYCODE_A = 29;
      KEYCODE_ALT_LEFT = 57;
      KEYCODE_ALT_RIGHT = 58;
      KEYCODE_APOSTROPHE = 75;
      KEYCODE_APP_SWITCH = 187;
      KEYCODE_ASSIST = 219;
      KEYCODE_AT = 77;
      KEYCODE_AVR_INPUT = 182;
      KEYCODE_AVR_POWER = 181;
      KEYCODE_B = 30;
      KEYCODE_BACK = 4;
      KEYCODE_BACKSLASH = 73;
      KEYCODE_BOOKMARK = 174;
      KEYCODE_BREAK = 121;
      KEYCODE_BRIGHTNESS_DOWN = 220;
      KEYCODE_BRIGHTNESS_UP = 221;
      KEYCODE_BUTTON_1 = 188;
      KEYCODE_BUTTON_10 = 197;
      KEYCODE_BUTTON_11 = 198;
      KEYCODE_BUTTON_12 = 199;
      KEYCODE_BUTTON_13 = 200;
      KEYCODE_BUTTON_14 = 201;
      KEYCODE_BUTTON_15 = 202;
      KEYCODE_BUTTON_16 = 203;
      KEYCODE_BUTTON_2 = 189;
      KEYCODE_BUTTON_3 = 190;
      KEYCODE_BUTTON_4 = 191;
      KEYCODE_BUTTON_5 = 192;
      KEYCODE_BUTTON_6 = 193;
      KEYCODE_BUTTON_7 = 194;
      KEYCODE_BUTTON_8 = 195;
      KEYCODE_BUTTON_9 = 196;
      KEYCODE_BUTTON_A = 96;
      KEYCODE_BUTTON_B = 97;
      KEYCODE_BUTTON_C = 98;
      KEYCODE_BUTTON_L1 = 102;
      KEYCODE_BUTTON_L2 = 104;
      KEYCODE_BUTTON_MODE = 110;
      KEYCODE_BUTTON_R1 = 103;
      KEYCODE_BUTTON_R2 = 105;
      KEYCODE_BUTTON_SELECT = 109;
      KEYCODE_BUTTON_START = 108;
      KEYCODE_BUTTON_THUMBL = 106;
      KEYCODE_BUTTON_THUMBR = 107;
      KEYCODE_BUTTON_X = 99;
      KEYCODE_BUTTON_Y = 100;
      KEYCODE_BUTTON_Z = 101;
      KEYCODE_C = 31;
      KEYCODE_CALCULATOR = 210;
      KEYCODE_CALENDAR = 208;
      KEYCODE_CALL = 5;
      KEYCODE_CAMERA = 27;
      KEYCODE_CAPS_LOCK = 115;
      KEYCODE_CAPTIONS = 175;
      KEYCODE_CHANNEL_DOWN = 167;
      KEYCODE_CHANNEL_UP = 166;
      KEYCODE_CLEAR = 28;
      KEYCODE_COMMA = 55;
      KEYCODE_CONTACTS = 207;
      KEYCODE_CTRL_LEFT = 113;
      KEYCODE_CTRL_RIGHT = 114;
      KEYCODE_D = 32;
      KEYCODE_DEL = 67;
      KEYCODE_DPAD_CENTER = 23;
      KEYCODE_DPAD_DOWN = 20;
      KEYCODE_DPAD_LEFT = 21;
      KEYCODE_DPAD_RIGHT = 22;
      KEYCODE_DPAD_UP = 19;
      KEYCODE_DVR = 173;
      KEYCODE_E = 33;
      KEYCODE_EISU = 212;
      KEYCODE_ENDCALL = 6;
      KEYCODE_ENTER = 66;
      KEYCODE_ENVELOPE = 65;
      KEYCODE_EQUALS = 70;
      KEYCODE_ESCAPE = 111;
      KEYCODE_EXPLORER = 64;
      KEYCODE_F = 34;
      KEYCODE_F1 = 131;
      KEYCODE_F10 = 140;
      KEYCODE_F11 = 141;
      KEYCODE_F12 = 142;
      KEYCODE_F2 = 132;
      KEYCODE_F3 = 133;
      KEYCODE_F4 = 134;
      KEYCODE_F5 = 135;
      KEYCODE_F6 = 136;
      KEYCODE_F7 = 137;
      KEYCODE_F8 = 138;
      KEYCODE_F9 = 139;
      KEYCODE_FOCUS = 80;
      KEYCODE_FORWARD = 125;
      KEYCODE_FORWARD_DEL = 112;
      KEYCODE_FUNCTION = 119;
      KEYCODE_G = 35;
      KEYCODE_GRAVE = 68;
      KEYCODE_GUIDE = 172;
      KEYCODE_H = 36;
      KEYCODE_HEADSETHOOK = 79;
      KEYCODE_HELP = 259;
      KEYCODE_HENKAN = 214;
      KEYCODE_HOME = 3;
      KEYCODE_I = 37;
      KEYCODE_INFO = 165;
      KEYCODE_INSERT = 124;
      KEYCODE_J = 38;
      KEYCODE_K = 39;
      KEYCODE_KANA = 218;
      KEYCODE_KATAKANA_HIRAGANA = 215;
      KEYCODE_L = 40;
      KEYCODE_LANGUAGE_SWITCH = 204;
      KEYCODE_LAST_CHANNEL = 229;
      KEYCODE_LEFT_BRACKET = 71;
      KEYCODE_M = 41;
      KEYCODE_MANNER_MODE = 205;
      KEYCODE_MEDIA_AUDIO_TRACK = 222;
      KEYCODE_MEDIA_CLOSE = 128;
      KEYCODE_MEDIA_EJECT = 129;
      KEYCODE_MEDIA_FAST_FORWARD = 90;
      KEYCODE_MEDIA_NEXT = 87;
      KEYCODE_MEDIA_PAUSE = 127;
      KEYCODE_MEDIA_PLAY = 126;
      KEYCODE_MEDIA_PLAY_PAUSE = 85;
      KEYCODE_MEDIA_PREVIOUS = 88;
      KEYCODE_MEDIA_RECORD = 130;
      KEYCODE_MEDIA_REWIND = 89;
      KEYCODE_MEDIA_STOP = 86;
      KEYCODE_MEDIA_TOP_MENU = 226;
      KEYCODE_MENU = 82;
      KEYCODE_META_LEFT = 117;
      KEYCODE_META_RIGHT = 118;
      KEYCODE_MINUS = 69;
      KEYCODE_MOVE_END = 123;
      KEYCODE_MOVE_HOME = 122;
      KEYCODE_MUHENKAN = 213;
      KEYCODE_MUSIC = 209;
      KEYCODE_MUTE = 91;
      KEYCODE_N = 42;
      KEYCODE_NOTIFICATION = 83;
      KEYCODE_NUM = 78;
      KEYCODE_NUMPAD_0 = 144;
      KEYCODE_NUMPAD_1 = 145;
      KEYCODE_NUMPAD_2 = 146;
      KEYCODE_NUMPAD_3 = 147;
      KEYCODE_NUMPAD_4 = 148;
      KEYCODE_NUMPAD_5 = 149;
      KEYCODE_NUMPAD_6 = 150;
      KEYCODE_NUMPAD_7 = 151;
      KEYCODE_NUMPAD_8 = 152;
      KEYCODE_NUMPAD_9 = 153;
      KEYCODE_NUMPAD_ADD = 157;
      KEYCODE_NUMPAD_COMMA = 159;
      KEYCODE_NUMPAD_DIVIDE = 154;
      KEYCODE_NUMPAD_DOT = 158;
      KEYCODE_NUMPAD_ENTER = 160;
      KEYCODE_NUMPAD_EQUALS = 161;
      KEYCODE_NUMPAD_LEFT_PAREN = 162;
      KEYCODE_NUMPAD_MULTIPLY = 155;
      KEYCODE_NUMPAD_RIGHT_PAREN = 163;
      KEYCODE_NUMPAD_SUBTRACT = 156;
      KEYCODE_NUM_LOCK = 143;
      KEYCODE_O = 43;
      KEYCODE_P = 44;
      KEYCODE_PAGE_DOWN = 93;
      KEYCODE_PAGE_UP = 92;
      KEYCODE_PAIRING = 225;
      KEYCODE_PERIOD = 56;
      KEYCODE_PICTSYMBOLS = 94;
      KEYCODE_PLUS = 81;
      KEYCODE_POUND = 18;
      KEYCODE_POWER = 26;
      KEYCODE_PROG_BLUE = 186;
      KEYCODE_PROG_GREEN = 184;
      KEYCODE_PROG_RED = 183;
      KEYCODE_PROG_YELLOW = 185;
      KEYCODE_Q = 45;
      KEYCODE_R = 46;
      KEYCODE_RIGHT_BRACKET = 72;
      KEYCODE_RO = 217;
      KEYCODE_S = 47;
      KEYCODE_SCROLL_LOCK = 116;
      KEYCODE_SEARCH = 84;
      KEYCODE_SEMICOLON = 74;
      KEYCODE_SETTINGS = 176;
      KEYCODE_SHIFT_LEFT = 59;
      KEYCODE_SHIFT_RIGHT = 60;
      KEYCODE_SLASH = 76;
      KEYCODE_SLEEP = 223;
      KEYCODE_SOFT_LEFT = 1;
      KEYCODE_SOFT_RIGHT = 2;
      KEYCODE_SPACE = 62;
      KEYCODE_STAR = 17;
      KEYCODE_STB_INPUT = 180;
      KEYCODE_STB_POWER = 179;
      KEYCODE_SWITCH_CHARSET = 95;
      KEYCODE_SYM = 63;
      KEYCODE_SYSRQ = 120;
      KEYCODE_T = 48;
      KEYCODE_TAB = 61;
      KEYCODE_TV = 170;
      KEYCODE_TV_ANTENNA_CABLE = 242;
      KEYCODE_TV_AUDIO_DESCRIPTION = 252;
      KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 254;
      KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 253;
      KEYCODE_TV_CONTENTS_MENU = 256;
      KEYCODE_TV_DATA_SERVICE = 230;
      KEYCODE_TV_INPUT = 178;
      KEYCODE_TV_INPUT_COMPONENT_1 = 249;
      KEYCODE_TV_INPUT_COMPONENT_2 = 250;
      KEYCODE_TV_INPUT_COMPOSITE_1 = 247;
      KEYCODE_TV_INPUT_COMPOSITE_2 = 248;
      KEYCODE_TV_INPUT_HDMI_1 = 243;
      KEYCODE_TV_INPUT_HDMI_2 = 244;
      KEYCODE_TV_INPUT_HDMI_3 = 245;
      KEYCODE_TV_INPUT_HDMI_4 = 246;
      KEYCODE_TV_INPUT_VGA_1 = 251;
      KEYCODE_TV_MEDIA_CONTEXT_MENU = 257;
      KEYCODE_TV_NETWORK = 241;
      KEYCODE_TV_NUMBER_ENTRY = 234;
      KEYCODE_TV_POWER = 177;
      KEYCODE_TV_RADIO_SERVICE = 232;
      KEYCODE_TV_SATELLITE = 237;
      KEYCODE_TV_SATELLITE_BS = 238;
      KEYCODE_TV_SATELLITE_CS = 239;
      KEYCODE_TV_SATELLITE_SERVICE = 240;
      KEYCODE_TV_TELETEXT = 233;
      KEYCODE_TV_TERRESTRIAL_ANALOG = 235;
      KEYCODE_TV_TERRESTRIAL_DIGITAL = 236;
      KEYCODE_TV_TIMER_PROGRAMMING = 258;
      KEYCODE_TV_ZOOM_MODE = 255;
      KEYCODE_U = 49;
      KEYCODE_UNKNOWN = 0;
      KEYCODE_V = 50;
      KEYCODE_VOICE_ASSIST = 231;
      KEYCODE_VOLUME_DOWN = 25;
      KEYCODE_VOLUME_MUTE = 164;
      KEYCODE_VOLUME_UP = 24;
      KEYCODE_W = 51;
      KEYCODE_WAKEUP = 224;
      KEYCODE_WINDOW = 171;
      KEYCODE_X = 52;
      KEYCODE_Y = 53;
      KEYCODE_YEN = 216;
      KEYCODE_Z = 54;
      KEYCODE_ZENKAKU_HANKAKU = 211;
      KEYCODE_ZOOM_IN = 168;
      KEYCODE_ZOOM_OUT = 169;
      MAX_KEYCODE = 84 deprecated;
      META_ALT_LEFT_ON = 16;
      META_ALT_MASK = 50;
      META_ALT_ON = 2;
      META_ALT_RIGHT_ON = 32;
      META_CAPS_LOCK_ON = 1048576;
      META_CTRL_LEFT_ON = 8192;
      META_CTRL_MASK = 28672;
      META_CTRL_ON = 4096;
      META_CTRL_RIGHT_ON = 16384;
      META_FUNCTION_ON = 8;
      META_META_LEFT_ON = 131072;
      META_META_MASK = 458752;
      META_META_ON = 65536;
      META_META_RIGHT_ON = 262144;
      META_NUM_LOCK_ON = 2097152;
      META_SCROLL_LOCK_ON = 4194304;
      META_SHIFT_LEFT_ON = 64;
      META_SHIFT_MASK = 193;
      META_SHIFT_ON = 1;
      META_SHIFT_RIGHT_ON = 128;
      META_SYM_ON = 4;
  public
    constructor create(para1: jint; para2: jint); overload;
    constructor create(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: jint); overload;
    constructor create(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: jint; para6: jint); overload;
    constructor create(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); overload;
    constructor create(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint); overload;
    constructor create(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint); overload;
    constructor create(para1: jlong; para2: JLString; para3: jint; para4: jint); overload;
    constructor create(para1: AVKeyEvent); overload;
    constructor create(para1: AVKeyEvent; para2: jlong; para3: jint); overload;
    class function getMaxKeyCode(): jint; static; overload;
    class function getDeadChar(para1: jint; para2: jint): jint; static; overload;
    class function changeTimeRepeat(para1: AVKeyEvent; para2: jlong; para3: jint): AVKeyEvent; static; overload;
    class function changeTimeRepeat(para1: AVKeyEvent; para2: jlong; para3: jint; para4: jint): AVKeyEvent; static; overload;
    class function changeAction(para1: AVKeyEvent; para2: jint): AVKeyEvent; static; overload;
    class function changeFlags(para1: AVKeyEvent; para2: jint): AVKeyEvent; static; overload;
    function isSystem(): jboolean; overload; virtual; final;
    class function isGamepadButton(para1: jint): jboolean; static; overload; final;
    function getDeviceId(): jint; overload; virtual; final;
    function getSource(): jint; overload; virtual; final;
    procedure setSource(para1: jint); overload; virtual; final;
    function getMetaState(): jint; overload; virtual; final;
    function getModifiers(): jint; overload; virtual; final;
    function getFlags(): jint; overload; virtual; final;
    class function getModifierMetaStateMask(): jint; static; overload;
    class function isModifierKey(para1: jint): jboolean; static; overload;
    class function normalizeMetaState(para1: jint): jint; static; overload;
    class function metaStateHasNoModifiers(para1: jint): jboolean; static; overload;
    class function metaStateHasModifiers(para1: jint; para2: jint): jboolean; static; overload;
    function hasNoModifiers(): jboolean; overload; virtual; final;
    function hasModifiers(para1: jint): jboolean; overload; virtual; final;
    function isAltPressed(): jboolean; overload; virtual; final;
    function isShiftPressed(): jboolean; overload; virtual; final;
    function isSymPressed(): jboolean; overload; virtual; final;
    function isCtrlPressed(): jboolean; overload; virtual; final;
    function isMetaPressed(): jboolean; overload; virtual; final;
    function isFunctionPressed(): jboolean; overload; virtual; final;
    function isCapsLockOn(): jboolean; overload; virtual; final;
    function isNumLockOn(): jboolean; overload; virtual; final;
    function isScrollLockOn(): jboolean; overload; virtual; final;
    function getAction(): jint; overload; virtual; final;
    function isCanceled(): jboolean; overload; virtual; final;
    procedure startTracking(); overload; virtual; final;
    function isTracking(): jboolean; overload; virtual; final;
    function isLongPress(): jboolean; overload; virtual; final;
    function getKeyCode(): jint; overload; virtual; final;
    function getCharacters(): JLString; overload; virtual; final;
    function getScanCode(): jint; overload; virtual; final;
    function getRepeatCount(): jint; overload; virtual; final;
    function getDownTime(): jlong; overload; virtual; final;
    function getEventTime(): jlong; overload; virtual; final;
    function getKeyCharacterMap(): AVKeyCharacterMap; overload; virtual; final;
    function getDisplayLabel(): jchar; overload; virtual;
    function getUnicodeChar(): jint; overload; virtual;
    function getUnicodeChar(para1: jint): jint; overload; virtual;
    function getKeyData(para1: AVKeyCharacterMap.InnerKeyData): jboolean; overload; virtual;
    function getMatch(para1: Arr1jchar): jchar; overload; virtual;
    function getMatch(var para1: array of jchar): jchar; overload; virtual;
    function getMatch(para1: Arr1jchar; para2: jint): jchar; overload; virtual;
    function getMatch(var para1: array of jchar; para2: jint): jchar; overload; virtual;
    function getNumber(): jchar; overload; virtual;
    function isPrintingKey(): jboolean; overload; virtual;
    function dispatch(para1: AVKeyEvent.InnerCallback): jboolean; overload; virtual; final;
    function dispatch(para1: AVKeyEvent.InnerCallback; para2: AVKeyEvent.InnerDispatcherState; para3: JLObject): jboolean; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    class function keyCodeToString(para1: jint): JLString; static; overload;
    class function keyCodeFromString(para1: JLString): jint; static; overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  JUCRunnableScheduledFuture = interface external 'java.util.concurrent' name 'RunnableScheduledFuture' (JUCRunnableFuture, JUCScheduledFuture)
    function isPeriodic(): jboolean; overload;
  end;

  ACPActivityInfo = class external 'android.content.pm' name 'ActivityInfo' (ACPComponentInfo, AOParcelable)
  public
    const
      CONFIG_DENSITY = 4096;
      CONFIG_FONT_SCALE = 1073741824;
      CONFIG_KEYBOARD = 16;
      CONFIG_KEYBOARD_HIDDEN = 32;
      CONFIG_LAYOUT_DIRECTION = 8192;
      CONFIG_LOCALE = 4;
      CONFIG_MCC = 1;
      CONFIG_MNC = 2;
      CONFIG_NAVIGATION = 64;
      CONFIG_ORIENTATION = 128;
      CONFIG_SCREEN_LAYOUT = 256;
      CONFIG_SCREEN_SIZE = 1024;
      CONFIG_SMALLEST_SCREEN_SIZE = 2048;
      CONFIG_TOUCHSCREEN = 8;
      CONFIG_UI_MODE = 512;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      DOCUMENT_LAUNCH_ALWAYS = 2;
      DOCUMENT_LAUNCH_INTO_EXISTING = 1;
      DOCUMENT_LAUNCH_NEVER = 3;
      DOCUMENT_LAUNCH_NONE = 0;
      FLAG_ALLOW_TASK_REPARENTING = 64;
      FLAG_ALWAYS_RETAIN_TASK_STATE = 8;
      FLAG_AUTO_REMOVE_FROM_RECENTS = 8192;
      FLAG_CLEAR_TASK_ON_LAUNCH = 4;
      FLAG_EXCLUDE_FROM_RECENTS = 32;
      FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS = 256;
      FLAG_FINISH_ON_TASK_LAUNCH = 2;
      FLAG_HARDWARE_ACCELERATED = 512;
      FLAG_IMMERSIVE = 2048;
      FLAG_MULTIPROCESS = 1;
      FLAG_NO_HISTORY = 128;
      FLAG_RELINQUISH_TASK_IDENTITY = 4096;
      FLAG_RESUME_WHILE_PAUSING = 16384;
      FLAG_SINGLE_USER = 1073741824;
      FLAG_STATE_NOT_NEEDED = 16;
      LAUNCH_MULTIPLE = 0;
      LAUNCH_SINGLE_INSTANCE = 3;
      LAUNCH_SINGLE_TASK = 2;
      LAUNCH_SINGLE_TOP = 1;
      PERSIST_ACROSS_REBOOTS = 2;
      PERSIST_NEVER = 1;
      PERSIST_ROOT_ONLY = 0;
      SCREEN_ORIENTATION_BEHIND = 3;
      SCREEN_ORIENTATION_FULL_SENSOR = 10;
      SCREEN_ORIENTATION_FULL_USER = 13;
      SCREEN_ORIENTATION_LANDSCAPE = 0;
      SCREEN_ORIENTATION_LOCKED = 14;
      SCREEN_ORIENTATION_NOSENSOR = 5;
      SCREEN_ORIENTATION_PORTRAIT = 1;
      SCREEN_ORIENTATION_REVERSE_LANDSCAPE = 8;
      SCREEN_ORIENTATION_REVERSE_PORTRAIT = 9;
      SCREEN_ORIENTATION_SENSOR = 4;
      SCREEN_ORIENTATION_SENSOR_LANDSCAPE = 6;
      SCREEN_ORIENTATION_SENSOR_PORTRAIT = 7;
      SCREEN_ORIENTATION_UNSPECIFIED = -1;
      SCREEN_ORIENTATION_USER = 2;
      SCREEN_ORIENTATION_USER_LANDSCAPE = 11;
      SCREEN_ORIENTATION_USER_PORTRAIT = 12;
      UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW = 1;
  public
    var
      fconfigChanges: jint; external name 'configChanges';
      fdocumentLaunchMode: jint; external name 'documentLaunchMode';
      fflags: jint; external name 'flags';
      flaunchMode: jint; external name 'launchMode';
      fmaxRecents: jint; external name 'maxRecents';
      fparentActivityName: JLString; external name 'parentActivityName';
      fpermission: JLString; external name 'permission';
      fpersistableMode: jint; external name 'persistableMode';
      fscreenOrientation: jint; external name 'screenOrientation';
      fsoftInputMode: jint; external name 'softInputMode';
      ftargetActivity: JLString; external name 'targetActivity';
      ftaskAffinity: JLString; external name 'taskAffinity';
      ftheme: jint; external name 'theme';
      fuiOptions: jint; external name 'uiOptions';
  public
    constructor create(); overload;
    constructor create(para1: ACPActivityInfo); overload;
    function getThemeResource(): jint; overload; virtual; final;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACPProviderInfo = class sealed external 'android.content.pm' name 'ProviderInfo' (ACPComponentInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_SINGLE_USER = 1073741824;
  public
    var
      fauthority: JLString; external name 'authority';
      fflags: jint; external name 'flags';
      fgrantUriPermissions: jboolean; external name 'grantUriPermissions';
      finitOrder: jint; external name 'initOrder';
      fisSyncable: jboolean deprecated; external name 'isSyncable';
      fmultiprocess: jboolean; external name 'multiprocess';
      fpathPermissions: Arr1ACPPathPermission; external name 'pathPermissions';
      freadPermission: JLString; external name 'readPermission';
      furiPermissionPatterns: Arr1AOPatternMatcher; external name 'uriPermissionPatterns';
      fwritePermission: JLString; external name 'writePermission';
  public
    constructor create(); overload;
    constructor create(para1: ACPProviderInfo); overload;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ACPServiceInfo = class external 'android.content.pm' name 'ServiceInfo' (ACPComponentInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_ISOLATED_PROCESS = 2;
      FLAG_SINGLE_USER = 1073741824;
      FLAG_STOP_WITH_TASK = 1;
  public
    var
      fflags: jint; external name 'flags';
      fpermission: JLString; external name 'permission';
  public
    constructor create(); overload;
    constructor create(para1: ACPServiceInfo); overload;
    procedure dump(para1: AUPrinter; para2: JLString); overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  JSIDSAPrivateKey = interface external 'java.security.interfaces' name 'DSAPrivateKey' (JSIDSAKey, JSPrivateKey)
    const
      serialVersionUID = jlong(7776497482533790279);
    function getX(): JMBigInteger; overload;
  end;

  JSIECPrivateKey = interface external 'java.security.interfaces' name 'ECPrivateKey' (JSPrivateKey, JSIECKey)
    const
      serialVersionUID = jlong(-7896394956925609184);
    function getS(): JMBigInteger; overload;
  end;

  JSIRSAPrivateKey = interface external 'java.security.interfaces' name 'RSAPrivateKey' (JSPrivateKey, JSIRSAKey)
    const
      serialVersionUID = jlong(5187144804936595022);
    function getPrivateExponent(): JMBigInteger; overload;
  end;

  JCIDHPrivateKey = interface external 'javax.crypto.interfaces' name 'DHPrivateKey' (JCIDHKey, JSPrivateKey)
    const
      serialVersionUID = jlong(2211791113380396553);
    function getX(): JMBigInteger; overload;
  end;

  JSIDSAPublicKey = interface external 'java.security.interfaces' name 'DSAPublicKey' (JSIDSAKey, JSPublicKey)
    const
      serialVersionUID = jlong(1234526332779022332);
    function getY(): JMBigInteger; overload;
  end;

  JSIECPublicKey = interface external 'java.security.interfaces' name 'ECPublicKey' (JSPublicKey, JSIECKey)
    const
      serialVersionUID = jlong(-3314988629879632826);
    function getW(): JSSECPoint; overload;
  end;

  JSIRSAPublicKey = interface external 'java.security.interfaces' name 'RSAPublicKey' (JSPublicKey, JSIRSAKey)
    const
      serialVersionUID = jlong(-8727434096241101194);
    function getPublicExponent(): JMBigInteger; overload;
  end;

  JCIDHPublicKey = interface external 'javax.crypto.interfaces' name 'DHPublicKey' (JCIDHKey, JSPublicKey)
    const
      serialVersionUID = jlong(-6628103563352519193);
    function getY(): JMBigInteger; overload;
  end;

  JCIPBEKey = interface external 'javax.crypto.interfaces' name 'PBEKey' (JCSecretKey)
    const
      serialVersionUID = jlong(-1430015993304333921);
    function getIterationCount(): jint; overload;
    function getSalt(): Arr1jbyte; overload;
    function getPassword(): Arr1jchar; overload;
  end;

  JCSSecretKeySpec = class external 'javax.crypto.spec' name 'SecretKeySpec' (JLObject, JCSecretKey, JSSKeySpec, JISerializable)
  public
    constructor create(para1: Arr1jbyte; para2: JLString); overload;
    constructor create(const para1: array of jbyte; para2: JLString); overload;
    constructor create(para1: Arr1jbyte; para2: jint; para3: jint; para4: JLString); overload;
    constructor create(const para1: array of jbyte; para2: jint; para3: jint; para4: JLString); overload;
    function getAlgorithm(): JLString; overload; virtual;
    function getFormat(): JLString; overload; virtual;
    function getEncoded(): Arr1jbyte; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  JSSQLDataException = class external 'java.sql' name 'SQLDataException' (JSSQLNonTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLFeatureNotSupportedException = class external 'java.sql' name 'SQLFeatureNotSupportedException' (JSSQLNonTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLIntegrityConstraintViolationException = class external 'java.sql' name 'SQLIntegrityConstraintViolationException' (JSSQLNonTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLInvalidAuthorizationSpecException = class external 'java.sql' name 'SQLInvalidAuthorizationSpecException' (JSSQLNonTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLNonTransientConnectionException = class external 'java.sql' name 'SQLNonTransientConnectionException' (JSSQLNonTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLSyntaxErrorException = class external 'java.sql' name 'SQLSyntaxErrorException' (JSSQLNonTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLTimeoutException = class external 'java.sql' name 'SQLTimeoutException' (JSSQLTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLTransactionRollbackException = class external 'java.sql' name 'SQLTransactionRollbackException' (JSSQLTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSSQLTransientConnectionException = class external 'java.sql' name 'SQLTransientConnectionException' (JSSQLTransientException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint); overload;
    constructor create(para1: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLThrowable); overload;
  end;

  JSDataTruncation = class external 'java.sql' name 'DataTruncation' (JSSQLWarning, JISerializable)
  public
    constructor create(para1: jint; para2: jboolean; para3: jboolean; para4: jint; para5: jint); overload;
    constructor create(para1: jint; para2: jboolean; para3: jboolean; para4: jint; para5: jint; para6: JLThrowable); overload;
    function getDataSize(): jint; overload; virtual;
    function getIndex(): jint; overload; virtual;
    function getParameter(): jboolean; overload; virtual;
    function getRead(): jboolean; overload; virtual;
    function getTransferSize(): jint; overload; virtual;
  end;

  JBIndexedPropertyChangeEvent = class external 'java.beans' name 'IndexedPropertyChangeEvent' (JBPropertyChangeEvent)
  public
    constructor create(para1: JLObject; para2: JLString; para3: JLObject; para4: JLObject; para5: jint); overload;
    function getIndex(): jint; overload; virtual;
  end;

  OAHCConnectionPoolTimeoutException = class external 'org.apache.http.conn' name 'ConnectionPoolTimeoutException' (OAHCConnectTimeoutException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  OAHCHttpHostConnectException = class external 'org.apache.http.conn' name 'HttpHostConnectException' (JNConnectException)
  public
    constructor create(para1: OAHHttpHost; para2: JNConnectException); overload;
    function getHost(): OAHHttpHost; overload; virtual;
  end;

  JNCClosedByInterruptException = class external 'java.nio.channels' name 'ClosedByInterruptException' (JNCAsynchronousCloseException)
  public
    constructor create(); overload;
  end;

  JUZZipError = class external 'java.util.zip' name 'ZipError' (JLInternalError)
  public
    constructor create(para1: JLString); overload;
  end;

  ATEditable = interface external 'android.text' name 'Editable' (JLCharSequence, ATGetChars, ATSpannable, JLAppendable)
    type
      InnerFactory = class;
      Arr1InnerFactory = array of InnerFactory;
      Arr2InnerFactory = array of Arr1InnerFactory;
      Arr3InnerFactory = array of Arr2InnerFactory;
      InnerFactory = class external 'android.text' name 'Factory' (JLObject)
      public
        constructor create(); overload;
        class function getInstance(): ATEditable.InnerFactory; static; overload;
        function newEditable(para1: JLCharSequence): ATEditable; overload; virtual;
      end;

    function replace(para1: jint; para2: jint; para3: JLCharSequence; para4: jint; para5: jint): ATEditable; overload;
    function replace(para1: jint; para2: jint; para3: JLCharSequence): ATEditable; overload;
    function insert(para1: jint; para2: JLCharSequence; para3: jint; para4: jint): ATEditable; overload;
    function insert(para1: jint; para2: JLCharSequence): ATEditable; overload;
    function delete(para1: jint; para2: jint): ATEditable; overload;
    function append(para1: JLCharSequence): ATEditable; overload;
    function append(para1: JLCharSequence; para2: jint; para3: jint): ATEditable; overload;
    function append(para1: jchar): ATEditable; overload;
    procedure clear(); overload;
    procedure clearSpans(); overload;
    procedure setFilters(para1: Arr1ATInputFilter); overload;
    procedure setFilters(var para1: array of ATInputFilter); overload;
    function getFilters(): Arr1ATInputFilter; overload;
  end;

  ATSpannableString = class external 'android.text' name 'SpannableString' (ATSpannableStringInternal, JLCharSequence, ATGetChars, ATSpannable)
  public
    constructor create(para1: JLCharSequence); overload;
    class function valueOf(para1: JLCharSequence): ATSpannableString; static; overload;
    procedure setSpan(para1: JLObject; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure removeSpan(para1: JLObject); overload; virtual;
    function subSequence(para1: jint; para2: jint): JLCharSequence; overload; virtual; final;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function nextSpanTransition(para1: jint; para2: jint; para3: JLClass): jint; overload; virtual;
    function getSpans(para1: jint; para2: jint; para3: JLClass): Arr1JLObject; overload; virtual;
    function getSpanFlags(para1: JLObject): jint; overload; virtual;
    function getSpanEnd(para1: JLObject): jint; overload; virtual;
    function getSpanStart(para1: JLObject): jint; overload; virtual;
  end;

  JUTreeMap = class external 'java.util' name 'TreeMap' (JUAbstractMap, JUSortedMap, JUNavigableMap, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUMap); overload;
    constructor create(para1: JUComparator); overload;
    constructor create(para1: JUSortedMap); overload;
    function clone(): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    procedure clear(); overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    function firstEntry(): JUMap.InnerEntry; overload; virtual;
    function pollFirstEntry(): JUMap.InnerEntry; overload; virtual;
    function firstKey(): JLObject; overload; virtual;
    function lastEntry(): JUMap.InnerEntry; overload; virtual;
    function pollLastEntry(): JUMap.InnerEntry; overload; virtual;
    function lastKey(): JLObject; overload; virtual;
    function lowerEntry(para1: JLObject): JUMap.InnerEntry; overload; virtual;
    function lowerKey(para1: JLObject): JLObject; overload; virtual;
    function floorEntry(para1: JLObject): JUMap.InnerEntry; overload; virtual;
    function floorKey(para1: JLObject): JLObject; overload; virtual;
    function ceilingEntry(para1: JLObject): JUMap.InnerEntry; overload; virtual;
    function ceilingKey(para1: JLObject): JLObject; overload; virtual;
    function higherEntry(para1: JLObject): JUMap.InnerEntry; overload; virtual;
    function higherKey(para1: JLObject): JLObject; overload; virtual;
    function comparator(): JUComparator; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function navigableKeySet(): JUNavigableSet; overload; virtual;
    function subMap(para1: JLObject; para2: jboolean; para3: JLObject; para4: jboolean): JUNavigableMap; overload; virtual;
    function subMap(para1: JLObject; para2: JLObject): JUSortedMap; overload; virtual;
    function headMap(para1: JLObject; para2: jboolean): JUNavigableMap; overload; virtual;
    function headMap(para1: JLObject): JUSortedMap; overload; virtual;
    function tailMap(para1: JLObject; para2: jboolean): JUNavigableMap; overload; virtual;
    function tailMap(para1: JLObject): JUSortedMap; overload; virtual;
    function descendingMap(): JUNavigableMap; overload; virtual;
    function descendingKeySet(): JUNavigableSet; overload; virtual;
  end;

  JUCConcurrentNavigableMap = interface external 'java.util.concurrent' name 'ConcurrentNavigableMap' (JUCConcurrentMap, JUNavigableMap)
    function subMap(para1: JLObject; para2: jboolean; para3: JLObject; para4: jboolean): JUCConcurrentNavigableMap; overload;
    function headMap(para1: JLObject; para2: jboolean): JUCConcurrentNavigableMap; overload;
    function tailMap(para1: JLObject; para2: jboolean): JUCConcurrentNavigableMap; overload;
    function subMap(para1: JLObject; para2: JLObject): JUCConcurrentNavigableMap; overload;
    function headMap(para1: JLObject): JUCConcurrentNavigableMap; overload;
    function tailMap(para1: JLObject): JUCConcurrentNavigableMap; overload;
    function descendingMap(): JUCConcurrentNavigableMap; overload;
    function navigableKeySet(): JUNavigableSet; overload;
    function keySet(): JUNavigableSet; overload;
    function descendingKeySet(): JUNavigableSet; overload;
  end;

  JUTreeSet = class external 'java.util' name 'TreeSet' (JUAbstractSet, JUNavigableSet, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    constructor create(para1: JUComparator); overload;
    constructor create(para1: JUSortedSet); overload;
    function add(para1: JLObject): jboolean; overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function comparator(): JUComparator; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function descendingIterator(): JUIterator; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
    function first(): JLObject; overload; virtual;
    function last(): JLObject; overload; virtual;
    function pollFirst(): JLObject; overload; virtual;
    function pollLast(): JLObject; overload; virtual;
    function higher(para1: JLObject): JLObject; overload; virtual;
    function lower(para1: JLObject): JLObject; overload; virtual;
    function ceiling(para1: JLObject): JLObject; overload; virtual;
    function floor(para1: JLObject): JLObject; overload; virtual;
    function descendingSet(): JUNavigableSet; overload; virtual;
    function subSet(para1: JLObject; para2: jboolean; para3: JLObject; para4: jboolean): JUNavigableSet; overload; virtual;
    function headSet(para1: JLObject; para2: jboolean): JUNavigableSet; overload; virtual;
    function tailSet(para1: JLObject; para2: jboolean): JUNavigableSet; overload; virtual;
    function subSet(para1: JLObject; para2: JLObject): JUSortedSet; overload; virtual;
    function headSet(para1: JLObject): JUSortedSet; overload; virtual;
    function tailSet(para1: JLObject): JUSortedSet; overload; virtual;
  end;

  JUCConcurrentSkipListSet = class external 'java.util.concurrent' name 'ConcurrentSkipListSet' (JUAbstractSet, JUNavigableSet, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUComparator); overload;
    constructor create(para1: JUCollection); overload;
    constructor create(para1: JUSortedSet); overload;
    function clone(): JUCConcurrentSkipListSet; overload; virtual;
    function size(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function descendingIterator(): JUIterator; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function removeAll(para1: JUCollection): jboolean; overload; virtual;
    function lower(para1: JLObject): JLObject; overload; virtual;
    function floor(para1: JLObject): JLObject; overload; virtual;
    function ceiling(para1: JLObject): JLObject; overload; virtual;
    function higher(para1: JLObject): JLObject; overload; virtual;
    function pollFirst(): JLObject; overload; virtual;
    function pollLast(): JLObject; overload; virtual;
    function comparator(): JUComparator; overload; virtual;
    function first(): JLObject; overload; virtual;
    function last(): JLObject; overload; virtual;
    function subSet(para1: JLObject; para2: jboolean; para3: JLObject; para4: jboolean): JUNavigableSet; overload; virtual;
    function headSet(para1: JLObject; para2: jboolean): JUNavigableSet; overload; virtual;
    function tailSet(para1: JLObject; para2: jboolean): JUNavigableSet; overload; virtual;
    function subSet(para1: JLObject; para2: JLObject): JUNavigableSet; overload; virtual;
    function headSet(para1: JLObject): JUNavigableSet; overload; virtual;
    function tailSet(para1: JLObject): JUNavigableSet; overload; virtual;
    function descendingSet(): JUNavigableSet; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function tailSet(para1: JLObject): JUSortedSet; overload; virtual;
    function headSet(para1: JLObject): JUSortedSet; overload; virtual;
    function subSet(para1: JLObject; para2: JLObject): JUSortedSet; overload; virtual;
  end;

  JUAbstractSequentialList = class abstract external 'java.util' name 'AbstractSequentialList' (JUAbstractList)
  strict protected
    constructor create(); overload;
  public
    procedure add(para1: jint; para2: JLObject); overload; virtual;
    function addAll(para1: jint; para2: JUCollection): jboolean; overload; virtual;
    function get(para1: jint): JLObject; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function listIterator(para1: jint): JUListIterator; overload; virtual; abstract;
    function remove(para1: jint): JLObject; overload; virtual;
    function &set(para1: jint; para2: JLObject): JLObject; overload; virtual;
  end;

  JUArrayList = class external 'java.util' name 'ArrayList' (JUAbstractList, JLCloneable, JISerializable, JURandomAccess)
  public
    constructor create(para1: jint); overload;
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    function add(para1: JLObject): jboolean; overload; virtual;
    procedure add(para1: jint; para2: JLObject); overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
    function addAll(para1: jint; para2: JUCollection): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function clone(): JLObject; overload; virtual;
    procedure ensureCapacity(para1: jint); overload; virtual;
    function get(para1: jint): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function indexOf(para1: JLObject): jint; overload; virtual;
    function lastIndexOf(para1: JLObject): jint; overload; virtual;
    function remove(para1: jint): JLObject; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
  strict protected
    procedure removeRange(para1: jint; para2: jint); overload; virtual;
  public
    function &set(para1: jint; para2: JLObject): JLObject; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    procedure trimToSize(); overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  JUVector = class external 'java.util' name 'Vector' (JUAbstractList, JUList, JURandomAccess, JLCloneable, JISerializable)
  strict protected
    var
      fcapacityIncrement: jint; external name 'capacityIncrement';
      felementCount: jint; external name 'elementCount';
      felementData: Arr1JLObject; external name 'elementData';
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jint); overload;
    constructor create(para1: JUCollection); overload;
    procedure add(para1: jint; para2: JLObject); overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function addAll(para1: jint; para2: JUCollection): jboolean; overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
    procedure addElement(para1: JLObject); overload; virtual;
    function capacity(): jint; overload; virtual;
    procedure clear(); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function containsAll(para1: JUCollection): jboolean; overload; virtual;
    procedure copyInto(para1: Arr1JLObject); overload; virtual;
    procedure copyInto(var para1: array of JLObject); overload; virtual;
    function elementAt(para1: jint): JLObject; overload; virtual;
    function elements(): JUEnumeration; overload; virtual;
    procedure ensureCapacity(para1: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function firstElement(): JLObject; overload; virtual;
    function get(para1: jint): JLObject; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function indexOf(para1: JLObject): jint; overload; virtual;
    function indexOf(para1: JLObject; para2: jint): jint; overload; virtual;
    procedure insertElementAt(para1: JLObject; para2: jint); overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function lastElement(): JLObject; overload; virtual;
    function lastIndexOf(para1: JLObject): jint; overload; virtual;
    function lastIndexOf(para1: JLObject; para2: jint): jint; overload; virtual;
    function remove(para1: jint): JLObject; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function removeAll(para1: JUCollection): jboolean; overload; virtual;
    procedure removeAllElements(); overload; virtual;
    function removeElement(para1: JLObject): jboolean; overload; virtual;
    procedure removeElementAt(para1: jint); overload; virtual;
  strict protected
    procedure removeRange(para1: jint; para2: jint); overload; virtual;
  public
    function retainAll(para1: JUCollection): jboolean; overload; virtual;
    function &set(para1: jint; para2: JLObject): JLObject; overload; virtual;
    procedure setElementAt(para1: JLObject; para2: jint); overload; virtual;
    procedure setSize(para1: jint); overload; virtual;
    function size(): jint; overload; virtual;
    function subList(para1: jint; para2: jint): JUList; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure trimToSize(); overload; virtual;
  end;

  JUPriorityQueue = class external 'java.util' name 'PriorityQueue' (JUAbstractQueue, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JUComparator); overload;
    constructor create(para1: JUCollection); overload;
    constructor create(para1: JUPriorityQueue); overload;
    constructor create(para1: JUSortedSet); overload;
    function iterator(): JUIterator; overload; virtual;
    function size(): jint; overload; virtual;
    procedure clear(); overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    function poll(): JLObject; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function comparator(): JUComparator; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
  end;

  JUCConcurrentLinkedQueue = class external 'java.util.concurrent' name 'ConcurrentLinkedQueue' (JUAbstractQueue, JUQueue, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    function add(para1: JLObject): jboolean; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    function poll(): JLObject; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
  end;

  JUArrayDeque = class external 'java.util' name 'ArrayDeque' (JUAbstractCollection, JUDeque, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JUCollection); overload;
    procedure addFirst(para1: JLObject); overload; virtual;
    procedure addLast(para1: JLObject); overload; virtual;
    function offerFirst(para1: JLObject): jboolean; overload; virtual;
    function offerLast(para1: JLObject): jboolean; overload; virtual;
    function removeFirst(): JLObject; overload; virtual;
    function removeLast(): JLObject; overload; virtual;
    function pollFirst(): JLObject; overload; virtual;
    function pollLast(): JLObject; overload; virtual;
    function getFirst(): JLObject; overload; virtual;
    function getLast(): JLObject; overload; virtual;
    function peekFirst(): JLObject; overload; virtual;
    function peekLast(): JLObject; overload; virtual;
    function removeFirstOccurrence(para1: JLObject): jboolean; overload; virtual;
    function removeLastOccurrence(para1: JLObject): jboolean; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    function remove(): JLObject; overload; virtual;
    function poll(): JLObject; overload; virtual;
    function element(): JLObject; overload; virtual;
    function peek(): JLObject; overload; virtual;
    procedure push(para1: JLObject); overload; virtual;
    function pop(): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function descendingIterator(): JUIterator; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function clone(): JUArrayDeque; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  JUCArrayBlockingQueue = class external 'java.util.concurrent' name 'ArrayBlockingQueue' (JUAbstractQueue, JUCBlockingQueue, JISerializable)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jboolean); overload;
    constructor create(para1: jint; para2: jboolean; para3: JUCollection); overload;
    function add(para1: JLObject): jboolean; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    procedure put(para1: JLObject); overload; virtual;  // throws java.lang.InterruptedException
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    function poll(): JLObject; overload; virtual;
    function take(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function peek(): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function remainingCapacity(): jint; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure clear(); overload; virtual;
    function drainTo(para1: JUCollection): jint; overload; virtual;
    function drainTo(para1: JUCollection; para2: jint): jint; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
  end;

  JUCBlockingDeque = interface external 'java.util.concurrent' name 'BlockingDeque' (JUCBlockingQueue, JUDeque)
    procedure addFirst(para1: JLObject); overload;
    procedure addLast(para1: JLObject); overload;
    function offerFirst(para1: JLObject): jboolean; overload;
    function offerLast(para1: JLObject): jboolean; overload;
    procedure putFirst(para1: JLObject); overload;  // throws java.lang.InterruptedException
    procedure putLast(para1: JLObject); overload;  // throws java.lang.InterruptedException
    function offerFirst(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload;  // throws java.lang.InterruptedException
    function offerLast(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload;  // throws java.lang.InterruptedException
    function takeFirst(): JLObject; overload;  // throws java.lang.InterruptedException
    function takeLast(): JLObject; overload;  // throws java.lang.InterruptedException
    function pollFirst(para1: jlong; para2: JUCTimeUnit): JLObject; overload;  // throws java.lang.InterruptedException
    function pollLast(para1: jlong; para2: JUCTimeUnit): JLObject; overload;  // throws java.lang.InterruptedException
    function removeFirstOccurrence(para1: JLObject): jboolean; overload;
    function removeLastOccurrence(para1: JLObject): jboolean; overload;
    function add(para1: JLObject): jboolean; overload;
    function offer(para1: JLObject): jboolean; overload;
    procedure put(para1: JLObject); overload;  // throws java.lang.InterruptedException
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload;  // throws java.lang.InterruptedException
    function remove(): JLObject; overload;
    function poll(): JLObject; overload;
    function take(): JLObject; overload;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload;  // throws java.lang.InterruptedException
    function element(): JLObject; overload;
    function peek(): JLObject; overload;
    function remove(para1: JLObject): jboolean; overload;
    function contains(para1: JLObject): jboolean; overload;
    function size(): jint; overload;
    function iterator(): JUIterator; overload;
    procedure push(para1: JLObject); overload;
  end;

  JUCDelayQueue = class external 'java.util.concurrent' name 'DelayQueue' (JUAbstractQueue, JUCBlockingQueue)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    function add(para1: JUCDelayed): jboolean; overload; virtual;
    function offer(para1: JUCDelayed): jboolean; overload; virtual;
    procedure put(para1: JUCDelayed); overload; virtual;
    function offer(para1: JUCDelayed; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;
    function poll(): JUCDelayed; overload; virtual;
    function take(): JUCDelayed; overload; virtual;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JUCDelayed; overload; virtual;  // throws java.lang.InterruptedException
    function peek(): JUCDelayed; overload; virtual;
    function size(): jint; overload; virtual;
    function drainTo(para1: JUCollection): jint; overload; virtual;
    function drainTo(para1: JUCollection; para2: jint): jint; overload; virtual;
    procedure clear(); overload; virtual;
    function remainingCapacity(): jint; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function poll(): JLObject; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function take(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    procedure put(para1: JLObject); overload; virtual;  // throws java.lang.InterruptedException
  end;

  JUCLinkedBlockingQueue = class external 'java.util.concurrent' name 'LinkedBlockingQueue' (JUAbstractQueue, JUCBlockingQueue, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JUCollection); overload;
    function size(): jint; overload; virtual;
    function remainingCapacity(): jint; overload; virtual;
    procedure put(para1: JLObject); overload; virtual;  // throws java.lang.InterruptedException
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    function offer(para1: JLObject): jboolean; overload; virtual;
    function take(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(): JLObject; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure clear(); overload; virtual;
    function drainTo(para1: JUCollection): jint; overload; virtual;
    function drainTo(para1: JUCollection; para2: jint): jint; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
  end;

  JUCPriorityBlockingQueue = class external 'java.util.concurrent' name 'PriorityBlockingQueue' (JUAbstractQueue, JUCBlockingQueue, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JUComparator); overload;
    constructor create(para1: JUCollection); overload;
    function add(para1: JLObject): jboolean; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    procedure put(para1: JLObject); overload; virtual;
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;
    function poll(): JLObject; overload; virtual;
    function take(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function peek(): JLObject; overload; virtual;
    function comparator(): JUComparator; overload; virtual;
    function size(): jint; overload; virtual;
    function remainingCapacity(): jint; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
    function drainTo(para1: JUCollection): jint; overload; virtual;
    function drainTo(para1: JUCollection; para2: jint): jint; overload; virtual;
    procedure clear(); overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
  end;

  JUCSynchronousQueue = class external 'java.util.concurrent' name 'SynchronousQueue' (JUAbstractQueue, JUCBlockingQueue, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jboolean); overload;
    procedure put(para1: JLObject); overload; virtual;  // throws java.lang.InterruptedException
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    function offer(para1: JLObject): jboolean; overload; virtual;
    function take(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(): JLObject; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
    function remainingCapacity(): jint; overload; virtual;
    procedure clear(); overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function containsAll(para1: JUCollection): jboolean; overload; virtual;
    function removeAll(para1: JUCollection): jboolean; overload; virtual;
    function retainAll(para1: JUCollection): jboolean; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function drainTo(para1: JUCollection): jint; overload; virtual;
    function drainTo(para1: JUCollection; para2: jint): jint; overload; virtual;
  end;

  ACSearchRecentSuggestionsProvider = class external 'android.content' name 'SearchRecentSuggestionsProvider' (ACContentProvider)
  public
    const
      DATABASE_MODE_2LINES = 2;
      DATABASE_MODE_QUERIES = 1;
  public
    constructor create(); overload;
  strict protected
    procedure setupSuggestions(para1: JLString; para2: jint); overload; virtual;
  public
    function delete(para1: ANUri; para2: JLString; para3: Arr1JLString): jint; overload; virtual;
    function delete(para1: ANUri; para2: JLString; var para3: array of JLString): jint; overload; virtual;
    function getType(para1: ANUri): JLString; overload; virtual;
    function insert(para1: ANUri; para2: ACContentValues): ANUri; overload; virtual;
    function onCreate(): jboolean; overload; virtual;
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString): ADCursor; overload; virtual;
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString): ADCursor; overload; virtual;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; para4: Arr1JLString): jint; overload; virtual;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; var para4: array of JLString): jint; overload; virtual;
  end;

  ATMMockContentProvider = class external 'android.test.mock' name 'MockContentProvider' (ACContentProvider)
  strict protected
    constructor create(); overload;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: JLString; para3: JLString; para4: Arr1ACPPathPermission); overload;
    constructor create(para1: ACContext; para2: JLString; para3: JLString; const para4: array of ACPPathPermission); overload;
    function delete(para1: ANUri; para2: JLString; para3: Arr1JLString): jint; overload; virtual;
    function delete(para1: ANUri; para2: JLString; var para3: array of JLString): jint; overload; virtual;
    function getType(para1: ANUri): JLString; overload; virtual;
    function insert(para1: ANUri; para2: ACContentValues): ANUri; overload; virtual;
    function onCreate(): jboolean; overload; virtual;
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString): ADCursor; overload; virtual;
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString): ADCursor; overload; virtual;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; para4: Arr1JLString): jint; overload; virtual;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; var para4: array of JLString): jint; overload; virtual;
    function bulkInsert(para1: ANUri; para2: Arr1ACContentValues): jint; overload; virtual;
    function bulkInsert(para1: ANUri; var para2: array of ACContentValues): jint; overload; virtual;
    procedure attachInfo(para1: ACContext; para2: ACPProviderInfo); overload; virtual;
    function applyBatch(para1: JUArrayList): Arr1ACContentProviderResult; overload; virtual;
    function getStreamTypes(para1: ANUri; para2: JLString): Arr1JLString; overload; virtual;
    function openTypedAssetFile(para1: ANUri; para2: JLString; para3: AOBundle): ACRAssetFileDescriptor; overload; virtual;
  end;

  ADAbstractWindowedCursor = class abstract external 'android.database' name 'AbstractWindowedCursor' (ADAbstractCursor)
  strict protected
    var
      fmWindow: ADCursorWindow; external name 'mWindow';
  public
    constructor create(); overload;
    function getBlob(para1: jint): Arr1jbyte; overload; virtual;
    function getString(para1: jint): JLString; overload; virtual;
    procedure copyStringToBuffer(para1: jint; para2: ADCharArrayBuffer); overload; virtual;
    function getShort(para1: jint): jshort; overload; virtual;
    function getInt(para1: jint): jint; overload; virtual;
    function getLong(para1: jint): jlong; overload; virtual;
    function getFloat(para1: jint): jfloat; overload; virtual;
    function getDouble(para1: jint): jdouble; overload; virtual;
    function isNull(para1: jint): jboolean; overload; virtual;
    function isBlob(para1: jint): jboolean; overload; virtual;
    function isString(para1: jint): jboolean; overload; virtual;
    function isLong(para1: jint): jboolean; overload; virtual;
    function isFloat(para1: jint): jboolean; overload; virtual;
    function getType(para1: jint): jint; overload; virtual;
  strict protected
    procedure checkPosition(); overload; virtual;
  public
    function getWindow(): ADCursorWindow; overload; virtual;
    procedure setWindow(para1: ADCursorWindow); overload; virtual;
    function hasWindow(): jboolean; overload; virtual;
  end;

  ADMatrixCursor = class external 'android.database' name 'MatrixCursor' (ADAbstractCursor)
  public
    type
      InnerRowBuilder = class;
      Arr1InnerRowBuilder = array of InnerRowBuilder;
      Arr2InnerRowBuilder = array of Arr1InnerRowBuilder;
      Arr3InnerRowBuilder = array of Arr2InnerRowBuilder;
      InnerRowBuilder = class external 'android.database' name 'RowBuilder' 
      end;

  public
    constructor create(para1: Arr1JLString; para2: jint); overload;
    constructor create(const para1: array of JLString; para2: jint); overload;
    constructor create(para1: Arr1JLString); overload;
    constructor create(const para1: array of JLString); overload;
    function newRow(): ADMatrixCursor.InnerRowBuilder; overload; virtual;
    procedure addRow(para1: Arr1JLObject); overload; virtual;
    procedure addRow(var para1: array of JLObject); overload; virtual;
    procedure addRow(para1: JLIterable); overload; virtual;
    function getCount(): jint; overload; virtual;
    function getColumnNames(): Arr1JLString; overload; virtual;
    function getString(para1: jint): JLString; overload; virtual;
    function getShort(para1: jint): jshort; overload; virtual;
    function getInt(para1: jint): jint; overload; virtual;
    function getLong(para1: jint): jlong; overload; virtual;
    function getFloat(para1: jint): jfloat; overload; virtual;
    function getDouble(para1: jint): jdouble; overload; virtual;
    function getBlob(para1: jint): Arr1jbyte; overload; virtual;
    function getType(para1: jint): jint; overload; virtual;
    function isNull(para1: jint): jboolean; overload; virtual;
  end;

  ADMergeCursor = class external 'android.database' name 'MergeCursor' (ADAbstractCursor)
  public
    constructor create(para1: Arr1ADCursor); overload;
    constructor create(const para1: array of ADCursor); overload;
    function getCount(): jint; overload; virtual;
    function onMove(para1: jint; para2: jint): jboolean; overload; virtual;
    function getString(para1: jint): JLString; overload; virtual;
    function getShort(para1: jint): jshort; overload; virtual;
    function getInt(para1: jint): jint; overload; virtual;
    function getLong(para1: jint): jlong; overload; virtual;
    function getFloat(para1: jint): jfloat; overload; virtual;
    function getDouble(para1: jint): jdouble; overload; virtual;
    function getType(para1: jint): jint; overload; virtual;
    function isNull(para1: jint): jboolean; overload; virtual;
    function getBlob(para1: jint): Arr1jbyte; overload; virtual;
    function getColumnNames(): Arr1JLString; overload; virtual;
    procedure deactivate(); overload; virtual;
    procedure close(); overload; virtual;
    procedure registerContentObserver(para1: ADContentObserver); overload; virtual;
    procedure unregisterContentObserver(para1: ADContentObserver); overload; virtual;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    function requery(): jboolean; overload; virtual;
  end;

  ACContextWrapper = class external 'android.content' name 'ContextWrapper' (ACContext)
  public
    constructor create(para1: ACContext); overload;
  strict protected
    procedure attachBaseContext(para1: ACContext); overload; virtual;
  public
    function getBaseContext(): ACContext; overload; virtual;
    function getAssets(): ACRAssetManager; overload; virtual;
    function getResources(): ACRResources; overload; virtual;
    function getPackageManager(): ACPPackageManager; overload; virtual;
    function getContentResolver(): ACContentResolver; overload; virtual;
    function getMainLooper(): AOLooper; overload; virtual;
    function getApplicationContext(): ACContext; overload; virtual;
    procedure setTheme(para1: jint); overload; virtual;
    function getTheme(): ACRResources.InnerTheme; overload; virtual;
    function getClassLoader(): JLClassLoader; overload; virtual;
    function getPackageName(): JLString; overload; virtual;
    function getApplicationInfo(): ACPApplicationInfo; overload; virtual;
    function getPackageResourcePath(): JLString; overload; virtual;
    function getPackageCodePath(): JLString; overload; virtual;
    function getSharedPreferences(para1: JLString; para2: jint): ACSharedPreferences; overload; virtual;
    function openFileInput(para1: JLString): JIFileInputStream; overload; virtual;  // throws java.io.FileNotFoundException
    function openFileOutput(para1: JLString; para2: jint): JIFileOutputStream; overload; virtual;  // throws java.io.FileNotFoundException
    function deleteFile(para1: JLString): jboolean; overload; virtual;
    function getFileStreamPath(para1: JLString): JIFile; overload; virtual;
    function fileList(): Arr1JLString; overload; virtual;
    function getFilesDir(): JIFile; overload; virtual;
    function getNoBackupFilesDir(): JIFile; overload; virtual;
    function getExternalFilesDir(para1: JLString): JIFile; overload; virtual;
    function getExternalFilesDirs(para1: JLString): Arr1JIFile; overload; virtual;
    function getObbDir(): JIFile; overload; virtual;
    function getObbDirs(): Arr1JIFile; overload; virtual;
    function getCacheDir(): JIFile; overload; virtual;
    function getCodeCacheDir(): JIFile; overload; virtual;
    function getExternalCacheDir(): JIFile; overload; virtual;
    function getExternalCacheDirs(): Arr1JIFile; overload; virtual;
    function getExternalMediaDirs(): Arr1JIFile; overload; virtual;
    function getDir(para1: JLString; para2: jint): JIFile; overload; virtual;
    function openOrCreateDatabase(para1: JLString; para2: jint; para3: ADSSQLiteDatabase.InnerCursorFactory): ADSSQLiteDatabase; overload; virtual;
    function openOrCreateDatabase(para1: JLString; para2: jint; para3: ADSSQLiteDatabase.InnerCursorFactory; para4: ADDatabaseErrorHandler): ADSSQLiteDatabase; overload; virtual;
    function deleteDatabase(para1: JLString): jboolean; overload; virtual;
    function getDatabasePath(para1: JLString): JIFile; overload; virtual;
    function databaseList(): Arr1JLString; overload; virtual;
    function getWallpaper(): AGDDrawable; overload; virtual;
    function peekWallpaper(): AGDDrawable; overload; virtual;
    function getWallpaperDesiredMinimumWidth(): jint; overload; virtual;
    function getWallpaperDesiredMinimumHeight(): jint; overload; virtual;
    procedure setWallpaper(para1: AGBitmap); overload; virtual;  // throws java.io.IOException
    procedure setWallpaper(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    procedure clearWallpaper(); overload; virtual;  // throws java.io.IOException
    procedure startActivity(para1: ACIntent); overload; virtual;
    procedure startActivity(para1: ACIntent; para2: AOBundle); overload; virtual;
    procedure startActivities(para1: Arr1ACIntent); overload; virtual;
    procedure startActivities(var para1: array of ACIntent); overload; virtual;
    procedure startActivities(para1: Arr1ACIntent; para2: AOBundle); overload; virtual;
    procedure startActivities(var para1: array of ACIntent; para2: AOBundle); overload; virtual;
    procedure startIntentSender(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: jint; para5: jint); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure startIntentSender(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: jint; para5: jint; para6: AOBundle); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure sendBroadcast(para1: ACIntent); overload; virtual;
    procedure sendBroadcast(para1: ACIntent; para2: JLString); overload; virtual;
    procedure sendOrderedBroadcast(para1: ACIntent; para2: JLString); overload; virtual;
    procedure sendOrderedBroadcast(para1: ACIntent; para2: JLString; para3: ACBroadcastReceiver; para4: AOHandler; para5: jint; para6: JLString; para7: AOBundle); overload; virtual;
    procedure sendBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual;
    procedure sendBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: JLString); overload; virtual;
    procedure sendOrderedBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: JLString; para4: ACBroadcastReceiver; para5: AOHandler; para6: jint; para7: JLString; para8: AOBundle); overload; virtual;
    procedure sendStickyBroadcast(para1: ACIntent); overload; virtual;
    procedure sendStickyOrderedBroadcast(para1: ACIntent; para2: ACBroadcastReceiver; para3: AOHandler; para4: jint; para5: JLString; para6: AOBundle); overload; virtual;
    procedure removeStickyBroadcast(para1: ACIntent); overload; virtual;
    procedure sendStickyBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual;
    procedure sendStickyOrderedBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: ACBroadcastReceiver; para4: AOHandler; para5: jint; para6: JLString; para7: AOBundle); overload; virtual;
    procedure removeStickyBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual;
    function registerReceiver(para1: ACBroadcastReceiver; para2: ACIntentFilter): ACIntent; overload; virtual;
    function registerReceiver(para1: ACBroadcastReceiver; para2: ACIntentFilter; para3: JLString; para4: AOHandler): ACIntent; overload; virtual;
    procedure unregisterReceiver(para1: ACBroadcastReceiver); overload; virtual;
    function startService(para1: ACIntent): ACComponentName; overload; virtual;
    function stopService(para1: ACIntent): jboolean; overload; virtual;
    function bindService(para1: ACIntent; para2: ACServiceConnection; para3: jint): jboolean; overload; virtual;
    procedure unbindService(para1: ACServiceConnection); overload; virtual;
    function startInstrumentation(para1: ACComponentName; para2: JLString; para3: AOBundle): jboolean; overload; virtual;
    function getSystemService(para1: JLString): JLObject; overload; virtual;
    function checkPermission(para1: JLString; para2: jint; para3: jint): jint; overload; virtual;
    function checkCallingPermission(para1: JLString): jint; overload; virtual;
    function checkCallingOrSelfPermission(para1: JLString): jint; overload; virtual;
    procedure enforcePermission(para1: JLString; para2: jint; para3: jint; para4: JLString); overload; virtual;
    procedure enforceCallingPermission(para1: JLString; para2: JLString); overload; virtual;
    procedure enforceCallingOrSelfPermission(para1: JLString; para2: JLString); overload; virtual;
    procedure grantUriPermission(para1: JLString; para2: ANUri; para3: jint); overload; virtual;
    procedure revokeUriPermission(para1: ANUri; para2: jint); overload; virtual;
    function checkUriPermission(para1: ANUri; para2: jint; para3: jint; para4: jint): jint; overload; virtual;
    function checkCallingUriPermission(para1: ANUri; para2: jint): jint; overload; virtual;
    function checkCallingOrSelfUriPermission(para1: ANUri; para2: jint): jint; overload; virtual;
    function checkUriPermission(para1: ANUri; para2: JLString; para3: JLString; para4: jint; para5: jint; para6: jint): jint; overload; virtual;
    procedure enforceUriPermission(para1: ANUri; para2: jint; para3: jint; para4: jint; para5: JLString); overload; virtual;
    procedure enforceCallingUriPermission(para1: ANUri; para2: jint; para3: JLString); overload; virtual;
    procedure enforceCallingOrSelfUriPermission(para1: ANUri; para2: jint; para3: JLString); overload; virtual;
    procedure enforceUriPermission(para1: ANUri; para2: JLString; para3: JLString; para4: jint; para5: jint; para6: jint; para7: JLString); overload; virtual;
    function createPackageContext(para1: JLString; para2: jint): ACContext; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function createConfigurationContext(para1: ACRConfiguration): ACContext; overload; virtual;
    function createDisplayContext(para1: AVDisplay): ACContext; overload; virtual;
    function isRestricted(): jboolean; overload; virtual;
  end;

  ATMMockContext = class external 'android.test.mock' name 'MockContext' (ACContext)
  public
    constructor create(); overload;
    function getAssets(): ACRAssetManager; overload; virtual;
    function getResources(): ACRResources; overload; virtual;
    function getPackageManager(): ACPPackageManager; overload; virtual;
    function getContentResolver(): ACContentResolver; overload; virtual;
    function getMainLooper(): AOLooper; overload; virtual;
    function getApplicationContext(): ACContext; overload; virtual;
    procedure setTheme(para1: jint); overload; virtual;
    function getTheme(): ACRResources.InnerTheme; overload; virtual;
    function getClassLoader(): JLClassLoader; overload; virtual;
    function getPackageName(): JLString; overload; virtual;
    function getApplicationInfo(): ACPApplicationInfo; overload; virtual;
    function getPackageResourcePath(): JLString; overload; virtual;
    function getPackageCodePath(): JLString; overload; virtual;
    function getSharedPreferences(para1: JLString; para2: jint): ACSharedPreferences; overload; virtual;
    function openFileInput(para1: JLString): JIFileInputStream; overload; virtual;  // throws java.io.FileNotFoundException
    function openFileOutput(para1: JLString; para2: jint): JIFileOutputStream; overload; virtual;  // throws java.io.FileNotFoundException
    function deleteFile(para1: JLString): jboolean; overload; virtual;
    function getFileStreamPath(para1: JLString): JIFile; overload; virtual;
    function fileList(): Arr1JLString; overload; virtual;
    function getFilesDir(): JIFile; overload; virtual;
    function getNoBackupFilesDir(): JIFile; overload; virtual;
    function getExternalFilesDir(para1: JLString): JIFile; overload; virtual;
    function getObbDir(): JIFile; overload; virtual;
    function getCacheDir(): JIFile; overload; virtual;
    function getCodeCacheDir(): JIFile; overload; virtual;
    function getExternalCacheDir(): JIFile; overload; virtual;
    function getDir(para1: JLString; para2: jint): JIFile; overload; virtual;
    function openOrCreateDatabase(para1: JLString; para2: jint; para3: ADSSQLiteDatabase.InnerCursorFactory): ADSSQLiteDatabase; overload; virtual;
    function openOrCreateDatabase(para1: JLString; para2: jint; para3: ADSSQLiteDatabase.InnerCursorFactory; para4: ADDatabaseErrorHandler): ADSSQLiteDatabase; overload; virtual;
    function getDatabasePath(para1: JLString): JIFile; overload; virtual;
    function databaseList(): Arr1JLString; overload; virtual;
    function deleteDatabase(para1: JLString): jboolean; overload; virtual;
    function getWallpaper(): AGDDrawable; overload; virtual;
    function peekWallpaper(): AGDDrawable; overload; virtual;
    function getWallpaperDesiredMinimumWidth(): jint; overload; virtual;
    function getWallpaperDesiredMinimumHeight(): jint; overload; virtual;
    procedure setWallpaper(para1: AGBitmap); overload; virtual;  // throws java.io.IOException
    procedure setWallpaper(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    procedure clearWallpaper(); overload; virtual;
    procedure startActivity(para1: ACIntent); overload; virtual;
    procedure startActivity(para1: ACIntent; para2: AOBundle); overload; virtual;
    procedure startActivities(para1: Arr1ACIntent); overload; virtual;
    procedure startActivities(var para1: array of ACIntent); overload; virtual;
    procedure startActivities(para1: Arr1ACIntent; para2: AOBundle); overload; virtual;
    procedure startActivities(var para1: array of ACIntent; para2: AOBundle); overload; virtual;
    procedure startIntentSender(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: jint; para5: jint); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure startIntentSender(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: jint; para5: jint; para6: AOBundle); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure sendBroadcast(para1: ACIntent); overload; virtual;
    procedure sendBroadcast(para1: ACIntent; para2: JLString); overload; virtual;
    procedure sendOrderedBroadcast(para1: ACIntent; para2: JLString); overload; virtual;
    procedure sendOrderedBroadcast(para1: ACIntent; para2: JLString; para3: ACBroadcastReceiver; para4: AOHandler; para5: jint; para6: JLString; para7: AOBundle); overload; virtual;
    procedure sendBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual;
    procedure sendBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: JLString); overload; virtual;
    procedure sendOrderedBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: JLString; para4: ACBroadcastReceiver; para5: AOHandler; para6: jint; para7: JLString; para8: AOBundle); overload; virtual;
    procedure sendStickyBroadcast(para1: ACIntent); overload; virtual;
    procedure sendStickyOrderedBroadcast(para1: ACIntent; para2: ACBroadcastReceiver; para3: AOHandler; para4: jint; para5: JLString; para6: AOBundle); overload; virtual;
    procedure removeStickyBroadcast(para1: ACIntent); overload; virtual;
    procedure sendStickyBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual;
    procedure sendStickyOrderedBroadcastAsUser(para1: ACIntent; para2: AOUserHandle; para3: ACBroadcastReceiver; para4: AOHandler; para5: jint; para6: JLString; para7: AOBundle); overload; virtual;
    procedure removeStickyBroadcastAsUser(para1: ACIntent; para2: AOUserHandle); overload; virtual;
    function registerReceiver(para1: ACBroadcastReceiver; para2: ACIntentFilter): ACIntent; overload; virtual;
    function registerReceiver(para1: ACBroadcastReceiver; para2: ACIntentFilter; para3: JLString; para4: AOHandler): ACIntent; overload; virtual;
    procedure unregisterReceiver(para1: ACBroadcastReceiver); overload; virtual;
    function startService(para1: ACIntent): ACComponentName; overload; virtual;
    function stopService(para1: ACIntent): jboolean; overload; virtual;
    function bindService(para1: ACIntent; para2: ACServiceConnection; para3: jint): jboolean; overload; virtual;
    procedure unbindService(para1: ACServiceConnection); overload; virtual;
    function startInstrumentation(para1: ACComponentName; para2: JLString; para3: AOBundle): jboolean; overload; virtual;
    function getSystemService(para1: JLString): JLObject; overload; virtual;
    function checkPermission(para1: JLString; para2: jint; para3: jint): jint; overload; virtual;
    function checkCallingPermission(para1: JLString): jint; overload; virtual;
    function checkCallingOrSelfPermission(para1: JLString): jint; overload; virtual;
    procedure enforcePermission(para1: JLString; para2: jint; para3: jint; para4: JLString); overload; virtual;
    procedure enforceCallingPermission(para1: JLString; para2: JLString); overload; virtual;
    procedure enforceCallingOrSelfPermission(para1: JLString; para2: JLString); overload; virtual;
    procedure grantUriPermission(para1: JLString; para2: ANUri; para3: jint); overload; virtual;
    procedure revokeUriPermission(para1: ANUri; para2: jint); overload; virtual;
    function checkUriPermission(para1: ANUri; para2: jint; para3: jint; para4: jint): jint; overload; virtual;
    function checkCallingUriPermission(para1: ANUri; para2: jint): jint; overload; virtual;
    function checkCallingOrSelfUriPermission(para1: ANUri; para2: jint): jint; overload; virtual;
    function checkUriPermission(para1: ANUri; para2: JLString; para3: JLString; para4: jint; para5: jint; para6: jint): jint; overload; virtual;
    procedure enforceUriPermission(para1: ANUri; para2: jint; para3: jint; para4: jint; para5: JLString); overload; virtual;
    procedure enforceCallingUriPermission(para1: ANUri; para2: jint; para3: JLString); overload; virtual;
    procedure enforceCallingOrSelfUriPermission(para1: ANUri; para2: jint; para3: JLString); overload; virtual;
    procedure enforceUriPermission(para1: ANUri; para2: JLString; para3: JLString; para4: jint; para5: jint; para6: jint; para7: JLString); overload; virtual;
    function createPackageContext(para1: JLString; para2: jint): ACContext; overload; virtual;  // throws android.content.pm.PackageManager$NameNotFoundException
    function createConfigurationContext(para1: ACRConfiguration): ACContext; overload; virtual;
    function createDisplayContext(para1: AVDisplay): ACContext; overload; virtual;
    function isRestricted(): jboolean; overload; virtual;
    function getExternalFilesDirs(para1: JLString): Arr1JIFile; overload; virtual;
    function getObbDirs(): Arr1JIFile; overload; virtual;
    function getExternalCacheDirs(): Arr1JIFile; overload; virtual;
    function getExternalMediaDirs(): Arr1JIFile; overload; virtual;
  end;

  AGBitmapRegionDecoder = class sealed external 'android.graphics' name 'BitmapRegionDecoder' (JLObject)
  public
    class function newInstance(para1: Arr1jbyte; para2: jint; para3: jint; para4: jboolean): AGBitmapRegionDecoder; static; overload;  // throws java.io.IOException
    class function newInstance(var para1: array of jbyte; para2: jint; para3: jint; para4: jboolean): AGBitmapRegionDecoder; static; overload;  // throws java.io.IOException
    class function newInstance(para1: JIFileDescriptor; para2: jboolean): AGBitmapRegionDecoder; static; overload;  // throws java.io.IOException
    class function newInstance(para1: JIInputStream; para2: jboolean): AGBitmapRegionDecoder; static; overload;  // throws java.io.IOException
    class function newInstance(para1: JLString; para2: jboolean): AGBitmapRegionDecoder; static; overload;  // throws java.io.IOException
    function decodeRegion(para1: AGRect; para2: AGBitmapFactory.InnerOptions): AGBitmap; overload; virtual;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
    procedure recycle(); overload; virtual;
    function isRecycled(): jboolean; overload; virtual; final;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AGDDrawable = class abstract external 'android.graphics.drawable' name 'Drawable' (JLObject)
  public
    type
      InnerConstantState = class;
      Arr1InnerConstantState = array of InnerConstantState;
      Arr2InnerConstantState = array of Arr1InnerConstantState;
      Arr3InnerConstantState = array of Arr2InnerConstantState;
      InnerCallback = interface;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerConstantState = class abstract external 'android.graphics.drawable' name 'ConstantState' (JLObject)
      public
        constructor create(); overload;
        function newDrawable(): AGDDrawable; overload; virtual; abstract;
        function newDrawable(para1: ACRResources): AGDDrawable; overload; virtual;
        function newDrawable(para1: ACRResources; para2: ACRResources.InnerTheme): AGDDrawable; overload; virtual;
        function getChangingConfigurations(): jint; overload; virtual; abstract;
        function canApplyTheme(): jboolean; overload; virtual;
      end;

      InnerCallback = interface external 'android.graphics.drawable' name 'Callback' 
        procedure invalidateDrawable(para1: AGDDrawable); overload;
        procedure scheduleDrawable(para1: AGDDrawable; para2: JLRunnable; para3: jlong); overload;
        procedure unscheduleDrawable(para1: AGDDrawable; para2: JLRunnable); overload;
      end;

  public
    constructor create(); overload;
    procedure draw(para1: AGCanvas); overload; virtual; abstract;
    procedure setBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setBounds(para1: AGRect); overload; virtual;
    procedure copyBounds(para1: AGRect); overload; virtual; final;
    function copyBounds(): AGRect; overload; virtual; final;
    function getBounds(): AGRect; overload; virtual; final;
    function getDirtyBounds(): AGRect; overload; virtual;
    procedure setChangingConfigurations(para1: jint); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    procedure setDither(para1: jboolean); overload; virtual;
    procedure setFilterBitmap(para1: jboolean); overload; virtual;
    procedure setCallback(para1: AGDDrawable.InnerCallback); overload; virtual; final;
    function getCallback(): AGDDrawable.InnerCallback; overload; virtual;
    procedure invalidateSelf(); overload; virtual;
    procedure scheduleSelf(para1: JLRunnable; para2: jlong); overload; virtual;
    procedure unscheduleSelf(para1: JLRunnable); overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual; abstract;
    function getAlpha(): jint; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual; abstract;
    procedure setColorFilter(para1: jint; para2: AGPorterDuff.InnerMode); overload; virtual;
    procedure setTint(para1: jint); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getColorFilter(): AGColorFilter; overload; virtual;
    procedure clearColorFilter(); overload; virtual;
    procedure setHotspot(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setHotspotBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    function isStateful(): jboolean; overload; virtual;
    function setState(para1: Arr1jint): jboolean; overload; virtual;
    function setState(var para1: array of jint): jboolean; overload; virtual;
    function getState(): Arr1jint; overload; virtual;
    procedure jumpToCurrentState(); overload; virtual;
    function getCurrent(): AGDDrawable; overload; virtual;
    function setLevel(para1: jint): jboolean; overload; virtual; final;
    function getLevel(): jint; overload; virtual; final;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    function isVisible(): jboolean; overload; virtual; final;
    procedure setAutoMirrored(para1: jboolean); overload; virtual;
    function isAutoMirrored(): jboolean; overload; virtual;
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    function getOpacity(): jint; overload; virtual; abstract;
    class function resolveOpacity(para1: jint; para2: jint): jint; static; overload;
    function getTransparentRegion(): AGRegion; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getMinimumWidth(): jint; overload; virtual;
    function getMinimumHeight(): jint; overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
    class function createFromStream(para1: JIInputStream; para2: JLString): AGDDrawable; static; overload;
    class function createFromResourceStream(para1: ACRResources; para2: AUTypedValue; para3: JIInputStream; para4: JLString): AGDDrawable; static; overload;
    class function createFromResourceStream(para1: ACRResources; para2: AUTypedValue; para3: JIInputStream; para4: JLString; para5: AGBitmapFactory.InnerOptions): AGDDrawable; static; overload;
    class function createFromXml(para1: ACRResources; para2: OXVXmlPullParser): AGDDrawable; static; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    class function createFromXml(para1: ACRResources; para2: OXVXmlPullParser; para3: ACRResources.InnerTheme): AGDDrawable; static; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    class function createFromXmlInner(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet): AGDDrawable; static; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    class function createFromXmlInner(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme): AGDDrawable; static; overload;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    class function createFromPath(para1: JLString): AGDDrawable; static; overload;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
  end;

  APContacts = class external 'android.provider' name 'Contacts' (JLObject)
  public
    type
      InnerIntents = class;
      Arr1InnerIntents = array of InnerIntents;
      Arr2InnerIntents = array of Arr1InnerIntents;
      Arr3InnerIntents = array of Arr2InnerIntents;
      InnerExtensionsColumns = interface;
      Arr1InnerExtensionsColumns = array of InnerExtensionsColumns;
      Arr2InnerExtensionsColumns = array of Arr1InnerExtensionsColumns;
      Arr3InnerExtensionsColumns = array of Arr2InnerExtensionsColumns;
      InnerPhotosColumns = interface;
      Arr1InnerPhotosColumns = array of InnerPhotosColumns;
      Arr2InnerPhotosColumns = array of Arr1InnerPhotosColumns;
      Arr3InnerPhotosColumns = array of Arr2InnerPhotosColumns;
      InnerOrganizationColumns = interface;
      Arr1InnerOrganizationColumns = array of InnerOrganizationColumns;
      Arr2InnerOrganizationColumns = array of Arr1InnerOrganizationColumns;
      Arr3InnerOrganizationColumns = array of Arr2InnerOrganizationColumns;
      InnerPresenceColumns = interface;
      Arr1InnerPresenceColumns = array of InnerPresenceColumns;
      Arr2InnerPresenceColumns = array of Arr1InnerPresenceColumns;
      Arr3InnerPresenceColumns = array of Arr2InnerPresenceColumns;
      InnerContactMethodsColumns = interface;
      Arr1InnerContactMethodsColumns = array of InnerContactMethodsColumns;
      Arr2InnerContactMethodsColumns = array of Arr1InnerContactMethodsColumns;
      Arr3InnerContactMethodsColumns = array of Arr2InnerContactMethodsColumns;
      InnerPhonesColumns = interface;
      Arr1InnerPhonesColumns = array of InnerPhonesColumns;
      Arr2InnerPhonesColumns = array of Arr1InnerPhonesColumns;
      Arr3InnerPhonesColumns = array of Arr2InnerPhonesColumns;
      InnerGroupsColumns = interface;
      Arr1InnerGroupsColumns = array of InnerGroupsColumns;
      Arr2InnerGroupsColumns = array of Arr1InnerGroupsColumns;
      Arr3InnerGroupsColumns = array of Arr2InnerGroupsColumns;
      InnerPeopleColumns = interface;
      Arr1InnerPeopleColumns = array of InnerPeopleColumns;
      Arr2InnerPeopleColumns = array of Arr1InnerPeopleColumns;
      Arr3InnerPeopleColumns = array of Arr2InnerPeopleColumns;
      InnerSettingsColumns = interface;
      Arr1InnerSettingsColumns = array of InnerSettingsColumns;
      Arr2InnerSettingsColumns = array of Arr1InnerSettingsColumns;
      Arr3InnerSettingsColumns = array of Arr2InnerSettingsColumns;
      InnerExtensions = class;
      Arr1InnerExtensions = array of InnerExtensions;
      Arr2InnerExtensions = array of Arr1InnerExtensions;
      Arr3InnerExtensions = array of Arr2InnerExtensions;
      InnerPhotos = class;
      Arr1InnerPhotos = array of InnerPhotos;
      Arr2InnerPhotos = array of Arr1InnerPhotos;
      Arr3InnerPhotos = array of Arr2InnerPhotos;
      InnerOrganizations = class;
      Arr1InnerOrganizations = array of InnerOrganizations;
      Arr2InnerOrganizations = array of Arr1InnerOrganizations;
      Arr3InnerOrganizations = array of Arr2InnerOrganizations;
      InnerGroupMembership = class;
      Arr1InnerGroupMembership = array of InnerGroupMembership;
      Arr2InnerGroupMembership = array of Arr1InnerGroupMembership;
      Arr3InnerGroupMembership = array of Arr2InnerGroupMembership;
      InnerGroups = class;
      Arr1InnerGroups = array of InnerGroups;
      Arr2InnerGroups = array of Arr1InnerGroups;
      Arr3InnerGroups = array of Arr2InnerGroups;
      InnerContactMethods = class;
      Arr1InnerContactMethods = array of InnerContactMethods;
      Arr2InnerContactMethods = array of Arr1InnerContactMethods;
      Arr3InnerContactMethods = array of Arr2InnerContactMethods;
      InnerPhones = class;
      Arr1InnerPhones = array of InnerPhones;
      Arr2InnerPhones = array of Arr1InnerPhones;
      Arr3InnerPhones = array of Arr2InnerPhones;
      InnerPeople = class;
      Arr1InnerPeople = array of InnerPeople;
      Arr2InnerPeople = array of Arr1InnerPeople;
      Arr3InnerPeople = array of Arr2InnerPeople;
      InnerSettings = class;
      Arr1InnerSettings = array of InnerSettings;
      Arr2InnerSettings = array of Arr1InnerSettings;
      Arr3InnerSettings = array of Arr2InnerSettings;
      InnerIntents = class sealed external 'android.provider' name 'Intents' (JLObject)
      public
        type
          InnerInsert = class;
          Arr1InnerInsert = array of InnerInsert;
          Arr2InnerInsert = array of Arr1InnerInsert;
          Arr3InnerInsert = array of Arr2InnerInsert;
          InnerUI = class;
          Arr1InnerUI = array of InnerUI;
          Arr2InnerUI = array of Arr1InnerUI;
          Arr3InnerUI = array of Arr2InnerUI;
          InnerInsert = class sealed external 'android.provider' name 'Insert' (JLObject)
          public
            const
              ACTION = 'android.intent.action.INSERT' deprecated;
              COMPANY = 'company' deprecated;
              EMAIL = 'email' deprecated;
              EMAIL_ISPRIMARY = 'email_isprimary' deprecated;
              EMAIL_TYPE = 'email_type' deprecated;
              FULL_MODE = 'full_mode' deprecated;
              IM_HANDLE = 'im_handle' deprecated;
              IM_ISPRIMARY = 'im_isprimary' deprecated;
              IM_PROTOCOL = 'im_protocol' deprecated;
              JOB_TITLE = 'job_title' deprecated;
              NAME = 'name' deprecated;
              NOTES = 'notes' deprecated;
              PHONE = 'phone' deprecated;
              PHONETIC_NAME = 'phonetic_name' deprecated;
              PHONE_ISPRIMARY = 'phone_isprimary' deprecated;
              PHONE_TYPE = 'phone_type' deprecated;
              POSTAL = 'postal' deprecated;
              POSTAL_ISPRIMARY = 'postal_isprimary' deprecated;
              POSTAL_TYPE = 'postal_type' deprecated;
              SECONDARY_EMAIL = 'secondary_email' deprecated;
              SECONDARY_EMAIL_TYPE = 'secondary_email_type' deprecated;
              SECONDARY_PHONE = 'secondary_phone' deprecated;
              SECONDARY_PHONE_TYPE = 'secondary_phone_type' deprecated;
              TERTIARY_EMAIL = 'tertiary_email' deprecated;
              TERTIARY_EMAIL_TYPE = 'tertiary_email_type' deprecated;
              TERTIARY_PHONE = 'tertiary_phone' deprecated;
              TERTIARY_PHONE_TYPE = 'tertiary_phone_type' deprecated;
          public
            constructor create(); overload;
          end;

          InnerUI = class sealed external 'android.provider' name 'UI' (JLObject)
          public
            const
              FILTER_CONTACTS_ACTION = 'com.android.contacts.action.FILTER_CONTACTS' deprecated;
              FILTER_TEXT_EXTRA_KEY = 'com.android.contacts.extra.FILTER_TEXT' deprecated;
              GROUP_NAME_EXTRA_KEY = 'com.android.contacts.extra.GROUP' deprecated;
              LIST_ALL_CONTACTS_ACTION = 'com.android.contacts.action.LIST_ALL_CONTACTS' deprecated;
              LIST_CONTACTS_WITH_PHONES_ACTION = 'com.android.contacts.action.LIST_CONTACTS_WITH_PHONES' deprecated;
              LIST_DEFAULT = 'com.android.contacts.action.LIST_DEFAULT' deprecated;
              LIST_FREQUENT_ACTION = 'com.android.contacts.action.LIST_FREQUENT' deprecated;
              LIST_GROUP_ACTION = 'com.android.contacts.action.LIST_GROUP' deprecated;
              LIST_STARRED_ACTION = 'com.android.contacts.action.LIST_STARRED' deprecated;
              LIST_STREQUENT_ACTION = 'com.android.contacts.action.LIST_STREQUENT' deprecated;
              TITLE_EXTRA_KEY = 'com.android.contacts.extra.TITLE_EXTRA' deprecated;
          public
            constructor create(); overload;
          end;

      public
        const
          ATTACH_IMAGE = 'com.android.contacts.action.ATTACH_IMAGE' deprecated;
          EXTRA_CREATE_DESCRIPTION = 'com.android.contacts.action.CREATE_DESCRIPTION' deprecated;
          EXTRA_FORCE_CREATE = 'com.android.contacts.action.FORCE_CREATE' deprecated;
          SEARCH_SUGGESTION_CLICKED = 'android.provider.Contacts.SEARCH_SUGGESTION_CLICKED' deprecated;
          SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED = 'android.provider.Contacts.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED' deprecated;
          SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED = 'android.provider.Contacts.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED' deprecated;
          SHOW_OR_CREATE_CONTACT = 'com.android.contacts.action.SHOW_OR_CREATE_CONTACT' deprecated;
      public
        constructor create(); overload;
      end;

      InnerExtensionsColumns = interface external 'android.provider' name 'ExtensionsColumns' 
        const
          NAME = 'name' deprecated;
          VALUE = 'value' deprecated;
      end;

      InnerPhotosColumns = interface external 'android.provider' name 'PhotosColumns' 
        const
          DATA = 'data' deprecated;
          DOWNLOAD_REQUIRED = 'download_required' deprecated;
          EXISTS_ON_SERVER = 'exists_on_server' deprecated;
          LOCAL_VERSION = 'local_version' deprecated;
          PERSON_ID = 'person' deprecated;
          SYNC_ERROR = 'sync_error' deprecated;
      end;

      InnerOrganizationColumns = interface external 'android.provider' name 'OrganizationColumns' 
        const
          COMPANY = 'company' deprecated;
          ISPRIMARY = 'isprimary' deprecated;
          &LABEL = 'label' deprecated;
          PERSON_ID = 'person' deprecated;
          TITLE = 'title' deprecated;
          &TYPE = 'type' deprecated;
          TYPE_CUSTOM = 0 deprecated;
          TYPE_OTHER = 2 deprecated;
          TYPE_WORK = 1 deprecated;
      end;

      InnerPresenceColumns = interface external 'android.provider' name 'PresenceColumns' 
        const
          AVAILABLE = 5;
          AWAY = 2;
          DO_NOT_DISTURB = 4;
          IDLE = 3;
          IM_ACCOUNT = 'im_account' deprecated;
          IM_HANDLE = 'im_handle' deprecated;
          IM_PROTOCOL = 'im_protocol' deprecated;
          INVISIBLE = 1;
          OFFLINE = 0;
          PRESENCE_CUSTOM_STATUS = 'status';
          PRESENCE_STATUS = 'mode';
          PRIORITY = 'priority';
      end;

      InnerContactMethodsColumns = interface external 'android.provider' name 'ContactMethodsColumns' 
        const
          AUX_DATA = 'aux_data' deprecated;
          DATA = 'data' deprecated;
          ISPRIMARY = 'isprimary' deprecated;
          KIND = 'kind' deprecated;
          &LABEL = 'label' deprecated;
          &TYPE = 'type' deprecated;
          TYPE_CUSTOM = 0 deprecated;
          TYPE_HOME = 1 deprecated;
          TYPE_OTHER = 3 deprecated;
          TYPE_WORK = 2 deprecated;
      end;

      InnerPhonesColumns = interface external 'android.provider' name 'PhonesColumns' 
        const
          ISPRIMARY = 'isprimary' deprecated;
          &LABEL = 'label' deprecated;
          NUMBER = 'number' deprecated;
          NUMBER_KEY = 'number_key' deprecated;
          &TYPE = 'type' deprecated;
          TYPE_CUSTOM = 0 deprecated;
          TYPE_FAX_HOME = 5 deprecated;
          TYPE_FAX_WORK = 4 deprecated;
          TYPE_HOME = 1 deprecated;
          TYPE_MOBILE = 2 deprecated;
          TYPE_OTHER = 7 deprecated;
          TYPE_PAGER = 6 deprecated;
          TYPE_WORK = 3 deprecated;
      end;

      InnerGroupsColumns = interface external 'android.provider' name 'GroupsColumns' 
        const
          NAME = 'name' deprecated;
          NOTES = 'notes' deprecated;
          SHOULD_SYNC = 'should_sync' deprecated;
          SYSTEM_ID = 'system_id' deprecated;
      end;

      InnerPeopleColumns = interface external 'android.provider' name 'PeopleColumns' 
        const
          CUSTOM_RINGTONE = 'custom_ringtone' deprecated;
          DISPLAY_NAME = 'display_name' deprecated;
          LAST_TIME_CONTACTED = 'last_time_contacted' deprecated;
          NAME = 'name' deprecated;
          NOTES = 'notes' deprecated;
          PHONETIC_NAME = 'phonetic_name' deprecated;
          PHOTO_VERSION = 'photo_version' deprecated;
          SEND_TO_VOICEMAIL = 'send_to_voicemail' deprecated;
          STARRED = 'starred' deprecated;
          TIMES_CONTACTED = 'times_contacted' deprecated;
      end;

      InnerSettingsColumns = interface external 'android.provider' name 'SettingsColumns' 
        const
          KEY = 'key' deprecated;
          VALUE = 'value' deprecated;
          _SYNC_ACCOUNT = '_sync_account' deprecated;
          _SYNC_ACCOUNT_TYPE = '_sync_account_type' deprecated;
      end;

      InnerExtensions = class sealed external 'android.provider' name 'Extensions' (JLObject, APBaseColumns, APContacts.InnerExtensionsColumns)
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/contact_extensions' deprecated;
          CONTENT_TYPE = 'vnd.android.cursor.dir/contact_extensions' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'person, name ASC' deprecated;
          PERSON_ID = 'person' deprecated;
      end;

      InnerPhotos = class sealed external 'android.provider' name 'Photos' (JLObject, APBaseColumns, APContacts.InnerPhotosColumns)
      public
        const
          CONTENT_DIRECTORY = 'photo' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'person ASC' deprecated;
      end;

      InnerOrganizations = class sealed external 'android.provider' name 'Organizations' (JLObject, APBaseColumns, APContacts.InnerOrganizationColumns)
      public
        const
          CONTENT_DIRECTORY = 'organizations' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'company, title, isprimary ASC' deprecated;
      public
        class function getDisplayLabel(para1: ACContext; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
      end;

      InnerGroupMembership = class sealed external 'android.provider' name 'GroupMembership' (JLObject, APBaseColumns, APContacts.InnerGroupsColumns)
      public
        const
          CONTENT_DIRECTORY = 'groupmembership' deprecated;
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/contactsgroupmembership' deprecated;
          CONTENT_TYPE = 'vnd.android.cursor.dir/contactsgroupmembership' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'group_id ASC' deprecated;
          GROUP_ID = 'group_id' deprecated;
          GROUP_SYNC_ACCOUNT = 'group_sync_account' deprecated;
          GROUP_SYNC_ACCOUNT_TYPE = 'group_sync_account_type' deprecated;
          GROUP_SYNC_ID = 'group_sync_id' deprecated;
          PERSON_ID = 'person' deprecated;
      public
        final class var
          fRAW_CONTENT_URI: ANUri deprecated; external name 'RAW_CONTENT_URI';
      end;

      InnerGroups = class sealed external 'android.provider' name 'Groups' (JLObject, APBaseColumns, APContacts.InnerGroupsColumns)
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/contactsgroup' deprecated;
          CONTENT_TYPE = 'vnd.android.cursor.dir/contactsgroup' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'name ASC' deprecated;
      public
        final class var
          fDELETED_CONTENT_URI: ANUri deprecated; external name 'DELETED_CONTENT_URI';
      public
        const
          GROUP_ANDROID_STARRED = 'Starred in Android' deprecated;
          GROUP_MY_CONTACTS = 'Contacts' deprecated;
      end;

      InnerContactMethods = class sealed external 'android.provider' name 'ContactMethods' (JLObject, APBaseColumns, APContacts.InnerContactMethodsColumns, APContacts.InnerPeopleColumns)
      public
        const
          CONTENT_EMAIL_ITEM_TYPE = 'vnd.android.cursor.item/email' deprecated;
          CONTENT_EMAIL_TYPE = 'vnd.android.cursor.dir/email' deprecated;
      public
        final class var
          fCONTENT_EMAIL_URI: ANUri deprecated; external name 'CONTENT_EMAIL_URI';
      public
        const
          CONTENT_IM_ITEM_TYPE = 'vnd.android.cursor.item/jabber-im' deprecated;
          CONTENT_POSTAL_ITEM_TYPE = 'vnd.android.cursor.item/postal-address' deprecated;
          CONTENT_POSTAL_TYPE = 'vnd.android.cursor.dir/postal-address' deprecated;
          CONTENT_TYPE = 'vnd.android.cursor.dir/contact-methods' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'name ASC' deprecated;
          PERSON_ID = 'person' deprecated;
          POSTAL_LOCATION_LATITUDE = 'data' deprecated;
          POSTAL_LOCATION_LONGITUDE = 'aux_data' deprecated;
          PROTOCOL_AIM = 0 deprecated;
          PROTOCOL_GOOGLE_TALK = 5 deprecated;
          PROTOCOL_ICQ = 6 deprecated;
          PROTOCOL_JABBER = 7 deprecated;
          PROTOCOL_MSN = 1 deprecated;
          PROTOCOL_QQ = 4 deprecated;
          PROTOCOL_SKYPE = 3 deprecated;
          PROTOCOL_YAHOO = 2 deprecated;
      public
        class function encodePredefinedImProtocol(para1: jint): JLString; static; overload;
        class function encodeCustomImProtocol(para1: JLString): JLString; static; overload;
        class function decodeImProtocol(para1: JLString): JLObject; static; overload;
        class function getDisplayLabel(para1: ACContext; para2: jint; para3: jint; para4: JLCharSequence): JLCharSequence; static; overload; final;
        procedure addPostalLocation(para1: ACContext; para2: jlong; para3: jdouble; para4: jdouble); overload; virtual;
      end;

      InnerPhones = class sealed external 'android.provider' name 'Phones' (JLObject, APBaseColumns, APContacts.InnerPhonesColumns, APContacts.InnerPeopleColumns)
      public
        final class var
          fCONTENT_FILTER_URL: ANUri deprecated; external name 'CONTENT_FILTER_URL';
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/phone' deprecated;
          CONTENT_TYPE = 'vnd.android.cursor.dir/phone' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'name ASC' deprecated;
          PERSON_ID = 'person' deprecated;
      public
        class function getDisplayLabel(para1: ACContext; para2: jint; para3: JLCharSequence; para4: Arr1JLCharSequence): JLCharSequence; static; overload; final;
        class function getDisplayLabel(para1: ACContext; para2: jint; para3: JLCharSequence; var para4: array of JLCharSequence): JLCharSequence; static; overload; final;
        class function getDisplayLabel(para1: ACContext; para2: jint; para3: JLCharSequence): JLCharSequence; static; overload; final;
      end;

      InnerPeople = class sealed external 'android.provider' name 'People' (JLObject, APBaseColumns, APContacts.InnerPeopleColumns, APContacts.InnerPhonesColumns, APContacts.InnerPresenceColumns)
      public
        type
          InnerExtensions = class;
          Arr1InnerExtensions = array of InnerExtensions;
          Arr2InnerExtensions = array of Arr1InnerExtensions;
          Arr3InnerExtensions = array of Arr2InnerExtensions;
          InnerContactMethods = class;
          Arr1InnerContactMethods = array of InnerContactMethods;
          Arr2InnerContactMethods = array of Arr1InnerContactMethods;
          Arr3InnerContactMethods = array of Arr2InnerContactMethods;
          InnerPhones = class;
          Arr1InnerPhones = array of InnerPhones;
          Arr2InnerPhones = array of Arr1InnerPhones;
          Arr3InnerPhones = array of Arr2InnerPhones;
          InnerExtensions = class external 'android.provider' name 'Extensions' (JLObject, APBaseColumns, APContacts.InnerExtensionsColumns)
          public
            const
              CONTENT_DIRECTORY = 'extensions' deprecated;
              DEFAULT_SORT_ORDER = 'name ASC' deprecated;
              PERSON_ID = 'person' deprecated;
          end;

          InnerContactMethods = class sealed external 'android.provider' name 'ContactMethods' (JLObject, APBaseColumns, APContacts.InnerContactMethodsColumns, APContacts.InnerPeopleColumns)
          public
            const
              CONTENT_DIRECTORY = 'contact_methods' deprecated;
              DEFAULT_SORT_ORDER = 'data ASC' deprecated;
          end;

          InnerPhones = class sealed external 'android.provider' name 'Phones' (JLObject, APBaseColumns, APContacts.InnerPhonesColumns, APContacts.InnerPeopleColumns)
          public
            const
              CONTENT_DIRECTORY = 'phones' deprecated;
              DEFAULT_SORT_ORDER = 'number ASC' deprecated;
          end;

      public
        final class var
          fCONTENT_FILTER_URI: ANUri deprecated; external name 'CONTENT_FILTER_URI';
      public
        const
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/person' deprecated;
          CONTENT_TYPE = 'vnd.android.cursor.dir/person' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'name ASC' deprecated;
      public
        final class var
          fDELETED_CONTENT_URI: ANUri deprecated; external name 'DELETED_CONTENT_URI';
      public
        const
          PRIMARY_EMAIL_ID = 'primary_email' deprecated;
          PRIMARY_ORGANIZATION_ID = 'primary_organization' deprecated;
          PRIMARY_PHONE_ID = 'primary_phone' deprecated;
      public
        class procedure markAsContacted(para1: ACContentResolver; para2: jlong); static; overload;
        class function addToMyContactsGroup(para1: ACContentResolver; para2: jlong): ANUri; static; overload;
        class function addToGroup(para1: ACContentResolver; para2: jlong; para3: JLString): ANUri; static; overload;
        class function addToGroup(para1: ACContentResolver; para2: jlong; para3: jlong): ANUri; static; overload;
        class function createPersonInMyContactsGroup(para1: ACContentResolver; para2: ACContentValues): ANUri; static; overload;
        class function queryGroups(para1: ACContentResolver; para2: jlong): ADCursor; static; overload;
        class procedure setPhotoData(para1: ACContentResolver; para2: ANUri; para3: Arr1jbyte); static; overload;
        class procedure setPhotoData(para1: ACContentResolver; para2: ANUri; var para3: array of jbyte); static; overload;
        class function openContactPhotoInputStream(para1: ACContentResolver; para2: ANUri): JIInputStream; static; overload;
        class function loadContactPhoto(para1: ACContext; para2: ANUri; para3: jint; para4: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
      end;

      InnerSettings = class sealed external 'android.provider' name 'Settings' (JLObject, APBaseColumns, APContacts.InnerSettingsColumns)
      public
        const
          CONTENT_DIRECTORY = 'settings' deprecated;
      public
        final class var
          fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'key ASC' deprecated;
          SYNC_EVERYTHING = 'syncEverything' deprecated;
      public
        class function getSetting(para1: ACContentResolver; para2: JLString; para3: JLString): JLString; static; overload;
        class procedure setSetting(para1: ACContentResolver; para2: JLString; para3: JLString; para4: JLString); static; overload;
      end;

  public
    const
      AUTHORITY = 'contacts' deprecated;
  public
    final class var
      fCONTENT_URI: ANUri deprecated; external name 'CONTENT_URI';
  public
    const
      KIND_EMAIL = 1 deprecated;
      KIND_IM = 3 deprecated;
      KIND_ORGANIZATION = 4 deprecated;
      KIND_PHONE = 5 deprecated;
      KIND_POSTAL = 2 deprecated;
  end;

  APMediaStore = class sealed external 'android.provider' name 'MediaStore' (JLObject)
  public
    type
      InnerMediaColumns = interface;
      Arr1InnerMediaColumns = array of InnerMediaColumns;
      Arr2InnerMediaColumns = array of Arr1InnerMediaColumns;
      Arr3InnerMediaColumns = array of Arr2InnerMediaColumns;
      InnerVideo = class;
      Arr1InnerVideo = array of InnerVideo;
      Arr2InnerVideo = array of Arr1InnerVideo;
      Arr3InnerVideo = array of Arr2InnerVideo;
      InnerAudio = class;
      Arr1InnerAudio = array of InnerAudio;
      Arr2InnerAudio = array of Arr1InnerAudio;
      Arr3InnerAudio = array of Arr2InnerAudio;
      InnerImages = class;
      Arr1InnerImages = array of InnerImages;
      Arr2InnerImages = array of Arr1InnerImages;
      Arr3InnerImages = array of Arr2InnerImages;
      InnerFiles = class;
      Arr1InnerFiles = array of InnerFiles;
      Arr2InnerFiles = array of Arr1InnerFiles;
      Arr3InnerFiles = array of Arr2InnerFiles;
      InnerMediaColumns = interface external 'android.provider' name 'MediaColumns' (APBaseColumns)
        const
          DATA = '_data';
          DATE_ADDED = 'date_added';
          DATE_MODIFIED = 'date_modified';
          DISPLAY_NAME = '_display_name';
          HEIGHT = 'height';
          MIME_TYPE = 'mime_type';
          SIZE = '_size';
          TITLE = 'title';
          WIDTH = 'width';
      end;

      InnerVideo = class sealed external 'android.provider' name 'Video' (JLObject)
      public
        type
          InnerThumbnails = class;
          Arr1InnerThumbnails = array of InnerThumbnails;
          Arr2InnerThumbnails = array of Arr1InnerThumbnails;
          Arr3InnerThumbnails = array of Arr2InnerThumbnails;
          InnerVideoColumns = interface;
          Arr1InnerVideoColumns = array of InnerVideoColumns;
          Arr2InnerVideoColumns = array of Arr1InnerVideoColumns;
          Arr3InnerVideoColumns = array of Arr2InnerVideoColumns;
          InnerMedia = class;
          Arr1InnerMedia = array of InnerMedia;
          Arr2InnerMedia = array of Arr1InnerMedia;
          Arr3InnerMedia = array of Arr2InnerMedia;
          InnerThumbnails = class external 'android.provider' name 'Thumbnails' (JLObject, APBaseColumns)
          public
            const
              DATA = '_data';
              DEFAULT_SORT_ORDER = 'video_id ASC';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
          public
            const
              FULL_SCREEN_KIND = 2;
              HEIGHT = 'height';
          public
            final class var
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            const
              KIND = 'kind';
              MICRO_KIND = 3;
              MINI_KIND = 1;
              VIDEO_ID = 'video_id';
              WIDTH = 'width';
          public
            constructor create(); overload;
            class procedure cancelThumbnailRequest(para1: ACContentResolver; para2: jlong); static; overload;
            class function getThumbnail(para1: ACContentResolver; para2: jlong; para3: jint; para4: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
            class function getThumbnail(para1: ACContentResolver; para2: jlong; para3: jlong; para4: jint; para5: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
            class procedure cancelThumbnailRequest(para1: ACContentResolver; para2: jlong; para3: jlong); static; overload;
            class function getContentUri(para1: JLString): ANUri; static; overload;
          end;

          InnerVideoColumns = interface external 'android.provider' name 'VideoColumns' (APMediaStore.InnerMediaColumns)
            const
              ALBUM = 'album';
              ARTIST = 'artist';
              BOOKMARK = 'bookmark';
              BUCKET_DISPLAY_NAME = 'bucket_display_name';
              BUCKET_ID = 'bucket_id';
              CATEGORY = 'category';
              DATE_TAKEN = 'datetaken';
              DESCRIPTION = 'description';
              DURATION = 'duration';
              IS_PRIVATE = 'isprivate';
              LANGUAGE = 'language';
              LATITUDE = 'latitude';
              LONGITUDE = 'longitude';
              MINI_THUMB_MAGIC = 'mini_thumb_magic';
              RESOLUTION = 'resolution';
              TAGS = 'tags';
          end;

          InnerMedia = class sealed external 'android.provider' name 'Media' (JLObject, APMediaStore.InnerVideo.InnerVideoColumns)
          public
            const
              CONTENT_TYPE = 'vnd.android.cursor.dir/video';
              DEFAULT_SORT_ORDER = 'title';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            constructor create(); overload;
            class function getContentUri(para1: JLString): ANUri; static; overload;
          end;

      public
        const
          DEFAULT_SORT_ORDER = '_display_name';
      public
        constructor create(); overload;
        class function query(para1: ACContentResolver; para2: ANUri; para3: Arr1JLString): ADCursor; static; overload; final;
        class function query(para1: ACContentResolver; para2: ANUri; var para3: array of JLString): ADCursor; static; overload; final;
      end;

      InnerAudio = class sealed external 'android.provider' name 'Audio' (JLObject)
      public
        type
          InnerRadio = class;
          Arr1InnerRadio = array of InnerRadio;
          Arr2InnerRadio = array of Arr1InnerRadio;
          Arr3InnerRadio = array of Arr2InnerRadio;
          InnerAlbumColumns = interface;
          Arr1InnerAlbumColumns = array of InnerAlbumColumns;
          Arr2InnerAlbumColumns = array of Arr1InnerAlbumColumns;
          Arr3InnerAlbumColumns = array of Arr2InnerAlbumColumns;
          InnerArtistColumns = interface;
          Arr1InnerArtistColumns = array of InnerArtistColumns;
          Arr2InnerArtistColumns = array of Arr1InnerArtistColumns;
          Arr3InnerArtistColumns = array of Arr2InnerArtistColumns;
          InnerPlaylistsColumns = interface;
          Arr1InnerPlaylistsColumns = array of InnerPlaylistsColumns;
          Arr2InnerPlaylistsColumns = array of Arr1InnerPlaylistsColumns;
          Arr3InnerPlaylistsColumns = array of Arr2InnerPlaylistsColumns;
          InnerGenresColumns = interface;
          Arr1InnerGenresColumns = array of InnerGenresColumns;
          Arr2InnerGenresColumns = array of Arr1InnerGenresColumns;
          Arr3InnerGenresColumns = array of Arr2InnerGenresColumns;
          InnerAudioColumns = interface;
          Arr1InnerAudioColumns = array of InnerAudioColumns;
          Arr2InnerAudioColumns = array of Arr1InnerAudioColumns;
          Arr3InnerAudioColumns = array of Arr2InnerAudioColumns;
          InnerAlbums = class;
          Arr1InnerAlbums = array of InnerAlbums;
          Arr2InnerAlbums = array of Arr1InnerAlbums;
          Arr3InnerAlbums = array of Arr2InnerAlbums;
          InnerArtists = class;
          Arr1InnerArtists = array of InnerArtists;
          Arr2InnerArtists = array of Arr1InnerArtists;
          Arr3InnerArtists = array of Arr2InnerArtists;
          InnerPlaylists = class;
          Arr1InnerPlaylists = array of InnerPlaylists;
          Arr2InnerPlaylists = array of Arr1InnerPlaylists;
          Arr3InnerPlaylists = array of Arr2InnerPlaylists;
          InnerGenres = class;
          Arr1InnerGenres = array of InnerGenres;
          Arr2InnerGenres = array of Arr1InnerGenres;
          Arr3InnerGenres = array of Arr2InnerGenres;
          InnerMedia = class;
          Arr1InnerMedia = array of InnerMedia;
          Arr2InnerMedia = array of Arr1InnerMedia;
          Arr3InnerMedia = array of Arr2InnerMedia;
          InnerRadio = class sealed external 'android.provider' name 'Radio' (JLObject)
          public
            const
              ENTRY_CONTENT_TYPE = 'vnd.android.cursor.item/radio';
          end;

          InnerAlbumColumns = interface external 'android.provider' name 'AlbumColumns' 
            const
              ALBUM = 'album';
              ALBUM_ART = 'album_art';
              ALBUM_ID = 'album_id';
              ALBUM_KEY = 'album_key';
              ARTIST = 'artist';
              FIRST_YEAR = 'minyear';
              LAST_YEAR = 'maxyear';
              NUMBER_OF_SONGS = 'numsongs';
              NUMBER_OF_SONGS_FOR_ARTIST = 'numsongs_by_artist';
          end;

          InnerArtistColumns = interface external 'android.provider' name 'ArtistColumns' 
            const
              ARTIST = 'artist';
              ARTIST_KEY = 'artist_key';
              NUMBER_OF_ALBUMS = 'number_of_albums';
              NUMBER_OF_TRACKS = 'number_of_tracks';
          end;

          InnerPlaylistsColumns = interface external 'android.provider' name 'PlaylistsColumns' 
            const
              DATA = '_data';
              DATE_ADDED = 'date_added';
              DATE_MODIFIED = 'date_modified';
              NAME = 'name';
          end;

          InnerGenresColumns = interface external 'android.provider' name 'GenresColumns' 
            const
              NAME = 'name';
          end;

          InnerAudioColumns = interface external 'android.provider' name 'AudioColumns' (APMediaStore.InnerMediaColumns)
            const
              ALBUM = 'album';
              ALBUM_ID = 'album_id';
              ALBUM_KEY = 'album_key';
              ARTIST = 'artist';
              ARTIST_ID = 'artist_id';
              ARTIST_KEY = 'artist_key';
              BOOKMARK = 'bookmark';
              COMPOSER = 'composer';
              DURATION = 'duration';
              IS_ALARM = 'is_alarm';
              IS_MUSIC = 'is_music';
              IS_NOTIFICATION = 'is_notification';
              IS_PODCAST = 'is_podcast';
              IS_RINGTONE = 'is_ringtone';
              TITLE_KEY = 'title_key';
              TRACK = 'track';
              YEAR = 'year';
          end;

          InnerAlbums = class sealed external 'android.provider' name 'Albums' (JLObject, APBaseColumns, APMediaStore.InnerAudio.InnerAlbumColumns)
          public
            const
              CONTENT_TYPE = 'vnd.android.cursor.dir/albums';
              DEFAULT_SORT_ORDER = 'album_key';
              ENTRY_CONTENT_TYPE = 'vnd.android.cursor.item/album';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            constructor create(); overload;
            class function getContentUri(para1: JLString): ANUri; static; overload;
          end;

          InnerArtists = class sealed external 'android.provider' name 'Artists' (JLObject, APBaseColumns, APMediaStore.InnerAudio.InnerArtistColumns)
          public
            type
              InnerAlbums = class;
              Arr1InnerAlbums = array of InnerAlbums;
              Arr2InnerAlbums = array of Arr1InnerAlbums;
              Arr3InnerAlbums = array of Arr2InnerAlbums;
              InnerAlbums = class sealed external 'android.provider' name 'Albums' (JLObject, APMediaStore.InnerAudio.InnerAlbumColumns)
              public
                constructor create(); overload;
                class function getContentUri(para1: JLString; para2: jlong): ANUri; static; overload; final;
              end;

          public
            const
              CONTENT_TYPE = 'vnd.android.cursor.dir/artists';
              DEFAULT_SORT_ORDER = 'artist_key';
              ENTRY_CONTENT_TYPE = 'vnd.android.cursor.item/artist';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            constructor create(); overload;
            class function getContentUri(para1: JLString): ANUri; static; overload;
          end;

          InnerPlaylists = class sealed external 'android.provider' name 'Playlists' (JLObject, APBaseColumns, APMediaStore.InnerAudio.InnerPlaylistsColumns)
          public
            type
              InnerMembers = class;
              Arr1InnerMembers = array of InnerMembers;
              Arr2InnerMembers = array of Arr1InnerMembers;
              Arr3InnerMembers = array of Arr2InnerMembers;
              InnerMembers = class sealed external 'android.provider' name 'Members' (JLObject, APMediaStore.InnerAudio.InnerAudioColumns)
              public
                const
                  AUDIO_ID = 'audio_id';
                  CONTENT_DIRECTORY = 'members';
                  DEFAULT_SORT_ORDER = 'play_order';
                  PLAYLIST_ID = 'playlist_id';
                  PLAY_ORDER = 'play_order';
                  _ID = '_id';
              public
                constructor create(); overload;
                class function getContentUri(para1: JLString; para2: jlong): ANUri; static; overload; final;
                class function moveItem(para1: ACContentResolver; para2: jlong; para3: jint; para4: jint): jboolean; static; overload; final;
              end;

          public
            const
              CONTENT_TYPE = 'vnd.android.cursor.dir/playlist';
              DEFAULT_SORT_ORDER = 'name';
              ENTRY_CONTENT_TYPE = 'vnd.android.cursor.item/playlist';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            constructor create(); overload;
            class function getContentUri(para1: JLString): ANUri; static; overload;
          end;

          InnerGenres = class sealed external 'android.provider' name 'Genres' (JLObject, APBaseColumns, APMediaStore.InnerAudio.InnerGenresColumns)
          public
            type
              InnerMembers = class;
              Arr1InnerMembers = array of InnerMembers;
              Arr2InnerMembers = array of Arr1InnerMembers;
              Arr3InnerMembers = array of Arr2InnerMembers;
              InnerMembers = class sealed external 'android.provider' name 'Members' (JLObject, APMediaStore.InnerAudio.InnerAudioColumns)
              public
                const
                  AUDIO_ID = 'audio_id';
                  CONTENT_DIRECTORY = 'members';
                  DEFAULT_SORT_ORDER = 'title_key';
                  GENRE_ID = 'genre_id';
              public
                constructor create(); overload;
                class function getContentUri(para1: JLString; para2: jlong): ANUri; static; overload; final;
              end;

          public
            const
              CONTENT_TYPE = 'vnd.android.cursor.dir/genre';
              DEFAULT_SORT_ORDER = 'name';
              ENTRY_CONTENT_TYPE = 'vnd.android.cursor.item/genre';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            constructor create(); overload;
            class function getContentUri(para1: JLString): ANUri; static; overload;
            class function getContentUriForAudioId(para1: JLString; para2: jint): ANUri; static; overload;
          end;

          InnerMedia = class sealed external 'android.provider' name 'Media' (JLObject, APMediaStore.InnerAudio.InnerAudioColumns)
          public
            const
              CONTENT_TYPE = 'vnd.android.cursor.dir/audio';
              DEFAULT_SORT_ORDER = 'title_key';
              ENTRY_CONTENT_TYPE = 'vnd.android.cursor.item/audio';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
          public
            const
              EXTRA_MAX_BYTES = 'android.provider.MediaStore.extra.MAX_BYTES';
          public
            final class var
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            const
              RECORD_SOUND_ACTION = 'android.provider.MediaStore.RECORD_SOUND';
          public
            constructor create(); overload;
            class function getContentUri(para1: JLString): ANUri; static; overload;
            class function getContentUriForPath(para1: JLString): ANUri; static; overload;
          end;

      public
        constructor create(); overload;
        class function keyFor(para1: JLString): JLString; static; overload;
      end;

      InnerImages = class sealed external 'android.provider' name 'Images' (JLObject)
      public
        type
          InnerThumbnails = class;
          Arr1InnerThumbnails = array of InnerThumbnails;
          Arr2InnerThumbnails = array of Arr1InnerThumbnails;
          Arr3InnerThumbnails = array of Arr2InnerThumbnails;
          InnerImageColumns = interface;
          Arr1InnerImageColumns = array of InnerImageColumns;
          Arr2InnerImageColumns = array of Arr1InnerImageColumns;
          Arr3InnerImageColumns = array of Arr2InnerImageColumns;
          InnerMedia = class;
          Arr1InnerMedia = array of InnerMedia;
          Arr2InnerMedia = array of Arr1InnerMedia;
          Arr3InnerMedia = array of Arr2InnerMedia;
          InnerThumbnails = class external 'android.provider' name 'Thumbnails' (JLObject, APBaseColumns)
          public
            const
              DATA = '_data';
              DEFAULT_SORT_ORDER = 'image_id ASC';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
          public
            const
              FULL_SCREEN_KIND = 2;
              HEIGHT = 'height';
              IMAGE_ID = 'image_id';
          public
            final class var
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            const
              KIND = 'kind';
              MICRO_KIND = 3;
              MINI_KIND = 1;
              THUMB_DATA = 'thumb_data';
              WIDTH = 'width';
          public
            constructor create(); overload;
            class function query(para1: ACContentResolver; para2: ANUri; para3: Arr1JLString): ADCursor; static; overload; final;
            class function query(para1: ACContentResolver; para2: ANUri; var para3: array of JLString): ADCursor; static; overload; final;
            class function queryMiniThumbnails(para1: ACContentResolver; para2: ANUri; para3: jint; para4: Arr1JLString): ADCursor; static; overload; final;
            class function queryMiniThumbnails(para1: ACContentResolver; para2: ANUri; para3: jint; var para4: array of JLString): ADCursor; static; overload; final;
            class function queryMiniThumbnail(para1: ACContentResolver; para2: jlong; para3: jint; para4: Arr1JLString): ADCursor; static; overload; final;
            class function queryMiniThumbnail(para1: ACContentResolver; para2: jlong; para3: jint; var para4: array of JLString): ADCursor; static; overload; final;
            class procedure cancelThumbnailRequest(para1: ACContentResolver; para2: jlong); static; overload;
            class function getThumbnail(para1: ACContentResolver; para2: jlong; para3: jint; para4: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
            class procedure cancelThumbnailRequest(para1: ACContentResolver; para2: jlong; para3: jlong); static; overload;
            class function getThumbnail(para1: ACContentResolver; para2: jlong; para3: jlong; para4: jint; para5: AGBitmapFactory.InnerOptions): AGBitmap; static; overload;
            class function getContentUri(para1: JLString): ANUri; static; overload;
          end;

          InnerImageColumns = interface external 'android.provider' name 'ImageColumns' (APMediaStore.InnerMediaColumns)
            const
              BUCKET_DISPLAY_NAME = 'bucket_display_name';
              BUCKET_ID = 'bucket_id';
              DATE_TAKEN = 'datetaken';
              DESCRIPTION = 'description';
              IS_PRIVATE = 'isprivate';
              LATITUDE = 'latitude';
              LONGITUDE = 'longitude';
              MINI_THUMB_MAGIC = 'mini_thumb_magic';
              ORIENTATION = 'orientation';
              PICASA_ID = 'picasa_id';
          end;

          InnerMedia = class sealed external 'android.provider' name 'Media' (JLObject, APMediaStore.InnerImages.InnerImageColumns)
          public
            const
              CONTENT_TYPE = 'vnd.android.cursor.dir/image';
              DEFAULT_SORT_ORDER = 'bucket_display_name';
          public
            final class var
              fEXTERNAL_CONTENT_URI: ANUri; external name 'EXTERNAL_CONTENT_URI';
              fINTERNAL_CONTENT_URI: ANUri; external name 'INTERNAL_CONTENT_URI';
          public
            constructor create(); overload;
            class function query(para1: ACContentResolver; para2: ANUri; para3: Arr1JLString): ADCursor; static; overload; final;
            class function query(para1: ACContentResolver; para2: ANUri; var para3: array of JLString): ADCursor; static; overload; final;
            class function query(para1: ACContentResolver; para2: ANUri; para3: Arr1JLString; para4: JLString; para5: JLString): ADCursor; static; overload; final;
            class function query(para1: ACContentResolver; para2: ANUri; var para3: array of JLString; para4: JLString; para5: JLString): ADCursor; static; overload; final;
            class function query(para1: ACContentResolver; para2: ANUri; para3: Arr1JLString; para4: JLString; para5: Arr1JLString; para6: JLString): ADCursor; static; overload; final;
            class function query(para1: ACContentResolver; para2: ANUri; var para3: array of JLString; para4: JLString; var para5: array of JLString; para6: JLString): ADCursor; static; overload; final;
            class function getBitmap(para1: ACContentResolver; para2: ANUri): AGBitmap; static; overload; final;  // throws java.io.FileNotFoundException, java.io.IOException
            class function insertImage(para1: ACContentResolver; para2: JLString; para3: JLString; para4: JLString): JLString; static; overload; final;  // throws java.io.FileNotFoundException
            class function insertImage(para1: ACContentResolver; para2: AGBitmap; para3: JLString; para4: JLString): JLString; static; overload; final;
            class function getContentUri(para1: JLString): ANUri; static; overload;
          end;

      public
        constructor create(); overload;
      end;

      InnerFiles = class sealed external 'android.provider' name 'Files' (JLObject)
      public
        type
          InnerFileColumns = interface;
          Arr1InnerFileColumns = array of InnerFileColumns;
          Arr2InnerFileColumns = array of Arr1InnerFileColumns;
          Arr3InnerFileColumns = array of Arr2InnerFileColumns;
          InnerFileColumns = interface external 'android.provider' name 'FileColumns' (APMediaStore.InnerMediaColumns)
            const
              MEDIA_TYPE = 'media_type';
              MEDIA_TYPE_AUDIO = 2;
              MEDIA_TYPE_IMAGE = 1;
              MEDIA_TYPE_NONE = 0;
              MEDIA_TYPE_PLAYLIST = 4;
              MEDIA_TYPE_VIDEO = 3;
              MIME_TYPE = 'mime_type';
              PARENT = 'parent';
              TITLE = 'title';
          end;

      public
        constructor create(); overload;
        class function getContentUri(para1: JLString): ANUri; static; overload;
        class function getContentUri(para1: JLString; para2: jlong): ANUri; static; overload; final;
      end;

  public
    const
      ACTION_IMAGE_CAPTURE = 'android.media.action.IMAGE_CAPTURE';
      ACTION_IMAGE_CAPTURE_SECURE = 'android.media.action.IMAGE_CAPTURE_SECURE';
      ACTION_VIDEO_CAPTURE = 'android.media.action.VIDEO_CAPTURE';
      AUTHORITY = 'media';
      EXTRA_DURATION_LIMIT = 'android.intent.extra.durationLimit';
      EXTRA_FINISH_ON_COMPLETION = 'android.intent.extra.finishOnCompletion';
      EXTRA_FULL_SCREEN = 'android.intent.extra.fullScreen';
      EXTRA_MEDIA_ALBUM = 'android.intent.extra.album';
      EXTRA_MEDIA_ARTIST = 'android.intent.extra.artist';
      EXTRA_MEDIA_FOCUS = 'android.intent.extra.focus';
      EXTRA_MEDIA_GENRE = 'android.intent.extra.genre';
      EXTRA_MEDIA_PLAYLIST = 'android.intent.extra.playlist';
      EXTRA_MEDIA_RADIO_CHANNEL = 'android.intent.extra.radio_channel';
      EXTRA_MEDIA_TITLE = 'android.intent.extra.title';
      EXTRA_OUTPUT = 'output';
      EXTRA_SCREEN_ORIENTATION = 'android.intent.extra.screenOrientation';
      EXTRA_SHOW_ACTION_ICONS = 'android.intent.extra.showActionIcons';
      EXTRA_SIZE_LIMIT = 'android.intent.extra.sizeLimit';
      EXTRA_VIDEO_QUALITY = 'android.intent.extra.videoQuality';
      INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH = 'android.media.action.MEDIA_PLAY_FROM_SEARCH';
      INTENT_ACTION_MEDIA_SEARCH = 'android.intent.action.MEDIA_SEARCH';
      INTENT_ACTION_MUSIC_PLAYER = 'android.intent.action.MUSIC_PLAYER' deprecated;
      INTENT_ACTION_STILL_IMAGE_CAMERA = 'android.media.action.STILL_IMAGE_CAMERA';
      INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE = 'android.media.action.STILL_IMAGE_CAMERA_SECURE';
      INTENT_ACTION_TEXT_OPEN_FROM_SEARCH = 'android.media.action.TEXT_OPEN_FROM_SEARCH';
      INTENT_ACTION_VIDEO_CAMERA = 'android.media.action.VIDEO_CAMERA';
      INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH = 'android.media.action.VIDEO_PLAY_FROM_SEARCH';
      MEDIA_IGNORE_FILENAME = '.nomedia';
      MEDIA_SCANNER_VOLUME = 'volume';
      UNKNOWN_STRING = '<unknown>';
  public
    constructor create(); overload;
    class function getMediaScannerUri(): ANUri; static; overload;
    class function getVersion(para1: ACContext): JLString; static; overload;
  end;

  APPreferenceGroup = class abstract external 'android.preference' name 'PreferenceGroup' (APPreference)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setOrderingAsAdded(para1: jboolean); overload; virtual;
    function isOrderingAsAdded(): jboolean; overload; virtual;
    procedure addItemFromInflater(para1: APPreference); overload; virtual;
    function getPreferenceCount(): jint; overload; virtual;
    function getPreference(para1: jint): APPreference; overload; virtual;
    function addPreference(para1: APPreference): jboolean; overload; virtual;
    function removePreference(para1: APPreference): jboolean; overload; virtual;
    procedure removeAll(); overload; virtual;
  strict protected
    function onPrepareAddPreference(para1: APPreference): jboolean; overload; virtual;
  public
    function findPreference(para1: JLCharSequence): APPreference; overload; virtual;
  strict protected
    function isOnSameScreenAsChildren(): jboolean; overload; virtual;
    procedure onAttachedToActivity(); overload; virtual;
    procedure onPrepareForRemoval(); overload; virtual;
  public
    procedure notifyDependencyChange(para1: jboolean); overload; virtual;
  strict protected
    procedure dispatchSaveInstanceState(para1: AOBundle); overload; virtual;
    procedure dispatchRestoreInstanceState(para1: AOBundle); overload; virtual;
  end;

  APRingtonePreference = class external 'android.preference' name 'RingtonePreference' (APPreference, APPreferenceManager.InnerOnActivityResultListener)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
    function getRingtoneType(): jint; overload; virtual;
    procedure setRingtoneType(para1: jint); overload; virtual;
    function getShowDefault(): jboolean; overload; virtual;
    procedure setShowDefault(para1: jboolean); overload; virtual;
    function getShowSilent(): jboolean; overload; virtual;
    procedure setShowSilent(para1: jboolean); overload; virtual;
  strict protected
    procedure onClick(); overload; virtual;
    procedure onPrepareRingtonePickerIntent(para1: ACIntent); overload; virtual;
    procedure onSaveRingtone(para1: ANUri); overload; virtual;
    function onRestoreRingtone(): ANUri; overload; virtual;
    function onGetDefaultValue(para1: ACRTypedArray; para2: jint): JLObject; overload; virtual;
    procedure onSetInitialValue(para1: jboolean; para2: JLObject); overload; virtual;
    procedure onAttachedToHierarchy(para1: APPreferenceManager); overload; virtual;
  public
    function onActivityResult(para1: jint; para2: jint; para3: ACIntent): jboolean; overload; virtual;
  end;

  APTwoStatePreference = class abstract external 'android.preference' name 'TwoStatePreference' (APPreference)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
  strict protected
    procedure onClick(); overload; virtual;
  public
    procedure setChecked(para1: jboolean); overload; virtual;
    function isChecked(): jboolean; overload; virtual;
    function shouldDisableDependents(): jboolean; overload; virtual;
    procedure setSummaryOn(para1: JLCharSequence); overload; virtual;
    procedure setSummaryOn(para1: jint); overload; virtual;
    function getSummaryOn(): JLCharSequence; overload; virtual;
    procedure setSummaryOff(para1: JLCharSequence); overload; virtual;
    procedure setSummaryOff(para1: jint); overload; virtual;
    function getSummaryOff(): JLCharSequence; overload; virtual;
    function getDisableDependentsState(): jboolean; overload; virtual;
    procedure setDisableDependentsState(para1: jboolean); overload; virtual;
  strict protected
    function onGetDefaultValue(para1: ACRTypedArray; para2: jint): JLObject; overload; virtual;
    procedure onSetInitialValue(para1: jboolean; para2: JLObject); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  end;

  ATMDateKeyListener = class external 'android.text.method' name 'DateKeyListener' (ATMNumberKeyListener)
  public
    final class var
      fCHARACTERS: Arr1jchar; external name 'CHARACTERS';
  public
    constructor create(); overload;
    function getInputType(): jint; overload; virtual;
  strict protected
    function getAcceptedChars(): Arr1jchar; overload; virtual;
  public
    class function getInstance(): ATMDateKeyListener; static; overload;
  end;

  ATMDateTimeKeyListener = class external 'android.text.method' name 'DateTimeKeyListener' (ATMNumberKeyListener)
  public
    final class var
      fCHARACTERS: Arr1jchar; external name 'CHARACTERS';
  public
    constructor create(); overload;
    function getInputType(): jint; overload; virtual;
  strict protected
    function getAcceptedChars(): Arr1jchar; overload; virtual;
  public
    class function getInstance(): ATMDateTimeKeyListener; static; overload;
  end;

  ATMDialerKeyListener = class external 'android.text.method' name 'DialerKeyListener' (ATMNumberKeyListener)
  public
    final class var
      fCHARACTERS: Arr1jchar; external name 'CHARACTERS';
  public
    constructor create(); overload;
  strict protected
    function getAcceptedChars(): Arr1jchar; overload; virtual;
  public
    class function getInstance(): ATMDialerKeyListener; static; overload;
    function getInputType(): jint; overload; virtual;
  strict protected
    function lookup(para1: AVKeyEvent; para2: ATSpannable): jint; overload; virtual;
  end;

  ATMDigitsKeyListener = class external 'android.text.method' name 'DigitsKeyListener' (ATMNumberKeyListener)
  public
    constructor create(); overload;
    constructor create(para1: jboolean; para2: jboolean); overload;
  strict protected
    function getAcceptedChars(): Arr1jchar; overload; virtual;
  public
    class function getInstance(): ATMDigitsKeyListener; static; overload;
    class function getInstance(para1: jboolean; para2: jboolean): ATMDigitsKeyListener; static; overload;
    class function getInstance(para1: JLString): ATMDigitsKeyListener; static; overload;
    function getInputType(): jint; overload; virtual;
    function filter(para1: JLCharSequence; para2: jint; para3: jint; para4: ATSpanned; para5: jint; para6: jint): JLCharSequence; overload; virtual;
  end;

  ATMTimeKeyListener = class external 'android.text.method' name 'TimeKeyListener' (ATMNumberKeyListener)
  public
    final class var
      fCHARACTERS: Arr1jchar; external name 'CHARACTERS';
  public
    constructor create(); overload;
    function getInputType(): jint; overload; virtual;
  strict protected
    function getAcceptedChars(): Arr1jchar; overload; virtual;
  public
    class function getInstance(): ATMTimeKeyListener; static; overload;
  end;

  ATMMultiTapKeyListener = class external 'android.text.method' name 'MultiTapKeyListener' (ATMBaseKeyListener, ATSpanWatcher)
  public
    constructor create(para1: ATMTextKeyListener.InnerCapitalize; para2: jboolean); overload;
    class function getInstance(para1: jboolean; para2: ATMTextKeyListener.InnerCapitalize): ATMMultiTapKeyListener; static; overload;
    function getInputType(): jint; overload; virtual;
    function onKeyDown(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    procedure onSpanChanged(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint; para5: jint; para6: jint); overload; virtual;
    procedure onSpanAdded(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint); overload; virtual;
    procedure onSpanRemoved(para1: ATSpannable; para2: JLObject; para3: jint; para4: jint); overload; virtual;
  end;

  ATMQwertyKeyListener = class external 'android.text.method' name 'QwertyKeyListener' (ATMBaseKeyListener)
  public
    constructor create(para1: ATMTextKeyListener.InnerCapitalize; para2: jboolean); overload;
    class function getInstance(para1: jboolean; para2: ATMTextKeyListener.InnerCapitalize): ATMQwertyKeyListener; static; overload;
    class function getInstanceForFullKeyboard(): ATMQwertyKeyListener; static; overload;
    function getInputType(): jint; overload; virtual;
    function onKeyDown(para1: AVView; para2: ATEditable; para3: jint; para4: AVKeyEvent): jboolean; overload; virtual;
    class procedure markAsReplaced(para1: ATSpannable; para2: jint; para3: jint; para4: JLString); static; overload;
  end;

  ATMLinkMovementMethod = class external 'android.text.method' name 'LinkMovementMethod' (ATMScrollingMovementMethod)
  public
    constructor create(); overload;
    function canSelectArbitrarily(): jboolean; overload; virtual;
  strict protected
    function handleMovementKey(para1: AWTextView; para2: ATSpannable; para3: jint; para4: jint; para5: AVKeyEvent): jboolean; overload; virtual;
    function up(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function down(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function left(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
    function right(para1: AWTextView; para2: ATSpannable): jboolean; overload; virtual;
  public
    function onTouchEvent(para1: AWTextView; para2: ATSpannable; para3: AVMotionEvent): jboolean; overload; virtual;
    procedure initialize(para1: AWTextView; para2: ATSpannable); overload; virtual;
    procedure onTakeFocus(para1: AWTextView; para2: ATSpannable; para3: jint); overload; virtual;
    class function getInstance(): ATMMovementMethod; static; overload;
  end;

  ATSBulletSpan = class external 'android.text.style' name 'BulletSpan' (JLObject, ATSLeadingMarginSpan, ATParcelableSpan)
  public
    const
      STANDARD_GAP_WIDTH = 2;
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jint); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getLeadingMargin(para1: jboolean): jint; overload; virtual;
    procedure drawLeadingMargin(para1: AGCanvas; para2: AGPaint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JLCharSequence; para9: jint; para10: jint; para11: jboolean; para12: ATLayout); overload; virtual;
  end;

  ATSQuoteSpan = class external 'android.text.style' name 'QuoteSpan' (JLObject, ATSLeadingMarginSpan, ATParcelableSpan)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getColor(): jint; overload; virtual;
    function getLeadingMargin(para1: jboolean): jint; overload; virtual;
    procedure drawLeadingMargin(para1: AGCanvas; para2: AGPaint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JLCharSequence; para9: jint; para10: jint; para11: jboolean; para12: ATLayout); overload; virtual;
  end;

  ATSDrawableMarginSpan = class external 'android.text.style' name 'DrawableMarginSpan' (JLObject, ATSLeadingMarginSpan, ATSLineHeightSpan)
  public
    constructor create(para1: AGDDrawable); overload;
    constructor create(para1: AGDDrawable; para2: jint); overload;
    function getLeadingMargin(para1: jboolean): jint; overload; virtual;
    procedure drawLeadingMargin(para1: AGCanvas; para2: AGPaint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JLCharSequence; para9: jint; para10: jint; para11: jboolean; para12: ATLayout); overload; virtual;
    procedure chooseHeight(para1: JLCharSequence; para2: jint; para3: jint; para4: jint; para5: jint; para6: AGPaint.InnerFontMetricsInt); overload; virtual;
  end;

  ATSIconMarginSpan = class external 'android.text.style' name 'IconMarginSpan' (JLObject, ATSLeadingMarginSpan, ATSLineHeightSpan)
  public
    constructor create(para1: AGBitmap); overload;
    constructor create(para1: AGBitmap; para2: jint); overload;
    function getLeadingMargin(para1: jboolean): jint; overload; virtual;
    procedure drawLeadingMargin(para1: AGCanvas; para2: AGPaint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: JLCharSequence; para9: jint; para10: jint; para11: jboolean; para12: ATLayout); overload; virtual;
    procedure chooseHeight(para1: JLCharSequence; para2: jint; para3: jint; para4: jint; para5: jint; para6: AGPaint.InnerFontMetricsInt); overload; virtual;
  end;

  ATSAbsoluteSizeSpan = class external 'android.text.style' name 'AbsoluteSizeSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: jboolean); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getSize(): jint; overload; virtual;
    function getDip(): jboolean; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  ATSRelativeSizeSpan = class external 'android.text.style' name 'RelativeSizeSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(para1: jfloat); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getSizeChange(): jfloat; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  ATSReplacementSpan = class abstract external 'android.text.style' name 'ReplacementSpan' (ATSMetricAffectingSpan)
  public
    constructor create(); overload;
    function getSize(para1: AGPaint; para2: JLCharSequence; para3: jint; para4: jint; para5: AGPaint.InnerFontMetricsInt): jint; overload; virtual; abstract;
    procedure draw(para1: AGCanvas; para2: JLCharSequence; para3: jint; para4: jint; para5: jfloat; para6: jint; para7: jint; para8: jint; para9: AGPaint); overload; virtual; abstract;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
  end;

  ATSScaleXSpan = class external 'android.text.style' name 'ScaleXSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(para1: jfloat); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getScaleX(): jfloat; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  ATSStyleSpan = class external 'android.text.style' name 'StyleSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getStyle(): jint; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  ATSSubscriptSpan = class external 'android.text.style' name 'SubscriptSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  ATSSuperscriptSpan = class external 'android.text.style' name 'SuperscriptSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  ATSTextAppearanceSpan = class external 'android.text.style' name 'TextAppearanceSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(para1: ACContext; para2: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint); overload;
    constructor create(para1: JLString; para2: jint; para3: jint; para4: ACRColorStateList; para5: ACRColorStateList); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getFamily(): JLString; overload; virtual;
    function getTextColor(): ACRColorStateList; overload; virtual;
    function getLinkTextColor(): ACRColorStateList; overload; virtual;
    function getTextSize(): jint; overload; virtual;
    function getTextStyle(): jint; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  ATSTypefaceSpan = class external 'android.text.style' name 'TypefaceSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getFamily(): JLString; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  AWHeaderViewListAdapter = class external 'android.widget' name 'HeaderViewListAdapter' (JLObject, AWWrapperListAdapter, AWFilterable)
  public
    constructor create(para1: JUArrayList; para2: JUArrayList; para3: AWListAdapter); overload;
    function getHeadersCount(): jint; overload; virtual;
    function getFootersCount(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function removeHeader(para1: AVView): jboolean; overload; virtual;
    function removeFooter(para1: AVView): jboolean; overload; virtual;
    function getCount(): jint; overload; virtual;
    function areAllItemsEnabled(): jboolean; overload; virtual;
    function isEnabled(para1: jint): jboolean; overload; virtual;
    function getItem(para1: jint): JLObject; overload; virtual;
    function getItemId(para1: jint): jlong; overload; virtual;
    function hasStableIds(): jboolean; overload; virtual;
    function getView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload; virtual;
    function getItemViewType(para1: jint): jint; overload; virtual;
    function getViewTypeCount(): jint; overload; virtual;
    procedure registerDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    procedure unregisterDataSetObserver(para1: ADDataSetObserver); overload; virtual;
    function getFilter(): AWFilter; overload; virtual;
    function getWrappedAdapter(): AWListAdapter; overload; virtual;
  end;

  AWArrayAdapter = class external 'android.widget' name 'ArrayAdapter' (AWBaseAdapter, AWFilterable)
  public
    constructor create(para1: ACContext; para2: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: Arr1JLObject); overload;
    constructor create(para1: ACContext; para2: jint; const para3: array of JLObject); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint; para4: Arr1JLObject); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint; const para4: array of JLObject); overload;
    constructor create(para1: ACContext; para2: jint; para3: JUList); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint; para4: JUList); overload;
    procedure add(para1: JLObject); overload; virtual;
    procedure addAll(para1: JUCollection); overload; virtual;
    procedure addAll(para1: Arr1JLObject); overload; virtual;
    procedure addAll(const para1: array of JLObject); overload; virtual;
    procedure insert(para1: JLObject; para2: jint); overload; virtual;
    procedure remove(para1: JLObject); overload; virtual;
    procedure clear(); overload; virtual;
    procedure sort(para1: JUComparator); overload; virtual;
    procedure notifyDataSetChanged(); overload; virtual;
    procedure setNotifyOnChange(para1: jboolean); overload; virtual;
    function getContext(): ACContext; overload; virtual;
    function getCount(): jint; overload; virtual;
    function getItem(para1: jint): JLObject; overload; virtual;
    function getPosition(para1: JLObject): jint; overload; virtual;
    function getItemId(para1: jint): jlong; overload; virtual;
    function getView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload; virtual;
    procedure setDropDownViewResource(para1: jint); overload; virtual;
    function getDropDownView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload; virtual;
    class function createFromResource(para1: ACContext; para2: jint; para3: jint): AWArrayAdapter; static; overload;
    function getFilter(): AWFilter; overload; virtual;
  end;

  AWCursorAdapter = class abstract external 'android.widget' name 'CursorAdapter' (AWBaseAdapter, AWFilterable)
  public
    const
      FLAG_AUTO_REQUERY = 1 deprecated;
      FLAG_REGISTER_CONTENT_OBSERVER = 2;
  public
    constructor create(para1: ACContext; para2: ADCursor); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jboolean); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jint); overload;
  strict protected
    procedure init(para1: ACContext; para2: ADCursor; para3: jboolean); overload; virtual;
  public
    function getCursor(): ADCursor; overload; virtual;
    function getCount(): jint; overload; virtual;
    function getItem(para1: jint): JLObject; overload; virtual;
    function getItemId(para1: jint): jlong; overload; virtual;
    function hasStableIds(): jboolean; overload; virtual;
    function getView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload; virtual;
    function getDropDownView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload; virtual;
    function newView(para1: ACContext; para2: ADCursor; para3: AVViewGroup): AVView; overload; virtual; abstract;
    function newDropDownView(para1: ACContext; para2: ADCursor; para3: AVViewGroup): AVView; overload; virtual;
    procedure bindView(para1: AVView; para2: ACContext; para3: ADCursor); overload; virtual; abstract;
    procedure changeCursor(para1: ADCursor); overload; virtual;
    function swapCursor(para1: ADCursor): ADCursor; overload; virtual;
    function convertToString(para1: ADCursor): JLCharSequence; overload; virtual;
    function runQueryOnBackgroundThread(para1: JLCharSequence): ADCursor; overload; virtual;
    function getFilter(): AWFilter; overload; virtual;
    function getFilterQueryProvider(): AWFilterQueryProvider; overload; virtual;
    procedure setFilterQueryProvider(para1: AWFilterQueryProvider); overload; virtual;
  strict protected
    procedure onContentChanged(); overload; virtual;
  end;

  AWSimpleAdapter = class external 'android.widget' name 'SimpleAdapter' (AWBaseAdapter, AWFilterable)
  public
    type
      InnerViewBinder = interface;
      Arr1InnerViewBinder = array of InnerViewBinder;
      Arr2InnerViewBinder = array of Arr1InnerViewBinder;
      Arr3InnerViewBinder = array of Arr2InnerViewBinder;
      InnerViewBinder = interface external 'android.widget' name 'ViewBinder' 
        function setViewValue(para1: AVView; para2: JLObject; para3: JLString): jboolean; overload;
      end;

  public
    constructor create(para1: ACContext; para2: JUList; para3: jint; para4: Arr1JLString; para5: Arr1jint); overload;
    constructor create(para1: ACContext; para2: JUList; para3: jint; const para4: array of JLString; const para5: array of jint); overload;
    function getCount(): jint; overload; virtual;
    function getItem(para1: jint): JLObject; overload; virtual;
    function getItemId(para1: jint): jlong; overload; virtual;
    function getView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload; virtual;
    procedure setDropDownViewResource(para1: jint); overload; virtual;
    function getDropDownView(para1: jint; para2: AVView; para3: AVViewGroup): AVView; overload; virtual;
    function getViewBinder(): AWSimpleAdapter.InnerViewBinder; overload; virtual;
    procedure setViewBinder(para1: AWSimpleAdapter.InnerViewBinder); overload; virtual;
    procedure setViewImage(para1: AWImageView; para2: jint); overload; virtual;
    procedure setViewImage(para1: AWImageView; para2: JLString); overload; virtual;
    procedure setViewText(para1: AWTextView; para2: JLString); overload; virtual;
    function getFilter(): AWFilter; overload; virtual;
  end;

  AWResourceCursorTreeAdapter = class abstract external 'android.widget' name 'ResourceCursorTreeAdapter' (AWCursorTreeAdapter)
  public
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; para4: jint; para5: jint; para6: jint); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; para4: jint; para5: jint); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; para4: jint); overload;
    function newChildView(para1: ACContext; para2: ADCursor; para3: jboolean; para4: AVViewGroup): AVView; overload; virtual;
    function newGroupView(para1: ACContext; para2: ADCursor; para3: jboolean; para4: AVViewGroup): AVView; overload; virtual;
  end;

  ANTIsoDep = class sealed external 'android.nfc.tech' name 'IsoDep' (ANTBasicTagTechnology)
  public
    class function get(para1: ANTag): ANTIsoDep; static; overload;
    procedure setTimeout(para1: jint); overload; virtual;
    function getTimeout(): jint; overload; virtual;
    function getHistoricalBytes(): Arr1jbyte; overload; virtual;
    function getHiLayerResponse(): Arr1jbyte; overload; virtual;
    function transceive(para1: Arr1jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function transceive(var para1: array of jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function getMaxTransceiveLength(): jint; overload; virtual;
    function isExtendedLengthApduSupported(): jboolean; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ANTMifareClassic = class sealed external 'android.nfc.tech' name 'MifareClassic' (ANTBasicTagTechnology)
  public
    const
      BLOCK_SIZE = 16;
  public
    final class var
      fKEY_DEFAULT: Arr1jbyte; external name 'KEY_DEFAULT';
      fKEY_MIFARE_APPLICATION_DIRECTORY: Arr1jbyte; external name 'KEY_MIFARE_APPLICATION_DIRECTORY';
      fKEY_NFC_FORUM: Arr1jbyte; external name 'KEY_NFC_FORUM';
  public
    const
      SIZE_1K = 1024;
      SIZE_2K = 2048;
      SIZE_4K = 4096;
      SIZE_MINI = 320;
      TYPE_CLASSIC = 0;
      TYPE_PLUS = 1;
      TYPE_PRO = 2;
      TYPE_UNKNOWN = -1;
  public
    class function get(para1: ANTag): ANTMifareClassic; static; overload;
    function getType(): jint; overload; virtual;
    function getSize(): jint; overload; virtual;
    function getSectorCount(): jint; overload; virtual;
    function getBlockCount(): jint; overload; virtual;
    function getBlockCountInSector(para1: jint): jint; overload; virtual;
    function blockToSector(para1: jint): jint; overload; virtual;
    function sectorToBlock(para1: jint): jint; overload; virtual;
    function authenticateSectorWithKeyA(para1: jint; para2: Arr1jbyte): jboolean; overload; virtual;  // throws java.io.IOException
    function authenticateSectorWithKeyA(para1: jint; var para2: array of jbyte): jboolean; overload; virtual;  // throws java.io.IOException
    function authenticateSectorWithKeyB(para1: jint; para2: Arr1jbyte): jboolean; overload; virtual;  // throws java.io.IOException
    function authenticateSectorWithKeyB(para1: jint; var para2: array of jbyte): jboolean; overload; virtual;  // throws java.io.IOException
    function readBlock(para1: jint): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    procedure writeBlock(para1: jint; para2: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure writeBlock(para1: jint; var para2: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure increment(para1: jint; para2: jint); overload; virtual;  // throws java.io.IOException
    procedure decrement(para1: jint; para2: jint); overload; virtual;  // throws java.io.IOException
    procedure transfer(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure restore(para1: jint); overload; virtual;  // throws java.io.IOException
    function transceive(para1: Arr1jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function transceive(var para1: array of jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function getMaxTransceiveLength(): jint; overload; virtual;
    procedure setTimeout(para1: jint); overload; virtual;
    function getTimeout(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ANTMifareUltralight = class sealed external 'android.nfc.tech' name 'MifareUltralight' (ANTBasicTagTechnology)
  public
    const
      PAGE_SIZE = 4;
      TYPE_ULTRALIGHT = 1;
      TYPE_ULTRALIGHT_C = 2;
      TYPE_UNKNOWN = -1;
  public
    class function get(para1: ANTag): ANTMifareUltralight; static; overload;
    function getType(): jint; overload; virtual;
    function readPages(para1: jint): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    procedure writePage(para1: jint; para2: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure writePage(para1: jint; var para2: array of jbyte); overload; virtual;  // throws java.io.IOException
    function transceive(para1: Arr1jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function transceive(var para1: array of jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function getMaxTransceiveLength(): jint; overload; virtual;
    procedure setTimeout(para1: jint); overload; virtual;
    function getTimeout(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ANTNdef = class sealed external 'android.nfc.tech' name 'Ndef' (ANTBasicTagTechnology)
  public
    const
      MIFARE_CLASSIC = 'com.nxp.ndef.mifareclassic';
      NFC_FORUM_TYPE_1 = 'org.nfcforum.ndef.type1';
      NFC_FORUM_TYPE_2 = 'org.nfcforum.ndef.type2';
      NFC_FORUM_TYPE_3 = 'org.nfcforum.ndef.type3';
      NFC_FORUM_TYPE_4 = 'org.nfcforum.ndef.type4';
  public
    class function get(para1: ANTag): ANTNdef; static; overload;
    function getCachedNdefMessage(): ANNdefMessage; overload; virtual;
    function getType(): JLString; overload; virtual;
    function getMaxSize(): jint; overload; virtual;
    function isWritable(): jboolean; overload; virtual;
    function getNdefMessage(): ANNdefMessage; overload; virtual;  // throws java.io.IOException, android.nfc.FormatException
    procedure writeNdefMessage(para1: ANNdefMessage); overload; virtual;  // throws java.io.IOException, android.nfc.FormatException
    function canMakeReadOnly(): jboolean; overload; virtual;
    function makeReadOnly(): jboolean; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ANTNdefFormatable = class sealed external 'android.nfc.tech' name 'NdefFormatable' (ANTBasicTagTechnology)
  public
    class function get(para1: ANTag): ANTNdefFormatable; static; overload;
    procedure format(para1: ANNdefMessage); overload; virtual;  // throws java.io.IOException, android.nfc.FormatException
    procedure formatReadOnly(para1: ANNdefMessage); overload; virtual;  // throws java.io.IOException, android.nfc.FormatException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ANTNfcA = class sealed external 'android.nfc.tech' name 'NfcA' (ANTBasicTagTechnology)
  public
    class function get(para1: ANTag): ANTNfcA; static; overload;
    function getAtqa(): Arr1jbyte; overload; virtual;
    function getSak(): jshort; overload; virtual;
    function transceive(para1: Arr1jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function transceive(var para1: array of jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function getMaxTransceiveLength(): jint; overload; virtual;
    procedure setTimeout(para1: jint); overload; virtual;
    function getTimeout(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ANTNfcB = class sealed external 'android.nfc.tech' name 'NfcB' (ANTBasicTagTechnology)
  public
    class function get(para1: ANTag): ANTNfcB; static; overload;
    function getApplicationData(): Arr1jbyte; overload; virtual;
    function getProtocolInfo(): Arr1jbyte; overload; virtual;
    function transceive(para1: Arr1jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function transceive(var para1: array of jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function getMaxTransceiveLength(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ANTNfcF = class sealed external 'android.nfc.tech' name 'NfcF' (ANTBasicTagTechnology)
  public
    class function get(para1: ANTag): ANTNfcF; static; overload;
    function getSystemCode(): Arr1jbyte; overload; virtual;
    function getManufacturer(): Arr1jbyte; overload; virtual;
    function transceive(para1: Arr1jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function transceive(var para1: array of jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function getMaxTransceiveLength(): jint; overload; virtual;
    procedure setTimeout(para1: jint); overload; virtual;
    function getTimeout(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ANTNfcV = class sealed external 'android.nfc.tech' name 'NfcV' (ANTBasicTagTechnology)
  public
    class function get(para1: ANTag): ANTNfcV; static; overload;
    function getResponseFlags(): jbyte; overload; virtual;
    function getDsfId(): jbyte; overload; virtual;
    function transceive(para1: Arr1jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function transceive(var para1: array of jbyte): Arr1jbyte; overload; virtual;  // throws java.io.IOException
    function getMaxTransceiveLength(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  AUBase64InputStream = class external 'android.util' name 'Base64InputStream' (JIFilterInputStream)
  public
    constructor create(para1: JIInputStream; para2: jint); overload;
    function markSupported(): jboolean; overload; virtual;
    procedure mark(para1: jint); overload; virtual;
    procedure reset(); overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    function available(): jint; overload; virtual;
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
  end;

  JIBufferedInputStream = class external 'java.io' name 'BufferedInputStream' (JIFilterInputStream)
  strict protected
    var
      fbuf: Arr1jbyte; external name 'buf';
      fcount: jint; external name 'count';
      fmarklimit: jint; external name 'marklimit';
      fmarkpos: jint; external name 'markpos';
      fpos: jint; external name 'pos';
  public
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIInputStream; para2: jint); overload;
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIDataInputStream = class external 'java.io' name 'DataInputStream' (JIFilterInputStream, JIDataInput)
  public
    constructor create(para1: JIInputStream); overload;
    function read(para1: Arr1jbyte): jint; overload; virtual; final;  // throws java.io.IOException
    function read(var para1: array of jbyte): jint; overload; virtual; final;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual; final;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual; final;  // throws java.io.IOException
    function readBoolean(): jboolean; overload; virtual; final;  // throws java.io.IOException
    function readByte(): jbyte; overload; virtual; final;  // throws java.io.IOException
    function readChar(): jchar; overload; virtual; final;  // throws java.io.IOException
    function readDouble(): jdouble; overload; virtual; final;  // throws java.io.IOException
    function readFloat(): jfloat; overload; virtual; final;  // throws java.io.IOException
    procedure readFully(para1: Arr1jbyte); overload; virtual; final;  // throws java.io.IOException
    procedure readFully(var para1: array of jbyte); overload; virtual; final;  // throws java.io.IOException
    procedure readFully(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual; final;  // throws java.io.IOException
    procedure readFully(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual; final;  // throws java.io.IOException
    function readInt(): jint; overload; virtual; final;  // throws java.io.IOException
    function readLine(): JLString; overload; virtual; final;  // throws java.io.IOException
    function readLong(): jlong; overload; virtual; final;  // throws java.io.IOException
    function readShort(): jshort; overload; virtual; final;  // throws java.io.IOException
    function readUnsignedByte(): jint; overload; virtual; final;  // throws java.io.IOException
    function readUnsignedShort(): jint; overload; virtual; final;  // throws java.io.IOException
    function readUTF(): JLString; overload; virtual; final;  // throws java.io.IOException
    class function readUTF(para1: JIDataInput): JLString; static; overload; final;  // throws java.io.IOException
    function skipBytes(para1: jint): jint; overload; virtual; final;  // throws java.io.IOException
  end;

  JILineNumberInputStream = class external 'java.io' name 'LineNumberInputStream' (JIFilterInputStream)
  public
    constructor create(para1: JIInputStream); overload;
    function available(): jint; overload; virtual;  // throws java.io.IOException
    function getLineNumber(): jint; overload; virtual;
    procedure mark(para1: jint); overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    procedure setLineNumber(para1: jint); overload; virtual;
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIPushbackInputStream = class external 'java.io' name 'PushbackInputStream' (JIFilterInputStream)
  strict protected
    var
      fbuf: Arr1jbyte; external name 'buf';
      fpos: jint; external name 'pos';
  public
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIInputStream; para2: jint); overload;
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
    procedure unread(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
    procedure unread(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
    procedure unread(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure unread(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure unread(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;
    procedure reset(); overload; virtual;  // throws java.io.IOException
  end;

  JSDigestInputStream = class external 'java.security' name 'DigestInputStream' (JIFilterInputStream)
  strict protected
    var
      fdigest: JSMessageDigest; external name 'digest';
  public
    constructor create(para1: JIInputStream; para2: JSMessageDigest); overload;
    function getMessageDigest(): JSMessageDigest; overload; virtual;
    procedure setMessageDigest(para1: JSMessageDigest); overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    procedure &on(para1: jboolean); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JUZCheckedInputStream = class external 'java.util.zip' name 'CheckedInputStream' (JIFilterInputStream)
  public
    constructor create(para1: JIInputStream; para2: JUZChecksum); overload;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function getChecksum(): JUZChecksum; overload; virtual;
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JUZDeflaterInputStream = class external 'java.util.zip' name 'DeflaterInputStream' (JIFilterInputStream)
  strict protected
    final var
      fbuf: Arr1jbyte; external name 'buf';
      fdef: JUZDeflater; external name 'def';
  public
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIInputStream; para2: JUZDeflater); overload;
    constructor create(para1: JIInputStream; para2: JUZDeflater; para3: jint); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
    function available(): jint; overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
    procedure mark(para1: jint); overload; virtual;
    procedure reset(); overload; virtual;  // throws java.io.IOException
  end;

  JUZInflaterInputStream = class external 'java.util.zip' name 'InflaterInputStream' (JIFilterInputStream)
  strict protected
    var
      fbuf: Arr1jbyte; external name 'buf';
      finf: JUZInflater; external name 'inf';
      flen: jint; external name 'len';
  public
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: JIInputStream; para2: JUZInflater); overload;
    constructor create(para1: JIInputStream; para2: JUZInflater; para3: jint); overload;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
  strict protected
    procedure fill(); overload; virtual;  // throws java.io.IOException
  public
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;
    procedure reset(); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
  end;

  JCCipherInputStream = class external 'javax.crypto' name 'CipherInputStream' (JIFilterInputStream)
  public
    constructor create(para1: JIInputStream; para2: JCCipher); overload;
  strict protected
    constructor create(para1: JIInputStream); overload;
  public
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
    function available(): jint; overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
  end;

  JILineNumberReader = class external 'java.io' name 'LineNumberReader' (JIBufferedReader)
  public
    constructor create(para1: JIReader); overload;
    constructor create(para1: JIReader; para2: jint); overload;
    function getLineNumber(): jint; overload; virtual;
    procedure mark(para1: jint); overload; virtual;  // throws java.io.IOException
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function readLine(): JLString; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    procedure setLineNumber(para1: jint); overload; virtual;
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIPushbackReader = class external 'java.io' name 'PushbackReader' (JIFilterReader)
  public
    constructor create(para1: JIReader); overload;
    constructor create(para1: JIReader; para2: jint); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure mark(para1: jint); overload; virtual;  // throws java.io.IOException
    function markSupported(): jboolean; overload; virtual;
    function read(): jint; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jchar; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function ready(): jboolean; overload; virtual;  // throws java.io.IOException
    procedure reset(); overload; virtual;  // throws java.io.IOException
    procedure unread(para1: Arr1jchar); overload; virtual;  // throws java.io.IOException
    procedure unread(var para1: array of jchar); overload; virtual;  // throws java.io.IOException
    procedure unread(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure unread(var para1: array of jchar; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure unread(para1: jint); overload; virtual;  // throws java.io.IOException
    function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
  end;

  JIFileReader = class external 'java.io' name 'FileReader' (JIInputStreamReader)
  public
    constructor create(para1: JIFile); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JIFileDescriptor); overload;
    constructor create(para1: JLString); overload;  // throws java.io.FileNotFoundException
  end;

  JNCSAbstractInterruptibleChannel = class abstract external 'java.nio.channels.spi' name 'AbstractInterruptibleChannel' (JLObject, JNCChannel, JNCInterruptibleChannel)
  strict protected
    constructor create(); overload;
  public
    function isOpen(): jboolean; overload; virtual; final;
    procedure close(); overload; virtual; final;  // throws java.io.IOException
  strict protected
    procedure &begin(); overload; virtual; final;
    procedure &end(para1: jboolean); overload; virtual; final;  // throws java.nio.channels.AsynchronousCloseException
    procedure implCloseChannel(); overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNCScatteringByteChannel = interface external 'java.nio.channels' name 'ScatteringByteChannel' (JNCReadableByteChannel)
    function read(para1: Arr1JNByteBuffer): jlong; overload;  // throws java.io.IOException
    function read(var para1: array of JNByteBuffer): jlong; overload;  // throws java.io.IOException
    function read(para1: Arr1JNByteBuffer; para2: jint; para3: jint): jlong; overload;  // throws java.io.IOException
    function read(var para1: array of JNByteBuffer; para2: jint; para3: jint): jlong; overload;  // throws java.io.IOException
  end;

  JNCByteChannel = interface external 'java.nio.channels' name 'ByteChannel' (JNCReadableByteChannel, JNCWritableByteChannel)
  end;

  JNCGatheringByteChannel = interface external 'java.nio.channels' name 'GatheringByteChannel' (JNCWritableByteChannel)
    function write(para1: Arr1JNByteBuffer): jlong; overload;  // throws java.io.IOException
    function write(var para1: array of JNByteBuffer): jlong; overload;  // throws java.io.IOException
    function write(para1: Arr1JNByteBuffer; para2: jint; para3: jint): jlong; overload;  // throws java.io.IOException
    function write(var para1: array of JNByteBuffer; para2: jint; para3: jint): jlong; overload;  // throws java.io.IOException
  end;

  AOParcelFileDescriptor = class external 'android.os' name 'ParcelFileDescriptor' (JLObject, AOParcelable, JICloseable)
  public
    type
      InnerFileDescriptorDetachedException = class;
      Arr1InnerFileDescriptorDetachedException = array of InnerFileDescriptorDetachedException;
      Arr2InnerFileDescriptorDetachedException = array of Arr1InnerFileDescriptorDetachedException;
      Arr3InnerFileDescriptorDetachedException = array of Arr2InnerFileDescriptorDetachedException;
      InnerOnCloseListener = interface;
      Arr1InnerOnCloseListener = array of InnerOnCloseListener;
      Arr2InnerOnCloseListener = array of Arr1InnerOnCloseListener;
      Arr3InnerOnCloseListener = array of Arr2InnerOnCloseListener;
      InnerAutoCloseOutputStream = class;
      Arr1InnerAutoCloseOutputStream = array of InnerAutoCloseOutputStream;
      Arr2InnerAutoCloseOutputStream = array of Arr1InnerAutoCloseOutputStream;
      Arr3InnerAutoCloseOutputStream = array of Arr2InnerAutoCloseOutputStream;
      InnerAutoCloseInputStream = class;
      Arr1InnerAutoCloseInputStream = array of InnerAutoCloseInputStream;
      Arr2InnerAutoCloseInputStream = array of Arr1InnerAutoCloseInputStream;
      Arr3InnerAutoCloseInputStream = array of Arr2InnerAutoCloseInputStream;
      InnerFileDescriptorDetachedException = class external 'android.os' name 'FileDescriptorDetachedException' (JIIOException)
      public
        constructor create(); overload;
      end;

      InnerOnCloseListener = interface external 'android.os' name 'OnCloseListener' 
        procedure onClose(para1: JIIOException); overload;
      end;

      InnerAutoCloseOutputStream = class external 'android.os' name 'AutoCloseOutputStream' (JIFileOutputStream)
      public
        constructor create(para1: AOParcelFileDescriptor); overload;
        procedure close(); overload; virtual;  // throws java.io.IOException
      end;

      InnerAutoCloseInputStream = class external 'android.os' name 'AutoCloseInputStream' (JIFileInputStream)
      public
        constructor create(para1: AOParcelFileDescriptor); overload;
        procedure close(); overload; virtual;  // throws java.io.IOException
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      MODE_APPEND = 33554432;
      MODE_CREATE = 134217728;
      MODE_READ_ONLY = 268435456;
      MODE_READ_WRITE = 805306368;
      MODE_TRUNCATE = 67108864;
      MODE_WORLD_READABLE = 1 deprecated;
      MODE_WORLD_WRITEABLE = 2 deprecated;
      MODE_WRITE_ONLY = 536870912;
  public
    constructor create(para1: AOParcelFileDescriptor); overload;
    class function open(para1: JIFile; para2: jint): AOParcelFileDescriptor; static; overload;  // throws java.io.FileNotFoundException
    class function open(para1: JIFile; para2: jint; para3: AOHandler; para4: AOParcelFileDescriptor.InnerOnCloseListener): AOParcelFileDescriptor; static; overload;  // throws java.io.IOException
    class function dup(para1: JIFileDescriptor): AOParcelFileDescriptor; static; overload;  // throws java.io.IOException
    function dup(): AOParcelFileDescriptor; overload; virtual;  // throws java.io.IOException
    class function fromFd(para1: jint): AOParcelFileDescriptor; static; overload;  // throws java.io.IOException
    class function adoptFd(para1: jint): AOParcelFileDescriptor; static; overload;
    class function fromSocket(para1: JNSocket): AOParcelFileDescriptor; static; overload;
    class function fromDatagramSocket(para1: JNDatagramSocket): AOParcelFileDescriptor; static; overload;
    class function createPipe(): Arr1AOParcelFileDescriptor; static; overload;  // throws java.io.IOException
    class function createReliablePipe(): Arr1AOParcelFileDescriptor; static; overload;  // throws java.io.IOException
    class function createSocketPair(): Arr1AOParcelFileDescriptor; static; overload;  // throws java.io.IOException
    class function createReliableSocketPair(): Arr1AOParcelFileDescriptor; static; overload;  // throws java.io.IOException
    class function parseMode(para1: JLString): jint; static; overload;
    function getFileDescriptor(): JIFileDescriptor; overload; virtual;
    function getStatSize(): jlong; overload; virtual;
    function getFd(): jint; overload; virtual;
    function detachFd(): jint; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure closeWithError(para1: JLString); overload; virtual;  // throws java.io.IOException
    function canDetectErrors(): jboolean; overload; virtual;
    procedure checkError(); overload; virtual;  // throws java.io.IOException
    function toString(): JLString; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AUBase64OutputStream = class external 'android.util' name 'Base64OutputStream' (JIFilterOutputStream)
  public
    constructor create(para1: JIOutputStream; para2: jint); overload;
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  JIBufferedOutputStream = class external 'java.io' name 'BufferedOutputStream' (JIFilterOutputStream)
  strict protected
    var
      fbuf: Arr1jbyte; external name 'buf';
      fcount: jint; external name 'count';
  public
    constructor create(para1: JIOutputStream); overload;
    constructor create(para1: JIOutputStream; para2: jint); overload;
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
  end;

  JIDataOutputStream = class external 'java.io' name 'DataOutputStream' (JIFilterOutputStream, JIDataOutput)
  strict protected
    var
      fwritten: jint; external name 'written';
  public
    constructor create(para1: JIOutputStream); overload;
    procedure flush(); overload; virtual;  // throws java.io.IOException
    function size(): jint; overload; virtual; final;
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure writeBoolean(para1: jboolean); overload; virtual; final;  // throws java.io.IOException
    procedure writeByte(para1: jint); overload; virtual; final;  // throws java.io.IOException
    procedure writeBytes(para1: JLString); overload; virtual; final;  // throws java.io.IOException
    procedure writeChar(para1: jint); overload; virtual; final;  // throws java.io.IOException
    procedure writeChars(para1: JLString); overload; virtual; final;  // throws java.io.IOException
    procedure writeDouble(para1: jdouble); overload; virtual; final;  // throws java.io.IOException
    procedure writeFloat(para1: jfloat); overload; virtual; final;  // throws java.io.IOException
    procedure writeInt(para1: jint); overload; virtual; final;  // throws java.io.IOException
    procedure writeLong(para1: jlong); overload; virtual; final;  // throws java.io.IOException
    procedure writeShort(para1: jint); overload; virtual; final;  // throws java.io.IOException
    procedure writeUTF(para1: JLString); overload; virtual; final;  // throws java.io.IOException
  end;

  JIPrintStream = class external 'java.io' name 'PrintStream' (JIFilterOutputStream, JLAppendable, JICloseable)
  public
    constructor create(para1: JIOutputStream); overload;
    constructor create(para1: JIOutputStream; para2: jboolean); overload;
    constructor create(para1: JIOutputStream; para2: jboolean; para3: JLString); overload;  // throws java.io.UnsupportedEncodingException
    constructor create(para1: JIFile); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JIFile; para2: JLString); overload;  // throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    constructor create(para1: JLString); overload;  // throws java.io.FileNotFoundException
    constructor create(para1: JLString; para2: JLString); overload;  // throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    function checkError(): jboolean; overload; virtual;
  strict protected
    procedure clearError(); overload; virtual;
  public
    procedure close(); overload; virtual;
    procedure flush(); overload; virtual;
    function format(para1: JLString; para2: Arr1JLObject): JIPrintStream; overload; virtual;
    function format(para1: JLString; const para2: array of JLObject): JIPrintStream; overload; virtual;
    function format(para1: JULocale; para2: JLString; para3: Arr1JLObject): JIPrintStream; overload; virtual;
    function format(para1: JULocale; para2: JLString; const para3: array of JLObject): JIPrintStream; overload; virtual;
    function printf(para1: JLString; para2: Arr1JLObject): JIPrintStream; overload; virtual;
    function printf(para1: JLString; const para2: array of JLObject): JIPrintStream; overload; virtual;
    function printf(para1: JULocale; para2: JLString; para3: Arr1JLObject): JIPrintStream; overload; virtual;
    function printf(para1: JULocale; para2: JLString; const para3: array of JLObject): JIPrintStream; overload; virtual;
    procedure print(para1: Arr1jchar); overload; virtual;
    procedure print(var para1: array of jchar); overload; virtual;
    procedure print(para1: jchar); overload; virtual;
    procedure print(para1: jdouble); overload; virtual;
    procedure print(para1: jfloat); overload; virtual;
    procedure print(para1: jint); overload; virtual;
    procedure print(para1: jlong); overload; virtual;
    procedure print(para1: JLObject); overload; virtual;
    procedure print(para1: JLString); overload; virtual;
    procedure print(para1: jboolean); overload; virtual;
    procedure println(); overload; virtual;
    procedure println(para1: Arr1jchar); overload; virtual;
    procedure println(var para1: array of jchar); overload; virtual;
    procedure println(para1: jchar); overload; virtual;
    procedure println(para1: jdouble); overload; virtual;
    procedure println(para1: jfloat); overload; virtual;
    procedure println(para1: jint); overload; virtual;
    procedure println(para1: jlong); overload; virtual;
    procedure println(para1: JLObject); overload; virtual;
    procedure println(para1: JLString); overload; virtual;
    procedure println(para1: jboolean); overload; virtual;
  strict protected
    procedure setError(); overload; virtual;
  public
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;
    procedure write(para1: jint); overload; virtual;
    function append(para1: jchar): JIPrintStream; overload; virtual;
    function append(para1: JLCharSequence): JIPrintStream; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JIPrintStream; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JLAppendable; overload; virtual;  // throws java.io.IOException
  end;

  JSDigestOutputStream = class external 'java.security' name 'DigestOutputStream' (JIFilterOutputStream)
  strict protected
    var
      fdigest: JSMessageDigest; external name 'digest';
  public
    constructor create(para1: JIOutputStream; para2: JSMessageDigest); overload;
    function getMessageDigest(): JSMessageDigest; overload; virtual;
    procedure setMessageDigest(para1: JSMessageDigest); overload; virtual;
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure &on(para1: jboolean); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JUZCheckedOutputStream = class external 'java.util.zip' name 'CheckedOutputStream' (JIFilterOutputStream)
  public
    constructor create(para1: JIOutputStream; para2: JUZChecksum); overload;
    function getChecksum(): JUZChecksum; overload; virtual;
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
  end;

  JUZDeflaterOutputStream = class external 'java.util.zip' name 'DeflaterOutputStream' (JIFilterOutputStream)
  strict protected
    var
      fbuf: Arr1jbyte; external name 'buf';
      fdef: JUZDeflater; external name 'def';
  public
    constructor create(para1: JIOutputStream); overload;
    constructor create(para1: JIOutputStream; para2: JUZDeflater); overload;
    constructor create(para1: JIOutputStream; para2: JUZDeflater; para3: jint); overload;
    constructor create(para1: JIOutputStream; para2: jboolean); overload;
    constructor create(para1: JIOutputStream; para2: JUZDeflater; para3: jboolean); overload;
    constructor create(para1: JIOutputStream; para2: JUZDeflater; para3: jint; para4: jboolean); overload;
  strict protected
    procedure deflate(); overload; virtual;  // throws java.io.IOException
  public
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure finish(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
  end;

  JUZInflaterOutputStream = class external 'java.util.zip' name 'InflaterOutputStream' (JIFilterOutputStream)
  strict protected
    final var
      fbuf: Arr1jbyte; external name 'buf';
      finf: JUZInflater; external name 'inf';
  public
    constructor create(para1: JIOutputStream); overload;
    constructor create(para1: JIOutputStream; para2: JUZInflater); overload;
    constructor create(para1: JIOutputStream; para2: JUZInflater; para3: jint); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure finish(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException, java.util.zip.ZipException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException, java.util.zip.ZipException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException, java.util.zip.ZipException
  end;

  JCCipherOutputStream = class external 'javax.crypto' name 'CipherOutputStream' (JIFilterOutputStream)
  public
    constructor create(para1: JIOutputStream; para2: JCCipher); overload;
  strict protected
    constructor create(para1: JIOutputStream); overload;
  public
    procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure flush(); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  JIFileWriter = class external 'java.io' name 'FileWriter' (JIOutputStreamWriter)
  public
    constructor create(para1: JIFile); overload;  // throws java.io.IOException
    constructor create(para1: JIFile; para2: jboolean); overload;  // throws java.io.IOException
    constructor create(para1: JIFileDescriptor); overload;
    constructor create(para1: JLString); overload;  // throws java.io.IOException
    constructor create(para1: JLString; para2: jboolean); overload;  // throws java.io.IOException
  end;

  JISerializablePermission = class sealed external 'java.io' name 'SerializablePermission' (JSBasicPermission)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JLRuntimePermission = class sealed external 'java.lang' name 'RuntimePermission' (JSBasicPermission)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JLRReflectPermission = class sealed external 'java.lang.reflect' name 'ReflectPermission' (JSBasicPermission)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JNNetPermission = class sealed external 'java.net' name 'NetPermission' (JSBasicPermission)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSSecurityPermission = class sealed external 'java.security' name 'SecurityPermission' (JSBasicPermission)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSSQLPermission = class sealed external 'java.sql' name 'SQLPermission' (JSBasicPermission, JSGuard, JISerializable)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JUPropertyPermission = class sealed external 'java.util' name 'PropertyPermission' (JSBasicPermission)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JULLoggingPermission = class sealed external 'java.util.logging' name 'LoggingPermission' (JSBasicPermission, JSGuard, JISerializable)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JNSSSLPermission = class sealed external 'javax.net.ssl' name 'SSLPermission' (JSBasicPermission)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSAAuthPermission = class sealed external 'javax.security.auth' name 'AuthPermission' (JSBasicPermission)
  public
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    function getActions(): JLString; overload; virtual;
    function implies(para1: JSPermission): jboolean; overload; virtual;
  end;

  JSCallableStatement = interface external 'java.sql' name 'CallableStatement' (JSPreparedStatement)
    function getArray(para1: jint): JSArray; overload;  // throws java.sql.SQLException
    function getArray(para1: JLString): JSArray; overload;  // throws java.sql.SQLException
    function getBigDecimal(para1: jint): JMBigDecimal; overload;  // throws java.sql.SQLException
    function getBigDecimal(para1: jint; para2: jint): JMBigDecimal; overload;  // throws java.sql.SQLException
    function getBigDecimal(para1: JLString): JMBigDecimal; overload;  // throws java.sql.SQLException
    function getBlob(para1: jint): JSBlob; overload;  // throws java.sql.SQLException
    function getBlob(para1: JLString): JSBlob; overload;  // throws java.sql.SQLException
    function getBoolean(para1: jint): jboolean; overload;  // throws java.sql.SQLException
    function getBoolean(para1: JLString): jboolean; overload;  // throws java.sql.SQLException
    function getByte(para1: jint): jbyte; overload;  // throws java.sql.SQLException
    function getByte(para1: JLString): jbyte; overload;  // throws java.sql.SQLException
    function getBytes(para1: jint): Arr1jbyte; overload;  // throws java.sql.SQLException
    function getBytes(para1: JLString): Arr1jbyte; overload;  // throws java.sql.SQLException
    function getClob(para1: jint): JSClob; overload;  // throws java.sql.SQLException
    function getClob(para1: JLString): JSClob; overload;  // throws java.sql.SQLException
    function getDate(para1: jint): JSDate; overload;  // throws java.sql.SQLException
    function getDate(para1: jint; para2: JUCalendar): JSDate; overload;  // throws java.sql.SQLException
    function getDate(para1: JLString): JSDate; overload;  // throws java.sql.SQLException
    function getDate(para1: JLString; para2: JUCalendar): JSDate; overload;  // throws java.sql.SQLException
    function getDouble(para1: jint): jdouble; overload;  // throws java.sql.SQLException
    function getDouble(para1: JLString): jdouble; overload;  // throws java.sql.SQLException
    function getFloat(para1: jint): jfloat; overload;  // throws java.sql.SQLException
    function getFloat(para1: JLString): jfloat; overload;  // throws java.sql.SQLException
    function getInt(para1: jint): jint; overload;  // throws java.sql.SQLException
    function getInt(para1: JLString): jint; overload;  // throws java.sql.SQLException
    function getLong(para1: jint): jlong; overload;  // throws java.sql.SQLException
    function getLong(para1: JLString): jlong; overload;  // throws java.sql.SQLException
    function getObject(para1: jint): JLObject; overload;  // throws java.sql.SQLException
    function getObject(para1: jint; para2: JUMap): JLObject; overload;  // throws java.sql.SQLException
    function getObject(para1: JLString): JLObject; overload;  // throws java.sql.SQLException
    function getObject(para1: JLString; para2: JUMap): JLObject; overload;  // throws java.sql.SQLException
    function getRef(para1: jint): JSRef; overload;  // throws java.sql.SQLException
    function getRef(para1: JLString): JSRef; overload;  // throws java.sql.SQLException
    function getShort(para1: jint): jshort; overload;  // throws java.sql.SQLException
    function getShort(para1: JLString): jshort; overload;  // throws java.sql.SQLException
    function getString(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getString(para1: JLString): JLString; overload;  // throws java.sql.SQLException
    function getTime(para1: jint): JSTime; overload;  // throws java.sql.SQLException
    function getTime(para1: jint; para2: JUCalendar): JSTime; overload;  // throws java.sql.SQLException
    function getTime(para1: JLString): JSTime; overload;  // throws java.sql.SQLException
    function getTime(para1: JLString; para2: JUCalendar): JSTime; overload;  // throws java.sql.SQLException
    function getTimestamp(para1: jint): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function getTimestamp(para1: jint; para2: JUCalendar): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function getTimestamp(para1: JLString): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function getTimestamp(para1: JLString; para2: JUCalendar): JSqlTimestamp; overload;  // throws java.sql.SQLException
    function getURL(para1: jint): JNURL; overload;  // throws java.sql.SQLException
    function getURL(para1: JLString): JNURL; overload;  // throws java.sql.SQLException
    procedure registerOutParameter(para1: jint; para2: jint); overload;  // throws java.sql.SQLException
    procedure registerOutParameter(para1: jint; para2: jint; para3: jint); overload;  // throws java.sql.SQLException
    procedure registerOutParameter(para1: jint; para2: jint; para3: JLString); overload;  // throws java.sql.SQLException
    procedure registerOutParameter(para1: JLString; para2: jint); overload;  // throws java.sql.SQLException
    procedure registerOutParameter(para1: JLString; para2: jint; para3: jint); overload;  // throws java.sql.SQLException
    procedure registerOutParameter(para1: JLString; para2: jint; para3: JLString); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: JLString; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setBigDecimal(para1: JLString; para2: JMBigDecimal); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: JLString; para2: JIInputStream; para3: jint); overload;  // throws java.sql.SQLException
    procedure setBoolean(para1: JLString; para2: jboolean); overload;  // throws java.sql.SQLException
    procedure setByte(para1: JLString; para2: jbyte); overload;  // throws java.sql.SQLException
    procedure setBytes(para1: JLString; para2: Arr1jbyte); overload;  // throws java.sql.SQLException
    procedure setBytes(para1: JLString; var para2: array of jbyte); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: JLString; para2: JIReader; para3: jint); overload;  // throws java.sql.SQLException
    procedure setDate(para1: JLString; para2: JSDate); overload;  // throws java.sql.SQLException
    procedure setDate(para1: JLString; para2: JSDate; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setDouble(para1: JLString; para2: jdouble); overload;  // throws java.sql.SQLException
    procedure setFloat(para1: JLString; para2: jfloat); overload;  // throws java.sql.SQLException
    procedure setInt(para1: JLString; para2: jint); overload;  // throws java.sql.SQLException
    procedure setLong(para1: JLString; para2: jlong); overload;  // throws java.sql.SQLException
    procedure setNull(para1: JLString; para2: jint); overload;  // throws java.sql.SQLException
    procedure setNull(para1: JLString; para2: jint; para3: JLString); overload;  // throws java.sql.SQLException
    procedure setObject(para1: JLString; para2: JLObject); overload;  // throws java.sql.SQLException
    procedure setObject(para1: JLString; para2: JLObject; para3: jint); overload;  // throws java.sql.SQLException
    procedure setObject(para1: JLString; para2: JLObject; para3: jint; para4: jint); overload;  // throws java.sql.SQLException
    procedure setShort(para1: JLString; para2: jshort); overload;  // throws java.sql.SQLException
    procedure setString(para1: JLString; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setTime(para1: JLString; para2: JSTime); overload;  // throws java.sql.SQLException
    procedure setTime(para1: JLString; para2: JSTime; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setTimestamp(para1: JLString; para2: JSqlTimestamp); overload;  // throws java.sql.SQLException
    procedure setTimestamp(para1: JLString; para2: JSqlTimestamp; para3: JUCalendar); overload;  // throws java.sql.SQLException
    procedure setURL(para1: JLString; para2: JNURL); overload;  // throws java.sql.SQLException
    function wasNull(): jboolean; overload;  // throws java.sql.SQLException
    function getRowId(para1: jint): JSRowId; overload;  // throws java.sql.SQLException
    function getRowId(para1: JLString): JSRowId; overload;  // throws java.sql.SQLException
    procedure setRowId(para1: JLString; para2: JSRowId); overload;  // throws java.sql.SQLException
    procedure setNString(para1: JLString; para2: JLString); overload;  // throws java.sql.SQLException
    procedure setNCharacterStream(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: JLString; para2: JSNClob); overload;  // throws java.sql.SQLException
    procedure setClob(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: JLString; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    function getNClob(para1: jint): JSNClob; overload;  // throws java.sql.SQLException
    function getNClob(para1: JLString): JSNClob; overload;  // throws java.sql.SQLException
    procedure setSQLXML(para1: JLString; para2: JSSQLXML); overload;  // throws java.sql.SQLException
    function getSQLXML(para1: jint): JSSQLXML; overload;  // throws java.sql.SQLException
    function getSQLXML(para1: JLString): JSSQLXML; overload;  // throws java.sql.SQLException
    function getNString(para1: jint): JLString; overload;  // throws java.sql.SQLException
    function getNString(para1: JLString): JLString; overload;  // throws java.sql.SQLException
    function getNCharacterStream(para1: jint): JIReader; overload;  // throws java.sql.SQLException
    function getNCharacterStream(para1: JLString): JIReader; overload;  // throws java.sql.SQLException
    function getCharacterStream(para1: jint): JIReader; overload;  // throws java.sql.SQLException
    function getCharacterStream(para1: JLString): JIReader; overload;  // throws java.sql.SQLException
    procedure setBlob(para1: JLString; para2: JSBlob); overload;  // throws java.sql.SQLException
    procedure setClob(para1: JLString; para2: JSClob); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: JLString; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setAsciiStream(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: JLString; para2: JIInputStream; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setBinaryStream(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: JLString; para2: JIReader; para3: jlong); overload;  // throws java.sql.SQLException
    procedure setCharacterStream(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setNCharacterStream(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setClob(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
    procedure setBlob(para1: JLString; para2: JIInputStream); overload;  // throws java.sql.SQLException
    procedure setNClob(para1: JLString; para2: JIReader); overload;  // throws java.sql.SQLException
  end;

  JSProvider = class abstract external 'java.security' name 'Provider' (JUProperties)
  public
    type
      InnerService = class;
      Arr1InnerService = array of InnerService;
      Arr2InnerService = array of Arr1InnerService;
      Arr3InnerService = array of Arr2InnerService;
      InnerService = class external 'java.security' name 'Service' (JLObject)
      public
        constructor create(para1: JSProvider; para2: JLString; para3: JLString; para4: JLString; para5: JUList; para6: JUMap); overload;
        function getType(): JLString; overload; virtual; final;
        function getAlgorithm(): JLString; overload; virtual; final;
        function getProvider(): JSProvider; overload; virtual; final;
        function getClassName(): JLString; overload; virtual; final;
        function getAttribute(para1: JLString): JLString; overload; virtual; final;
        function newInstance(para1: JLObject): JLObject; overload; virtual;  // throws java.security.NoSuchAlgorithmException
        function supportsParameter(para1: JLObject): jboolean; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  strict protected
    constructor create(para1: JLString; para2: jdouble; para3: JLString); overload;
  public
    function getName(): JLString; overload; virtual;
    function getVersion(): jdouble; overload; virtual;
    function getInfo(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure clear(); overload; virtual;
    procedure load(para1: JIInputStream); overload; virtual;  // throws java.io.IOException
    procedure putAll(para1: JUMap); overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function values(): JUCollection; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    function getService(para1: JLString; para2: JLString): JSProvider.InnerService; overload; virtual;
    function getServices(): JUSet; overload; virtual;
  strict protected
    procedure putService(para1: JSProvider.InnerService); overload; virtual;
    procedure removeService(para1: JSProvider.InnerService); overload; virtual;
  end;

  JUCThreadPoolExecutor = class external 'java.util.concurrent' name 'ThreadPoolExecutor' (JUCAbstractExecutorService)
  public
    type
      InnerDiscardOldestPolicy = class;
      Arr1InnerDiscardOldestPolicy = array of InnerDiscardOldestPolicy;
      Arr2InnerDiscardOldestPolicy = array of Arr1InnerDiscardOldestPolicy;
      Arr3InnerDiscardOldestPolicy = array of Arr2InnerDiscardOldestPolicy;
      InnerDiscardPolicy = class;
      Arr1InnerDiscardPolicy = array of InnerDiscardPolicy;
      Arr2InnerDiscardPolicy = array of Arr1InnerDiscardPolicy;
      Arr3InnerDiscardPolicy = array of Arr2InnerDiscardPolicy;
      InnerAbortPolicy = class;
      Arr1InnerAbortPolicy = array of InnerAbortPolicy;
      Arr2InnerAbortPolicy = array of Arr1InnerAbortPolicy;
      Arr3InnerAbortPolicy = array of Arr2InnerAbortPolicy;
      InnerCallerRunsPolicy = class;
      Arr1InnerCallerRunsPolicy = array of InnerCallerRunsPolicy;
      Arr2InnerCallerRunsPolicy = array of Arr1InnerCallerRunsPolicy;
      Arr3InnerCallerRunsPolicy = array of Arr2InnerCallerRunsPolicy;
      InnerDiscardOldestPolicy = class external 'java.util.concurrent' name 'DiscardOldestPolicy' (JLObject, JUCRejectedExecutionHandler)
      public
        constructor create(); overload;
        procedure rejectedExecution(para1: JLRunnable; para2: JUCThreadPoolExecutor); overload; virtual;
      end;

      InnerDiscardPolicy = class external 'java.util.concurrent' name 'DiscardPolicy' (JLObject, JUCRejectedExecutionHandler)
      public
        constructor create(); overload;
        procedure rejectedExecution(para1: JLRunnable; para2: JUCThreadPoolExecutor); overload; virtual;
      end;

      InnerAbortPolicy = class external 'java.util.concurrent' name 'AbortPolicy' (JLObject, JUCRejectedExecutionHandler)
      public
        constructor create(); overload;
        procedure rejectedExecution(para1: JLRunnable; para2: JUCThreadPoolExecutor); overload; virtual;
      end;

      InnerCallerRunsPolicy = class external 'java.util.concurrent' name 'CallerRunsPolicy' (JLObject, JUCRejectedExecutionHandler)
      public
        constructor create(); overload;
        procedure rejectedExecution(para1: JLRunnable; para2: JUCThreadPoolExecutor); overload; virtual;
      end;

  public
    constructor create(para1: jint; para2: jint; para3: jlong; para4: JUCTimeUnit; para5: JUCBlockingQueue); overload;
    constructor create(para1: jint; para2: jint; para3: jlong; para4: JUCTimeUnit; para5: JUCBlockingQueue; para6: JUCThreadFactory); overload;
    constructor create(para1: jint; para2: jint; para3: jlong; para4: JUCTimeUnit; para5: JUCBlockingQueue; para6: JUCRejectedExecutionHandler); overload;
    constructor create(para1: jint; para2: jint; para3: jlong; para4: JUCTimeUnit; para5: JUCBlockingQueue; para6: JUCThreadFactory; para7: JUCRejectedExecutionHandler); overload;
    procedure execute(para1: JLRunnable); overload; virtual;
    procedure shutdown(); overload; virtual;
    function shutdownNow(): JUList; overload; virtual;
    function isShutdown(): jboolean; overload; virtual;
    function isTerminating(): jboolean; overload; virtual;
    function isTerminated(): jboolean; overload; virtual;
    function awaitTermination(para1: jlong; para2: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure setThreadFactory(para1: JUCThreadFactory); overload; virtual;
    function getThreadFactory(): JUCThreadFactory; overload; virtual;
    procedure setRejectedExecutionHandler(para1: JUCRejectedExecutionHandler); overload; virtual;
    function getRejectedExecutionHandler(): JUCRejectedExecutionHandler; overload; virtual;
    procedure setCorePoolSize(para1: jint); overload; virtual;
    function getCorePoolSize(): jint; overload; virtual;
    function prestartCoreThread(): jboolean; overload; virtual;
    function prestartAllCoreThreads(): jint; overload; virtual;
    function allowsCoreThreadTimeOut(): jboolean; overload; virtual;
    procedure allowCoreThreadTimeOut(para1: jboolean); overload; virtual;
    procedure setMaximumPoolSize(para1: jint); overload; virtual;
    function getMaximumPoolSize(): jint; overload; virtual;
    procedure setKeepAliveTime(para1: jlong; para2: JUCTimeUnit); overload; virtual;
    function getKeepAliveTime(para1: JUCTimeUnit): jlong; overload; virtual;
    function getQueue(): JUCBlockingQueue; overload; virtual;
    function remove(para1: JLRunnable): jboolean; overload; virtual;
    procedure purge(); overload; virtual;
    function getPoolSize(): jint; overload; virtual;
    function getActiveCount(): jint; overload; virtual;
    function getLargestPoolSize(): jint; overload; virtual;
    function getTaskCount(): jlong; overload; virtual;
    function getCompletedTaskCount(): jlong; overload; virtual;
    function toString(): JLString; overload; virtual;
  strict protected
    procedure beforeExecute(para1: JLThread; para2: JLRunnable); overload; virtual;
    procedure afterExecute(para1: JLRunnable; para2: JLThrowable); overload; virtual;
    procedure terminated(); overload; virtual;
  end;

  OAHCSAllowAllHostnameVerifier = class external 'org.apache.http.conn.ssl' name 'AllowAllHostnameVerifier' (OAHCSAbstractVerifier)
  public
    constructor create(); overload;
    procedure verify(para1: JLString; para2: Arr1JLString; para3: Arr1JLString); overload; virtual; final;
    procedure verify(para1: JLString; var para2: array of JLString; var para3: array of JLString); overload; virtual; final;
    function toString(): JLString; overload; virtual; final;
  end;

  OAHCSBrowserCompatHostnameVerifier = class external 'org.apache.http.conn.ssl' name 'BrowserCompatHostnameVerifier' (OAHCSAbstractVerifier)
  public
    constructor create(); overload;
    procedure verify(para1: JLString; para2: Arr1JLString; para3: Arr1JLString); overload; virtual; final;  // throws javax.net.ssl.SSLException
    procedure verify(para1: JLString; var para2: array of JLString; var para3: array of JLString); overload; virtual; final;  // throws javax.net.ssl.SSLException
    function toString(): JLString; overload; virtual; final;
  end;

  OAHCSStrictHostnameVerifier = class external 'org.apache.http.conn.ssl' name 'StrictHostnameVerifier' (OAHCSAbstractVerifier)
  public
    constructor create(); overload;
    procedure verify(para1: JLString; para2: Arr1JLString; para3: Arr1JLString); overload; virtual; final;  // throws javax.net.ssl.SSLException
    procedure verify(para1: JLString; var para2: array of JLString; var para3: array of JLString); overload; virtual; final;  // throws javax.net.ssl.SSLException
    function toString(): JLString; overload; virtual; final;
  end;

  ATApplicationTestCase = class abstract external 'android.test' name 'ApplicationTestCase' (ATAndroidTestCase)
  public
    constructor create(para1: JLClass); overload;
    function getApplication(): AAApplication; overload; virtual;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure createApplication(); overload; virtual; final;
    procedure terminateApplication(); overload; virtual; final;
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    function getSystemContext(): ACContext; overload; virtual;
    procedure testApplicationTestCaseSetUpProperly(); overload; virtual; final;  // throws java.lang.Exception
  end;

  ATLoaderTestCase = class external 'android.test' name 'LoaderTestCase' (ATAndroidTestCase)
  public
    constructor create(); overload;
    function getLoaderResultSynchronously(para1: ACLoader): JLObject; overload; virtual;
  end;

  ATProviderTestCase2 = class abstract external 'android.test' name 'ProviderTestCase2' (ATAndroidTestCase)
  public
    constructor create(para1: JLClass; para2: JLString); overload;
    function getProvider(): ACContentProvider; overload; virtual;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    function getMockContentResolver(): ATMMockContentResolver; overload; virtual;
    function getMockContext(): ATIsolatedContext; overload; virtual;
    class function newResolverWithContentProviderFromSql(para1: ACContext; para2: JLString; para3: JLClass; para4: JLString; para5: JLString; para6: jint; para7: JLString): ACContentResolver; static; overload;  // throws java.lang.IllegalAccessException, java.lang.InstantiationException
  end;

  ATServiceTestCase = class abstract external 'android.test' name 'ServiceTestCase' (ATAndroidTestCase)
  public
    constructor create(para1: JLClass); overload;
    function getService(): AAService; overload; virtual;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure setupService(); overload; virtual;
    procedure startService(para1: ACIntent); overload; virtual;
    function bindService(para1: ACIntent): AOIBinder; overload; virtual;
    procedure shutdownService(); overload; virtual;
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    procedure setApplication(para1: AAApplication); overload; virtual;
    function getApplication(): AAApplication; overload; virtual;
    function getSystemContext(): ACContext; overload; virtual;
    procedure testServiceTestCaseSetUpProperly(); overload; virtual;  // throws java.lang.Exception
  end;

  ATActivityTestCase = class abstract external 'android.test' name 'ActivityTestCase' (ATInstrumentationTestCase)
  public
    constructor create(); overload;
  strict protected
    function getActivity(): AAActivity; overload; virtual;
    procedure setActivity(para1: AAActivity); overload; virtual;
    procedure scrubClass(para1: JLClass); overload; virtual;  // throws java.lang.IllegalAccessException
  end;

  ATProviderTestCase = class abstract external 'android.test' name 'ProviderTestCase' (ATInstrumentationTestCase)
  public
    constructor create(para1: JLClass; para2: JLString); overload;
    function getProvider(): ACContentProvider; overload; virtual;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    function getMockContentResolver(): ATMMockContentResolver; overload; virtual;
    function getMockContext(): ATIsolatedContext; overload; virtual;
    class function newResolverWithContentProviderFromSql(para1: ACContext; para2: JLClass; para3: JLString; para4: JLString; para5: jint; para6: JLString): ACContentResolver; static; overload;  // throws java.lang.IllegalAccessException, java.lang.InstantiationException
  end;

  ATSingleLaunchActivityTestCase = class abstract external 'android.test' name 'SingleLaunchActivityTestCase' (ATInstrumentationTestCase)
  public
    constructor create(para1: JLString; para2: JLClass); overload;
    function getActivity(): AAActivity; overload; virtual;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    procedure testActivityTestCaseSetUpProperly(); overload; virtual;  // throws java.lang.Exception
  end;

  ATSyncBaseInstrumentation = class external 'android.test' name 'SyncBaseInstrumentation' (ATInstrumentationTestCase)
  public
    constructor create(); overload;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure syncProvider(para1: ANUri; para2: JLString; para3: JLString); overload; virtual;  // throws java.lang.Exception
    procedure cancelSyncsandDisableAutoSync(); overload; virtual;
  end;

  OAHISocketHttpClientConnection = class external 'org.apache.http.impl' name 'SocketHttpClientConnection' (OAHIAbstractHttpClientConnection, OAHHttpInetConnection)
  public
    constructor create(); overload;
  strict protected
    procedure assertNotOpen(); overload; virtual;
    procedure assertOpen(); overload; virtual;
    function createSessionInputBuffer(para1: JNSocket; para2: jint; para3: OAHPHttpParams): OAHISessionInputBuffer; overload; virtual;  // throws java.io.IOException
    function createSessionOutputBuffer(para1: JNSocket; para2: jint; para3: OAHPHttpParams): OAHISessionOutputBuffer; overload; virtual;  // throws java.io.IOException
    procedure bind(para1: JNSocket; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
  public
    function isOpen(): jboolean; overload; virtual;
  strict protected
    function getSocket(): JNSocket; overload; virtual;
  public
    function getLocalAddress(): JNInetAddress; overload; virtual;
    function getLocalPort(): jint; overload; virtual;
    function getRemoteAddress(): JNInetAddress; overload; virtual;
    function getRemotePort(): jint; overload; virtual;
    procedure setSocketTimeout(para1: jint); overload; virtual;
    function getSocketTimeout(): jint; overload; virtual;
    procedure shutdown(); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  OAHICAbstractClientConnAdapter = class abstract external 'org.apache.http.impl.conn' name 'AbstractClientConnAdapter' (JLObject, OAHCManagedClientConnection)
  strict protected
    constructor create(para1: OAHCClientConnectionManager; para2: OAHCOperatedClientConnection); overload;
    procedure detach(); overload; virtual;
    function getWrappedConnection(): OAHCOperatedClientConnection; overload; virtual;
    function getManager(): OAHCClientConnectionManager; overload; virtual;
    procedure assertNotAborted(); overload; virtual; final;  // throws java.io.InterruptedIOException
    procedure assertValid(para1: OAHCOperatedClientConnection); overload; virtual; final;
  public
    function isOpen(): jboolean; overload; virtual;
    function isStale(): jboolean; overload; virtual;
    procedure setSocketTimeout(para1: jint); overload; virtual;
    function getSocketTimeout(): jint; overload; virtual;
    function getMetrics(): OAHHttpConnectionMetrics; overload; virtual;
    procedure flush(); overload; virtual;  // throws java.io.IOException
    function isResponseAvailable(para1: jint): jboolean; overload; virtual;  // throws java.io.IOException
    procedure receiveResponseEntity(para1: OAHHttpResponse); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    function receiveResponseHeader(): OAHHttpResponse; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    procedure sendRequestEntity(para1: OAHHttpEntityEnclosingRequest); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    procedure sendRequestHeader(para1: OAHHttpRequest); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    function getLocalAddress(): JNInetAddress; overload; virtual;
    function getLocalPort(): jint; overload; virtual;
    function getRemoteAddress(): JNInetAddress; overload; virtual;
    function getRemotePort(): jint; overload; virtual;
    function isSecure(): jboolean; overload; virtual;
    function getSSLSession(): JNSSSLSession; overload; virtual;
    procedure markReusable(); overload; virtual;
    procedure unmarkReusable(); overload; virtual;
    function isMarkedReusable(): jboolean; overload; virtual;
    procedure setIdleDuration(para1: jlong; para2: JUCTimeUnit); overload; virtual;
    procedure releaseConnection(); overload; virtual;
    procedure abortConnection(); overload; virtual;
  end;

  OAHISocketHttpServerConnection = class external 'org.apache.http.impl' name 'SocketHttpServerConnection' (OAHIAbstractHttpServerConnection, OAHHttpInetConnection)
  public
    constructor create(); overload;
  strict protected
    procedure assertNotOpen(); overload; virtual;
    procedure assertOpen(); overload; virtual;
    function createHttpDataReceiver(para1: JNSocket; para2: jint; para3: OAHPHttpParams): OAHISessionInputBuffer; overload; virtual;  // throws java.io.IOException
    function createHttpDataTransmitter(para1: JNSocket; para2: jint; para3: OAHPHttpParams): OAHISessionOutputBuffer; overload; virtual;  // throws java.io.IOException
    procedure bind(para1: JNSocket; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    function getSocket(): JNSocket; overload; virtual;
  public
    function isOpen(): jboolean; overload; virtual;
    function getLocalAddress(): JNInetAddress; overload; virtual;
    function getLocalPort(): jint; overload; virtual;
    function getRemoteAddress(): JNInetAddress; overload; virtual;
    function getRemotePort(): jint; overload; virtual;
    procedure setSocketTimeout(para1: jint); overload; virtual;
    function getSocketTimeout(): jint; overload; virtual;
    procedure shutdown(); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  end;

  OAHCEUrlEncodedFormEntity = class external 'org.apache.http.client.entity' name 'UrlEncodedFormEntity' (OAHEStringEntity)
  public
    constructor create(para1: JUList; para2: JLString); overload;  // throws java.io.UnsupportedEncodingException
    constructor create(para1: JUList); overload;  // throws java.io.UnsupportedEncodingException
  end;

  OAHCMHttpRequestBase = class abstract external 'org.apache.http.client.methods' name 'HttpRequestBase' (OAHMAbstractHttpMessage, OAHCMHttpUriRequest, OAHCMAbortableHttpRequest, JLCloneable)
  public
    constructor create(); overload;
    function getMethod(): JLString; overload; virtual; abstract;
    function getProtocolVersion(): OAHProtocolVersion; overload; virtual;
    function getURI(): JNURI; overload; virtual;
    function getRequestLine(): OAHRequestLine; overload; virtual;
    procedure setURI(para1: JNURI); overload; virtual;
    procedure setConnectionRequest(para1: OAHCClientConnectionRequest); overload; virtual;  // throws java.io.IOException
    procedure setReleaseTrigger(para1: OAHCConnectionReleaseTrigger); overload; virtual;  // throws java.io.IOException
    procedure abort(); overload; virtual;
    function isAborted(): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHICRequestWrapper = class external 'org.apache.http.impl.client' name 'RequestWrapper' (OAHMAbstractHttpMessage, OAHCMHttpUriRequest)
  public
    constructor create(para1: OAHHttpRequest); overload;  // throws org.apache.http.ProtocolException
    procedure resetHeaders(); overload; virtual;
    function getMethod(): JLString; overload; virtual;
    procedure setMethod(para1: JLString); overload; virtual;
    function getProtocolVersion(): OAHProtocolVersion; overload; virtual;
    procedure setProtocolVersion(para1: OAHProtocolVersion); overload; virtual;
    function getURI(): JNURI; overload; virtual;
    procedure setURI(para1: JNURI); overload; virtual;
    function getRequestLine(): OAHRequestLine; overload; virtual;
    procedure abort(); overload; virtual;  // throws java.lang.UnsupportedOperationException
    function isAborted(): jboolean; overload; virtual;
    function getOriginal(): OAHHttpRequest; overload; virtual;
    function isRepeatable(): jboolean; overload; virtual;
    function getExecCount(): jint; overload; virtual;
    procedure incrementExecCount(); overload; virtual;
  end;

  OAHMBasicHttpEntityEnclosingRequest = class external 'org.apache.http.message' name 'BasicHttpEntityEnclosingRequest' (OAHMBasicHttpRequest, OAHHttpEntityEnclosingRequest)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString; para3: OAHProtocolVersion); overload;
    constructor create(para1: OAHRequestLine); overload;
    function getEntity(): OAHHttpEntity; overload; virtual;
    procedure setEntity(para1: OAHHttpEntity); overload; virtual;
    function expectContinue(): jboolean; overload; virtual;
  end;

  OAHIABasicScheme = class external 'org.apache.http.impl.auth' name 'BasicScheme' (OAHIARFC2617Scheme)
  public
    constructor create(); overload;
    function getSchemeName(): JLString; overload; virtual;
    procedure processChallenge(para1: OAHHeader); overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
    function isComplete(): jboolean; overload; virtual;
    function isConnectionBased(): jboolean; overload; virtual;
    function authenticate(para1: OAHACredentials; para2: OAHHttpRequest): OAHHeader; overload; virtual;  // throws org.apache.http.auth.AuthenticationException
    class function authenticate(para1: OAHACredentials; para2: JLString; para3: jboolean): OAHHeader; static; overload;
  end;

  OAHIADigestScheme = class external 'org.apache.http.impl.auth' name 'DigestScheme' (OAHIARFC2617Scheme)
  public
    constructor create(); overload;
    procedure processChallenge(para1: OAHHeader); overload; virtual;  // throws org.apache.http.auth.MalformedChallengeException
    function isComplete(): jboolean; overload; virtual;
    function getSchemeName(): JLString; overload; virtual;
    function isConnectionBased(): jboolean; overload; virtual;
    procedure overrideParamter(para1: JLString; para2: JLString); overload; virtual;
    function authenticate(para1: OAHACredentials; para2: OAHHttpRequest): OAHHeader; overload; virtual;  // throws org.apache.http.auth.AuthenticationException
    class function createCnonce(): JLString; static; overload;
  end;

  OAHICBasicClientCookie2 = class external 'org.apache.http.impl.cookie' name 'BasicClientCookie2' (OAHICBasicClientCookie, OAHCSetCookie2)
  public
    constructor create(para1: JLString; para2: JLString); overload;
    function getPorts(): Arr1jint; overload; virtual;
    procedure setPorts(para1: Arr1jint); overload; virtual;
    procedure setPorts(var para1: array of jint); overload; virtual;
    function getCommentURL(): JLString; overload; virtual;
    procedure setCommentURL(para1: JLString); overload; virtual;
    procedure setDiscard(para1: jboolean); overload; virtual;
    function isPersistent(): jboolean; overload; virtual;
    function isExpired(para1: JUDate): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHICBrowserCompatSpec = class external 'org.apache.http.impl.cookie' name 'BrowserCompatSpec' (OAHICCookieSpecBase)
  strict protected
    final class var
      fDATE_PATTERNS: Arr1JLString; external name 'DATE_PATTERNS';
  public
    constructor create(para1: Arr1JLString); overload;
    constructor create(const para1: array of JLString); overload;
    constructor create(); overload;
    function parse(para1: OAHHeader; para2: OAHCCookieOrigin): JUList; overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function formatCookies(para1: JUList): JUList; overload; virtual;
    function getVersion(): jint; overload; virtual;
    function getVersionHeader(): OAHHeader; overload; virtual;
  end;

  OAHICNetscapeDraftSpec = class external 'org.apache.http.impl.cookie' name 'NetscapeDraftSpec' (OAHICCookieSpecBase)
  strict protected
    const
      EXPIRES_PATTERN = 'EEE, dd-MMM-yyyy HH:mm:ss z';
  public
    constructor create(para1: Arr1JLString); overload;
    constructor create(const para1: array of JLString); overload;
    constructor create(); overload;
    function parse(para1: OAHHeader; para2: OAHCCookieOrigin): JUList; overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function formatCookies(para1: JUList): JUList; overload; virtual;
    function getVersion(): jint; overload; virtual;
    function getVersionHeader(): OAHHeader; overload; virtual;
  end;

  OAHICRFC2109Spec = class external 'org.apache.http.impl.cookie' name 'RFC2109Spec' (OAHICCookieSpecBase)
  public
    constructor create(para1: Arr1JLString; para2: jboolean); overload;
    constructor create(const para1: array of JLString; para2: jboolean); overload;
    constructor create(); overload;
    function parse(para1: OAHHeader; para2: OAHCCookieOrigin): JUList; overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function formatCookies(para1: JUList): JUList; overload; virtual;
  strict protected
    procedure formatParamAsVer(para1: OAHUCharArrayBuffer; para2: JLString; para3: JLString; para4: jint); overload; virtual;
    procedure formatCookieAsVer(para1: OAHUCharArrayBuffer; para2: OAHCCookie; para3: jint); overload; virtual;
  public
    function getVersion(): jint; overload; virtual;
    function getVersionHeader(): OAHHeader; overload; virtual;
  end;

  OWDCDATASection = interface external 'org.w3c.dom' name 'CDATASection' (OWDText)
  end;

  OAHAInvalidCredentialsException = class external 'org.apache.http.auth' name 'InvalidCredentialsException' (OAHAAuthenticationException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OAHIANTLMEngineException = class external 'org.apache.http.impl.auth' name 'NTLMEngineException' (OAHAAuthenticationException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  OAHCCircularRedirectException = class external 'org.apache.http.client' name 'CircularRedirectException' (OAHCRedirectException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JLThrowable); overload;
  end;

  JTDateFormat = class abstract external 'java.text' name 'DateFormat' (JTFormat)
  public
    type
      InnerField = class;
      Arr1InnerField = array of InnerField;
      Arr2InnerField = array of Arr1InnerField;
      Arr3InnerField = array of Arr2InnerField;
      InnerField = class external 'java.text' name 'Field' (JTFormat.InnerField)
      public
        final class var
          fAM_PM: JTDateFormat.InnerField; external name 'AM_PM';
          fDAY_OF_MONTH: JTDateFormat.InnerField; external name 'DAY_OF_MONTH';
          fDAY_OF_WEEK: JTDateFormat.InnerField; external name 'DAY_OF_WEEK';
          fDAY_OF_WEEK_IN_MONTH: JTDateFormat.InnerField; external name 'DAY_OF_WEEK_IN_MONTH';
          fDAY_OF_YEAR: JTDateFormat.InnerField; external name 'DAY_OF_YEAR';
          fERA: JTDateFormat.InnerField; external name 'ERA';
          fHOUR0: JTDateFormat.InnerField; external name 'HOUR0';
          fHOUR1: JTDateFormat.InnerField; external name 'HOUR1';
          fHOUR_OF_DAY0: JTDateFormat.InnerField; external name 'HOUR_OF_DAY0';
          fHOUR_OF_DAY1: JTDateFormat.InnerField; external name 'HOUR_OF_DAY1';
          fMILLISECOND: JTDateFormat.InnerField; external name 'MILLISECOND';
          fMINUTE: JTDateFormat.InnerField; external name 'MINUTE';
          fMONTH: JTDateFormat.InnerField; external name 'MONTH';
          fSECOND: JTDateFormat.InnerField; external name 'SECOND';
          fTIME_ZONE: JTDateFormat.InnerField; external name 'TIME_ZONE';
          fWEEK_OF_MONTH: JTDateFormat.InnerField; external name 'WEEK_OF_MONTH';
          fWEEK_OF_YEAR: JTDateFormat.InnerField; external name 'WEEK_OF_YEAR';
          fYEAR: JTDateFormat.InnerField; external name 'YEAR';
      strict protected
        constructor create(para1: JLString; para2: jint); overload;
      public
        function getCalendarField(): jint; overload; virtual;
        class function ofCalendarField(para1: jint): JTDateFormat.InnerField; static; overload;
      end;

  public
    const
      AM_PM_FIELD = 14;
      DATE_FIELD = 3;
      DAY_OF_WEEK_FIELD = 9;
      DAY_OF_WEEK_IN_MONTH_FIELD = 11;
      DAY_OF_YEAR_FIELD = 10;
      DEFAULT = 2;
      ERA_FIELD = 0;
      FULL = 0;
      HOUR0_FIELD = 16;
      HOUR1_FIELD = 15;
      HOUR_OF_DAY0_FIELD = 5;
      HOUR_OF_DAY1_FIELD = 4;
      LONG = 1;
      MEDIUM = 2;
      MILLISECOND_FIELD = 8;
      MINUTE_FIELD = 6;
      MONTH_FIELD = 2;
      SECOND_FIELD = 7;
      SHORT = 3;
      TIMEZONE_FIELD = 17;
      WEEK_OF_MONTH_FIELD = 13;
      WEEK_OF_YEAR_FIELD = 12;
      YEAR_FIELD = 1;
  strict protected
    var
      fcalendar: JUCalendar; external name 'calendar';
      fnumberFormat: JTNumberFormat; external name 'numberFormat';
  strict protected
    constructor create(); overload;
  public
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function format(para1: JLObject; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; final;
    function format(para1: JUDate): JLString; overload; virtual; final;
    function format(para1: JUDate; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; abstract;
    class function getAvailableLocales(): Arr1JULocale; static; overload;
    function getCalendar(): JUCalendar; overload; virtual;
    class function getDateInstance(): JTDateFormat; static; overload; final;
    class function getDateInstance(para1: jint): JTDateFormat; static; overload; final;
    class function getDateInstance(para1: jint; para2: JULocale): JTDateFormat; static; overload; final;
    class function getDateTimeInstance(): JTDateFormat; static; overload; final;
    class function getDateTimeInstance(para1: jint; para2: jint): JTDateFormat; static; overload; final;
    class function getDateTimeInstance(para1: jint; para2: jint; para3: JULocale): JTDateFormat; static; overload; final;
    class function getInstance(): JTDateFormat; static; overload; final;
    function getNumberFormat(): JTNumberFormat; overload; virtual;
    class function getTimeInstance(): JTDateFormat; static; overload; final;
    class function getTimeInstance(para1: jint): JTDateFormat; static; overload; final;
    class function getTimeInstance(para1: jint; para2: JULocale): JTDateFormat; static; overload; final;
    function getTimeZone(): JUTimeZone; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function isLenient(): jboolean; overload; virtual;
    function parse(para1: JLString): JUDate; overload; virtual;  // throws java.text.ParseException
    function parse(para1: JLString; para2: JTParsePosition): JUDate; overload; virtual; abstract;
    function parseObject(para1: JLString; para2: JTParsePosition): JLObject; overload; virtual;
    procedure setCalendar(para1: JUCalendar); overload; virtual;
    procedure setLenient(para1: jboolean); overload; virtual;
    procedure setNumberFormat(para1: JTNumberFormat); overload; virtual;
    procedure setTimeZone(para1: JUTimeZone); overload; virtual;
  end;

  JTFieldPosition = class external 'java.text' name 'FieldPosition' (JLObject)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: JTFormat.InnerField); overload;
    constructor create(para1: JTFormat.InnerField; para2: jint); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function getBeginIndex(): jint; overload; virtual;
    function getEndIndex(): jint; overload; virtual;
    function getField(): jint; overload; virtual;
    function getFieldAttribute(): JTFormat.InnerField; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure setBeginIndex(para1: jint); overload; virtual;
    procedure setEndIndex(para1: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JTMessageFormat = class external 'java.text' name 'MessageFormat' (JTFormat)
  public
    type
      InnerField = class;
      Arr1InnerField = array of InnerField;
      Arr2InnerField = array of Arr1InnerField;
      Arr3InnerField = array of Arr2InnerField;
      InnerField = class external 'java.text' name 'Field' (JTFormat.InnerField)
      public
        final class var
          fARGUMENT: JTMessageFormat.InnerField; external name 'ARGUMENT';
      strict protected
        constructor create(para1: JLString); overload;
      end;

  public
    constructor create(para1: JLString; para2: JULocale); overload;
    constructor create(para1: JLString); overload;
    procedure applyPattern(para1: JLString); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function formatToCharacterIterator(para1: JLObject): JTAttributedCharacterIterator; overload; virtual;
    function format(para1: Arr1JLObject; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; final;
    function format(var para1: array of JLObject; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; final;
    function format(para1: JLObject; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; final;
    class function format(para1: JLString; para2: Arr1JLObject): JLString; static; overload;
    class function format(para1: JLString; const para2: array of JLObject): JLString; static; overload;
    function getFormats(): Arr1JTFormat; overload; virtual;
    function getFormatsByArgumentIndex(): Arr1JTFormat; overload; virtual;
    procedure setFormatByArgumentIndex(para1: jint; para2: JTFormat); overload; virtual;
    procedure setFormatsByArgumentIndex(para1: Arr1JTFormat); overload; virtual;
    procedure setFormatsByArgumentIndex(var para1: array of JTFormat); overload; virtual;
    function getLocale(): JULocale; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function parse(para1: JLString): Arr1JLObject; overload; virtual;  // throws java.text.ParseException
    function parse(para1: JLString; para2: JTParsePosition): Arr1JLObject; overload; virtual;
    function parseObject(para1: JLString; para2: JTParsePosition): JLObject; overload; virtual;
    procedure setFormat(para1: jint; para2: JTFormat); overload; virtual;
    procedure setFormats(para1: Arr1JTFormat); overload; virtual;
    procedure setFormats(var para1: array of JTFormat); overload; virtual;
    procedure setLocale(para1: JULocale); overload; virtual;
    function toPattern(): JLString; overload; virtual;
  end;

  JTNumberFormat = class abstract external 'java.text' name 'NumberFormat' (JTFormat)
  public
    type
      InnerField = class;
      Arr1InnerField = array of InnerField;
      Arr2InnerField = array of Arr1InnerField;
      Arr3InnerField = array of Arr2InnerField;
      InnerField = class external 'java.text' name 'Field' (JTFormat.InnerField)
      public
        final class var
          fCURRENCY: JTNumberFormat.InnerField; external name 'CURRENCY';
          fDECIMAL_SEPARATOR: JTNumberFormat.InnerField; external name 'DECIMAL_SEPARATOR';
          fEXPONENT: JTNumberFormat.InnerField; external name 'EXPONENT';
          fEXPONENT_SIGN: JTNumberFormat.InnerField; external name 'EXPONENT_SIGN';
          fEXPONENT_SYMBOL: JTNumberFormat.InnerField; external name 'EXPONENT_SYMBOL';
          fFRACTION: JTNumberFormat.InnerField; external name 'FRACTION';
          fGROUPING_SEPARATOR: JTNumberFormat.InnerField; external name 'GROUPING_SEPARATOR';
          fINTEGER: JTNumberFormat.InnerField; external name 'INTEGER';
          fPERCENT: JTNumberFormat.InnerField; external name 'PERCENT';
          fPERMILLE: JTNumberFormat.InnerField; external name 'PERMILLE';
          fSIGN: JTNumberFormat.InnerField; external name 'SIGN';
      strict protected
        constructor create(para1: JLString); overload;
      end;

  public
    const
      FRACTION_FIELD = 1;
      INTEGER_FIELD = 0;
  strict protected
    constructor create(); overload;
  public
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function format(para1: jdouble): JLString; overload; virtual; final;
    function format(para1: jdouble; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; abstract;
    function format(para1: jlong): JLString; overload; virtual; final;
    function format(para1: jlong; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; abstract;
    function format(para1: JLObject; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual;
    class function getAvailableLocales(): Arr1JULocale; static; overload;
    function getCurrency(): JUCurrency; overload; virtual;
    class function getCurrencyInstance(): JTNumberFormat; static; overload; final;
    class function getCurrencyInstance(para1: JULocale): JTNumberFormat; static; overload;
    class function getIntegerInstance(): JTNumberFormat; static; overload; final;
    class function getIntegerInstance(para1: JULocale): JTNumberFormat; static; overload;
    class function getInstance(): JTNumberFormat; static; overload; final;
    class function getInstance(para1: JULocale): JTNumberFormat; static; overload;
    function getMaximumFractionDigits(): jint; overload; virtual;
    function getMaximumIntegerDigits(): jint; overload; virtual;
    function getMinimumFractionDigits(): jint; overload; virtual;
    function getMinimumIntegerDigits(): jint; overload; virtual;
    class function getNumberInstance(): JTNumberFormat; static; overload; final;
    class function getNumberInstance(para1: JULocale): JTNumberFormat; static; overload;
    class function getPercentInstance(): JTNumberFormat; static; overload; final;
    class function getPercentInstance(para1: JULocale): JTNumberFormat; static; overload;
    function hashCode(): jint; overload; virtual;
    function isGroupingUsed(): jboolean; overload; virtual;
    function isParseIntegerOnly(): jboolean; overload; virtual;
    function parse(para1: JLString): JLNumber; overload; virtual;  // throws java.text.ParseException
    function parse(para1: JLString; para2: JTParsePosition): JLNumber; overload; virtual; abstract;
    function parseObject(para1: JLString; para2: JTParsePosition): JLObject; overload; virtual; final;
    procedure setCurrency(para1: JUCurrency); overload; virtual;
    procedure setGroupingUsed(para1: jboolean); overload; virtual;
    procedure setMaximumFractionDigits(para1: jint); overload; virtual;
    procedure setMaximumIntegerDigits(para1: jint); overload; virtual;
    procedure setMinimumFractionDigits(para1: jint); overload; virtual;
    procedure setMinimumIntegerDigits(para1: jint); overload; virtual;
    procedure setParseIntegerOnly(para1: jboolean); overload; virtual;
    function getRoundingMode(): JMRoundingMode; overload; virtual;
    procedure setRoundingMode(para1: JMRoundingMode); overload; virtual;
  end;

  JSIRSAMultiPrimePrivateCrtKey = interface external 'java.security.interfaces' name 'RSAMultiPrimePrivateCrtKey' (JSIRSAPrivateKey)
    const
      serialVersionUID = jlong(618058533534628008);
    function getCrtCoefficient(): JMBigInteger; overload;
    function getOtherPrimeInfo(): Arr1JSSRSAOtherPrimeInfo; overload;
    function getPrimeP(): JMBigInteger; overload;
    function getPrimeQ(): JMBigInteger; overload;
    function getPrimeExponentP(): JMBigInteger; overload;
    function getPrimeExponentQ(): JMBigInteger; overload;
    function getPublicExponent(): JMBigInteger; overload;
  end;

  JSIRSAPrivateCrtKey = interface external 'java.security.interfaces' name 'RSAPrivateCrtKey' (JSIRSAPrivateKey)
    const
      serialVersionUID = jlong(-5682214253527700368);
    function getCrtCoefficient(): JMBigInteger; overload;
    function getPrimeP(): JMBigInteger; overload;
    function getPrimeQ(): JMBigInteger; overload;
    function getPrimeExponentP(): JMBigInteger; overload;
    function getPrimeExponentQ(): JMBigInteger; overload;
    function getPublicExponent(): JMBigInteger; overload;
  end;

  ATSpannableStringBuilder = class external 'android.text' name 'SpannableStringBuilder' (JLObject, JLCharSequence, ATGetChars, ATSpannable, ATEditable, JLAppendable)
  public
    constructor create(); overload;
    constructor create(para1: JLCharSequence); overload;
    constructor create(para1: JLCharSequence; para2: jint; para3: jint); overload;
    class function valueOf(para1: JLCharSequence): ATSpannableStringBuilder; static; overload;
    function charAt(para1: jint): jchar; overload; virtual;
    function length(): jint; overload; virtual;
    function insert(para1: jint; para2: JLCharSequence; para3: jint; para4: jint): ATSpannableStringBuilder; overload; virtual;
    function insert(para1: jint; para2: JLCharSequence): ATSpannableStringBuilder; overload; virtual;
    function delete(para1: jint; para2: jint): ATSpannableStringBuilder; overload; virtual;
    procedure clear(); overload; virtual;
    procedure clearSpans(); overload; virtual;
    function append(para1: JLCharSequence): ATSpannableStringBuilder; overload; virtual;
    function append(para1: JLCharSequence; para2: JLObject; para3: jint): ATSpannableStringBuilder; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): ATSpannableStringBuilder; overload; virtual;
    function append(para1: jchar): ATSpannableStringBuilder; overload; virtual;
    function replace(para1: jint; para2: jint; para3: JLCharSequence): ATSpannableStringBuilder; overload; virtual;
    function replace(para1: jint; para2: jint; para3: JLCharSequence; para4: jint; para5: jint): ATSpannableStringBuilder; overload; virtual;
    procedure setSpan(para1: JLObject; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure removeSpan(para1: JLObject); overload; virtual;
    function getSpanStart(para1: JLObject): jint; overload; virtual;
    function getSpanEnd(para1: JLObject): jint; overload; virtual;
    function getSpanFlags(para1: JLObject): jint; overload; virtual;
    function getSpans(para1: jint; para2: jint; para3: JLClass): Arr1JLObject; overload; virtual;
    function nextSpanTransition(para1: jint; para2: jint; para3: JLClass): jint; overload; virtual;
    function subSequence(para1: jint; para2: jint): JLCharSequence; overload; virtual;
    procedure getChars(para1: jint; para2: jint; para3: Arr1jchar; para4: jint); overload; virtual;
    procedure getChars(para1: jint; para2: jint; var para3: array of jchar; para4: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
    function getTextRunCursor(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: AGPaint): jint; overload; virtual;
    procedure setFilters(para1: Arr1ATInputFilter); overload; virtual;
    procedure setFilters(var para1: array of ATInputFilter); overload; virtual;
    function getFilters(): Arr1ATInputFilter; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function append(para1: jchar): ATEditable; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): ATEditable; overload; virtual;
    function append(para1: JLCharSequence): ATEditable; overload; virtual;
    function delete(para1: jint; para2: jint): ATEditable; overload; virtual;
    function insert(para1: jint; para2: JLCharSequence): ATEditable; overload; virtual;
    function insert(para1: jint; para2: JLCharSequence; para3: jint; para4: jint): ATEditable; overload; virtual;
    function replace(para1: jint; para2: jint; para3: JLCharSequence): ATEditable; overload; virtual;
    function replace(para1: jint; para2: jint; para3: JLCharSequence; para4: jint; para5: jint): ATEditable; overload; virtual;
    function append(para1: JLCharSequence; para2: jint; para3: jint): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: JLCharSequence): JLAppendable; overload; virtual;  // throws java.io.IOException
    function append(para1: jchar): JLAppendable; overload; virtual;  // throws java.io.IOException
  end;

  JUCConcurrentSkipListMap = class external 'java.util.concurrent' name 'ConcurrentSkipListMap' (JUAbstractMap, JUCConcurrentNavigableMap, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUComparator); overload;
    constructor create(para1: JUMap); overload;
    constructor create(para1: JUSortedMap); overload;
    function clone(): JUCConcurrentSkipListMap; overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function keySet(): JUNavigableSet; overload; virtual;
    function navigableKeySet(): JUNavigableSet; overload; virtual;
    function values(): JUCollection; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function descendingMap(): JUCConcurrentNavigableMap; overload; virtual;
    function descendingKeySet(): JUNavigableSet; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function putIfAbsent(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    function remove(para1: JLObject; para2: JLObject): jboolean; overload; virtual;
    function replace(para1: JLObject; para2: JLObject; para3: JLObject): jboolean; overload; virtual;
    function replace(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    function comparator(): JUComparator; overload; virtual;
    function firstKey(): JLObject; overload; virtual;
    function lastKey(): JLObject; overload; virtual;
    function subMap(para1: JLObject; para2: jboolean; para3: JLObject; para4: jboolean): JUCConcurrentNavigableMap; overload; virtual;
    function headMap(para1: JLObject; para2: jboolean): JUCConcurrentNavigableMap; overload; virtual;
    function tailMap(para1: JLObject; para2: jboolean): JUCConcurrentNavigableMap; overload; virtual;
    function subMap(para1: JLObject; para2: JLObject): JUCConcurrentNavigableMap; overload; virtual;
    function headMap(para1: JLObject): JUCConcurrentNavigableMap; overload; virtual;
    function tailMap(para1: JLObject): JUCConcurrentNavigableMap; overload; virtual;
    function lowerEntry(para1: JLObject): JUMap.InnerEntry; overload; virtual;
    function lowerKey(para1: JLObject): JLObject; overload; virtual;
    function floorEntry(para1: JLObject): JUMap.InnerEntry; overload; virtual;
    function floorKey(para1: JLObject): JLObject; overload; virtual;
    function ceilingEntry(para1: JLObject): JUMap.InnerEntry; overload; virtual;
    function ceilingKey(para1: JLObject): JLObject; overload; virtual;
    function higherEntry(para1: JLObject): JUMap.InnerEntry; overload; virtual;
    function higherKey(para1: JLObject): JLObject; overload; virtual;
    function firstEntry(): JUMap.InnerEntry; overload; virtual;
    function lastEntry(): JUMap.InnerEntry; overload; virtual;
    function pollFirstEntry(): JUMap.InnerEntry; overload; virtual;
    function pollLastEntry(): JUMap.InnerEntry; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
    function keySet(): JUSet; overload; virtual;
    function tailMap(para1: JLObject): JUSortedMap; overload; virtual;
    function headMap(para1: JLObject): JUSortedMap; overload; virtual;
    function subMap(para1: JLObject; para2: JLObject): JUSortedMap; overload; virtual;
    function tailMap(para1: JLObject; para2: jboolean): JUNavigableMap; overload; virtual;
    function headMap(para1: JLObject; para2: jboolean): JUNavigableMap; overload; virtual;
    function subMap(para1: JLObject; para2: jboolean; para3: JLObject; para4: jboolean): JUNavigableMap; overload; virtual;
    function descendingMap(): JUNavigableMap; overload; virtual;
  end;

  JULinkedList = class external 'java.util' name 'LinkedList' (JUAbstractSequentialList, JUList, JUDeque, JUQueue, JLCloneable, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    procedure add(para1: jint; para2: JLObject); overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function addAll(para1: jint; para2: JUCollection): jboolean; overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
    procedure addFirst(para1: JLObject); overload; virtual;
    procedure addLast(para1: JLObject); overload; virtual;
    procedure clear(); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function get(para1: jint): JLObject; overload; virtual;
    function getFirst(): JLObject; overload; virtual;
    function getLast(): JLObject; overload; virtual;
    function indexOf(para1: JLObject): jint; overload; virtual;
    function lastIndexOf(para1: JLObject): jint; overload; virtual;
    function listIterator(para1: jint): JUListIterator; overload; virtual;
    function remove(para1: jint): JLObject; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function removeFirst(): JLObject; overload; virtual;
    function removeLast(): JLObject; overload; virtual;
    function descendingIterator(): JUIterator; overload; virtual;
    function offerFirst(para1: JLObject): jboolean; overload; virtual;
    function offerLast(para1: JLObject): jboolean; overload; virtual;
    function peekFirst(): JLObject; overload; virtual;
    function peekLast(): JLObject; overload; virtual;
    function pollFirst(): JLObject; overload; virtual;
    function pollLast(): JLObject; overload; virtual;
    function pop(): JLObject; overload; virtual;
    procedure push(para1: JLObject); overload; virtual;
    function removeFirstOccurrence(para1: JLObject): jboolean; overload; virtual;
    function removeLastOccurrence(para1: JLObject): jboolean; overload; virtual;
    function &set(para1: jint; para2: JLObject): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    function poll(): JLObject; overload; virtual;
    function remove(): JLObject; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function element(): JLObject; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
  end;

  JUStack = class external 'java.util' name 'Stack' (JUVector)
  public
    constructor create(); overload;
    function empty(): jboolean; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function pop(): JLObject; overload; virtual;
    function push(para1: JLObject): JLObject; overload; virtual;
    function search(para1: JLObject): jint; overload; virtual;
  end;

  JUCLinkedBlockingDeque = class external 'java.util.concurrent' name 'LinkedBlockingDeque' (JUAbstractQueue, JUCBlockingDeque, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JUCollection); overload;
    procedure addFirst(para1: JLObject); overload; virtual;
    procedure addLast(para1: JLObject); overload; virtual;
    function offerFirst(para1: JLObject): jboolean; overload; virtual;
    function offerLast(para1: JLObject): jboolean; overload; virtual;
    procedure putFirst(para1: JLObject); overload; virtual;  // throws java.lang.InterruptedException
    procedure putLast(para1: JLObject); overload; virtual;  // throws java.lang.InterruptedException
    function offerFirst(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    function offerLast(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    function removeFirst(): JLObject; overload; virtual;
    function removeLast(): JLObject; overload; virtual;
    function pollFirst(): JLObject; overload; virtual;
    function pollLast(): JLObject; overload; virtual;
    function takeFirst(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function takeLast(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function pollFirst(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function pollLast(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function getFirst(): JLObject; overload; virtual;
    function getLast(): JLObject; overload; virtual;
    function peekFirst(): JLObject; overload; virtual;
    function peekLast(): JLObject; overload; virtual;
    function removeFirstOccurrence(para1: JLObject): jboolean; overload; virtual;
    function removeLastOccurrence(para1: JLObject): jboolean; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    procedure put(para1: JLObject); overload; virtual;  // throws java.lang.InterruptedException
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    function remove(): JLObject; overload; virtual;
    function poll(): JLObject; overload; virtual;
    function take(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function element(): JLObject; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function remainingCapacity(): jint; overload; virtual;
    function drainTo(para1: JUCollection): jint; overload; virtual;
    function drainTo(para1: JUCollection; para2: jint): jint; overload; virtual;
    procedure push(para1: JLObject); overload; virtual;
    function pop(): JLObject; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure clear(); overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function descendingIterator(): JUIterator; overload; virtual;
  end;

  ADSSQLiteCursor = class external 'android.database.sqlite' name 'SQLiteCursor' (ADAbstractWindowedCursor)
  public
    constructor create(para1: ADSSQLiteDatabase; para2: ADSSQLiteCursorDriver; para3: JLString; para4: ADSSQLiteQuery); overload;
    constructor create(para1: ADSSQLiteCursorDriver; para2: JLString; para3: ADSSQLiteQuery); overload;
    function getDatabase(): ADSSQLiteDatabase; overload; virtual;
    function onMove(para1: jint; para2: jint): jboolean; overload; virtual;
    function getCount(): jint; overload; virtual;
    function getColumnIndex(para1: JLString): jint; overload; virtual;
    function getColumnNames(): Arr1JLString; overload; virtual;
    procedure deactivate(); overload; virtual;
    procedure close(); overload; virtual;
    function requery(): jboolean; overload; virtual;
    procedure setWindow(para1: ADCursorWindow); overload; virtual;
    procedure setSelectionArguments(para1: Arr1JLString); overload; virtual;
    procedure setSelectionArguments(var para1: array of JLString); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  end;

  AAApplication = class external 'android.app' name 'Application' (ACContextWrapper, ACComponentCallbacks2)
  public
    type
      InnerOnProvideAssistDataListener = interface;
      Arr1InnerOnProvideAssistDataListener = array of InnerOnProvideAssistDataListener;
      Arr2InnerOnProvideAssistDataListener = array of Arr1InnerOnProvideAssistDataListener;
      Arr3InnerOnProvideAssistDataListener = array of Arr2InnerOnProvideAssistDataListener;
      InnerActivityLifecycleCallbacks = interface;
      Arr1InnerActivityLifecycleCallbacks = array of InnerActivityLifecycleCallbacks;
      Arr2InnerActivityLifecycleCallbacks = array of Arr1InnerActivityLifecycleCallbacks;
      Arr3InnerActivityLifecycleCallbacks = array of Arr2InnerActivityLifecycleCallbacks;
      InnerOnProvideAssistDataListener = interface external 'android.app' name 'OnProvideAssistDataListener' 
        procedure onProvideAssistData(para1: AAActivity; para2: AOBundle); overload;
      end;

      InnerActivityLifecycleCallbacks = interface external 'android.app' name 'ActivityLifecycleCallbacks' 
        procedure onActivityCreated(para1: AAActivity; para2: AOBundle); overload;
        procedure onActivityStarted(para1: AAActivity); overload;
        procedure onActivityResumed(para1: AAActivity); overload;
        procedure onActivityPaused(para1: AAActivity); overload;
        procedure onActivityStopped(para1: AAActivity); overload;
        procedure onActivitySaveInstanceState(para1: AAActivity; para2: AOBundle); overload;
        procedure onActivityDestroyed(para1: AAActivity); overload;
      end;

  public
    constructor create(); overload;
    procedure onCreate(); overload; virtual;
    procedure onTerminate(); overload; virtual;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    procedure onLowMemory(); overload; virtual;
    procedure onTrimMemory(para1: jint); overload; virtual;
    procedure registerComponentCallbacks(para1: ACComponentCallbacks); overload; virtual;
    procedure unregisterComponentCallbacks(para1: ACComponentCallbacks); overload; virtual;
    procedure registerActivityLifecycleCallbacks(para1: AAApplication.InnerActivityLifecycleCallbacks); overload; virtual;
    procedure unregisterActivityLifecycleCallbacks(para1: AAApplication.InnerActivityLifecycleCallbacks); overload; virtual;
    procedure registerOnProvideAssistDataListener(para1: AAApplication.InnerOnProvideAssistDataListener); overload; virtual;
    procedure unregisterOnProvideAssistDataListener(para1: AAApplication.InnerOnProvideAssistDataListener); overload; virtual;
  end;

  AAService = class abstract external 'android.app' name 'Service' (ACContextWrapper, ACComponentCallbacks2)
  public
    const
      START_CONTINUATION_MASK = 15;
      START_FLAG_REDELIVERY = 1;
      START_FLAG_RETRY = 2;
      START_NOT_STICKY = 2;
      START_REDELIVER_INTENT = 3;
      START_STICKY = 1;
      START_STICKY_COMPATIBILITY = 0;
  public
    constructor create(); overload;
    function getApplication(): AAApplication; overload; virtual; final;
    procedure onCreate(); overload; virtual;
    procedure onStart(para1: ACIntent; para2: jint); overload; virtual;
    function onStartCommand(para1: ACIntent; para2: jint; para3: jint): jint; overload; virtual;
    procedure onDestroy(); overload; virtual;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    procedure onLowMemory(); overload; virtual;
    procedure onTrimMemory(para1: jint); overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; abstract;
    function onUnbind(para1: ACIntent): jboolean; overload; virtual;
    procedure onRebind(para1: ACIntent); overload; virtual;
    procedure onTaskRemoved(para1: ACIntent); overload; virtual;
    procedure stopSelf(); overload; virtual; final;
    procedure stopSelf(para1: jint); overload; virtual; final;
    function stopSelfResult(para1: jint): jboolean; overload; virtual; final;
    procedure startForeground(para1: jint; para2: AANotification); overload; virtual; final;
    procedure stopForeground(para1: jboolean); overload; virtual; final;
  strict protected
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
  end;

  AABBackupAgent = class abstract external 'android.app.backup' name 'BackupAgent' (ACContextWrapper)
  public
    const
      TYPE_DIRECTORY = 2;
      TYPE_FILE = 1;
  public
    constructor create(); overload;
    procedure onCreate(); overload; virtual;
    procedure onDestroy(); overload; virtual;
    procedure onBackup(para1: AOParcelFileDescriptor; para2: AABBackupDataOutput; para3: AOParcelFileDescriptor); overload; virtual; abstract;  // throws java.io.IOException
    procedure onRestore(para1: AABBackupDataInput; para2: jint; para3: AOParcelFileDescriptor); overload; virtual; abstract;  // throws java.io.IOException
    procedure onFullBackup(para1: AABFullBackupDataOutput); overload; virtual;  // throws java.io.IOException
    procedure fullBackupFile(para1: JIFile; para2: AABFullBackupDataOutput); overload; virtual; final;
    procedure onRestoreFile(para1: AOParcelFileDescriptor; para2: jlong; para3: JIFile; para4: jint; para5: jlong; para6: jlong); overload; virtual;  // throws java.io.IOException
    procedure onRestoreFinished(); overload; virtual;
  end;

  ACMutableContextWrapper = class external 'android.content' name 'MutableContextWrapper' (ACContextWrapper)
  public
    constructor create(para1: ACContext); overload;
    procedure setBaseContext(para1: ACContext); overload; virtual;
  end;

  ATIsolatedContext = class external 'android.test' name 'IsolatedContext' (ACContextWrapper)
  public
    constructor create(para1: ACContentResolver; para2: ACContext); overload;
    function getAndClearBroadcastIntents(): JUList; overload; virtual;
    function getContentResolver(): ACContentResolver; overload; virtual;
    function bindService(para1: ACIntent; para2: ACServiceConnection; para3: jint): jboolean; overload; virtual;
    function registerReceiver(para1: ACBroadcastReceiver; para2: ACIntentFilter): ACIntent; overload; virtual;
    procedure unregisterReceiver(para1: ACBroadcastReceiver); overload; virtual;
    procedure sendBroadcast(para1: ACIntent); overload; virtual;
    procedure sendOrderedBroadcast(para1: ACIntent; para2: JLString); overload; virtual;
    function checkUriPermission(para1: ANUri; para2: JLString; para3: JLString; para4: jint; para5: jint; para6: jint): jint; overload; virtual;
    function checkUriPermission(para1: ANUri; para2: jint; para3: jint; para4: jint): jint; overload; virtual;
    function getSystemService(para1: JLString): JLObject; overload; virtual;
    function getFilesDir(): JIFile; overload; virtual;
  end;

  ATRenamingDelegatingContext = class external 'android.test' name 'RenamingDelegatingContext' (ACContextWrapper)
  public
    constructor create(para1: ACContext; para2: JLString); overload;
    constructor create(para1: ACContext; para2: ACContext; para3: JLString); overload;
    class function providerWithRenamedContext(para1: JLClass; para2: ACContext; para3: JLString): ACContentProvider; static; overload;  // throws java.lang.IllegalAccessException, java.lang.InstantiationException
    class function providerWithRenamedContext(para1: JLClass; para2: ACContext; para3: JLString; para4: jboolean): ACContentProvider; static; overload;  // throws java.lang.IllegalAccessException, java.lang.InstantiationException
    procedure makeExistingFilesAndDbsAccessible(); overload; virtual;
    function getDatabasePrefix(): JLString; overload; virtual;
    function openOrCreateDatabase(para1: JLString; para2: jint; para3: ADSSQLiteDatabase.InnerCursorFactory): ADSSQLiteDatabase; overload; virtual;
    function openOrCreateDatabase(para1: JLString; para2: jint; para3: ADSSQLiteDatabase.InnerCursorFactory; para4: ADDatabaseErrorHandler): ADSSQLiteDatabase; overload; virtual;
    function deleteDatabase(para1: JLString): jboolean; overload; virtual;
    function getDatabasePath(para1: JLString): JIFile; overload; virtual;
    function databaseList(): Arr1JLString; overload; virtual;
    function openFileInput(para1: JLString): JIFileInputStream; overload; virtual;  // throws java.io.FileNotFoundException
    function openFileOutput(para1: JLString; para2: jint): JIFileOutputStream; overload; virtual;  // throws java.io.FileNotFoundException
    function getFileStreamPath(para1: JLString): JIFile; overload; virtual;
    function deleteFile(para1: JLString): jboolean; overload; virtual;
    function fileList(): Arr1JLString; overload; virtual;
    function getCacheDir(): JIFile; overload; virtual;
  end;

  AVContextThemeWrapper = class external 'android.view' name 'ContextThemeWrapper' (ACContextWrapper)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: jint); overload;
  strict protected
    procedure attachBaseContext(para1: ACContext); overload; virtual;
  public
    procedure applyOverrideConfiguration(para1: ACRConfiguration); overload; virtual;
    function getResources(): ACRResources; overload; virtual;
    procedure setTheme(para1: jint); overload; virtual;
    function getTheme(): ACRResources.InnerTheme; overload; virtual;
    function getSystemService(para1: JLString): JLObject; overload; virtual;
  strict protected
    procedure onApplyThemeResource(para1: ACRResources.InnerTheme; para2: jint; para3: jboolean); overload; virtual;
  end;

  AGDBitmapDrawable = class external 'android.graphics.drawable' name 'BitmapDrawable' (AGDDrawable)
  public
    constructor create(); overload;
    constructor create(para1: ACRResources); overload;
    constructor create(para1: AGBitmap); overload;
    constructor create(para1: ACRResources; para2: AGBitmap); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: ACRResources; para2: JLString); overload;
    constructor create(para1: JIInputStream); overload;
    constructor create(para1: ACRResources; para2: JIInputStream); overload;
    function getPaint(): AGPaint; overload; virtual; final;
    function getBitmap(): AGBitmap; overload; virtual; final;
    procedure setTargetDensity(para1: AGCanvas); overload; virtual;
    procedure setTargetDensity(para1: AUDisplayMetrics); overload; virtual;
    procedure setTargetDensity(para1: jint); overload; virtual;
    function getGravity(): jint; overload; virtual;
    procedure setGravity(para1: jint); overload; virtual;
    procedure setMipMap(para1: jboolean); overload; virtual;
    function hasMipMap(): jboolean; overload; virtual;
    procedure setAntiAlias(para1: jboolean); overload; virtual;
    function hasAntiAlias(): jboolean; overload; virtual;
    procedure setFilterBitmap(para1: jboolean); overload; virtual;
    procedure setDither(para1: jboolean); overload; virtual;
    function getTileModeX(): AGShader.InnerTileMode; overload; virtual;
    function getTileModeY(): AGShader.InnerTileMode; overload; virtual;
    procedure setTileModeX(para1: AGShader.InnerTileMode); overload; virtual;
    procedure setTileModeY(para1: AGShader.InnerTileMode); overload; virtual; final;
    procedure setTileModeXY(para1: AGShader.InnerTileMode; para2: AGShader.InnerTileMode); overload; virtual;
    procedure setAutoMirrored(para1: jboolean); overload; virtual;
    function isAutoMirrored(): jboolean; overload; virtual; final;
    function getChangingConfigurations(): jint; overload; virtual;
  strict protected
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    procedure draw(para1: AGCanvas); overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    function getColorFilter(): AGColorFilter; overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
  public
    function isStateful(): jboolean; overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getOpacity(): jint; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual; final;
  end;

  AGDClipDrawable = class external 'android.graphics.drawable' name 'ClipDrawable' (AGDDrawable, AGDDrawable.InnerCallback)
  public
    const
      HORIZONTAL = 1;
      VERTICAL = 2;
  public
    constructor create(para1: AGDDrawable; para2: jint; para3: jint); overload;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    procedure scheduleDrawable(para1: AGDDrawable; para2: JLRunnable; para3: jlong); overload; virtual;
    procedure unscheduleDrawable(para1: AGDDrawable; para2: JLRunnable); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getOpacity(): jint; overload; virtual;
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    procedure draw(para1: AGCanvas); overload; virtual;
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
  end;

  AGDColorDrawable = class external 'android.graphics.drawable' name 'ColorDrawable' (AGDDrawable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    function getChangingConfigurations(): jint; overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getColor(): jint; overload; virtual;
    procedure setColor(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
  public
    function isStateful(): jboolean; overload; virtual;
    function getOpacity(): jint; overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
  end;

  AGDDrawableContainer = class external 'android.graphics.drawable' name 'DrawableContainer' (AGDDrawable, AGDDrawable.InnerCallback)
  public
    type
      InnerDrawableContainerState = class;
      Arr1InnerDrawableContainerState = array of InnerDrawableContainerState;
      Arr2InnerDrawableContainerState = array of Arr1InnerDrawableContainerState;
      Arr3InnerDrawableContainerState = array of Arr2InnerDrawableContainerState;
      InnerDrawableContainerState = class abstract external 'android.graphics.drawable' name 'DrawableContainerState' (AGDDrawable.InnerConstantState)
      public
        function getChangingConfigurations(): jint; overload; virtual;
        function addChild(para1: AGDDrawable): jint; overload; virtual; final;
        function getChildCount(): jint; overload; virtual; final;
        function getChildren(): Arr1AGDDrawable; overload; virtual; final;
        function getChild(para1: jint): AGDDrawable; overload; virtual; final;
        function canApplyTheme(): jboolean; overload; virtual;
        procedure setVariablePadding(para1: jboolean); overload; virtual; final;
        function getConstantPadding(): AGRect; overload; virtual; final;
        procedure setConstantSize(para1: jboolean); overload; virtual; final;
        function isConstantSize(): jboolean; overload; virtual; final;
        function getConstantWidth(): jint; overload; virtual; final;
        function getConstantHeight(): jint; overload; virtual; final;
        function getConstantMinimumWidth(): jint; overload; virtual; final;
        function getConstantMinimumHeight(): jint; overload; virtual; final;
      strict protected
        procedure computeConstantSize(); overload; virtual;
      public
        procedure setEnterFadeDuration(para1: jint); overload; virtual; final;
        function getEnterFadeDuration(): jint; overload; virtual; final;
        procedure setExitFadeDuration(para1: jint); overload; virtual; final;
        function getExitFadeDuration(): jint; overload; virtual; final;
        function getOpacity(): jint; overload; virtual; final;
        function isStateful(): jboolean; overload; virtual; final;
        procedure growArray(para1: jint; para2: jint); overload; virtual;
        function canConstantState(): jboolean; overload; virtual;
      end;

  public
    constructor create(); overload;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setDither(para1: jboolean); overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    procedure setEnterFadeDuration(para1: jint); overload; virtual;
    procedure setExitFadeDuration(para1: jint); overload; virtual;
  strict protected
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    function isStateful(): jboolean; overload; virtual;
    procedure setAutoMirrored(para1: jboolean); overload; virtual;
    function isAutoMirrored(): jboolean; overload; virtual;
    procedure jumpToCurrentState(); overload; virtual;
    procedure setHotspot(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setHotspotBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
  public
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getMinimumWidth(): jint; overload; virtual;
    function getMinimumHeight(): jint; overload; virtual;
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    procedure scheduleDrawable(para1: AGDDrawable; para2: JLRunnable; para3: jlong); overload; virtual;
    procedure unscheduleDrawable(para1: AGDDrawable; para2: JLRunnable); overload; virtual;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    function getOpacity(): jint; overload; virtual;
    function selectDrawable(para1: jint): jboolean; overload; virtual;
    function getCurrent(): AGDDrawable; overload; virtual;
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
  strict protected
    procedure setConstantState(para1: AGDDrawableContainer.InnerDrawableContainerState); overload; virtual;
  end;

  AGDGradientDrawable = class external 'android.graphics.drawable' name 'GradientDrawable' (AGDDrawable)
  public
    type
      InnerOrientation = class;
      Arr1InnerOrientation = array of InnerOrientation;
      Arr2InnerOrientation = array of Arr1InnerOrientation;
      Arr3InnerOrientation = array of Arr2InnerOrientation;
      InnerOrientation = class sealed external 'android.graphics.drawable' name 'Orientation' (JLEnum)
      public
        final class var
          fBL_TR: AGDGradientDrawable.InnerOrientation; external name 'BL_TR';
          fBOTTOM_TOP: AGDGradientDrawable.InnerOrientation; external name 'BOTTOM_TOP';
          fBR_TL: AGDGradientDrawable.InnerOrientation; external name 'BR_TL';
          fLEFT_RIGHT: AGDGradientDrawable.InnerOrientation; external name 'LEFT_RIGHT';
          fRIGHT_LEFT: AGDGradientDrawable.InnerOrientation; external name 'RIGHT_LEFT';
          fTL_BR: AGDGradientDrawable.InnerOrientation; external name 'TL_BR';
          fTOP_BOTTOM: AGDGradientDrawable.InnerOrientation; external name 'TOP_BOTTOM';
          fTR_BL: AGDGradientDrawable.InnerOrientation; external name 'TR_BL';
      public
        class function values(): AGDGradientDrawable.Arr1InnerOrientation; static; overload;
        class function valueOf(para1: JLString): AGDGradientDrawable.InnerOrientation; static; overload;
      end;

  public
    const
      LINE = 2;
      LINEAR_GRADIENT = 0;
      OVAL = 1;
      RADIAL_GRADIENT = 1;
      RECTANGLE = 0;
      RING = 3;
      SWEEP_GRADIENT = 2;
  public
    constructor create(); overload;
    constructor create(para1: AGDGradientDrawable.InnerOrientation; para2: Arr1jint); overload;
    constructor create(para1: AGDGradientDrawable.InnerOrientation; const para2: array of jint); overload;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    procedure setCornerRadii(para1: Arr1jfloat); overload; virtual;
    procedure setCornerRadii(var para1: array of jfloat); overload; virtual;
    procedure setCornerRadius(para1: jfloat); overload; virtual;
    procedure setStroke(para1: jint; para2: jint); overload; virtual;
    procedure setStroke(para1: jint; para2: ACRColorStateList); overload; virtual;
    procedure setStroke(para1: jint; para2: jint; para3: jfloat; para4: jfloat); overload; virtual;
    procedure setStroke(para1: jint; para2: ACRColorStateList; para3: jfloat; para4: jfloat); overload; virtual;
    procedure setSize(para1: jint; para2: jint); overload; virtual;
    procedure setShape(para1: jint); overload; virtual;
    procedure setGradientType(para1: jint); overload; virtual;
    procedure setGradientCenter(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setGradientRadius(para1: jfloat); overload; virtual;
    function getGradientRadius(): jfloat; overload; virtual;
    procedure setUseLevel(para1: jboolean); overload; virtual;
    function getOrientation(): AGDGradientDrawable.InnerOrientation; overload; virtual;
    procedure setOrientation(para1: AGDGradientDrawable.InnerOrientation); overload; virtual;
    procedure setColors(para1: Arr1jint); overload; virtual;
    procedure setColors(var para1: array of jint); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    procedure setColor(para1: jint); overload; virtual;
    procedure setColor(para1: ACRColorStateList); overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
  public
    function isStateful(): jboolean; overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setDither(para1: jboolean); overload; virtual;
    function getColorFilter(): AGColorFilter; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    function getOpacity(): jint; overload; virtual;
  strict protected
    procedure onBoundsChange(para1: AGRect); overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
  public
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AGDInsetDrawable = class external 'android.graphics.drawable' name 'InsetDrawable' (AGDDrawable, AGDDrawable.InnerCallback)
  public
    constructor create(para1: AGDDrawable; para2: jint); overload;
    constructor create(para1: AGDDrawable; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    procedure scheduleDrawable(para1: AGDDrawable; para2: JLRunnable; para3: jlong); overload; virtual;
    procedure unscheduleDrawable(para1: AGDDrawable; para2: JLRunnable); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    procedure setHotspot(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setHotspotBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getOpacity(): jint; overload; virtual;
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
    function getDrawable(): AGDDrawable; overload; virtual;
  end;

  AGDLayerDrawable = class external 'android.graphics.drawable' name 'LayerDrawable' (AGDDrawable, AGDDrawable.InnerCallback)
  public
    const
      PADDING_MODE_NEST = 0;
      PADDING_MODE_STACK = 1;
  public
    constructor create(para1: Arr1AGDDrawable); overload;
    constructor create(const para1: array of AGDDrawable); overload;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    function findDrawableByLayerId(para1: jint): AGDDrawable; overload; virtual;
    procedure setId(para1: jint; para2: jint); overload; virtual;
    function getNumberOfLayers(): jint; overload; virtual;
    function getDrawable(para1: jint): AGDDrawable; overload; virtual;
    function getId(para1: jint): jint; overload; virtual;
    function setDrawableByLayerId(para1: jint; para2: AGDDrawable): jboolean; overload; virtual;
    procedure setLayerInset(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure setPaddingMode(para1: jint); overload; virtual;
    function getPaddingMode(): jint; overload; virtual;
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    procedure scheduleDrawable(para1: AGDDrawable; para2: JLRunnable; para3: jlong); overload; virtual;
    procedure unscheduleDrawable(para1: AGDDrawable; para2: JLRunnable); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    procedure setHotspot(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setHotspotBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    procedure setDither(para1: jboolean); overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    procedure setOpacity(para1: jint); overload; virtual;
    function getOpacity(): jint; overload; virtual;
    procedure setAutoMirrored(para1: jboolean); overload; virtual;
    function isAutoMirrored(): jboolean; overload; virtual;
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AGDNinePatchDrawable = class external 'android.graphics.drawable' name 'NinePatchDrawable' (AGDDrawable)
  public
    constructor create(para1: AGBitmap; para2: Arr1jbyte; para3: AGRect; para4: JLString); overload;
    constructor create(para1: AGBitmap; const para2: array of jbyte; para3: AGRect; para4: JLString); overload;
    constructor create(para1: ACRResources; para2: AGBitmap; para3: Arr1jbyte; para4: AGRect; para5: JLString); overload;
    constructor create(para1: ACRResources; para2: AGBitmap; const para3: array of jbyte; para4: AGRect; para5: JLString); overload;
    constructor create(para1: AGNinePatch); overload;
    constructor create(para1: ACRResources; para2: AGNinePatch); overload;
    procedure setTargetDensity(para1: AGCanvas); overload; virtual;
    procedure setTargetDensity(para1: AUDisplayMetrics); overload; virtual;
    procedure setTargetDensity(para1: jint); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    procedure setDither(para1: jboolean); overload; virtual;
    procedure setAutoMirrored(para1: jboolean); overload; virtual;
    function isAutoMirrored(): jboolean; overload; virtual;
    procedure setFilterBitmap(para1: jboolean); overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    function getPaint(): AGPaint; overload; virtual;
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getMinimumWidth(): jint; overload; virtual;
    function getMinimumHeight(): jint; overload; virtual;
    function getOpacity(): jint; overload; virtual;
    function getTransparentRegion(): AGRegion; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
  public
    function isStateful(): jboolean; overload; virtual;
  end;

  AGDPictureDrawable = class external 'android.graphics.drawable' name 'PictureDrawable' (AGDDrawable)
  public
    constructor create(para1: AGPicture); overload;
    function getPicture(): AGPicture; overload; virtual;
    procedure setPicture(para1: AGPicture); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getOpacity(): jint; overload; virtual;
    procedure setFilterBitmap(para1: jboolean); overload; virtual;
    procedure setDither(para1: jboolean); overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
  end;

  AGDRotateDrawable = class external 'android.graphics.drawable' name 'RotateDrawable' (AGDDrawable, AGDDrawable.InnerCallback)
  public
    constructor create(); overload;
    procedure draw(para1: AGCanvas); overload; virtual;
    procedure setDrawable(para1: AGDDrawable); overload; virtual;
    function getDrawable(): AGDDrawable; overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getOpacity(): jint; overload; virtual;
    procedure setFromDegrees(para1: jfloat); overload; virtual;
    function getFromDegrees(): jfloat; overload; virtual;
    procedure setToDegrees(para1: jfloat); overload; virtual;
    function getToDegrees(): jfloat; overload; virtual;
    procedure setPivotX(para1: jfloat); overload; virtual;
    function getPivotX(): jfloat; overload; virtual;
    procedure setPivotXRelative(para1: jboolean); overload; virtual;
    function isPivotXRelative(): jboolean; overload; virtual;
    procedure setPivotY(para1: jfloat); overload; virtual;
    function getPivotY(): jfloat; overload; virtual;
    procedure setPivotYRelative(para1: jboolean); overload; virtual;
    function isPivotYRelative(): jboolean; overload; virtual;
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    procedure scheduleDrawable(para1: AGDDrawable; para2: JLRunnable; para3: jlong); overload; virtual;
    procedure unscheduleDrawable(para1: AGDDrawable; para2: JLRunnable); overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AGDScaleDrawable = class external 'android.graphics.drawable' name 'ScaleDrawable' (AGDDrawable, AGDDrawable.InnerCallback)
  public
    constructor create(para1: AGDDrawable; para2: jint; para3: jfloat; para4: jfloat); overload;
    function getDrawable(): AGDDrawable; overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    procedure scheduleDrawable(para1: AGDDrawable; para2: JLRunnable; para3: jlong); overload; virtual;
    procedure unscheduleDrawable(para1: AGDDrawable; para2: JLRunnable); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getOpacity(): jint; overload; virtual;
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AGDShapeDrawable = class external 'android.graphics.drawable' name 'ShapeDrawable' (AGDDrawable)
  public
    type
      InnerShaderFactory = class;
      Arr1InnerShaderFactory = array of InnerShaderFactory;
      Arr2InnerShaderFactory = array of Arr1InnerShaderFactory;
      Arr3InnerShaderFactory = array of Arr2InnerShaderFactory;
      InnerShaderFactory = class abstract external 'android.graphics.drawable' name 'ShaderFactory' (JLObject)
      public
        constructor create(); overload;
        function resize(para1: jint; para2: jint): AGShader; overload; virtual; abstract;
      end;

  public
    constructor create(); overload;
    constructor create(para1: AGDSShape); overload;
    function getShape(): AGDSShape; overload; virtual;
    procedure setShape(para1: AGDSShape); overload; virtual;
    procedure setShaderFactory(para1: AGDShapeDrawable.InnerShaderFactory); overload; virtual;
    function getShaderFactory(): AGDShapeDrawable.InnerShaderFactory; overload; virtual;
    function getPaint(): AGPaint; overload; virtual;
    procedure setPadding(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setPadding(para1: AGRect); overload; virtual;
    procedure setIntrinsicWidth(para1: jint); overload; virtual;
    procedure setIntrinsicHeight(para1: jint); overload; virtual;
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function getPadding(para1: AGRect): jboolean; overload; virtual;
  strict protected
    procedure onDraw(para1: AGDSShape; para2: AGCanvas; para3: AGPaint); overload; virtual;
  public
    procedure draw(para1: AGCanvas); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    function getOpacity(): jint; overload; virtual;
    procedure setDither(para1: jboolean); overload; virtual;
  strict protected
    procedure onBoundsChange(para1: AGRect); overload; virtual;
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
  public
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function inflateTag(para1: JLString; para2: ACRResources; para3: OXVXmlPullParser; para4: AUAttributeSet): jboolean; overload; virtual;
  public
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AVView = class external 'android.view' name 'View' (JLObject, AGDDrawable.InnerCallback, AVKeyEvent.InnerCallback, AVAAccessibilityEventSource)
  public
    type
      InnerAccessibilityDelegate = class;
      Arr1InnerAccessibilityDelegate = array of InnerAccessibilityDelegate;
      Arr2InnerAccessibilityDelegate = array of Arr1InnerAccessibilityDelegate;
      Arr3InnerAccessibilityDelegate = array of Arr2InnerAccessibilityDelegate;
      InnerOnApplyWindowInsetsListener = interface;
      Arr1InnerOnApplyWindowInsetsListener = array of InnerOnApplyWindowInsetsListener;
      Arr2InnerOnApplyWindowInsetsListener = array of Arr1InnerOnApplyWindowInsetsListener;
      Arr3InnerOnApplyWindowInsetsListener = array of Arr2InnerOnApplyWindowInsetsListener;
      InnerOnAttachStateChangeListener = interface;
      Arr1InnerOnAttachStateChangeListener = array of InnerOnAttachStateChangeListener;
      Arr2InnerOnAttachStateChangeListener = array of Arr1InnerOnAttachStateChangeListener;
      Arr3InnerOnAttachStateChangeListener = array of Arr2InnerOnAttachStateChangeListener;
      InnerOnSystemUiVisibilityChangeListener = interface;
      Arr1InnerOnSystemUiVisibilityChangeListener = array of InnerOnSystemUiVisibilityChangeListener;
      Arr2InnerOnSystemUiVisibilityChangeListener = array of Arr1InnerOnSystemUiVisibilityChangeListener;
      Arr3InnerOnSystemUiVisibilityChangeListener = array of Arr2InnerOnSystemUiVisibilityChangeListener;
      InnerOnClickListener = interface;
      Arr1InnerOnClickListener = array of InnerOnClickListener;
      Arr2InnerOnClickListener = array of Arr1InnerOnClickListener;
      Arr3InnerOnClickListener = array of Arr2InnerOnClickListener;
      InnerOnFocusChangeListener = interface;
      Arr1InnerOnFocusChangeListener = array of InnerOnFocusChangeListener;
      Arr2InnerOnFocusChangeListener = array of Arr1InnerOnFocusChangeListener;
      Arr3InnerOnFocusChangeListener = array of Arr2InnerOnFocusChangeListener;
      InnerOnDragListener = interface;
      Arr1InnerOnDragListener = array of InnerOnDragListener;
      Arr2InnerOnDragListener = array of Arr1InnerOnDragListener;
      Arr3InnerOnDragListener = array of Arr2InnerOnDragListener;
      InnerOnLongClickListener = interface;
      Arr1InnerOnLongClickListener = array of InnerOnLongClickListener;
      Arr2InnerOnLongClickListener = array of Arr1InnerOnLongClickListener;
      Arr3InnerOnLongClickListener = array of Arr2InnerOnLongClickListener;
      InnerOnGenericMotionListener = interface;
      Arr1InnerOnGenericMotionListener = array of InnerOnGenericMotionListener;
      Arr2InnerOnGenericMotionListener = array of Arr1InnerOnGenericMotionListener;
      Arr3InnerOnGenericMotionListener = array of Arr2InnerOnGenericMotionListener;
      InnerOnHoverListener = interface;
      Arr1InnerOnHoverListener = array of InnerOnHoverListener;
      Arr2InnerOnHoverListener = array of Arr1InnerOnHoverListener;
      Arr3InnerOnHoverListener = array of Arr2InnerOnHoverListener;
      InnerOnTouchListener = interface;
      Arr1InnerOnTouchListener = array of InnerOnTouchListener;
      Arr2InnerOnTouchListener = array of Arr1InnerOnTouchListener;
      Arr3InnerOnTouchListener = array of Arr2InnerOnTouchListener;
      InnerOnKeyListener = interface;
      Arr1InnerOnKeyListener = array of InnerOnKeyListener;
      Arr2InnerOnKeyListener = array of Arr1InnerOnKeyListener;
      Arr3InnerOnKeyListener = array of Arr2InnerOnKeyListener;
      InnerMeasureSpec = class;
      Arr1InnerMeasureSpec = array of InnerMeasureSpec;
      Arr2InnerMeasureSpec = array of Arr1InnerMeasureSpec;
      Arr3InnerMeasureSpec = array of Arr2InnerMeasureSpec;
      InnerDragShadowBuilder = class;
      Arr1InnerDragShadowBuilder = array of InnerDragShadowBuilder;
      Arr2InnerDragShadowBuilder = array of Arr1InnerDragShadowBuilder;
      Arr3InnerDragShadowBuilder = array of Arr2InnerDragShadowBuilder;
      InnerOnLayoutChangeListener = interface;
      Arr1InnerOnLayoutChangeListener = array of InnerOnLayoutChangeListener;
      Arr2InnerOnLayoutChangeListener = array of Arr1InnerOnLayoutChangeListener;
      Arr3InnerOnLayoutChangeListener = array of Arr2InnerOnLayoutChangeListener;
      InnerBaseSavedState = class;
      Arr1InnerBaseSavedState = array of InnerBaseSavedState;
      Arr2InnerBaseSavedState = array of Arr1InnerBaseSavedState;
      Arr3InnerBaseSavedState = array of Arr2InnerBaseSavedState;
      InnerOnCreateContextMenuListener = interface;
      Arr1InnerOnCreateContextMenuListener = array of InnerOnCreateContextMenuListener;
      Arr2InnerOnCreateContextMenuListener = array of Arr1InnerOnCreateContextMenuListener;
      Arr3InnerOnCreateContextMenuListener = array of Arr2InnerOnCreateContextMenuListener;
      InnerAccessibilityDelegate = class external 'android.view' name 'AccessibilityDelegate' (JLObject)
      public
        constructor create(); overload;
        procedure sendAccessibilityEvent(para1: AVView; para2: jint); overload; virtual;
        function performAccessibilityAction(para1: AVView; para2: jint; para3: AOBundle): jboolean; overload; virtual;
        procedure sendAccessibilityEventUnchecked(para1: AVView; para2: AVAAccessibilityEvent); overload; virtual;
        function dispatchPopulateAccessibilityEvent(para1: AVView; para2: AVAAccessibilityEvent): jboolean; overload; virtual;
        procedure onPopulateAccessibilityEvent(para1: AVView; para2: AVAAccessibilityEvent); overload; virtual;
        procedure onInitializeAccessibilityEvent(para1: AVView; para2: AVAAccessibilityEvent); overload; virtual;
        procedure onInitializeAccessibilityNodeInfo(para1: AVView; para2: AVAAccessibilityNodeInfo); overload; virtual;
        function onRequestSendAccessibilityEvent(para1: AVViewGroup; para2: AVView; para3: AVAAccessibilityEvent): jboolean; overload; virtual;
        function getAccessibilityNodeProvider(para1: AVView): AVAAccessibilityNodeProvider; overload; virtual;
      end;

      InnerOnApplyWindowInsetsListener = interface external 'android.view' name 'OnApplyWindowInsetsListener' 
        function onApplyWindowInsets(para1: AVView; para2: AVWindowInsets): AVWindowInsets; overload;
      end;

      InnerOnAttachStateChangeListener = interface external 'android.view' name 'OnAttachStateChangeListener' 
        procedure onViewAttachedToWindow(para1: AVView); overload;
        procedure onViewDetachedFromWindow(para1: AVView); overload;
      end;

      InnerOnSystemUiVisibilityChangeListener = interface external 'android.view' name 'OnSystemUiVisibilityChangeListener' 
        procedure onSystemUiVisibilityChange(para1: jint); overload;
      end;

      InnerOnClickListener = interface external 'android.view' name 'OnClickListener' 
        procedure onClick(para1: AVView); overload;
      end;

      InnerOnFocusChangeListener = interface external 'android.view' name 'OnFocusChangeListener' 
        procedure onFocusChange(para1: AVView; para2: jboolean); overload;
      end;

      InnerOnDragListener = interface external 'android.view' name 'OnDragListener' 
        function onDrag(para1: AVView; para2: AVDragEvent): jboolean; overload;
      end;

      InnerOnLongClickListener = interface external 'android.view' name 'OnLongClickListener' 
        function onLongClick(para1: AVView): jboolean; overload;
      end;

      InnerOnGenericMotionListener = interface external 'android.view' name 'OnGenericMotionListener' 
        function onGenericMotion(para1: AVView; para2: AVMotionEvent): jboolean; overload;
      end;

      InnerOnHoverListener = interface external 'android.view' name 'OnHoverListener' 
        function onHover(para1: AVView; para2: AVMotionEvent): jboolean; overload;
      end;

      InnerOnTouchListener = interface external 'android.view' name 'OnTouchListener' 
        function onTouch(para1: AVView; para2: AVMotionEvent): jboolean; overload;
      end;

      InnerOnKeyListener = interface external 'android.view' name 'OnKeyListener' 
        function onKey(para1: AVView; para2: jint; para3: AVKeyEvent): jboolean; overload;
      end;

      InnerMeasureSpec = class external 'android.view' name 'MeasureSpec' (JLObject)
      public
        const
          AT_MOST = -2147483648;
          EXACTLY = 1073741824;
          UNSPECIFIED = 0;
      public
        constructor create(); overload;
        class function makeMeasureSpec(para1: jint; para2: jint): jint; static; overload;
        class function getMode(para1: jint): jint; static; overload;
        class function getSize(para1: jint): jint; static; overload;
        class function toString(para1: jint): JLString; static; overload;
      end;

      InnerDragShadowBuilder = class external 'android.view' name 'DragShadowBuilder' (JLObject)
      public
        constructor create(para1: AVView); overload;
        constructor create(); overload;
        function getView(): AVView; overload; virtual; final;
        procedure onProvideShadowMetrics(para1: AGPoint; para2: AGPoint); overload; virtual;
        procedure onDrawShadow(para1: AGCanvas); overload; virtual;
      end;

      InnerOnLayoutChangeListener = interface external 'android.view' name 'OnLayoutChangeListener' 
        procedure onLayoutChange(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint); overload;
      end;

      InnerBaseSavedState = class external 'android.view' name 'BaseSavedState' (AVAbsSavedState)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        constructor create(para1: AOParcel); overload;
        constructor create(para1: AOParcelable); overload;
      end;

      InnerOnCreateContextMenuListener = interface external 'android.view' name 'OnCreateContextMenuListener' 
        procedure onCreateContextMenu(para1: AVContextMenu; para2: AVView; para3: AVContextMenu.InnerContextMenuInfo); overload;
      end;

  public
    const
      ACCESSIBILITY_LIVE_REGION_ASSERTIVE = 2;
      ACCESSIBILITY_LIVE_REGION_NONE = 0;
      ACCESSIBILITY_LIVE_REGION_POLITE = 1;
  public
    final class var
      fALPHA: AUProperty; external name 'ALPHA';
  public
    const
      DRAWING_CACHE_QUALITY_AUTO = 0;
      DRAWING_CACHE_QUALITY_HIGH = 1048576;
      DRAWING_CACHE_QUALITY_LOW = 524288;
  strict protected
    final class var
      fEMPTY_STATE_SET: Arr1jint; external name 'EMPTY_STATE_SET';
      fENABLED_FOCUSED_SELECTED_STATE_SET: Arr1jint; external name 'ENABLED_FOCUSED_SELECTED_STATE_SET';
      fENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET';
      fENABLED_FOCUSED_STATE_SET: Arr1jint; external name 'ENABLED_FOCUSED_STATE_SET';
      fENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET';
      fENABLED_SELECTED_STATE_SET: Arr1jint; external name 'ENABLED_SELECTED_STATE_SET';
      fENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET';
      fENABLED_STATE_SET: Arr1jint; external name 'ENABLED_STATE_SET';
      fENABLED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'ENABLED_WINDOW_FOCUSED_STATE_SET';
  public
    const
      FIND_VIEWS_WITH_CONTENT_DESCRIPTION = 2;
      FIND_VIEWS_WITH_TEXT = 1;
      FOCUSABLES_ALL = 0;
      FOCUSABLES_TOUCH_MODE = 1;
  strict protected
    final class var
      fFOCUSED_SELECTED_STATE_SET: Arr1jint; external name 'FOCUSED_SELECTED_STATE_SET';
      fFOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET';
      fFOCUSED_STATE_SET: Arr1jint; external name 'FOCUSED_STATE_SET';
      fFOCUSED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'FOCUSED_WINDOW_FOCUSED_STATE_SET';
  public
    const
      FOCUS_BACKWARD = 1;
      FOCUS_DOWN = 130;
      FOCUS_FORWARD = 2;
      FOCUS_LEFT = 17;
      FOCUS_RIGHT = 66;
      FOCUS_UP = 33;
      GONE = 8;
      HAPTIC_FEEDBACK_ENABLED = 268435456;
      IMPORTANT_FOR_ACCESSIBILITY_AUTO = 0;
      IMPORTANT_FOR_ACCESSIBILITY_NO = 2;
      IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS = 4;
      IMPORTANT_FOR_ACCESSIBILITY_YES = 1;
      INVISIBLE = 4;
      KEEP_SCREEN_ON = 67108864;
      LAYER_TYPE_HARDWARE = 2;
      LAYER_TYPE_NONE = 0;
      LAYER_TYPE_SOFTWARE = 1;
      LAYOUT_DIRECTION_INHERIT = 2;
      LAYOUT_DIRECTION_LOCALE = 3;
      LAYOUT_DIRECTION_LTR = 0;
      LAYOUT_DIRECTION_RTL = 1;
      MEASURED_HEIGHT_STATE_SHIFT = 16;
      MEASURED_SIZE_MASK = 16777215;
      MEASURED_STATE_MASK = -16777216;
      MEASURED_STATE_TOO_SMALL = 16777216;
      NO_ID = -1;
      OVER_SCROLL_ALWAYS = 0;
      OVER_SCROLL_IF_CONTENT_SCROLLS = 1;
      OVER_SCROLL_NEVER = 2;
  strict protected
    final class var
      fPRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET: Arr1jint; external name 'PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET';
      fPRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET';
      fPRESSED_ENABLED_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_ENABLED_FOCUSED_STATE_SET';
      fPRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET';
      fPRESSED_ENABLED_SELECTED_STATE_SET: Arr1jint; external name 'PRESSED_ENABLED_SELECTED_STATE_SET';
      fPRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET';
      fPRESSED_ENABLED_STATE_SET: Arr1jint; external name 'PRESSED_ENABLED_STATE_SET';
      fPRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET';
      fPRESSED_FOCUSED_SELECTED_STATE_SET: Arr1jint; external name 'PRESSED_FOCUSED_SELECTED_STATE_SET';
      fPRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET';
      fPRESSED_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_FOCUSED_STATE_SET';
      fPRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET';
      fPRESSED_SELECTED_STATE_SET: Arr1jint; external name 'PRESSED_SELECTED_STATE_SET';
      fPRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET';
      fPRESSED_STATE_SET: Arr1jint; external name 'PRESSED_STATE_SET';
      fPRESSED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'PRESSED_WINDOW_FOCUSED_STATE_SET';
  public
    final class var
      fROTATION: AUProperty; external name 'ROTATION';
      fROTATION_X: AUProperty; external name 'ROTATION_X';
      fROTATION_Y: AUProperty; external name 'ROTATION_Y';
      fSCALE_X: AUProperty; external name 'SCALE_X';
      fSCALE_Y: AUProperty; external name 'SCALE_Y';
  public
    const
      SCREEN_STATE_OFF = 0;
      SCREEN_STATE_ON = 1;
      SCROLLBARS_INSIDE_INSET = 16777216;
      SCROLLBARS_INSIDE_OVERLAY = 0;
      SCROLLBARS_OUTSIDE_INSET = 50331648;
      SCROLLBARS_OUTSIDE_OVERLAY = 33554432;
      SCROLLBAR_POSITION_DEFAULT = 0;
      SCROLLBAR_POSITION_LEFT = 1;
      SCROLLBAR_POSITION_RIGHT = 2;
      SCROLL_AXIS_HORIZONTAL = 1;
      SCROLL_AXIS_NONE = 0;
      SCROLL_AXIS_VERTICAL = 2;
  strict protected
    final class var
      fSELECTED_STATE_SET: Arr1jint; external name 'SELECTED_STATE_SET';
      fSELECTED_WINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'SELECTED_WINDOW_FOCUSED_STATE_SET';
  public
    const
      SOUND_EFFECTS_ENABLED = 134217728;
      STATUS_BAR_HIDDEN = 1 deprecated;
      STATUS_BAR_VISIBLE = 0 deprecated;
      SYSTEM_UI_FLAG_FULLSCREEN = 4;
      SYSTEM_UI_FLAG_HIDE_NAVIGATION = 2;
      SYSTEM_UI_FLAG_IMMERSIVE = 2048;
      SYSTEM_UI_FLAG_IMMERSIVE_STICKY = 4096;
      SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN = 1024;
      SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION = 512;
      SYSTEM_UI_FLAG_LAYOUT_STABLE = 256;
      SYSTEM_UI_FLAG_LOW_PROFILE = 1;
      SYSTEM_UI_FLAG_VISIBLE = 0;
      SYSTEM_UI_LAYOUT_FLAGS = 1536;
      TEXT_ALIGNMENT_CENTER = 4;
      TEXT_ALIGNMENT_GRAVITY = 1;
      TEXT_ALIGNMENT_INHERIT = 0;
      TEXT_ALIGNMENT_TEXT_END = 3;
      TEXT_ALIGNMENT_TEXT_START = 2;
      TEXT_ALIGNMENT_VIEW_END = 6;
      TEXT_ALIGNMENT_VIEW_START = 5;
      TEXT_DIRECTION_ANY_RTL = 2;
      TEXT_DIRECTION_FIRST_STRONG = 1;
      TEXT_DIRECTION_INHERIT = 0;
      TEXT_DIRECTION_LOCALE = 5;
      TEXT_DIRECTION_LTR = 3;
      TEXT_DIRECTION_RTL = 4;
  public
    final class var
      fTRANSLATION_X: AUProperty; external name 'TRANSLATION_X';
      fTRANSLATION_Y: AUProperty; external name 'TRANSLATION_Y';
      fTRANSLATION_Z: AUProperty; external name 'TRANSLATION_Z';
  strict protected
    const
      VIEW_LOG_TAG = 'View';
  public
    const
      VISIBLE = 0;
  strict protected
    final class var
      fWINDOW_FOCUSED_STATE_SET: Arr1jint; external name 'WINDOW_FOCUSED_STATE_SET';
  public
    final class var
      fX: AUProperty; external name 'X';
      fY: AUProperty; external name 'Y';
      fZ: AUProperty; external name 'Z';
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function toString(): JLString; overload; virtual;
    function getVerticalFadingEdgeLength(): jint; overload; virtual;
    procedure setFadingEdgeLength(para1: jint); overload; virtual;
    function getHorizontalFadingEdgeLength(): jint; overload; virtual;
    function getVerticalScrollbarWidth(): jint; overload; virtual;
  strict protected
    function getHorizontalScrollbarHeight(): jint; overload; virtual;
  public
    procedure setVerticalScrollbarPosition(para1: jint); overload; virtual;
    function getVerticalScrollbarPosition(): jint; overload; virtual;
    procedure setOnFocusChangeListener(para1: AVView.InnerOnFocusChangeListener); overload; virtual;
    procedure addOnLayoutChangeListener(para1: AVView.InnerOnLayoutChangeListener); overload; virtual;
    procedure removeOnLayoutChangeListener(para1: AVView.InnerOnLayoutChangeListener); overload; virtual;
    procedure addOnAttachStateChangeListener(para1: AVView.InnerOnAttachStateChangeListener); overload; virtual;
    procedure removeOnAttachStateChangeListener(para1: AVView.InnerOnAttachStateChangeListener); overload; virtual;
    function getOnFocusChangeListener(): AVView.InnerOnFocusChangeListener; overload; virtual;
    procedure setOnClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
    function hasOnClickListeners(): jboolean; overload; virtual;
    procedure setOnLongClickListener(para1: AVView.InnerOnLongClickListener); overload; virtual;
    procedure setOnCreateContextMenuListener(para1: AVView.InnerOnCreateContextMenuListener); overload; virtual;
    function performClick(): jboolean; overload; virtual;
    function callOnClick(): jboolean; overload; virtual;
    function performLongClick(): jboolean; overload; virtual;
    function showContextMenu(): jboolean; overload; virtual;
    function startActionMode(para1: AVActionMode.InnerCallback): AVActionMode; overload; virtual;
    procedure setOnKeyListener(para1: AVView.InnerOnKeyListener); overload; virtual;
    procedure setOnTouchListener(para1: AVView.InnerOnTouchListener); overload; virtual;
    procedure setOnGenericMotionListener(para1: AVView.InnerOnGenericMotionListener); overload; virtual;
    procedure setOnHoverListener(para1: AVView.InnerOnHoverListener); overload; virtual;
    procedure setOnDragListener(para1: AVView.InnerOnDragListener); overload; virtual;
    function requestRectangleOnScreen(para1: AGRect): jboolean; overload; virtual;
    function requestRectangleOnScreen(para1: AGRect; para2: jboolean): jboolean; overload; virtual;
    procedure clearFocus(); overload; virtual;
    function hasFocus(): jboolean; overload; virtual;
    function hasFocusable(): jboolean; overload; virtual;
  strict protected
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
  public
    procedure sendAccessibilityEvent(para1: jint); overload; virtual;
    procedure announceForAccessibility(para1: JLCharSequence); overload; virtual;
    procedure sendAccessibilityEventUnchecked(para1: AVAAccessibilityEvent); overload; virtual;
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    procedure onPopulateAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    function createAccessibilityNodeInfo(): AVAAccessibilityNodeInfo; overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setAccessibilityDelegate(para1: AVView.InnerAccessibilityDelegate); overload; virtual;
    function getAccessibilityNodeProvider(): AVAAccessibilityNodeProvider; overload; virtual;
    function getContentDescription(): JLCharSequence; overload; virtual;
    procedure setContentDescription(para1: JLCharSequence); overload; virtual;
    function getLabelFor(): jint; overload; virtual;
    procedure setLabelFor(para1: jint); overload; virtual;
    function isFocused(): jboolean; overload; virtual;
    function findFocus(): AVView; overload; virtual;
    function isScrollContainer(): jboolean; overload; virtual;
    procedure setScrollContainer(para1: jboolean); overload; virtual;
    function getDrawingCacheQuality(): jint; overload; virtual;
    procedure setDrawingCacheQuality(para1: jint); overload; virtual;
    function getKeepScreenOn(): jboolean; overload; virtual;
    procedure setKeepScreenOn(para1: jboolean); overload; virtual;
    function getNextFocusLeftId(): jint; overload; virtual;
    procedure setNextFocusLeftId(para1: jint); overload; virtual;
    function getNextFocusRightId(): jint; overload; virtual;
    procedure setNextFocusRightId(para1: jint); overload; virtual;
    function getNextFocusUpId(): jint; overload; virtual;
    procedure setNextFocusUpId(para1: jint); overload; virtual;
    function getNextFocusDownId(): jint; overload; virtual;
    procedure setNextFocusDownId(para1: jint); overload; virtual;
    function getNextFocusForwardId(): jint; overload; virtual;
    procedure setNextFocusForwardId(para1: jint); overload; virtual;
    function isShown(): jboolean; overload; virtual;
  strict protected
    function fitSystemWindows(para1: AGRect): jboolean; overload; virtual;
  public
    function onApplyWindowInsets(para1: AVWindowInsets): AVWindowInsets; overload; virtual;
    procedure setOnApplyWindowInsetsListener(para1: AVView.InnerOnApplyWindowInsetsListener); overload; virtual;
    function dispatchApplyWindowInsets(para1: AVWindowInsets): AVWindowInsets; overload; virtual;
    function computeSystemWindowInsets(para1: AVWindowInsets; para2: AGRect): AVWindowInsets; overload; virtual;
    procedure setFitsSystemWindows(para1: jboolean); overload; virtual;
    function getFitsSystemWindows(): jboolean; overload; virtual;
    procedure requestFitSystemWindows(); overload; virtual;
    procedure requestApplyInsets(); overload; virtual;
    function getVisibility(): jint; overload; virtual;
    procedure setVisibility(para1: jint); overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    procedure setFocusable(para1: jboolean); overload; virtual;
    procedure setFocusableInTouchMode(para1: jboolean); overload; virtual;
    procedure setSoundEffectsEnabled(para1: jboolean); overload; virtual;
    function isSoundEffectsEnabled(): jboolean; overload; virtual;
    procedure setHapticFeedbackEnabled(para1: jboolean); overload; virtual;
    function isHapticFeedbackEnabled(): jboolean; overload; virtual;
    procedure setLayoutDirection(para1: jint); overload; virtual;
    function getLayoutDirection(): jint; overload; virtual;
    function hasTransientState(): jboolean; overload; virtual;
    procedure setHasTransientState(para1: jboolean); overload; virtual;
    function isAttachedToWindow(): jboolean; overload; virtual;
    function isLaidOut(): jboolean; overload; virtual;
    procedure setWillNotDraw(para1: jboolean); overload; virtual;
    function willNotDraw(): jboolean; overload; virtual;
    procedure setWillNotCacheDrawing(para1: jboolean); overload; virtual;
    function willNotCacheDrawing(): jboolean; overload; virtual;
    function isClickable(): jboolean; overload; virtual;
    procedure setClickable(para1: jboolean); overload; virtual;
    function isLongClickable(): jboolean; overload; virtual;
    procedure setLongClickable(para1: jboolean); overload; virtual;
    procedure setPressed(para1: jboolean); overload; virtual;
  strict protected
    procedure dispatchSetPressed(para1: jboolean); overload; virtual;
  public
    function isPressed(): jboolean; overload; virtual;
    function isSaveEnabled(): jboolean; overload; virtual;
    procedure setSaveEnabled(para1: jboolean); overload; virtual;
    function getFilterTouchesWhenObscured(): jboolean; overload; virtual;
    procedure setFilterTouchesWhenObscured(para1: jboolean); overload; virtual;
    function isSaveFromParentEnabled(): jboolean; overload; virtual;
    procedure setSaveFromParentEnabled(para1: jboolean); overload; virtual;
    function isFocusable(): jboolean; overload; virtual; final;
    function isFocusableInTouchMode(): jboolean; overload; virtual; final;
    function focusSearch(para1: jint): AVView; overload; virtual;
    function dispatchUnhandledMove(para1: AVView; para2: jint): jboolean; overload; virtual;
    function getFocusables(para1: jint): JUArrayList; overload; virtual;
    procedure addFocusables(para1: JUArrayList; para2: jint); overload; virtual;
    procedure addFocusables(para1: JUArrayList; para2: jint; para3: jint); overload; virtual;
    procedure findViewsWithText(para1: JUArrayList; para2: JLCharSequence; para3: jint); overload; virtual;
    function getTouchables(): JUArrayList; overload; virtual;
    procedure addTouchables(para1: JUArrayList); overload; virtual;
    function isAccessibilityFocused(): jboolean; overload; virtual;
    function requestFocus(): jboolean; overload; virtual; final;
    function requestFocus(para1: jint): jboolean; overload; virtual; final;
    function requestFocus(para1: jint; para2: AGRect): jboolean; overload; virtual;
    function requestFocusFromTouch(): jboolean; overload; virtual; final;
    function getImportantForAccessibility(): jint; overload; virtual;
    procedure setAccessibilityLiveRegion(para1: jint); overload; virtual;
    function getAccessibilityLiveRegion(): jint; overload; virtual;
    procedure setImportantForAccessibility(para1: jint); overload; virtual;
    function isImportantForAccessibility(): jboolean; overload; virtual;
    function getParentForAccessibility(): AVViewParent; overload; virtual;
    procedure addChildrenForAccessibility(para1: JUArrayList); overload; virtual;
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
    procedure onStartTemporaryDetach(); overload; virtual;
    procedure onFinishTemporaryDetach(); overload; virtual;
    function getKeyDispatcherState(): AVKeyEvent.InnerDispatcherState; overload; virtual;
    function dispatchKeyEventPreIme(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchKeyShortcutEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onFilterTouchEventForSecurity(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    function dispatchHoverEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchGenericPointerEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchGenericFocusedEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  public
    procedure dispatchWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
    function hasWindowFocus(): jboolean; overload; virtual;
  strict protected
    procedure dispatchVisibilityChanged(para1: AVView; para2: jint); overload; virtual;
    procedure onVisibilityChanged(para1: AVView; para2: jint); overload; virtual;
  public
    procedure dispatchDisplayHint(para1: jint); overload; virtual;
  strict protected
    procedure onDisplayHint(para1: jint); overload; virtual;
  public
    procedure dispatchWindowVisibilityChanged(para1: jint); overload; virtual;
  strict protected
    procedure onWindowVisibilityChanged(para1: jint); overload; virtual;
  public
    function getWindowVisibility(): jint; overload; virtual;
    procedure getWindowVisibleDisplayFrame(para1: AGRect); overload; virtual;
    procedure dispatchConfigurationChanged(para1: ACRConfiguration); overload; virtual;
  strict protected
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
  public
    function isInTouchMode(): jboolean; overload; virtual;
    function getContext(): ACContext; overload; virtual; final;
    function onKeyPreIme(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyLongPress(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
    function onKeyShortcut(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onCheckIsTextEditor(): jboolean; overload; virtual;
    function onCreateInputConnection(para1: AVIEditorInfo): AVIInputConnection; overload; virtual;
    function checkInputConnectionProxy(para1: AVView): jboolean; overload; virtual;
    procedure createContextMenu(para1: AVContextMenu); overload; virtual;
  strict protected
    function getContextMenuInfo(): AVContextMenu.InnerContextMenuInfo; overload; virtual;
    procedure onCreateContextMenu(para1: AVContextMenu); overload; virtual;
  public
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onHoverEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function isHovered(): jboolean; overload; virtual;
    procedure setHovered(para1: jboolean); overload; virtual;
    procedure onHoverChanged(para1: jboolean); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure cancelLongPress(); overload; virtual;
    procedure setTouchDelegate(para1: AVTouchDelegate); overload; virtual;
    function getTouchDelegate(): AVTouchDelegate; overload; virtual;
    procedure requestUnbufferedDispatch(para1: AVMotionEvent); overload; virtual; final;
    procedure bringToFront(); overload; virtual;
  strict protected
    procedure onScrollChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
  public
    function getParent(): AVViewParent; overload; virtual; final;
    procedure setScrollX(para1: jint); overload; virtual;
    procedure setScrollY(para1: jint); overload; virtual;
    function getScrollX(): jint; overload; virtual; final;
    function getScrollY(): jint; overload; virtual; final;
    function getWidth(): jint; overload; virtual; final;
    function getHeight(): jint; overload; virtual; final;
    procedure getDrawingRect(para1: AGRect); overload; virtual;
    function getMeasuredWidth(): jint; overload; virtual; final;
    function getMeasuredWidthAndState(): jint; overload; virtual; final;
    function getMeasuredHeight(): jint; overload; virtual; final;
    function getMeasuredHeightAndState(): jint; overload; virtual; final;
    function getMeasuredState(): jint; overload; virtual; final;
    function getMatrix(): AGMatrix; overload; virtual;
    function getCameraDistance(): jfloat; overload; virtual;
    procedure setCameraDistance(para1: jfloat); overload; virtual;
    function getRotation(): jfloat; overload; virtual;
    procedure setRotation(para1: jfloat); overload; virtual;
    function getRotationY(): jfloat; overload; virtual;
    procedure setRotationY(para1: jfloat); overload; virtual;
    function getRotationX(): jfloat; overload; virtual;
    procedure setRotationX(para1: jfloat); overload; virtual;
    function getScaleX(): jfloat; overload; virtual;
    procedure setScaleX(para1: jfloat); overload; virtual;
    function getScaleY(): jfloat; overload; virtual;
    procedure setScaleY(para1: jfloat); overload; virtual;
    function getPivotX(): jfloat; overload; virtual;
    procedure setPivotX(para1: jfloat); overload; virtual;
    function getPivotY(): jfloat; overload; virtual;
    procedure setPivotY(para1: jfloat); overload; virtual;
    function getAlpha(): jfloat; overload; virtual;
    function hasOverlappingRendering(): jboolean; overload; virtual;
    procedure setAlpha(para1: jfloat); overload; virtual;
    function getTop(): jint; overload; virtual; final;
    procedure setTop(para1: jint); overload; virtual; final;
    function getBottom(): jint; overload; virtual; final;
    function isDirty(): jboolean; overload; virtual;
    procedure setBottom(para1: jint); overload; virtual; final;
    function getLeft(): jint; overload; virtual; final;
    procedure setLeft(para1: jint); overload; virtual; final;
    function getRight(): jint; overload; virtual; final;
    procedure setRight(para1: jint); overload; virtual; final;
    function getX(): jfloat; overload; virtual;
    procedure setX(para1: jfloat); overload; virtual;
    function getY(): jfloat; overload; virtual;
    procedure setY(para1: jfloat); overload; virtual;
    function getZ(): jfloat; overload; virtual;
    procedure setZ(para1: jfloat); overload; virtual;
    function getElevation(): jfloat; overload; virtual;
    procedure setElevation(para1: jfloat); overload; virtual;
    function getTranslationX(): jfloat; overload; virtual;
    procedure setTranslationX(para1: jfloat); overload; virtual;
    function getTranslationY(): jfloat; overload; virtual;
    procedure setTranslationY(para1: jfloat); overload; virtual;
    function getTranslationZ(): jfloat; overload; virtual;
    procedure setTranslationZ(para1: jfloat); overload; virtual;
    function getStateListAnimator(): AAStateListAnimator; overload; virtual;
    procedure setStateListAnimator(para1: AAStateListAnimator); overload; virtual;
    function getClipToOutline(): jboolean; overload; virtual; final;
    procedure setClipToOutline(para1: jboolean); overload; virtual;
    procedure setOutlineProvider(para1: AVViewOutlineProvider); overload; virtual;
    function getOutlineProvider(): AVViewOutlineProvider; overload; virtual;
    procedure invalidateOutline(); overload; virtual;
    procedure getHitRect(para1: AGRect); overload; virtual;
    procedure getFocusedRect(para1: AGRect); overload; virtual;
    function getGlobalVisibleRect(para1: AGRect; para2: AGPoint): jboolean; overload; virtual;
    function getGlobalVisibleRect(para1: AGRect): jboolean; overload; virtual; final;
    function getLocalVisibleRect(para1: AGRect): jboolean; overload; virtual; final;
    procedure offsetTopAndBottom(para1: jint); overload; virtual;
    procedure offsetLeftAndRight(para1: jint); overload; virtual;
    function getLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    procedure setLayoutParams(para1: AVViewGroup_LayoutParams); overload; virtual;
    procedure scrollTo(para1: jint; para2: jint); overload; virtual;
    procedure scrollBy(para1: jint; para2: jint); overload; virtual;
  strict protected
    function awakenScrollBars(): jboolean; overload; virtual;
    function awakenScrollBars(para1: jint): jboolean; overload; virtual;
    function awakenScrollBars(para1: jint; para2: jboolean): jboolean; overload; virtual;
  public
    procedure invalidate(para1: AGRect); overload; virtual;
    procedure invalidate(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure invalidate(); overload; virtual;
    function isOpaque(): jboolean; overload; virtual;
    function getHandler(): AOHandler; overload; virtual;
    function post(para1: JLRunnable): jboolean; overload; virtual;
    function postDelayed(para1: JLRunnable; para2: jlong): jboolean; overload; virtual;
    procedure postOnAnimation(para1: JLRunnable); overload; virtual;
    procedure postOnAnimationDelayed(para1: JLRunnable; para2: jlong); overload; virtual;
    function removeCallbacks(para1: JLRunnable): jboolean; overload; virtual;
    procedure postInvalidate(); overload; virtual;
    procedure postInvalidate(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure postInvalidateDelayed(para1: jlong); overload; virtual;
    procedure postInvalidateDelayed(para1: jlong; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure postInvalidateOnAnimation(); overload; virtual;
    procedure postInvalidateOnAnimation(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure computeScroll(); overload; virtual;
    function isHorizontalFadingEdgeEnabled(): jboolean; overload; virtual;
    procedure setHorizontalFadingEdgeEnabled(para1: jboolean); overload; virtual;
    function isVerticalFadingEdgeEnabled(): jboolean; overload; virtual;
    procedure setVerticalFadingEdgeEnabled(para1: jboolean); overload; virtual;
  strict protected
    function getTopFadingEdgeStrength(): jfloat; overload; virtual;
    function getBottomFadingEdgeStrength(): jfloat; overload; virtual;
    function getLeftFadingEdgeStrength(): jfloat; overload; virtual;
    function getRightFadingEdgeStrength(): jfloat; overload; virtual;
  public
    function isHorizontalScrollBarEnabled(): jboolean; overload; virtual;
    procedure setHorizontalScrollBarEnabled(para1: jboolean); overload; virtual;
    function isVerticalScrollBarEnabled(): jboolean; overload; virtual;
    procedure setVerticalScrollBarEnabled(para1: jboolean); overload; virtual;
    procedure setScrollbarFadingEnabled(para1: jboolean); overload; virtual;
    function isScrollbarFadingEnabled(): jboolean; overload; virtual;
    function getScrollBarDefaultDelayBeforeFade(): jint; overload; virtual;
    procedure setScrollBarDefaultDelayBeforeFade(para1: jint); overload; virtual;
    function getScrollBarFadeDuration(): jint; overload; virtual;
    procedure setScrollBarFadeDuration(para1: jint); overload; virtual;
    function getScrollBarSize(): jint; overload; virtual;
    procedure setScrollBarSize(para1: jint); overload; virtual;
    procedure setScrollBarStyle(para1: jint); overload; virtual;
    function getScrollBarStyle(): jint; overload; virtual;
  strict protected
    function computeHorizontalScrollRange(): jint; overload; virtual;
    function computeHorizontalScrollOffset(): jint; overload; virtual;
    function computeHorizontalScrollExtent(): jint; overload; virtual;
    function computeVerticalScrollRange(): jint; overload; virtual;
    function computeVerticalScrollOffset(): jint; overload; virtual;
    function computeVerticalScrollExtent(): jint; overload; virtual;
  public
    function canScrollHorizontally(para1: jint): jboolean; overload; virtual;
    function canScrollVertically(para1: jint): jboolean; overload; virtual;
  strict protected
    procedure onDrawScrollBars(para1: AGCanvas); overload; virtual; final;
    procedure onDraw(para1: AGCanvas); overload; virtual;
    procedure onAttachedToWindow(); overload; virtual;
  public
    procedure onScreenStateChanged(para1: jint); overload; virtual;
    procedure onRtlPropertiesChanged(para1: jint); overload; virtual;
    function canResolveLayoutDirection(): jboolean; overload; virtual;
    function isLayoutDirectionResolved(): jboolean; overload; virtual;
  strict protected
    procedure onDetachedFromWindow(); overload; virtual;
    function getWindowAttachCount(): jint; overload; virtual;
  public
    function getWindowToken(): AOIBinder; overload; virtual;
    function getWindowId(): AVWindowId; overload; virtual;
    function getApplicationWindowToken(): AOIBinder; overload; virtual;
    function getDisplay(): AVDisplay; overload; virtual;
    procedure cancelPendingInputEvents(); overload; virtual; final;
    procedure onCancelPendingInputEvents(); overload; virtual;
    procedure saveHierarchyState(para1: AUSparseArray); overload; virtual;
  strict protected
    procedure dispatchSaveInstanceState(para1: AUSparseArray); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
  public
    procedure restoreHierarchyState(para1: AUSparseArray); overload; virtual;
  strict protected
    procedure dispatchRestoreInstanceState(para1: AUSparseArray); overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  public
    function getDrawingTime(): jlong; overload; virtual;
    procedure setDuplicateParentStateEnabled(para1: jboolean); overload; virtual;
    function isDuplicateParentStateEnabled(): jboolean; overload; virtual;
    procedure setLayerType(para1: jint; para2: AGPaint); overload; virtual;
    procedure setLayerPaint(para1: AGPaint); overload; virtual;
    function getLayerType(): jint; overload; virtual;
    procedure buildLayer(); overload; virtual;
    procedure setDrawingCacheEnabled(para1: jboolean); overload; virtual;
    function isDrawingCacheEnabled(): jboolean; overload; virtual;
    function getDrawingCache(): AGBitmap; overload; virtual;
    function getDrawingCache(para1: jboolean): AGBitmap; overload; virtual;
    procedure destroyDrawingCache(); overload; virtual;
    procedure setDrawingCacheBackgroundColor(para1: jint); overload; virtual;
    function getDrawingCacheBackgroundColor(): jint; overload; virtual;
    procedure buildDrawingCache(); overload; virtual;
    procedure buildDrawingCache(para1: jboolean); overload; virtual;
    function isInEditMode(): jboolean; overload; virtual;
  strict protected
    function isPaddingOffsetRequired(): jboolean; overload; virtual;
    function getLeftPaddingOffset(): jint; overload; virtual;
    function getRightPaddingOffset(): jint; overload; virtual;
    function getTopPaddingOffset(): jint; overload; virtual;
    function getBottomPaddingOffset(): jint; overload; virtual;
  public
    function isHardwareAccelerated(): jboolean; overload; virtual;
    procedure setClipBounds(para1: AGRect); overload; virtual;
    function getClipBounds(): AGRect; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getOverlay(): AVViewOverlay; overload; virtual;
    function getSolidColor(): jint; overload; virtual;
    function isLayoutRequested(): jboolean; overload; virtual;
    procedure layout(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure onFinishInflate(); overload; virtual;
  public
    function getResources(): ACRResources; overload; virtual;
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    procedure scheduleDrawable(para1: AGDDrawable; para2: JLRunnable; para3: jlong); overload; virtual;
    procedure unscheduleDrawable(para1: AGDDrawable; para2: JLRunnable); overload; virtual;
    procedure unscheduleDrawable(para1: AGDDrawable); overload; virtual;
  strict protected
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
    procedure refreshDrawableState(); overload; virtual;
    function getDrawableState(): Arr1jint; overload; virtual; final;
  strict protected
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
    class function mergeDrawableStates(para1: Arr1jint; para2: Arr1jint): Arr1jint; static; overload;
    class function mergeDrawableStates(var para1: array of jint; var para2: array of jint): Arr1jint; static; overload;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
    procedure setBackgroundColor(para1: jint); overload; virtual;
    procedure setBackgroundResource(para1: jint); overload; virtual;
    procedure setBackground(para1: AGDDrawable); overload; virtual;
    procedure setBackgroundDrawable(para1: AGDDrawable); overload; virtual;
    function getBackground(): AGDDrawable; overload; virtual;
    procedure setBackgroundTintList(para1: ACRColorStateList); overload; virtual;
    function getBackgroundTintList(): ACRColorStateList; overload; virtual;
    procedure setBackgroundTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getBackgroundTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    procedure setPadding(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setPaddingRelative(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    function getPaddingTop(): jint; overload; virtual;
    function getPaddingBottom(): jint; overload; virtual;
    function getPaddingLeft(): jint; overload; virtual;
    function getPaddingStart(): jint; overload; virtual;
    function getPaddingRight(): jint; overload; virtual;
    function getPaddingEnd(): jint; overload; virtual;
    function isPaddingRelative(): jboolean; overload; virtual;
    procedure setSelected(para1: jboolean); overload; virtual;
  strict protected
    procedure dispatchSetSelected(para1: jboolean); overload; virtual;
  public
    function isSelected(): jboolean; overload; virtual;
    procedure setActivated(para1: jboolean); overload; virtual;
  strict protected
    procedure dispatchSetActivated(para1: jboolean); overload; virtual;
  public
    function isActivated(): jboolean; overload; virtual;
    function getViewTreeObserver(): AVViewTreeObserver; overload; virtual;
    function getRootView(): AVView; overload; virtual;
    procedure getLocationOnScreen(para1: Arr1jint); overload; virtual;
    procedure getLocationOnScreen(var para1: array of jint); overload; virtual;
    procedure getLocationInWindow(para1: Arr1jint); overload; virtual;
    procedure getLocationInWindow(var para1: array of jint); overload; virtual;
    function findViewById(para1: jint): AVView; overload; virtual; final;
    function findViewWithTag(para1: JLObject): AVView; overload; virtual; final;
    procedure setId(para1: jint); overload; virtual;
    function getId(): jint; overload; virtual;
    function getTag(): JLObject; overload; virtual;
    procedure setTag(para1: JLObject); overload; virtual;
    function getTag(para1: jint): JLObject; overload; virtual;
    procedure setTag(para1: jint; para2: JLObject); overload; virtual;
    function getBaseline(): jint; overload; virtual;
    function isInLayout(): jboolean; overload; virtual;
    procedure requestLayout(); overload; virtual;
    procedure forceLayout(); overload; virtual;
    procedure measure(para1: jint; para2: jint); overload; virtual; final;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure setMeasuredDimension(para1: jint; para2: jint); overload; virtual; final;
  public
    class function combineMeasuredStates(para1: jint; para2: jint): jint; static; overload;
    class function resolveSize(para1: jint; para2: jint): jint; static; overload;
    class function resolveSizeAndState(para1: jint; para2: jint; para3: jint): jint; static; overload;
    class function getDefaultSize(para1: jint; para2: jint): jint; static; overload;
  strict protected
    function getSuggestedMinimumHeight(): jint; overload; virtual;
    function getSuggestedMinimumWidth(): jint; overload; virtual;
  public
    function getMinimumHeight(): jint; overload; virtual;
    procedure setMinimumHeight(para1: jint); overload; virtual;
    function getMinimumWidth(): jint; overload; virtual;
    procedure setMinimumWidth(para1: jint); overload; virtual;
    function getAnimation(): AVAAnimation; overload; virtual;
    procedure startAnimation(para1: AVAAnimation); overload; virtual;
    procedure clearAnimation(); overload; virtual;
    procedure setAnimation(para1: AVAAnimation); overload; virtual;
  strict protected
    procedure onAnimationStart(); overload; virtual;
    procedure onAnimationEnd(); overload; virtual;
    function onSetAlpha(para1: jint): jboolean; overload; virtual;
  public
    procedure playSoundEffect(para1: jint); overload; virtual;
    function performHapticFeedback(para1: jint): jboolean; overload; virtual;
    function performHapticFeedback(para1: jint; para2: jint): jboolean; overload; virtual;
    procedure setSystemUiVisibility(para1: jint); overload; virtual;
    function getSystemUiVisibility(): jint; overload; virtual;
    function getWindowSystemUiVisibility(): jint; overload; virtual;
    procedure onWindowSystemUiVisibilityChanged(para1: jint); overload; virtual;
    procedure dispatchWindowSystemUiVisiblityChanged(para1: jint); overload; virtual;
    procedure setOnSystemUiVisibilityChangeListener(para1: AVView.InnerOnSystemUiVisibilityChangeListener); overload; virtual;
    procedure dispatchSystemUiVisibilityChanged(para1: jint); overload; virtual;
    function startDrag(para1: ACClipData; para2: AVView.InnerDragShadowBuilder; para3: JLObject; para4: jint): jboolean; overload; virtual; final;
    function onDragEvent(para1: AVDragEvent): jboolean; overload; virtual;
    function dispatchDragEvent(para1: AVDragEvent): jboolean; overload; virtual;
    class function inflate(para1: ACContext; para2: jint; para3: AVViewGroup): AVView; static; overload;
  strict protected
    function overScrollBy(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jboolean): jboolean; overload; virtual;
    procedure onOverScrolled(para1: jint; para2: jint; para3: jboolean; para4: jboolean); overload; virtual;
  public
    function getOverScrollMode(): jint; overload; virtual;
    procedure setOverScrollMode(para1: jint); overload; virtual;
    procedure setNestedScrollingEnabled(para1: jboolean); overload; virtual;
    function isNestedScrollingEnabled(): jboolean; overload; virtual;
    function startNestedScroll(para1: jint): jboolean; overload; virtual;
    procedure stopNestedScroll(); overload; virtual;
    function hasNestedScrollingParent(): jboolean; overload; virtual;
    function dispatchNestedScroll(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jint): jboolean; overload; virtual;
    function dispatchNestedScroll(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jint): jboolean; overload; virtual;
    function dispatchNestedPreScroll(para1: jint; para2: jint; para3: Arr1jint; para4: Arr1jint): jboolean; overload; virtual;
    function dispatchNestedPreScroll(para1: jint; para2: jint; var para3: array of jint; var para4: array of jint): jboolean; overload; virtual;
    function dispatchNestedFling(para1: jfloat; para2: jfloat; para3: jboolean): jboolean; overload; virtual;
    function dispatchNestedPreFling(para1: jfloat; para2: jfloat): jboolean; overload; virtual;
    procedure setTextDirection(para1: jint); overload; virtual;
    function getTextDirection(): jint; overload; virtual;
    function canResolveTextDirection(): jboolean; overload; virtual;
    function isTextDirectionResolved(): jboolean; overload; virtual;
    procedure setTextAlignment(para1: jint); overload; virtual;
    function getTextAlignment(): jint; overload; virtual;
    function canResolveTextAlignment(): jboolean; overload; virtual;
    function isTextAlignmentResolved(): jboolean; overload; virtual;
    class function generateViewId(): jint; static; overload;
    function animate(): AVViewPropertyAnimator; overload; virtual;
    procedure setTransitionName(para1: JLString); overload; virtual; final;
    function getTransitionName(): JLString; overload; virtual;
  end;

  AWPopupMenu = class external 'android.widget' name 'PopupMenu' (JLObject)
  public
    type
      InnerOnMenuItemClickListener = interface;
      Arr1InnerOnMenuItemClickListener = array of InnerOnMenuItemClickListener;
      Arr2InnerOnMenuItemClickListener = array of Arr1InnerOnMenuItemClickListener;
      Arr3InnerOnMenuItemClickListener = array of Arr2InnerOnMenuItemClickListener;
      InnerOnDismissListener = interface;
      Arr1InnerOnDismissListener = array of InnerOnDismissListener;
      Arr2InnerOnDismissListener = array of Arr1InnerOnDismissListener;
      Arr3InnerOnDismissListener = array of Arr2InnerOnDismissListener;
      InnerOnMenuItemClickListener = interface external 'android.widget' name 'OnMenuItemClickListener' 
        function onMenuItemClick(para1: AVMenuItem): jboolean; overload;
      end;

      InnerOnDismissListener = interface external 'android.widget' name 'OnDismissListener' 
        procedure onDismiss(para1: AWPopupMenu); overload;
      end;

  public
    constructor create(para1: ACContext; para2: AVView); overload;
    constructor create(para1: ACContext; para2: AVView; para3: jint); overload;
    function getDragToOpenListener(): AVView.InnerOnTouchListener; overload; virtual;
    function getMenu(): AVMenu; overload; virtual;
    function getMenuInflater(): AVMenuInflater; overload; virtual;
    procedure inflate(para1: jint); overload; virtual;
    procedure show(); overload; virtual;
    procedure dismiss(); overload; virtual;
    procedure setOnMenuItemClickListener(para1: AWPopupMenu.InnerOnMenuItemClickListener); overload; virtual;
    procedure setOnDismissListener(para1: AWPopupMenu.InnerOnDismissListener); overload; virtual;
  end;

  APPreferenceCategory = class external 'android.preference' name 'PreferenceCategory' (APPreferenceGroup)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
  strict protected
    function onPrepareAddPreference(para1: APPreference): jboolean; overload; virtual;
  public
    function isEnabled(): jboolean; overload; virtual;
    function shouldDisableDependents(): jboolean; overload; virtual;
  end;

  APCheckBoxPreference = class external 'android.preference' name 'CheckBoxPreference' (APTwoStatePreference)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
  strict protected
    procedure onBindView(para1: AVView); overload; virtual;
  end;

  APSwitchPreference = class external 'android.preference' name 'SwitchPreference' (APTwoStatePreference)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
  strict protected
    procedure onBindView(para1: AVView); overload; virtual;
  public
    procedure setSwitchTextOn(para1: JLCharSequence); overload; virtual;
    procedure setSwitchTextOff(para1: JLCharSequence); overload; virtual;
    procedure setSwitchTextOn(para1: jint); overload; virtual;
    procedure setSwitchTextOff(para1: jint); overload; virtual;
    function getSwitchTextOn(): JLCharSequence; overload; virtual;
    function getSwitchTextOff(): JLCharSequence; overload; virtual;
  end;

  ATSDynamicDrawableSpan = class abstract external 'android.text.style' name 'DynamicDrawableSpan' (ATSReplacementSpan)
  public
    const
      ALIGN_BASELINE = 1;
      ALIGN_BOTTOM = 0;
  strict protected
    final var
      fmVerticalAlignment: jint; external name 'mVerticalAlignment';
  public
    constructor create(); overload;
  strict protected
    constructor create(para1: jint); overload;
  public
    function getVerticalAlignment(): jint; overload; virtual;
    function getDrawable(): AGDDrawable; overload; virtual; abstract;
    function getSize(para1: AGPaint; para2: JLCharSequence; para3: jint; para4: jint; para5: AGPaint.InnerFontMetricsInt): jint; overload; virtual;
    procedure draw(para1: AGCanvas; para2: JLCharSequence; para3: jint; para4: jint; para5: jfloat; para6: jint; para7: jint; para8: jint; para9: AGPaint); overload; virtual;
  end;

  AWResourceCursorAdapter = class abstract external 'android.widget' name 'ResourceCursorAdapter' (AWCursorAdapter)
  public
    constructor create(para1: ACContext; para2: jint; para3: ADCursor); overload;
    constructor create(para1: ACContext; para2: jint; para3: ADCursor; para4: jboolean); overload;
    constructor create(para1: ACContext; para2: jint; para3: ADCursor; para4: jint); overload;
    function newView(para1: ACContext; para2: ADCursor; para3: AVViewGroup): AVView; overload; virtual;
    function newDropDownView(para1: ACContext; para2: ADCursor; para3: AVViewGroup): AVView; overload; virtual;
    procedure setViewResource(para1: jint); overload; virtual;
    procedure setDropDownViewResource(para1: jint); overload; virtual;
  end;

  AWSimpleCursorTreeAdapter = class abstract external 'android.widget' name 'SimpleCursorTreeAdapter' (AWResourceCursorTreeAdapter)
  public
    type
      InnerViewBinder = interface;
      Arr1InnerViewBinder = array of InnerViewBinder;
      Arr2InnerViewBinder = array of Arr1InnerViewBinder;
      Arr3InnerViewBinder = array of Arr2InnerViewBinder;
      InnerViewBinder = interface external 'android.widget' name 'ViewBinder' 
        function setViewValue(para1: AVView; para2: ADCursor; para3: jint): jboolean; overload;
      end;

  public
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; para4: jint; para5: Arr1JLString; para6: Arr1jint; para7: jint; para8: jint; para9: Arr1JLString; para10: Arr1jint); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; para4: jint; const para5: array of JLString; const para6: array of jint; para7: jint; para8: jint; const para9: array of JLString; const para10: array of jint); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; para4: jint; para5: Arr1JLString; para6: Arr1jint; para7: jint; para8: Arr1JLString; para9: Arr1jint); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; para4: jint; const para5: array of JLString; const para6: array of jint; para7: jint; const para8: array of JLString; const para9: array of jint); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; para4: Arr1JLString; para5: Arr1jint; para6: jint; para7: Arr1JLString; para8: Arr1jint); overload;
    constructor create(para1: ACContext; para2: ADCursor; para3: jint; const para4: array of JLString; const para5: array of jint; para6: jint; const para7: array of JLString; const para8: array of jint); overload;
    function getViewBinder(): AWSimpleCursorTreeAdapter.InnerViewBinder; overload; virtual;
    procedure setViewBinder(para1: AWSimpleCursorTreeAdapter.InnerViewBinder); overload; virtual;
  strict protected
    procedure bindChildView(para1: AVView; para2: ACContext; para3: ADCursor; para4: jboolean); overload; virtual;
    procedure bindGroupView(para1: AVView; para2: ACContext; para3: ADCursor; para4: jboolean); overload; virtual;
    procedure setViewImage(para1: AWImageView; para2: JLString); overload; virtual;
  public
    procedure setViewText(para1: AWTextView; para2: JLString); overload; virtual;
  end;

  JUZGZIPInputStream = class external 'java.util.zip' name 'GZIPInputStream' (JUZInflaterInputStream)
  public
    const
      GZIP_MAGIC = 35615;
  strict protected
    var
      fcrc: JUZCRC32; external name 'crc';
      feos: jboolean; external name 'eos';
  public
    constructor create(para1: JIInputStream); overload;  // throws java.io.IOException
    constructor create(para1: JIInputStream; para2: jint); overload;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
  end;

  JUZZipInputStream = class external 'java.util.zip' name 'ZipInputStream' (JUZInflaterInputStream)
  public
    const
      CENATT = 36;
      CENATX = 38;
      CENCOM = 32;
      CENCRC = 16;
      CENDSK = 34;
      CENEXT = 30;
      CENFLG = 8;
      CENHDR = 46;
      CENHOW = 10;
      CENLEN = 24;
      CENNAM = 28;
      CENOFF = 42;
      CENSIG = jlong(33639248);
      CENSIZ = 20;
      CENTIM = 12;
      CENVEM = 4;
      CENVER = 6;
      ENDCOM = 20;
      ENDHDR = 22;
      ENDOFF = 16;
      ENDSIG = jlong(101010256);
      ENDSIZ = 12;
      ENDSUB = 8;
      ENDTOT = 10;
      EXTCRC = 4;
      EXTHDR = 16;
      EXTLEN = 12;
      EXTSIG = jlong(134695760);
      EXTSIZ = 8;
      LOCCRC = 14;
      LOCEXT = 28;
      LOCFLG = 6;
      LOCHDR = 30;
      LOCHOW = 8;
      LOCLEN = 22;
      LOCNAM = 26;
      LOCSIG = jlong(67324752);
      LOCSIZ = 18;
      LOCTIM = 10;
      LOCVER = 4;
  public
    constructor create(para1: JIInputStream); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure closeEntry(); overload; virtual;  // throws java.io.IOException
    function getNextEntry(): JUZZipEntry; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function available(): jint; overload; virtual;  // throws java.io.IOException
  strict protected
    function createZipEntry(para1: JLString): JUZZipEntry; overload; virtual;
  end;

  JNCSelectableChannel = class abstract external 'java.nio.channels' name 'SelectableChannel' (JNCSAbstractInterruptibleChannel, JNCChannel)
  strict protected
    constructor create(); overload;
  public
    function blockingLock(): JLObject; overload; virtual; abstract;
    function configureBlocking(para1: jboolean): JNCSelectableChannel; overload; virtual; abstract;  // throws java.io.IOException
    function isBlocking(): jboolean; overload; virtual; abstract;
    function isRegistered(): jboolean; overload; virtual; abstract;
    function keyFor(para1: JNCSelector): JNCSelectionKey; overload; virtual; abstract;
    function provider(): JNCSSelectorProvider; overload; virtual; abstract;
    function register(para1: JNCSelector; para2: jint): JNCSelectionKey; overload; virtual; final;  // throws java.nio.channels.ClosedChannelException
    function register(para1: JNCSelector; para2: jint; para3: JLObject): JNCSelectionKey; overload; virtual; abstract;  // throws java.nio.channels.ClosedChannelException
    function validOps(): jint; overload; virtual; abstract;
  end;

  JNCFileChannel = class abstract external 'java.nio.channels' name 'FileChannel' (JNCSAbstractInterruptibleChannel, JNCByteChannel, JNCGatheringByteChannel, JNCScatteringByteChannel)
  public
    type
      InnerMapMode = class;
      Arr1InnerMapMode = array of InnerMapMode;
      Arr2InnerMapMode = array of Arr1InnerMapMode;
      Arr3InnerMapMode = array of Arr2InnerMapMode;
      InnerMapMode = class external 'java.nio.channels' name 'MapMode' (JLObject)
      public
        final class var
          fPRIVATE: JNCFileChannel.InnerMapMode; external name 'PRIVATE';
          fREAD_ONLY: JNCFileChannel.InnerMapMode; external name 'READ_ONLY';
          fREAD_WRITE: JNCFileChannel.InnerMapMode; external name 'READ_WRITE';
      public
        function toString(): JLString; overload; virtual;
      end;

  strict protected
    constructor create(); overload;
  public
    procedure force(para1: jboolean); overload; virtual; abstract;  // throws java.io.IOException
    function lock(): JNCFileLock; overload; virtual; final;  // throws java.io.IOException
    function lock(para1: jlong; para2: jlong; para3: jboolean): JNCFileLock; overload; virtual; abstract;  // throws java.io.IOException
    function map(para1: JNCFileChannel.InnerMapMode; para2: jlong; para3: jlong): JNMappedByteBuffer; overload; virtual; abstract;  // throws java.io.IOException
    function position(): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function position(para1: jlong): JNCFileChannel; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: JNByteBuffer): jint; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: JNByteBuffer; para2: jlong): jint; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: Arr1JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function read(var para1: array of JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function read(para1: Arr1JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function read(var para1: array of JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function size(): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function transferFrom(para1: JNCReadableByteChannel; para2: jlong; para3: jlong): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function transferTo(para1: jlong; para2: jlong; para3: JNCWritableByteChannel): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function truncate(para1: jlong): JNCFileChannel; overload; virtual; abstract;  // throws java.io.IOException
    function tryLock(): JNCFileLock; overload; virtual; final;  // throws java.io.IOException
    function tryLock(para1: jlong; para2: jlong; para3: jboolean): JNCFileLock; overload; virtual; abstract;  // throws java.io.IOException
    function write(para1: JNByteBuffer): jint; overload; virtual; abstract;  // throws java.io.IOException
    function write(para1: JNByteBuffer; para2: jlong): jint; overload; virtual; abstract;  // throws java.io.IOException
    function write(para1: Arr1JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function write(var para1: array of JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function write(para1: Arr1JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function write(var para1: array of JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
  end;

  ACRAssetFileDescriptor = class external 'android.content.res' name 'AssetFileDescriptor' (JLObject, AOParcelable, JICloseable)
  public
    type
      InnerAutoCloseOutputStream = class;
      Arr1InnerAutoCloseOutputStream = array of InnerAutoCloseOutputStream;
      Arr2InnerAutoCloseOutputStream = array of Arr1InnerAutoCloseOutputStream;
      Arr3InnerAutoCloseOutputStream = array of Arr2InnerAutoCloseOutputStream;
      InnerAutoCloseInputStream = class;
      Arr1InnerAutoCloseInputStream = array of InnerAutoCloseInputStream;
      Arr2InnerAutoCloseInputStream = array of Arr1InnerAutoCloseInputStream;
      Arr3InnerAutoCloseInputStream = array of Arr2InnerAutoCloseInputStream;
      InnerAutoCloseOutputStream = class external 'android.content.res' name 'AutoCloseOutputStream' (AOParcelFileDescriptor.InnerAutoCloseOutputStream)
      public
        constructor create(para1: ACRAssetFileDescriptor); overload;  // throws java.io.IOException
        procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
        procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
        procedure write(para1: Arr1jbyte); overload; virtual;  // throws java.io.IOException
        procedure write(var para1: array of jbyte); overload; virtual;  // throws java.io.IOException
        procedure write(para1: jint); overload; virtual;  // throws java.io.IOException
      end;

      InnerAutoCloseInputStream = class external 'android.content.res' name 'AutoCloseInputStream' (AOParcelFileDescriptor.InnerAutoCloseInputStream)
      public
        constructor create(para1: ACRAssetFileDescriptor); overload;  // throws java.io.IOException
        function available(): jint; overload; virtual;  // throws java.io.IOException
        function read(): jint; overload; virtual;  // throws java.io.IOException
        function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
        function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
        function read(para1: Arr1jbyte): jint; overload; virtual;  // throws java.io.IOException
        function read(var para1: array of jbyte): jint; overload; virtual;  // throws java.io.IOException
        function skip(para1: jlong): jlong; overload; virtual;  // throws java.io.IOException
        procedure mark(para1: jint); overload; virtual;
        function markSupported(): jboolean; overload; virtual;
        procedure reset(); overload; virtual;  // throws java.io.IOException
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      UNKNOWN_LENGTH = jlong(-1);
  public
    constructor create(para1: AOParcelFileDescriptor; para2: jlong; para3: jlong); overload;
    constructor create(para1: AOParcelFileDescriptor; para2: jlong; para3: jlong; para4: AOBundle); overload;
    function getParcelFileDescriptor(): AOParcelFileDescriptor; overload; virtual;
    function getFileDescriptor(): JIFileDescriptor; overload; virtual;
    function getStartOffset(): jlong; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function getLength(): jlong; overload; virtual;
    function getDeclaredLength(): jlong; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    function createInputStream(): JIFileInputStream; overload; virtual;  // throws java.io.IOException
    function createOutputStream(): JIFileOutputStream; overload; virtual;  // throws java.io.IOException
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  JUZGZIPOutputStream = class external 'java.util.zip' name 'GZIPOutputStream' (JUZDeflaterOutputStream)
  strict protected
    var
      fcrc: JUZCRC32; external name 'crc';
  public
    constructor create(para1: JIOutputStream); overload;  // throws java.io.IOException
    constructor create(para1: JIOutputStream; para2: jboolean); overload;  // throws java.io.IOException
    constructor create(para1: JIOutputStream; para2: jint); overload;  // throws java.io.IOException
    constructor create(para1: JIOutputStream; para2: jint; para3: jboolean); overload;  // throws java.io.IOException
    procedure finish(); overload; virtual;  // throws java.io.IOException
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
  end;

  JUZZipOutputStream = class external 'java.util.zip' name 'ZipOutputStream' (JUZDeflaterOutputStream)
  public
    const
      CENATT = 36;
      CENATX = 38;
      CENCOM = 32;
      CENCRC = 16;
      CENDSK = 34;
      CENEXT = 30;
      CENFLG = 8;
      CENHDR = 46;
      CENHOW = 10;
      CENLEN = 24;
      CENNAM = 28;
      CENOFF = 42;
      CENSIG = jlong(33639248);
      CENSIZ = 20;
      CENTIM = 12;
      CENVEM = 4;
      CENVER = 6;
      DEFLATED = 8;
      ENDCOM = 20;
      ENDHDR = 22;
      ENDOFF = 16;
      ENDSIG = jlong(101010256);
      ENDSIZ = 12;
      ENDSUB = 8;
      ENDTOT = 10;
      EXTCRC = 4;
      EXTHDR = 16;
      EXTLEN = 12;
      EXTSIG = jlong(134695760);
      EXTSIZ = 8;
      LOCCRC = 14;
      LOCEXT = 28;
      LOCFLG = 6;
      LOCHDR = 30;
      LOCHOW = 8;
      LOCLEN = 22;
      LOCNAM = 26;
      LOCSIG = jlong(67324752);
      LOCSIZ = 18;
      LOCTIM = 10;
      LOCVER = 4;
      STORED = 0;
  public
    constructor create(para1: JIOutputStream); overload;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure closeEntry(); overload; virtual;  // throws java.io.IOException
    procedure finish(); overload; virtual;  // throws java.io.IOException
    procedure putNextEntry(para1: JUZZipEntry); overload; virtual;  // throws java.io.IOException
    procedure setComment(para1: JLString); overload; virtual;
    procedure setLevel(para1: jint); overload; virtual;
    procedure setMethod(para1: jint); overload; virtual;
    procedure write(para1: Arr1jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
    procedure write(var para1: array of jbyte; para2: jint; para3: jint); overload; virtual;  // throws java.io.IOException
  end;

  JSAuthProvider = class abstract external 'java.security' name 'AuthProvider' (JSProvider)
  strict protected
    constructor create(para1: JLString; para2: jdouble; para3: JLString); overload;
  public
    procedure login(para1: JSASubject; para2: JSACCallbackHandler); overload; virtual; abstract;  // throws javax.security.auth.login.LoginException
    procedure logout(); overload; virtual; abstract;  // throws javax.security.auth.login.LoginException
    procedure setCallbackHandler(para1: JSACCallbackHandler); overload; virtual; abstract;
  end;

  JUCScheduledThreadPoolExecutor = class external 'java.util.concurrent' name 'ScheduledThreadPoolExecutor' (JUCThreadPoolExecutor, JUCScheduledExecutorService)
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JUCThreadFactory); overload;
    constructor create(para1: jint; para2: JUCRejectedExecutionHandler); overload;
    constructor create(para1: jint; para2: JUCThreadFactory; para3: JUCRejectedExecutionHandler); overload;
  strict protected
    function decorateTask(para1: JLRunnable; para2: JUCRunnableScheduledFuture): JUCRunnableScheduledFuture; overload; virtual;
    function decorateTask(para1: JUCCallable; para2: JUCRunnableScheduledFuture): JUCRunnableScheduledFuture; overload; virtual;
  public
    function schedule(para1: JLRunnable; para2: jlong; para3: JUCTimeUnit): JUCScheduledFuture; overload; virtual;
    function schedule(para1: JUCCallable; para2: jlong; para3: JUCTimeUnit): JUCScheduledFuture; overload; virtual;
    function scheduleAtFixedRate(para1: JLRunnable; para2: jlong; para3: jlong; para4: JUCTimeUnit): JUCScheduledFuture; overload; virtual;
    function scheduleWithFixedDelay(para1: JLRunnable; para2: jlong; para3: jlong; para4: JUCTimeUnit): JUCScheduledFuture; overload; virtual;
    procedure execute(para1: JLRunnable); overload; virtual;
    function submit(para1: JLRunnable): JUCFuture; overload; virtual;
    function submit(para1: JLRunnable; para2: JLObject): JUCFuture; overload; virtual;
    function submit(para1: JUCCallable): JUCFuture; overload; virtual;
    procedure setContinueExistingPeriodicTasksAfterShutdownPolicy(para1: jboolean); overload; virtual;
    function getContinueExistingPeriodicTasksAfterShutdownPolicy(): jboolean; overload; virtual;
    procedure setExecuteExistingDelayedTasksAfterShutdownPolicy(para1: jboolean); overload; virtual;
    function getExecuteExistingDelayedTasksAfterShutdownPolicy(): jboolean; overload; virtual;
    procedure setRemoveOnCancelPolicy(para1: jboolean); overload; virtual;
    function getRemoveOnCancelPolicy(): jboolean; overload; virtual;
    procedure shutdown(); overload; virtual;
    function shutdownNow(): JUList; overload; virtual;
    function getQueue(): JUCBlockingQueue; overload; virtual;
  end;

  ATActivityInstrumentationTestCase = class abstract external 'android.test' name 'ActivityInstrumentationTestCase' (ATActivityTestCase)
  public
    constructor create(para1: JLString; para2: JLClass); overload;
    constructor create(para1: JLString; para2: JLClass; para3: jboolean); overload;
    function getActivity(): AAActivity; overload; virtual;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    procedure testActivityTestCaseSetUpProperly(); overload; virtual;  // throws java.lang.Exception
  end;

  ATActivityInstrumentationTestCase2 = class abstract external 'android.test' name 'ActivityInstrumentationTestCase2' (ATActivityTestCase)
  public
    constructor create(para1: JLString; para2: JLClass); overload;
    constructor create(para1: JLClass); overload;
    function getActivity(): AAActivity; overload; virtual;
    procedure setActivityIntent(para1: ACIntent); overload; virtual;
    procedure setActivityInitialTouchMode(para1: jboolean); overload; virtual;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
    procedure runTest(); overload; virtual;  // throws java.lang.Throwable
  end;

  ATActivityUnitTestCase = class abstract external 'android.test' name 'ActivityUnitTestCase' (ATActivityTestCase)
  public
    constructor create(para1: JLClass); overload;
    function getActivity(): AAActivity; overload; virtual;
  strict protected
    procedure setUp(); overload; virtual;  // throws java.lang.Exception
    function startActivity(para1: ACIntent; para2: AOBundle; para3: JLObject): AAActivity; overload; virtual;
    procedure tearDown(); overload; virtual;  // throws java.lang.Exception
  public
    procedure setApplication(para1: AAApplication); overload; virtual;
    procedure setActivityContext(para1: ACContext); overload; virtual;
    function getRequestedOrientation(): jint; overload; virtual;
    function getStartedActivityIntent(): ACIntent; overload; virtual;
    function getStartedActivityRequest(): jint; overload; virtual;
    function isFinishCalled(): jboolean; overload; virtual;
    function getFinishedActivityRequest(): jint; overload; virtual;
  end;

  OAHIDefaultHttpClientConnection = class external 'org.apache.http.impl' name 'DefaultHttpClientConnection' (OAHISocketHttpClientConnection)
  public
    constructor create(); overload;
    procedure bind(para1: JNSocket; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    function toString(): JLString; overload; virtual;
  end;

  OAHICDefaultClientConnection = class external 'org.apache.http.impl.conn' name 'DefaultClientConnection' (OAHISocketHttpClientConnection, OAHCOperatedClientConnection)
  public
    constructor create(); overload;
    function getTargetHost(): OAHHttpHost; overload; virtual; final;
    function isSecure(): jboolean; overload; virtual; final;
    function getSocket(): JNSocket; overload; virtual; final;
    procedure opening(para1: JNSocket; para2: OAHHttpHost); overload; virtual;  // throws java.io.IOException
    procedure openCompleted(para1: jboolean; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure shutdown(); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
  strict protected
    function createSessionInputBuffer(para1: JNSocket; para2: jint; para3: OAHPHttpParams): OAHISessionInputBuffer; overload; virtual;  // throws java.io.IOException
    function createSessionOutputBuffer(para1: JNSocket; para2: jint; para3: OAHPHttpParams): OAHISessionOutputBuffer; overload; virtual;  // throws java.io.IOException
    function createResponseParser(para1: OAHISessionInputBuffer; para2: OAHHttpResponseFactory; para3: OAHPHttpParams): OAHIHttpMessageParser; overload; virtual;
  public
    procedure update(para1: JNSocket; para2: OAHHttpHost; para3: jboolean; para4: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    function receiveResponseHeader(): OAHHttpResponse; overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
    procedure sendRequestHeader(para1: OAHHttpRequest); overload; virtual;  // throws org.apache.http.HttpException, java.io.IOException
  end;

  OAHICAbstractPooledConnAdapter = class abstract external 'org.apache.http.impl.conn' name 'AbstractPooledConnAdapter' (OAHICAbstractClientConnAdapter)
  strict protected
    var
      fpoolEntry: OAHICAbstractPoolEntry; external name 'poolEntry';
  strict protected
    constructor create(para1: OAHCClientConnectionManager; para2: OAHICAbstractPoolEntry); overload;
    procedure assertAttached(); overload; virtual; final;
    procedure detach(); overload; virtual;
  public
    function getRoute(): OAHCRHttpRoute; overload; virtual;
    procedure open(para1: OAHCRHttpRoute; para2: OAHPHttpContext; para3: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure tunnelTarget(para1: jboolean; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure tunnelProxy(para1: OAHHttpHost; para2: jboolean; para3: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure layerProtocol(para1: OAHPHttpContext; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure shutdown(); overload; virtual;  // throws java.io.IOException
    function getState(): JLObject; overload; virtual;
    procedure setState(para1: JLObject); overload; virtual;
  end;

  OAHIDefaultHttpServerConnection = class external 'org.apache.http.impl' name 'DefaultHttpServerConnection' (OAHISocketHttpServerConnection)
  public
    constructor create(); overload;
    procedure bind(para1: JNSocket; para2: OAHPHttpParams); overload; virtual;  // throws java.io.IOException
    function toString(): JLString; overload; virtual;
  end;

  OAHCMHttpDelete = class external 'org.apache.http.client.methods' name 'HttpDelete' (OAHCMHttpRequestBase)
  public
    const
      METHOD_NAME = 'DELETE';
  public
    constructor create(); overload;
    constructor create(para1: JNURI); overload;
    constructor create(para1: JLString); overload;
    function getMethod(): JLString; overload; virtual;
  end;

  OAHCMHttpEntityEnclosingRequestBase = class abstract external 'org.apache.http.client.methods' name 'HttpEntityEnclosingRequestBase' (OAHCMHttpRequestBase, OAHHttpEntityEnclosingRequest)
  public
    constructor create(); overload;
    function getEntity(): OAHHttpEntity; overload; virtual;
    procedure setEntity(para1: OAHHttpEntity); overload; virtual;
    function expectContinue(): jboolean; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  OAHCMHttpGet = class external 'org.apache.http.client.methods' name 'HttpGet' (OAHCMHttpRequestBase)
  public
    const
      METHOD_NAME = 'GET';
  public
    constructor create(); overload;
    constructor create(para1: JNURI); overload;
    constructor create(para1: JLString); overload;
    function getMethod(): JLString; overload; virtual;
  end;

  OAHCMHttpHead = class external 'org.apache.http.client.methods' name 'HttpHead' (OAHCMHttpRequestBase)
  public
    const
      METHOD_NAME = 'HEAD';
  public
    constructor create(); overload;
    constructor create(para1: JNURI); overload;
    constructor create(para1: JLString); overload;
    function getMethod(): JLString; overload; virtual;
  end;

  OAHCMHttpOptions = class external 'org.apache.http.client.methods' name 'HttpOptions' (OAHCMHttpRequestBase)
  public
    const
      METHOD_NAME = 'OPTIONS';
  public
    constructor create(); overload;
    constructor create(para1: JNURI); overload;
    constructor create(para1: JLString); overload;
    function getMethod(): JLString; overload; virtual;
    function getAllowedMethods(para1: OAHHttpResponse): JUSet; overload; virtual;
  end;

  OAHCMHttpTrace = class external 'org.apache.http.client.methods' name 'HttpTrace' (OAHCMHttpRequestBase)
  public
    const
      METHOD_NAME = 'TRACE';
  public
    constructor create(); overload;
    constructor create(para1: JNURI); overload;
    constructor create(para1: JLString); overload;
    function getMethod(): JLString; overload; virtual;
  end;

  OAHICEntityEnclosingRequestWrapper = class external 'org.apache.http.impl.client' name 'EntityEnclosingRequestWrapper' (OAHICRequestWrapper, OAHHttpEntityEnclosingRequest)
  public
    constructor create(para1: OAHHttpEntityEnclosingRequest); overload;  // throws org.apache.http.ProtocolException
    function getEntity(): OAHHttpEntity; overload; virtual;
    procedure setEntity(para1: OAHHttpEntity); overload; virtual;
    function expectContinue(): jboolean; overload; virtual;
    function isRepeatable(): jboolean; overload; virtual;
  end;

  OAHICRFC2965Spec = class external 'org.apache.http.impl.cookie' name 'RFC2965Spec' (OAHICRFC2109Spec)
  public
    constructor create(); overload;
    constructor create(para1: Arr1JLString; para2: jboolean); overload;
    constructor create(const para1: array of JLString; para2: jboolean); overload;
    function parse(para1: OAHHeader; para2: OAHCCookieOrigin): JUList; overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    procedure validate(para1: OAHCCookie; para2: OAHCCookieOrigin); overload; virtual;  // throws org.apache.http.cookie.MalformedCookieException
    function match(para1: OAHCCookie; para2: OAHCCookieOrigin): jboolean; overload; virtual;
  strict protected
    procedure formatCookieAsVer(para1: OAHUCharArrayBuffer; para2: OAHCCookie; para3: jint); overload; virtual;
  public
    function getVersion(): jint; overload; virtual;
    function getVersionHeader(): OAHHeader; overload; virtual;
  end;

  JTSimpleDateFormat = class external 'java.text' name 'SimpleDateFormat' (JTDateFormat)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JTDateFormatSymbols); overload;
    constructor create(para1: JLString; para2: JULocale); overload;
    procedure applyLocalizedPattern(para1: JLString); overload; virtual;
    procedure applyPattern(para1: JLString); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function formatToCharacterIterator(para1: JLObject): JTAttributedCharacterIterator; overload; virtual;
    function format(para1: JUDate; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual;
    function get2DigitYearStart(): JUDate; overload; virtual;
    function getDateFormatSymbols(): JTDateFormatSymbols; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function parse(para1: JLString; para2: JTParsePosition): JUDate; overload; virtual;
    procedure set2DigitYearStart(para1: JUDate); overload; virtual;
    procedure setDateFormatSymbols(para1: JTDateFormatSymbols); overload; virtual;
    function toLocalizedPattern(): JLString; overload; virtual;
    function toPattern(): JLString; overload; virtual;
  end;

  JTChoiceFormat = class external 'java.text' name 'ChoiceFormat' (JTNumberFormat)
  public
    constructor create(para1: Arr1jdouble; para2: Arr1JLString); overload;
    constructor create(const para1: array of jdouble; const para2: array of JLString); overload;
    constructor create(para1: JLString); overload;
    procedure applyPattern(para1: JLString); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function format(para1: jdouble; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual;
    function format(para1: jlong; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual;
    function getFormats(): Arr1JLObject; overload; virtual;
    function getLimits(): Arr1jdouble; overload; virtual;
    function hashCode(): jint; overload; virtual;
    class function nextDouble(para1: jdouble): jdouble; static; overload; final;
    class function nextDouble(para1: jdouble; para2: jboolean): jdouble; static; overload;
    function parse(para1: JLString; para2: JTParsePosition): JLNumber; overload; virtual;
    class function previousDouble(para1: jdouble): jdouble; static; overload; final;
    procedure setChoices(para1: Arr1jdouble; para2: Arr1JLString); overload; virtual;
    procedure setChoices(var para1: array of jdouble; var para2: array of JLString); overload; virtual;
    function toPattern(): JLString; overload; virtual;
  end;

  JTDecimalFormat = class external 'java.text' name 'DecimalFormat' (JTNumberFormat)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: JTDecimalFormatSymbols); overload;
    procedure applyLocalizedPattern(para1: JLString); overload; virtual;
    procedure applyPattern(para1: JLString); overload; virtual;
    function clone(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function formatToCharacterIterator(para1: JLObject): JTAttributedCharacterIterator; overload; virtual;
    function format(para1: jdouble; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual;
    function format(para1: jlong; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual;
    function format(para1: JLObject; para2: JLStringBuffer; para3: JTFieldPosition): JLStringBuffer; overload; virtual; final;
    function getDecimalFormatSymbols(): JTDecimalFormatSymbols; overload; virtual;
    function getCurrency(): JUCurrency; overload; virtual;
    function getGroupingSize(): jint; overload; virtual;
    function getNegativePrefix(): JLString; overload; virtual;
    function getNegativeSuffix(): JLString; overload; virtual;
    function getPositivePrefix(): JLString; overload; virtual;
    function getPositiveSuffix(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function isDecimalSeparatorAlwaysShown(): jboolean; overload; virtual;
    function isParseBigDecimal(): jboolean; overload; virtual;
    procedure setParseIntegerOnly(para1: jboolean); overload; virtual;
    function isParseIntegerOnly(): jboolean; overload; virtual;
    function parse(para1: JLString; para2: JTParsePosition): JLNumber; overload; virtual;
    procedure setDecimalFormatSymbols(para1: JTDecimalFormatSymbols); overload; virtual;
    procedure setCurrency(para1: JUCurrency); overload; virtual;
    procedure setDecimalSeparatorAlwaysShown(para1: jboolean); overload; virtual;
    procedure setGroupingSize(para1: jint); overload; virtual;
    procedure setGroupingUsed(para1: jboolean); overload; virtual;
    function isGroupingUsed(): jboolean; overload; virtual;
    procedure setMaximumFractionDigits(para1: jint); overload; virtual;
    procedure setMaximumIntegerDigits(para1: jint); overload; virtual;
    procedure setMinimumFractionDigits(para1: jint); overload; virtual;
    procedure setMinimumIntegerDigits(para1: jint); overload; virtual;
    function getMultiplier(): jint; overload; virtual;
    procedure setMultiplier(para1: jint); overload; virtual;
    procedure setNegativePrefix(para1: JLString); overload; virtual;
    procedure setNegativeSuffix(para1: JLString); overload; virtual;
    procedure setPositivePrefix(para1: JLString); overload; virtual;
    procedure setPositiveSuffix(para1: JLString); overload; virtual;
    procedure setParseBigDecimal(para1: jboolean); overload; virtual;
    function toLocalizedPattern(): JLString; overload; virtual;
    function toPattern(): JLString; overload; virtual;
    function getRoundingMode(): JMRoundingMode; overload; virtual;
    procedure setRoundingMode(para1: JMRoundingMode); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ATMMockApplication = class external 'android.test.mock' name 'MockApplication' (AAApplication)
  public
    constructor create(); overload;
    procedure onCreate(); overload; virtual;
    procedure onTerminate(); overload; virtual;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
  end;

  AAAccessibilityService = class abstract external 'android.accessibilityservice' name 'AccessibilityService' (AAService)
  public
    const
      GESTURE_SWIPE_DOWN = 2;
      GESTURE_SWIPE_DOWN_AND_LEFT = 15;
      GESTURE_SWIPE_DOWN_AND_RIGHT = 16;
      GESTURE_SWIPE_DOWN_AND_UP = 8;
      GESTURE_SWIPE_LEFT = 3;
      GESTURE_SWIPE_LEFT_AND_DOWN = 10;
      GESTURE_SWIPE_LEFT_AND_RIGHT = 5;
      GESTURE_SWIPE_LEFT_AND_UP = 9;
      GESTURE_SWIPE_RIGHT = 4;
      GESTURE_SWIPE_RIGHT_AND_DOWN = 12;
      GESTURE_SWIPE_RIGHT_AND_LEFT = 6;
      GESTURE_SWIPE_RIGHT_AND_UP = 11;
      GESTURE_SWIPE_UP = 1;
      GESTURE_SWIPE_UP_AND_DOWN = 7;
      GESTURE_SWIPE_UP_AND_LEFT = 13;
      GESTURE_SWIPE_UP_AND_RIGHT = 14;
      GLOBAL_ACTION_BACK = 1;
      GLOBAL_ACTION_HOME = 2;
      GLOBAL_ACTION_NOTIFICATIONS = 4;
      GLOBAL_ACTION_POWER_DIALOG = 6;
      GLOBAL_ACTION_QUICK_SETTINGS = 5;
      GLOBAL_ACTION_RECENTS = 3;
      SERVICE_INTERFACE = 'android.accessibilityservice.AccessibilityService';
      SERVICE_META_DATA = 'android.accessibilityservice';
  public
    constructor create(); overload;
    procedure onAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual; abstract;
    procedure onInterrupt(); overload; virtual; abstract;
  strict protected
    procedure onServiceConnected(); overload; virtual;
    function onGesture(para1: jint): jboolean; overload; virtual;
    function onKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
  public
    function getWindows(): JUList; overload; virtual;
    function getRootInActiveWindow(): AVAAccessibilityNodeInfo; overload; virtual;
    function performGlobalAction(para1: jint): jboolean; overload; virtual; final;
    function findFocus(para1: jint): AVAAccessibilityNodeInfo; overload; virtual;
    function getServiceInfo(): AAAccessibilityServiceInfo; overload; virtual; final;
    procedure setServiceInfo(para1: AAAccessibilityServiceInfo); overload; virtual; final;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
  end;

  AAIntentService = class abstract external 'android.app' name 'IntentService' (AAService)
  public
    constructor create(para1: JLString); overload;
    procedure setIntentRedelivery(para1: jboolean); overload; virtual;
    procedure onCreate(); overload; virtual;
    procedure onStart(para1: ACIntent; para2: jint); overload; virtual;
    function onStartCommand(para1: ACIntent; para2: jint; para3: jint): jint; overload; virtual;
    procedure onDestroy(); overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual;
  strict protected
    procedure onHandleIntent(para1: ACIntent); overload; virtual; abstract;
  end;

  AIAbstractInputMethodService = class abstract external 'android.inputmethodservice' name 'AbstractInputMethodService' (AAService, AVKeyEvent.InnerCallback)
  public
    type
      InnerAbstractInputMethodSessionImpl = class;
      Arr1InnerAbstractInputMethodSessionImpl = array of InnerAbstractInputMethodSessionImpl;
      Arr2InnerAbstractInputMethodSessionImpl = array of Arr1InnerAbstractInputMethodSessionImpl;
      Arr3InnerAbstractInputMethodSessionImpl = array of Arr2InnerAbstractInputMethodSessionImpl;
      InnerAbstractInputMethodImpl = class;
      Arr1InnerAbstractInputMethodImpl = array of InnerAbstractInputMethodImpl;
      Arr2InnerAbstractInputMethodImpl = array of Arr1InnerAbstractInputMethodImpl;
      Arr3InnerAbstractInputMethodImpl = array of Arr2InnerAbstractInputMethodImpl;
      InnerAbstractInputMethodSessionImpl = class abstract external 'android.inputmethodservice' name 'AbstractInputMethodSessionImpl' 
      end;

      InnerAbstractInputMethodImpl = class abstract external 'android.inputmethodservice' name 'AbstractInputMethodImpl' 
      end;

  public
    constructor create(); overload;
    function getKeyDispatcherState(): AVKeyEvent.InnerDispatcherState; overload; virtual;
    function onCreateInputMethodInterface(): AIAbstractInputMethodService.InnerAbstractInputMethodImpl; overload; virtual; abstract;
    function onCreateInputMethodSessionInterface(): AIAbstractInputMethodService.InnerAbstractInputMethodSessionImpl; overload; virtual; abstract;
  strict protected
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
  public
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  end;

  ANVpnService = class external 'android.net' name 'VpnService' (AAService)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.net' name 'Builder' 
      end;

  public
    const
      SERVICE_INTERFACE = 'android.net.VpnService';
  public
    constructor create(); overload;
    class function prepare(para1: ACContext): ACIntent; static; overload;
    function protect(para1: jint): jboolean; overload; virtual;
    function protect(para1: JNSocket): jboolean; overload; virtual;
    function protect(para1: JNDatagramSocket): jboolean; overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual;
    procedure onRevoke(); overload; virtual;
  end;

  ASTSpellCheckerService = class abstract external 'android.service.textservice' name 'SpellCheckerService' (AAService)
  public
    type
      InnerSession = class;
      Arr1InnerSession = array of InnerSession;
      Arr2InnerSession = array of Arr1InnerSession;
      Arr3InnerSession = array of Arr2InnerSession;
      InnerSession = class abstract external 'android.service.textservice' name 'Session' (JLObject)
      public
        constructor create(); overload;
        procedure onCreate(); overload; virtual; abstract;
        function onGetSuggestions(para1: AVTTextInfo; para2: jint): AVTSuggestionsInfo; overload; virtual; abstract;
        function onGetSuggestionsMultiple(para1: Arr1AVTTextInfo; para2: jint; para3: jboolean): Arr1AVTSuggestionsInfo; overload; virtual;
        function onGetSuggestionsMultiple(var para1: array of AVTTextInfo; para2: jint; para3: jboolean): Arr1AVTSuggestionsInfo; overload; virtual;
        function onGetSentenceSuggestionsMultiple(para1: Arr1AVTTextInfo; para2: jint): Arr1AVTSentenceSuggestionsInfo; overload; virtual;
        function onGetSentenceSuggestionsMultiple(var para1: array of AVTTextInfo; para2: jint): Arr1AVTSentenceSuggestionsInfo; overload; virtual;
        procedure onCancel(); overload; virtual;
        procedure onClose(); overload; virtual;
        function getLocale(): JLString; overload; virtual;
        function getBundle(): AOBundle; overload; virtual;
      end;

  public
    const
      SERVICE_INTERFACE = 'android.service.textservice.SpellCheckerService';
  public
    constructor create(); overload;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
    function createSession(): ASTSpellCheckerService.InnerSession; overload; virtual; abstract;
  end;

  ASWWallpaperService = class abstract external 'android.service.wallpaper' name 'WallpaperService' (AAService)
  public
    type
      InnerEngine = class;
      Arr1InnerEngine = array of InnerEngine;
      Arr2InnerEngine = array of Arr1InnerEngine;
      Arr3InnerEngine = array of Arr2InnerEngine;
      InnerEngine = class external 'android.service.wallpaper' name 'Engine' 
      end;

  public
    const
      SERVICE_INTERFACE = 'android.service.wallpaper.WallpaperService';
      SERVICE_META_DATA = 'android.service.wallpaper';
  public
    constructor create(); overload;
    procedure onCreate(); overload; virtual;
    procedure onDestroy(); overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
    function onCreateEngine(): ASWWallpaperService.InnerEngine; overload; virtual; abstract;
  strict protected
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
  end;

  ASRecognitionService = class abstract external 'android.speech' name 'RecognitionService' (AAService)
  public
    type
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = class external 'android.speech' name 'Callback' 
      end;

  public
    const
      SERVICE_INTERFACE = 'android.speech.RecognitionService';
      SERVICE_META_DATA = 'android.speech';
  public
    constructor create(); overload;
  strict protected
    procedure onStartListening(para1: ACIntent; para2: ASRecognitionService.InnerCallback); overload; virtual; abstract;
    procedure onCancel(para1: ASRecognitionService.InnerCallback); overload; virtual; abstract;
    procedure onStopListening(para1: ASRecognitionService.InnerCallback); overload; virtual; abstract;
  public
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
    procedure onDestroy(); overload; virtual;
  end;

  ASTTextToSpeechService = class abstract external 'android.speech.tts' name 'TextToSpeechService' (AAService)
  public
    constructor create(); overload;
    procedure onCreate(); overload; virtual;
    procedure onDestroy(); overload; virtual;
  strict protected
    function onIsLanguageAvailable(para1: JLString; para2: JLString; para3: JLString): jint; overload; virtual; abstract;
    function onGetLanguage(): Arr1JLString; overload; virtual; abstract;
    function onLoadLanguage(para1: JLString; para2: JLString; para3: JLString): jint; overload; virtual; abstract;
    procedure onStop(); overload; virtual; abstract;
    procedure onSynthesizeText(para1: ASTSynthesisRequest; para2: ASTSynthesisCallback); overload; virtual; abstract;
    function onGetFeaturesForLanguage(para1: JLString; para2: JLString; para3: JLString): JUSet; overload; virtual;
  public
    function onGetVoices(): JUList; overload; virtual;
    function onGetDefaultVoiceNameFor(para1: JLString; para2: JLString; para3: JLString): JLString; overload; virtual;
    function onLoadVoice(para1: JLString): jint; overload; virtual;
    function onIsValidVoiceName(para1: JLString): jint; overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual;
  end;

  AWRemoteViewsService = class abstract external 'android.widget' name 'RemoteViewsService' (AAService)
  public
    type
      InnerRemoteViewsFactory = interface;
      Arr1InnerRemoteViewsFactory = array of InnerRemoteViewsFactory;
      Arr2InnerRemoteViewsFactory = array of Arr1InnerRemoteViewsFactory;
      Arr3InnerRemoteViewsFactory = array of Arr2InnerRemoteViewsFactory;
      InnerRemoteViewsFactory = interface external 'android.widget' name 'RemoteViewsFactory' 
        procedure onCreate(); overload;
        procedure onDataSetChanged(); overload;
        procedure onDestroy(); overload;
        function getCount(): jint; overload;
        function getViewAt(para1: jint): AWRemoteViews; overload;
        function getLoadingView(): AWRemoteViews; overload;
        function getViewTypeCount(): jint; overload;
        function getItemId(para1: jint): jlong; overload;
        function hasStableIds(): jboolean; overload;
      end;

  public
    constructor create(); overload;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual;
    function onGetViewFactory(para1: ACIntent): AWRemoteViewsService.InnerRemoteViewsFactory; overload; virtual; abstract;
  end;

  AABBackupAgentHelper = class external 'android.app.backup' name 'BackupAgentHelper' (AABBackupAgent)
  public
    constructor create(); overload;
    procedure onBackup(para1: AOParcelFileDescriptor; para2: AABBackupDataOutput; para3: AOParcelFileDescriptor); overload; virtual;  // throws java.io.IOException
    procedure onRestore(para1: AABBackupDataInput; para2: jint; para3: AOParcelFileDescriptor); overload; virtual;  // throws java.io.IOException
    procedure addHelper(para1: JLString; para2: AABBackupHelper); overload; virtual;
  end;

  AGDAnimationDrawable = class external 'android.graphics.drawable' name 'AnimationDrawable' (AGDDrawableContainer, JLRunnable, AGDAnimatable)
  public
    constructor create(); overload;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    procedure start(); overload; virtual;
    procedure stop(); overload; virtual;
    function isRunning(): jboolean; overload; virtual;
    procedure run(); overload; virtual;
    procedure unscheduleSelf(para1: JLRunnable); overload; virtual;
    function getNumberOfFrames(): jint; overload; virtual;
    function getFrame(para1: jint): AGDDrawable; overload; virtual;
    function getDuration(para1: jint): jint; overload; virtual;
    function isOneShot(): jboolean; overload; virtual;
    procedure setOneShot(para1: jboolean); overload; virtual;
    procedure addFrame(para1: AGDDrawable; para2: jint); overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AGDLevelListDrawable = class external 'android.graphics.drawable' name 'LevelListDrawable' (AGDDrawableContainer)
  public
    constructor create(); overload;
    procedure addLevel(para1: jint; para2: jint; para3: AGDDrawable); overload; virtual;
  strict protected
    function onLevelChange(para1: jint): jboolean; overload; virtual;
  public
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AGDStateListDrawable = class external 'android.graphics.drawable' name 'StateListDrawable' (AGDDrawableContainer)
  public
    constructor create(); overload;
    procedure addState(para1: Arr1jint; para2: AGDDrawable); overload; virtual;
    procedure addState(var para1: array of jint; para2: AGDDrawable); overload; virtual;
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
  public
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AGDTransitionDrawable = class external 'android.graphics.drawable' name 'TransitionDrawable' (AGDLayerDrawable, AGDDrawable.InnerCallback)
  public
    constructor create(para1: Arr1AGDDrawable); overload;
    constructor create(const para1: array of AGDDrawable); overload;
    procedure startTransition(para1: jint); overload; virtual;
    procedure resetTransition(); overload; virtual;
    procedure reverseTransition(para1: jint); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    procedure setCrossFadeEnabled(para1: jboolean); overload; virtual;
    function isCrossFadeEnabled(): jboolean; overload; virtual;
  end;

  AGDPaintDrawable = class external 'android.graphics.drawable' name 'PaintDrawable' (AGDShapeDrawable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    procedure setCornerRadius(para1: jfloat); overload; virtual;
    procedure setCornerRadii(para1: Arr1jfloat); overload; virtual;
    procedure setCornerRadii(var para1: array of jfloat); overload; virtual;
  strict protected
    function inflateTag(para1: JLString; para2: ACRResources; para3: OXVXmlPullParser; para4: AUAttributeSet): jboolean; overload; virtual;
  end;

  AAActivity = class external 'android.app' name 'Activity' (AVContextThemeWrapper, AVLayoutInflater.InnerFactory2, AVWindow.InnerCallback, AVKeyEvent.InnerCallback, AVView.InnerOnCreateContextMenuListener, ACComponentCallbacks2)
  public
    const
      DEFAULT_KEYS_DIALER = 1;
      DEFAULT_KEYS_DISABLE = 0;
      DEFAULT_KEYS_SEARCH_GLOBAL = 4;
      DEFAULT_KEYS_SEARCH_LOCAL = 3;
      DEFAULT_KEYS_SHORTCUT = 2;
  strict protected
    final class var
      fFOCUSED_STATE_SET: Arr1jint; external name 'FOCUSED_STATE_SET';
  public
    const
      RESULT_CANCELED = 0;
      RESULT_FIRST_USER = 1;
      RESULT_OK = -1;
  public
    constructor create(); overload;
    function getIntent(): ACIntent; overload; virtual;
    procedure setIntent(para1: ACIntent); overload; virtual;
    function getApplication(): AAApplication; overload; virtual; final;
    function isChild(): jboolean; overload; virtual; final;
    function getParent(): AAActivity; overload; virtual; final;
    function getWindowManager(): AVWindowManager; overload; virtual;
    function getWindow(): AVWindow; overload; virtual;
    function getLoaderManager(): AALoaderManager; overload; virtual;
    function getCurrentFocus(): AVView; overload; virtual;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
  public
    procedure onCreate(para1: AOBundle; para2: AOPersistableBundle); overload; virtual;
  strict protected
    procedure onRestoreInstanceState(para1: AOBundle); overload; virtual;
  public
    procedure onRestoreInstanceState(para1: AOBundle; para2: AOPersistableBundle); overload; virtual;
  strict protected
    procedure onPostCreate(para1: AOBundle); overload; virtual;
  public
    procedure onPostCreate(para1: AOBundle; para2: AOPersistableBundle); overload; virtual;
  strict protected
    procedure onStart(); overload; virtual;
    procedure onRestart(); overload; virtual;
    procedure onResume(); overload; virtual;
    procedure onPostResume(); overload; virtual;
    procedure onNewIntent(para1: ACIntent); overload; virtual;
    procedure onSaveInstanceState(para1: AOBundle); overload; virtual;
  public
    procedure onSaveInstanceState(para1: AOBundle; para2: AOPersistableBundle); overload; virtual;
  strict protected
    procedure onPause(); overload; virtual;
    procedure onUserLeaveHint(); overload; virtual;
  public
    function onCreateThumbnail(para1: AGBitmap; para2: AGCanvas): jboolean; overload; virtual;
    function onCreateDescription(): JLCharSequence; overload; virtual;
    procedure onProvideAssistData(para1: AOBundle); overload; virtual;
  strict protected
    procedure onStop(); overload; virtual;
    procedure onDestroy(); overload; virtual;
  public
    procedure reportFullyDrawn(); overload; virtual;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    function getLastNonConfigurationInstance(): JLObject; overload; virtual;
    function onRetainNonConfigurationInstance(): JLObject; overload; virtual;
    procedure onLowMemory(); overload; virtual;
    procedure onTrimMemory(para1: jint); overload; virtual;
    function getFragmentManager(): AAFragmentManager; overload; virtual;
    procedure onAttachFragment(para1: AAFragment); overload; virtual;
    function managedQuery(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString): ADCursor; overload; virtual; final;
    function managedQuery(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString): ADCursor; overload; virtual; final;
    procedure startManagingCursor(para1: ADCursor); overload; virtual;
    procedure stopManagingCursor(para1: ADCursor); overload; virtual;
    function findViewById(para1: jint): AVView; overload; virtual;
    function getActionBar(): AAActionBar; overload; virtual;
    procedure setActionBar(para1: AWToolbar); overload; virtual;
    procedure setContentView(para1: jint); overload; virtual;
    procedure setContentView(para1: AVView); overload; virtual;
    procedure setContentView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure addContentView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    function getContentTransitionManager(): ATTransitionManager; overload; virtual;
    procedure setContentTransitionManager(para1: ATTransitionManager); overload; virtual;
    function getContentScene(): ATScene; overload; virtual;
    procedure setFinishOnTouchOutside(para1: jboolean); overload; virtual;
    procedure setDefaultKeyMode(para1: jint); overload; virtual; final;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyLongPress(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
    procedure onBackPressed(); overload; virtual;
    function onKeyShortcut(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure onUserInteraction(); overload; virtual;
    procedure onWindowAttributesChanged(para1: AVWindowManager.InnerLayoutParams); overload; virtual;
    procedure onContentChanged(); overload; virtual;
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    function hasWindowFocus(): jboolean; overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchKeyShortcutEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    function onCreatePanelView(para1: jint): AVView; overload; virtual;
    function onCreatePanelMenu(para1: jint; para2: AVMenu): jboolean; overload; virtual;
    function onPreparePanel(para1: jint; para2: AVView; para3: AVMenu): jboolean; overload; virtual;
    function onMenuOpened(para1: jint; para2: AVMenu): jboolean; overload; virtual;
    function onMenuItemSelected(para1: jint; para2: AVMenuItem): jboolean; overload; virtual;
    procedure onPanelClosed(para1: jint; para2: AVMenu); overload; virtual;
    procedure invalidateOptionsMenu(); overload; virtual;
    function onCreateOptionsMenu(para1: AVMenu): jboolean; overload; virtual;
    function onPrepareOptionsMenu(para1: AVMenu): jboolean; overload; virtual;
    function onOptionsItemSelected(para1: AVMenuItem): jboolean; overload; virtual;
    function onNavigateUp(): jboolean; overload; virtual;
    function onNavigateUpFromChild(para1: AAActivity): jboolean; overload; virtual;
    procedure onCreateNavigateUpTaskStack(para1: AATaskStackBuilder); overload; virtual;
    procedure onPrepareNavigateUpTaskStack(para1: AATaskStackBuilder); overload; virtual;
    procedure onOptionsMenuClosed(para1: AVMenu); overload; virtual;
    procedure openOptionsMenu(); overload; virtual;
    procedure closeOptionsMenu(); overload; virtual;
    procedure onCreateContextMenu(para1: AVContextMenu; para2: AVView; para3: AVContextMenu.InnerContextMenuInfo); overload; virtual;
    procedure registerForContextMenu(para1: AVView); overload; virtual;
    procedure unregisterForContextMenu(para1: AVView); overload; virtual;
    procedure openContextMenu(para1: AVView); overload; virtual;
    procedure closeContextMenu(); overload; virtual;
    function onContextItemSelected(para1: AVMenuItem): jboolean; overload; virtual;
    procedure onContextMenuClosed(para1: AVMenu); overload; virtual;
  strict protected
    function onCreateDialog(para1: jint): AADialog; overload; virtual;
    function onCreateDialog(para1: jint; para2: AOBundle): AADialog; overload; virtual;
    procedure onPrepareDialog(para1: jint; para2: AADialog); overload; virtual;
    procedure onPrepareDialog(para1: jint; para2: AADialog; para3: AOBundle); overload; virtual;
  public
    procedure showDialog(para1: jint); overload; virtual; final;
    function showDialog(para1: jint; para2: AOBundle): jboolean; overload; virtual; final;
    procedure dismissDialog(para1: jint); overload; virtual; final;
    procedure removeDialog(para1: jint); overload; virtual; final;
    function onSearchRequested(): jboolean; overload; virtual;
    procedure startSearch(para1: JLString; para2: jboolean; para3: AOBundle; para4: jboolean); overload; virtual;
    procedure triggerSearch(para1: JLString; para2: AOBundle); overload; virtual;
    procedure takeKeyEvents(para1: jboolean); overload; virtual;
    function requestWindowFeature(para1: jint): jboolean; overload; virtual; final;
    procedure setFeatureDrawableResource(para1: jint; para2: jint); overload; virtual; final;
    procedure setFeatureDrawableUri(para1: jint; para2: ANUri); overload; virtual; final;
    procedure setFeatureDrawable(para1: jint; para2: AGDDrawable); overload; virtual; final;
    procedure setFeatureDrawableAlpha(para1: jint; para2: jint); overload; virtual; final;
    function getLayoutInflater(): AVLayoutInflater; overload; virtual;
    function getMenuInflater(): AVMenuInflater; overload; virtual;
  strict protected
    procedure onApplyThemeResource(para1: ACRResources.InnerTheme; para2: jint; para3: jboolean); overload; virtual;
  public
    procedure startActivityForResult(para1: ACIntent; para2: jint); overload; virtual;
    procedure startActivityForResult(para1: ACIntent; para2: jint; para3: AOBundle); overload; virtual;
    procedure startIntentSenderForResult(para1: ACIntentSender; para2: jint; para3: ACIntent; para4: jint; para5: jint; para6: jint); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure startIntentSenderForResult(para1: ACIntentSender; para2: jint; para3: ACIntent; para4: jint; para5: jint; para6: jint; para7: AOBundle); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure startActivity(para1: ACIntent); overload; virtual;
    procedure startActivity(para1: ACIntent; para2: AOBundle); overload; virtual;
    procedure startActivities(para1: Arr1ACIntent); overload; virtual;
    procedure startActivities(var para1: array of ACIntent); overload; virtual;
    procedure startActivities(para1: Arr1ACIntent; para2: AOBundle); overload; virtual;
    procedure startActivities(var para1: array of ACIntent; para2: AOBundle); overload; virtual;
    procedure startIntentSender(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: jint; para5: jint); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure startIntentSender(para1: ACIntentSender; para2: ACIntent; para3: jint; para4: jint; para5: jint; para6: AOBundle); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    function startActivityIfNeeded(para1: ACIntent; para2: jint): jboolean; overload; virtual;
    function startActivityIfNeeded(para1: ACIntent; para2: jint; para3: AOBundle): jboolean; overload; virtual;
    function startNextMatchingActivity(para1: ACIntent): jboolean; overload; virtual;
    function startNextMatchingActivity(para1: ACIntent; para2: AOBundle): jboolean; overload; virtual;
    procedure startActivityFromChild(para1: AAActivity; para2: ACIntent; para3: jint); overload; virtual;
    procedure startActivityFromChild(para1: AAActivity; para2: ACIntent; para3: jint; para4: AOBundle); overload; virtual;
    procedure startActivityFromFragment(para1: AAFragment; para2: ACIntent; para3: jint); overload; virtual;
    procedure startActivityFromFragment(para1: AAFragment; para2: ACIntent; para3: jint; para4: AOBundle); overload; virtual;
    procedure startIntentSenderFromChild(para1: AAActivity; para2: ACIntentSender; para3: jint; para4: ACIntent; para5: jint; para6: jint; para7: jint); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure startIntentSenderFromChild(para1: AAActivity; para2: ACIntentSender; para3: jint; para4: ACIntent; para5: jint; para6: jint; para7: jint; para8: AOBundle); overload; virtual;  // throws android.content.IntentSender$SendIntentException
    procedure overridePendingTransition(para1: jint; para2: jint); overload; virtual;
    procedure setResult(para1: jint); overload; virtual; final;
    procedure setResult(para1: jint; para2: ACIntent); overload; virtual; final;
    function getCallingPackage(): JLString; overload; virtual;
    function getCallingActivity(): ACComponentName; overload; virtual;
    procedure setVisible(para1: jboolean); overload; virtual;
    function isFinishing(): jboolean; overload; virtual;
    function isDestroyed(): jboolean; overload; virtual;
    function isChangingConfigurations(): jboolean; overload; virtual;
    procedure recreate(); overload; virtual;
    procedure finish(); overload; virtual;
    procedure finishAffinity(); overload; virtual;
    procedure finishFromChild(para1: AAActivity); overload; virtual;
    procedure finishAfterTransition(); overload; virtual;
    procedure finishActivity(para1: jint); overload; virtual;
    procedure finishActivityFromChild(para1: AAActivity; para2: jint); overload; virtual;
    procedure finishAndRemoveTask(); overload; virtual;
    function releaseInstance(): jboolean; overload; virtual;
  strict protected
    procedure onActivityResult(para1: jint; para2: jint; para3: ACIntent); overload; virtual;
  public
    procedure onActivityReenter(para1: jint; para2: ACIntent); overload; virtual;
    function createPendingResult(para1: jint; para2: ACIntent; para3: jint): AAPendingIntent; overload; virtual;
    procedure setRequestedOrientation(para1: jint); overload; virtual;
    function getRequestedOrientation(): jint; overload; virtual;
    function getTaskId(): jint; overload; virtual;
    function isTaskRoot(): jboolean; overload; virtual;
    function moveTaskToBack(para1: jboolean): jboolean; overload; virtual;
    function getLocalClassName(): JLString; overload; virtual;
    function getComponentName(): ACComponentName; overload; virtual;
    function getPreferences(para1: jint): ACSharedPreferences; overload; virtual;
    function getSystemService(para1: JLString): JLObject; overload; virtual;
    procedure setTitle(para1: JLCharSequence); overload; virtual;
    procedure setTitle(para1: jint); overload; virtual;
    procedure setTitleColor(para1: jint); overload; virtual;
    function getTitle(): JLCharSequence; overload; virtual; final;
    function getTitleColor(): jint; overload; virtual; final;
  strict protected
    procedure onTitleChanged(para1: JLCharSequence; para2: jint); overload; virtual;
    procedure onChildTitleChanged(para1: AAActivity; para2: JLCharSequence); overload; virtual;
  public
    procedure setTaskDescription(para1: AAActivityManager.InnerTaskDescription); overload; virtual;
    procedure setProgressBarVisibility(para1: jboolean); overload; virtual; final;
    procedure setProgressBarIndeterminateVisibility(para1: jboolean); overload; virtual; final;
    procedure setProgressBarIndeterminate(para1: jboolean); overload; virtual; final;
    procedure setProgress(para1: jint); overload; virtual; final;
    procedure setSecondaryProgress(para1: jint); overload; virtual; final;
    procedure setVolumeControlStream(para1: jint); overload; virtual; final;
    function getVolumeControlStream(): jint; overload; virtual; final;
    procedure setMediaController(para1: AMSMediaController); overload; virtual; final;
    function getMediaController(): AMSMediaController; overload; virtual; final;
    procedure runOnUiThread(para1: JLRunnable); overload; virtual; final;
    function onCreateView(para1: JLString; para2: ACContext; para3: AUAttributeSet): AVView; overload; virtual;
    function onCreateView(para1: AVView; para2: JLString; para3: ACContext; para4: AUAttributeSet): AVView; overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; para4: Arr1JLString); overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; var para4: array of JLString); overload; virtual;
    function isImmersive(): jboolean; overload; virtual;
    function requestVisibleBehind(para1: jboolean): jboolean; overload; virtual;
    procedure onVisibleBehindCanceled(); overload; virtual;
    procedure onEnterAnimationComplete(); overload; virtual;
    procedure setImmersive(para1: jboolean); overload; virtual;
    function startActionMode(para1: AVActionMode.InnerCallback): AVActionMode; overload; virtual;
    function onWindowStartingActionMode(para1: AVActionMode.InnerCallback): AVActionMode; overload; virtual;
    procedure onActionModeStarted(para1: AVActionMode); overload; virtual;
    procedure onActionModeFinished(para1: AVActionMode); overload; virtual;
    function shouldUpRecreateTask(para1: ACIntent): jboolean; overload; virtual;
    function navigateUpTo(para1: ACIntent): jboolean; overload; virtual;
    function navigateUpToFromChild(para1: AAActivity; para2: ACIntent): jboolean; overload; virtual;
    function getParentActivityIntent(): ACIntent; overload; virtual;
    procedure setEnterSharedElementCallback(para1: AASharedElementCallback); overload; virtual;
    procedure setExitSharedElementCallback(para1: AASharedElementCallback); overload; virtual;
    procedure postponeEnterTransition(); overload; virtual;
    procedure startPostponedEnterTransition(); overload; virtual;
    procedure startLockTask(); overload; virtual;
    procedure stopLockTask(); overload; virtual;
  end;

  AADialog = class external 'android.app' name 'Dialog' (JLObject, ACDialogInterface, AVWindow.InnerCallback, AVKeyEvent.InnerCallback, AVView.InnerOnCreateContextMenuListener)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: jint); overload;
  strict protected
    constructor create(para1: ACContext; para2: jboolean; para3: ACDialogInterface.InnerOnCancelListener); overload;
  public
    function getContext(): ACContext; overload; virtual; final;
    function getActionBar(): AAActionBar; overload; virtual;
    procedure setOwnerActivity(para1: AAActivity); overload; virtual; final;
    function getOwnerActivity(): AAActivity; overload; virtual; final;
    function isShowing(): jboolean; overload; virtual;
    procedure create_(); external name 'create'; overload; virtual;
    procedure show(); overload; virtual;
    procedure hide(); overload; virtual;
    procedure dismiss(); overload; virtual;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
    procedure onStart(); overload; virtual;
    procedure onStop(); overload; virtual;
  public
    function onSaveInstanceState(): AOBundle; overload; virtual;
    procedure onRestoreInstanceState(para1: AOBundle); overload; virtual;
    function getWindow(): AVWindow; overload; virtual;
    function getCurrentFocus(): AVView; overload; virtual;
    function findViewById(para1: jint): AVView; overload; virtual;
    procedure setContentView(para1: jint); overload; virtual;
    procedure setContentView(para1: AVView); overload; virtual;
    procedure setContentView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure addContentView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure setTitle(para1: JLCharSequence); overload; virtual;
    procedure setTitle(para1: jint); overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyLongPress(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
    procedure onBackPressed(); overload; virtual;
    function onKeyShortcut(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure onWindowAttributesChanged(para1: AVWindowManager.InnerLayoutParams); overload; virtual;
    procedure onContentChanged(); overload; virtual;
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchKeyShortcutEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    function onCreatePanelView(para1: jint): AVView; overload; virtual;
    function onCreatePanelMenu(para1: jint; para2: AVMenu): jboolean; overload; virtual;
    function onPreparePanel(para1: jint; para2: AVView; para3: AVMenu): jboolean; overload; virtual;
    function onMenuOpened(para1: jint; para2: AVMenu): jboolean; overload; virtual;
    function onMenuItemSelected(para1: jint; para2: AVMenuItem): jboolean; overload; virtual;
    procedure onPanelClosed(para1: jint; para2: AVMenu); overload; virtual;
    function onCreateOptionsMenu(para1: AVMenu): jboolean; overload; virtual;
    function onPrepareOptionsMenu(para1: AVMenu): jboolean; overload; virtual;
    function onOptionsItemSelected(para1: AVMenuItem): jboolean; overload; virtual;
    procedure onOptionsMenuClosed(para1: AVMenu); overload; virtual;
    procedure openOptionsMenu(); overload; virtual;
    procedure closeOptionsMenu(); overload; virtual;
    procedure invalidateOptionsMenu(); overload; virtual;
    procedure onCreateContextMenu(para1: AVContextMenu; para2: AVView; para3: AVContextMenu.InnerContextMenuInfo); overload; virtual;
    procedure registerForContextMenu(para1: AVView); overload; virtual;
    procedure unregisterForContextMenu(para1: AVView); overload; virtual;
    procedure openContextMenu(para1: AVView); overload; virtual;
    function onContextItemSelected(para1: AVMenuItem): jboolean; overload; virtual;
    procedure onContextMenuClosed(para1: AVMenu); overload; virtual;
    function onSearchRequested(): jboolean; overload; virtual;
    function onWindowStartingActionMode(para1: AVActionMode.InnerCallback): AVActionMode; overload; virtual;
    procedure onActionModeStarted(para1: AVActionMode); overload; virtual;
    procedure onActionModeFinished(para1: AVActionMode); overload; virtual;
    procedure takeKeyEvents(para1: jboolean); overload; virtual;
    function requestWindowFeature(para1: jint): jboolean; overload; virtual; final;
    procedure setFeatureDrawableResource(para1: jint; para2: jint); overload; virtual; final;
    procedure setFeatureDrawableUri(para1: jint; para2: ANUri); overload; virtual; final;
    procedure setFeatureDrawable(para1: jint; para2: AGDDrawable); overload; virtual; final;
    procedure setFeatureDrawableAlpha(para1: jint; para2: jint); overload; virtual; final;
    function getLayoutInflater(): AVLayoutInflater; overload; virtual;
    procedure setCancelable(para1: jboolean); overload; virtual;
    procedure setCanceledOnTouchOutside(para1: jboolean); overload; virtual;
    procedure cancel(); overload; virtual;
    procedure setOnCancelListener(para1: ACDialogInterface.InnerOnCancelListener); overload; virtual;
    procedure setCancelMessage(para1: AOMessage); overload; virtual;
    procedure setOnDismissListener(para1: ACDialogInterface.InnerOnDismissListener); overload; virtual;
    procedure setOnShowListener(para1: ACDialogInterface.InnerOnShowListener); overload; virtual;
    procedure setDismissMessage(para1: AOMessage); overload; virtual;
    procedure setVolumeControlStream(para1: jint); overload; virtual; final;
    function getVolumeControlStream(): jint; overload; virtual; final;
    procedure setOnKeyListener(para1: ACDialogInterface.InnerOnKeyListener); overload; virtual;
  end;

  AAFragment = class external 'android.app' name 'Fragment' (JLObject, ACComponentCallbacks2, AVView.InnerOnCreateContextMenuListener)
  public
    type
      InnerInstantiationException = class;
      Arr1InnerInstantiationException = array of InnerInstantiationException;
      Arr2InnerInstantiationException = array of Arr1InnerInstantiationException;
      Arr3InnerInstantiationException = array of Arr2InnerInstantiationException;
      InnerSavedState = class;
      Arr1InnerSavedState = array of InnerSavedState;
      Arr2InnerSavedState = array of Arr1InnerSavedState;
      Arr3InnerSavedState = array of Arr2InnerSavedState;
      InnerInstantiationException = class external 'android.app' name 'InstantiationException' (AUAndroidRuntimeException)
      public
        constructor create(para1: JLString; para2: JLException); overload;
      end;

      InnerSavedState = class external 'android.app' name 'SavedState' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerClassLoaderCreator; external name 'CREATOR';
      public
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
      end;

  public
    constructor create(); overload;
    class function instantiate(para1: ACContext; para2: JLString): AAFragment; static; overload;
    class function instantiate(para1: ACContext; para2: JLString; para3: AOBundle): AAFragment; static; overload;
    function equals(para1: JLObject): jboolean; overload; virtual; final;
    function hashCode(): jint; overload; virtual; final;
    function toString(): JLString; overload; virtual;
    function getId(): jint; overload; virtual; final;
    function getTag(): JLString; overload; virtual; final;
    procedure setArguments(para1: AOBundle); overload; virtual;
    function getArguments(): AOBundle; overload; virtual; final;
    procedure setInitialSavedState(para1: AAFragment.InnerSavedState); overload; virtual;
    procedure setTargetFragment(para1: AAFragment; para2: jint); overload; virtual;
    function getTargetFragment(): AAFragment; overload; virtual; final;
    function getTargetRequestCode(): jint; overload; virtual; final;
    function getActivity(): AAActivity; overload; virtual; final;
    function getResources(): ACRResources; overload; virtual; final;
    function getText(para1: jint): JLCharSequence; overload; virtual; final;
    function getString(para1: jint): JLString; overload; virtual; final;
    function getString(para1: jint; para2: Arr1JLObject): JLString; overload; virtual; final;
    function getString(para1: jint; const para2: array of JLObject): JLString; overload; virtual; final;
    function getFragmentManager(): AAFragmentManager; overload; virtual; final;
    function getChildFragmentManager(): AAFragmentManager; overload; virtual; final;
    function getParentFragment(): AAFragment; overload; virtual; final;
    function isAdded(): jboolean; overload; virtual; final;
    function isDetached(): jboolean; overload; virtual; final;
    function isRemoving(): jboolean; overload; virtual; final;
    function isInLayout(): jboolean; overload; virtual; final;
    function isResumed(): jboolean; overload; virtual; final;
    function isVisible(): jboolean; overload; virtual; final;
    function isHidden(): jboolean; overload; virtual; final;
    procedure onHiddenChanged(para1: jboolean); overload; virtual;
    procedure setRetainInstance(para1: jboolean); overload; virtual;
    function getRetainInstance(): jboolean; overload; virtual; final;
    procedure setHasOptionsMenu(para1: jboolean); overload; virtual;
    procedure setMenuVisibility(para1: jboolean); overload; virtual;
    procedure setUserVisibleHint(para1: jboolean); overload; virtual;
    function getUserVisibleHint(): jboolean; overload; virtual;
    function getLoaderManager(): AALoaderManager; overload; virtual;
    procedure startActivity(para1: ACIntent); overload; virtual;
    procedure startActivity(para1: ACIntent; para2: AOBundle); overload; virtual;
    procedure startActivityForResult(para1: ACIntent; para2: jint); overload; virtual;
    procedure startActivityForResult(para1: ACIntent; para2: jint; para3: AOBundle); overload; virtual;
    procedure onActivityResult(para1: jint; para2: jint; para3: ACIntent); overload; virtual;
    procedure onInflate(para1: AUAttributeSet; para2: AOBundle); overload; virtual;
    procedure onInflate(para1: AAActivity; para2: AUAttributeSet; para3: AOBundle); overload; virtual;
    procedure onAttach(para1: AAActivity); overload; virtual;
    function onCreateAnimator(para1: jint; para2: jboolean; para3: jint): AAAnimator; overload; virtual;
    procedure onCreate(para1: AOBundle); overload; virtual;
    function onCreateView(para1: AVLayoutInflater; para2: AVViewGroup; para3: AOBundle): AVView; overload; virtual;
    procedure onViewCreated(para1: AVView; para2: AOBundle); overload; virtual;
    function getView(): AVView; overload; virtual;
    procedure onActivityCreated(para1: AOBundle); overload; virtual;
    procedure onViewStateRestored(para1: AOBundle); overload; virtual;
    procedure onStart(); overload; virtual;
    procedure onResume(); overload; virtual;
    procedure onSaveInstanceState(para1: AOBundle); overload; virtual;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    procedure onPause(); overload; virtual;
    procedure onStop(); overload; virtual;
    procedure onLowMemory(); overload; virtual;
    procedure onTrimMemory(para1: jint); overload; virtual;
    procedure onDestroyView(); overload; virtual;
    procedure onDestroy(); overload; virtual;
    procedure onDetach(); overload; virtual;
    procedure onCreateOptionsMenu(para1: AVMenu; para2: AVMenuInflater); overload; virtual;
    procedure onPrepareOptionsMenu(para1: AVMenu); overload; virtual;
    procedure onDestroyOptionsMenu(); overload; virtual;
    function onOptionsItemSelected(para1: AVMenuItem): jboolean; overload; virtual;
    procedure onOptionsMenuClosed(para1: AVMenu); overload; virtual;
    procedure onCreateContextMenu(para1: AVContextMenu; para2: AVView; para3: AVContextMenu.InnerContextMenuInfo); overload; virtual;
    procedure registerForContextMenu(para1: AVView); overload; virtual;
    procedure unregisterForContextMenu(para1: AVView); overload; virtual;
    function onContextItemSelected(para1: AVMenuItem): jboolean; overload; virtual;
    procedure setEnterSharedElementCallback(para1: AASharedElementCallback); overload; virtual;
    procedure setExitSharedElementCallback(para1: AASharedElementCallback); overload; virtual;
    procedure setEnterTransition(para1: ATTransition); overload; virtual;
    function getEnterTransition(): ATTransition; overload; virtual;
    procedure setReturnTransition(para1: ATTransition); overload; virtual;
    function getReturnTransition(): ATTransition; overload; virtual;
    procedure setExitTransition(para1: ATTransition); overload; virtual;
    function getExitTransition(): ATTransition; overload; virtual;
    procedure setReenterTransition(para1: ATTransition); overload; virtual;
    function getReenterTransition(): ATTransition; overload; virtual;
    procedure setSharedElementEnterTransition(para1: ATTransition); overload; virtual;
    function getSharedElementEnterTransition(): ATTransition; overload; virtual;
    procedure setSharedElementReturnTransition(para1: ATTransition); overload; virtual;
    function getSharedElementReturnTransition(): ATTransition; overload; virtual;
    procedure setAllowEnterTransitionOverlap(para1: jboolean); overload; virtual;
    function getAllowEnterTransitionOverlap(): jboolean; overload; virtual;
    procedure setAllowReturnTransitionOverlap(para1: jboolean); overload; virtual;
    function getAllowReturnTransitionOverlap(): jboolean; overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; para4: Arr1JLString); overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; var para4: array of JLString); overload; virtual;
  end;

  AIKeyboardView = class external 'android.inputmethodservice' name 'KeyboardView' (AVView, AVView.InnerOnClickListener)
  public
    type
      InnerOnKeyboardActionListener = interface;
      Arr1InnerOnKeyboardActionListener = array of InnerOnKeyboardActionListener;
      Arr2InnerOnKeyboardActionListener = array of Arr1InnerOnKeyboardActionListener;
      Arr3InnerOnKeyboardActionListener = array of Arr2InnerOnKeyboardActionListener;
      InnerOnKeyboardActionListener = interface external 'android.inputmethodservice' name 'OnKeyboardActionListener' 
        procedure onPress(para1: jint); overload;
        procedure onRelease(para1: jint); overload;
        procedure onKey(para1: jint; para2: Arr1jint); overload;
        procedure onKey(para1: jint; var para2: array of jint); overload;
        procedure onText(para1: JLCharSequence); overload;
        procedure swipeLeft(); overload;
        procedure swipeRight(); overload;
        procedure swipeDown(); overload;
        procedure swipeUp(); overload;
      end;

  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setOnKeyboardActionListener(para1: AIKeyboardView.InnerOnKeyboardActionListener); overload; virtual;
  strict protected
    function getOnKeyboardActionListener(): AIKeyboardView.InnerOnKeyboardActionListener; overload; virtual;
  public
    procedure setKeyboard(para1: AIKeyboard); overload; virtual;
    function getKeyboard(): AIKeyboard; overload; virtual;
    function setShifted(para1: jboolean): jboolean; overload; virtual;
    function isShifted(): jboolean; overload; virtual;
    procedure setPreviewEnabled(para1: jboolean); overload; virtual;
    function isPreviewEnabled(): jboolean; overload; virtual;
    procedure setVerticalCorrection(para1: jint); overload; virtual;
    procedure setPopupParent(para1: AVView); overload; virtual;
    procedure setPopupOffset(para1: jint; para2: jint); overload; virtual;
    procedure setProximityCorrectionEnabled(para1: jboolean); overload; virtual;
    function isProximityCorrectionEnabled(): jboolean; overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onDraw(para1: AGCanvas); overload; virtual;
    procedure invalidateAllKeys(); overload; virtual;
    procedure invalidateKey(para1: jint); overload; virtual;
  strict protected
    function onLongPress(para1: AIKeyboard.InnerKey): jboolean; overload; virtual;
  public
    function onHoverEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    procedure swipeRight(); overload; virtual;
    procedure swipeLeft(); overload; virtual;
    procedure swipeUp(); overload; virtual;
    procedure swipeDown(); overload; virtual;
  public
    procedure closing(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    function handleBack(): jboolean; overload; virtual;
    procedure onClick(para1: AVView); overload; virtual;
  end;

  AVSurfaceView = class external 'android.view' name 'SurfaceView' (AVView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getHolder(): AVSurfaceHolder; overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onWindowVisibilityChanged(para1: jint); overload; virtual;
  public
    procedure setVisibility(para1: jint); overload; virtual;
  strict protected
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    function gatherTransparentRegion(para1: AGRegion): jboolean; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
  strict protected
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
  public
    procedure setZOrderMediaOverlay(para1: jboolean); overload; virtual;
    procedure setZOrderOnTop(para1: jboolean); overload; virtual;
    procedure setSecure(para1: jboolean); overload; virtual;
  end;

  AVTextureView = class external 'android.view' name 'TextureView' (AVView)
  public
    type
      InnerSurfaceTextureListener = interface;
      Arr1InnerSurfaceTextureListener = array of InnerSurfaceTextureListener;
      Arr2InnerSurfaceTextureListener = array of Arr1InnerSurfaceTextureListener;
      Arr3InnerSurfaceTextureListener = array of Arr2InnerSurfaceTextureListener;
      InnerSurfaceTextureListener = interface external 'android.view' name 'SurfaceTextureListener' 
        procedure onSurfaceTextureAvailable(para1: AGSurfaceTexture; para2: jint; para3: jint); overload;
        procedure onSurfaceTextureSizeChanged(para1: AGSurfaceTexture; para2: jint; para3: jint); overload;
        function onSurfaceTextureDestroyed(para1: AGSurfaceTexture): jboolean; overload;
        procedure onSurfaceTextureUpdated(para1: AGSurfaceTexture); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function isOpaque(): jboolean; overload; virtual;
    procedure setOpaque(para1: jboolean); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
  public
    procedure setLayerType(para1: jint; para2: AGPaint); overload; virtual;
    procedure setLayerPaint(para1: AGPaint); overload; virtual;
    function getLayerType(): jint; overload; virtual;
    procedure buildLayer(); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual; final;
  strict protected
    procedure onDraw(para1: AGCanvas); overload; virtual; final;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onVisibilityChanged(para1: AVView; para2: jint); overload; virtual;
  public
    procedure setTransform(para1: AGMatrix); overload; virtual;
    function getTransform(para1: AGMatrix): AGMatrix; overload; virtual;
    function getBitmap(): AGBitmap; overload; virtual;
    function getBitmap(para1: jint; para2: jint): AGBitmap; overload; virtual;
    function getBitmap(para1: AGBitmap): AGBitmap; overload; virtual;
    function isAvailable(): jboolean; overload; virtual;
    function lockCanvas(): AGCanvas; overload; virtual;
    function lockCanvas(para1: AGRect): AGCanvas; overload; virtual;
    procedure unlockCanvasAndPost(para1: AGCanvas); overload; virtual;
    function getSurfaceTexture(): AGSurfaceTexture; overload; virtual;
    procedure setSurfaceTexture(para1: AGSurfaceTexture); overload; virtual;
    function getSurfaceTextureListener(): AVTextureView.InnerSurfaceTextureListener; overload; virtual;
    procedure setSurfaceTextureListener(para1: AVTextureView.InnerSurfaceTextureListener); overload; virtual;
  end;

  AVViewGroup = class abstract external 'android.view' name 'ViewGroup' (AVView, AVViewParent, AVViewManager)
  public
    type
      InnerOnHierarchyChangeListener = interface;
      Arr1InnerOnHierarchyChangeListener = array of InnerOnHierarchyChangeListener;
      Arr2InnerOnHierarchyChangeListener = array of Arr1InnerOnHierarchyChangeListener;
      Arr3InnerOnHierarchyChangeListener = array of Arr2InnerOnHierarchyChangeListener;
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerMarginLayoutParams = class;
      Arr1InnerMarginLayoutParams = array of InnerMarginLayoutParams;
      Arr2InnerMarginLayoutParams = array of Arr1InnerMarginLayoutParams;
      Arr3InnerMarginLayoutParams = array of Arr2InnerMarginLayoutParams;
      InnerOnHierarchyChangeListener = interface external 'android.view' name 'OnHierarchyChangeListener' 
        procedure onChildViewAdded(para1: AVView; para2: AVView); overload;
        procedure onChildViewRemoved(para1: AVView; para2: AVView); overload;
      end;

      InnerLayoutParams = class external 'android.view' name 'LayoutParams' (JLObject)
      public
        const
          FILL_PARENT = -1 deprecated;
          MATCH_PARENT = -1;
          WRAP_CONTENT = -2;
      public
        var
          fheight: jint; external name 'height';
          flayoutAnimationParameters: AVALayoutAnimationController.InnerAnimationParameters; external name 'layoutAnimationParameters';
          fwidth: jint; external name 'width';
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
      strict protected
        procedure setBaseAttributes(para1: ACRTypedArray; para2: jint; para3: jint); overload; virtual;
      public
        procedure resolveLayoutDirection(para1: jint); overload; virtual;
      end;

      InnerMarginLayoutParams = class external 'android.view' name 'MarginLayoutParams' (InnerLayoutParams)
      public
        var
          fbottomMargin: jint; external name 'bottomMargin';
          fleftMargin: jint; external name 'leftMargin';
          frightMargin: jint; external name 'rightMargin';
          ftopMargin: jint; external name 'topMargin';
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        procedure setMargins(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
        procedure setMarginStart(para1: jint); overload; virtual;
        function getMarginStart(): jint; overload; virtual;
        procedure setMarginEnd(para1: jint); overload; virtual;
        function getMarginEnd(): jint; overload; virtual;
        function isMarginRelative(): jboolean; overload; virtual;
        procedure setLayoutDirection(para1: jint); overload; virtual;
        function getLayoutDirection(): jint; overload; virtual;
        procedure resolveLayoutDirection(para1: jint); overload; virtual;
      end;

  strict protected
    const
      CLIP_TO_PADDING_MASK = 34;
  public
    const
      FOCUS_AFTER_DESCENDANTS = 262144;
      FOCUS_BEFORE_DESCENDANTS = 131072;
      FOCUS_BLOCK_DESCENDANTS = 393216;
      LAYOUT_MODE_CLIP_BOUNDS = 0;
      LAYOUT_MODE_OPTICAL_BOUNDS = 1;
      PERSISTENT_ALL_CACHES = 3;
      PERSISTENT_ANIMATION_CACHE = 1;
      PERSISTENT_NO_CACHE = 0;
      PERSISTENT_SCROLLING_CACHE = 2;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getDescendantFocusability(): jint; overload; virtual;
    procedure setDescendantFocusability(para1: jint); overload; virtual;
    procedure requestChildFocus(para1: AVView; para2: AVView); overload; virtual;
    procedure focusableViewAvailable(para1: AVView); overload; virtual;
    function showContextMenuForChild(para1: AVView): jboolean; overload; virtual;
    function startActionModeForChild(para1: AVView; para2: AVActionMode.InnerCallback): AVActionMode; overload; virtual;
    function focusSearch(para1: AVView; para2: jint): AVView; overload; virtual;
    function requestChildRectangleOnScreen(para1: AVView; para2: AGRect; para3: jboolean): jboolean; overload; virtual;
    function requestSendAccessibilityEvent(para1: AVView; para2: AVAAccessibilityEvent): jboolean; overload; virtual;
    function onRequestSendAccessibilityEvent(para1: AVView; para2: AVAAccessibilityEvent): jboolean; overload; virtual;
    procedure childHasTransientStateChanged(para1: AVView; para2: jboolean); overload; virtual;
    function hasTransientState(): jboolean; overload; virtual;
    function dispatchUnhandledMove(para1: AVView; para2: jint): jboolean; overload; virtual;
    procedure clearChildFocus(para1: AVView); overload; virtual;
    procedure clearFocus(); overload; virtual;
    function getFocusedChild(): AVView; overload; virtual;
    function hasFocus(): jboolean; overload; virtual;
    function findFocus(): AVView; overload; virtual;
    function hasFocusable(): jboolean; overload; virtual;
    procedure addFocusables(para1: JUArrayList; para2: jint; para3: jint); overload; virtual;
    procedure setTouchscreenBlocksFocus(para1: jboolean); overload; virtual;
    function getTouchscreenBlocksFocus(): jboolean; overload; virtual;
    procedure findViewsWithText(para1: JUArrayList; para2: JLCharSequence; para3: jint); overload; virtual;
    procedure dispatchWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure addTouchables(para1: JUArrayList); overload; virtual;
    procedure dispatchDisplayHint(para1: jint); overload; virtual;
  strict protected
    procedure dispatchVisibilityChanged(para1: AVView; para2: jint); overload; virtual;
  public
    procedure dispatchWindowVisibilityChanged(para1: jint); overload; virtual;
    procedure dispatchConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    procedure recomputeViewAttributes(para1: AVView); overload; virtual;
    procedure bringChildToFront(para1: AVView); overload; virtual;
    function dispatchDragEvent(para1: AVDragEvent): jboolean; overload; virtual;
    procedure dispatchWindowSystemUiVisiblityChanged(para1: jint); overload; virtual;
    procedure dispatchSystemUiVisibilityChanged(para1: jint); overload; virtual;
    function dispatchKeyEventPreIme(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchKeyShortcutEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    function dispatchHoverEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  public
    procedure addChildrenForAccessibility(para1: JUArrayList); overload; virtual;
    function onInterceptHoverEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    function dispatchGenericPointerEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchGenericFocusedEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  public
    function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure setMotionEventSplittingEnabled(para1: jboolean); overload; virtual;
    function isMotionEventSplittingEnabled(): jboolean; overload; virtual;
    function isTransitionGroup(): jboolean; overload; virtual;
    procedure setTransitionGroup(para1: jboolean); overload; virtual;
    procedure requestDisallowInterceptTouchEvent(para1: jboolean); overload; virtual;
    function onInterceptTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function requestFocus(para1: jint; para2: AGRect): jboolean; overload; virtual;
  strict protected
    function onRequestFocusInDescendants(para1: jint; para2: AGRect): jboolean; overload; virtual;
  public
    procedure notifySubtreeAccessibilityStateChanged(para1: AVView; para2: AVView; para3: jint); overload; virtual;
  strict protected
    procedure dispatchSaveInstanceState(para1: AUSparseArray); overload; virtual;
    procedure dispatchFreezeSelfOnly(para1: AUSparseArray); overload; virtual;
    procedure dispatchRestoreInstanceState(para1: AUSparseArray); overload; virtual;
    procedure dispatchThawSelfOnly(para1: AUSparseArray); overload; virtual;
    procedure setChildrenDrawingCacheEnabled(para1: jboolean); overload; virtual;
    procedure onAnimationStart(); overload; virtual;
    procedure onAnimationEnd(); overload; virtual;
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
  public
    function getOverlay(): AVViewGroupOverlay; overload; virtual;
  strict protected
    function getChildDrawingOrder(para1: jint; para2: jint): jint; overload; virtual;
    function drawChild(para1: AGCanvas; para2: AVView; para3: jlong): jboolean; overload; virtual;
  public
    function getClipChildren(): jboolean; overload; virtual;
    procedure setClipChildren(para1: jboolean); overload; virtual;
    procedure setClipToPadding(para1: jboolean); overload; virtual;
    function getClipToPadding(): jboolean; overload; virtual;
    procedure dispatchSetSelected(para1: jboolean); overload; virtual;
    procedure dispatchSetActivated(para1: jboolean); overload; virtual;
  strict protected
    procedure dispatchSetPressed(para1: jboolean); overload; virtual;
    procedure setStaticTransformationsEnabled(para1: jboolean); overload; virtual;
    function getChildStaticTransformation(para1: AVView; para2: AVATransformation): jboolean; overload; virtual;
  public
    procedure addView(para1: AVView); overload; virtual;
    procedure addView(para1: AVView; para2: jint); overload; virtual;
    procedure addView(para1: AVView; para2: jint; para3: jint); overload; virtual;
    procedure addView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    procedure updateViewLayout(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
  strict protected
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
  public
    procedure setOnHierarchyChangeListener(para1: AVViewGroup.InnerOnHierarchyChangeListener); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    function addViewInLayout(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function addViewInLayout(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams; para4: jboolean): jboolean; overload; virtual;
    procedure cleanupLayoutState(para1: AVView); overload; virtual;
    procedure attachLayoutAnimationParameters(para1: AVView; para2: AVViewGroup_LayoutParams; para3: jint; para4: jint); overload; virtual;
  public
    procedure removeView(para1: AVView); overload; virtual;
    procedure removeViewInLayout(para1: AVView); overload; virtual;
    procedure removeViewsInLayout(para1: jint; para2: jint); overload; virtual;
    procedure removeViewAt(para1: jint); overload; virtual;
    procedure removeViews(para1: jint; para2: jint); overload; virtual;
    procedure setLayoutTransition(para1: AALayoutTransition); overload; virtual;
    function getLayoutTransition(): AALayoutTransition; overload; virtual;
    procedure removeAllViews(); overload; virtual;
    procedure removeAllViewsInLayout(); overload; virtual;
  strict protected
    procedure removeDetachedView(para1: AVView; para2: jboolean); overload; virtual;
    procedure attachViewToParent(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    procedure detachViewFromParent(para1: AVView); overload; virtual;
    procedure detachViewFromParent(para1: jint); overload; virtual;
    procedure detachViewsFromParent(para1: jint; para2: jint); overload; virtual;
    procedure detachAllViewsFromParent(); overload; virtual;
  public
    procedure invalidateChild(para1: AVView; para2: AGRect); overload; virtual; final;
    function invalidateChildInParent(para1: Arr1jint; para2: AGRect): AVViewParent; overload; virtual;
    function invalidateChildInParent(var para1: array of jint; para2: AGRect): AVViewParent; overload; virtual;
    procedure offsetDescendantRectToMyCoords(para1: AVView; para2: AGRect); overload; virtual; final;
    procedure offsetRectIntoDescendantCoords(para1: AVView; para2: AGRect); overload; virtual; final;
    function getChildVisibleRect(para1: AVView; para2: AGRect; para3: AGPoint): jboolean; overload; virtual;
    procedure layout(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual; final;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual; abstract;
    function canAnimate(): jboolean; overload; virtual;
  public
    procedure startLayoutAnimation(); overload; virtual;
    procedure scheduleLayoutAnimation(); overload; virtual;
    procedure setLayoutAnimation(para1: AVALayoutAnimationController); overload; virtual;
    function getLayoutAnimation(): AVALayoutAnimationController; overload; virtual;
    function isAnimationCacheEnabled(): jboolean; overload; virtual;
    procedure setAnimationCacheEnabled(para1: jboolean); overload; virtual;
    function isAlwaysDrawnWithCacheEnabled(): jboolean; overload; virtual;
    procedure setAlwaysDrawnWithCacheEnabled(para1: jboolean); overload; virtual;
  strict protected
    function isChildrenDrawnWithCacheEnabled(): jboolean; overload; virtual;
    procedure setChildrenDrawnWithCacheEnabled(para1: jboolean); overload; virtual;
    function isChildrenDrawingOrderEnabled(): jboolean; overload; virtual;
    procedure setChildrenDrawingOrderEnabled(para1: jboolean); overload; virtual;
  public
    function getPersistentDrawingCache(): jint; overload; virtual;
    procedure setPersistentDrawingCache(para1: jint); overload; virtual;
    function getLayoutMode(): jint; overload; virtual;
    procedure setLayoutMode(para1: jint); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  strict protected
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    procedure debug(para1: jint); overload; virtual;
  public
    function indexOfChild(para1: AVView): jint; overload; virtual;
    function getChildCount(): jint; overload; virtual;
    function getChildAt(para1: jint): AVView; overload; virtual;
  strict protected
    procedure measureChildren(para1: jint; para2: jint); overload; virtual;
    procedure measureChild(para1: AVView; para2: jint; para3: jint); overload; virtual;
    procedure measureChildWithMargins(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    class function getChildMeasureSpec(para1: jint; para2: jint; para3: jint): jint; static; overload;
    procedure clearDisappearingChildren(); overload; virtual;
    procedure startViewTransition(para1: AVView); overload; virtual;
    procedure endViewTransition(para1: AVView); overload; virtual;
    function gatherTransparentRegion(para1: AGRegion): jboolean; overload; virtual;
    procedure requestTransparentRegion(para1: AVView); overload; virtual;
    function dispatchApplyWindowInsets(para1: AVWindowInsets): AVWindowInsets; overload; virtual;
    function getLayoutAnimationListener(): AVAAnimation.InnerAnimationListener; overload; virtual;
  strict protected
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
  strict protected
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
  public
    procedure setAddStatesFromChildren(para1: jboolean); overload; virtual;
    function addStatesFromChildren(): jboolean; overload; virtual;
    procedure childDrawableStateChanged(para1: AVView); overload; virtual;
    procedure setLayoutAnimationListener(para1: AVAAnimation.InnerAnimationListener); overload; virtual;
    function shouldDelayChildPressedState(): jboolean; overload; virtual;
    function onStartNestedScroll(para1: AVView; para2: AVView; para3: jint): jboolean; overload; virtual;
    procedure onNestedScrollAccepted(para1: AVView; para2: AVView; para3: jint); overload; virtual;
    procedure onStopNestedScroll(para1: AVView); overload; virtual;
    procedure onNestedScroll(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure onNestedPreScroll(para1: AVView; para2: jint; para3: jint; para4: Arr1jint); overload; virtual;
    procedure onNestedPreScroll(para1: AVView; para2: jint; para3: jint; var para4: array of jint); overload; virtual;
    function onNestedFling(para1: AVView; para2: jfloat; para3: jfloat; para4: jboolean): jboolean; overload; virtual;
    function onNestedPreFling(para1: AVView; para2: jfloat; para3: jfloat): jboolean; overload; virtual;
    function getNestedScrollAxes(): jint; overload; virtual;
    function getOverlay(): AVViewOverlay; overload; virtual;
  end;

  AVViewStub = class sealed external 'android.view' name 'ViewStub' (AVView)
  public
    type
      InnerOnInflateListener = interface;
      Arr1InnerOnInflateListener = array of InnerOnInflateListener;
      Arr2InnerOnInflateListener = array of Arr1InnerOnInflateListener;
      Arr3InnerOnInflateListener = array of Arr2InnerOnInflateListener;
      InnerOnInflateListener = interface external 'android.view' name 'OnInflateListener' 
        procedure onInflate(para1: AVViewStub; para2: AVView); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getInflatedId(): jint; overload; virtual;
    procedure setInflatedId(para1: jint); overload; virtual;
    function getLayoutResource(): jint; overload; virtual;
    procedure setLayoutResource(para1: jint); overload; virtual;
    procedure setLayoutInflater(para1: AVLayoutInflater); overload; virtual;
    function getLayoutInflater(): AVLayoutInflater; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    procedure draw(para1: AGCanvas); overload; virtual;
  strict protected
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
  public
    procedure setVisibility(para1: jint); overload; virtual;
    function inflate(): AVView; overload; virtual;
    procedure setOnInflateListener(para1: AVViewStub.InnerOnInflateListener); overload; virtual;
  end;

  AWAnalogClock = class external 'android.widget' name 'AnalogClock' (AVView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onDraw(para1: AGCanvas); overload; virtual;
  end;

  AWImageView = class external 'android.widget' name 'ImageView' (AVView)
  public
    type
      InnerScaleType = class;
      Arr1InnerScaleType = array of InnerScaleType;
      Arr2InnerScaleType = array of Arr1InnerScaleType;
      Arr3InnerScaleType = array of Arr2InnerScaleType;
      InnerScaleType = class sealed external 'android.widget' name 'ScaleType' (JLEnum)
      public
        final class var
          fCENTER: AWImageView.InnerScaleType; external name 'CENTER';
          fCENTER_CROP: AWImageView.InnerScaleType; external name 'CENTER_CROP';
          fCENTER_INSIDE: AWImageView.InnerScaleType; external name 'CENTER_INSIDE';
          fFIT_CENTER: AWImageView.InnerScaleType; external name 'FIT_CENTER';
          fFIT_END: AWImageView.InnerScaleType; external name 'FIT_END';
          fFIT_START: AWImageView.InnerScaleType; external name 'FIT_START';
          fFIT_XY: AWImageView.InnerScaleType; external name 'FIT_XY';
          fMATRIX: AWImageView.InnerScaleType; external name 'MATRIX';
      public
        class function values(): AWImageView.Arr1InnerScaleType; static; overload;
        class function valueOf(para1: JLString): AWImageView.InnerScaleType; static; overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    function hasOverlappingRendering(): jboolean; overload; virtual;
    procedure onPopulateAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    function getAdjustViewBounds(): jboolean; overload; virtual;
    procedure setAdjustViewBounds(para1: jboolean); overload; virtual;
    function getMaxWidth(): jint; overload; virtual;
    procedure setMaxWidth(para1: jint); overload; virtual;
    function getMaxHeight(): jint; overload; virtual;
    procedure setMaxHeight(para1: jint); overload; virtual;
    function getDrawable(): AGDDrawable; overload; virtual;
    procedure setImageResource(para1: jint); overload; virtual;
    procedure setImageURI(para1: ANUri); overload; virtual;
    procedure setImageDrawable(para1: AGDDrawable); overload; virtual;
    procedure setImageTintList(para1: ACRColorStateList); overload; virtual;
    function getImageTintList(): ACRColorStateList; overload; virtual;
    procedure setImageTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getImageTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    procedure setImageBitmap(para1: AGBitmap); overload; virtual;
    procedure setImageState(para1: Arr1jint; para2: jboolean); overload; virtual;
    procedure setImageState(var para1: array of jint; para2: jboolean); overload; virtual;
    procedure setSelected(para1: jboolean); overload; virtual;
    procedure setImageLevel(para1: jint); overload; virtual;
    procedure setScaleType(para1: AWImageView.InnerScaleType); overload; virtual;
    function getScaleType(): AWImageView.InnerScaleType; overload; virtual;
    function getImageMatrix(): AGMatrix; overload; virtual;
    procedure setImageMatrix(para1: AGMatrix); overload; virtual;
    function getCropToPadding(): jboolean; overload; virtual;
    procedure setCropToPadding(para1: jboolean); overload; virtual;
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
    procedure onRtlPropertiesChanged(para1: jint); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    function setFrame(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
  strict protected
    procedure onDraw(para1: AGCanvas); overload; virtual;
  public
    function getBaseline(): jint; overload; virtual;
    procedure setBaseline(para1: jint); overload; virtual;
    procedure setBaselineAlignBottom(para1: jboolean); overload; virtual;
    function getBaselineAlignBottom(): jboolean; overload; virtual;
    procedure setColorFilter(para1: jint; para2: AGPorterDuff.InnerMode); overload; virtual; final;
    procedure setColorFilter(para1: jint); overload; virtual; final;
    procedure clearColorFilter(); overload; virtual; final;
    function getColorFilter(): AGColorFilter; overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    function getImageAlpha(): jint; overload; virtual;
    procedure setImageAlpha(para1: jint); overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    function isOpaque(): jboolean; overload; virtual;
    procedure setVisibility(para1: jint); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWPopupWindow = class external 'android.widget' name 'PopupWindow' (JLObject)
  public
    type
      InnerOnDismissListener = interface;
      Arr1InnerOnDismissListener = array of InnerOnDismissListener;
      Arr2InnerOnDismissListener = array of Arr1InnerOnDismissListener;
      Arr3InnerOnDismissListener = array of Arr2InnerOnDismissListener;
      InnerOnDismissListener = interface external 'android.widget' name 'OnDismissListener' 
        procedure onDismiss(); overload;
      end;

  public
    const
      INPUT_METHOD_FROM_FOCUSABLE = 0;
      INPUT_METHOD_NEEDED = 1;
      INPUT_METHOD_NOT_NEEDED = 2;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(); overload;
    constructor create(para1: AVView); overload;
    constructor create(para1: jint; para2: jint); overload;
    constructor create(para1: AVView; para2: jint; para3: jint); overload;
    constructor create(para1: AVView; para2: jint; para3: jint; para4: jboolean); overload;
    function getBackground(): AGDDrawable; overload; virtual;
    procedure setBackgroundDrawable(para1: AGDDrawable); overload; virtual;
    function getElevation(): jfloat; overload; virtual;
    procedure setElevation(para1: jfloat); overload; virtual;
    function getAnimationStyle(): jint; overload; virtual;
    procedure setIgnoreCheekPress(); overload; virtual;
    procedure setAnimationStyle(para1: jint); overload; virtual;
    function getContentView(): AVView; overload; virtual;
    procedure setContentView(para1: AVView); overload; virtual;
    procedure setTouchInterceptor(para1: AVView.InnerOnTouchListener); overload; virtual;
    function isFocusable(): jboolean; overload; virtual;
    procedure setFocusable(para1: jboolean); overload; virtual;
    function getInputMethodMode(): jint; overload; virtual;
    procedure setInputMethodMode(para1: jint); overload; virtual;
    procedure setSoftInputMode(para1: jint); overload; virtual;
    function getSoftInputMode(): jint; overload; virtual;
    function isTouchable(): jboolean; overload; virtual;
    procedure setTouchable(para1: jboolean); overload; virtual;
    function isOutsideTouchable(): jboolean; overload; virtual;
    procedure setOutsideTouchable(para1: jboolean); overload; virtual;
    function isClippingEnabled(): jboolean; overload; virtual;
    procedure setClippingEnabled(para1: jboolean); overload; virtual;
    function isSplitTouchEnabled(): jboolean; overload; virtual;
    procedure setSplitTouchEnabled(para1: jboolean); overload; virtual;
    procedure setWindowLayoutMode(para1: jint; para2: jint); overload; virtual;
    function getHeight(): jint; overload; virtual;
    procedure setHeight(para1: jint); overload; virtual;
    function getWidth(): jint; overload; virtual;
    procedure setWidth(para1: jint); overload; virtual;
    function isShowing(): jboolean; overload; virtual;
    procedure showAtLocation(para1: AVView; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure showAsDropDown(para1: AVView); overload; virtual;
    procedure showAsDropDown(para1: AVView; para2: jint; para3: jint); overload; virtual;
    procedure showAsDropDown(para1: AVView; para2: jint; para3: jint; para4: jint); overload; virtual;
    function isAboveAnchor(): jboolean; overload; virtual;
    function getMaxAvailableHeight(para1: AVView): jint; overload; virtual;
    function getMaxAvailableHeight(para1: AVView; para2: jint): jint; overload; virtual;
    procedure dismiss(); overload; virtual;
    procedure setOnDismissListener(para1: AWPopupWindow.InnerOnDismissListener); overload; virtual;
    procedure update(); overload; virtual;
    procedure update(para1: jint; para2: jint); overload; virtual;
    procedure update(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure update(para1: jint; para2: jint; para3: jint; para4: jint; para5: jboolean); overload; virtual;
    procedure update(para1: AVView; para2: jint; para3: jint); overload; virtual;
    procedure update(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  end;

  AWProgressBar = class external 'android.widget' name 'ProgressBar' (AVView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function isIndeterminate(): jboolean; overload; virtual;
    procedure setIndeterminate(para1: jboolean); overload; virtual;
    function getIndeterminateDrawable(): AGDDrawable; overload; virtual;
    procedure setIndeterminateDrawable(para1: AGDDrawable); overload; virtual;
    procedure setIndeterminateTintList(para1: ACRColorStateList); overload; virtual;
    function getIndeterminateTintList(): ACRColorStateList; overload; virtual;
    procedure setIndeterminateTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getIndeterminateTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    procedure setIndeterminateDrawableTiled(para1: AGDDrawable); overload; virtual;
    function getProgressDrawable(): AGDDrawable; overload; virtual;
    procedure setProgressDrawable(para1: AGDDrawable); overload; virtual;
    procedure setProgressTintList(para1: ACRColorStateList); overload; virtual;
    function getProgressTintList(): ACRColorStateList; overload; virtual;
    procedure setProgressTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getProgressTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    procedure setProgressBackgroundTintList(para1: ACRColorStateList); overload; virtual;
    function getProgressBackgroundTintList(): ACRColorStateList; overload; virtual;
    procedure setProgressBackgroundTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getProgressBackgroundTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    procedure setSecondaryProgressTintList(para1: ACRColorStateList); overload; virtual;
    function getSecondaryProgressTintList(): ACRColorStateList; overload; virtual;
    procedure setSecondaryProgressTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getSecondaryProgressTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    procedure setProgressDrawableTiled(para1: AGDDrawable); overload; virtual;
  strict protected
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
    procedure postInvalidate(); overload; virtual;
    procedure setProgress(para1: jint); overload; virtual;
    procedure setSecondaryProgress(para1: jint); overload; virtual;
    function getProgress(): jint; overload; virtual;
    function getSecondaryProgress(): jint; overload; virtual;
    function getMax(): jint; overload; virtual;
    procedure setMax(para1: jint); overload; virtual;
    procedure incrementProgressBy(para1: jint); overload; virtual; final;
    procedure incrementSecondaryProgressBy(para1: jint); overload; virtual; final;
    procedure setInterpolator(para1: ACContext; para2: jint); overload; virtual;
    procedure setInterpolator(para1: AVAInterpolator); overload; virtual;
    function getInterpolator(): AVAInterpolator; overload; virtual;
    procedure setVisibility(para1: jint); overload; virtual;
  strict protected
    procedure onVisibilityChanged(para1: AVView; para2: jint); overload; virtual;
  public
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
  strict protected
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onDraw(para1: AGCanvas); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWSpace = class sealed external 'android.widget' name 'Space' (AVView)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
    procedure draw(para1: AGCanvas); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  end;

  AWTextView = class external 'android.widget' name 'TextView' (AVView, AVViewTreeObserver.InnerOnPreDrawListener)
  public
    type
      InnerSavedState = class;
      Arr1InnerSavedState = array of InnerSavedState;
      Arr2InnerSavedState = array of Arr1InnerSavedState;
      Arr3InnerSavedState = array of Arr2InnerSavedState;
      InnerBufferType = class;
      Arr1InnerBufferType = array of InnerBufferType;
      Arr2InnerBufferType = array of Arr1InnerBufferType;
      Arr3InnerBufferType = array of Arr2InnerBufferType;
      InnerOnEditorActionListener = interface;
      Arr1InnerOnEditorActionListener = array of InnerOnEditorActionListener;
      Arr2InnerOnEditorActionListener = array of Arr1InnerOnEditorActionListener;
      Arr3InnerOnEditorActionListener = array of Arr2InnerOnEditorActionListener;
      InnerSavedState = class external 'android.widget' name 'SavedState' (AVView.InnerBaseSavedState)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerBufferType = class sealed external 'android.widget' name 'BufferType' (JLEnum)
      public
        final class var
          fEDITABLE: AWTextView.InnerBufferType; external name 'EDITABLE';
          fNORMAL: AWTextView.InnerBufferType; external name 'NORMAL';
          fSPANNABLE: AWTextView.InnerBufferType; external name 'SPANNABLE';
      public
        class function values(): AWTextView.Arr1InnerBufferType; static; overload;
        class function valueOf(para1: JLString): AWTextView.InnerBufferType; static; overload;
      end;

      InnerOnEditorActionListener = interface external 'android.widget' name 'OnEditorActionListener' 
        function onEditorAction(para1: AWTextView; para2: jint; para3: AVKeyEvent): jboolean; overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setEnabled(para1: jboolean); overload; virtual;
    procedure setTypeface(para1: AGTypeface; para2: jint); overload; virtual;
  strict protected
    function getDefaultEditable(): jboolean; overload; virtual;
    function getDefaultMovementMethod(): ATMMovementMethod; overload; virtual;
  public
    function getText(): JLCharSequence; overload; virtual;
    function length(): jint; overload; virtual;
    function getEditableText(): ATEditable; overload; virtual;
    function getLineHeight(): jint; overload; virtual;
    function getLayout(): ATLayout; overload; virtual; final;
    function getKeyListener(): ATMKeyListener; overload; virtual; final;
    procedure setKeyListener(para1: ATMKeyListener); overload; virtual;
    function getMovementMethod(): ATMMovementMethod; overload; virtual; final;
    procedure setMovementMethod(para1: ATMMovementMethod); overload; virtual; final;
    function getTransformationMethod(): ATMTransformationMethod; overload; virtual; final;
    procedure setTransformationMethod(para1: ATMTransformationMethod); overload; virtual; final;
    function getCompoundPaddingTop(): jint; overload; virtual;
    function getCompoundPaddingBottom(): jint; overload; virtual;
    function getCompoundPaddingLeft(): jint; overload; virtual;
    function getCompoundPaddingRight(): jint; overload; virtual;
    function getCompoundPaddingStart(): jint; overload; virtual;
    function getCompoundPaddingEnd(): jint; overload; virtual;
    function getExtendedPaddingTop(): jint; overload; virtual;
    function getExtendedPaddingBottom(): jint; overload; virtual;
    function getTotalPaddingLeft(): jint; overload; virtual;
    function getTotalPaddingRight(): jint; overload; virtual;
    function getTotalPaddingStart(): jint; overload; virtual;
    function getTotalPaddingEnd(): jint; overload; virtual;
    function getTotalPaddingTop(): jint; overload; virtual;
    function getTotalPaddingBottom(): jint; overload; virtual;
    procedure setCompoundDrawables(para1: AGDDrawable; para2: AGDDrawable; para3: AGDDrawable; para4: AGDDrawable); overload; virtual;
    procedure setCompoundDrawablesWithIntrinsicBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setCompoundDrawablesWithIntrinsicBounds(para1: AGDDrawable; para2: AGDDrawable; para3: AGDDrawable; para4: AGDDrawable); overload; virtual;
    procedure setCompoundDrawablesRelative(para1: AGDDrawable; para2: AGDDrawable; para3: AGDDrawable; para4: AGDDrawable); overload; virtual;
    procedure setCompoundDrawablesRelativeWithIntrinsicBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setCompoundDrawablesRelativeWithIntrinsicBounds(para1: AGDDrawable; para2: AGDDrawable; para3: AGDDrawable; para4: AGDDrawable); overload; virtual;
    function getCompoundDrawables(): Arr1AGDDrawable; overload; virtual;
    function getCompoundDrawablesRelative(): Arr1AGDDrawable; overload; virtual;
    procedure setCompoundDrawablePadding(para1: jint); overload; virtual;
    function getCompoundDrawablePadding(): jint; overload; virtual;
    procedure setPadding(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setPaddingRelative(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    function getAutoLinkMask(): jint; overload; virtual; final;
    procedure setTextAppearance(para1: ACContext; para2: jint); overload; virtual;
    function getTextLocale(): JULocale; overload; virtual;
    procedure setTextLocale(para1: JULocale); overload; virtual;
    function getTextSize(): jfloat; overload; virtual;
    procedure setTextSize(para1: jfloat); overload; virtual;
    procedure setTextSize(para1: jint; para2: jfloat); overload; virtual;
    function getTextScaleX(): jfloat; overload; virtual;
    procedure setTextScaleX(para1: jfloat); overload; virtual;
    procedure setTypeface(para1: AGTypeface); overload; virtual;
    function getTypeface(): AGTypeface; overload; virtual;
    procedure setElegantTextHeight(para1: jboolean); overload; virtual;
    function getLetterSpacing(): jfloat; overload; virtual;
    procedure setLetterSpacing(para1: jfloat); overload; virtual;
    function getFontFeatureSettings(): JLString; overload; virtual;
    procedure setFontFeatureSettings(para1: JLString); overload; virtual;
    procedure setTextColor(para1: jint); overload; virtual;
    procedure setTextColor(para1: ACRColorStateList); overload; virtual;
    function getTextColors(): ACRColorStateList; overload; virtual; final;
    function getCurrentTextColor(): jint; overload; virtual; final;
    procedure setHighlightColor(para1: jint); overload; virtual;
    function getHighlightColor(): jint; overload; virtual;
    procedure setShowSoftInputOnFocus(para1: jboolean); overload; virtual; final;
    function getShowSoftInputOnFocus(): jboolean; overload; virtual; final;
    procedure setShadowLayer(para1: jfloat; para2: jfloat; para3: jfloat; para4: jint); overload; virtual;
    function getShadowRadius(): jfloat; overload; virtual;
    function getShadowDx(): jfloat; overload; virtual;
    function getShadowDy(): jfloat; overload; virtual;
    function getShadowColor(): jint; overload; virtual;
    function getPaint(): ATTextPaint; overload; virtual;
    procedure setAutoLinkMask(para1: jint); overload; virtual; final;
    procedure setLinksClickable(para1: jboolean); overload; virtual; final;
    function getLinksClickable(): jboolean; overload; virtual; final;
    function getUrls(): Arr1ATSURLSpan; overload; virtual;
    procedure setHintTextColor(para1: jint); overload; virtual; final;
    procedure setHintTextColor(para1: ACRColorStateList); overload; virtual; final;
    function getHintTextColors(): ACRColorStateList; overload; virtual; final;
    function getCurrentHintTextColor(): jint; overload; virtual; final;
    procedure setLinkTextColor(para1: jint); overload; virtual; final;
    procedure setLinkTextColor(para1: ACRColorStateList); overload; virtual; final;
    function getLinkTextColors(): ACRColorStateList; overload; virtual; final;
    procedure setGravity(para1: jint); overload; virtual;
    function getGravity(): jint; overload; virtual;
    function getPaintFlags(): jint; overload; virtual;
    procedure setPaintFlags(para1: jint); overload; virtual;
    procedure setHorizontallyScrolling(para1: jboolean); overload; virtual;
    procedure setMinLines(para1: jint); overload; virtual;
    function getMinLines(): jint; overload; virtual;
    procedure setMinHeight(para1: jint); overload; virtual;
    function getMinHeight(): jint; overload; virtual;
    procedure setMaxLines(para1: jint); overload; virtual;
    function getMaxLines(): jint; overload; virtual;
    procedure setMaxHeight(para1: jint); overload; virtual;
    function getMaxHeight(): jint; overload; virtual;
    procedure setLines(para1: jint); overload; virtual;
    procedure setHeight(para1: jint); overload; virtual;
    procedure setMinEms(para1: jint); overload; virtual;
    function getMinEms(): jint; overload; virtual;
    procedure setMinWidth(para1: jint); overload; virtual;
    function getMinWidth(): jint; overload; virtual;
    procedure setMaxEms(para1: jint); overload; virtual;
    function getMaxEms(): jint; overload; virtual;
    procedure setMaxWidth(para1: jint); overload; virtual;
    function getMaxWidth(): jint; overload; virtual;
    procedure setEms(para1: jint); overload; virtual;
    procedure setWidth(para1: jint); overload; virtual;
    procedure setLineSpacing(para1: jfloat; para2: jfloat); overload; virtual;
    function getLineSpacingMultiplier(): jfloat; overload; virtual;
    function getLineSpacingExtra(): jfloat; overload; virtual;
    procedure append(para1: JLCharSequence); overload; virtual; final;
    procedure append(para1: JLCharSequence; para2: jint; para3: jint); overload; virtual;
  strict protected
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    procedure setFreezesText(para1: jboolean); overload; virtual;
    function getFreezesText(): jboolean; overload; virtual;
    procedure setEditableFactory(para1: ATEditable.InnerFactory); overload; virtual; final;
    procedure setSpannableFactory(para1: ATSpannable.InnerFactory); overload; virtual; final;
    procedure setText(para1: JLCharSequence); overload; virtual; final;
    procedure setTextKeepState(para1: JLCharSequence); overload; virtual; final;
    procedure setText(para1: JLCharSequence; para2: AWTextView.InnerBufferType); overload; virtual;
    procedure setText(para1: Arr1jchar; para2: jint; para3: jint); overload; virtual; final;
    procedure setText(var para1: array of jchar; para2: jint; para3: jint); overload; virtual; final;
    procedure setTextKeepState(para1: JLCharSequence; para2: AWTextView.InnerBufferType); overload; virtual; final;
    procedure setText(para1: jint); overload; virtual; final;
    procedure setText(para1: jint; para2: AWTextView.InnerBufferType); overload; virtual; final;
    procedure setHint(para1: JLCharSequence); overload; virtual; final;
    procedure setHint(para1: jint); overload; virtual; final;
    function getHint(): JLCharSequence; overload; virtual;
    procedure setInputType(para1: jint); overload; virtual;
    procedure setRawInputType(para1: jint); overload; virtual;
    function getInputType(): jint; overload; virtual;
    procedure setImeOptions(para1: jint); overload; virtual;
    function getImeOptions(): jint; overload; virtual;
    procedure setImeActionLabel(para1: JLCharSequence; para2: jint); overload; virtual;
    function getImeActionLabel(): JLCharSequence; overload; virtual;
    function getImeActionId(): jint; overload; virtual;
    procedure setOnEditorActionListener(para1: AWTextView.InnerOnEditorActionListener); overload; virtual;
    procedure onEditorAction(para1: jint); overload; virtual;
    procedure setPrivateImeOptions(para1: JLString); overload; virtual;
    function getPrivateImeOptions(): JLString; overload; virtual;
    procedure setInputExtras(para1: jint); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function getInputExtras(para1: jboolean): AOBundle; overload; virtual;
    function getError(): JLCharSequence; overload; virtual;
    procedure setError(para1: JLCharSequence); overload; virtual;
    procedure setError(para1: JLCharSequence; para2: AGDDrawable); overload; virtual;
  strict protected
    function setFrame(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
  public
    procedure setFilters(para1: Arr1ATInputFilter); overload; virtual;
    procedure setFilters(var para1: array of ATInputFilter); overload; virtual;
    function getFilters(): Arr1ATInputFilter; overload; virtual;
    function onPreDraw(): jboolean; overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
  public
    procedure onScreenStateChanged(para1: jint); overload; virtual;
  strict protected
    function isPaddingOffsetRequired(): jboolean; overload; virtual;
    function getLeftPaddingOffset(): jint; overload; virtual;
    function getTopPaddingOffset(): jint; overload; virtual;
    function getBottomPaddingOffset(): jint; overload; virtual;
    function getRightPaddingOffset(): jint; overload; virtual;
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
    procedure invalidateDrawable(para1: AGDDrawable); overload; virtual;
    function hasOverlappingRendering(): jboolean; overload; virtual;
    function isTextSelectable(): jboolean; overload; virtual;
    procedure setTextIsSelectable(para1: jboolean); overload; virtual;
  strict protected
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
    procedure onDraw(para1: AGCanvas); overload; virtual;
  public
    procedure getFocusedRect(para1: AGRect); overload; virtual;
    function getLineCount(): jint; overload; virtual;
    function getLineBounds(para1: jint; para2: AGRect): jint; overload; virtual;
    function getBaseline(): jint; overload; virtual;
    function onKeyPreIme(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onCheckIsTextEditor(): jboolean; overload; virtual;
    function onCreateInputConnection(para1: AVIEditorInfo): AVIInputConnection; overload; virtual;
    function extractText(para1: AVIExtractedTextRequest; para2: AVIExtractedText): jboolean; overload; virtual;
    procedure setExtractedText(para1: AVIExtractedText); overload; virtual;
    procedure onCommitCompletion(para1: AVICompletionInfo); overload; virtual;
    procedure onCommitCorrection(para1: AVICorrectionInfo); overload; virtual;
    procedure beginBatchEdit(); overload; virtual;
    procedure endBatchEdit(); overload; virtual;
    procedure onBeginBatchEdit(); overload; virtual;
    procedure onEndBatchEdit(); overload; virtual;
    function onPrivateIMECommand(para1: JLString; para2: AOBundle): jboolean; overload; virtual;
    procedure setIncludeFontPadding(para1: jboolean); overload; virtual;
    function getIncludeFontPadding(): jboolean; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function bringPointIntoView(para1: jint): jboolean; overload; virtual;
    function moveCursorToVisibleOffset(): jboolean; overload; virtual;
    procedure computeScroll(); overload; virtual;
    procedure debug(para1: jint); overload; virtual;
    function getSelectionStart(): jint; overload; virtual;
    function getSelectionEnd(): jint; overload; virtual;
    function hasSelection(): jboolean; overload; virtual;
    procedure setSingleLine(); overload; virtual;
    procedure setAllCaps(para1: jboolean); overload; virtual;
    procedure setSingleLine(para1: jboolean); overload; virtual;
    procedure setEllipsize(para1: ATTextUtils.InnerTruncateAt); overload; virtual;
    procedure setMarqueeRepeatLimit(para1: jint); overload; virtual;
    function getMarqueeRepeatLimit(): jint; overload; virtual;
    function getEllipsize(): ATTextUtils.InnerTruncateAt; overload; virtual;
    procedure setSelectAllOnFocus(para1: jboolean); overload; virtual;
    procedure setCursorVisible(para1: jboolean); overload; virtual;
    function isCursorVisible(): jboolean; overload; virtual;
  strict protected
    procedure onTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onSelectionChanged(para1: jint; para2: jint); overload; virtual;
  public
    procedure addTextChangedListener(para1: ATTextWatcher); overload; virtual;
    procedure removeTextChangedListener(para1: ATTextWatcher); overload; virtual;
    procedure onStartTemporaryDetach(); overload; virtual;
    procedure onFinishTemporaryDetach(); overload; virtual;
  strict protected
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
  public
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
  strict protected
    procedure onVisibilityChanged(para1: AVView; para2: jint); overload; virtual;
  public
    procedure clearComposingText(); overload; virtual;
    procedure setSelected(para1: jboolean); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function didTouchFocusSelect(): jboolean; overload; virtual;
    procedure cancelLongPress(); overload; virtual;
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure setScroller(para1: AWScroller); overload; virtual;
  strict protected
    function getLeftFadingEdgeStrength(): jfloat; overload; virtual;
    function getRightFadingEdgeStrength(): jfloat; overload; virtual;
    function computeHorizontalScrollRange(): jint; overload; virtual;
    function computeVerticalScrollRange(): jint; overload; virtual;
    function computeVerticalScrollExtent(): jint; overload; virtual;
  public
    procedure findViewsWithText(para1: JUArrayList; para2: JLCharSequence; para3: jint); overload; virtual;
    function onKeyShortcut(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    procedure onPopulateAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
    procedure sendAccessibilityEvent(para1: jint); overload; virtual;
    function isInputMethodTarget(): jboolean; overload; virtual;
    function onTextContextMenuItem(para1: jint): jboolean; overload; virtual;
    function performLongClick(): jboolean; overload; virtual;
  strict protected
    procedure onScrollChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  public
    function isSuggestionsEnabled(): jboolean; overload; virtual;
    procedure setCustomSelectionActionModeCallback(para1: AVActionMode.InnerCallback); overload; virtual;
    function getCustomSelectionActionModeCallback(): AVActionMode.InnerCallback; overload; virtual;
    function getOffsetForPosition(para1: jfloat; para2: jfloat): jint; overload; virtual;
    function onDragEvent(para1: AVDragEvent): jboolean; overload; virtual;
    procedure onRtlPropertiesChanged(para1: jint); overload; virtual;
  end;

  AWZoomButtonsController = class external 'android.widget' name 'ZoomButtonsController' (JLObject, AVView.InnerOnTouchListener)
  public
    type
      InnerOnZoomListener = interface;
      Arr1InnerOnZoomListener = array of InnerOnZoomListener;
      Arr2InnerOnZoomListener = array of Arr1InnerOnZoomListener;
      Arr3InnerOnZoomListener = array of Arr2InnerOnZoomListener;
      InnerOnZoomListener = interface external 'android.widget' name 'OnZoomListener' 
        procedure onVisibilityChanged(para1: jboolean); overload;
        procedure onZoom(para1: jboolean); overload;
      end;

  public
    constructor create(para1: AVView); overload;
    procedure setZoomInEnabled(para1: jboolean); overload; virtual;
    procedure setZoomOutEnabled(para1: jboolean); overload; virtual;
    procedure setZoomSpeed(para1: jlong); overload; virtual;
    procedure setOnZoomListener(para1: AWZoomButtonsController.InnerOnZoomListener); overload; virtual;
    procedure setFocusable(para1: jboolean); overload; virtual;
    function isAutoDismissed(): jboolean; overload; virtual;
    procedure setAutoDismissed(para1: jboolean); overload; virtual;
    function isVisible(): jboolean; overload; virtual;
    procedure setVisible(para1: jboolean); overload; virtual;
    function getContainer(): AVViewGroup; overload; virtual;
    function getZoomControls(): AVView; overload; virtual;
    function onTouch(para1: AVView; para2: AVMotionEvent): jboolean; overload; virtual;
  end;

  ATSImageSpan = class external 'android.text.style' name 'ImageSpan' (ATSDynamicDrawableSpan)
  public
    constructor create(para1: AGBitmap); overload;
    constructor create(para1: AGBitmap; para2: jint); overload;
    constructor create(para1: ACContext; para2: AGBitmap); overload;
    constructor create(para1: ACContext; para2: AGBitmap; para3: jint); overload;
    constructor create(para1: AGDDrawable); overload;
    constructor create(para1: AGDDrawable; para2: jint); overload;
    constructor create(para1: AGDDrawable; para2: JLString); overload;
    constructor create(para1: AGDDrawable; para2: JLString; para3: jint); overload;
    constructor create(para1: ACContext; para2: ANUri); overload;
    constructor create(para1: ACContext; para2: ANUri; para3: jint); overload;
    constructor create(para1: ACContext; para2: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint); overload;
    function getDrawable(): AGDDrawable; overload; virtual;
    function getSource(): JLString; overload; virtual;
  end;

  AWSimpleCursorAdapter = class external 'android.widget' name 'SimpleCursorAdapter' (AWResourceCursorAdapter)
  public
    type
      InnerCursorToStringConverter = interface;
      Arr1InnerCursorToStringConverter = array of InnerCursorToStringConverter;
      Arr2InnerCursorToStringConverter = array of Arr1InnerCursorToStringConverter;
      Arr3InnerCursorToStringConverter = array of Arr2InnerCursorToStringConverter;
      InnerViewBinder = interface;
      Arr1InnerViewBinder = array of InnerViewBinder;
      Arr2InnerViewBinder = array of Arr1InnerViewBinder;
      Arr3InnerViewBinder = array of Arr2InnerViewBinder;
      InnerCursorToStringConverter = interface external 'android.widget' name 'CursorToStringConverter' 
        function convertToString(para1: ADCursor): JLCharSequence; overload;
      end;

      InnerViewBinder = interface external 'android.widget' name 'ViewBinder' 
        function setViewValue(para1: AVView; para2: ADCursor; para3: jint): jboolean; overload;
      end;

  public
    constructor create(para1: ACContext; para2: jint; para3: ADCursor; para4: Arr1JLString; para5: Arr1jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: ADCursor; const para4: array of JLString; const para5: array of jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: ADCursor; para4: Arr1JLString; para5: Arr1jint; para6: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: ADCursor; const para4: array of JLString; const para5: array of jint; para6: jint); overload;
    procedure bindView(para1: AVView; para2: ACContext; para3: ADCursor); overload; virtual;
    function getViewBinder(): AWSimpleCursorAdapter.InnerViewBinder; overload; virtual;
    procedure setViewBinder(para1: AWSimpleCursorAdapter.InnerViewBinder); overload; virtual;
    procedure setViewImage(para1: AWImageView; para2: JLString); overload; virtual;
    procedure setViewText(para1: AWTextView; para2: JLString); overload; virtual;
    function getStringConversionColumn(): jint; overload; virtual;
    procedure setStringConversionColumn(para1: jint); overload; virtual;
    function getCursorToStringConverter(): AWSimpleCursorAdapter.InnerCursorToStringConverter; overload; virtual;
    procedure setCursorToStringConverter(para1: AWSimpleCursorAdapter.InnerCursorToStringConverter); overload; virtual;
    function convertToString(para1: ADCursor): JLCharSequence; overload; virtual;
    function swapCursor(para1: ADCursor): ADCursor; overload; virtual;
    procedure changeCursorAndColumns(para1: ADCursor; para2: Arr1JLString; para3: Arr1jint); overload; virtual;
    procedure changeCursorAndColumns(para1: ADCursor; var para2: array of JLString; var para3: array of jint); overload; virtual;
  end;

  JUJJarInputStream = class external 'java.util.jar' name 'JarInputStream' (JUZZipInputStream)
  public
    constructor create(para1: JIInputStream; para2: jboolean); overload;  // throws java.io.IOException
    constructor create(para1: JIInputStream); overload;  // throws java.io.IOException
    function getManifest(): JUJManifest; overload; virtual;
    function getNextJarEntry(): JUJJarEntry; overload; virtual;  // throws java.io.IOException
    function read(para1: Arr1jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function read(var para1: array of jbyte; para2: jint; para3: jint): jint; overload; virtual;  // throws java.io.IOException
    function getNextEntry(): JUZZipEntry; overload; virtual;  // throws java.io.IOException
    procedure closeEntry(); overload; virtual;  // throws java.io.IOException
  strict protected
    function createZipEntry(para1: JLString): JUZZipEntry; overload; virtual;
  end;

  JNCSAbstractSelectableChannel = class abstract external 'java.nio.channels.spi' name 'AbstractSelectableChannel' (JNCSelectableChannel)
  strict protected
    constructor create(para1: JNCSSelectorProvider); overload;
  public
    function provider(): JNCSSelectorProvider; overload; virtual; final;
    function isRegistered(): jboolean; overload; virtual; final;
    function keyFor(para1: JNCSelector): JNCSelectionKey; overload; virtual; final;
    function register(para1: JNCSelector; para2: jint; para3: JLObject): JNCSelectionKey; overload; virtual; final;  // throws java.nio.channels.ClosedChannelException
  strict protected
    procedure implCloseChannel(); overload; virtual; final;  // throws java.io.IOException
    procedure implCloseSelectableChannel(); overload; virtual; abstract;  // throws java.io.IOException
  public
    function isBlocking(): jboolean; overload; virtual; final;
    function blockingLock(): JLObject; overload; virtual; final;
    function configureBlocking(para1: jboolean): JNCSelectableChannel; overload; virtual; final;  // throws java.io.IOException
  strict protected
    procedure implConfigureBlocking(para1: jboolean); overload; virtual; abstract;  // throws java.io.IOException
  end;

  JUJJarOutputStream = class external 'java.util.jar' name 'JarOutputStream' (JUZZipOutputStream)
  public
    constructor create(para1: JIOutputStream; para2: JUJManifest); overload;  // throws java.io.IOException
    constructor create(para1: JIOutputStream); overload;  // throws java.io.IOException
    procedure putNextEntry(para1: JUZZipEntry); overload; virtual;  // throws java.io.IOException
  end;

  OAHICTBasicPooledConnAdapter = class external 'org.apache.http.impl.conn.tsccm' name 'BasicPooledConnAdapter' (OAHICAbstractPooledConnAdapter)
  strict protected
    constructor create(para1: OAHICTThreadSafeClientConnManager; para2: OAHICAbstractPoolEntry); overload;
    function getManager(): OAHCClientConnectionManager; overload; virtual;
    function getPoolEntry(): OAHICAbstractPoolEntry; overload; virtual;
    procedure detach(); overload; virtual;
  end;

  OAHCMHttpPost = class external 'org.apache.http.client.methods' name 'HttpPost' (OAHCMHttpEntityEnclosingRequestBase)
  public
    const
      METHOD_NAME = 'POST';
  public
    constructor create(); overload;
    constructor create(para1: JNURI); overload;
    constructor create(para1: JLString); overload;
    function getMethod(): JLString; overload; virtual;
  end;

  OAHCMHttpPut = class external 'org.apache.http.client.methods' name 'HttpPut' (OAHCMHttpEntityEnclosingRequestBase)
  public
    const
      METHOD_NAME = 'PUT';
  public
    constructor create(); overload;
    constructor create(para1: JNURI); overload;
    constructor create(para1: JLString); overload;
    function getMethod(): JLString; overload; virtual;
  end;

  AIInputMethodService = class external 'android.inputmethodservice' name 'InputMethodService' (AIAbstractInputMethodService)
  public
    type
      InnerInsets = class;
      Arr1InnerInsets = array of InnerInsets;
      Arr2InnerInsets = array of Arr1InnerInsets;
      Arr3InnerInsets = array of Arr2InnerInsets;
      InnerInputMethodSessionImpl = class;
      Arr1InnerInputMethodSessionImpl = array of InnerInputMethodSessionImpl;
      Arr2InnerInputMethodSessionImpl = array of Arr1InnerInputMethodSessionImpl;
      Arr3InnerInputMethodSessionImpl = array of Arr2InnerInputMethodSessionImpl;
      InnerInputMethodImpl = class;
      Arr1InnerInputMethodImpl = array of InnerInputMethodImpl;
      Arr2InnerInputMethodImpl = array of Arr1InnerInputMethodImpl;
      Arr3InnerInputMethodImpl = array of Arr2InnerInputMethodImpl;
      InnerInsets = class sealed external 'android.inputmethodservice' name 'Insets' (JLObject)
      public
        const
          TOUCHABLE_INSETS_CONTENT = 1;
          TOUCHABLE_INSETS_FRAME = 0;
          TOUCHABLE_INSETS_REGION = 3;
          TOUCHABLE_INSETS_VISIBLE = 2;
      public
        var
          fcontentTopInsets: jint; external name 'contentTopInsets';
          ftouchableInsets: jint; external name 'touchableInsets';
      public
        final var
          ftouchableRegion: AGRegion; external name 'touchableRegion';
      public
        var
          fvisibleTopInsets: jint; external name 'visibleTopInsets';
      public
        constructor create(); overload;
      end;

      InnerInputMethodSessionImpl = class external 'android.inputmethodservice' name 'InputMethodSessionImpl' 
      end;

      InnerInputMethodImpl = class external 'android.inputmethodservice' name 'InputMethodImpl' 
      end;

  public
    const
      BACK_DISPOSITION_DEFAULT = 0;
      BACK_DISPOSITION_WILL_DISMISS = 2;
      BACK_DISPOSITION_WILL_NOT_DISMISS = 1;
  public
    constructor create(); overload;
    procedure setTheme(para1: jint); overload; virtual;
    function enableHardwareAcceleration(): jboolean; overload; virtual;
    procedure onCreate(); overload; virtual;
    procedure onInitializeInterface(); overload; virtual;
    procedure onDestroy(); overload; virtual;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    function onCreateInputMethodInterface(): AIAbstractInputMethodService.InnerAbstractInputMethodImpl; overload; virtual;
    function onCreateInputMethodSessionInterface(): AIAbstractInputMethodService.InnerAbstractInputMethodSessionImpl; overload; virtual;
    function getLayoutInflater(): AVLayoutInflater; overload; virtual;
    function getWindow(): AADialog; overload; virtual;
    procedure setBackDisposition(para1: jint); overload; virtual;
    function getBackDisposition(): jint; overload; virtual;
    function getMaxWidth(): jint; overload; virtual;
    function getCurrentInputBinding(): AVIInputBinding; overload; virtual;
    function getCurrentInputConnection(): AVIInputConnection; overload; virtual;
    function getCurrentInputStarted(): jboolean; overload; virtual;
    function getCurrentInputEditorInfo(): AVIEditorInfo; overload; virtual;
    procedure updateFullscreenMode(); overload; virtual;
    procedure onConfigureWindow(para1: AVWindow; para2: jboolean; para3: jboolean); overload; virtual;
    function isFullscreenMode(): jboolean; overload; virtual;
    function onEvaluateFullscreenMode(): jboolean; overload; virtual;
    procedure setExtractViewShown(para1: jboolean); overload; virtual;
    function isExtractViewShown(): jboolean; overload; virtual;
    procedure onComputeInsets(para1: AIInputMethodService.InnerInsets); overload; virtual;
    procedure updateInputViewShown(); overload; virtual;
    function isShowInputRequested(): jboolean; overload; virtual;
    function isInputViewShown(): jboolean; overload; virtual;
    function onEvaluateInputViewShown(): jboolean; overload; virtual;
    procedure setCandidatesViewShown(para1: jboolean); overload; virtual;
    function getCandidatesHiddenVisibility(): jint; overload; virtual;
    procedure showStatusIcon(para1: jint); overload; virtual;
    procedure hideStatusIcon(); overload; virtual;
    procedure switchInputMethod(para1: JLString); overload; virtual;
    procedure setExtractView(para1: AVView); overload; virtual;
    procedure setCandidatesView(para1: AVView); overload; virtual;
    procedure setInputView(para1: AVView); overload; virtual;
    function onCreateExtractTextView(): AVView; overload; virtual;
    function onCreateCandidatesView(): AVView; overload; virtual;
    function onCreateInputView(): AVView; overload; virtual;
    procedure onStartInputView(para1: AVIEditorInfo; para2: jboolean); overload; virtual;
    procedure onFinishInputView(para1: jboolean); overload; virtual;
    procedure onStartCandidatesView(para1: AVIEditorInfo; para2: jboolean); overload; virtual;
    procedure onFinishCandidatesView(para1: jboolean); overload; virtual;
    function onShowInputRequested(para1: jint; para2: jboolean): jboolean; overload; virtual;
    procedure showWindow(para1: jboolean); overload; virtual;
    procedure hideWindow(); overload; virtual;
    procedure onWindowShown(); overload; virtual;
    procedure onWindowHidden(); overload; virtual;
    procedure onBindInput(); overload; virtual;
    procedure onUnbindInput(); overload; virtual;
    procedure onStartInput(para1: AVIEditorInfo; para2: jboolean); overload; virtual;
    procedure onFinishInput(); overload; virtual;
    procedure onDisplayCompletions(para1: Arr1AVICompletionInfo); overload; virtual;
    procedure onDisplayCompletions(var para1: array of AVICompletionInfo); overload; virtual;
    procedure onUpdateExtractedText(para1: jint; para2: AVIExtractedText); overload; virtual;
    procedure onUpdateSelection(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload; virtual;
    procedure onViewClicked(para1: jboolean); overload; virtual;
    procedure onUpdateCursor(para1: AGRect); overload; virtual;
    procedure onUpdateCursorAnchorInfo(para1: AVICursorAnchorInfo); overload; virtual;
    procedure requestHideSelf(para1: jint); overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyLongPress(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure onAppPrivateCommand(para1: JLString; para2: AOBundle); overload; virtual;
    procedure sendDownUpKeyEvents(para1: jint); overload; virtual;
    function sendDefaultEditorAction(para1: jboolean): jboolean; overload; virtual;
    procedure sendKeyChar(para1: jchar); overload; virtual;
    procedure onExtractedSelectionChanged(para1: jint; para2: jint); overload; virtual;
    procedure onExtractedTextClicked(); overload; virtual;
    procedure onExtractedCursorMovement(para1: jint; para2: jint); overload; virtual;
    function onExtractTextContextMenuItem(para1: jint): jboolean; overload; virtual;
    function getTextForImeAction(para1: jint): JLCharSequence; overload; virtual;
    procedure onUpdateExtractingVisibility(para1: AVIEditorInfo); overload; virtual;
    procedure onUpdateExtractingViews(para1: AVIEditorInfo); overload; virtual;
    procedure onExtractingInputChanged(para1: AVIEditorInfo); overload; virtual;
  strict protected
    procedure onCurrentInputMethodSubtypeChanged(para1: AVIInputMethodSubtype); overload; virtual;
  public
    function getInputMethodWindowRecommendedHeight(): jint; overload; virtual;
  strict protected
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
  end;

  AAAccountAuthenticatorActivity = class external 'android.accounts' name 'AccountAuthenticatorActivity' (AAActivity)
  public
    constructor create(); overload;
    procedure setAccountAuthenticatorResult(para1: AOBundle); overload; virtual; final;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
  public
    procedure finish(); overload; virtual;
  end;

  AAActivityGroup = class external 'android.app' name 'ActivityGroup' (AAActivity)
  public
    constructor create(); overload;
    constructor create(para1: jboolean); overload;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
    procedure onResume(); overload; virtual;
    procedure onSaveInstanceState(para1: AOBundle); overload; virtual;
    procedure onPause(); overload; virtual;
    procedure onStop(); overload; virtual;
    procedure onDestroy(); overload; virtual;
  public
    function getCurrentActivity(): AAActivity; overload; virtual;
    function getLocalActivityManager(): AALocalActivityManager; overload; virtual; final;
  end;

  AAAliasActivity = class external 'android.app' name 'AliasActivity' (AAActivity)
  public
    constructor create(); overload;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
  end;

  AAListActivity = class external 'android.app' name 'ListActivity' (AAActivity)
  public
    constructor create(); overload;
  strict protected
    procedure onListItemClick(para1: AWListView; para2: AVView; para3: jint; para4: jlong); overload; virtual;
    procedure onRestoreInstanceState(para1: AOBundle); overload; virtual;
    procedure onDestroy(); overload; virtual;
  public
    procedure onContentChanged(); overload; virtual;
    procedure setListAdapter(para1: AWListAdapter); overload; virtual;
    procedure setSelection(para1: jint); overload; virtual;
    function getSelectedItemPosition(): jint; overload; virtual;
    function getSelectedItemId(): jlong; overload; virtual;
    function getListView(): AWListView; overload; virtual;
    function getListAdapter(): AWListAdapter; overload; virtual;
  end;

  AANativeActivity = class external 'android.app' name 'NativeActivity' (AAActivity, AVSurfaceHolder.InnerCallback2, AVInputQueue.InnerCallback, AVViewTreeObserver.InnerOnGlobalLayoutListener)
  public
    const
      META_DATA_FUNC_NAME = 'android.app.func_name';
      META_DATA_LIB_NAME = 'android.app.lib_name';
  public
    constructor create(); overload;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
    procedure onDestroy(); overload; virtual;
    procedure onPause(); overload; virtual;
    procedure onResume(); overload; virtual;
    procedure onSaveInstanceState(para1: AOBundle); overload; virtual;
    procedure onStart(); overload; virtual;
    procedure onStop(); overload; virtual;
  public
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    procedure onLowMemory(); overload; virtual;
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure surfaceCreated(para1: AVSurfaceHolder); overload; virtual;
    procedure surfaceChanged(para1: AVSurfaceHolder; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure surfaceRedrawNeeded(para1: AVSurfaceHolder); overload; virtual;
    procedure surfaceDestroyed(para1: AVSurfaceHolder); overload; virtual;
    procedure onInputQueueCreated(para1: AVInputQueue); overload; virtual;
    procedure onInputQueueDestroyed(para1: AVInputQueue); overload; virtual;
    procedure onGlobalLayout(); overload; virtual;
  end;

  AADialogFragment = class external 'android.app' name 'DialogFragment' (AAFragment, ACDialogInterface.InnerOnCancelListener, ACDialogInterface.InnerOnDismissListener)
  public
    const
      STYLE_NORMAL = 0;
      STYLE_NO_FRAME = 2;
      STYLE_NO_INPUT = 3;
      STYLE_NO_TITLE = 1;
  public
    constructor create(); overload;
    procedure setStyle(para1: jint; para2: jint); overload; virtual;
    procedure show(para1: AAFragmentManager; para2: JLString); overload; virtual;
    function show(para1: AAFragmentTransaction; para2: JLString): jint; overload; virtual;
    procedure dismiss(); overload; virtual;
    procedure dismissAllowingStateLoss(); overload; virtual;
    function getDialog(): AADialog; overload; virtual;
    function getTheme(): jint; overload; virtual;
    procedure setCancelable(para1: jboolean); overload; virtual;
    function isCancelable(): jboolean; overload; virtual;
    procedure setShowsDialog(para1: jboolean); overload; virtual;
    function getShowsDialog(): jboolean; overload; virtual;
    procedure onAttach(para1: AAActivity); overload; virtual;
    procedure onDetach(); overload; virtual;
    procedure onCreate(para1: AOBundle); overload; virtual;
    function onCreateDialog(para1: AOBundle): AADialog; overload; virtual;
    procedure onCancel(para1: ACDialogInterface); overload; virtual;
    procedure onDismiss(para1: ACDialogInterface); overload; virtual;
    procedure onActivityCreated(para1: AOBundle); overload; virtual;
    procedure onStart(); overload; virtual;
    procedure onSaveInstanceState(para1: AOBundle); overload; virtual;
    procedure onStop(); overload; virtual;
    procedure onDestroyView(); overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; para4: Arr1JLString); overload; virtual;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; var para4: array of JLString); overload; virtual;
  end;

  AAFragmentManager = class abstract external 'android.app' name 'FragmentManager' (JLObject)
  public
    type
      InnerOnBackStackChangedListener = interface;
      Arr1InnerOnBackStackChangedListener = array of InnerOnBackStackChangedListener;
      Arr2InnerOnBackStackChangedListener = array of Arr1InnerOnBackStackChangedListener;
      Arr3InnerOnBackStackChangedListener = array of Arr2InnerOnBackStackChangedListener;
      InnerBackStackEntry = interface;
      Arr1InnerBackStackEntry = array of InnerBackStackEntry;
      Arr2InnerBackStackEntry = array of Arr1InnerBackStackEntry;
      Arr3InnerBackStackEntry = array of Arr2InnerBackStackEntry;
      InnerOnBackStackChangedListener = interface external 'android.app' name 'OnBackStackChangedListener' 
        procedure onBackStackChanged(); overload;
      end;

      InnerBackStackEntry = interface external 'android.app' name 'BackStackEntry' 
        function getId(): jint; overload;
        function getName(): JLString; overload;
        function getBreadCrumbTitleRes(): jint; overload;
        function getBreadCrumbShortTitleRes(): jint; overload;
        function getBreadCrumbTitle(): JLCharSequence; overload;
        function getBreadCrumbShortTitle(): JLCharSequence; overload;
      end;

  public
    const
      POP_BACK_STACK_INCLUSIVE = 1;
  public
    constructor create(); overload;
    function beginTransaction(): AAFragmentTransaction; overload; virtual; abstract;
    function executePendingTransactions(): jboolean; overload; virtual; abstract;
    function findFragmentById(para1: jint): AAFragment; overload; virtual; abstract;
    function findFragmentByTag(para1: JLString): AAFragment; overload; virtual; abstract;
    procedure popBackStack(); overload; virtual; abstract;
    function popBackStackImmediate(): jboolean; overload; virtual; abstract;
    procedure popBackStack(para1: JLString; para2: jint); overload; virtual; abstract;
    function popBackStackImmediate(para1: JLString; para2: jint): jboolean; overload; virtual; abstract;
    procedure popBackStack(para1: jint; para2: jint); overload; virtual; abstract;
    function popBackStackImmediate(para1: jint; para2: jint): jboolean; overload; virtual; abstract;
    function getBackStackEntryCount(): jint; overload; virtual; abstract;
    function getBackStackEntryAt(para1: jint): AAFragmentManager.InnerBackStackEntry; overload; virtual; abstract;
    procedure addOnBackStackChangedListener(para1: AAFragmentManager.InnerOnBackStackChangedListener); overload; virtual; abstract;
    procedure removeOnBackStackChangedListener(para1: AAFragmentManager.InnerOnBackStackChangedListener); overload; virtual; abstract;
    procedure putFragment(para1: AOBundle; para2: JLString; para3: AAFragment); overload; virtual; abstract;
    function getFragment(para1: AOBundle; para2: JLString): AAFragment; overload; virtual; abstract;
    function saveFragmentInstanceState(para1: AAFragment): AAFragment.InnerSavedState; overload; virtual; abstract;
    function isDestroyed(): jboolean; overload; virtual; abstract;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; para4: Arr1JLString); overload; virtual; abstract;
    procedure dump(para1: JLString; para2: JIFileDescriptor; para3: JIPrintWriter; var para4: array of JLString); overload; virtual; abstract;
    class procedure enableDebugLogging(para1: jboolean); static; overload;
    procedure invalidateOptionsMenu(); overload; virtual;
  end;

  AAListFragment = class external 'android.app' name 'ListFragment' (AAFragment)
  public
    constructor create(); overload;
    function onCreateView(para1: AVLayoutInflater; para2: AVViewGroup; para3: AOBundle): AVView; overload; virtual;
    procedure onViewCreated(para1: AVView; para2: AOBundle); overload; virtual;
    procedure onDestroyView(); overload; virtual;
    procedure onListItemClick(para1: AWListView; para2: AVView; para3: jint; para4: jlong); overload; virtual;
    procedure setListAdapter(para1: AWListAdapter); overload; virtual;
    procedure setSelection(para1: jint); overload; virtual;
    function getSelectedItemPosition(): jint; overload; virtual;
    function getSelectedItemId(): jlong; overload; virtual;
    function getListView(): AWListView; overload; virtual;
    procedure setEmptyText(para1: JLCharSequence); overload; virtual;
    procedure setListShown(para1: jboolean); overload; virtual;
    procedure setListShownNoAnimation(para1: jboolean); overload; virtual;
    function getListAdapter(): AWListAdapter; overload; virtual;
  end;

  APPreferenceFragment = class abstract external 'android.preference' name 'PreferenceFragment' (AAFragment)
  public
    type
      InnerOnPreferenceStartFragmentCallback = interface;
      Arr1InnerOnPreferenceStartFragmentCallback = array of InnerOnPreferenceStartFragmentCallback;
      Arr2InnerOnPreferenceStartFragmentCallback = array of Arr1InnerOnPreferenceStartFragmentCallback;
      Arr3InnerOnPreferenceStartFragmentCallback = array of Arr2InnerOnPreferenceStartFragmentCallback;
      InnerOnPreferenceStartFragmentCallback = interface external 'android.preference' name 'OnPreferenceStartFragmentCallback' 
        function onPreferenceStartFragment(para1: APPreferenceFragment; para2: APPreference): jboolean; overload;
      end;

  public
    constructor create(); overload;
    procedure onCreate(para1: AOBundle); overload; virtual;
    function onCreateView(para1: AVLayoutInflater; para2: AVViewGroup; para3: AOBundle): AVView; overload; virtual;
    procedure onActivityCreated(para1: AOBundle); overload; virtual;
    procedure onStart(); overload; virtual;
    procedure onStop(); overload; virtual;
    procedure onDestroyView(); overload; virtual;
    procedure onDestroy(); overload; virtual;
    procedure onSaveInstanceState(para1: AOBundle); overload; virtual;
    procedure onActivityResult(para1: jint; para2: jint; para3: ACIntent); overload; virtual;
    function getPreferenceManager(): APPreferenceManager; overload; virtual;
    procedure setPreferenceScreen(para1: APPreferenceScreen); overload; virtual;
    function getPreferenceScreen(): APPreferenceScreen; overload; virtual;
    procedure addPreferencesFromIntent(para1: ACIntent); overload; virtual;
    procedure addPreferencesFromResource(para1: jint); overload; virtual;
    function onPreferenceTreeClick(para1: APPreferenceScreen; para2: APPreference): jboolean; overload; virtual;
    function findPreference(para1: JLCharSequence): APPreference; overload; virtual;
  end;

  AWWebViewFragment = class external 'android.webkit' name 'WebViewFragment' (AAFragment)
  public
    constructor create(); overload;
    function onCreateView(para1: AVLayoutInflater; para2: AVViewGroup; para3: AOBundle): AVView; overload; virtual;
    procedure onPause(); overload; virtual;
    procedure onResume(); overload; virtual;
    procedure onDestroyView(); overload; virtual;
    procedure onDestroy(); overload; virtual;
    function getWebView(): AWWebView; overload; virtual;
  end;

  AOGLSurfaceView = class external 'android.opengl' name 'GLSurfaceView' (AVSurfaceView, AVSurfaceHolder.InnerCallback)
  public
    type
      InnerEGLConfigChooser = interface;
      Arr1InnerEGLConfigChooser = array of InnerEGLConfigChooser;
      Arr2InnerEGLConfigChooser = array of Arr1InnerEGLConfigChooser;
      Arr3InnerEGLConfigChooser = array of Arr2InnerEGLConfigChooser;
      InnerEGLWindowSurfaceFactory = interface;
      Arr1InnerEGLWindowSurfaceFactory = array of InnerEGLWindowSurfaceFactory;
      Arr2InnerEGLWindowSurfaceFactory = array of Arr1InnerEGLWindowSurfaceFactory;
      Arr3InnerEGLWindowSurfaceFactory = array of Arr2InnerEGLWindowSurfaceFactory;
      InnerEGLContextFactory = interface;
      Arr1InnerEGLContextFactory = array of InnerEGLContextFactory;
      Arr2InnerEGLContextFactory = array of Arr1InnerEGLContextFactory;
      Arr3InnerEGLContextFactory = array of Arr2InnerEGLContextFactory;
      InnerRenderer = interface;
      Arr1InnerRenderer = array of InnerRenderer;
      Arr2InnerRenderer = array of Arr1InnerRenderer;
      Arr3InnerRenderer = array of Arr2InnerRenderer;
      InnerGLWrapper = interface;
      Arr1InnerGLWrapper = array of InnerGLWrapper;
      Arr2InnerGLWrapper = array of Arr1InnerGLWrapper;
      Arr3InnerGLWrapper = array of Arr2InnerGLWrapper;
      InnerEGLConfigChooser = interface external 'android.opengl' name 'EGLConfigChooser' 
        function chooseConfig(para1: JMKEEGL10; para2: JMKEEGLDisplay): JMKEEGLConfig; overload;
      end;

      InnerEGLWindowSurfaceFactory = interface external 'android.opengl' name 'EGLWindowSurfaceFactory' 
        function createWindowSurface(para1: JMKEEGL10; para2: JMKEEGLDisplay; para3: JMKEEGLConfig; para4: JLObject): JMKEEGLSurface; overload;
        procedure destroySurface(para1: JMKEEGL10; para2: JMKEEGLDisplay; para3: JMKEEGLSurface); overload;
      end;

      InnerEGLContextFactory = interface external 'android.opengl' name 'EGLContextFactory' 
        function createContext(para1: JMKEEGL10; para2: JMKEEGLDisplay; para3: JMKEEGLConfig): JMKEEGLContext; overload;
        procedure destroyContext(para1: JMKEEGL10; para2: JMKEEGLDisplay; para3: JMKEEGLContext); overload;
      end;

      InnerRenderer = interface external 'android.opengl' name 'Renderer' 
        procedure onSurfaceCreated(para1: JMKOGL10; para2: JMKEEGLConfig); overload;
        procedure onSurfaceChanged(para1: JMKOGL10; para2: jint; para3: jint); overload;
        procedure onDrawFrame(para1: JMKOGL10); overload;
      end;

      InnerGLWrapper = interface external 'android.opengl' name 'GLWrapper' 
        function wrap(para1: JMKOGL): JMKOGL; overload;
      end;

  public
    const
      DEBUG_CHECK_GL_ERROR = 1;
      DEBUG_LOG_GL_CALLS = 2;
      RENDERMODE_CONTINUOUSLY = 1;
      RENDERMODE_WHEN_DIRTY = 0;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    procedure setGLWrapper(para1: AOGLSurfaceView.InnerGLWrapper); overload; virtual;
    procedure setDebugFlags(para1: jint); overload; virtual;
    function getDebugFlags(): jint; overload; virtual;
    procedure setPreserveEGLContextOnPause(para1: jboolean); overload; virtual;
    function getPreserveEGLContextOnPause(): jboolean; overload; virtual;
    procedure setRenderer(para1: AOGLSurfaceView.InnerRenderer); overload; virtual;
    procedure setEGLContextFactory(para1: AOGLSurfaceView.InnerEGLContextFactory); overload; virtual;
    procedure setEGLWindowSurfaceFactory(para1: AOGLSurfaceView.InnerEGLWindowSurfaceFactory); overload; virtual;
    procedure setEGLConfigChooser(para1: AOGLSurfaceView.InnerEGLConfigChooser); overload; virtual;
    procedure setEGLConfigChooser(para1: jboolean); overload; virtual;
    procedure setEGLConfigChooser(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); overload; virtual;
    procedure setEGLContextClientVersion(para1: jint); overload; virtual;
    procedure setRenderMode(para1: jint); overload; virtual;
    function getRenderMode(): jint; overload; virtual;
    procedure requestRender(); overload; virtual;
    procedure surfaceCreated(para1: AVSurfaceHolder); overload; virtual;
    procedure surfaceDestroyed(para1: AVSurfaceHolder); overload; virtual;
    procedure surfaceChanged(para1: AVSurfaceHolder; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onPause(); overload; virtual;
    procedure onResume(); overload; virtual;
    procedure queueEvent(para1: JLRunnable); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  end;

  AAActionBar = class abstract external 'android.app' name 'ActionBar' (JLObject)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerTabListener = interface;
      Arr1InnerTabListener = array of InnerTabListener;
      Arr2InnerTabListener = array of Arr1InnerTabListener;
      Arr3InnerTabListener = array of Arr2InnerTabListener;
      InnerTab = class;
      Arr1InnerTab = array of InnerTab;
      Arr2InnerTab = array of Arr1InnerTab;
      Arr3InnerTab = array of Arr2InnerTab;
      InnerOnMenuVisibilityListener = interface;
      Arr1InnerOnMenuVisibilityListener = array of InnerOnMenuVisibilityListener;
      Arr2InnerOnMenuVisibilityListener = array of Arr1InnerOnMenuVisibilityListener;
      Arr3InnerOnMenuVisibilityListener = array of Arr2InnerOnMenuVisibilityListener;
      InnerOnNavigationListener = interface;
      Arr1InnerOnNavigationListener = array of InnerOnNavigationListener;
      Arr2InnerOnNavigationListener = array of Arr1InnerOnNavigationListener;
      Arr3InnerOnNavigationListener = array of Arr2InnerOnNavigationListener;
      InnerLayoutParams = class external 'android.app' name 'LayoutParams' (AVViewGroup.InnerMarginLayoutParams)
      public
        var
          fgravity: jint; external name 'gravity';
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jint); overload;
        constructor create(para1: jint); overload;
        constructor create(para1: AAActionBar.InnerLayoutParams); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
      end;

      InnerTabListener = interface external 'android.app' name 'TabListener' 
        procedure onTabSelected(para1: AAActionBar.InnerTab; para2: AAFragmentTransaction); overload;
        procedure onTabUnselected(para1: AAActionBar.InnerTab; para2: AAFragmentTransaction); overload;
        procedure onTabReselected(para1: AAActionBar.InnerTab; para2: AAFragmentTransaction); overload;
      end;

      InnerTab = class abstract external 'android.app' name 'Tab' (JLObject)
      public
        const
          INVALID_POSITION = -1;
      public
        constructor create(); overload;
        function getPosition(): jint; overload; virtual; abstract;
        function getIcon(): AGDDrawable; overload; virtual; abstract;
        function getText(): JLCharSequence; overload; virtual; abstract;
        function setIcon(para1: AGDDrawable): AAActionBar.InnerTab; overload; virtual; abstract;
        function setIcon(para1: jint): AAActionBar.InnerTab; overload; virtual; abstract;
        function setText(para1: JLCharSequence): AAActionBar.InnerTab; overload; virtual; abstract;
        function setText(para1: jint): AAActionBar.InnerTab; overload; virtual; abstract;
        function setCustomView(para1: AVView): AAActionBar.InnerTab; overload; virtual; abstract;
        function setCustomView(para1: jint): AAActionBar.InnerTab; overload; virtual; abstract;
        function getCustomView(): AVView; overload; virtual; abstract;
        function setTag(para1: JLObject): AAActionBar.InnerTab; overload; virtual; abstract;
        function getTag(): JLObject; overload; virtual; abstract;
        function setTabListener(para1: AAActionBar.InnerTabListener): AAActionBar.InnerTab; overload; virtual; abstract;
        procedure select(); overload; virtual; abstract;
        function setContentDescription(para1: jint): AAActionBar.InnerTab; overload; virtual; abstract;
        function setContentDescription(para1: JLCharSequence): AAActionBar.InnerTab; overload; virtual; abstract;
        function getContentDescription(): JLCharSequence; overload; virtual; abstract;
      end;

      InnerOnMenuVisibilityListener = interface external 'android.app' name 'OnMenuVisibilityListener' 
        procedure onMenuVisibilityChanged(para1: jboolean); overload;
      end;

      InnerOnNavigationListener = interface external 'android.app' name 'OnNavigationListener' 
        function onNavigationItemSelected(para1: jint; para2: jlong): jboolean; overload;
      end;

  public
    const
      DISPLAY_HOME_AS_UP = 4;
      DISPLAY_SHOW_CUSTOM = 16;
      DISPLAY_SHOW_HOME = 2;
      DISPLAY_SHOW_TITLE = 8;
      DISPLAY_USE_LOGO = 1;
      NAVIGATION_MODE_LIST = 1 deprecated;
      NAVIGATION_MODE_STANDARD = 0 deprecated;
      NAVIGATION_MODE_TABS = 2 deprecated;
  public
    constructor create(); overload;
    procedure setCustomView(para1: AVView); overload; virtual; abstract;
    procedure setCustomView(para1: AVView; para2: AAActionBar.InnerLayoutParams); overload; virtual; abstract;
    procedure setCustomView(para1: jint); overload; virtual; abstract;
    procedure setIcon(para1: jint); overload; virtual; abstract;
    procedure setIcon(para1: AGDDrawable); overload; virtual; abstract;
    procedure setLogo(para1: jint); overload; virtual; abstract;
    procedure setLogo(para1: AGDDrawable); overload; virtual; abstract;
    procedure setListNavigationCallbacks(para1: AWSpinnerAdapter; para2: AAActionBar.InnerOnNavigationListener); overload; virtual; abstract;
    procedure setSelectedNavigationItem(para1: jint); overload; virtual; abstract;
    function getSelectedNavigationIndex(): jint; overload; virtual; abstract;
    function getNavigationItemCount(): jint; overload; virtual; abstract;
    procedure setTitle(para1: JLCharSequence); overload; virtual; abstract;
    procedure setTitle(para1: jint); overload; virtual; abstract;
    procedure setSubtitle(para1: JLCharSequence); overload; virtual; abstract;
    procedure setSubtitle(para1: jint); overload; virtual; abstract;
    procedure setDisplayOptions(para1: jint); overload; virtual; abstract;
    procedure setDisplayOptions(para1: jint; para2: jint); overload; virtual; abstract;
    procedure setDisplayUseLogoEnabled(para1: jboolean); overload; virtual; abstract;
    procedure setDisplayShowHomeEnabled(para1: jboolean); overload; virtual; abstract;
    procedure setDisplayHomeAsUpEnabled(para1: jboolean); overload; virtual; abstract;
    procedure setDisplayShowTitleEnabled(para1: jboolean); overload; virtual; abstract;
    procedure setDisplayShowCustomEnabled(para1: jboolean); overload; virtual; abstract;
    procedure setBackgroundDrawable(para1: AGDDrawable); overload; virtual; abstract;
    procedure setStackedBackgroundDrawable(para1: AGDDrawable); overload; virtual;
    procedure setSplitBackgroundDrawable(para1: AGDDrawable); overload; virtual;
    function getCustomView(): AVView; overload; virtual; abstract;
    function getTitle(): JLCharSequence; overload; virtual; abstract;
    function getSubtitle(): JLCharSequence; overload; virtual; abstract;
    function getNavigationMode(): jint; overload; virtual; abstract;
    procedure setNavigationMode(para1: jint); overload; virtual; abstract;
    function getDisplayOptions(): jint; overload; virtual; abstract;
    function newTab(): AAActionBar.InnerTab; overload; virtual; abstract;
    procedure addTab(para1: AAActionBar.InnerTab); overload; virtual; abstract;
    procedure addTab(para1: AAActionBar.InnerTab; para2: jboolean); overload; virtual; abstract;
    procedure addTab(para1: AAActionBar.InnerTab; para2: jint); overload; virtual; abstract;
    procedure addTab(para1: AAActionBar.InnerTab; para2: jint; para3: jboolean); overload; virtual; abstract;
    procedure removeTab(para1: AAActionBar.InnerTab); overload; virtual; abstract;
    procedure removeTabAt(para1: jint); overload; virtual; abstract;
    procedure removeAllTabs(); overload; virtual; abstract;
    procedure selectTab(para1: AAActionBar.InnerTab); overload; virtual; abstract;
    function getSelectedTab(): AAActionBar.InnerTab; overload; virtual; abstract;
    function getTabAt(para1: jint): AAActionBar.InnerTab; overload; virtual; abstract;
    function getTabCount(): jint; overload; virtual; abstract;
    function getHeight(): jint; overload; virtual; abstract;
    procedure show(); overload; virtual; abstract;
    procedure hide(); overload; virtual; abstract;
    function isShowing(): jboolean; overload; virtual; abstract;
    procedure addOnMenuVisibilityListener(para1: AAActionBar.InnerOnMenuVisibilityListener); overload; virtual; abstract;
    procedure removeOnMenuVisibilityListener(para1: AAActionBar.InnerOnMenuVisibilityListener); overload; virtual; abstract;
    procedure setHomeButtonEnabled(para1: jboolean); overload; virtual;
    function getThemedContext(): ACContext; overload; virtual;
    procedure setHomeAsUpIndicator(para1: AGDDrawable); overload; virtual;
    procedure setHomeAsUpIndicator(para1: jint); overload; virtual;
    procedure setHomeActionContentDescription(para1: JLCharSequence); overload; virtual;
    procedure setHomeActionContentDescription(para1: jint); overload; virtual;
    procedure setHideOnContentScrollEnabled(para1: jboolean); overload; virtual;
    function isHideOnContentScrollEnabled(): jboolean; overload; virtual;
    function getHideOffset(): jint; overload; virtual;
    procedure setHideOffset(para1: jint); overload; virtual;
    procedure setElevation(para1: jfloat); overload; virtual;
    function getElevation(): jfloat; overload; virtual;
  end;

  AWAbsoluteLayout = class external 'android.widget' name 'AbsoluteLayout' (AVViewGroup)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AVViewGroup_LayoutParams)
      public
        var
          fx: jint; external name 'x';
          fy: jint; external name 'y';
      public
        constructor create(para1: jint; para2: jint; para3: jint; para4: jint); overload;
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        function debug(para1: JLString): JLString; overload; virtual;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  strict protected
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function shouldDelayChildPressedState(): jboolean; overload; virtual;
  end;

  AWAdapterView = class abstract external 'android.widget' name 'AdapterView' (AVViewGroup)
  public
    type
      InnerOnItemSelectedListener = interface;
      Arr1InnerOnItemSelectedListener = array of InnerOnItemSelectedListener;
      Arr2InnerOnItemSelectedListener = array of Arr1InnerOnItemSelectedListener;
      Arr3InnerOnItemSelectedListener = array of Arr2InnerOnItemSelectedListener;
      InnerOnItemLongClickListener = interface;
      Arr1InnerOnItemLongClickListener = array of InnerOnItemLongClickListener;
      Arr2InnerOnItemLongClickListener = array of Arr1InnerOnItemLongClickListener;
      Arr3InnerOnItemLongClickListener = array of Arr2InnerOnItemLongClickListener;
      InnerOnItemClickListener = interface;
      Arr1InnerOnItemClickListener = array of InnerOnItemClickListener;
      Arr2InnerOnItemClickListener = array of Arr1InnerOnItemClickListener;
      Arr3InnerOnItemClickListener = array of Arr2InnerOnItemClickListener;
      InnerAdapterContextMenuInfo = class;
      Arr1InnerAdapterContextMenuInfo = array of InnerAdapterContextMenuInfo;
      Arr2InnerAdapterContextMenuInfo = array of Arr1InnerAdapterContextMenuInfo;
      Arr3InnerAdapterContextMenuInfo = array of Arr2InnerAdapterContextMenuInfo;
      InnerOnItemSelectedListener = interface external 'android.widget' name 'OnItemSelectedListener' 
        procedure onItemSelected(para1: AWAdapterView; para2: AVView; para3: jint; para4: jlong); overload;
        procedure onNothingSelected(para1: AWAdapterView); overload;
      end;

      InnerOnItemLongClickListener = interface external 'android.widget' name 'OnItemLongClickListener' 
        function onItemLongClick(para1: AWAdapterView; para2: AVView; para3: jint; para4: jlong): jboolean; overload;
      end;

      InnerOnItemClickListener = interface external 'android.widget' name 'OnItemClickListener' 
        procedure onItemClick(para1: AWAdapterView; para2: AVView; para3: jint; para4: jlong); overload;
      end;

      InnerAdapterContextMenuInfo = class external 'android.widget' name 'AdapterContextMenuInfo' (JLObject, AVContextMenu.InnerContextMenuInfo)
      public
        var
          fid: jlong; external name 'id';
          fposition: jint; external name 'position';
          ftargetView: AVView; external name 'targetView';
      public
        constructor create(para1: AVView; para2: jint; para3: jlong); overload;
      end;

  public
    const
      INVALID_POSITION = -1;
      INVALID_ROW_ID = jlong(-9223372036854775808);
      ITEM_VIEW_TYPE_HEADER_OR_FOOTER = -2;
      ITEM_VIEW_TYPE_IGNORE = -1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setOnItemClickListener(para1: AWAdapterView.InnerOnItemClickListener); overload; virtual;
    function getOnItemClickListener(): AWAdapterView.InnerOnItemClickListener; overload; virtual; final;
    function performItemClick(para1: AVView; para2: jint; para3: jlong): jboolean; overload; virtual;
    procedure setOnItemLongClickListener(para1: AWAdapterView.InnerOnItemLongClickListener); overload; virtual;
    function getOnItemLongClickListener(): AWAdapterView.InnerOnItemLongClickListener; overload; virtual; final;
    procedure setOnItemSelectedListener(para1: AWAdapterView.InnerOnItemSelectedListener); overload; virtual;
    function getOnItemSelectedListener(): AWAdapterView.InnerOnItemSelectedListener; overload; virtual; final;
    function getAdapter(): AWAdapter; overload; virtual; abstract;
    procedure setAdapter(para1: AWAdapter); overload; virtual; abstract;
    procedure addView(para1: AVView); overload; virtual;
    procedure addView(para1: AVView; para2: jint); overload; virtual;
    procedure addView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    procedure removeView(para1: AVView); overload; virtual;
    procedure removeViewAt(para1: jint); overload; virtual;
    procedure removeAllViews(); overload; virtual;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function getSelectedItemPosition(): jint; overload; virtual;
    function getSelectedItemId(): jlong; overload; virtual;
    function getSelectedView(): AVView; overload; virtual; abstract;
    function getSelectedItem(): JLObject; overload; virtual;
    function getCount(): jint; overload; virtual;
    function getPositionForView(para1: AVView): jint; overload; virtual;
    function getFirstVisiblePosition(): jint; overload; virtual;
    function getLastVisiblePosition(): jint; overload; virtual;
    procedure setSelection(para1: jint); overload; virtual; abstract;
    procedure setEmptyView(para1: AVView); overload; virtual;
    function getEmptyView(): AVView; overload; virtual;
    procedure setFocusable(para1: jboolean); overload; virtual;
    procedure setFocusableInTouchMode(para1: jboolean); overload; virtual;
    function getItemAtPosition(para1: jint): JLObject; overload; virtual;
    function getItemIdAtPosition(para1: jint): jlong; overload; virtual;
    procedure setOnClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
  strict protected
    procedure dispatchSaveInstanceState(para1: AUSparseArray); overload; virtual;
    procedure dispatchRestoreInstanceState(para1: AUSparseArray); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    function onRequestSendAccessibilityEvent(para1: AVView; para2: AVAAccessibilityEvent): jboolean; overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
  strict protected
    function canAnimate(): jboolean; overload; virtual;
  end;

  AWFrameLayout = class external 'android.widget' name 'FrameLayout' (AVViewGroup)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AVViewGroup.InnerMarginLayoutParams)
      public
        var
          fgravity: jint; external name 'gravity';
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jint); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
        constructor create(para1: AWFrameLayout.InnerLayoutParams); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getForegroundGravity(): jint; overload; virtual;
    procedure setForegroundGravity(para1: jint); overload; virtual;
    procedure setVisibility(para1: jint); overload; virtual;
  strict protected
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
  strict protected
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AWFrameLayout.InnerLayoutParams; overload; virtual;
  public
    procedure setForeground(para1: AGDDrawable); overload; virtual;
    function getForeground(): AGDDrawable; overload; virtual;
    procedure setForegroundTintList(para1: ACRColorStateList); overload; virtual;
    function getForegroundTintList(): ACRColorStateList; overload; virtual;
    procedure setForegroundTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getForegroundTintMode(): AGPorterDuff.InnerMode; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  public
    procedure draw(para1: AGCanvas); overload; virtual;
    function gatherTransparentRegion(para1: AGRegion): jboolean; overload; virtual;
    procedure setMeasureAllChildren(para1: jboolean); overload; virtual;
    function getConsiderGoneChildrenWhenMeasuring(): jboolean; overload; virtual;
    function getMeasureAllChildren(): jboolean; overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AWFrameLayout.InnerLayoutParams; overload; virtual;
    function shouldDelayChildPressedState(): jboolean; overload; virtual;
  strict protected
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWGridLayout = class external 'android.widget' name 'GridLayout' (AVViewGroup)
  public
    type
      InnerAlignment = class;
      Arr1InnerAlignment = array of InnerAlignment;
      Arr2InnerAlignment = array of Arr1InnerAlignment;
      Arr3InnerAlignment = array of Arr2InnerAlignment;
      InnerSpec = class;
      Arr1InnerSpec = array of InnerSpec;
      Arr2InnerSpec = array of Arr1InnerSpec;
      Arr3InnerSpec = array of Arr2InnerSpec;
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerAlignment = class abstract external 'android.widget' name 'Alignment' (JLObject)
      end;

      InnerSpec = class external 'android.widget' name 'Spec' (JLObject)
      public
        function equals(para1: JLObject): jboolean; overload; virtual;
        function hashCode(): jint; overload; virtual;
      end;

      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AVViewGroup.InnerMarginLayoutParams)
      public
        var
          fcolumnSpec: AWGridLayout.InnerSpec; external name 'columnSpec';
          frowSpec: AWGridLayout.InnerSpec; external name 'rowSpec';
      public
        constructor create(para1: AWGridLayout.InnerSpec; para2: AWGridLayout.InnerSpec); overload;
        constructor create(); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
        constructor create(para1: AWGridLayout.InnerLayoutParams); overload;
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        procedure setGravity(para1: jint); overload; virtual;
      strict protected
        procedure setBaseAttributes(para1: ACRTypedArray; para2: jint; para3: jint); overload; virtual;
      public
        function equals(para1: JLObject): jboolean; overload; virtual;
        function hashCode(): jint; overload; virtual;
      end;

  public
    const
      ALIGN_BOUNDS = 0;
      ALIGN_MARGINS = 1;
  public
    final class var
      fBASELINE: AWGridLayout.InnerAlignment; external name 'BASELINE';
      fBOTTOM: AWGridLayout.InnerAlignment; external name 'BOTTOM';
      fCENTER: AWGridLayout.InnerAlignment; external name 'CENTER';
      fEND: AWGridLayout.InnerAlignment; external name 'END';
      fFILL: AWGridLayout.InnerAlignment; external name 'FILL';
  public
    const
      HORIZONTAL = 0;
  public
    final class var
      fLEFT: AWGridLayout.InnerAlignment; external name 'LEFT';
      fRIGHT: AWGridLayout.InnerAlignment; external name 'RIGHT';
      fSTART: AWGridLayout.InnerAlignment; external name 'START';
      fTOP: AWGridLayout.InnerAlignment; external name 'TOP';
  public
    const
      UNDEFINED = -2147483648;
      VERTICAL = 1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getOrientation(): jint; overload; virtual;
    procedure setOrientation(para1: jint); overload; virtual;
    function getRowCount(): jint; overload; virtual;
    procedure setRowCount(para1: jint); overload; virtual;
    function getColumnCount(): jint; overload; virtual;
    procedure setColumnCount(para1: jint); overload; virtual;
    function getUseDefaultMargins(): jboolean; overload; virtual;
    procedure setUseDefaultMargins(para1: jboolean); overload; virtual;
    function getAlignmentMode(): jint; overload; virtual;
    procedure setAlignmentMode(para1: jint); overload; virtual;
    function isRowOrderPreserved(): jboolean; overload; virtual;
    procedure setRowOrderPreserved(para1: jboolean); overload; virtual;
    function isColumnOrderPreserved(): jboolean; overload; virtual;
    procedure setColumnOrderPreserved(para1: jboolean); overload; virtual;
  strict protected
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateDefaultLayoutParams(): AWGridLayout.InnerLayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AWGridLayout.InnerLayoutParams; overload; virtual;
  strict protected
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AWGridLayout.InnerLayoutParams; overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    procedure requestLayout(); overload; virtual;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    class function spec(para1: jint; para2: jint; para3: AWGridLayout.InnerAlignment; para4: jfloat): AWGridLayout.InnerSpec; static; overload;
    class function spec(para1: jint; para2: AWGridLayout.InnerAlignment; para3: jfloat): AWGridLayout.InnerSpec; static; overload;
    class function spec(para1: jint; para2: jint; para3: jfloat): AWGridLayout.InnerSpec; static; overload;
    class function spec(para1: jint; para2: jfloat): AWGridLayout.InnerSpec; static; overload;
    class function spec(para1: jint; para2: jint; para3: AWGridLayout.InnerAlignment): AWGridLayout.InnerSpec; static; overload;
    class function spec(para1: jint; para2: AWGridLayout.InnerAlignment): AWGridLayout.InnerSpec; static; overload;
    class function spec(para1: jint; para2: jint): AWGridLayout.InnerSpec; static; overload;
    class function spec(para1: jint): AWGridLayout.InnerSpec; static; overload;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWLinearLayout = class external 'android.widget' name 'LinearLayout' (AVViewGroup)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AVViewGroup.InnerMarginLayoutParams)
      public
        var
          fgravity: jint; external name 'gravity';
          fweight: jfloat; external name 'weight';
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jfloat); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
        constructor create(para1: AWLinearLayout.InnerLayoutParams); overload;
        function debug(para1: JLString): JLString; overload; virtual;
      end;

  public
    const
      HORIZONTAL = 0;
      SHOW_DIVIDER_BEGINNING = 1;
      SHOW_DIVIDER_END = 4;
      SHOW_DIVIDER_MIDDLE = 2;
      SHOW_DIVIDER_NONE = 0;
      VERTICAL = 1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setShowDividers(para1: jint); overload; virtual;
    function shouldDelayChildPressedState(): jboolean; overload; virtual;
    function getShowDividers(): jint; overload; virtual;
    function getDividerDrawable(): AGDDrawable; overload; virtual;
    procedure setDividerDrawable(para1: AGDDrawable); overload; virtual;
    procedure setDividerPadding(para1: jint); overload; virtual;
    function getDividerPadding(): jint; overload; virtual;
  strict protected
    procedure onDraw(para1: AGCanvas); overload; virtual;
  public
    function isBaselineAligned(): jboolean; overload; virtual;
    procedure setBaselineAligned(para1: jboolean); overload; virtual;
    function isMeasureWithLargestChildEnabled(): jboolean; overload; virtual;
    procedure setMeasureWithLargestChildEnabled(para1: jboolean); overload; virtual;
    function getBaseline(): jint; overload; virtual;
    function getBaselineAlignedChildIndex(): jint; overload; virtual;
    procedure setBaselineAlignedChildIndex(para1: jint); overload; virtual;
    function getWeightSum(): jfloat; overload; virtual;
    procedure setWeightSum(para1: jfloat); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    procedure setOrientation(para1: jint); overload; virtual;
    function getOrientation(): jint; overload; virtual;
    procedure setGravity(para1: jint); overload; virtual;
    procedure setHorizontalGravity(para1: jint); overload; virtual;
    procedure setVerticalGravity(para1: jint); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AWLinearLayout.InnerLayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AWLinearLayout.InnerLayoutParams; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AWLinearLayout.InnerLayoutParams; overload; virtual;
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWRelativeLayout = class external 'android.widget' name 'RelativeLayout' (AVViewGroup)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AVViewGroup.InnerMarginLayoutParams)
      public
        var
          falignWithParent: jboolean; external name 'alignWithParent';
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
        constructor create(para1: AWRelativeLayout.InnerLayoutParams); overload;
        function debug(para1: JLString): JLString; overload; virtual;
        procedure addRule(para1: jint); overload; virtual;
        procedure addRule(para1: jint; para2: jint); overload; virtual;
        procedure removeRule(para1: jint); overload; virtual;
        function getRules(): Arr1jint; overload; virtual;
        procedure resolveLayoutDirection(para1: jint); overload; virtual;
      end;

  public
    const
      ABOVE = 2;
      ALIGN_BASELINE = 4;
      ALIGN_BOTTOM = 8;
      ALIGN_END = 19;
      ALIGN_LEFT = 5;
      ALIGN_PARENT_BOTTOM = 12;
      ALIGN_PARENT_END = 21;
      ALIGN_PARENT_LEFT = 9;
      ALIGN_PARENT_RIGHT = 11;
      ALIGN_PARENT_START = 20;
      ALIGN_PARENT_TOP = 10;
      ALIGN_RIGHT = 7;
      ALIGN_START = 18;
      ALIGN_TOP = 6;
      BELOW = 3;
      CENTER_HORIZONTAL = 14;
      CENTER_IN_PARENT = 13;
      CENTER_VERTICAL = 15;
      END_OF = 17;
      LEFT_OF = 0;
      RIGHT_OF = 1;
      START_OF = 16;
      &TRUE = -1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function shouldDelayChildPressedState(): jboolean; overload; virtual;
    procedure setIgnoreGravity(para1: jint); overload; virtual;
    function getGravity(): jint; overload; virtual;
    procedure setGravity(para1: jint); overload; virtual;
    procedure setHorizontalGravity(para1: jint); overload; virtual;
    procedure setVerticalGravity(para1: jint); overload; virtual;
    function getBaseline(): jint; overload; virtual;
    procedure requestLayout(); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AWRelativeLayout.InnerLayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWSlidingDrawer = class external 'android.widget' name 'SlidingDrawer' (AVViewGroup)
  public
    type
      InnerOnDrawerScrollListener = interface;
      Arr1InnerOnDrawerScrollListener = array of InnerOnDrawerScrollListener;
      Arr2InnerOnDrawerScrollListener = array of Arr1InnerOnDrawerScrollListener;
      Arr3InnerOnDrawerScrollListener = array of Arr2InnerOnDrawerScrollListener;
      InnerOnDrawerCloseListener = interface;
      Arr1InnerOnDrawerCloseListener = array of InnerOnDrawerCloseListener;
      Arr2InnerOnDrawerCloseListener = array of Arr1InnerOnDrawerCloseListener;
      Arr3InnerOnDrawerCloseListener = array of Arr2InnerOnDrawerCloseListener;
      InnerOnDrawerOpenListener = interface;
      Arr1InnerOnDrawerOpenListener = array of InnerOnDrawerOpenListener;
      Arr2InnerOnDrawerOpenListener = array of Arr1InnerOnDrawerOpenListener;
      Arr3InnerOnDrawerOpenListener = array of Arr2InnerOnDrawerOpenListener;
      InnerOnDrawerScrollListener = interface external 'android.widget' name 'OnDrawerScrollListener' 
        procedure onScrollStarted(); overload;
        procedure onScrollEnded(); overload;
      end;

      InnerOnDrawerCloseListener = interface external 'android.widget' name 'OnDrawerCloseListener' 
        procedure onDrawerClosed(); overload;
      end;

      InnerOnDrawerOpenListener = interface external 'android.widget' name 'OnDrawerOpenListener' 
        procedure onDrawerOpened(); overload;
      end;

  public
    const
      ORIENTATION_HORIZONTAL = 0;
      ORIENTATION_VERTICAL = 1;
  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure onFinishInflate(); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function onInterceptTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure toggle(); overload; virtual;
    procedure animateToggle(); overload; virtual;
    procedure open(); overload; virtual;
    procedure close(); overload; virtual;
    procedure animateClose(); overload; virtual;
    procedure animateOpen(); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setOnDrawerOpenListener(para1: AWSlidingDrawer.InnerOnDrawerOpenListener); overload; virtual;
    procedure setOnDrawerCloseListener(para1: AWSlidingDrawer.InnerOnDrawerCloseListener); overload; virtual;
    procedure setOnDrawerScrollListener(para1: AWSlidingDrawer.InnerOnDrawerScrollListener); overload; virtual;
    function getHandle(): AVView; overload; virtual;
    function getContent(): AVView; overload; virtual;
    procedure unlock(); overload; virtual;
    procedure lock(); overload; virtual;
    function isOpened(): jboolean; overload; virtual;
    function isMoving(): jboolean; overload; virtual;
  end;

  AWImageButton = class external 'android.widget' name 'ImageButton' (AWImageView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    function onSetAlpha(para1: jint): jboolean; overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWQuickContactBadge = class external 'android.widget' name 'QuickContactBadge' (AWImageView, AVView.InnerOnClickListener)
  strict protected
    var
      fmExcludeMimes: Arr1JLString; external name 'mExcludeMimes';
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setMode(para1: jint); overload; virtual;
  strict protected
    procedure onDraw(para1: AGCanvas); overload; virtual;
  public
    procedure setImageToDefault(); overload; virtual;
    procedure assignContactUri(para1: ANUri); overload; virtual;
    procedure assignContactFromEmail(para1: JLString; para2: jboolean); overload; virtual;
    procedure assignContactFromEmail(para1: JLString; para2: jboolean; para3: AOBundle); overload; virtual;
    procedure assignContactFromPhone(para1: JLString; para2: jboolean); overload; virtual;
    procedure assignContactFromPhone(para1: JLString; para2: jboolean; para3: AOBundle); overload; virtual;
    procedure setOverlay(para1: AGDDrawable); overload; virtual;
    procedure onClick(para1: AVView); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setExcludeMimes(para1: Arr1JLString); overload; virtual;
    procedure setExcludeMimes(var para1: array of JLString); overload; virtual;
  end;

  AWAbsSeekBar = class abstract external 'android.widget' name 'AbsSeekBar' (AWProgressBar)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setThumb(para1: AGDDrawable); overload; virtual;
    function getThumb(): AGDDrawable; overload; virtual;
    procedure setThumbTintList(para1: ACRColorStateList); overload; virtual;
    function getThumbTintList(): ACRColorStateList; overload; virtual;
    procedure setThumbTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getThumbTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    function getThumbOffset(): jint; overload; virtual;
    procedure setThumbOffset(para1: jint); overload; virtual;
    procedure setSplitTrack(para1: jboolean); overload; virtual;
    function getSplitTrack(): jboolean; overload; virtual;
    procedure setKeyProgressIncrement(para1: jint); overload; virtual;
    function getKeyProgressIncrement(): jint; overload; virtual;
    procedure setMax(para1: jint); overload; virtual;
  strict protected
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
  strict protected
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
  strict protected
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onDraw(para1: AGCanvas); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
    procedure onRtlPropertiesChanged(para1: jint); overload; virtual;
  end;

  AWButton = class external 'android.widget' name 'Button' (AWTextView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWCheckedTextView = class external 'android.widget' name 'CheckedTextView' (AWTextView, AWCheckable)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure toggle(); overload; virtual;
    function isChecked(): jboolean; overload; virtual;
    procedure setChecked(para1: jboolean); overload; virtual;
    procedure setCheckMarkDrawable(para1: jint); overload; virtual;
    procedure setCheckMarkDrawable(para1: AGDDrawable); overload; virtual;
    procedure setCheckMarkTintList(para1: ACRColorStateList); overload; virtual;
    function getCheckMarkTintList(): ACRColorStateList; overload; virtual;
    procedure setCheckMarkTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getCheckMarkTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    procedure setVisibility(para1: jint); overload; virtual;
    procedure jumpDrawablesToCurrentState(); overload; virtual;
  strict protected
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    function getCheckMarkDrawable(): AGDDrawable; overload; virtual;
    procedure onRtlPropertiesChanged(para1: jint); overload; virtual;
  strict protected
    procedure onDraw(para1: AGCanvas); overload; virtual;
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWChronometer = class external 'android.widget' name 'Chronometer' (AWTextView)
  public
    type
      InnerOnChronometerTickListener = interface;
      Arr1InnerOnChronometerTickListener = array of InnerOnChronometerTickListener;
      Arr2InnerOnChronometerTickListener = array of Arr1InnerOnChronometerTickListener;
      Arr3InnerOnChronometerTickListener = array of Arr2InnerOnChronometerTickListener;
      InnerOnChronometerTickListener = interface external 'android.widget' name 'OnChronometerTickListener' 
        procedure onChronometerTick(para1: AWChronometer); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setBase(para1: jlong); overload; virtual;
    function getBase(): jlong; overload; virtual;
    procedure setFormat(para1: JLString); overload; virtual;
    function getFormat(): JLString; overload; virtual;
    procedure setOnChronometerTickListener(para1: AWChronometer.InnerOnChronometerTickListener); overload; virtual;
    function getOnChronometerTickListener(): AWChronometer.InnerOnChronometerTickListener; overload; virtual;
    procedure start(); overload; virtual;
    procedure stop(); overload; virtual;
  strict protected
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onWindowVisibilityChanged(para1: jint); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWDigitalClock = class external 'android.widget' name 'DigitalClock' (AWTextView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWEditText = class external 'android.widget' name 'EditText' (AWTextView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    function getDefaultEditable(): jboolean; overload; virtual;
    function getDefaultMovementMethod(): ATMMovementMethod; overload; virtual;
  public
    function getText(): ATEditable; overload; virtual;
    procedure setText(para1: JLCharSequence; para2: AWTextView.InnerBufferType); overload; virtual;
    procedure setSelection(para1: jint; para2: jint); overload; virtual;
    procedure setSelection(para1: jint); overload; virtual;
    procedure selectAll(); overload; virtual;
    procedure extendSelection(para1: jint); overload; virtual;
    procedure setEllipsize(para1: ATTextUtils.InnerTruncateAt); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
    function getText(): JLCharSequence; overload; virtual;
  end;

  JNCDatagramChannel = class abstract external 'java.nio.channels' name 'DatagramChannel' (JNCSAbstractSelectableChannel, JNCByteChannel, JNCScatteringByteChannel, JNCGatheringByteChannel)
  strict protected
    constructor create(para1: JNCSSelectorProvider); overload;
  public
    class function open(): JNCDatagramChannel; static; overload;  // throws java.io.IOException
    function validOps(): jint; overload; virtual; final;
    function socket(): JNDatagramSocket; overload; virtual; abstract;
    function isConnected(): jboolean; overload; virtual; abstract;
    function connect(para1: JNSocketAddress): JNCDatagramChannel; overload; virtual; abstract;  // throws java.io.IOException
    function disconnect(): JNCDatagramChannel; overload; virtual; abstract;  // throws java.io.IOException
    function receive(para1: JNByteBuffer): JNSocketAddress; overload; virtual; abstract;  // throws java.io.IOException
    function send(para1: JNByteBuffer; para2: JNSocketAddress): jint; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: JNByteBuffer): jint; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: Arr1JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function read(var para1: array of JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: Arr1JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function read(var para1: array of JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function write(para1: JNByteBuffer): jint; overload; virtual; abstract;  // throws java.io.IOException
    function write(para1: Arr1JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function write(var para1: array of JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function write(para1: Arr1JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function write(var para1: array of JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
  end;

  JNCPipe = class abstract external 'java.nio.channels' name 'Pipe' (JLObject)
  public
    type
      InnerSourceChannel = class;
      Arr1InnerSourceChannel = array of InnerSourceChannel;
      Arr2InnerSourceChannel = array of Arr1InnerSourceChannel;
      Arr3InnerSourceChannel = array of Arr2InnerSourceChannel;
      InnerSinkChannel = class;
      Arr1InnerSinkChannel = array of InnerSinkChannel;
      Arr2InnerSinkChannel = array of Arr1InnerSinkChannel;
      Arr3InnerSinkChannel = array of Arr2InnerSinkChannel;
      InnerSourceChannel = class abstract external 'java.nio.channels' name 'SourceChannel' (JNCSAbstractSelectableChannel, JNCReadableByteChannel, JNCScatteringByteChannel)
      strict protected
        constructor create(para1: JNCSSelectorProvider); overload;
      public
        function validOps(): jint; overload; virtual; final;
      end;

      InnerSinkChannel = class abstract external 'java.nio.channels' name 'SinkChannel' (JNCSAbstractSelectableChannel, JNCWritableByteChannel, JNCGatheringByteChannel)
      strict protected
        constructor create(para1: JNCSSelectorProvider); overload;
      public
        function validOps(): jint; overload; virtual; final;
      end;

  strict protected
    constructor create(); overload;
  public
    class function open(): JNCPipe; static; overload;  // throws java.io.IOException
    function sink(): JNCPipe.InnerSinkChannel; overload; virtual; abstract;
    function source(): JNCPipe.InnerSourceChannel; overload; virtual; abstract;
  end;

  JNCServerSocketChannel = class abstract external 'java.nio.channels' name 'ServerSocketChannel' (JNCSAbstractSelectableChannel)
  strict protected
    constructor create(para1: JNCSSelectorProvider); overload;
  public
    class function open(): JNCServerSocketChannel; static; overload;  // throws java.io.IOException
    function validOps(): jint; overload; virtual; final;
    function socket(): JNServerSocket; overload; virtual; abstract;
    function accept(): JNCSocketChannel; overload; virtual; abstract;  // throws java.io.IOException
  end;

  JNCSocketChannel = class abstract external 'java.nio.channels' name 'SocketChannel' (JNCSAbstractSelectableChannel, JNCByteChannel, JNCScatteringByteChannel, JNCGatheringByteChannel)
  strict protected
    constructor create(para1: JNCSSelectorProvider); overload;
  public
    class function open(): JNCSocketChannel; static; overload;  // throws java.io.IOException
    class function open(para1: JNSocketAddress): JNCSocketChannel; static; overload;  // throws java.io.IOException
    function validOps(): jint; overload; virtual; final;
    function socket(): JNSocket; overload; virtual; abstract;
    function isConnected(): jboolean; overload; virtual; abstract;
    function isConnectionPending(): jboolean; overload; virtual; abstract;
    function connect(para1: JNSocketAddress): jboolean; overload; virtual; abstract;  // throws java.io.IOException
    function finishConnect(): jboolean; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: JNByteBuffer): jint; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: Arr1JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function read(var para1: array of JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function read(para1: Arr1JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function read(var para1: array of JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function write(para1: JNByteBuffer): jint; overload; virtual; abstract;  // throws java.io.IOException
    function write(para1: Arr1JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function write(var para1: array of JNByteBuffer; para2: jint; para3: jint): jlong; overload; virtual; abstract;  // throws java.io.IOException
    function write(para1: Arr1JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
    function write(var para1: array of JNByteBuffer): jlong; overload; virtual; final;  // throws java.io.IOException
  end;

  AATabActivity = class external 'android.app' name 'TabActivity' (AAActivityGroup)
  public
    constructor create(); overload;
    procedure setDefaultTab(para1: JLString); overload; virtual;
    procedure setDefaultTab(para1: jint); overload; virtual;
  strict protected
    procedure onRestoreInstanceState(para1: AOBundle); overload; virtual;
    procedure onPostCreate(para1: AOBundle); overload; virtual;
    procedure onSaveInstanceState(para1: AOBundle); overload; virtual;
  public
    procedure onContentChanged(); overload; virtual;
  strict protected
    procedure onChildTitleChanged(para1: AAActivity; para2: JLCharSequence); overload; virtual;
  public
    function getTabHost(): AWTabHost; overload; virtual;
    function getTabWidget(): AWTabWidget; overload; virtual;
  end;

  AALauncherActivity = class abstract external 'android.app' name 'LauncherActivity' (AAListActivity)
  public
    type
      InnerIconResizer = class;
      Arr1InnerIconResizer = array of InnerIconResizer;
      Arr2InnerIconResizer = array of Arr1InnerIconResizer;
      Arr3InnerIconResizer = array of Arr2InnerIconResizer;
      InnerListItem = class;
      Arr1InnerListItem = array of InnerListItem;
      Arr2InnerListItem = array of Arr1InnerListItem;
      Arr3InnerListItem = array of Arr2InnerListItem;
      InnerIconResizer = class external 'android.app' name 'IconResizer' 
      end;

      InnerListItem = class external 'android.app' name 'ListItem' (JLObject)
      public
        var
          fclassName: JLString; external name 'className';
          fextras: AOBundle; external name 'extras';
          ficon: AGDDrawable; external name 'icon';
          flabel: JLCharSequence; external name 'label';
          fpackageName: JLString; external name 'packageName';
          fresolveInfo: ACPResolveInfo; external name 'resolveInfo';
      public
        constructor create(); overload;
      end;

  public
    constructor create(); overload;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
  public
    procedure setTitle(para1: JLCharSequence); overload; virtual;
    procedure setTitle(para1: jint); overload; virtual;
  strict protected
    procedure onSetContentView(); overload; virtual;
    procedure onListItemClick(para1: AWListView; para2: AVView; para3: jint; para4: jlong); overload; virtual;
    function intentForPosition(para1: jint): ACIntent; overload; virtual;
    function itemForPosition(para1: jint): AALauncherActivity.InnerListItem; overload; virtual;
    function getTargetIntent(): ACIntent; overload; virtual;
    function onQueryPackageManager(para1: ACIntent): JUList; overload; virtual;
  public
    function makeListItems(): JUList; overload; virtual;
  end;

  AAFragmentBreadCrumbs = class external 'android.app' name 'FragmentBreadCrumbs' (AVViewGroup, AAFragmentManager.InnerOnBackStackChangedListener)
  public
    type
      InnerOnBreadCrumbClickListener = interface;
      Arr1InnerOnBreadCrumbClickListener = array of InnerOnBreadCrumbClickListener;
      Arr2InnerOnBreadCrumbClickListener = array of Arr1InnerOnBreadCrumbClickListener;
      Arr3InnerOnBreadCrumbClickListener = array of Arr2InnerOnBreadCrumbClickListener;
      InnerOnBreadCrumbClickListener = interface external 'android.app' name 'OnBreadCrumbClickListener' 
        function onBreadCrumbClick(para1: AAFragmentManager.InnerBackStackEntry; para2: jint): jboolean; overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    procedure setActivity(para1: AAActivity); overload; virtual;
    procedure setMaxVisible(para1: jint); overload; virtual;
    procedure setParentTitle(para1: JLCharSequence; para2: JLCharSequence; para3: AVView.InnerOnClickListener); overload; virtual;
    procedure setOnBreadCrumbClickListener(para1: AAFragmentBreadCrumbs.InnerOnBreadCrumbClickListener); overload; virtual;
    procedure setTitle(para1: JLCharSequence; para2: JLCharSequence); overload; virtual;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    procedure onBackStackChanged(); overload; virtual;
  end;

  APPreferenceActivity = class abstract external 'android.preference' name 'PreferenceActivity' (AAListActivity, APPreferenceFragment.InnerOnPreferenceStartFragmentCallback)
  public
    type
      InnerHeader = class;
      Arr1InnerHeader = array of InnerHeader;
      Arr2InnerHeader = array of Arr1InnerHeader;
      Arr3InnerHeader = array of Arr2InnerHeader;
      InnerHeader = class sealed external 'android.preference' name 'Header' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        var
          fbreadCrumbShortTitle: JLCharSequence; external name 'breadCrumbShortTitle';
          fbreadCrumbShortTitleRes: jint; external name 'breadCrumbShortTitleRes';
          fbreadCrumbTitle: JLCharSequence; external name 'breadCrumbTitle';
          fbreadCrumbTitleRes: jint; external name 'breadCrumbTitleRes';
          fextras: AOBundle; external name 'extras';
          ffragment: JLString; external name 'fragment';
          ffragmentArguments: AOBundle; external name 'fragmentArguments';
          ficonRes: jint; external name 'iconRes';
          fid: jlong; external name 'id';
          fintent: ACIntent; external name 'intent';
          fsummary: JLCharSequence; external name 'summary';
          fsummaryRes: jint; external name 'summaryRes';
          ftitle: JLCharSequence; external name 'title';
          ftitleRes: jint; external name 'titleRes';
      public
        constructor create(); overload;
        function getTitle(para1: ACRResources): JLCharSequence; overload; virtual;
        function getSummary(para1: ACRResources): JLCharSequence; overload; virtual;
        function getBreadCrumbTitle(para1: ACRResources): JLCharSequence; overload; virtual;
        function getBreadCrumbShortTitle(para1: ACRResources): JLCharSequence; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        procedure readFromParcel(para1: AOParcel); overload; virtual;
      end;

  public
    const
      EXTRA_NO_HEADERS = ':android:no_headers';
      EXTRA_SHOW_FRAGMENT = ':android:show_fragment';
      EXTRA_SHOW_FRAGMENT_ARGUMENTS = ':android:show_fragment_args';
      EXTRA_SHOW_FRAGMENT_SHORT_TITLE = ':android:show_fragment_short_title';
      EXTRA_SHOW_FRAGMENT_TITLE = ':android:show_fragment_title';
      HEADER_ID_UNDEFINED = jlong(-1);
  public
    constructor create(); overload;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
  public
    function hasHeaders(): jboolean; overload; virtual;
    function isMultiPane(): jboolean; overload; virtual;
    function onIsMultiPane(): jboolean; overload; virtual;
    function onIsHidingHeaders(): jboolean; overload; virtual;
    function onGetInitialHeader(): APPreferenceActivity.InnerHeader; overload; virtual;
    function onGetNewHeader(): APPreferenceActivity.InnerHeader; overload; virtual;
    procedure onBuildHeaders(para1: JUList); overload; virtual;
    procedure invalidateHeaders(); overload; virtual;
    procedure loadHeadersFromResource(para1: jint; para2: JUList); overload; virtual;
  strict protected
    function isValidFragment(para1: JLString): jboolean; overload; virtual;
  public
    procedure setListFooter(para1: AVView); overload; virtual;
  strict protected
    procedure onStop(); overload; virtual;
    procedure onDestroy(); overload; virtual;
    procedure onSaveInstanceState(para1: AOBundle); overload; virtual;
    procedure onRestoreInstanceState(para1: AOBundle); overload; virtual;
    procedure onActivityResult(para1: jint; para2: jint; para3: ACIntent); overload; virtual;
  public
    procedure onContentChanged(); overload; virtual;
  strict protected
    procedure onListItemClick(para1: AWListView; para2: AVView; para3: jint; para4: jlong); overload; virtual;
  public
    procedure onHeaderClick(para1: APPreferenceActivity.InnerHeader; para2: jint); overload; virtual;
    function onBuildStartFragmentIntent(para1: JLString; para2: AOBundle; para3: jint; para4: jint): ACIntent; overload; virtual;
    procedure startWithFragment(para1: JLString; para2: AOBundle; para3: AAFragment; para4: jint); overload; virtual;
    procedure startWithFragment(para1: JLString; para2: AOBundle; para3: AAFragment; para4: jint; para5: jint; para6: jint); overload; virtual;
    procedure showBreadCrumbs(para1: JLCharSequence; para2: JLCharSequence); overload; virtual;
    procedure setParentTitle(para1: JLCharSequence; para2: JLCharSequence; para3: AVView.InnerOnClickListener); overload; virtual;
    procedure switchToHeader(para1: JLString; para2: AOBundle); overload; virtual;
    procedure switchToHeader(para1: APPreferenceActivity.InnerHeader); overload; virtual;
    procedure startPreferenceFragment(para1: AAFragment; para2: jboolean); overload; virtual;
    procedure startPreferencePanel(para1: JLString; para2: AOBundle; para3: jint; para4: JLCharSequence; para5: AAFragment; para6: jint); overload; virtual;
    procedure finishPreferencePanel(para1: AAFragment; para2: jint; para3: ACIntent); overload; virtual;
    function onPreferenceStartFragment(para1: APPreferenceFragment; para2: APPreference): jboolean; overload; virtual;
    function getPreferenceManager(): APPreferenceManager; overload; virtual;
    procedure setPreferenceScreen(para1: APPreferenceScreen); overload; virtual;
    function getPreferenceScreen(): APPreferenceScreen; overload; virtual;
    procedure addPreferencesFromIntent(para1: ACIntent); overload; virtual;
    procedure addPreferencesFromResource(para1: jint); overload; virtual;
    function onPreferenceTreeClick(para1: APPreferenceScreen; para2: APPreference): jboolean; overload; virtual;
    function findPreference(para1: JLCharSequence): APPreference; overload; virtual;
  strict protected
    procedure onNewIntent(para1: ACIntent); overload; virtual;
  end;

  AWWebView = class external 'android.webkit' name 'WebView' (AWAbsoluteLayout, AVViewTreeObserver.InnerOnGlobalFocusChangeListener, AVViewGroup.InnerOnHierarchyChangeListener)
  public
    type
      InnerHitTestResult = class;
      Arr1InnerHitTestResult = array of InnerHitTestResult;
      Arr2InnerHitTestResult = array of Arr1InnerHitTestResult;
      Arr3InnerHitTestResult = array of Arr2InnerHitTestResult;
      InnerPictureListener = interface;
      Arr1InnerPictureListener = array of InnerPictureListener;
      Arr2InnerPictureListener = array of Arr1InnerPictureListener;
      Arr3InnerPictureListener = array of Arr2InnerPictureListener;
      InnerFindListener = interface;
      Arr1InnerFindListener = array of InnerFindListener;
      Arr2InnerFindListener = array of Arr1InnerFindListener;
      Arr3InnerFindListener = array of Arr2InnerFindListener;
      InnerWebViewTransport = class;
      Arr1InnerWebViewTransport = array of InnerWebViewTransport;
      Arr2InnerWebViewTransport = array of Arr1InnerWebViewTransport;
      Arr3InnerWebViewTransport = array of Arr2InnerWebViewTransport;
      InnerHitTestResult = class external 'android.webkit' name 'HitTestResult' (JLObject)
      public
        const
          ANCHOR_TYPE = 1 deprecated;
          EDIT_TEXT_TYPE = 9;
          EMAIL_TYPE = 4;
          GEO_TYPE = 3;
          IMAGE_ANCHOR_TYPE = 6 deprecated;
          IMAGE_TYPE = 5;
          PHONE_TYPE = 2;
          SRC_ANCHOR_TYPE = 7;
          SRC_IMAGE_ANCHOR_TYPE = 8;
          UNKNOWN_TYPE = 0;
      public
        function getType(): jint; overload; virtual;
        function getExtra(): JLString; overload; virtual;
      end;

      InnerPictureListener = interface external 'android.webkit' name 'PictureListener' 
        procedure onNewPicture(para1: AWWebView; para2: AGPicture); overload;
      end;

      InnerFindListener = interface external 'android.webkit' name 'FindListener' 
        procedure onFindResultReceived(para1: jint; para2: jint; para3: jboolean); overload;
      end;

      InnerWebViewTransport = class external 'android.webkit' name 'WebViewTransport' 
      end;

  public
    const
      SCHEME_GEO = 'geo:0,0?q=';
      SCHEME_MAILTO = 'mailto:';
      SCHEME_TEL = 'tel:';
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jboolean); overload;
    procedure setHorizontalScrollbarOverlay(para1: jboolean); overload; virtual;
    procedure setVerticalScrollbarOverlay(para1: jboolean); overload; virtual;
    function overlayHorizontalScrollbar(): jboolean; overload; virtual;
    function overlayVerticalScrollbar(): jboolean; overload; virtual;
    function getCertificate(): ANHSslCertificate; overload; virtual;
    procedure setCertificate(para1: ANHSslCertificate); overload; virtual;
    procedure savePassword(para1: JLString; para2: JLString; para3: JLString); overload; virtual;
    procedure setHttpAuthUsernamePassword(para1: JLString; para2: JLString; para3: JLString; para4: JLString); overload; virtual;
    function getHttpAuthUsernamePassword(para1: JLString; para2: JLString): Arr1JLString; overload; virtual;
    procedure destroy(); overload; virtual;
    procedure setNetworkAvailable(para1: jboolean); overload; virtual;
    function saveState(para1: AOBundle): AWWebBackForwardList; overload; virtual;
    function restoreState(para1: AOBundle): AWWebBackForwardList; overload; virtual;
    procedure loadUrl(para1: JLString; para2: JUMap); overload; virtual;
    procedure loadUrl(para1: JLString); overload; virtual;
    procedure postUrl(para1: JLString; para2: Arr1jbyte); overload; virtual;
    procedure postUrl(para1: JLString; var para2: array of jbyte); overload; virtual;
    procedure loadData(para1: JLString; para2: JLString; para3: JLString); overload; virtual;
    procedure loadDataWithBaseURL(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload; virtual;
    procedure evaluateJavascript(para1: JLString; para2: AWValueCallback); overload; virtual;
    procedure saveWebArchive(para1: JLString); overload; virtual;
    procedure saveWebArchive(para1: JLString; para2: jboolean; para3: AWValueCallback); overload; virtual;
    procedure stopLoading(); overload; virtual;
    procedure reload(); overload; virtual;
    function canGoBack(): jboolean; overload; virtual;
    procedure goBack(); overload; virtual;
    function canGoForward(): jboolean; overload; virtual;
    procedure goForward(); overload; virtual;
    function canGoBackOrForward(para1: jint): jboolean; overload; virtual;
    procedure goBackOrForward(para1: jint); overload; virtual;
    function isPrivateBrowsingEnabled(): jboolean; overload; virtual;
    function pageUp(para1: jboolean): jboolean; overload; virtual;
    function pageDown(para1: jboolean): jboolean; overload; virtual;
    procedure clearView(); overload; virtual;
    function capturePicture(): AGPicture; overload; virtual;
    function createPrintDocumentAdapter(): APPrintDocumentAdapter; overload; virtual;
    function createPrintDocumentAdapter(para1: JLString): APPrintDocumentAdapter; overload; virtual;
    function getScale(): jfloat; overload; virtual;
    procedure setInitialScale(para1: jint); overload; virtual;
    procedure invokeZoomPicker(); overload; virtual;
    function getHitTestResult(): AWWebView.InnerHitTestResult; overload; virtual;
    procedure requestFocusNodeHref(para1: AOMessage); overload; virtual;
    procedure requestImageRef(para1: AOMessage); overload; virtual;
    function getUrl(): JLString; overload; virtual;
    function getOriginalUrl(): JLString; overload; virtual;
    function getTitle(): JLString; overload; virtual;
    function getFavicon(): AGBitmap; overload; virtual;
    function getProgress(): jint; overload; virtual;
    function getContentHeight(): jint; overload; virtual;
    procedure pauseTimers(); overload; virtual;
    procedure resumeTimers(); overload; virtual;
    procedure onPause(); overload; virtual;
    procedure onResume(); overload; virtual;
    procedure freeMemory(); overload; virtual;
    procedure clearCache(para1: jboolean); overload; virtual;
    procedure clearFormData(); overload; virtual;
    procedure clearHistory(); overload; virtual;
    procedure clearSslPreferences(); overload; virtual;
    class procedure clearClientCertPreferences(para1: JLRunnable); static; overload;
    function copyBackForwardList(): AWWebBackForwardList; overload; virtual;
    procedure setFindListener(para1: AWWebView.InnerFindListener); overload; virtual;
    procedure findNext(para1: jboolean); overload; virtual;
    function findAll(para1: JLString): jint; overload; virtual;
    procedure findAllAsync(para1: JLString); overload; virtual;
    function showFindDialog(para1: JLString; para2: jboolean): jboolean; overload; virtual;
    class function findAddress(para1: JLString): JLString; static; overload;
    class procedure enableSlowWholeDocumentDraw(); static; overload;
    procedure clearMatches(); overload; virtual;
    procedure documentHasImages(para1: AOMessage); overload; virtual;
    procedure setWebViewClient(para1: AWWebViewClient); overload; virtual;
    procedure setDownloadListener(para1: AWDownloadListener); overload; virtual;
    procedure setWebChromeClient(para1: AWWebChromeClient); overload; virtual;
    procedure setPictureListener(para1: AWWebView.InnerPictureListener); overload; virtual;
    procedure addJavascriptInterface(para1: JLObject; para2: JLString); overload; virtual;
    procedure removeJavascriptInterface(para1: JLString); overload; virtual;
    function getSettings(): AWWebSettings; overload; virtual;
    class procedure setWebContentsDebuggingEnabled(para1: jboolean); static; overload;
    procedure onChildViewAdded(para1: AVView; para2: AVView); overload; virtual;
    procedure onChildViewRemoved(para1: AVView; para2: AVView); overload; virtual;
    procedure onGlobalFocusChanged(para1: AVView; para2: AVView); overload; virtual;
    procedure setMapTrackballToArrowKeys(para1: jboolean); overload; virtual;
    procedure flingScroll(para1: jint; para2: jint); overload; virtual;
    function canZoomIn(): jboolean; overload; virtual;
    function canZoomOut(): jboolean; overload; virtual;
    procedure zoomBy(para1: jfloat); overload; virtual;
    function zoomIn(): jboolean; overload; virtual;
    function zoomOut(): jboolean; overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
  public
    procedure setLayoutParams(para1: AVViewGroup_LayoutParams); overload; virtual;
    procedure setOverScrollMode(para1: jint); overload; virtual;
    procedure setScrollBarStyle(para1: jint); overload; virtual;
  strict protected
    function computeHorizontalScrollRange(): jint; overload; virtual;
    function computeHorizontalScrollOffset(): jint; overload; virtual;
    function computeVerticalScrollRange(): jint; overload; virtual;
    function computeVerticalScrollOffset(): jint; overload; virtual;
    function computeVerticalScrollExtent(): jint; overload; virtual;
  public
    procedure computeScroll(); overload; virtual;
    function onHoverEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
    function getAccessibilityNodeProvider(): AVAAccessibilityNodeProvider; overload; virtual;
    function shouldDelayChildPressedState(): jboolean; overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
  strict protected
    procedure onOverScrolled(para1: jint; para2: jint; para3: jboolean; para4: jboolean); overload; virtual;
    procedure onWindowVisibilityChanged(para1: jint); overload; virtual;
    procedure onDraw(para1: AGCanvas); overload; virtual;
  public
    function performLongClick(): jboolean; overload; virtual;
  strict protected
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
  public
    function onCreateInputConnection(para1: AVIEditorInfo): AVIInputConnection; overload; virtual;
  strict protected
    procedure onVisibilityChanged(para1: AVView; para2: jint); overload; virtual;
  public
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
  strict protected
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onScrollChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  public
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function requestFocus(para1: jint; para2: AGRect): jboolean; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    function requestChildRectangleOnScreen(para1: AVView; para2: AGRect; para3: jboolean): jboolean; overload; virtual;
    procedure setBackgroundColor(para1: jint); overload; virtual;
    procedure setLayerType(para1: jint; para2: AGPaint); overload; virtual;
  strict protected
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
  public
    procedure onStartTemporaryDetach(); overload; virtual;
    procedure onFinishTemporaryDetach(); overload; virtual;
  end;

  AAAlertDialog = class external 'android.app' name 'AlertDialog' (AADialog, ACDialogInterface)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.app' name 'Builder' (JLObject)
      public
        constructor create(para1: ACContext); overload;
        constructor create(para1: ACContext; para2: jint); overload;
        function getContext(): ACContext; overload; virtual;
        function setTitle(para1: jint): AAAlertDialog.InnerBuilder; overload; virtual;
        function setTitle(para1: JLCharSequence): AAAlertDialog.InnerBuilder; overload; virtual;
        function setCustomTitle(para1: AVView): AAAlertDialog.InnerBuilder; overload; virtual;
        function setMessage(para1: jint): AAAlertDialog.InnerBuilder; overload; virtual;
        function setMessage(para1: JLCharSequence): AAAlertDialog.InnerBuilder; overload; virtual;
        function setIcon(para1: jint): AAAlertDialog.InnerBuilder; overload; virtual;
        function setIcon(para1: AGDDrawable): AAAlertDialog.InnerBuilder; overload; virtual;
        function setIconAttribute(para1: jint): AAAlertDialog.InnerBuilder; overload; virtual;
        function setPositiveButton(para1: jint; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setPositiveButton(para1: JLCharSequence; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setNegativeButton(para1: jint; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setNegativeButton(para1: JLCharSequence; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setNeutralButton(para1: jint; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setNeutralButton(para1: JLCharSequence; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setCancelable(para1: jboolean): AAAlertDialog.InnerBuilder; overload; virtual;
        function setOnCancelListener(para1: ACDialogInterface.InnerOnCancelListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setOnDismissListener(para1: ACDialogInterface.InnerOnDismissListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setOnKeyListener(para1: ACDialogInterface.InnerOnKeyListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setItems(para1: jint; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setItems(para1: Arr1JLCharSequence; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setItems(var para1: array of JLCharSequence; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setAdapter(para1: AWListAdapter; para2: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setCursor(para1: ADCursor; para2: ACDialogInterface.InnerOnClickListener; para3: JLString): AAAlertDialog.InnerBuilder; overload; virtual;
        function setMultiChoiceItems(para1: jint; para2: Arr1jboolean; para3: ACDialogInterface.InnerOnMultiChoiceClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setMultiChoiceItems(para1: jint; var para2: array of jboolean; para3: ACDialogInterface.InnerOnMultiChoiceClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setMultiChoiceItems(para1: Arr1JLCharSequence; para2: Arr1jboolean; para3: ACDialogInterface.InnerOnMultiChoiceClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setMultiChoiceItems(var para1: array of JLCharSequence; var para2: array of jboolean; para3: ACDialogInterface.InnerOnMultiChoiceClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setMultiChoiceItems(para1: ADCursor; para2: JLString; para3: JLString; para4: ACDialogInterface.InnerOnMultiChoiceClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setSingleChoiceItems(para1: jint; para2: jint; para3: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setSingleChoiceItems(para1: ADCursor; para2: jint; para3: JLString; para4: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setSingleChoiceItems(para1: Arr1JLCharSequence; para2: jint; para3: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setSingleChoiceItems(var para1: array of JLCharSequence; para2: jint; para3: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setSingleChoiceItems(para1: AWListAdapter; para2: jint; para3: ACDialogInterface.InnerOnClickListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setOnItemSelectedListener(para1: AWAdapterView.InnerOnItemSelectedListener): AAAlertDialog.InnerBuilder; overload; virtual;
        function setView(para1: jint): AAAlertDialog.InnerBuilder; overload; virtual;
        function setView(para1: AVView): AAAlertDialog.InnerBuilder; overload; virtual;
        function setInverseBackgroundForced(para1: jboolean): AAAlertDialog.InnerBuilder; overload; virtual;
        function create_(): AAAlertDialog; external name 'create'; overload; virtual;
        function show(): AAAlertDialog; overload; virtual;
      end;

  public
    const
      THEME_DEVICE_DEFAULT_DARK = 4;
      THEME_DEVICE_DEFAULT_LIGHT = 5;
      THEME_HOLO_DARK = 2;
      THEME_HOLO_LIGHT = 3;
      THEME_TRADITIONAL = 1;
  strict protected
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: jint); overload;
    constructor create(para1: ACContext; para2: jboolean; para3: ACDialogInterface.InnerOnCancelListener); overload;
  public
    function getButton(para1: jint): AWButton; overload; virtual;
    function getListView(): AWListView; overload; virtual;
    procedure setTitle(para1: JLCharSequence); overload; virtual;
    procedure setCustomTitle(para1: AVView); overload; virtual;
    procedure setMessage(para1: JLCharSequence); overload; virtual;
    procedure setView(para1: AVView); overload; virtual;
    procedure setView(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure setButton(para1: jint; para2: JLCharSequence; para3: AOMessage); overload; virtual;
    procedure setButton(para1: jint; para2: JLCharSequence; para3: ACDialogInterface.InnerOnClickListener); overload; virtual;
    procedure setButton(para1: JLCharSequence; para2: AOMessage); overload; virtual;
    procedure setButton2(para1: JLCharSequence; para2: AOMessage); overload; virtual;
    procedure setButton3(para1: JLCharSequence; para2: AOMessage); overload; virtual;
    procedure setButton(para1: JLCharSequence; para2: ACDialogInterface.InnerOnClickListener); overload; virtual;
    procedure setButton2(para1: JLCharSequence; para2: ACDialogInterface.InnerOnClickListener); overload; virtual;
    procedure setButton3(para1: JLCharSequence; para2: ACDialogInterface.InnerOnClickListener); overload; virtual;
    procedure setIcon(para1: jint); overload; virtual;
    procedure setIcon(para1: AGDDrawable); overload; virtual;
    procedure setIconAttribute(para1: jint); overload; virtual;
    procedure setInverseBackgroundForced(para1: jboolean); overload; virtual;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
  public
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
  end;

  APPreferenceScreen = class sealed external 'android.preference' name 'PreferenceScreen' (APPreferenceGroup, AWAdapterView.InnerOnItemClickListener, ACDialogInterface.InnerOnDismissListener)
  public
    function getRootAdapter(): AWListAdapter; overload; virtual;
  strict protected
    function onCreateRootAdapter(): AWListAdapter; overload; virtual;
  public
    procedure bind(para1: AWListView); overload; virtual;
  strict protected
    procedure onClick(); overload; virtual;
  public
    procedure onDismiss(para1: ACDialogInterface); overload; virtual;
    function getDialog(): AADialog; overload; virtual;
    procedure onItemClick(para1: AWAdapterView; para2: AVView; para3: jint; para4: jlong); overload; virtual;
  strict protected
    function isOnSameScreenAsChildren(): jboolean; overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  end;

  ATMCharacterPickerDialog = class external 'android.text.method' name 'CharacterPickerDialog' (AADialog, AWAdapterView.InnerOnItemClickListener, AVView.InnerOnClickListener)
  public
    constructor create(para1: ACContext; para2: AVView; para3: ATEditable; para4: JLString; para5: jboolean); overload;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
  public
    procedure onItemClick(para1: AWAdapterView; para2: AVView; para3: jint; para4: jlong); overload; virtual;
    procedure onClick(para1: AVView); overload; virtual;
  end;

  AWAbsListView = class abstract external 'android.widget' name 'AbsListView' (AWAdapterView, ATTextWatcher, AVViewTreeObserver.InnerOnGlobalLayoutListener, AWFilter.InnerFilterListener, AVViewTreeObserver.InnerOnTouchModeChangeListener)
  public
    type
      InnerRecyclerListener = interface;
      Arr1InnerRecyclerListener = array of InnerRecyclerListener;
      Arr2InnerRecyclerListener = array of Arr1InnerRecyclerListener;
      Arr3InnerRecyclerListener = array of Arr2InnerRecyclerListener;
      InnerSelectionBoundsAdjuster = interface;
      Arr1InnerSelectionBoundsAdjuster = array of InnerSelectionBoundsAdjuster;
      Arr2InnerSelectionBoundsAdjuster = array of Arr1InnerSelectionBoundsAdjuster;
      Arr3InnerSelectionBoundsAdjuster = array of Arr2InnerSelectionBoundsAdjuster;
      InnerOnScrollListener = interface;
      Arr1InnerOnScrollListener = array of InnerOnScrollListener;
      Arr2InnerOnScrollListener = array of Arr1InnerOnScrollListener;
      Arr3InnerOnScrollListener = array of Arr2InnerOnScrollListener;
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerMultiChoiceModeListener = interface;
      Arr1InnerMultiChoiceModeListener = array of InnerMultiChoiceModeListener;
      Arr2InnerMultiChoiceModeListener = array of Arr1InnerMultiChoiceModeListener;
      Arr3InnerMultiChoiceModeListener = array of Arr2InnerMultiChoiceModeListener;
      InnerRecyclerListener = interface external 'android.widget' name 'RecyclerListener' 
        procedure onMovedToScrapHeap(para1: AVView); overload;
      end;

      InnerSelectionBoundsAdjuster = interface external 'android.widget' name 'SelectionBoundsAdjuster' 
        procedure adjustListItemSelectionBounds(para1: AGRect); overload;
      end;

      InnerOnScrollListener = interface external 'android.widget' name 'OnScrollListener' 
        const
          SCROLL_STATE_FLING = 2;
          SCROLL_STATE_IDLE = 0;
          SCROLL_STATE_TOUCH_SCROLL = 1;
        procedure onScrollStateChanged(para1: AWAbsListView; para2: jint); overload;
        procedure onScroll(para1: AWAbsListView; para2: jint; para3: jint; para4: jint); overload;
      end;

      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AVViewGroup_LayoutParams)
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jint); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
      end;

      InnerMultiChoiceModeListener = interface external 'android.widget' name 'MultiChoiceModeListener' (AVActionMode.InnerCallback)
        procedure onItemCheckedStateChanged(para1: AVActionMode; para2: jint; para3: jlong; para4: jboolean); overload;
      end;

  public
    const
      CHOICE_MODE_MULTIPLE = 2;
      CHOICE_MODE_MULTIPLE_MODAL = 3;
      CHOICE_MODE_NONE = 0;
      CHOICE_MODE_SINGLE = 1;
      TRANSCRIPT_MODE_ALWAYS_SCROLL = 2;
      TRANSCRIPT_MODE_DISABLED = 0;
      TRANSCRIPT_MODE_NORMAL = 1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setOverScrollMode(para1: jint); overload; virtual;
    procedure setAdapter(para1: AWListAdapter); overload; virtual;
    function getCheckedItemCount(): jint; overload; virtual;
    function isItemChecked(para1: jint): jboolean; overload; virtual;
    function getCheckedItemPosition(): jint; overload; virtual;
    function getCheckedItemPositions(): AUSparseBooleanArray; overload; virtual;
    function getCheckedItemIds(): Arr1jlong; overload; virtual;
    procedure clearChoices(); overload; virtual;
    procedure setItemChecked(para1: jint; para2: jboolean); overload; virtual;
    function performItemClick(para1: AVView; para2: jint; para3: jlong): jboolean; overload; virtual;
    function getChoiceMode(): jint; overload; virtual;
    procedure setChoiceMode(para1: jint); overload; virtual;
    procedure setMultiChoiceModeListener(para1: AWAbsListView.InnerMultiChoiceModeListener); overload; virtual;
    procedure setFastScrollEnabled(para1: jboolean); overload; virtual;
    procedure setFastScrollStyle(para1: jint); overload; virtual;
    procedure setFastScrollAlwaysVisible(para1: jboolean); overload; virtual;
    function isFastScrollAlwaysVisible(): jboolean; overload; virtual;
    function getVerticalScrollbarWidth(): jint; overload; virtual;
    function isFastScrollEnabled(): jboolean; overload; virtual;
    procedure setVerticalScrollbarPosition(para1: jint); overload; virtual;
    procedure setScrollBarStyle(para1: jint); overload; virtual;
    procedure setSmoothScrollbarEnabled(para1: jboolean); overload; virtual;
    function isSmoothScrollbarEnabled(): jboolean; overload; virtual;
    procedure setOnScrollListener(para1: AWAbsListView.InnerOnScrollListener); overload; virtual;
    procedure sendAccessibilityEvent(para1: jint); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
    function isScrollingCacheEnabled(): jboolean; overload; virtual;
    procedure setScrollingCacheEnabled(para1: jboolean); overload; virtual;
    procedure setTextFilterEnabled(para1: jboolean); overload; virtual;
    function isTextFilterEnabled(): jboolean; overload; virtual;
    procedure getFocusedRect(para1: AGRect); overload; virtual;
    function isStackFromBottom(): jboolean; overload; virtual;
    procedure setStackFromBottom(para1: jboolean); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    procedure setFilterText(para1: JLString); overload; virtual;
    function getTextFilter(): JLCharSequence; overload; virtual;
  strict protected
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
  public
    procedure requestLayout(); overload; virtual;
  strict protected
    function computeVerticalScrollExtent(): jint; overload; virtual;
    function computeVerticalScrollOffset(): jint; overload; virtual;
    function computeVerticalScrollRange(): jint; overload; virtual;
    function getTopFadingEdgeStrength(): jfloat; overload; virtual;
    function getBottomFadingEdgeStrength(): jfloat; overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure layoutChildren(); overload; virtual;
  public
    function getSelectedView(): AVView; overload; virtual;
    function getListPaddingTop(): jint; overload; virtual;
    function getListPaddingBottom(): jint; overload; virtual;
    function getListPaddingLeft(): jint; overload; virtual;
    function getListPaddingRight(): jint; overload; virtual;
    procedure onInitializeAccessibilityNodeInfoForItem(para1: AVView; para2: jint; para3: AVAAccessibilityNodeInfo); overload; virtual;
  strict protected
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
    function isPaddingOffsetRequired(): jboolean; overload; virtual;
    function getLeftPaddingOffset(): jint; overload; virtual;
    function getTopPaddingOffset(): jint; overload; virtual;
    function getRightPaddingOffset(): jint; overload; virtual;
    function getBottomPaddingOffset(): jint; overload; virtual;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  public
    procedure setDrawSelectorOnTop(para1: jboolean); overload; virtual;
    procedure setSelector(para1: jint); overload; virtual;
    procedure setSelector(para1: AGDDrawable); overload; virtual;
    function getSelector(): AGDDrawable; overload; virtual;
    procedure setScrollIndicators(para1: AVView; para2: AVView); overload; virtual;
  strict protected
    procedure drawableStateChanged(); overload; virtual;
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
  public
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
    procedure jumpDrawablesToCurrentState(); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure onRtlPropertiesChanged(para1: jint); overload; virtual;
    procedure onCancelPendingInputEvents(); overload; virtual;
  strict protected
    function getContextMenuInfo(): AVContextMenu.InnerContextMenuInfo; overload; virtual;
  public
    function showContextMenuForChild(para1: AVView): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
  strict protected
    procedure dispatchSetPressed(para1: jboolean); overload; virtual;
  public
    function pointToPosition(para1: jint; para2: jint): jint; overload; virtual;
    function pointToRowId(para1: jint; para2: jint): jlong; overload; virtual;
    procedure onTouchModeChanged(para1: jboolean); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    procedure onOverScrolled(para1: jint; para2: jint; para3: jboolean; para4: jboolean); overload; virtual;
  public
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure fling(para1: jint); overload; virtual;
    function onStartNestedScroll(para1: AVView; para2: AVView; para3: jint): jboolean; overload; virtual;
    procedure onNestedScrollAccepted(para1: AVView; para2: AVView; para3: jint); overload; virtual;
    procedure onNestedScroll(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    function onNestedFling(para1: AVView; para2: jfloat; para3: jfloat; para4: jboolean): jboolean; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    procedure requestDisallowInterceptTouchEvent(para1: jboolean); overload; virtual;
    function onInterceptHoverEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onInterceptTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure addTouchables(para1: JUArrayList); overload; virtual;
    procedure setFriction(para1: jfloat); overload; virtual;
    procedure setVelocityScale(para1: jfloat); overload; virtual;
    procedure smoothScrollToPosition(para1: jint); overload; virtual;
    procedure smoothScrollToPositionFromTop(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure smoothScrollToPositionFromTop(para1: jint; para2: jint); overload; virtual;
    procedure smoothScrollToPosition(para1: jint; para2: jint); overload; virtual;
    procedure smoothScrollBy(para1: jint; para2: jint); overload; virtual;
    procedure scrollListBy(para1: jint); overload; virtual;
    function canScrollList(para1: jint): jboolean; overload; virtual;
    procedure invalidateViews(); overload; virtual;
  strict protected
    procedure handleDataChanged(); overload; virtual;
    procedure onDisplayHint(para1: jint); overload; virtual;
    function isInFilterMode(): jboolean; overload; virtual;
  public
    function onCreateInputConnection(para1: AVIEditorInfo): AVIInputConnection; overload; virtual;
    function checkInputConnectionProxy(para1: AVView): jboolean; overload; virtual;
    procedure clearTextFilter(); overload; virtual;
    function hasTextFilter(): jboolean; overload; virtual;
    procedure onGlobalLayout(); overload; virtual;
    procedure beforeTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onTextChanged(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure afterTextChanged(para1: ATEditable); overload; virtual;
    procedure onFilterComplete(para1: jint); overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AWAbsListView.InnerLayoutParams; overload; virtual;
  strict protected
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
  public
    procedure setTranscriptMode(para1: jint); overload; virtual;
    function getTranscriptMode(): jint; overload; virtual;
    function getSolidColor(): jint; overload; virtual;
    procedure setCacheColorHint(para1: jint); overload; virtual;
    function getCacheColorHint(): jint; overload; virtual;
    procedure reclaimViews(para1: JUList); overload; virtual;
    procedure setRemoteViewsAdapter(para1: ACIntent); overload; virtual;
    procedure deferNotifyDataSetChanged(); overload; virtual;
    function onRemoteAdapterConnected(): jboolean; overload; virtual;
    procedure onRemoteAdapterDisconnected(); overload; virtual;
    procedure setRecyclerListener(para1: AWAbsListView.InnerRecyclerListener); overload; virtual;
    procedure setSelectionFromTop(para1: jint; para2: jint); overload; virtual;
    procedure setAdapter(para1: AWAdapter); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWAbsSpinner = class abstract external 'android.widget' name 'AbsSpinner' (AWAdapterView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setAdapter(para1: AWSpinnerAdapter); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
  public
    procedure setSelection(para1: jint; para2: jboolean); overload; virtual;
    procedure setSelection(para1: jint); overload; virtual;
    function getSelectedView(): AVView; overload; virtual;
    procedure requestLayout(); overload; virtual;
    function getAdapter(): AWSpinnerAdapter; overload; virtual;
    function getCount(): jint; overload; virtual;
    function pointToPosition(para1: jint; para2: jint): jint; overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setAdapter(para1: AWAdapter); overload; virtual;
    function getAdapter(): AWAdapter; overload; virtual;
  end;

  AWAdvanceable = interface external 'android.widget' name 'Advanceable' 
    procedure advance(); overload;
    procedure fyiWillBeAdvancedByHostKThx(); overload;
  end;

  AWAdapterViewAnimator = class abstract external 'android.widget' name 'AdapterViewAnimator' (AWAdapterView, AWAdvanceable)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setDisplayedChild(para1: jint); overload; virtual;
    function getDisplayedChild(): jint; overload; virtual;
    procedure showNext(); overload; virtual;
    procedure showPrevious(); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    function getCurrentView(): AVView; overload; virtual;
    function getInAnimation(): AAObjectAnimator; overload; virtual;
    procedure setInAnimation(para1: AAObjectAnimator); overload; virtual;
    function getOutAnimation(): AAObjectAnimator; overload; virtual;
    procedure setOutAnimation(para1: AAObjectAnimator); overload; virtual;
    procedure setInAnimation(para1: ACContext; para2: jint); overload; virtual;
    procedure setOutAnimation(para1: ACContext; para2: jint); overload; virtual;
    procedure setAnimateFirstView(para1: jboolean); overload; virtual;
    function getBaseline(): jint; overload; virtual;
    function getAdapter(): AWAdapter; overload; virtual;
    procedure setAdapter(para1: AWAdapter); overload; virtual;
    procedure setRemoteViewsAdapter(para1: ACIntent); overload; virtual;
    procedure setSelection(para1: jint); overload; virtual;
    function getSelectedView(): AVView; overload; virtual;
    procedure deferNotifyDataSetChanged(); overload; virtual;
    function onRemoteAdapterConnected(): jboolean; overload; virtual;
    procedure onRemoteAdapterDisconnected(); overload; virtual;
    procedure advance(); overload; virtual;
    procedure fyiWillBeAdvancedByHostKThx(); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWListPopupWindow = class external 'android.widget' name 'ListPopupWindow' (JLObject)
  public
    const
      INPUT_METHOD_FROM_FOCUSABLE = 0;
      INPUT_METHOD_NEEDED = 1;
      INPUT_METHOD_NOT_NEEDED = 2;
      MATCH_PARENT = -1;
      POSITION_PROMPT_ABOVE = 0;
      POSITION_PROMPT_BELOW = 1;
      WRAP_CONTENT = -2;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setAdapter(para1: AWListAdapter); overload; virtual;
    procedure setPromptPosition(para1: jint); overload; virtual;
    function getPromptPosition(): jint; overload; virtual;
    procedure setModal(para1: jboolean); overload; virtual;
    function isModal(): jboolean; overload; virtual;
    procedure setSoftInputMode(para1: jint); overload; virtual;
    function getSoftInputMode(): jint; overload; virtual;
    procedure setListSelector(para1: AGDDrawable); overload; virtual;
    function getBackground(): AGDDrawable; overload; virtual;
    procedure setBackgroundDrawable(para1: AGDDrawable); overload; virtual;
    procedure setAnimationStyle(para1: jint); overload; virtual;
    function getAnimationStyle(): jint; overload; virtual;
    function getAnchorView(): AVView; overload; virtual;
    procedure setAnchorView(para1: AVView); overload; virtual;
    function getHorizontalOffset(): jint; overload; virtual;
    procedure setHorizontalOffset(para1: jint); overload; virtual;
    function getVerticalOffset(): jint; overload; virtual;
    procedure setVerticalOffset(para1: jint); overload; virtual;
    procedure setDropDownGravity(para1: jint); overload; virtual;
    function getWidth(): jint; overload; virtual;
    procedure setWidth(para1: jint); overload; virtual;
    procedure setContentWidth(para1: jint); overload; virtual;
    function getHeight(): jint; overload; virtual;
    procedure setHeight(para1: jint); overload; virtual;
    procedure setOnItemClickListener(para1: AWAdapterView.InnerOnItemClickListener); overload; virtual;
    procedure setOnItemSelectedListener(para1: AWAdapterView.InnerOnItemSelectedListener); overload; virtual;
    procedure setPromptView(para1: AVView); overload; virtual;
    procedure postShow(); overload; virtual;
    procedure show(); overload; virtual;
    procedure dismiss(); overload; virtual;
    procedure setOnDismissListener(para1: AWPopupWindow.InnerOnDismissListener); overload; virtual;
    procedure setInputMethodMode(para1: jint); overload; virtual;
    function getInputMethodMode(): jint; overload; virtual;
    procedure setSelection(para1: jint); overload; virtual;
    procedure clearListSelection(); overload; virtual;
    function isShowing(): jboolean; overload; virtual;
    function isInputMethodNotNeeded(): jboolean; overload; virtual;
    function performItemClick(para1: jint): jboolean; overload; virtual;
    function getSelectedItem(): JLObject; overload; virtual;
    function getSelectedItemPosition(): jint; overload; virtual;
    function getSelectedItemId(): jlong; overload; virtual;
    function getSelectedView(): AVView; overload; virtual;
    function getListView(): AWListView; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyPreIme(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function createDragToOpenListener(para1: AVView): AVView.InnerOnTouchListener; overload; virtual;
  end;

  AAAppWidgetHostView = class external 'android.appwidget' name 'AppWidgetHostView' (AWFrameLayout)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: jint; para3: jint); overload;
    procedure setAppWidget(para1: jint; para2: AAAppWidgetProviderInfo); overload; virtual;
    class function getDefaultPaddingForWidget(para1: ACContext; para2: ACComponentName; para3: AGRect): AGRect; static; overload;
    function getAppWidgetId(): jint; overload; virtual;
    function getAppWidgetInfo(): AAAppWidgetProviderInfo; overload; virtual;
  strict protected
    procedure dispatchSaveInstanceState(para1: AUSparseArray); overload; virtual;
    procedure dispatchRestoreInstanceState(para1: AUSparseArray); overload; virtual;
  public
    procedure updateAppWidgetSize(para1: AOBundle; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure updateAppWidgetOptions(para1: AOBundle); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AWFrameLayout.InnerLayoutParams; overload; virtual;
    procedure updateAppWidget(para1: AWRemoteViews); overload; virtual;
  strict protected
    function drawChild(para1: AGCanvas; para2: AVView; para3: jlong): jboolean; overload; virtual;
    procedure prepareView(para1: AVView); overload; virtual;
    function getDefaultView(): AVView; overload; virtual;
    function getErrorView(): AVView; overload; virtual;
  public
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AGGestureOverlayView = class external 'android.gesture' name 'GestureOverlayView' (AWFrameLayout)
  public
    type
      InnerOnGesturePerformedListener = interface;
      Arr1InnerOnGesturePerformedListener = array of InnerOnGesturePerformedListener;
      Arr2InnerOnGesturePerformedListener = array of Arr1InnerOnGesturePerformedListener;
      Arr3InnerOnGesturePerformedListener = array of Arr2InnerOnGesturePerformedListener;
      InnerOnGestureListener = interface;
      Arr1InnerOnGestureListener = array of InnerOnGestureListener;
      Arr2InnerOnGestureListener = array of Arr1InnerOnGestureListener;
      Arr3InnerOnGestureListener = array of Arr2InnerOnGestureListener;
      InnerOnGesturingListener = interface;
      Arr1InnerOnGesturingListener = array of InnerOnGesturingListener;
      Arr2InnerOnGesturingListener = array of Arr1InnerOnGesturingListener;
      Arr3InnerOnGesturingListener = array of Arr2InnerOnGesturingListener;
      InnerOnGesturePerformedListener = interface external 'android.gesture' name 'OnGesturePerformedListener' 
        procedure onGesturePerformed(para1: AGGestureOverlayView; para2: AGGesture); overload;
      end;

      InnerOnGestureListener = interface external 'android.gesture' name 'OnGestureListener' 
        procedure onGestureStarted(para1: AGGestureOverlayView; para2: AVMotionEvent); overload;
        procedure onGesture(para1: AGGestureOverlayView; para2: AVMotionEvent); overload;
        procedure onGestureEnded(para1: AGGestureOverlayView; para2: AVMotionEvent); overload;
        procedure onGestureCancelled(para1: AGGestureOverlayView; para2: AVMotionEvent); overload;
      end;

      InnerOnGesturingListener = interface external 'android.gesture' name 'OnGesturingListener' 
        procedure onGesturingStarted(para1: AGGestureOverlayView); overload;
        procedure onGesturingEnded(para1: AGGestureOverlayView); overload;
      end;

  public
    const
      GESTURE_STROKE_TYPE_MULTIPLE = 1;
      GESTURE_STROKE_TYPE_SINGLE = 0;
      ORIENTATION_HORIZONTAL = 0;
      ORIENTATION_VERTICAL = 1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getCurrentStroke(): JUArrayList; overload; virtual;
    function getOrientation(): jint; overload; virtual;
    procedure setOrientation(para1: jint); overload; virtual;
    procedure setGestureColor(para1: jint); overload; virtual;
    procedure setUncertainGestureColor(para1: jint); overload; virtual;
    function getUncertainGestureColor(): jint; overload; virtual;
    function getGestureColor(): jint; overload; virtual;
    function getGestureStrokeWidth(): jfloat; overload; virtual;
    procedure setGestureStrokeWidth(para1: jfloat); overload; virtual;
    function getGestureStrokeType(): jint; overload; virtual;
    procedure setGestureStrokeType(para1: jint); overload; virtual;
    function getGestureStrokeLengthThreshold(): jfloat; overload; virtual;
    procedure setGestureStrokeLengthThreshold(para1: jfloat); overload; virtual;
    function getGestureStrokeSquarenessTreshold(): jfloat; overload; virtual;
    procedure setGestureStrokeSquarenessTreshold(para1: jfloat); overload; virtual;
    function getGestureStrokeAngleThreshold(): jfloat; overload; virtual;
    procedure setGestureStrokeAngleThreshold(para1: jfloat); overload; virtual;
    function isEventsInterceptionEnabled(): jboolean; overload; virtual;
    procedure setEventsInterceptionEnabled(para1: jboolean); overload; virtual;
    function isFadeEnabled(): jboolean; overload; virtual;
    procedure setFadeEnabled(para1: jboolean); overload; virtual;
    function getGesture(): AGGesture; overload; virtual;
    procedure setGesture(para1: AGGesture); overload; virtual;
    function getGesturePath(): AGPath; overload; virtual;
    function getGesturePath(para1: AGPath): AGPath; overload; virtual;
    function isGestureVisible(): jboolean; overload; virtual;
    procedure setGestureVisible(para1: jboolean); overload; virtual;
    function getFadeOffset(): jlong; overload; virtual;
    procedure setFadeOffset(para1: jlong); overload; virtual;
    procedure addOnGestureListener(para1: AGGestureOverlayView.InnerOnGestureListener); overload; virtual;
    procedure removeOnGestureListener(para1: AGGestureOverlayView.InnerOnGestureListener); overload; virtual;
    procedure removeAllOnGestureListeners(); overload; virtual;
    procedure addOnGesturePerformedListener(para1: AGGestureOverlayView.InnerOnGesturePerformedListener); overload; virtual;
    procedure removeOnGesturePerformedListener(para1: AGGestureOverlayView.InnerOnGesturePerformedListener); overload; virtual;
    procedure removeAllOnGesturePerformedListeners(); overload; virtual;
    procedure addOnGesturingListener(para1: AGGestureOverlayView.InnerOnGesturingListener); overload; virtual;
    procedure removeOnGesturingListener(para1: AGGestureOverlayView.InnerOnGesturingListener); overload; virtual;
    procedure removeAllOnGesturingListeners(); overload; virtual;
    function isGesturing(): jboolean; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    procedure clear(para1: jboolean); overload; virtual;
    procedure cancelClearAnimation(); overload; virtual;
    procedure cancelGesture(); overload; virtual;
  strict protected
    procedure onDetachedFromWindow(); overload; virtual;
  public
    function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  end;

  AWCalendarView = class external 'android.widget' name 'CalendarView' (AWFrameLayout)
  public
    type
      InnerOnDateChangeListener = interface;
      Arr1InnerOnDateChangeListener = array of InnerOnDateChangeListener;
      Arr2InnerOnDateChangeListener = array of Arr1InnerOnDateChangeListener;
      Arr3InnerOnDateChangeListener = array of Arr2InnerOnDateChangeListener;
      InnerOnDateChangeListener = interface external 'android.widget' name 'OnDateChangeListener' 
        procedure onSelectedDayChange(para1: AWCalendarView; para2: jint; para3: jint; para4: jint); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setShownWeekCount(para1: jint); overload; virtual;
    function getShownWeekCount(): jint; overload; virtual;
    procedure setSelectedWeekBackgroundColor(para1: jint); overload; virtual;
    function getSelectedWeekBackgroundColor(): jint; overload; virtual;
    procedure setFocusedMonthDateColor(para1: jint); overload; virtual;
    function getFocusedMonthDateColor(): jint; overload; virtual;
    procedure setUnfocusedMonthDateColor(para1: jint); overload; virtual;
    function getUnfocusedMonthDateColor(): jint; overload; virtual;
    procedure setWeekNumberColor(para1: jint); overload; virtual;
    function getWeekNumberColor(): jint; overload; virtual;
    procedure setWeekSeparatorLineColor(para1: jint); overload; virtual;
    function getWeekSeparatorLineColor(): jint; overload; virtual;
    procedure setSelectedDateVerticalBar(para1: jint); overload; virtual;
    procedure setSelectedDateVerticalBar(para1: AGDDrawable); overload; virtual;
    function getSelectedDateVerticalBar(): AGDDrawable; overload; virtual;
    procedure setWeekDayTextAppearance(para1: jint); overload; virtual;
    function getWeekDayTextAppearance(): jint; overload; virtual;
    procedure setDateTextAppearance(para1: jint); overload; virtual;
    function getDateTextAppearance(): jint; overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    function getMinDate(): jlong; overload; virtual;
    procedure setMinDate(para1: jlong); overload; virtual;
    function getMaxDate(): jlong; overload; virtual;
    procedure setMaxDate(para1: jlong); overload; virtual;
    procedure setShowWeekNumber(para1: jboolean); overload; virtual;
    function getShowWeekNumber(): jboolean; overload; virtual;
    function getFirstDayOfWeek(): jint; overload; virtual;
    procedure setFirstDayOfWeek(para1: jint); overload; virtual;
    procedure setOnDateChangeListener(para1: AWCalendarView.InnerOnDateChangeListener); overload; virtual;
    function getDate(): jlong; overload; virtual;
    procedure setDate(para1: jlong); overload; virtual;
    procedure setDate(para1: jlong; para2: jboolean; para3: jboolean); overload; virtual;
  strict protected
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWDatePicker = class external 'android.widget' name 'DatePicker' (AWFrameLayout)
  public
    type
      InnerOnDateChangedListener = interface;
      Arr1InnerOnDateChangedListener = array of InnerOnDateChangedListener;
      Arr2InnerOnDateChangedListener = array of Arr1InnerOnDateChangedListener;
      Arr3InnerOnDateChangedListener = array of Arr2InnerOnDateChangedListener;
      InnerOnDateChangedListener = interface external 'android.widget' name 'OnDateChangedListener' 
        procedure onDateChanged(para1: AWDatePicker; para2: jint; para3: jint; para4: jint); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure init(para1: jint; para2: jint; para3: jint; para4: AWDatePicker.InnerOnDateChangedListener); overload; virtual;
    procedure updateDate(para1: jint; para2: jint; para3: jint); overload; virtual;
    function getYear(): jint; overload; virtual;
    function getMonth(): jint; overload; virtual;
    function getDayOfMonth(): jint; overload; virtual;
    function getMinDate(): jlong; overload; virtual;
    procedure setMinDate(para1: jlong); overload; virtual;
    function getMaxDate(): jlong; overload; virtual;
    procedure setMaxDate(para1: jlong); overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    procedure onPopulateAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  strict protected
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
  public
    procedure setFirstDayOfWeek(para1: jint); overload; virtual;
    function getFirstDayOfWeek(): jint; overload; virtual;
    function getCalendarViewShown(): jboolean; overload; virtual;
    function getCalendarView(): AWCalendarView; overload; virtual;
    procedure setCalendarViewShown(para1: jboolean); overload; virtual;
    function getSpinnersShown(): jboolean; overload; virtual;
    procedure setSpinnersShown(para1: jboolean); overload; virtual;
  strict protected
    procedure dispatchRestoreInstanceState(para1: AUSparseArray); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  end;

  AWHorizontalScrollView = class external 'android.widget' name 'HorizontalScrollView' (AWFrameLayout)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    function getLeftFadingEdgeStrength(): jfloat; overload; virtual;
    function getRightFadingEdgeStrength(): jfloat; overload; virtual;
  public
    function getMaxScrollAmount(): jint; overload; virtual;
    procedure addView(para1: AVView); overload; virtual;
    procedure addView(para1: AVView; para2: jint); overload; virtual;
    procedure addView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    function isFillViewport(): jboolean; overload; virtual;
    procedure setFillViewport(para1: jboolean); overload; virtual;
    function isSmoothScrollingEnabled(): jboolean; overload; virtual;
    procedure setSmoothScrollingEnabled(para1: jboolean); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function executeKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    procedure requestDisallowInterceptTouchEvent(para1: jboolean); overload; virtual;
    function onInterceptTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function shouldDelayChildPressedState(): jboolean; overload; virtual;
  strict protected
    procedure onOverScrolled(para1: jint; para2: jint; para3: jboolean; para4: jboolean); overload; virtual;
  public
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    function pageScroll(para1: jint): jboolean; overload; virtual;
    function fullScroll(para1: jint): jboolean; overload; virtual;
    function arrowScroll(para1: jint): jboolean; overload; virtual;
    procedure smoothScrollBy(para1: jint; para2: jint); overload; virtual; final;
    procedure smoothScrollTo(para1: jint; para2: jint); overload; virtual; final;
  strict protected
    function computeHorizontalScrollRange(): jint; overload; virtual;
    function computeHorizontalScrollOffset(): jint; overload; virtual;
    procedure measureChild(para1: AVView; para2: jint; para3: jint); overload; virtual;
    procedure measureChildWithMargins(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    procedure computeScroll(); overload; virtual;
  strict protected
    function computeScrollDeltaToGetChildRectOnScreen(para1: AGRect): jint; overload; virtual;
  public
    procedure requestChildFocus(para1: AVView; para2: AVView); overload; virtual;
  strict protected
    function onRequestFocusInDescendants(para1: jint; para2: AGRect): jboolean; overload; virtual;
  public
    function requestChildRectangleOnScreen(para1: AVView; para2: AGRect; para3: jboolean): jboolean; overload; virtual;
    procedure requestLayout(); overload; virtual;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  public
    procedure fling(para1: jint); overload; virtual;
    procedure scrollTo(para1: jint; para2: jint); overload; virtual;
    procedure setOverScrollMode(para1: jint); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
  strict protected
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
  end;

  AWMediaController = class external 'android.widget' name 'MediaController' (AWFrameLayout)
  public
    type
      InnerMediaPlayerControl = interface;
      Arr1InnerMediaPlayerControl = array of InnerMediaPlayerControl;
      Arr2InnerMediaPlayerControl = array of Arr1InnerMediaPlayerControl;
      Arr3InnerMediaPlayerControl = array of Arr2InnerMediaPlayerControl;
      InnerMediaPlayerControl = interface external 'android.widget' name 'MediaPlayerControl' 
        procedure start(); overload;
        procedure pause(); overload;
        function getDuration(): jint; overload;
        function getCurrentPosition(): jint; overload;
        procedure seekTo(para1: jint); overload;
        function isPlaying(): jboolean; overload;
        function getBufferPercentage(): jint; overload;
        function canPause(): jboolean; overload;
        function canSeekBackward(): jboolean; overload;
        function canSeekForward(): jboolean; overload;
        function getAudioSessionId(): jint; overload;
      end;

  public
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: jboolean); overload;
    constructor create(para1: ACContext); overload;
    procedure onFinishInflate(); overload; virtual;
    procedure setMediaPlayer(para1: AWMediaController.InnerMediaPlayerControl); overload; virtual;
    procedure setAnchorView(para1: AVView); overload; virtual;
    procedure show(); overload; virtual;
    procedure show(para1: jint); overload; virtual;
    function isShowing(): jboolean; overload; virtual;
    procedure hide(); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setPrevNextListeners(para1: AVView.InnerOnClickListener; para2: AVView.InnerOnClickListener); overload; virtual;
  end;

  AWScrollView = class external 'android.widget' name 'ScrollView' (AWFrameLayout)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function shouldDelayChildPressedState(): jboolean; overload; virtual;
  strict protected
    function getTopFadingEdgeStrength(): jfloat; overload; virtual;
    function getBottomFadingEdgeStrength(): jfloat; overload; virtual;
  public
    function getMaxScrollAmount(): jint; overload; virtual;
    procedure addView(para1: AVView); overload; virtual;
    procedure addView(para1: AVView; para2: jint); overload; virtual;
    procedure addView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    function isFillViewport(): jboolean; overload; virtual;
    procedure setFillViewport(para1: jboolean); overload; virtual;
    function isSmoothScrollingEnabled(): jboolean; overload; virtual;
    procedure setSmoothScrollingEnabled(para1: jboolean); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function executeKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    procedure requestDisallowInterceptTouchEvent(para1: jboolean); overload; virtual;
    function onInterceptTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    procedure onOverScrolled(para1: jint; para2: jint; para3: jboolean; para4: jboolean); overload; virtual;
  public
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    function pageScroll(para1: jint): jboolean; overload; virtual;
    function fullScroll(para1: jint): jboolean; overload; virtual;
    function arrowScroll(para1: jint): jboolean; overload; virtual;
    procedure smoothScrollBy(para1: jint; para2: jint); overload; virtual; final;
    procedure smoothScrollTo(para1: jint; para2: jint); overload; virtual; final;
  strict protected
    function computeVerticalScrollRange(): jint; overload; virtual;
    function computeVerticalScrollOffset(): jint; overload; virtual;
    procedure measureChild(para1: AVView; para2: jint; para3: jint); overload; virtual;
    procedure measureChildWithMargins(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    procedure computeScroll(); overload; virtual;
  strict protected
    function computeScrollDeltaToGetChildRectOnScreen(para1: AGRect): jint; overload; virtual;
  public
    procedure requestChildFocus(para1: AVView; para2: AVView); overload; virtual;
  strict protected
    function onRequestFocusInDescendants(para1: jint; para2: AGRect): jboolean; overload; virtual;
  public
    function requestChildRectangleOnScreen(para1: AVView; para2: AGRect; para3: jboolean): jboolean; overload; virtual;
    procedure requestLayout(); overload; virtual;
  strict protected
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
  public
    procedure fling(para1: jint); overload; virtual;
    procedure scrollTo(para1: jint; para2: jint); overload; virtual;
    procedure setOverScrollMode(para1: jint); overload; virtual;
    function onStartNestedScroll(para1: AVView; para2: AVView; para3: jint): jboolean; overload; virtual;
    procedure onNestedScrollAccepted(para1: AVView; para2: AVView; para3: jint); overload; virtual;
    procedure onStopNestedScroll(para1: AVView); overload; virtual;
    procedure onNestedScroll(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    function onNestedFling(para1: AVView; para2: jfloat; para3: jfloat; para4: jboolean): jboolean; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
  strict protected
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
  end;

  AWTabHost = class external 'android.widget' name 'TabHost' (AWFrameLayout, AVViewTreeObserver.InnerOnTouchModeChangeListener)
  public
    type
      InnerTabContentFactory = interface;
      Arr1InnerTabContentFactory = array of InnerTabContentFactory;
      Arr2InnerTabContentFactory = array of Arr1InnerTabContentFactory;
      Arr3InnerTabContentFactory = array of Arr2InnerTabContentFactory;
      InnerOnTabChangeListener = interface;
      Arr1InnerOnTabChangeListener = array of InnerOnTabChangeListener;
      Arr2InnerOnTabChangeListener = array of Arr1InnerOnTabChangeListener;
      Arr3InnerOnTabChangeListener = array of Arr2InnerOnTabChangeListener;
      InnerTabSpec = class;
      Arr1InnerTabSpec = array of InnerTabSpec;
      Arr2InnerTabSpec = array of Arr1InnerTabSpec;
      Arr3InnerTabSpec = array of Arr2InnerTabSpec;
      InnerTabContentFactory = interface external 'android.widget' name 'TabContentFactory' 
        function createTabContent(para1: JLString): AVView; overload;
      end;

      InnerOnTabChangeListener = interface external 'android.widget' name 'OnTabChangeListener' 
        procedure onTabChanged(para1: JLString); overload;
      end;

      InnerTabSpec = class external 'android.widget' name 'TabSpec' 
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function newTabSpec(para1: JLString): AWTabHost.InnerTabSpec; overload; virtual;
    procedure setup(); overload; virtual;
    procedure sendAccessibilityEvent(para1: jint); overload; virtual;
    procedure setup(para1: AALocalActivityManager); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    procedure onTouchModeChanged(para1: jboolean); overload; virtual;
    procedure addTab(para1: AWTabHost.InnerTabSpec); overload; virtual;
    procedure clearAllTabs(); overload; virtual;
    function getTabWidget(): AWTabWidget; overload; virtual;
    function getCurrentTab(): jint; overload; virtual;
    function getCurrentTabTag(): JLString; overload; virtual;
    function getCurrentTabView(): AVView; overload; virtual;
    function getCurrentView(): AVView; overload; virtual;
    procedure setCurrentTabByTag(para1: JLString); overload; virtual;
    function getTabContentView(): AWFrameLayout; overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    procedure dispatchWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setCurrentTab(para1: jint); overload; virtual;
    procedure setOnTabChangedListener(para1: AWTabHost.InnerOnTabChangeListener); overload; virtual;
  end;

  AWTimePicker = class external 'android.widget' name 'TimePicker' (AWFrameLayout)
  public
    type
      InnerOnTimeChangedListener = interface;
      Arr1InnerOnTimeChangedListener = array of InnerOnTimeChangedListener;
      Arr2InnerOnTimeChangedListener = array of Arr1InnerOnTimeChangedListener;
      Arr3InnerOnTimeChangedListener = array of Arr2InnerOnTimeChangedListener;
      InnerOnTimeChangedListener = interface external 'android.widget' name 'OnTimeChangedListener' 
        procedure onTimeChanged(para1: AWTimePicker; para2: jint; para3: jint); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setCurrentHour(para1: JLInteger); overload; virtual;
    function getCurrentHour(): JLInteger; overload; virtual;
    procedure setCurrentMinute(para1: JLInteger); overload; virtual;
    function getCurrentMinute(): JLInteger; overload; virtual;
    procedure setIs24HourView(para1: JLBoolean); overload; virtual;
    function is24HourView(): jboolean; overload; virtual;
    procedure setOnTimeChangedListener(para1: AWTimePicker.InnerOnTimeChangedListener); overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    function isEnabled(): jboolean; overload; virtual;
    function getBaseline(): jint; overload; virtual;
  strict protected
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  public
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    procedure onPopulateAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWViewAnimator = class external 'android.widget' name 'ViewAnimator' (AWFrameLayout)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setDisplayedChild(para1: jint); overload; virtual;
    function getDisplayedChild(): jint; overload; virtual;
    procedure showNext(); overload; virtual;
    procedure showPrevious(); overload; virtual;
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    procedure removeAllViews(); overload; virtual;
    procedure removeView(para1: AVView); overload; virtual;
    procedure removeViewAt(para1: jint); overload; virtual;
    procedure removeViewInLayout(para1: AVView); overload; virtual;
    procedure removeViews(para1: jint; para2: jint); overload; virtual;
    procedure removeViewsInLayout(para1: jint; para2: jint); overload; virtual;
    function getCurrentView(): AVView; overload; virtual;
    function getInAnimation(): AVAAnimation; overload; virtual;
    procedure setInAnimation(para1: AVAAnimation); overload; virtual;
    function getOutAnimation(): AVAAnimation; overload; virtual;
    procedure setOutAnimation(para1: AVAAnimation); overload; virtual;
    procedure setInAnimation(para1: ACContext; para2: jint); overload; virtual;
    procedure setOutAnimation(para1: ACContext; para2: jint); overload; virtual;
    function getAnimateFirstView(): jboolean; overload; virtual;
    procedure setAnimateFirstView(para1: jboolean); overload; virtual;
    function getBaseline(): jint; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWNumberPicker = class external 'android.widget' name 'NumberPicker' (AWLinearLayout)
  public
    type
      InnerFormatter = interface;
      Arr1InnerFormatter = array of InnerFormatter;
      Arr2InnerFormatter = array of Arr1InnerFormatter;
      Arr3InnerFormatter = array of Arr2InnerFormatter;
      InnerOnScrollListener = interface;
      Arr1InnerOnScrollListener = array of InnerOnScrollListener;
      Arr2InnerOnScrollListener = array of Arr1InnerOnScrollListener;
      Arr3InnerOnScrollListener = array of Arr2InnerOnScrollListener;
      InnerOnValueChangeListener = interface;
      Arr1InnerOnValueChangeListener = array of InnerOnValueChangeListener;
      Arr2InnerOnValueChangeListener = array of Arr1InnerOnValueChangeListener;
      Arr3InnerOnValueChangeListener = array of Arr2InnerOnValueChangeListener;
      InnerFormatter = interface external 'android.widget' name 'Formatter' 
        function format(para1: jint): JLString; overload;
      end;

      InnerOnScrollListener = interface external 'android.widget' name 'OnScrollListener' 
        const
          SCROLL_STATE_FLING = 2;
          SCROLL_STATE_IDLE = 0;
          SCROLL_STATE_TOUCH_SCROLL = 1;
        procedure onScrollStateChange(para1: AWNumberPicker; para2: jint); overload;
      end;

      InnerOnValueChangeListener = interface external 'android.widget' name 'OnValueChangeListener' 
        procedure onValueChange(para1: AWNumberPicker; para2: jint; para3: jint); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    function onInterceptTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    function dispatchHoverEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  public
    procedure computeScroll(); overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    procedure scrollBy(para1: jint; para2: jint); overload; virtual;
  strict protected
    function computeVerticalScrollOffset(): jint; overload; virtual;
    function computeVerticalScrollRange(): jint; overload; virtual;
    function computeVerticalScrollExtent(): jint; overload; virtual;
  public
    function getSolidColor(): jint; overload; virtual;
    procedure setOnValueChangedListener(para1: AWNumberPicker.InnerOnValueChangeListener); overload; virtual;
    procedure setOnScrollListener(para1: AWNumberPicker.InnerOnScrollListener); overload; virtual;
    procedure setFormatter(para1: AWNumberPicker.InnerFormatter); overload; virtual;
    procedure setValue(para1: jint); overload; virtual;
    function performClick(): jboolean; overload; virtual;
    function performLongClick(): jboolean; overload; virtual;
    function getWrapSelectorWheel(): jboolean; overload; virtual;
    procedure setWrapSelectorWheel(para1: jboolean); overload; virtual;
    procedure setOnLongPressUpdateInterval(para1: jlong); overload; virtual;
    function getValue(): jint; overload; virtual;
    function getMinValue(): jint; overload; virtual;
    procedure setMinValue(para1: jint); overload; virtual;
    function getMaxValue(): jint; overload; virtual;
    procedure setMaxValue(para1: jint); overload; virtual;
    function getDisplayedValues(): Arr1JLString; overload; virtual;
    procedure setDisplayedValues(para1: Arr1JLString); overload; virtual;
    procedure setDisplayedValues(var para1: array of JLString); overload; virtual;
  strict protected
    function getTopFadingEdgeStrength(): jfloat; overload; virtual;
    function getBottomFadingEdgeStrength(): jfloat; overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onDraw(para1: AGCanvas); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    function getAccessibilityNodeProvider(): AVAAccessibilityNodeProvider; overload; virtual;
  end;

  AWRadioGroup = class external 'android.widget' name 'RadioGroup' (AWLinearLayout)
  public
    type
      InnerOnCheckedChangeListener = interface;
      Arr1InnerOnCheckedChangeListener = array of InnerOnCheckedChangeListener;
      Arr2InnerOnCheckedChangeListener = array of Arr1InnerOnCheckedChangeListener;
      Arr3InnerOnCheckedChangeListener = array of Arr2InnerOnCheckedChangeListener;
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerOnCheckedChangeListener = interface external 'android.widget' name 'OnCheckedChangeListener' 
        procedure onCheckedChanged(para1: AWRadioGroup; para2: jint); overload;
      end;

      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AWLinearLayout.InnerLayoutParams)
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jfloat); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
      strict protected
        procedure setBaseAttributes(para1: ACRTypedArray; para2: jint; para3: jint); overload; virtual;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setOnHierarchyChangeListener(para1: AVViewGroup.InnerOnHierarchyChangeListener); overload; virtual;
  strict protected
    procedure onFinishInflate(); overload; virtual;
  public
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    procedure check(para1: jint); overload; virtual;
    function getCheckedRadioButtonId(): jint; overload; virtual;
    procedure clearCheck(); overload; virtual;
    procedure setOnCheckedChangeListener(para1: AWRadioGroup.InnerOnCheckedChangeListener); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AWRadioGroup.InnerLayoutParams; overload; virtual;
  strict protected
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateDefaultLayoutParams(): AWLinearLayout.InnerLayoutParams; overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AWLinearLayout.InnerLayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWSearchView = class external 'android.widget' name 'SearchView' (AWLinearLayout, AVCollapsibleActionView)
  public
    type
      InnerOnSuggestionListener = interface;
      Arr1InnerOnSuggestionListener = array of InnerOnSuggestionListener;
      Arr2InnerOnSuggestionListener = array of Arr1InnerOnSuggestionListener;
      Arr3InnerOnSuggestionListener = array of Arr2InnerOnSuggestionListener;
      InnerOnCloseListener = interface;
      Arr1InnerOnCloseListener = array of InnerOnCloseListener;
      Arr2InnerOnCloseListener = array of Arr1InnerOnCloseListener;
      Arr3InnerOnCloseListener = array of Arr2InnerOnCloseListener;
      InnerOnQueryTextListener = interface;
      Arr1InnerOnQueryTextListener = array of InnerOnQueryTextListener;
      Arr2InnerOnQueryTextListener = array of Arr1InnerOnQueryTextListener;
      Arr3InnerOnQueryTextListener = array of Arr2InnerOnQueryTextListener;
      InnerOnSuggestionListener = interface external 'android.widget' name 'OnSuggestionListener' 
        function onSuggestionSelect(para1: jint): jboolean; overload;
        function onSuggestionClick(para1: jint): jboolean; overload;
      end;

      InnerOnCloseListener = interface external 'android.widget' name 'OnCloseListener' 
        function onClose(): jboolean; overload;
      end;

      InnerOnQueryTextListener = interface external 'android.widget' name 'OnQueryTextListener' 
        function onQueryTextSubmit(para1: JLString): jboolean; overload;
        function onQueryTextChange(para1: JLString): jboolean; overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setSearchableInfo(para1: AASearchableInfo); overload; virtual;
    procedure setImeOptions(para1: jint); overload; virtual;
    function getImeOptions(): jint; overload; virtual;
    procedure setInputType(para1: jint); overload; virtual;
    function getInputType(): jint; overload; virtual;
    procedure setOnQueryTextListener(para1: AWSearchView.InnerOnQueryTextListener); overload; virtual;
    procedure setOnCloseListener(para1: AWSearchView.InnerOnCloseListener); overload; virtual;
    procedure setOnQueryTextFocusChangeListener(para1: AVView.InnerOnFocusChangeListener); overload; virtual;
    procedure setOnSuggestionListener(para1: AWSearchView.InnerOnSuggestionListener); overload; virtual;
    procedure setOnSearchClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
    function getQuery(): JLCharSequence; overload; virtual;
    procedure setQuery(para1: JLCharSequence; para2: jboolean); overload; virtual;
    procedure setQueryHint(para1: JLCharSequence); overload; virtual;
    function getQueryHint(): JLCharSequence; overload; virtual;
    procedure setIconifiedByDefault(para1: jboolean); overload; virtual;
    function isIconfiedByDefault(): jboolean; overload; virtual;
    procedure setIconified(para1: jboolean); overload; virtual;
    function isIconified(): jboolean; overload; virtual;
    procedure setSubmitButtonEnabled(para1: jboolean); overload; virtual;
    function isSubmitButtonEnabled(): jboolean; overload; virtual;
    procedure setQueryRefinementEnabled(para1: jboolean); overload; virtual;
    function isQueryRefinementEnabled(): jboolean; overload; virtual;
    procedure setSuggestionsAdapter(para1: AWCursorAdapter); overload; virtual;
    function getSuggestionsAdapter(): AWCursorAdapter; overload; virtual;
    procedure setMaxWidth(para1: jint); overload; virtual;
    function getMaxWidth(): jint; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure onActionViewCollapsed(); overload; virtual;
    procedure onActionViewExpanded(); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWTabWidget = class external 'android.widget' name 'TabWidget' (AWLinearLayout, AVView.InnerOnFocusChangeListener)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    function getChildDrawingOrder(para1: jint; para2: jint): jint; overload; virtual;
  public
    function getChildTabViewAt(para1: jint): AVView; overload; virtual;
    function getTabCount(): jint; overload; virtual;
    procedure setDividerDrawable(para1: AGDDrawable); overload; virtual;
    procedure setDividerDrawable(para1: jint); overload; virtual;
    procedure setLeftStripDrawable(para1: AGDDrawable); overload; virtual;
    procedure setLeftStripDrawable(para1: jint); overload; virtual;
    procedure setRightStripDrawable(para1: AGDDrawable); overload; virtual;
    procedure setRightStripDrawable(para1: jint); overload; virtual;
    procedure setStripEnabled(para1: jboolean); overload; virtual;
    function isStripEnabled(): jboolean; overload; virtual;
    procedure childDrawableStateChanged(para1: AVView); overload; virtual;
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
    procedure setCurrentTab(para1: jint); overload; virtual;
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure sendAccessibilityEventUnchecked(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure focusCurrentTab(para1: jint); overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    procedure addView(para1: AVView); overload; virtual;
    procedure removeAllViews(); overload; virtual;
    procedure onFocusChange(para1: AVView; para2: jboolean); overload; virtual;
  end;

  AWTableLayout = class external 'android.widget' name 'TableLayout' (AWLinearLayout)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AWLinearLayout.InnerLayoutParams)
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jfloat); overload;
        constructor create(); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
      strict protected
        procedure setBaseAttributes(para1: ACRTypedArray; para2: jint; para3: jint); overload; virtual;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setOnHierarchyChangeListener(para1: AVViewGroup.InnerOnHierarchyChangeListener); overload; virtual;
    procedure requestLayout(); overload; virtual;
    function isShrinkAllColumns(): jboolean; overload; virtual;
    procedure setShrinkAllColumns(para1: jboolean); overload; virtual;
    function isStretchAllColumns(): jboolean; overload; virtual;
    procedure setStretchAllColumns(para1: jboolean); overload; virtual;
    procedure setColumnCollapsed(para1: jint; para2: jboolean); overload; virtual;
    function isColumnCollapsed(para1: jint): jboolean; overload; virtual;
    procedure setColumnStretchable(para1: jint; para2: jboolean); overload; virtual;
    function isColumnStretchable(para1: jint): jboolean; overload; virtual;
    procedure setColumnShrinkable(para1: jint; para2: jboolean); overload; virtual;
    function isColumnShrinkable(para1: jint): jboolean; overload; virtual;
    procedure addView(para1: AVView); overload; virtual;
    procedure addView(para1: AVView; para2: jint); overload; virtual;
    procedure addView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AWTableLayout.InnerLayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AWLinearLayout.InnerLayoutParams; overload; virtual;
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AWLinearLayout.InnerLayoutParams; overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AWLinearLayout.InnerLayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWTableRow = class external 'android.widget' name 'TableRow' (AWLinearLayout)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AWLinearLayout.InnerLayoutParams)
      public
        var
          fcolumn: jint; external name 'column';
          fspan: jint; external name 'span';
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jfloat); overload;
        constructor create(); overload;
        constructor create(para1: jint); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
      strict protected
        procedure setBaseAttributes(para1: ACRTypedArray; para2: jint; para3: jint); overload; virtual;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setOnHierarchyChangeListener(para1: AVViewGroup.InnerOnHierarchyChangeListener); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function getVirtualChildAt(para1: jint): AVView; overload; virtual;
    function getVirtualChildCount(): jint; overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AWTableRow.InnerLayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AWLinearLayout.InnerLayoutParams; overload; virtual;
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AWLinearLayout.InnerLayoutParams; overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function generateLayoutParams(para1: AUAttributeSet): AWLinearLayout.InnerLayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWZoomControls = class external 'android.widget' name 'ZoomControls' (AWLinearLayout)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setOnZoomInClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
    procedure setOnZoomOutClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
    procedure setZoomSpeed(para1: jlong); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure show(); overload; virtual;
    procedure hide(); overload; virtual;
    procedure setIsZoomInEnabled(para1: jboolean); overload; virtual;
    procedure setIsZoomOutEnabled(para1: jboolean); overload; virtual;
    function hasFocus(): jboolean; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWDialerFilter = class external 'android.widget' name 'DialerFilter' (AWRelativeLayout)
  public
    const
      DIGITS_AND_LETTERS = 1;
      DIGITS_AND_LETTERS_NO_DIGITS = 2;
      DIGITS_AND_LETTERS_NO_LETTERS = 3;
      DIGITS_ONLY = 4;
      LETTERS_ONLY = 5;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
  strict protected
    procedure onFinishInflate(); overload; virtual;
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
  public
    function isQwertyKeyboard(): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function getMode(): jint; overload; virtual;
    procedure setMode(para1: jint); overload; virtual;
    function getLetters(): JLCharSequence; overload; virtual;
    function getDigits(): JLCharSequence; overload; virtual;
    function getFilterText(): JLCharSequence; overload; virtual;
    procedure append(para1: JLString); overload; virtual;
    procedure clearText(); overload; virtual;
    procedure setLettersWatcher(para1: ATTextWatcher); overload; virtual;
    procedure setDigitsWatcher(para1: ATTextWatcher); overload; virtual;
    procedure setFilterWatcher(para1: ATTextWatcher); overload; virtual;
    procedure removeFilterWatcher(para1: ATTextWatcher); overload; virtual;
  strict protected
    procedure onModeChange(para1: jint; para2: jint); overload; virtual;
  end;

  AWTwoLineListItem = class external 'android.widget' name 'TwoLineListItem' (AWRelativeLayout)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure onFinishInflate(); overload; virtual;
  public
    function getText1(): AWTextView; overload; virtual;
    function getText2(): AWTextView; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWZoomButton = class external 'android.widget' name 'ZoomButton' (AWImageButton, AVView.InnerOnLongClickListener)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure setZoomSpeed(para1: jlong); overload; virtual;
    function onLongClick(para1: AVView): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    function dispatchUnhandledMove(para1: AVView; para2: jint): jboolean; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWRatingBar = class external 'android.widget' name 'RatingBar' (AWAbsSeekBar)
  public
    type
      InnerOnRatingBarChangeListener = interface;
      Arr1InnerOnRatingBarChangeListener = array of InnerOnRatingBarChangeListener;
      Arr2InnerOnRatingBarChangeListener = array of Arr1InnerOnRatingBarChangeListener;
      Arr3InnerOnRatingBarChangeListener = array of Arr2InnerOnRatingBarChangeListener;
      InnerOnRatingBarChangeListener = interface external 'android.widget' name 'OnRatingBarChangeListener' 
        procedure onRatingChanged(para1: AWRatingBar; para2: jfloat; para3: jboolean); overload;
      end;

  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
    procedure setOnRatingBarChangeListener(para1: AWRatingBar.InnerOnRatingBarChangeListener); overload; virtual;
    function getOnRatingBarChangeListener(): AWRatingBar.InnerOnRatingBarChangeListener; overload; virtual;
    procedure setIsIndicator(para1: jboolean); overload; virtual;
    function isIndicator(): jboolean; overload; virtual;
    procedure setNumStars(para1: jint); overload; virtual;
    function getNumStars(): jint; overload; virtual;
    procedure setRating(para1: jfloat); overload; virtual;
    function getRating(): jfloat; overload; virtual;
    procedure setStepSize(para1: jfloat); overload; virtual;
    function getStepSize(): jfloat; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    procedure setMax(para1: jint); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWSeekBar = class external 'android.widget' name 'SeekBar' (AWAbsSeekBar)
  public
    type
      InnerOnSeekBarChangeListener = interface;
      Arr1InnerOnSeekBarChangeListener = array of InnerOnSeekBarChangeListener;
      Arr2InnerOnSeekBarChangeListener = array of Arr1InnerOnSeekBarChangeListener;
      Arr3InnerOnSeekBarChangeListener = array of Arr2InnerOnSeekBarChangeListener;
      InnerOnSeekBarChangeListener = interface external 'android.widget' name 'OnSeekBarChangeListener' 
        procedure onProgressChanged(para1: AWSeekBar; para2: jint; para3: jboolean); overload;
        procedure onStartTrackingTouch(para1: AWSeekBar); overload;
        procedure onStopTrackingTouch(para1: AWSeekBar); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setOnSeekBarChangeListener(para1: AWSeekBar.InnerOnSeekBarChangeListener); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWCompoundButton = class abstract external 'android.widget' name 'CompoundButton' (AWButton, AWCheckable)
  public
    type
      InnerOnCheckedChangeListener = interface;
      Arr1InnerOnCheckedChangeListener = array of InnerOnCheckedChangeListener;
      Arr2InnerOnCheckedChangeListener = array of Arr1InnerOnCheckedChangeListener;
      Arr3InnerOnCheckedChangeListener = array of Arr2InnerOnCheckedChangeListener;
      InnerOnCheckedChangeListener = interface external 'android.widget' name 'OnCheckedChangeListener' 
        procedure onCheckedChanged(para1: AWCompoundButton; para2: jboolean); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure toggle(); overload; virtual;
    function performClick(): jboolean; overload; virtual;
    function isChecked(): jboolean; overload; virtual;
    procedure setChecked(para1: jboolean); overload; virtual;
    procedure setOnCheckedChangeListener(para1: AWCompoundButton.InnerOnCheckedChangeListener); overload; virtual;
    procedure setButtonDrawable(para1: jint); overload; virtual;
    procedure setButtonDrawable(para1: AGDDrawable); overload; virtual;
    procedure setButtonTintList(para1: ACRColorStateList); overload; virtual;
    function getButtonTintList(): ACRColorStateList; overload; virtual;
    procedure setButtonTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function getButtonTintMode(): AGPorterDuff.InnerMode; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function getCompoundPaddingLeft(): jint; overload; virtual;
    function getCompoundPaddingRight(): jint; overload; virtual;
  strict protected
    procedure onDraw(para1: AGCanvas); overload; virtual;
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
  strict protected
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  end;

  AIExtractEditText = class external 'android.inputmethodservice' name 'ExtractEditText' (AWEditText)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure startInternalChanges(); overload; virtual;
    procedure finishInternalChanges(); overload; virtual;
    procedure setExtractedText(para1: AVIExtractedText); overload; virtual;
  strict protected
    procedure onSelectionChanged(para1: jint; para2: jint); overload; virtual;
  public
    function performClick(): jboolean; overload; virtual;
    function onTextContextMenuItem(para1: jint): jboolean; overload; virtual;
    function isInputMethodTarget(): jboolean; overload; virtual;
    function hasVerticalScrollBar(): jboolean; overload; virtual;
    function hasWindowFocus(): jboolean; overload; virtual;
    function isFocused(): jboolean; overload; virtual;
    function hasFocus(): jboolean; overload; virtual;
  end;

  AWAutoCompleteTextView = class external 'android.widget' name 'AutoCompleteTextView' (AWEditText, AWFilter.InnerFilterListener)
  public
    type
      InnerOnDismissListener = interface;
      Arr1InnerOnDismissListener = array of InnerOnDismissListener;
      Arr2InnerOnDismissListener = array of Arr1InnerOnDismissListener;
      Arr3InnerOnDismissListener = array of Arr2InnerOnDismissListener;
      InnerValidator = interface;
      Arr1InnerValidator = array of InnerValidator;
      Arr2InnerValidator = array of Arr1InnerValidator;
      Arr3InnerValidator = array of Arr2InnerValidator;
      InnerOnDismissListener = interface external 'android.widget' name 'OnDismissListener' 
        procedure onDismiss(); overload;
      end;

      InnerValidator = interface external 'android.widget' name 'Validator' 
        function isValid(para1: JLCharSequence): jboolean; overload;
        function fixText(para1: JLCharSequence): JLCharSequence; overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setOnClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
    procedure setCompletionHint(para1: JLCharSequence); overload; virtual;
    function getCompletionHint(): JLCharSequence; overload; virtual;
    function getDropDownWidth(): jint; overload; virtual;
    procedure setDropDownWidth(para1: jint); overload; virtual;
    function getDropDownHeight(): jint; overload; virtual;
    procedure setDropDownHeight(para1: jint); overload; virtual;
    function getDropDownAnchor(): jint; overload; virtual;
    procedure setDropDownAnchor(para1: jint); overload; virtual;
    function getDropDownBackground(): AGDDrawable; overload; virtual;
    procedure setDropDownBackgroundDrawable(para1: AGDDrawable); overload; virtual;
    procedure setDropDownBackgroundResource(para1: jint); overload; virtual;
    procedure setDropDownVerticalOffset(para1: jint); overload; virtual;
    function getDropDownVerticalOffset(): jint; overload; virtual;
    procedure setDropDownHorizontalOffset(para1: jint); overload; virtual;
    function getDropDownHorizontalOffset(): jint; overload; virtual;
    function getThreshold(): jint; overload; virtual;
    procedure setThreshold(para1: jint); overload; virtual;
    procedure setOnItemClickListener(para1: AWAdapterView.InnerOnItemClickListener); overload; virtual;
    procedure setOnItemSelectedListener(para1: AWAdapterView.InnerOnItemSelectedListener); overload; virtual;
    function getItemClickListener(): AWAdapterView.InnerOnItemClickListener; overload; virtual;
    function getItemSelectedListener(): AWAdapterView.InnerOnItemSelectedListener; overload; virtual;
    function getOnItemClickListener(): AWAdapterView.InnerOnItemClickListener; overload; virtual;
    function getOnItemSelectedListener(): AWAdapterView.InnerOnItemSelectedListener; overload; virtual;
    procedure setOnDismissListener(para1: AWAutoCompleteTextView.InnerOnDismissListener); overload; virtual;
    function getAdapter(): AWListAdapter; overload; virtual;
    procedure setAdapter(para1: AWListAdapter); overload; virtual;
    function onKeyPreIme(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function enoughToFilter(): jboolean; overload; virtual;
    function isPopupShowing(): jboolean; overload; virtual;
  strict protected
    function convertSelectionToString(para1: JLObject): JLCharSequence; overload; virtual;
  public
    procedure clearListSelection(); overload; virtual;
    procedure setListSelection(para1: jint); overload; virtual;
    function getListSelection(): jint; overload; virtual;
  strict protected
    procedure performFiltering(para1: JLCharSequence; para2: jint); overload; virtual;
  public
    procedure performCompletion(); overload; virtual;
    procedure onCommitCompletion(para1: AVICompletionInfo); overload; virtual;
    function isPerformingCompletion(): jboolean; overload; virtual;
    procedure setText(para1: JLCharSequence; para2: jboolean); overload; virtual;
  strict protected
    procedure replaceText(para1: JLCharSequence); overload; virtual;
  public
    procedure onFilterComplete(para1: jint); overload; virtual;
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
  strict protected
    procedure onDisplayHint(para1: jint); overload; virtual;
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    procedure dismissDropDown(); overload; virtual;
  strict protected
    function setFrame(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
  public
    procedure showDropDown(); overload; virtual;
    procedure setValidator(para1: AWAutoCompleteTextView.InnerValidator); overload; virtual;
    function getValidator(): AWAutoCompleteTextView.InnerValidator; overload; virtual;
    procedure performValidation(); overload; virtual;
  strict protected
    function getFilter(): AWFilter; overload; virtual;
  end;

  AAProgressDialog = class external 'android.app' name 'ProgressDialog' (AAAlertDialog)
  public
    const
      STYLE_HORIZONTAL = 1;
      STYLE_SPINNER = 0;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: jint); overload;
    class function show(para1: ACContext; para2: JLCharSequence; para3: JLCharSequence): AAProgressDialog; static; overload;
    class function show(para1: ACContext; para2: JLCharSequence; para3: JLCharSequence; para4: jboolean): AAProgressDialog; static; overload;
    class function show(para1: ACContext; para2: JLCharSequence; para3: JLCharSequence; para4: jboolean; para5: jboolean): AAProgressDialog; static; overload;
    class function show(para1: ACContext; para2: JLCharSequence; para3: JLCharSequence; para4: jboolean; para5: jboolean; para6: ACDialogInterface.InnerOnCancelListener): AAProgressDialog; static; overload;
  strict protected
    procedure onCreate(para1: AOBundle); overload; virtual;
  public
    procedure onStart(); overload; virtual;
  strict protected
    procedure onStop(); overload; virtual;
  public
    procedure setProgress(para1: jint); overload; virtual;
    procedure setSecondaryProgress(para1: jint); overload; virtual;
    function getProgress(): jint; overload; virtual;
    function getSecondaryProgress(): jint; overload; virtual;
    function getMax(): jint; overload; virtual;
    procedure setMax(para1: jint); overload; virtual;
    procedure incrementProgressBy(para1: jint); overload; virtual;
    procedure incrementSecondaryProgressBy(para1: jint); overload; virtual;
    procedure setProgressDrawable(para1: AGDDrawable); overload; virtual;
    procedure setIndeterminateDrawable(para1: AGDDrawable); overload; virtual;
    procedure setIndeterminate(para1: jboolean); overload; virtual;
    function isIndeterminate(): jboolean; overload; virtual;
    procedure setMessage(para1: JLCharSequence); overload; virtual;
    procedure setProgressStyle(para1: jint); overload; virtual;
    procedure setProgressNumberFormat(para1: JLString); overload; virtual;
    procedure setProgressPercentFormat(para1: JTNumberFormat); overload; virtual;
  end;

  APDialogPreference = class abstract external 'android.preference' name 'DialogPreference' (APPreference, ACDialogInterface.InnerOnClickListener, ACDialogInterface.InnerOnDismissListener, APPreferenceManager.InnerOnActivityDestroyListener)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
    procedure setDialogTitle(para1: JLCharSequence); overload; virtual;
    procedure setDialogTitle(para1: jint); overload; virtual;
    function getDialogTitle(): JLCharSequence; overload; virtual;
    procedure setDialogMessage(para1: JLCharSequence); overload; virtual;
    procedure setDialogMessage(para1: jint); overload; virtual;
    function getDialogMessage(): JLCharSequence; overload; virtual;
    procedure setDialogIcon(para1: AGDDrawable); overload; virtual;
    procedure setDialogIcon(para1: jint); overload; virtual;
    function getDialogIcon(): AGDDrawable; overload; virtual;
    procedure setPositiveButtonText(para1: JLCharSequence); overload; virtual;
    procedure setPositiveButtonText(para1: jint); overload; virtual;
    function getPositiveButtonText(): JLCharSequence; overload; virtual;
    procedure setNegativeButtonText(para1: JLCharSequence); overload; virtual;
    procedure setNegativeButtonText(para1: jint); overload; virtual;
    function getNegativeButtonText(): JLCharSequence; overload; virtual;
    procedure setDialogLayoutResource(para1: jint); overload; virtual;
    function getDialogLayoutResource(): jint; overload; virtual;
  strict protected
    procedure onPrepareDialogBuilder(para1: AAAlertDialog.InnerBuilder); overload; virtual;
    procedure onClick(); overload; virtual;
    procedure showDialog(para1: AOBundle); overload; virtual;
    function onCreateDialogView(): AVView; overload; virtual;
    procedure onBindDialogView(para1: AVView); overload; virtual;
  public
    procedure onClick(para1: ACDialogInterface; para2: jint); overload; virtual;
    procedure onDismiss(para1: ACDialogInterface); overload; virtual;
  strict protected
    procedure onDialogClosed(para1: jboolean); overload; virtual;
  public
    function getDialog(): AADialog; overload; virtual;
    procedure onActivityDestroy(); overload; virtual;
  strict protected
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  end;

  AWGridView = class external 'android.widget' name 'GridView' (AWAbsListView)
  public
    const
      AUTO_FIT = -1;
      NO_STRETCH = 0;
      STRETCH_COLUMN_WIDTH = 2;
      STRETCH_SPACING = 1;
      STRETCH_SPACING_UNIFORM = 3;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getAdapter(): AWListAdapter; overload; virtual;
    procedure setRemoteViewsAdapter(para1: ACIntent); overload; virtual;
    procedure setAdapter(para1: AWListAdapter); overload; virtual;
    procedure smoothScrollToPosition(para1: jint); overload; virtual;
    procedure smoothScrollByOffset(para1: jint); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure attachLayoutAnimationParameters(para1: AVView; para2: AVViewGroup_LayoutParams; para3: jint; para4: jint); overload; virtual;
    procedure layoutChildren(); overload; virtual;
  public
    procedure setSelection(para1: jint); overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
  strict protected
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
  public
    procedure setGravity(para1: jint); overload; virtual;
    function getGravity(): jint; overload; virtual;
    procedure setHorizontalSpacing(para1: jint); overload; virtual;
    function getHorizontalSpacing(): jint; overload; virtual;
    function getRequestedHorizontalSpacing(): jint; overload; virtual;
    procedure setVerticalSpacing(para1: jint); overload; virtual;
    function getVerticalSpacing(): jint; overload; virtual;
    procedure setStretchMode(para1: jint); overload; virtual;
    function getStretchMode(): jint; overload; virtual;
    procedure setColumnWidth(para1: jint); overload; virtual;
    function getColumnWidth(): jint; overload; virtual;
    function getRequestedColumnWidth(): jint; overload; virtual;
    procedure setNumColumns(para1: jint); overload; virtual;
    function getNumColumns(): jint; overload; virtual;
  strict protected
    function computeVerticalScrollExtent(): jint; overload; virtual;
    function computeVerticalScrollOffset(): jint; overload; virtual;
    function computeVerticalScrollRange(): jint; overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure onInitializeAccessibilityNodeInfoForItem(para1: AVView; para2: jint; para3: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setAdapter(para1: AWAdapter); overload; virtual;
    function getAdapter(): AWAdapter; overload; virtual;
  end;

  AWListView = class external 'android.widget' name 'ListView' (AWAbsListView)
  public
    type
      InnerFixedViewInfo = class;
      Arr1InnerFixedViewInfo = array of InnerFixedViewInfo;
      Arr2InnerFixedViewInfo = array of Arr1InnerFixedViewInfo;
      Arr3InnerFixedViewInfo = array of Arr2InnerFixedViewInfo;
      InnerFixedViewInfo = class external 'android.widget' name 'FixedViewInfo' 
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getMaxScrollAmount(): jint; overload; virtual;
    procedure addHeaderView(para1: AVView; para2: JLObject; para3: jboolean); overload; virtual;
    procedure addHeaderView(para1: AVView); overload; virtual;
    function getHeaderViewsCount(): jint; overload; virtual;
    function removeHeaderView(para1: AVView): jboolean; overload; virtual;
    procedure addFooterView(para1: AVView; para2: JLObject; para3: jboolean); overload; virtual;
    procedure addFooterView(para1: AVView); overload; virtual;
    function getFooterViewsCount(): jint; overload; virtual;
    function removeFooterView(para1: AVView): jboolean; overload; virtual;
    function getAdapter(): AWListAdapter; overload; virtual;
    procedure setRemoteViewsAdapter(para1: ACIntent); overload; virtual;
    procedure setAdapter(para1: AWListAdapter); overload; virtual;
    function requestChildRectangleOnScreen(para1: AVView; para2: AGRect; para3: jboolean): jboolean; overload; virtual;
    procedure smoothScrollToPosition(para1: jint); overload; virtual;
    procedure smoothScrollByOffset(para1: jint); overload; virtual;
  strict protected
    procedure onSizeChanged(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure layoutChildren(); overload; virtual;
    function canAnimate(): jboolean; overload; virtual;
  public
    procedure setSelection(para1: jint); overload; virtual;
    procedure setSelectionAfterHeaderView(); overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    procedure setItemsCanFocus(para1: jboolean); overload; virtual;
    function getItemsCanFocus(): jboolean; overload; virtual;
    function isOpaque(): jboolean; overload; virtual;
    procedure setCacheColorHint(para1: jint); overload; virtual;
  strict protected
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
    function drawChild(para1: AGCanvas; para2: AVView; para3: jlong): jboolean; overload; virtual;
  public
    function getDivider(): AGDDrawable; overload; virtual;
    procedure setDivider(para1: AGDDrawable); overload; virtual;
    function getDividerHeight(): jint; overload; virtual;
    procedure setDividerHeight(para1: jint); overload; virtual;
    procedure setHeaderDividersEnabled(para1: jboolean); overload; virtual;
    function areHeaderDividersEnabled(): jboolean; overload; virtual;
    procedure setFooterDividersEnabled(para1: jboolean); overload; virtual;
    function areFooterDividersEnabled(): jboolean; overload; virtual;
    procedure setOverscrollHeader(para1: AGDDrawable); overload; virtual;
    function getOverscrollHeader(): AGDDrawable; overload; virtual;
    procedure setOverscrollFooter(para1: AGDDrawable); overload; virtual;
    function getOverscrollFooter(): AGDDrawable; overload; virtual;
  strict protected
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
    procedure onFinishInflate(); overload; virtual;
    function findViewTraversal(para1: jint): AVView; overload; virtual;
    function findViewWithTagTraversal(para1: JLObject): AVView; overload; virtual;
  public
    function getCheckItemIds(): Arr1jlong; overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure onInitializeAccessibilityNodeInfoForItem(para1: AVView; para2: jint; para3: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setAdapter(para1: AWAdapter); overload; virtual;
    function getAdapter(): AWAdapter; overload; virtual;
  end;

  AWGallery = class external 'android.widget' name 'Gallery' (AWAbsSpinner, AVGestureDetector.InnerOnGestureListener)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AVViewGroup_LayoutParams)
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setCallbackDuringFling(para1: jboolean); overload; virtual;
    procedure setAnimationDuration(para1: jint); overload; virtual;
    procedure setSpacing(para1: jint); overload; virtual;
    procedure setUnselectedAlpha(para1: jfloat); overload; virtual;
  strict protected
    function getChildStaticTransformation(para1: AVView; para2: AVATransformation): jboolean; overload; virtual;
    function computeHorizontalScrollExtent(): jint; overload; virtual;
    function computeHorizontalScrollOffset(): jint; overload; virtual;
    function computeHorizontalScrollRange(): jint; overload; virtual;
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onSingleTapUp(para1: AVMotionEvent): jboolean; overload; virtual;
    function onFling(para1: AVMotionEvent; para2: AVMotionEvent; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function onScroll(para1: AVMotionEvent; para2: AVMotionEvent; para3: jfloat; para4: jfloat): jboolean; overload; virtual;
    function onDown(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure onLongPress(para1: AVMotionEvent); overload; virtual;
    procedure onShowPress(para1: AVMotionEvent); overload; virtual;
    procedure dispatchSetSelected(para1: jboolean); overload; virtual;
  strict protected
    procedure dispatchSetPressed(para1: jboolean); overload; virtual;
    function getContextMenuInfo(): AVContextMenu.InnerContextMenuInfo; overload; virtual;
  public
    function showContextMenuForChild(para1: AVView): jboolean; overload; virtual;
    function showContextMenu(): jboolean; overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    procedure setGravity(para1: jint); overload; virtual;
  strict protected
    function getChildDrawingOrder(para1: jint; para2: jint): jint; overload; virtual;
    procedure onFocusChanged(para1: jboolean; para2: jint; para3: AGRect); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
  end;

  AWSpinner = class external 'android.widget' name 'Spinner' (AWAbsSpinner, ACDialogInterface.InnerOnClickListener)
  public
    const
      MODE_DIALOG = 0;
      MODE_DROPDOWN = 1;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint; para5: jint); overload;
    procedure setPopupBackgroundDrawable(para1: AGDDrawable); overload; virtual;
    procedure setPopupBackgroundResource(para1: jint); overload; virtual;
    function getPopupBackground(): AGDDrawable; overload; virtual;
    procedure setDropDownVerticalOffset(para1: jint); overload; virtual;
    function getDropDownVerticalOffset(): jint; overload; virtual;
    procedure setDropDownHorizontalOffset(para1: jint); overload; virtual;
    function getDropDownHorizontalOffset(): jint; overload; virtual;
    procedure setDropDownWidth(para1: jint); overload; virtual;
    function getDropDownWidth(): jint; overload; virtual;
    procedure setEnabled(para1: jboolean); overload; virtual;
    procedure setGravity(para1: jint); overload; virtual;
    function getGravity(): jint; overload; virtual;
    procedure setAdapter(para1: AWSpinnerAdapter); overload; virtual;
    function getBaseline(): jint; overload; virtual;
  strict protected
    procedure onDetachedFromWindow(); overload; virtual;
  public
    procedure setOnItemClickListener(para1: AWAdapterView.InnerOnItemClickListener); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function performClick(): jboolean; overload; virtual;
    procedure onClick(para1: ACDialogInterface; para2: jint); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setPrompt(para1: JLCharSequence); overload; virtual;
    procedure setPromptId(para1: jint); overload; virtual;
    function getPrompt(): JLCharSequence; overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    procedure setAdapter(para1: AWAdapter); overload; virtual;
  end;

  AWAdapterViewFlipper = class external 'android.widget' name 'AdapterViewFlipper' (AWAdapterViewAnimator)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onWindowVisibilityChanged(para1: jint); overload; virtual;
  public
    procedure setAdapter(para1: AWAdapter); overload; virtual;
    function getFlipInterval(): jint; overload; virtual;
    procedure setFlipInterval(para1: jint); overload; virtual;
    procedure startFlipping(); overload; virtual;
    procedure stopFlipping(); overload; virtual;
    procedure showNext(); overload; virtual;
    procedure showPrevious(); overload; virtual;
    function isFlipping(): jboolean; overload; virtual;
    procedure setAutoStart(para1: jboolean); overload; virtual;
    function isAutoStart(): jboolean; overload; virtual;
    procedure fyiWillBeAdvancedByHostKThx(); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWStackView = class external 'android.widget' name 'StackView' (AWAdapterViewAnimator)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure showNext(); overload; virtual;
    procedure showPrevious(); overload; virtual;
  strict protected
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
  public
    function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onInterceptTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    procedure advance(); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function performAccessibilityAction(para1: jint; para2: AOBundle): jboolean; overload; virtual;
  end;

  AADatePickerDialog = class external 'android.app' name 'DatePickerDialog' (AAAlertDialog, ACDialogInterface.InnerOnClickListener, AWDatePicker.InnerOnDateChangedListener)
  public
    type
      InnerOnDateSetListener = interface;
      Arr1InnerOnDateSetListener = array of InnerOnDateSetListener;
      Arr2InnerOnDateSetListener = array of Arr1InnerOnDateSetListener;
      Arr3InnerOnDateSetListener = array of Arr2InnerOnDateSetListener;
      InnerOnDateSetListener = interface external 'android.app' name 'OnDateSetListener' 
        procedure onDateSet(para1: AWDatePicker; para2: jint; para3: jint; para4: jint); overload;
      end;

  public
    constructor create(para1: ACContext; para2: AADatePickerDialog.InnerOnDateSetListener; para3: jint; para4: jint; para5: jint); overload;
    constructor create(para1: ACContext; para2: jint; para3: AADatePickerDialog.InnerOnDateSetListener; para4: jint; para5: jint; para6: jint); overload;
    procedure onDateChanged(para1: AWDatePicker; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure onClick(para1: ACDialogInterface; para2: jint); overload; virtual;
    function getDatePicker(): AWDatePicker; overload; virtual;
    procedure updateDate(para1: jint; para2: jint; para3: jint); overload; virtual;
    function onSaveInstanceState(): AOBundle; overload; virtual;
    procedure onRestoreInstanceState(para1: AOBundle); overload; virtual;
  end;

  AWVideoView = class external 'android.widget' name 'VideoView' (AVSurfaceView, AWMediaController.InnerMediaPlayerControl)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function resolveAdjustedSize(para1: jint; para2: jint): jint; overload; virtual;
    procedure setVideoPath(para1: JLString); overload; virtual;
    procedure setVideoURI(para1: ANUri); overload; virtual;
    procedure setVideoURI(para1: ANUri; para2: JUMap); overload; virtual;
    procedure addSubtitleSource(para1: JIInputStream; para2: AMMediaFormat); overload; virtual;
    procedure stopPlayback(); overload; virtual;
    procedure setMediaController(para1: AWMediaController); overload; virtual;
    procedure setOnPreparedListener(para1: AMMediaPlayer.InnerOnPreparedListener); overload; virtual;
    procedure setOnCompletionListener(para1: AMMediaPlayer.InnerOnCompletionListener); overload; virtual;
    procedure setOnErrorListener(para1: AMMediaPlayer.InnerOnErrorListener); overload; virtual;
    procedure setOnInfoListener(para1: AMMediaPlayer.InnerOnInfoListener); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    procedure start(); overload; virtual;
    procedure pause(); overload; virtual;
    procedure suspend(); overload; virtual;
    procedure resume(); overload; virtual;
    function getDuration(): jint; overload; virtual;
    function getCurrentPosition(): jint; overload; virtual;
    procedure seekTo(para1: jint); overload; virtual;
    function isPlaying(): jboolean; overload; virtual;
    function getBufferPercentage(): jint; overload; virtual;
    function canPause(): jboolean; overload; virtual;
    function canSeekBackward(): jboolean; overload; virtual;
    function canSeekForward(): jboolean; overload; virtual;
    function getAudioSessionId(): jint; overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    procedure draw(para1: AGCanvas); overload; virtual;
  end;

  AATimePickerDialog = class external 'android.app' name 'TimePickerDialog' (AAAlertDialog, ACDialogInterface.InnerOnClickListener, AWTimePicker.InnerOnTimeChangedListener)
  public
    type
      InnerOnTimeSetListener = interface;
      Arr1InnerOnTimeSetListener = array of InnerOnTimeSetListener;
      Arr2InnerOnTimeSetListener = array of Arr1InnerOnTimeSetListener;
      Arr3InnerOnTimeSetListener = array of Arr2InnerOnTimeSetListener;
      InnerOnTimeSetListener = interface external 'android.app' name 'OnTimeSetListener' 
        procedure onTimeSet(para1: AWTimePicker; para2: jint; para3: jint); overload;
      end;

  public
    constructor create(para1: ACContext; para2: AATimePickerDialog.InnerOnTimeSetListener; para3: jint; para4: jint; para5: jboolean); overload;
    constructor create(para1: ACContext; para2: jint; para3: AATimePickerDialog.InnerOnTimeSetListener; para4: jint; para5: jint; para6: jboolean); overload;
    procedure onTimeChanged(para1: AWTimePicker; para2: jint; para3: jint); overload; virtual;
    procedure onClick(para1: ACDialogInterface; para2: jint); overload; virtual;
    procedure updateTime(para1: jint; para2: jint); overload; virtual;
    function onSaveInstanceState(): AOBundle; overload; virtual;
    procedure onRestoreInstanceState(para1: AOBundle); overload; virtual;
  end;

  AWViewFlipper = class external 'android.widget' name 'ViewFlipper' (AWViewAnimator)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onWindowVisibilityChanged(para1: jint); overload; virtual;
  public
    procedure setFlipInterval(para1: jint); overload; virtual;
    procedure startFlipping(); overload; virtual;
    procedure stopFlipping(); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function isFlipping(): jboolean; overload; virtual;
    procedure setAutoStart(para1: jboolean); overload; virtual;
    function isAutoStart(): jboolean; overload; virtual;
  end;

  AWViewSwitcher = class external 'android.widget' name 'ViewSwitcher' (AWViewAnimator)
  public
    type
      InnerViewFactory = interface;
      Arr1InnerViewFactory = array of InnerViewFactory;
      Arr2InnerViewFactory = array of Arr1InnerViewFactory;
      Arr3InnerViewFactory = array of Arr2InnerViewFactory;
      InnerViewFactory = interface external 'android.widget' name 'ViewFactory' 
        function makeView(): AVView; overload;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    function getNextView(): AVView; overload; virtual;
    procedure setFactory(para1: AWViewSwitcher.InnerViewFactory); overload; virtual;
    procedure reset(); overload; virtual;
  end;

  AWCheckBox = class external 'android.widget' name 'CheckBox' (AWCompoundButton)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWRadioButton = class external 'android.widget' name 'RadioButton' (AWCompoundButton)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure toggle(); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWSwitch = class external 'android.widget' name 'Switch' (AWCompoundButton)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setSwitchTextAppearance(para1: ACContext; para2: jint); overload; virtual;
    procedure setSwitchTypeface(para1: AGTypeface; para2: jint); overload; virtual;
    procedure setSwitchTypeface(para1: AGTypeface); overload; virtual;
    procedure setSwitchPadding(para1: jint); overload; virtual;
    function getSwitchPadding(): jint; overload; virtual;
    procedure setSwitchMinWidth(para1: jint); overload; virtual;
    function getSwitchMinWidth(): jint; overload; virtual;
    procedure setThumbTextPadding(para1: jint); overload; virtual;
    function getThumbTextPadding(): jint; overload; virtual;
    procedure setTrackDrawable(para1: AGDDrawable); overload; virtual;
    procedure setTrackResource(para1: jint); overload; virtual;
    function getTrackDrawable(): AGDDrawable; overload; virtual;
    procedure setThumbDrawable(para1: AGDDrawable); overload; virtual;
    procedure setThumbResource(para1: jint); overload; virtual;
    function getThumbDrawable(): AGDDrawable; overload; virtual;
    procedure setSplitTrack(para1: jboolean); overload; virtual;
    function getSplitTrack(): jboolean; overload; virtual;
    function getTextOn(): JLCharSequence; overload; virtual;
    procedure setTextOn(para1: JLCharSequence); overload; virtual;
    function getTextOff(): JLCharSequence; overload; virtual;
    procedure setTextOff(para1: JLCharSequence); overload; virtual;
    procedure setShowText(para1: jboolean); overload; virtual;
    function getShowText(): jboolean; overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onPopulateAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure toggle(); overload; virtual;
    procedure setChecked(para1: jboolean); overload; virtual;
  strict protected
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    procedure draw(para1: AGCanvas); overload; virtual;
  strict protected
    procedure onDraw(para1: AGCanvas); overload; virtual;
  public
    function getCompoundPaddingLeft(): jint; overload; virtual;
    function getCompoundPaddingRight(): jint; overload; virtual;
  strict protected
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure drawableHotspotChanged(para1: jfloat; para2: jfloat); overload; virtual;
  strict protected
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWToggleButton = class external 'android.widget' name 'ToggleButton' (AWCompoundButton)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
    procedure setChecked(para1: jboolean); overload; virtual;
    function getTextOn(): JLCharSequence; overload; virtual;
    procedure setTextOn(para1: JLCharSequence); overload; virtual;
    function getTextOff(): JLCharSequence; overload; virtual;
    procedure setTextOff(para1: JLCharSequence); overload; virtual;
  strict protected
    procedure onFinishInflate(); overload; virtual;
  public
    procedure setBackgroundDrawable(para1: AGDDrawable); overload; virtual;
  strict protected
    procedure drawableStateChanged(); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWMultiAutoCompleteTextView = class external 'android.widget' name 'MultiAutoCompleteTextView' (AWAutoCompleteTextView)
  public
    type
      InnerTokenizer = interface;
      Arr1InnerTokenizer = array of InnerTokenizer;
      Arr2InnerTokenizer = array of Arr1InnerTokenizer;
      Arr3InnerTokenizer = array of Arr2InnerTokenizer;
      InnerCommaTokenizer = class;
      Arr1InnerCommaTokenizer = array of InnerCommaTokenizer;
      Arr2InnerCommaTokenizer = array of Arr1InnerCommaTokenizer;
      Arr3InnerCommaTokenizer = array of Arr2InnerCommaTokenizer;
      InnerTokenizer = interface external 'android.widget' name 'Tokenizer' 
        function findTokenStart(para1: JLCharSequence; para2: jint): jint; overload;
        function findTokenEnd(para1: JLCharSequence; para2: jint): jint; overload;
        function terminateToken(para1: JLCharSequence): JLCharSequence; overload;
      end;

      InnerCommaTokenizer = class external 'android.widget' name 'CommaTokenizer' (JLObject, AWMultiAutoCompleteTextView.InnerTokenizer)
      public
        constructor create(); overload;
        function findTokenStart(para1: JLCharSequence; para2: jint): jint; overload; virtual;
        function findTokenEnd(para1: JLCharSequence; para2: jint): jint; overload; virtual;
        function terminateToken(para1: JLCharSequence): JLCharSequence; overload; virtual;
      end;

  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setTokenizer(para1: AWMultiAutoCompleteTextView.InnerTokenizer); overload; virtual;
  strict protected
    procedure performFiltering(para1: JLCharSequence; para2: jint); overload; virtual;
  public
    function enoughToFilter(): jboolean; overload; virtual;
    procedure performValidation(); overload; virtual;
  strict protected
    procedure performFiltering(para1: JLCharSequence; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure replaceText(para1: JLCharSequence); overload; virtual;
  public
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  APEditTextPreference = class external 'android.preference' name 'EditTextPreference' (APDialogPreference)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
    procedure setText(para1: JLString); overload; virtual;
    function getText(): JLString; overload; virtual;
  strict protected
    procedure onBindDialogView(para1: AVView); overload; virtual;
    procedure onAddEditTextToDialogView(para1: AVView; para2: AWEditText); overload; virtual;
    procedure onDialogClosed(para1: jboolean); overload; virtual;
    function onGetDefaultValue(para1: ACRTypedArray; para2: jint): JLObject; overload; virtual;
    procedure onSetInitialValue(para1: jboolean; para2: JLObject); overload; virtual;
  public
    function shouldDisableDependents(): jboolean; overload; virtual;
    function getEditText(): AWEditText; overload; virtual;
  strict protected
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  end;

  APListPreference = class external 'android.preference' name 'ListPreference' (APDialogPreference)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
    procedure setEntries(para1: Arr1JLCharSequence); overload; virtual;
    procedure setEntries(var para1: array of JLCharSequence); overload; virtual;
    procedure setEntries(para1: jint); overload; virtual;
    function getEntries(): Arr1JLCharSequence; overload; virtual;
    procedure setEntryValues(para1: Arr1JLCharSequence); overload; virtual;
    procedure setEntryValues(var para1: array of JLCharSequence); overload; virtual;
    procedure setEntryValues(para1: jint); overload; virtual;
    function getEntryValues(): Arr1JLCharSequence; overload; virtual;
    procedure setValue(para1: JLString); overload; virtual;
    function getSummary(): JLCharSequence; overload; virtual;
    procedure setSummary(para1: JLCharSequence); overload; virtual;
    procedure setValueIndex(para1: jint); overload; virtual;
    function getValue(): JLString; overload; virtual;
    function getEntry(): JLCharSequence; overload; virtual;
    function findIndexOfValue(para1: JLString): jint; overload; virtual;
  strict protected
    procedure onPrepareDialogBuilder(para1: AAAlertDialog.InnerBuilder); overload; virtual;
    procedure onDialogClosed(para1: jboolean); overload; virtual;
    function onGetDefaultValue(para1: ACRTypedArray; para2: jint): JLObject; overload; virtual;
    procedure onSetInitialValue(para1: jboolean; para2: JLObject); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
  end;

  APMultiSelectListPreference = class external 'android.preference' name 'MultiSelectListPreference' (APDialogPreference)
  public
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext); overload;
    procedure setEntries(para1: Arr1JLCharSequence); overload; virtual;
    procedure setEntries(var para1: array of JLCharSequence); overload; virtual;
    procedure setEntries(para1: jint); overload; virtual;
    function getEntries(): Arr1JLCharSequence; overload; virtual;
    procedure setEntryValues(para1: Arr1JLCharSequence); overload; virtual;
    procedure setEntryValues(var para1: array of JLCharSequence); overload; virtual;
    procedure setEntryValues(para1: jint); overload; virtual;
    function getEntryValues(): Arr1JLCharSequence; overload; virtual;
    procedure setValues(para1: JUSet); overload; virtual;
    function getValues(): JUSet; overload; virtual;
    function findIndexOfValue(para1: JLString): jint; overload; virtual;
  strict protected
    procedure onPrepareDialogBuilder(para1: AAAlertDialog.InnerBuilder); overload; virtual;
    procedure onDialogClosed(para1: jboolean); overload; virtual;
    function onGetDefaultValue(para1: ACRTypedArray; para2: jint): JLObject; overload; virtual;
    procedure onSetInitialValue(para1: jboolean; para2: JLObject); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
  end;

  AWExpandableListView = class external 'android.widget' name 'ExpandableListView' (AWListView)
  public
    type
      InnerOnChildClickListener = interface;
      Arr1InnerOnChildClickListener = array of InnerOnChildClickListener;
      Arr2InnerOnChildClickListener = array of Arr1InnerOnChildClickListener;
      Arr3InnerOnChildClickListener = array of Arr2InnerOnChildClickListener;
      InnerOnGroupClickListener = interface;
      Arr1InnerOnGroupClickListener = array of InnerOnGroupClickListener;
      Arr2InnerOnGroupClickListener = array of Arr1InnerOnGroupClickListener;
      Arr3InnerOnGroupClickListener = array of Arr2InnerOnGroupClickListener;
      InnerOnGroupExpandListener = interface;
      Arr1InnerOnGroupExpandListener = array of InnerOnGroupExpandListener;
      Arr2InnerOnGroupExpandListener = array of Arr1InnerOnGroupExpandListener;
      Arr3InnerOnGroupExpandListener = array of Arr2InnerOnGroupExpandListener;
      InnerOnGroupCollapseListener = interface;
      Arr1InnerOnGroupCollapseListener = array of InnerOnGroupCollapseListener;
      Arr2InnerOnGroupCollapseListener = array of Arr1InnerOnGroupCollapseListener;
      Arr3InnerOnGroupCollapseListener = array of Arr2InnerOnGroupCollapseListener;
      InnerExpandableListContextMenuInfo = class;
      Arr1InnerExpandableListContextMenuInfo = array of InnerExpandableListContextMenuInfo;
      Arr2InnerExpandableListContextMenuInfo = array of Arr1InnerExpandableListContextMenuInfo;
      Arr3InnerExpandableListContextMenuInfo = array of Arr2InnerExpandableListContextMenuInfo;
      InnerOnChildClickListener = interface external 'android.widget' name 'OnChildClickListener' 
        function onChildClick(para1: AWExpandableListView; para2: AVView; para3: jint; para4: jint; para5: jlong): jboolean; overload;
      end;

      InnerOnGroupClickListener = interface external 'android.widget' name 'OnGroupClickListener' 
        function onGroupClick(para1: AWExpandableListView; para2: AVView; para3: jint; para4: jlong): jboolean; overload;
      end;

      InnerOnGroupExpandListener = interface external 'android.widget' name 'OnGroupExpandListener' 
        procedure onGroupExpand(para1: jint); overload;
      end;

      InnerOnGroupCollapseListener = interface external 'android.widget' name 'OnGroupCollapseListener' 
        procedure onGroupCollapse(para1: jint); overload;
      end;

      InnerExpandableListContextMenuInfo = class external 'android.widget' name 'ExpandableListContextMenuInfo' (JLObject, AVContextMenu.InnerContextMenuInfo)
      public
        var
          fid: jlong; external name 'id';
          fpackedPosition: jlong; external name 'packedPosition';
          ftargetView: AVView; external name 'targetView';
      public
        constructor create(para1: AVView; para2: jlong; para3: jlong); overload;
      end;

  public
    const
      CHILD_INDICATOR_INHERIT = -1;
      PACKED_POSITION_TYPE_CHILD = 1;
      PACKED_POSITION_TYPE_GROUP = 0;
      PACKED_POSITION_TYPE_NULL = 2;
      PACKED_POSITION_VALUE_NULL = jlong(4294967295);
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure onRtlPropertiesChanged(para1: jint); overload; virtual;
  strict protected
    procedure dispatchDraw(para1: AGCanvas); overload; virtual;
  public
    procedure setChildDivider(para1: AGDDrawable); overload; virtual;
    procedure setAdapter(para1: AWListAdapter); overload; virtual;
    function getAdapter(): AWListAdapter; overload; virtual;
    procedure setOnItemClickListener(para1: AWAdapterView.InnerOnItemClickListener); overload; virtual;
    procedure setAdapter(para1: AWExpandableListAdapter); overload; virtual;
    function getExpandableListAdapter(): AWExpandableListAdapter; overload; virtual;
    function performItemClick(para1: AVView; para2: jint; para3: jlong): jboolean; overload; virtual;
    function expandGroup(para1: jint): jboolean; overload; virtual;
    function expandGroup(para1: jint; para2: jboolean): jboolean; overload; virtual;
    function collapseGroup(para1: jint): jboolean; overload; virtual;
    procedure setOnGroupCollapseListener(para1: AWExpandableListView.InnerOnGroupCollapseListener); overload; virtual;
    procedure setOnGroupExpandListener(para1: AWExpandableListView.InnerOnGroupExpandListener); overload; virtual;
    procedure setOnGroupClickListener(para1: AWExpandableListView.InnerOnGroupClickListener); overload; virtual;
    procedure setOnChildClickListener(para1: AWExpandableListView.InnerOnChildClickListener); overload; virtual;
    function getExpandableListPosition(para1: jint): jlong; overload; virtual;
    function getFlatListPosition(para1: jlong): jint; overload; virtual;
    function getSelectedPosition(): jlong; overload; virtual;
    function getSelectedId(): jlong; overload; virtual;
    procedure setSelectedGroup(para1: jint); overload; virtual;
    function setSelectedChild(para1: jint; para2: jint; para3: jboolean): jboolean; overload; virtual;
    function isGroupExpanded(para1: jint): jboolean; overload; virtual;
    class function getPackedPositionType(para1: jlong): jint; static; overload;
    class function getPackedPositionGroup(para1: jlong): jint; static; overload;
    class function getPackedPositionChild(para1: jlong): jint; static; overload;
    class function getPackedPositionForChild(para1: jint; para2: jint): jlong; static; overload;
    class function getPackedPositionForGroup(para1: jint): jlong; static; overload;
    procedure setChildIndicator(para1: AGDDrawable); overload; virtual;
    procedure setChildIndicatorBounds(para1: jint; para2: jint); overload; virtual;
    procedure setChildIndicatorBoundsRelative(para1: jint; para2: jint); overload; virtual;
    procedure setGroupIndicator(para1: AGDDrawable); overload; virtual;
    procedure setIndicatorBounds(para1: jint; para2: jint); overload; virtual;
    procedure setIndicatorBoundsRelative(para1: jint; para2: jint); overload; virtual;
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
    procedure setAdapter(para1: AWAdapter); overload; virtual;
    function getAdapter(): AWAdapter; overload; virtual;
  end;

  AWImageSwitcher = class external 'android.widget' name 'ImageSwitcher' (AWViewSwitcher)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setImageResource(para1: jint); overload; virtual;
    procedure setImageURI(para1: ANUri); overload; virtual;
    procedure setImageDrawable(para1: AGDDrawable); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  AWTextSwitcher = class external 'android.widget' name 'TextSwitcher' (AWViewSwitcher)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure addView(para1: AVView; para2: jint; para3: AVViewGroup_LayoutParams); overload; virtual;
    procedure setText(para1: JLCharSequence); overload; virtual;
    procedure setCurrentText(para1: JLCharSequence); overload; virtual;
    procedure onInitializeAccessibilityEvent(para1: AVAAccessibilityEvent); overload; virtual;
    procedure onInitializeAccessibilityNodeInfo(para1: AVAAccessibilityNodeInfo); overload; virtual;
  end;

  ATURfc822Tokenizer = class external 'android.text.util' name 'Rfc822Tokenizer' (JLObject, AWMultiAutoCompleteTextView.InnerTokenizer)
  public
    constructor create(); overload;
    class procedure tokenize(para1: JLCharSequence; para2: JUCollection); static; overload;
    class function tokenize(para1: JLCharSequence): Arr1ATURfc822Token; static; overload;
    function findTokenStart(para1: JLCharSequence; para2: jint): jint; overload; virtual;
    function findTokenEnd(para1: JLCharSequence; para2: jint): jint; overload; virtual;
    function terminateToken(para1: JLCharSequence): JLCharSequence; overload; virtual;
  end;

  AAExpandableListActivity = class external 'android.app' name 'ExpandableListActivity' (AAActivity, AVView.InnerOnCreateContextMenuListener, AWExpandableListView.InnerOnChildClickListener, AWExpandableListView.InnerOnGroupCollapseListener, AWExpandableListView.InnerOnGroupExpandListener)
  public
    constructor create(); overload;
    procedure onCreateContextMenu(para1: AVContextMenu; para2: AVView; para3: AVContextMenu.InnerContextMenuInfo); overload; virtual;
    function onChildClick(para1: AWExpandableListView; para2: AVView; para3: jint; para4: jint; para5: jlong): jboolean; overload; virtual;
    procedure onGroupCollapse(para1: jint); overload; virtual;
    procedure onGroupExpand(para1: jint); overload; virtual;
  strict protected
    procedure onRestoreInstanceState(para1: AOBundle); overload; virtual;
  public
    procedure onContentChanged(); overload; virtual;
    procedure setListAdapter(para1: AWExpandableListAdapter); overload; virtual;
    function getExpandableListView(): AWExpandableListView; overload; virtual;
    function getExpandableListAdapter(): AWExpandableListAdapter; overload; virtual;
    function getSelectedId(): jlong; overload; virtual;
    function getSelectedPosition(): jlong; overload; virtual;
    function setSelectedChild(para1: jint; para2: jint; para3: jboolean): jboolean; overload; virtual;
    procedure setSelectedGroup(para1: jint); overload; virtual;
  end;

  AAActivityOptions = class external 'android.app' name 'ActivityOptions' (JLObject)
  public
    class function makeCustomAnimation(para1: ACContext; para2: jint; para3: jint): AAActivityOptions; static; overload;
    class function makeScaleUpAnimation(para1: AVView; para2: jint; para3: jint; para4: jint; para5: jint): AAActivityOptions; static; overload;
    class function makeThumbnailScaleUpAnimation(para1: AVView; para2: AGBitmap; para3: jint; para4: jint): AAActivityOptions; static; overload;
    class function makeSceneTransitionAnimation(para1: AAActivity; para2: AVView; para3: JLString): AAActivityOptions; static; overload;
    class function makeSceneTransitionAnimation(para1: AAActivity; para2: Arr1AUPair): AAActivityOptions; static; overload;
    class function makeSceneTransitionAnimation(para1: AAActivity; const para2: array of AUPair): AAActivityOptions; static; overload;
    class function makeTaskLaunchBehind(): AAActivityOptions; static; overload;
    procedure update(para1: AAActivityOptions); overload; virtual;
    function toBundle(): AOBundle; overload; virtual;
  end;

  AATaskStackBuilder = class external 'android.app' name 'TaskStackBuilder' (JLObject)
  public
    class function create_(para1: ACContext): AATaskStackBuilder; static; external name 'create'; overload;
    function addNextIntent(para1: ACIntent): AATaskStackBuilder; overload; virtual;
    function addNextIntentWithParentStack(para1: ACIntent): AATaskStackBuilder; overload; virtual;
    function addParentStack(para1: AAActivity): AATaskStackBuilder; overload; virtual;
    function addParentStack(para1: JLClass): AATaskStackBuilder; overload; virtual;
    function addParentStack(para1: ACComponentName): AATaskStackBuilder; overload; virtual;
    function getIntentCount(): jint; overload; virtual;
    function editIntentAt(para1: jint): ACIntent; overload; virtual;
    procedure startActivities(); overload; virtual;
    procedure startActivities(para1: AOBundle); overload; virtual;
    function getPendingIntent(para1: jint; para2: jint): AAPendingIntent; overload; virtual;
    function getPendingIntent(para1: jint; para2: jint; para3: AOBundle): AAPendingIntent; overload; virtual;
    function getIntents(): Arr1ACIntent; overload; virtual;
  end;

  AHIInputManager = class sealed external 'android.hardware.input' name 'InputManager' (JLObject)
  public
    type
      InnerInputDeviceListener = interface;
      Arr1InnerInputDeviceListener = array of InnerInputDeviceListener;
      Arr2InnerInputDeviceListener = array of Arr1InnerInputDeviceListener;
      Arr3InnerInputDeviceListener = array of Arr2InnerInputDeviceListener;
      InnerInputDeviceListener = interface external 'android.hardware.input' name 'InputDeviceListener' 
        procedure onInputDeviceAdded(para1: jint); overload;
        procedure onInputDeviceRemoved(para1: jint); overload;
        procedure onInputDeviceChanged(para1: jint); overload;
      end;

  public
    const
      ACTION_QUERY_KEYBOARD_LAYOUTS = 'android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS';
      META_DATA_KEYBOARD_LAYOUTS = 'android.hardware.input.metadata.KEYBOARD_LAYOUTS';
  public
    function getInputDevice(para1: jint): AVInputDevice; overload; virtual;
    function getInputDeviceIds(): Arr1jint; overload; virtual;
    procedure registerInputDeviceListener(para1: AHIInputManager.InnerInputDeviceListener; para2: AOHandler); overload; virtual;
    procedure unregisterInputDeviceListener(para1: AHIInputManager.InnerInputDeviceListener); overload; virtual;
  end;

  AMMediaActionSound = class external 'android.media' name 'MediaActionSound' (JLObject)
  public
    const
      FOCUS_COMPLETE = 1;
      SHUTTER_CLICK = 0;
      START_VIDEO_RECORDING = 2;
      STOP_VIDEO_RECORDING = 3;
  public
    constructor create(); overload;
    procedure load(para1: jint); overload; virtual;
    procedure play(para1: jint); overload; virtual;
    procedure release(); overload; virtual;
  end;

  AMMediaCodecInfo = class sealed external 'android.media' name 'MediaCodecInfo' (JLObject)
  public
    type
      InnerCodecProfileLevel = class;
      Arr1InnerCodecProfileLevel = array of InnerCodecProfileLevel;
      Arr2InnerCodecProfileLevel = array of Arr1InnerCodecProfileLevel;
      Arr3InnerCodecProfileLevel = array of Arr2InnerCodecProfileLevel;
      InnerEncoderCapabilities = class;
      Arr1InnerEncoderCapabilities = array of InnerEncoderCapabilities;
      Arr2InnerEncoderCapabilities = array of Arr1InnerEncoderCapabilities;
      Arr3InnerEncoderCapabilities = array of Arr2InnerEncoderCapabilities;
      InnerVideoCapabilities = class;
      Arr1InnerVideoCapabilities = array of InnerVideoCapabilities;
      Arr2InnerVideoCapabilities = array of Arr1InnerVideoCapabilities;
      Arr3InnerVideoCapabilities = array of Arr2InnerVideoCapabilities;
      InnerAudioCapabilities = class;
      Arr1InnerAudioCapabilities = array of InnerAudioCapabilities;
      Arr2InnerAudioCapabilities = array of Arr1InnerAudioCapabilities;
      Arr3InnerAudioCapabilities = array of Arr2InnerAudioCapabilities;
      InnerCodecCapabilities = class;
      Arr1InnerCodecCapabilities = array of InnerCodecCapabilities;
      Arr2InnerCodecCapabilities = array of Arr1InnerCodecCapabilities;
      Arr3InnerCodecCapabilities = array of Arr2InnerCodecCapabilities;
      InnerCodecProfileLevel = class sealed external 'android.media' name 'CodecProfileLevel' (JLObject)
      public
        const
          AACObjectELD = 39;
          AACObjectERLC = 17;
          AACObjectHE = 5;
          AACObjectHE_PS = 29;
          AACObjectLC = 2;
          AACObjectLD = 23;
          AACObjectLTP = 4;
          AACObjectMain = 1;
          AACObjectSSR = 3;
          AACObjectScalable = 6;
          AVCLevel1 = 1;
          AVCLevel11 = 4;
          AVCLevel12 = 8;
          AVCLevel13 = 16;
          AVCLevel1b = 2;
          AVCLevel2 = 32;
          AVCLevel21 = 64;
          AVCLevel22 = 128;
          AVCLevel3 = 256;
          AVCLevel31 = 512;
          AVCLevel32 = 1024;
          AVCLevel4 = 2048;
          AVCLevel41 = 4096;
          AVCLevel42 = 8192;
          AVCLevel5 = 16384;
          AVCLevel51 = 32768;
          AVCLevel52 = 65536;
          AVCProfileBaseline = 1;
          AVCProfileExtended = 4;
          AVCProfileHigh = 8;
          AVCProfileHigh10 = 16;
          AVCProfileHigh422 = 32;
          AVCProfileHigh444 = 64;
          AVCProfileMain = 2;
          H263Level10 = 1;
          H263Level20 = 2;
          H263Level30 = 4;
          H263Level40 = 8;
          H263Level45 = 16;
          H263Level50 = 32;
          H263Level60 = 64;
          H263Level70 = 128;
          H263ProfileBackwardCompatible = 4;
          H263ProfileBaseline = 1;
          H263ProfileH320Coding = 2;
          H263ProfileHighCompression = 32;
          H263ProfileHighLatency = 256;
          H263ProfileISWV2 = 8;
          H263ProfileISWV3 = 16;
          H263ProfileInterlace = 128;
          H263ProfileInternet = 64;
          HEVCHighTierLevel1 = 2;
          HEVCHighTierLevel2 = 8;
          HEVCHighTierLevel21 = 32;
          HEVCHighTierLevel3 = 128;
          HEVCHighTierLevel31 = 512;
          HEVCHighTierLevel4 = 2048;
          HEVCHighTierLevel41 = 8192;
          HEVCHighTierLevel5 = 32768;
          HEVCHighTierLevel51 = 131072;
          HEVCHighTierLevel52 = 524288;
          HEVCHighTierLevel6 = 2097152;
          HEVCHighTierLevel61 = 8388608;
          HEVCHighTierLevel62 = 33554432;
          HEVCMainTierLevel1 = 1;
          HEVCMainTierLevel2 = 4;
          HEVCMainTierLevel21 = 16;
          HEVCMainTierLevel3 = 64;
          HEVCMainTierLevel31 = 256;
          HEVCMainTierLevel4 = 1024;
          HEVCMainTierLevel41 = 4096;
          HEVCMainTierLevel5 = 16384;
          HEVCMainTierLevel51 = 65536;
          HEVCMainTierLevel52 = 262144;
          HEVCMainTierLevel6 = 1048576;
          HEVCMainTierLevel61 = 4194304;
          HEVCMainTierLevel62 = 16777216;
          HEVCProfileMain = 1;
          HEVCProfileMain10 = 2;
          MPEG4Level0 = 1;
          MPEG4Level0b = 2;
          MPEG4Level1 = 4;
          MPEG4Level2 = 8;
          MPEG4Level3 = 16;
          MPEG4Level4 = 32;
          MPEG4Level4a = 64;
          MPEG4Level5 = 128;
          MPEG4ProfileAdvancedCoding = 4096;
          MPEG4ProfileAdvancedCore = 8192;
          MPEG4ProfileAdvancedRealTime = 1024;
          MPEG4ProfileAdvancedScalable = 16384;
          MPEG4ProfileAdvancedSimple = 32768;
          MPEG4ProfileBasicAnimated = 256;
          MPEG4ProfileCore = 4;
          MPEG4ProfileCoreScalable = 2048;
          MPEG4ProfileHybrid = 512;
          MPEG4ProfileMain = 8;
          MPEG4ProfileNbit = 16;
          MPEG4ProfileScalableTexture = 32;
          MPEG4ProfileSimple = 1;
          MPEG4ProfileSimpleFBA = 128;
          MPEG4ProfileSimpleFace = 64;
          MPEG4ProfileSimpleScalable = 2;
          VP8Level_Version0 = 1;
          VP8Level_Version1 = 2;
          VP8Level_Version2 = 4;
          VP8Level_Version3 = 8;
          VP8ProfileMain = 1;
      public
        var
          flevel: jint; external name 'level';
          fprofile: jint; external name 'profile';
      public
        constructor create(); overload;
      end;

      InnerEncoderCapabilities = class sealed external 'android.media' name 'EncoderCapabilities' (JLObject)
      public
        const
          BITRATE_MODE_CBR = 2;
          BITRATE_MODE_CQ = 0;
          BITRATE_MODE_VBR = 1;
      public
        function getComplexityRange(): AURange; overload; virtual;
        function isBitrateModeSupported(para1: jint): jboolean; overload; virtual;
      end;

      InnerVideoCapabilities = class sealed external 'android.media' name 'VideoCapabilities' (JLObject)
      public
        function getBitrateRange(): AURange; overload; virtual;
        function getSupportedWidths(): AURange; overload; virtual;
        function getSupportedHeights(): AURange; overload; virtual;
        function getWidthAlignment(): jint; overload; virtual;
        function getHeightAlignment(): jint; overload; virtual;
        function getSupportedFrameRates(): AURange; overload; virtual;
        function getSupportedWidthsFor(para1: jint): AURange; overload; virtual;
        function getSupportedHeightsFor(para1: jint): AURange; overload; virtual;
        function getSupportedFrameRatesFor(para1: jint; para2: jint): AURange; overload; virtual;
        function areSizeAndRateSupported(para1: jint; para2: jint; para3: jdouble): jboolean; overload; virtual;
        function isSizeSupported(para1: jint; para2: jint): jboolean; overload; virtual;
      end;

      InnerAudioCapabilities = class sealed external 'android.media' name 'AudioCapabilities' (JLObject)
      public
        function getBitrateRange(): AURange; overload; virtual;
        function getSupportedSampleRates(): Arr1jint; overload; virtual;
        function getSupportedSampleRateRanges(): Arr1AURange; overload; virtual;
        function getMaxInputChannelCount(): jint; overload; virtual;
        function isSampleRateSupported(para1: jint): jboolean; overload; virtual;
      end;

      InnerCodecCapabilities = class sealed external 'android.media' name 'CodecCapabilities' (JLObject)
      public
        const
          COLOR_Format12bitRGB444 = 3;
          COLOR_Format16bitARGB1555 = 5;
          COLOR_Format16bitARGB4444 = 4;
          COLOR_Format16bitBGR565 = 7;
          COLOR_Format16bitRGB565 = 6;
          COLOR_Format18BitBGR666 = 41;
          COLOR_Format18bitARGB1665 = 9;
          COLOR_Format18bitRGB666 = 8;
          COLOR_Format19bitARGB1666 = 10;
          COLOR_Format24BitABGR6666 = 43;
          COLOR_Format24BitARGB6666 = 42;
          COLOR_Format24bitARGB1887 = 13;
          COLOR_Format24bitBGR888 = 12;
          COLOR_Format24bitRGB888 = 11;
          COLOR_Format25bitARGB1888 = 14;
          COLOR_Format32bitARGB8888 = 16;
          COLOR_Format32bitBGRA8888 = 15;
          COLOR_Format8bitRGB332 = 2;
          COLOR_FormatCbYCrY = 27;
          COLOR_FormatCrYCbY = 28;
          COLOR_FormatL16 = 36;
          COLOR_FormatL2 = 33;
          COLOR_FormatL24 = 37;
          COLOR_FormatL32 = 38;
          COLOR_FormatL4 = 34;
          COLOR_FormatL8 = 35;
          COLOR_FormatMonochrome = 1;
          COLOR_FormatRawBayer10bit = 31;
          COLOR_FormatRawBayer8bit = 30;
          COLOR_FormatRawBayer8bitcompressed = 32;
          COLOR_FormatSurface = 2130708361;
          COLOR_FormatYCbYCr = 25;
          COLOR_FormatYCrYCb = 26;
          COLOR_FormatYUV411PackedPlanar = 18;
          COLOR_FormatYUV411Planar = 17;
          COLOR_FormatYUV420Flexible = 2135033992;
          COLOR_FormatYUV420PackedPlanar = 20;
          COLOR_FormatYUV420PackedSemiPlanar = 39;
          COLOR_FormatYUV420Planar = 19;
          COLOR_FormatYUV420SemiPlanar = 21;
          COLOR_FormatYUV422PackedPlanar = 23;
          COLOR_FormatYUV422PackedSemiPlanar = 40;
          COLOR_FormatYUV422Planar = 22;
          COLOR_FormatYUV422SemiPlanar = 24;
          COLOR_FormatYUV444Interleaved = 29;
          COLOR_QCOM_FormatYUV420SemiPlanar = 2141391872;
          COLOR_TI_FormatYUV420PackedSemiPlanar = 2130706688;
          FEATURE_AdaptivePlayback = 'adaptive-playback';
          FEATURE_SecurePlayback = 'secure-playback';
          FEATURE_TunneledPlayback = 'tunneled-playback';
      public
        var
          fcolorFormats: Arr1jint; external name 'colorFormats';
          fprofileLevels: AMMediaCodecInfo.Arr1InnerCodecProfileLevel; external name 'profileLevels';
      public
        constructor create(); overload;
        function isFeatureSupported(para1: JLString): jboolean; overload; virtual; final;
        function isFeatureRequired(para1: JLString): jboolean; overload; virtual; final;
        function isFormatSupported(para1: AMMediaFormat): jboolean; overload; virtual; final;
        function getDefaultFormat(): AMMediaFormat; overload; virtual;
        function getMimeType(): JLString; overload; virtual;
        function getAudioCapabilities(): AMMediaCodecInfo.InnerAudioCapabilities; overload; virtual;
        function getEncoderCapabilities(): AMMediaCodecInfo.InnerEncoderCapabilities; overload; virtual;
        function getVideoCapabilities(): AMMediaCodecInfo.InnerVideoCapabilities; overload; virtual;
        class function createFromProfileLevel(para1: JLString; para2: jint; para3: jint): AMMediaCodecInfo.InnerCodecCapabilities; static; overload;
      end;

  public
    function getName(): JLString; overload; virtual; final;
    function isEncoder(): jboolean; overload; virtual; final;
    function getSupportedTypes(): Arr1JLString; overload; virtual; final;
    function getCapabilitiesForType(para1: JLString): AMMediaCodecInfo.InnerCodecCapabilities; overload; virtual; final;
  end;

  AMMediaCodecList = class sealed external 'android.media' name 'MediaCodecList' (JLObject)
  public
    const
      ALL_CODECS = 1;
      REGULAR_CODECS = 0;
  public
    constructor create(para1: jint); overload;
    class function getCodecCount(): jint; static; overload; final;
    class function getCodecInfoAt(para1: jint): AMMediaCodecInfo; static; overload; final;
    function getCodecInfos(): Arr1AMMediaCodecInfo; overload; virtual; final;
    function findDecoderForFormat(para1: AMMediaFormat): JLString; overload; virtual; final;
    function findEncoderForFormat(para1: AMMediaFormat): JLString; overload; virtual; final;
  end;

  AMMediaCrypto = class sealed external 'android.media' name 'MediaCrypto' (JLObject)
  public
    constructor create(para1: JUUUID; para2: Arr1jbyte); overload;  // throws android.media.MediaCryptoException
    constructor create(para1: JUUUID; const para2: array of jbyte); overload;  // throws android.media.MediaCryptoException
    class function isCryptoSchemeSupported(para1: JUUUID): jboolean; static; overload; final;
    function requiresSecureDecoderComponent(para1: JLString): jboolean; overload; virtual; final;
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure release(); overload; virtual; final;
  end;

  AMMediaFormat = class sealed external 'android.media' name 'MediaFormat' (JLObject)
  public
    const
      KEY_AAC_DRC_ATTENUATION_FACTOR = 'aac-drc-cut-level';
      KEY_AAC_DRC_BOOST_FACTOR = 'aac-drc-boost-level';
      KEY_AAC_DRC_HEAVY_COMPRESSION = 'aac-drc-heavy-compression';
      KEY_AAC_DRC_TARGET_REFERENCE_LEVEL = 'aac-target-ref-level';
      KEY_AAC_ENCODED_TARGET_LEVEL = 'aac-encoded-target-level';
      KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT = 'aac-max-output-channel_count';
      KEY_AAC_PROFILE = 'aac-profile';
      KEY_AAC_SBR_MODE = 'aac-sbr-mode';
      KEY_AUDIO_SESSION_ID = 'audio-session-id';
      KEY_BITRATE_MODE = 'bitrate-mode';
      KEY_BIT_RATE = 'bitrate';
      KEY_CAPTURE_RATE = 'capture-rate';
      KEY_CHANNEL_COUNT = 'channel-count';
      KEY_CHANNEL_MASK = 'channel-mask';
      KEY_COLOR_FORMAT = 'color-format';
      KEY_COMPLEXITY = 'complexity';
      KEY_DURATION = 'durationUs';
      KEY_FLAC_COMPRESSION_LEVEL = 'flac-compression-level';
      KEY_FRAME_RATE = 'frame-rate';
      KEY_HEIGHT = 'height';
      KEY_IS_ADTS = 'is-adts';
      KEY_IS_AUTOSELECT = 'is-autoselect';
      KEY_IS_DEFAULT = 'is-default';
      KEY_IS_FORCED_SUBTITLE = 'is-forced-subtitle';
      KEY_I_FRAME_INTERVAL = 'i-frame-interval';
      KEY_LANGUAGE = 'language';
      KEY_MAX_HEIGHT = 'max-height';
      KEY_MAX_INPUT_SIZE = 'max-input-size';
      KEY_MAX_WIDTH = 'max-width';
      KEY_MIME = 'mime';
      KEY_PROFILE = 'profile';
      KEY_PUSH_BLANK_BUFFERS_ON_STOP = 'push-blank-buffers-on-shutdown';
      KEY_REPEAT_PREVIOUS_FRAME_AFTER = 'repeat-previous-frame-after';
      KEY_SAMPLE_RATE = 'sample-rate';
      KEY_TEMPORAL_LAYERING = 'ts-schema';
      KEY_WIDTH = 'width';
      MIMETYPE_AUDIO_AAC = 'audio/mp4a-latm';
      MIMETYPE_AUDIO_AC3 = 'audio/ac3';
      MIMETYPE_AUDIO_AMR_NB = 'audio/3gpp';
      MIMETYPE_AUDIO_AMR_WB = 'audio/amr-wb';
      MIMETYPE_AUDIO_FLAC = 'audio/flac';
      MIMETYPE_AUDIO_G711_ALAW = 'audio/g711-alaw';
      MIMETYPE_AUDIO_G711_MLAW = 'audio/g711-mlaw';
      MIMETYPE_AUDIO_MPEG = 'audio/mpeg';
      MIMETYPE_AUDIO_MSGSM = 'audio/gsm';
      MIMETYPE_AUDIO_OPUS = 'audio/opus';
      MIMETYPE_AUDIO_QCELP = 'audio/qcelp';
      MIMETYPE_AUDIO_RAW = 'audio/raw';
      MIMETYPE_AUDIO_VORBIS = 'audio/vorbis';
      MIMETYPE_TEXT_CEA_608 = 'text/cea-608';
      MIMETYPE_TEXT_VTT = 'text/vtt';
      MIMETYPE_VIDEO_AVC = 'video/avc';
      MIMETYPE_VIDEO_H263 = 'video/3gpp';
      MIMETYPE_VIDEO_HEVC = 'video/hevc';
      MIMETYPE_VIDEO_MPEG2 = 'video/mpeg2';
      MIMETYPE_VIDEO_MPEG4 = 'video/mp4v-es';
      MIMETYPE_VIDEO_RAW = 'video/raw';
      MIMETYPE_VIDEO_VP8 = 'video/x-vnd.on2.vp8';
      MIMETYPE_VIDEO_VP9 = 'video/x-vnd.on2.vp9';
  public
    constructor create(); overload;
    function containsKey(para1: JLString): jboolean; overload; virtual; final;
    function getInteger(para1: JLString): jint; overload; virtual; final;
    function getLong(para1: JLString): jlong; overload; virtual; final;
    function getFloat(para1: JLString): jfloat; overload; virtual; final;
    function getString(para1: JLString): JLString; overload; virtual; final;
    function getByteBuffer(para1: JLString): JNByteBuffer; overload; virtual; final;
    function getFeatureEnabled(para1: JLString): jboolean; overload; virtual;
    procedure setInteger(para1: JLString; para2: jint); overload; virtual; final;
    procedure setLong(para1: JLString; para2: jlong); overload; virtual; final;
    procedure setFloat(para1: JLString; para2: jfloat); overload; virtual; final;
    procedure setString(para1: JLString; para2: JLString); overload; virtual; final;
    procedure setByteBuffer(para1: JLString; para2: JNByteBuffer); overload; virtual; final;
    procedure setFeatureEnabled(para1: JLString; para2: jboolean); overload; virtual;
    class function createAudioFormat(para1: JLString; para2: jint; para3: jint): AMMediaFormat; static; overload; final;
    class function createSubtitleFormat(para1: JLString; para2: JLString): AMMediaFormat; static; overload; final;
    class function createVideoFormat(para1: JLString; para2: jint; para3: jint): AMMediaFormat; static; overload; final;
    function toString(): JLString; overload; virtual;
  end;

  AMMediaRouter = class external 'android.media' name 'MediaRouter' (JLObject)
  public
    type
      InnerRouteCategory = class;
      Arr1InnerRouteCategory = array of InnerRouteCategory;
      Arr2InnerRouteCategory = array of Arr1InnerRouteCategory;
      Arr3InnerRouteCategory = array of Arr2InnerRouteCategory;
      InnerVolumeCallback = class;
      Arr1InnerVolumeCallback = array of InnerVolumeCallback;
      Arr2InnerVolumeCallback = array of Arr1InnerVolumeCallback;
      Arr3InnerVolumeCallback = array of Arr2InnerVolumeCallback;
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerRouteInfo = class;
      Arr1InnerRouteInfo = array of InnerRouteInfo;
      Arr2InnerRouteInfo = array of Arr1InnerRouteInfo;
      Arr3InnerRouteInfo = array of Arr2InnerRouteInfo;
      InnerSimpleCallback = class;
      Arr1InnerSimpleCallback = array of InnerSimpleCallback;
      Arr2InnerSimpleCallback = array of Arr1InnerSimpleCallback;
      Arr3InnerSimpleCallback = array of Arr2InnerSimpleCallback;
      InnerRouteGroup = class;
      Arr1InnerRouteGroup = array of InnerRouteGroup;
      Arr2InnerRouteGroup = array of Arr1InnerRouteGroup;
      Arr3InnerRouteGroup = array of Arr2InnerRouteGroup;
      InnerUserRouteInfo = class;
      Arr1InnerUserRouteInfo = array of InnerUserRouteInfo;
      Arr2InnerUserRouteInfo = array of Arr1InnerUserRouteInfo;
      Arr3InnerUserRouteInfo = array of Arr2InnerUserRouteInfo;
      InnerRouteCategory = class external 'android.media' name 'RouteCategory' (JLObject)
      public
        function getName(): JLCharSequence; overload; virtual;
        function getName(para1: ACContext): JLCharSequence; overload; virtual;
        function getRoutes(para1: JUList): JUList; overload; virtual;
        function getSupportedTypes(): jint; overload; virtual;
        function isGroupable(): jboolean; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerVolumeCallback = class abstract external 'android.media' name 'VolumeCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onVolumeUpdateRequest(para1: AMMediaRouter.InnerRouteInfo; para2: jint); overload; virtual; abstract;
        procedure onVolumeSetRequest(para1: AMMediaRouter.InnerRouteInfo; para2: jint); overload; virtual; abstract;
      end;

      InnerCallback = class abstract external 'android.media' name 'Callback' (JLObject)
      public
        constructor create(); overload;
        procedure onRouteSelected(para1: AMMediaRouter; para2: jint; para3: AMMediaRouter.InnerRouteInfo); overload; virtual; abstract;
        procedure onRouteUnselected(para1: AMMediaRouter; para2: jint; para3: AMMediaRouter.InnerRouteInfo); overload; virtual; abstract;
        procedure onRouteAdded(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual; abstract;
        procedure onRouteRemoved(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual; abstract;
        procedure onRouteChanged(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual; abstract;
        procedure onRouteGrouped(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo; para3: AMMediaRouter.InnerRouteGroup; para4: jint); overload; virtual; abstract;
        procedure onRouteUngrouped(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo; para3: AMMediaRouter.InnerRouteGroup); overload; virtual; abstract;
        procedure onRouteVolumeChanged(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual; abstract;
        procedure onRoutePresentationDisplayChanged(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual;
      end;

      InnerRouteInfo = class external 'android.media' name 'RouteInfo' (JLObject)
      public
        const
          PLAYBACK_TYPE_LOCAL = 0;
          PLAYBACK_TYPE_REMOTE = 1;
          PLAYBACK_VOLUME_FIXED = 0;
          PLAYBACK_VOLUME_VARIABLE = 1;
      public
        function getName(): JLCharSequence; overload; virtual;
        function getName(para1: ACContext): JLCharSequence; overload; virtual;
        function getDescription(): JLCharSequence; overload; virtual;
        function getStatus(): JLCharSequence; overload; virtual;
        function getSupportedTypes(): jint; overload; virtual;
        function getGroup(): AMMediaRouter.InnerRouteGroup; overload; virtual;
        function getCategory(): AMMediaRouter.InnerRouteCategory; overload; virtual;
        function getIconDrawable(): AGDDrawable; overload; virtual;
        procedure setTag(para1: JLObject); overload; virtual;
        function getTag(): JLObject; overload; virtual;
        function getPlaybackType(): jint; overload; virtual;
        function getPlaybackStream(): jint; overload; virtual;
        function getVolume(): jint; overload; virtual;
        procedure requestSetVolume(para1: jint); overload; virtual;
        procedure requestUpdateVolume(para1: jint); overload; virtual;
        function getVolumeMax(): jint; overload; virtual;
        function getVolumeHandling(): jint; overload; virtual;
        function getPresentationDisplay(): AVDisplay; overload; virtual;
        function isEnabled(): jboolean; overload; virtual;
        function isConnecting(): jboolean; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerSimpleCallback = class external 'android.media' name 'SimpleCallback' (InnerCallback)
      public
        constructor create(); overload;
        procedure onRouteSelected(para1: AMMediaRouter; para2: jint; para3: AMMediaRouter.InnerRouteInfo); overload; virtual;
        procedure onRouteUnselected(para1: AMMediaRouter; para2: jint; para3: AMMediaRouter.InnerRouteInfo); overload; virtual;
        procedure onRouteAdded(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual;
        procedure onRouteRemoved(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual;
        procedure onRouteChanged(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual;
        procedure onRouteGrouped(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo; para3: AMMediaRouter.InnerRouteGroup; para4: jint); overload; virtual;
        procedure onRouteUngrouped(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo; para3: AMMediaRouter.InnerRouteGroup); overload; virtual;
        procedure onRouteVolumeChanged(para1: AMMediaRouter; para2: AMMediaRouter.InnerRouteInfo); overload; virtual;
      end;

      InnerRouteGroup = class external 'android.media' name 'RouteGroup' (InnerRouteInfo)
      public
        procedure addRoute(para1: AMMediaRouter.InnerRouteInfo); overload; virtual;
        procedure addRoute(para1: AMMediaRouter.InnerRouteInfo; para2: jint); overload; virtual;
        procedure removeRoute(para1: AMMediaRouter.InnerRouteInfo); overload; virtual;
        procedure removeRoute(para1: jint); overload; virtual;
        function getRouteCount(): jint; overload; virtual;
        function getRouteAt(para1: jint): AMMediaRouter.InnerRouteInfo; overload; virtual;
        procedure setIconDrawable(para1: AGDDrawable); overload; virtual;
        procedure setIconResource(para1: jint); overload; virtual;
        procedure requestSetVolume(para1: jint); overload; virtual;
        procedure requestUpdateVolume(para1: jint); overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerUserRouteInfo = class external 'android.media' name 'UserRouteInfo' (InnerRouteInfo)
      public
        procedure setName(para1: JLCharSequence); overload; virtual;
        procedure setName(para1: jint); overload; virtual;
        procedure setDescription(para1: JLCharSequence); overload; virtual;
        procedure setStatus(para1: JLCharSequence); overload; virtual;
        procedure setRemoteControlClient(para1: AMRemoteControlClient); overload; virtual;
        function getRemoteControlClient(): AMRemoteControlClient; overload; virtual;
        procedure setIconDrawable(para1: AGDDrawable); overload; virtual;
        procedure setIconResource(para1: jint); overload; virtual;
        procedure setVolumeCallback(para1: AMMediaRouter.InnerVolumeCallback); overload; virtual;
        procedure setPlaybackType(para1: jint); overload; virtual;
        procedure setVolumeHandling(para1: jint); overload; virtual;
        procedure setVolume(para1: jint); overload; virtual;
        procedure requestSetVolume(para1: jint); overload; virtual;
        procedure requestUpdateVolume(para1: jint); overload; virtual;
        procedure setVolumeMax(para1: jint); overload; virtual;
        procedure setPlaybackStream(para1: jint); overload; virtual;
      end;

  public
    const
      CALLBACK_FLAG_PERFORM_ACTIVE_SCAN = 1;
      CALLBACK_FLAG_UNFILTERED_EVENTS = 2;
      ROUTE_TYPE_LIVE_AUDIO = 1;
      ROUTE_TYPE_LIVE_VIDEO = 2;
      ROUTE_TYPE_USER = 8388608;
  public
    function getDefaultRoute(): AMMediaRouter.InnerRouteInfo; overload; virtual;
    function getSelectedRoute(para1: jint): AMMediaRouter.InnerRouteInfo; overload; virtual;
    procedure addCallback(para1: jint; para2: AMMediaRouter.InnerCallback); overload; virtual;
    procedure addCallback(para1: jint; para2: AMMediaRouter.InnerCallback; para3: jint); overload; virtual;
    procedure removeCallback(para1: AMMediaRouter.InnerCallback); overload; virtual;
    procedure selectRoute(para1: jint; para2: AMMediaRouter.InnerRouteInfo); overload; virtual;
    procedure addUserRoute(para1: AMMediaRouter.InnerUserRouteInfo); overload; virtual;
    procedure removeUserRoute(para1: AMMediaRouter.InnerUserRouteInfo); overload; virtual;
    procedure clearUserRoutes(); overload; virtual;
    function getCategoryCount(): jint; overload; virtual;
    function getCategoryAt(para1: jint): AMMediaRouter.InnerRouteCategory; overload; virtual;
    function getRouteCount(): jint; overload; virtual;
    function getRouteAt(para1: jint): AMMediaRouter.InnerRouteInfo; overload; virtual;
    function createUserRoute(para1: AMMediaRouter.InnerRouteCategory): AMMediaRouter.InnerUserRouteInfo; overload; virtual;
    function createRouteCategory(para1: JLCharSequence; para2: jboolean): AMMediaRouter.InnerRouteCategory; overload; virtual;
    function createRouteCategory(para1: jint; para2: jboolean): AMMediaRouter.InnerRouteCategory; overload; virtual;
  end;

  AMMediaSyncEvent = class external 'android.media' name 'MediaSyncEvent' (JLObject)
  public
    const
      SYNC_EVENT_NONE = 0;
      SYNC_EVENT_PRESENTATION_COMPLETE = 1;
  public
    class function createEvent(para1: jint): AMMediaSyncEvent; static; overload;  // throws java.lang.IllegalArgumentException
    function setAudioSessionId(para1: jint): AMMediaSyncEvent; overload; virtual;  // throws java.lang.IllegalArgumentException
    function getType(): jint; overload; virtual;
    function getAudioSessionId(): jint; overload; virtual;
  end;

  AMTimedText = class sealed external 'android.media' name 'TimedText' (JLObject)
  public
    function getText(): JLString; overload; virtual;
    function getBounds(): AGRect; overload; virtual;
  end;

  ANNNsdManager = class sealed external 'android.net.nsd' name 'NsdManager' (JLObject)
  public
    type
      InnerResolveListener = interface;
      Arr1InnerResolveListener = array of InnerResolveListener;
      Arr2InnerResolveListener = array of Arr1InnerResolveListener;
      Arr3InnerResolveListener = array of Arr2InnerResolveListener;
      InnerRegistrationListener = interface;
      Arr1InnerRegistrationListener = array of InnerRegistrationListener;
      Arr2InnerRegistrationListener = array of Arr1InnerRegistrationListener;
      Arr3InnerRegistrationListener = array of Arr2InnerRegistrationListener;
      InnerDiscoveryListener = interface;
      Arr1InnerDiscoveryListener = array of InnerDiscoveryListener;
      Arr2InnerDiscoveryListener = array of Arr1InnerDiscoveryListener;
      Arr3InnerDiscoveryListener = array of Arr2InnerDiscoveryListener;
      InnerResolveListener = interface external 'android.net.nsd' name 'ResolveListener' 
        procedure onResolveFailed(para1: ANNNsdServiceInfo; para2: jint); overload;
        procedure onServiceResolved(para1: ANNNsdServiceInfo); overload;
      end;

      InnerRegistrationListener = interface external 'android.net.nsd' name 'RegistrationListener' 
        procedure onRegistrationFailed(para1: ANNNsdServiceInfo; para2: jint); overload;
        procedure onUnregistrationFailed(para1: ANNNsdServiceInfo; para2: jint); overload;
        procedure onServiceRegistered(para1: ANNNsdServiceInfo); overload;
        procedure onServiceUnregistered(para1: ANNNsdServiceInfo); overload;
      end;

      InnerDiscoveryListener = interface external 'android.net.nsd' name 'DiscoveryListener' 
        procedure onStartDiscoveryFailed(para1: JLString; para2: jint); overload;
        procedure onStopDiscoveryFailed(para1: JLString; para2: jint); overload;
        procedure onDiscoveryStarted(para1: JLString); overload;
        procedure onDiscoveryStopped(para1: JLString); overload;
        procedure onServiceFound(para1: ANNNsdServiceInfo); overload;
        procedure onServiceLost(para1: ANNNsdServiceInfo); overload;
      end;

  public
    const
      ACTION_NSD_STATE_CHANGED = 'android.net.nsd.STATE_CHANGED';
      EXTRA_NSD_STATE = 'nsd_state';
      FAILURE_ALREADY_ACTIVE = 3;
      FAILURE_INTERNAL_ERROR = 0;
      FAILURE_MAX_LIMIT = 4;
      NSD_STATE_DISABLED = 1;
      NSD_STATE_ENABLED = 2;
      PROTOCOL_DNS_SD = 1;
  public
    procedure registerService(para1: ANNNsdServiceInfo; para2: jint; para3: ANNNsdManager.InnerRegistrationListener); overload; virtual;
    procedure unregisterService(para1: ANNNsdManager.InnerRegistrationListener); overload; virtual;
    procedure discoverServices(para1: JLString; para2: jint; para3: ANNNsdManager.InnerDiscoveryListener); overload; virtual;
    procedure stopServiceDiscovery(para1: ANNNsdManager.InnerDiscoveryListener); overload; virtual;
    procedure resolveService(para1: ANNNsdServiceInfo; para2: ANNNsdManager.InnerResolveListener); overload; virtual;
  end;

  AOCancellationSignal = class sealed external 'android.os' name 'CancellationSignal' (JLObject)
  public
    type
      InnerOnCancelListener = interface;
      Arr1InnerOnCancelListener = array of InnerOnCancelListener;
      Arr2InnerOnCancelListener = array of Arr1InnerOnCancelListener;
      Arr3InnerOnCancelListener = array of Arr2InnerOnCancelListener;
      InnerOnCancelListener = interface external 'android.os' name 'OnCancelListener' 
        procedure onCancel(); overload;
      end;

  public
    constructor create(); overload;
    function isCanceled(): jboolean; overload; virtual;
    procedure throwIfCanceled(); overload; virtual;
    procedure cancel(); overload; virtual;
    procedure setOnCancelListener(para1: AOCancellationSignal.InnerOnCancelListener); overload; virtual;
  end;

  AVChoreographer = class sealed external 'android.view' name 'Choreographer' (JLObject)
  public
    type
      InnerFrameCallback = interface;
      Arr1InnerFrameCallback = array of InnerFrameCallback;
      Arr2InnerFrameCallback = array of Arr1InnerFrameCallback;
      Arr3InnerFrameCallback = array of Arr2InnerFrameCallback;
      InnerFrameCallback = interface external 'android.view' name 'FrameCallback' 
        procedure doFrame(para1: jlong); overload;
      end;

  public
    class function getInstance(): AVChoreographer; static; overload;
    procedure postFrameCallback(para1: AVChoreographer.InnerFrameCallback); overload; virtual;
    procedure postFrameCallbackDelayed(para1: AVChoreographer.InnerFrameCallback; para2: jlong); overload; virtual;
    procedure removeFrameCallback(para1: AVChoreographer.InnerFrameCallback); overload; virtual;
  end;

  AVAAccessibilityNodeProvider = class abstract external 'android.view.accessibility' name 'AccessibilityNodeProvider' (JLObject)
  public
    const
      HOST_VIEW_ID = -1;
  public
    constructor create(); overload;
    function createAccessibilityNodeInfo(para1: jint): AVAAccessibilityNodeInfo; overload; virtual;
    function performAction(para1: jint; para2: jint; para3: AOBundle): jboolean; overload; virtual;
    function findAccessibilityNodeInfosByText(para1: JLString; para2: jint): JUList; overload; virtual;
    function findFocus(para1: jint): AVAAccessibilityNodeInfo; overload; virtual;
  end;

  AMMediaCryptoException = class sealed external 'android.media' name 'MediaCryptoException' (JLException)
  public
    constructor create(para1: JLString); overload;
  end;

  AULongSparseArray = class external 'android.util' name 'LongSparseArray' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    function clone(): AULongSparseArray; overload; virtual;
    function get(para1: jlong): JLObject; overload; virtual;
    function get(para1: jlong; para2: JLObject): JLObject; overload; virtual;
    procedure delete(para1: jlong); overload; virtual;
    procedure remove(para1: jlong); overload; virtual;
    procedure removeAt(para1: jint); overload; virtual;
    procedure put(para1: jlong; para2: JLObject); overload; virtual;
    function size(): jint; overload; virtual;
    function keyAt(para1: jint): jlong; overload; virtual;
    function valueAt(para1: jint): JLObject; overload; virtual;
    procedure setValueAt(para1: jint; para2: JLObject); overload; virtual;
    function indexOfKey(para1: jlong): jint; overload; virtual;
    function indexOfValue(para1: JLObject): jint; overload; virtual;
    procedure clear(); overload; virtual;
    procedure append(para1: jlong; para2: JLObject); overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AMMediaCodec = class sealed external 'android.media' name 'MediaCodec' (JLObject)
  public
    type
      InnerCryptoInfo = class;
      Arr1InnerCryptoInfo = array of InnerCryptoInfo;
      Arr2InnerCryptoInfo = array of Arr1InnerCryptoInfo;
      Arr3InnerCryptoInfo = array of Arr2InnerCryptoInfo;
      InnerBufferInfo = class;
      Arr1InnerBufferInfo = array of InnerBufferInfo;
      Arr2InnerBufferInfo = array of Arr1InnerBufferInfo;
      Arr3InnerBufferInfo = array of Arr2InnerBufferInfo;
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCryptoException = class;
      Arr1InnerCryptoException = array of InnerCryptoException;
      Arr2InnerCryptoException = array of Arr1InnerCryptoException;
      Arr3InnerCryptoException = array of Arr2InnerCryptoException;
      InnerCodecException = class;
      Arr1InnerCodecException = array of InnerCodecException;
      Arr2InnerCodecException = array of Arr1InnerCodecException;
      Arr3InnerCodecException = array of Arr2InnerCodecException;
      InnerCryptoInfo = class sealed external 'android.media' name 'CryptoInfo' (JLObject)
      public
        var
          fiv: Arr1jbyte; external name 'iv';
          fkey: Arr1jbyte; external name 'key';
          fmode: jint; external name 'mode';
          fnumBytesOfClearData: Arr1jint; external name 'numBytesOfClearData';
          fnumBytesOfEncryptedData: Arr1jint; external name 'numBytesOfEncryptedData';
          fnumSubSamples: jint; external name 'numSubSamples';
      public
        constructor create(); overload;
        procedure &set(para1: jint; para2: Arr1jint; para3: Arr1jint; para4: Arr1jbyte; para5: Arr1jbyte; para6: jint); overload; virtual;
        procedure &set(para1: jint; var para2: array of jint; var para3: array of jint; var para4: array of jbyte; var para5: array of jbyte; para6: jint); overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerBufferInfo = class sealed external 'android.media' name 'BufferInfo' (JLObject)
      public
        var
          fflags: jint; external name 'flags';
          foffset: jint; external name 'offset';
          fpresentationTimeUs: jlong; external name 'presentationTimeUs';
          fsize: jint; external name 'size';
      public
        constructor create(); overload;
        procedure &set(para1: jint; para2: jint; para3: jlong; para4: jint); overload; virtual;
      end;

      InnerCallback = class abstract external 'android.media' name 'Callback' (JLObject)
      public
        constructor create(); overload;
        procedure onInputBufferAvailable(para1: AMMediaCodec; para2: jint); overload; virtual; abstract;
        procedure onOutputBufferAvailable(para1: AMMediaCodec; para2: jint; para3: AMMediaCodec.InnerBufferInfo); overload; virtual; abstract;
        procedure onError(para1: AMMediaCodec; para2: AMMediaCodec.InnerCodecException); overload; virtual; abstract;
        procedure onOutputFormatChanged(para1: AMMediaCodec; para2: AMMediaFormat); overload; virtual; abstract;
      end;

      InnerCryptoException = class sealed external 'android.media' name 'CryptoException' (JLRuntimeException)
      public
        const
          ERROR_INSUFFICIENT_OUTPUT_PROTECTION = 4;
          ERROR_KEY_EXPIRED = 2;
          ERROR_NO_KEY = 1;
          ERROR_RESOURCE_BUSY = 3;
      public
        constructor create(para1: jint; para2: JLString); overload;
        function getErrorCode(): jint; overload; virtual;
      end;

      InnerCodecException = class sealed external 'android.media' name 'CodecException' (JLIllegalStateException)
      public
        function isTransient(): jboolean; overload; virtual;
        function isRecoverable(): jboolean; overload; virtual;
        function getDiagnosticInfo(): JLString; overload; virtual;
      end;

  public
    const
      BUFFER_FLAG_CODEC_CONFIG = 2;
      BUFFER_FLAG_END_OF_STREAM = 4;
      BUFFER_FLAG_KEY_FRAME = 1;
      BUFFER_FLAG_SYNC_FRAME = 1 deprecated;
      CONFIGURE_FLAG_ENCODE = 1;
      CRYPTO_MODE_AES_CTR = 1;
      CRYPTO_MODE_UNENCRYPTED = 0;
      INFO_OUTPUT_BUFFERS_CHANGED = -3 deprecated;
      INFO_OUTPUT_FORMAT_CHANGED = -2;
      INFO_TRY_AGAIN_LATER = -1;
      PARAMETER_KEY_REQUEST_SYNC_FRAME = 'request-sync';
      PARAMETER_KEY_SUSPEND = 'drop-input-frames';
      PARAMETER_KEY_VIDEO_BITRATE = 'video-bitrate';
      VIDEO_SCALING_MODE_SCALE_TO_FIT = 1;
      VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING = 2;
  public
    class function createDecoderByType(para1: JLString): AMMediaCodec; static; overload;  // throws java.io.IOException
    class function createEncoderByType(para1: JLString): AMMediaCodec; static; overload;  // throws java.io.IOException
    class function createByCodecName(para1: JLString): AMMediaCodec; static; overload;  // throws java.io.IOException
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure reset(); overload; virtual; final;
    procedure release(); overload; virtual; final;
    procedure configure(para1: AMMediaFormat; para2: AVSurface; para3: AMMediaCrypto; para4: jint); overload; virtual;
    function createInputSurface(): AVSurface; overload; virtual; final;
    procedure start(); overload; virtual; final;
    procedure stop(); overload; virtual; final;
    procedure flush(); overload; virtual; final;
    procedure queueInputBuffer(para1: jint; para2: jint; para3: jint; para4: jlong; para5: jint); overload; virtual; final;  // throws android.media.MediaCodec$CryptoException
    procedure queueSecureInputBuffer(para1: jint; para2: jint; para3: AMMediaCodec.InnerCryptoInfo; para4: jlong; para5: jint); overload; virtual; final;  // throws android.media.MediaCodec$CryptoException
    function dequeueInputBuffer(para1: jlong): jint; overload; virtual; final;
    function dequeueOutputBuffer(para1: AMMediaCodec.InnerBufferInfo; para2: jlong): jint; overload; virtual; final;
    procedure releaseOutputBuffer(para1: jint; para2: jboolean); overload; virtual; final;
    procedure releaseOutputBuffer(para1: jint; para2: jlong); overload; virtual; final;
    procedure signalEndOfInputStream(); overload; virtual; final;
    function getOutputFormat(): AMMediaFormat; overload; virtual; final;
    function getInputFormat(): AMMediaFormat; overload; virtual; final;
    function getOutputFormat(para1: jint): AMMediaFormat; overload; virtual; final;
    function getInputBuffers(): Arr1JNByteBuffer; overload; virtual;
    function getOutputBuffers(): Arr1JNByteBuffer; overload; virtual;
    function getInputBuffer(para1: jint): JNByteBuffer; overload; virtual;
    function getInputImage(para1: jint): AMImage; overload; virtual;
    function getOutputBuffer(para1: jint): JNByteBuffer; overload; virtual;
    function getOutputImage(para1: jint): AMImage; overload; virtual;
    procedure setVideoScalingMode(para1: jint); overload; virtual; final;
    function getName(): JLString; overload; virtual; final;
    procedure setParameters(para1: AOBundle); overload; virtual; final;
    procedure setCallback(para1: AMMediaCodec.InnerCallback); overload; virtual;
    function getCodecInfo(): AMMediaCodecInfo; overload; virtual;
  end;

  AOOperationCanceledException = class external 'android.os' name 'OperationCanceledException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  AMAAcousticEchoCanceler = class external 'android.media.audiofx' name 'AcousticEchoCanceler' (AMAAudioEffect)
  public
    class function isAvailable(): jboolean; static; overload;
    class function create_(para1: jint): AMAAcousticEchoCanceler; static; external name 'create'; overload;
  end;

  AMAAutomaticGainControl = class external 'android.media.audiofx' name 'AutomaticGainControl' (AMAAudioEffect)
  public
    class function isAvailable(): jboolean; static; overload;
    class function create_(para1: jint): AMAAutomaticGainControl; static; external name 'create'; overload;
  end;

  AMANoiseSuppressor = class external 'android.media.audiofx' name 'NoiseSuppressor' (AMAAudioEffect)
  public
    class function isAvailable(): jboolean; static; overload;
    class function create_(para1: jint): AMANoiseSuppressor; static; external name 'create'; overload;
  end;

  ANNNsdServiceInfo = class sealed external 'android.net.nsd' name 'NsdServiceInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(); overload;
    function getServiceName(): JLString; overload; virtual;
    procedure setServiceName(para1: JLString); overload; virtual;
    function getServiceType(): JLString; overload; virtual;
    procedure setServiceType(para1: JLString); overload; virtual;
    function getHost(): JNInetAddress; overload; virtual;
    procedure setHost(para1: JNInetAddress); overload; virtual;
    function getPort(): jint; overload; virtual;
    procedure setPort(para1: jint); overload; virtual;
    procedure setAttribute(para1: JLString; para2: JLString); overload; virtual;
    procedure removeAttribute(para1: JLString); overload; virtual;
    function getAttributes(): JUMap; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWPNWifiP2pServiceInfo = class external 'android.net.wifi.p2p.nsd' name 'WifiP2pServiceInfo' (JLObject, AOParcelable)
  public
    const
      SERVICE_TYPE_ALL = 0;
      SERVICE_TYPE_BONJOUR = 1;
      SERVICE_TYPE_UPNP = 2;
      SERVICE_TYPE_VENDOR_SPECIFIC = 255;
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANWPNWifiP2pServiceRequest = class external 'android.net.wifi.p2p.nsd' name 'WifiP2pServiceRequest' (JLObject, AOParcelable)
  public
    class function newInstance(para1: jint; para2: JLString): ANWPNWifiP2pServiceRequest; static; overload;
    class function newInstance(para1: jint): ANWPNWifiP2pServiceRequest; static; overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AVTSentenceSuggestionsInfo = class sealed external 'android.view.textservice' name 'SentenceSuggestionsInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: Arr1AVTSuggestionsInfo; para2: Arr1jint; para3: Arr1jint); overload;
    constructor create(const para1: array of AVTSuggestionsInfo; const para2: array of jint; const para3: array of jint); overload;
    constructor create(para1: AOParcel); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function getSuggestionsCount(): jint; overload; virtual;
    function getSuggestionsInfoAt(para1: jint): AVTSuggestionsInfo; overload; virtual;
    function getOffsetAt(para1: jint): jint; overload; virtual;
    function getLengthAt(para1: jint): jint; overload; virtual;
  end;

  AASuppressLint = interface external 'android.annotation' name 'SuppressLint' (JLAAnnotation)
    function value(): Arr1JLString; overload;
  end;

  AATargetApi = interface external 'android.annotation' name 'TargetApi' (JLAAnnotation)
    function value(): jint; overload;
  end;

  AMMediaExtractor = class sealed external 'android.media' name 'MediaExtractor' (JLObject)
  public
    const
      SAMPLE_FLAG_ENCRYPTED = 2;
      SAMPLE_FLAG_SYNC = 1;
      SEEK_TO_CLOSEST_SYNC = 2;
      SEEK_TO_NEXT_SYNC = 1;
      SEEK_TO_PREVIOUS_SYNC = 0;
  public
    constructor create(); overload;
    procedure setDataSource(para1: ACContext; para2: ANUri; para3: JUMap); overload; virtual; final;  // throws java.io.IOException
    procedure setDataSource(para1: JLString; para2: JUMap); overload; virtual; final;  // throws java.io.IOException
    procedure setDataSource(para1: JLString); overload; virtual; final;  // throws java.io.IOException
    procedure setDataSource(para1: JIFileDescriptor); overload; virtual; final;  // throws java.io.IOException
    procedure setDataSource(para1: JIFileDescriptor; para2: jlong; para3: jlong); overload; virtual; final;  // throws java.io.IOException
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure release(); overload; virtual; final;
    function getTrackCount(): jint; overload; virtual; final;
    function getPsshInfo(): JUMap; overload; virtual;
    function getTrackFormat(para1: jint): AMMediaFormat; overload; virtual;
    procedure selectTrack(para1: jint); overload; virtual;
    procedure unselectTrack(para1: jint); overload; virtual;
    procedure seekTo(para1: jlong; para2: jint); overload; virtual;
    function advance(): jboolean; overload; virtual;
    function readSampleData(para1: JNByteBuffer; para2: jint): jint; overload; virtual;
    function getSampleTrackIndex(): jint; overload; virtual;
    function getSampleTime(): jlong; overload; virtual;
    function getSampleFlags(): jint; overload; virtual;
    function getSampleCryptoInfo(para1: AMMediaCodec.InnerCryptoInfo): jboolean; overload; virtual;
    function getCachedDuration(): jlong; overload; virtual;
    function hasCacheReachedEndOfStream(): jboolean; overload; virtual;
  end;

  ANWPNWifiP2pDnsSdServiceInfo = class external 'android.net.wifi.p2p.nsd' name 'WifiP2pDnsSdServiceInfo' (ANWPNWifiP2pServiceInfo)
  public
    class function newInstance(para1: JLString; para2: JLString; para3: JUMap): ANWPNWifiP2pDnsSdServiceInfo; static; overload;
  end;

  ANWPNWifiP2pUpnpServiceInfo = class external 'android.net.wifi.p2p.nsd' name 'WifiP2pUpnpServiceInfo' (ANWPNWifiP2pServiceInfo)
  public
    class function newInstance(para1: JLString; para2: JLString; para3: JUList): ANWPNWifiP2pUpnpServiceInfo; static; overload;
  end;

  ANWPNWifiP2pDnsSdServiceRequest = class external 'android.net.wifi.p2p.nsd' name 'WifiP2pDnsSdServiceRequest' (ANWPNWifiP2pServiceRequest)
  public
    class function newInstance(): ANWPNWifiP2pDnsSdServiceRequest; static; overload;
    class function newInstance(para1: JLString): ANWPNWifiP2pDnsSdServiceRequest; static; overload;
    class function newInstance(para1: JLString; para2: JLString): ANWPNWifiP2pDnsSdServiceRequest; static; overload;
  end;

  ANWPNWifiP2pUpnpServiceRequest = class external 'android.net.wifi.p2p.nsd' name 'WifiP2pUpnpServiceRequest' (ANWPNWifiP2pServiceRequest)
  public
    class function newInstance(): ANWPNWifiP2pUpnpServiceRequest; static; overload;
    class function newInstance(para1: JLString): ANWPNWifiP2pUpnpServiceRequest; static; overload;
  end;

  AATimeAnimator = class external 'android.animation' name 'TimeAnimator' (AAValueAnimator)
  public
    type
      InnerTimeListener = interface;
      Arr1InnerTimeListener = array of InnerTimeListener;
      Arr2InnerTimeListener = array of Arr1InnerTimeListener;
      Arr3InnerTimeListener = array of Arr2InnerTimeListener;
      InnerTimeListener = interface external 'android.animation' name 'TimeListener' 
        procedure onTimeUpdate(para1: AATimeAnimator; para2: jlong; para3: jlong); overload;
      end;

  public
    constructor create(); overload;
    procedure start(); overload; virtual;
    procedure setTimeListener(para1: AATimeAnimator.InnerTimeListener); overload; virtual;
  end;

  AAMediaRouteButton = class external 'android.app' name 'MediaRouteButton' (AVView)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getRouteTypes(): jint; overload; virtual;
    procedure setRouteTypes(para1: jint); overload; virtual;
    procedure setExtendedSettingsClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
    procedure showDialog(); overload; virtual;
    function performClick(): jboolean; overload; virtual;
    function performLongClick(): jboolean; overload; virtual;
  strict protected
    function onCreateDrawableState(para1: jint): Arr1jint; overload; virtual;
    procedure drawableStateChanged(); overload; virtual;
    function verifyDrawable(para1: AGDDrawable): jboolean; overload; virtual;
  public
    procedure jumpDrawablesToCurrentState(); overload; virtual;
    procedure setVisibility(para1: jint); overload; virtual;
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onDraw(para1: AGCanvas); overload; virtual;
  end;

  AAMediaRouteActionProvider = class external 'android.app' name 'MediaRouteActionProvider' (AVActionProvider)
  public
    constructor create(para1: ACContext); overload;
    procedure setRouteTypes(para1: jint); overload; virtual;
    procedure setExtendedSettingsClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
    function onCreateActionView(): AVView; overload; virtual;
    function onCreateActionView(para1: AVMenuItem): AVView; overload; virtual;
    function onPerformDefaultAction(): jboolean; overload; virtual;
    function overridesItemVisibility(): jboolean; overload; virtual;
    function isVisible(): jboolean; overload; virtual;
  end;

  AHDVirtualDisplay = class sealed external 'android.hardware.display' name 'VirtualDisplay' (JLObject)
  public
    type
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = class abstract external 'android.hardware.display' name 'Callback' (JLObject)
      public
        constructor create(); overload;
        procedure onPaused(); overload; virtual;
        procedure onResumed(); overload; virtual;
        procedure onStopped(); overload; virtual;
      end;

  public
    function getDisplay(): AVDisplay; overload; virtual;
    function getSurface(): AVSurface; overload; virtual;
    procedure setSurface(para1: AVSurface); overload; virtual;
    procedure resize(para1: jint; para2: jint; para3: jint); overload; virtual;
    procedure release(); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AHDDisplayManager = class sealed external 'android.hardware.display' name 'DisplayManager' (JLObject)
  public
    type
      InnerDisplayListener = interface;
      Arr1InnerDisplayListener = array of InnerDisplayListener;
      Arr2InnerDisplayListener = array of Arr1InnerDisplayListener;
      Arr3InnerDisplayListener = array of Arr2InnerDisplayListener;
      InnerDisplayListener = interface external 'android.hardware.display' name 'DisplayListener' 
        procedure onDisplayAdded(para1: jint); overload;
        procedure onDisplayRemoved(para1: jint); overload;
        procedure onDisplayChanged(para1: jint); overload;
      end;

  public
    const
      DISPLAY_CATEGORY_PRESENTATION = 'android.hardware.display.category.PRESENTATION';
      VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR = 16;
      VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY = 8;
      VIRTUAL_DISPLAY_FLAG_PRESENTATION = 2;
      VIRTUAL_DISPLAY_FLAG_PUBLIC = 1;
      VIRTUAL_DISPLAY_FLAG_SECURE = 4;
  public
    function getDisplay(para1: jint): AVDisplay; overload; virtual;
    function getDisplays(): Arr1AVDisplay; overload; virtual;
    function getDisplays(para1: JLString): Arr1AVDisplay; overload; virtual;
    procedure registerDisplayListener(para1: AHDDisplayManager.InnerDisplayListener; para2: AOHandler); overload; virtual;
    procedure unregisterDisplayListener(para1: AHDDisplayManager.InnerDisplayListener); overload; virtual;
    function createVirtualDisplay(para1: JLString; para2: jint; para3: jint; para4: jint; para5: AVSurface; para6: jint): AHDVirtualDisplay; overload; virtual;
    function createVirtualDisplay(para1: JLString; para2: jint; para3: jint; para4: jint; para5: AVSurface; para6: jint; para7: AHDVirtualDisplay.InnerCallback; para8: AOHandler): AHDVirtualDisplay; overload; virtual;
  end;

  ANHX509TrustManagerExtensions = class external 'android.net.http' name 'X509TrustManagerExtensions' (JLObject)
  public
    constructor create(para1: JNSX509TrustManager); overload;  // throws java.lang.IllegalArgumentException
    function checkServerTrusted(para1: Arr1JSCX509Certificate; para2: JLString; para3: JLString): JUList; overload; virtual;  // throws java.security.cert.CertificateException
    function checkServerTrusted(var para1: array of JSCX509Certificate; para2: JLString; para3: JLString): JUList; overload; virtual;  // throws java.security.cert.CertificateException
    function isUserAddedCertificate(para1: JSCX509Certificate): jboolean; overload; virtual;
  end;

  AOEGL14 = class external 'android.opengl' name 'EGL14' (JLObject)
  public
    const
      EGL_ALPHA_MASK_SIZE = 12350;
      EGL_ALPHA_SIZE = 12321;
      EGL_BACK_BUFFER = 12420;
      EGL_BAD_ACCESS = 12290;
      EGL_BAD_ALLOC = 12291;
      EGL_BAD_ATTRIBUTE = 12292;
      EGL_BAD_CONFIG = 12293;
      EGL_BAD_CONTEXT = 12294;
      EGL_BAD_CURRENT_SURFACE = 12295;
      EGL_BAD_DISPLAY = 12296;
      EGL_BAD_MATCH = 12297;
      EGL_BAD_NATIVE_PIXMAP = 12298;
      EGL_BAD_NATIVE_WINDOW = 12299;
      EGL_BAD_PARAMETER = 12300;
      EGL_BAD_SURFACE = 12301;
      EGL_BIND_TO_TEXTURE_RGB = 12345;
      EGL_BIND_TO_TEXTURE_RGBA = 12346;
      EGL_BLUE_SIZE = 12322;
      EGL_BUFFER_DESTROYED = 12437;
      EGL_BUFFER_PRESERVED = 12436;
      EGL_BUFFER_SIZE = 12320;
      EGL_CLIENT_APIS = 12429;
      EGL_COLOR_BUFFER_TYPE = 12351;
      EGL_CONFIG_CAVEAT = 12327;
      EGL_CONFIG_ID = 12328;
      EGL_CONFORMANT = 12354;
      EGL_CONTEXT_CLIENT_TYPE = 12439;
      EGL_CONTEXT_CLIENT_VERSION = 12440;
      EGL_CONTEXT_LOST = 12302;
      EGL_CORE_NATIVE_ENGINE = 12379;
      EGL_DEFAULT_DISPLAY = 0;
      EGL_DEPTH_SIZE = 12325;
      EGL_DISPLAY_SCALING = 10000;
      EGL_DRAW = 12377;
      EGL_EXTENSIONS = 12373;
      EGL_FALSE = 0;
      EGL_GREEN_SIZE = 12323;
      EGL_HEIGHT = 12374;
      EGL_HORIZONTAL_RESOLUTION = 12432;
      EGL_LARGEST_PBUFFER = 12376;
      EGL_LEVEL = 12329;
      EGL_LUMINANCE_BUFFER = 12431;
      EGL_LUMINANCE_SIZE = 12349;
      EGL_MATCH_NATIVE_PIXMAP = 12353;
      EGL_MAX_PBUFFER_HEIGHT = 12330;
      EGL_MAX_PBUFFER_PIXELS = 12331;
      EGL_MAX_PBUFFER_WIDTH = 12332;
      EGL_MAX_SWAP_INTERVAL = 12348;
      EGL_MIN_SWAP_INTERVAL = 12347;
      EGL_MIPMAP_LEVEL = 12419;
      EGL_MIPMAP_TEXTURE = 12418;
      EGL_MULTISAMPLE_RESOLVE = 12441;
      EGL_MULTISAMPLE_RESOLVE_BOX = 12443;
      EGL_MULTISAMPLE_RESOLVE_BOX_BIT = 512;
      EGL_MULTISAMPLE_RESOLVE_DEFAULT = 12442;
      EGL_NATIVE_RENDERABLE = 12333;
      EGL_NATIVE_VISUAL_ID = 12334;
      EGL_NATIVE_VISUAL_TYPE = 12335;
      EGL_NONE = 12344;
      EGL_NON_CONFORMANT_CONFIG = 12369;
      EGL_NOT_INITIALIZED = 12289;
  public
    class var
      fEGL_NO_CONTEXT: AOEGLContext; external name 'EGL_NO_CONTEXT';
      fEGL_NO_DISPLAY: AOEGLDisplay; external name 'EGL_NO_DISPLAY';
      fEGL_NO_SURFACE: AOEGLSurface; external name 'EGL_NO_SURFACE';
  public
    const
      EGL_NO_TEXTURE = 12380;
      EGL_OPENGL_API = 12450;
      EGL_OPENGL_BIT = 8;
      EGL_OPENGL_ES2_BIT = 4;
      EGL_OPENGL_ES_API = 12448;
      EGL_OPENGL_ES_BIT = 1;
      EGL_OPENVG_API = 12449;
      EGL_OPENVG_BIT = 2;
      EGL_OPENVG_IMAGE = 12438;
      EGL_PBUFFER_BIT = 1;
      EGL_PIXEL_ASPECT_RATIO = 12434;
      EGL_PIXMAP_BIT = 2;
      EGL_READ = 12378;
      EGL_RED_SIZE = 12324;
      EGL_RENDERABLE_TYPE = 12352;
      EGL_RENDER_BUFFER = 12422;
      EGL_RGB_BUFFER = 12430;
      EGL_SAMPLES = 12337;
      EGL_SAMPLE_BUFFERS = 12338;
      EGL_SINGLE_BUFFER = 12421;
      EGL_SLOW_CONFIG = 12368;
      EGL_STENCIL_SIZE = 12326;
      EGL_SUCCESS = 12288;
      EGL_SURFACE_TYPE = 12339;
      EGL_SWAP_BEHAVIOR = 12435;
      EGL_SWAP_BEHAVIOR_PRESERVED_BIT = 1024;
      EGL_TEXTURE_2D = 12383;
      EGL_TEXTURE_FORMAT = 12416;
      EGL_TEXTURE_RGB = 12381;
      EGL_TEXTURE_RGBA = 12382;
      EGL_TEXTURE_TARGET = 12417;
      EGL_TRANSPARENT_BLUE_VALUE = 12341;
      EGL_TRANSPARENT_GREEN_VALUE = 12342;
      EGL_TRANSPARENT_RED_VALUE = 12343;
      EGL_TRANSPARENT_RGB = 12370;
      EGL_TRANSPARENT_TYPE = 12340;
      EGL_TRUE = 1;
      EGL_VENDOR = 12371;
      EGL_VERSION = 12372;
      EGL_VERTICAL_RESOLUTION = 12433;
      EGL_VG_ALPHA_FORMAT = 12424;
      EGL_VG_ALPHA_FORMAT_NONPRE = 12427;
      EGL_VG_ALPHA_FORMAT_PRE = 12428;
      EGL_VG_ALPHA_FORMAT_PRE_BIT = 64;
      EGL_VG_COLORSPACE = 12423;
      EGL_VG_COLORSPACE_LINEAR = 12426;
      EGL_VG_COLORSPACE_LINEAR_BIT = 32;
      EGL_VG_COLORSPACE_sRGB = 12425;
      EGL_WIDTH = 12375;
      EGL_WINDOW_BIT = 4;
  public
    constructor create(); overload;
    class function eglGetError(): jint; static; overload;
    class function eglGetDisplay(para1: jint): AOEGLDisplay; static; overload;
    class function eglInitialize(para1: AOEGLDisplay; para2: Arr1jint; para3: jint; para4: Arr1jint; para5: jint): jboolean; static; overload;
    class function eglInitialize(para1: AOEGLDisplay; var para2: array of jint; para3: jint; var para4: array of jint; para5: jint): jboolean; static; overload;
    class function eglTerminate(para1: AOEGLDisplay): jboolean; static; overload;
    class function eglQueryString(para1: AOEGLDisplay; para2: jint): JLString; static; overload;
    class function eglGetConfigs(para1: AOEGLDisplay; para2: Arr1AOEGLConfig; para3: jint; para4: jint; para5: Arr1jint; para6: jint): jboolean; static; overload;
    class function eglGetConfigs(para1: AOEGLDisplay; var para2: array of AOEGLConfig; para3: jint; para4: jint; var para5: array of jint; para6: jint): jboolean; static; overload;
    class function eglChooseConfig(para1: AOEGLDisplay; para2: Arr1jint; para3: jint; para4: Arr1AOEGLConfig; para5: jint; para6: jint; para7: Arr1jint; para8: jint): jboolean; static; overload;
    class function eglChooseConfig(para1: AOEGLDisplay; var para2: array of jint; para3: jint; var para4: array of AOEGLConfig; para5: jint; para6: jint; var para7: array of jint; para8: jint): jboolean; static; overload;
    class function eglGetConfigAttrib(para1: AOEGLDisplay; para2: AOEGLConfig; para3: jint; para4: Arr1jint; para5: jint): jboolean; static; overload;
    class function eglGetConfigAttrib(para1: AOEGLDisplay; para2: AOEGLConfig; para3: jint; var para4: array of jint; para5: jint): jboolean; static; overload;
    class function eglCreateWindowSurface(para1: AOEGLDisplay; para2: AOEGLConfig; para3: JLObject; para4: Arr1jint; para5: jint): AOEGLSurface; static; overload;
    class function eglCreateWindowSurface(para1: AOEGLDisplay; para2: AOEGLConfig; para3: JLObject; var para4: array of jint; para5: jint): AOEGLSurface; static; overload;
    class function eglCreatePbufferSurface(para1: AOEGLDisplay; para2: AOEGLConfig; para3: Arr1jint; para4: jint): AOEGLSurface; static; overload;
    class function eglCreatePbufferSurface(para1: AOEGLDisplay; para2: AOEGLConfig; var para3: array of jint; para4: jint): AOEGLSurface; static; overload;
    class function eglCreatePixmapSurface(para1: AOEGLDisplay; para2: AOEGLConfig; para3: jint; para4: Arr1jint; para5: jint): AOEGLSurface; static; overload;
    class function eglCreatePixmapSurface(para1: AOEGLDisplay; para2: AOEGLConfig; para3: jint; var para4: array of jint; para5: jint): AOEGLSurface; static; overload;
    class function eglDestroySurface(para1: AOEGLDisplay; para2: AOEGLSurface): jboolean; static; overload;
    class function eglQuerySurface(para1: AOEGLDisplay; para2: AOEGLSurface; para3: jint; para4: Arr1jint; para5: jint): jboolean; static; overload;
    class function eglQuerySurface(para1: AOEGLDisplay; para2: AOEGLSurface; para3: jint; var para4: array of jint; para5: jint): jboolean; static; overload;
    class function eglBindAPI(para1: jint): jboolean; static; overload;
    class function eglQueryAPI(): jint; static; overload;
    class function eglWaitClient(): jboolean; static; overload;
    class function eglReleaseThread(): jboolean; static; overload;
    class function eglCreatePbufferFromClientBuffer(para1: AOEGLDisplay; para2: jint; para3: jint; para4: AOEGLConfig; para5: Arr1jint; para6: jint): AOEGLSurface; static; overload;
    class function eglCreatePbufferFromClientBuffer(para1: AOEGLDisplay; para2: jint; para3: jint; para4: AOEGLConfig; var para5: array of jint; para6: jint): AOEGLSurface; static; overload;
    class function eglSurfaceAttrib(para1: AOEGLDisplay; para2: AOEGLSurface; para3: jint; para4: jint): jboolean; static; overload;
    class function eglBindTexImage(para1: AOEGLDisplay; para2: AOEGLSurface; para3: jint): jboolean; static; overload;
    class function eglReleaseTexImage(para1: AOEGLDisplay; para2: AOEGLSurface; para3: jint): jboolean; static; overload;
    class function eglSwapInterval(para1: AOEGLDisplay; para2: jint): jboolean; static; overload;
    class function eglCreateContext(para1: AOEGLDisplay; para2: AOEGLConfig; para3: AOEGLContext; para4: Arr1jint; para5: jint): AOEGLContext; static; overload;
    class function eglCreateContext(para1: AOEGLDisplay; para2: AOEGLConfig; para3: AOEGLContext; var para4: array of jint; para5: jint): AOEGLContext; static; overload;
    class function eglDestroyContext(para1: AOEGLDisplay; para2: AOEGLContext): jboolean; static; overload;
    class function eglMakeCurrent(para1: AOEGLDisplay; para2: AOEGLSurface; para3: AOEGLSurface; para4: AOEGLContext): jboolean; static; overload;
    class function eglGetCurrentContext(): AOEGLContext; static; overload;
    class function eglGetCurrentSurface(para1: jint): AOEGLSurface; static; overload;
    class function eglGetCurrentDisplay(): AOEGLDisplay; static; overload;
    class function eglQueryContext(para1: AOEGLDisplay; para2: AOEGLContext; para3: jint; para4: Arr1jint; para5: jint): jboolean; static; overload;
    class function eglQueryContext(para1: AOEGLDisplay; para2: AOEGLContext; para3: jint; var para4: array of jint; para5: jint): jboolean; static; overload;
    class function eglWaitGL(): jboolean; static; overload;
    class function eglWaitNative(para1: jint): jboolean; static; overload;
    class function eglSwapBuffers(para1: AOEGLDisplay; para2: AOEGLSurface): jboolean; static; overload;
    class function eglCopyBuffers(para1: AOEGLDisplay; para2: AOEGLSurface; para3: jint): jboolean; static; overload;
  end;

  AOEGLObjectHandle = class abstract external 'android.opengl' name 'EGLObjectHandle' (JLObject)
  strict protected
    constructor create(para1: jint); overload;
    constructor create(para1: jlong); overload;
  public
    function getHandle(): jint; overload; virtual;
    function getNativeHandle(): jlong; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  AOUserManager = class external 'android.os' name 'UserManager' (JLObject)
  public
    const
      DISALLOW_ADD_USER = 'no_add_user';
      DISALLOW_ADJUST_VOLUME = 'no_adjust_volume';
      DISALLOW_APPS_CONTROL = 'no_control_apps';
      DISALLOW_CONFIG_BLUETOOTH = 'no_config_bluetooth';
      DISALLOW_CONFIG_CELL_BROADCASTS = 'no_config_cell_broadcasts';
      DISALLOW_CONFIG_CREDENTIALS = 'no_config_credentials';
      DISALLOW_CONFIG_MOBILE_NETWORKS = 'no_config_mobile_networks';
      DISALLOW_CONFIG_TETHERING = 'no_config_tethering';
      DISALLOW_CONFIG_VPN = 'no_config_vpn';
      DISALLOW_CONFIG_WIFI = 'no_config_wifi';
      DISALLOW_CREATE_WINDOWS = 'no_create_windows';
      DISALLOW_CROSS_PROFILE_COPY_PASTE = 'no_cross_profile_copy_paste';
      DISALLOW_DEBUGGING_FEATURES = 'no_debugging_features';
      DISALLOW_FACTORY_RESET = 'no_factory_reset';
      DISALLOW_INSTALL_APPS = 'no_install_apps';
      DISALLOW_INSTALL_UNKNOWN_SOURCES = 'no_install_unknown_sources';
      DISALLOW_MODIFY_ACCOUNTS = 'no_modify_accounts';
      DISALLOW_MOUNT_PHYSICAL_MEDIA = 'no_physical_media';
      DISALLOW_OUTGOING_CALLS = 'no_outgoing_calls';
      DISALLOW_REMOVE_USER = 'no_remove_user';
      DISALLOW_SHARE_LOCATION = 'no_share_location';
      DISALLOW_SMS = 'no_sms';
      DISALLOW_UNINSTALL_APPS = 'no_uninstall_apps';
      DISALLOW_UNMUTE_MICROPHONE = 'no_unmute_microphone';
      DISALLOW_USB_FILE_TRANSFER = 'no_usb_file_transfer';
      ENSURE_VERIFY_APPS = 'ensure_verify_apps';
  public
    function getUserName(): JLString; overload; virtual;
    function isUserAGoat(): jboolean; overload; virtual;
    function isUserRunning(para1: AOUserHandle): jboolean; overload; virtual;
    function isUserRunningOrStopping(para1: AOUserHandle): jboolean; overload; virtual;
    function getUserRestrictions(): AOBundle; overload; virtual;
    function getUserRestrictions(para1: AOUserHandle): AOBundle; overload; virtual;
    procedure setUserRestrictions(para1: AOBundle); overload; virtual;
    procedure setUserRestrictions(para1: AOBundle; para2: AOUserHandle); overload; virtual;
    procedure setUserRestriction(para1: JLString; para2: jboolean); overload; virtual;
    function hasUserRestriction(para1: JLString): jboolean; overload; virtual;
    function getSerialNumberForUser(para1: AOUserHandle): jlong; overload; virtual;
    function getUserForSerialNumber(para1: jlong): AOUserHandle; overload; virtual;
    function getUserCount(): jint; overload; virtual;
    function getUserProfiles(): JUList; overload; virtual;
    function getApplicationRestrictions(para1: JLString): AOBundle; overload; virtual;
    function setRestrictionsChallenge(para1: JLString): jboolean; overload; virtual;
  end;

  ATCellSignalStrength = class abstract external 'android.telephony' name 'CellSignalStrength' (JLObject)
  public
    function getLevel(): jint; overload; virtual; abstract;
    function getAsuLevel(): jint; overload; virtual; abstract;
    function getDbm(): jint; overload; virtual; abstract;
    function hashCode(): jint; overload; virtual; abstract;
    function equals(para1: JLObject): jboolean; overload; virtual; abstract;
  end;

  AUAtomicFile = class external 'android.util' name 'AtomicFile' (JLObject)
  public
    constructor create(para1: JIFile); overload;
    function getBaseFile(): JIFile; overload; virtual;
    procedure delete(); overload; virtual;
    function startWrite(): JIFileOutputStream; overload; virtual;  // throws java.io.IOException
    procedure finishWrite(para1: JIFileOutputStream); overload; virtual;
    procedure failWrite(para1: JIFileOutputStream); overload; virtual;
    function openRead(): JIFileInputStream; overload; virtual;  // throws java.io.FileNotFoundException
    function readFully(): Arr1jbyte; overload; virtual;  // throws java.io.IOException
  end;

  AOEGLConfig = class external 'android.opengl' name 'EGLConfig' (AOEGLObjectHandle)
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  AOEGLContext = class external 'android.opengl' name 'EGLContext' (AOEGLObjectHandle)
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  AOEGLDisplay = class external 'android.opengl' name 'EGLDisplay' (AOEGLObjectHandle)
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  AOEGLSurface = class external 'android.opengl' name 'EGLSurface' (AOEGLObjectHandle)
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  AOUserHandle = class sealed external 'android.os' name 'UserHandle' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: AOParcel); overload;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    class procedure writeToParcel(para1: AOUserHandle; para2: AOParcel); static; overload;
    class function readFromParcel(para1: AOParcel): AOUserHandle; static; overload;
  end;

  ATCellIdentityCdma = class sealed external 'android.telephony' name 'CellIdentityCdma' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getNetworkId(): jint; overload; virtual;
    function getSystemId(): jint; overload; virtual;
    function getBasestationId(): jint; overload; virtual;
    function getLongitude(): jint; overload; virtual;
    function getLatitude(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATCellIdentityGsm = class sealed external 'android.telephony' name 'CellIdentityGsm' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getMcc(): jint; overload; virtual;
    function getMnc(): jint; overload; virtual;
    function getLac(): jint; overload; virtual;
    function getCid(): jint; overload; virtual;
    function getPsc(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATCellIdentityLte = class sealed external 'android.telephony' name 'CellIdentityLte' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getMcc(): jint; overload; virtual;
    function getMnc(): jint; overload; virtual;
    function getCi(): jint; overload; virtual;
    function getPci(): jint; overload; virtual;
    function getTac(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATCellInfo = class abstract external 'android.telephony' name 'CellInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function isRegistered(): jboolean; overload; virtual;
    function getTimeStamp(): jlong; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual; abstract;
  end;

  ATCellSignalStrengthCdma = class sealed external 'android.telephony' name 'CellSignalStrengthCdma' (ATCellSignalStrength, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getLevel(): jint; overload; virtual;
    function getAsuLevel(): jint; overload; virtual;
    function getCdmaLevel(): jint; overload; virtual;
    function getEvdoLevel(): jint; overload; virtual;
    function getDbm(): jint; overload; virtual;
    function getCdmaDbm(): jint; overload; virtual;
    function getCdmaEcio(): jint; overload; virtual;
    function getEvdoDbm(): jint; overload; virtual;
    function getEvdoEcio(): jint; overload; virtual;
    function getEvdoSnr(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  ATCellSignalStrengthGsm = class sealed external 'android.telephony' name 'CellSignalStrengthGsm' (ATCellSignalStrength, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getLevel(): jint; overload; virtual;
    function getDbm(): jint; overload; virtual;
    function getAsuLevel(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  ATCellSignalStrengthLte = class sealed external 'android.telephony' name 'CellSignalStrengthLte' (ATCellSignalStrength, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getLevel(): jint; overload; virtual;
    function getDbm(): jint; overload; virtual;
    function getAsuLevel(): jint; overload; virtual;
    function getTimingAdvance(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AWJavascriptInterface = interface external 'android.webkit' name 'JavascriptInterface' (JLAAnnotation)
  end;

  ATCellInfoCdma = class sealed external 'android.telephony' name 'CellInfoCdma' (ATCellInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getCellIdentity(): ATCellIdentityCdma; overload; virtual;
    function getCellSignalStrength(): ATCellSignalStrengthCdma; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATCellInfoGsm = class sealed external 'android.telephony' name 'CellInfoGsm' (ATCellInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getCellIdentity(): ATCellIdentityGsm; overload; virtual;
    function getCellSignalStrength(): ATCellSignalStrengthGsm; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATCellInfoLte = class sealed external 'android.telephony' name 'CellInfoLte' (ATCellInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getCellIdentity(): ATCellIdentityLte; overload; virtual;
    function getCellSignalStrength(): ATCellSignalStrengthLte; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ARScriptGroup = class sealed external 'android.renderscript' name 'ScriptGroup' (ARBaseObj)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.renderscript' name 'Builder' (JLObject)
      public
        constructor create(para1: ARRenderScript); overload;
        function addKernel(para1: ARScript.InnerKernelID): ARScriptGroup.InnerBuilder; overload; virtual;
        function addConnection(para1: ARType; para2: ARScript.InnerKernelID; para3: ARScript.InnerFieldID): ARScriptGroup.InnerBuilder; overload; virtual;
        function addConnection(para1: ARType; para2: ARScript.InnerKernelID; para3: ARScript.InnerKernelID): ARScriptGroup.InnerBuilder; overload; virtual;
        function create_(): ARScriptGroup; external name 'create'; overload; virtual;
      end;

  public
    procedure setInput(para1: ARScript.InnerKernelID; para2: ARAllocation); overload; virtual;
    procedure setOutput(para1: ARScript.InnerKernelID; para2: ARAllocation); overload; virtual;
    procedure execute(); overload; virtual;
  end;

  ARScriptIntrinsic = class abstract external 'android.renderscript' name 'ScriptIntrinsic' (ARScript)
  end;

  ARScriptIntrinsicBlend = class external 'android.renderscript' name 'ScriptIntrinsicBlend' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsicBlend; static; external name 'create'; overload;
    procedure forEachClear(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachClear(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDClear(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachSrc(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachSrc(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDSrc(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachDst(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachDst(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDDst(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachSrcOver(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachSrcOver(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDSrcOver(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachDstOver(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachDstOver(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDDstOver(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachSrcIn(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachSrcIn(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDSrcIn(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachDstIn(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachDstIn(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDDstIn(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachSrcOut(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachSrcOut(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDSrcOut(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachDstOut(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachDstOut(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDDstOut(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachSrcAtop(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachSrcAtop(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDSrcAtop(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachDstAtop(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachDstAtop(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDDstAtop(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachXor(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachXor(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDXor(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachMultiply(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachMultiply(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDMultiply(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachAdd(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachAdd(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDAdd(): ARScript.InnerKernelID; overload; virtual;
    procedure forEachSubtract(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEachSubtract(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelIDSubtract(): ARScript.InnerKernelID; overload; virtual;
  end;

  ARScriptIntrinsicBlur = class sealed external 'android.renderscript' name 'ScriptIntrinsicBlur' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsicBlur; static; external name 'create'; overload;
    procedure setInput(para1: ARAllocation); overload; virtual;
    procedure setRadius(para1: jfloat); overload; virtual;
    procedure forEach(para1: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelID(): ARScript.InnerKernelID; overload; virtual;
    function getFieldID_Input(): ARScript.InnerFieldID; overload; virtual;
  end;

  ARScriptIntrinsicColorMatrix = class sealed external 'android.renderscript' name 'ScriptIntrinsicColorMatrix' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsicColorMatrix; static; external name 'create'; overload;
    class function create_(para1: ARRenderScript): ARScriptIntrinsicColorMatrix; static; external name 'create'; overload;
    procedure setColorMatrix(para1: ARMatrix4f); overload; virtual;
    procedure setColorMatrix(para1: ARMatrix3f); overload; virtual;
    procedure setAdd(para1: ARFloat4); overload; virtual;
    procedure setAdd(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure setGreyscale(); overload; virtual;
    procedure setYUVtoRGB(); overload; virtual;
    procedure setRGBtoYUV(); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelID(): ARScript.InnerKernelID; overload; virtual;
  end;

  ARScriptIntrinsicConvolve3x3 = class sealed external 'android.renderscript' name 'ScriptIntrinsicConvolve3x3' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsicConvolve3x3; static; external name 'create'; overload;
    procedure setInput(para1: ARAllocation); overload; virtual;
    procedure setCoefficients(para1: Arr1jfloat); overload; virtual;
    procedure setCoefficients(var para1: array of jfloat); overload; virtual;
    procedure forEach(para1: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelID(): ARScript.InnerKernelID; overload; virtual;
    function getFieldID_Input(): ARScript.InnerFieldID; overload; virtual;
  end;

  ARScriptIntrinsicConvolve5x5 = class sealed external 'android.renderscript' name 'ScriptIntrinsicConvolve5x5' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsicConvolve5x5; static; external name 'create'; overload;
    procedure setInput(para1: ARAllocation); overload; virtual;
    procedure setCoefficients(para1: Arr1jfloat); overload; virtual;
    procedure setCoefficients(var para1: array of jfloat); overload; virtual;
    procedure forEach(para1: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelID(): ARScript.InnerKernelID; overload; virtual;
    function getFieldID_Input(): ARScript.InnerFieldID; overload; virtual;
  end;

  ARScriptIntrinsicLUT = class sealed external 'android.renderscript' name 'ScriptIntrinsicLUT' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsicLUT; static; external name 'create'; overload;
    procedure setRed(para1: jint; para2: jint); overload; virtual;
    procedure setGreen(para1: jint; para2: jint); overload; virtual;
    procedure setBlue(para1: jint; para2: jint); overload; virtual;
    procedure setAlpha(para1: jint; para2: jint); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelID(): ARScript.InnerKernelID; overload; virtual;
  end;

  ARScriptIntrinsicYuvToRGB = class sealed external 'android.renderscript' name 'ScriptIntrinsicYuvToRGB' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsicYuvToRGB; static; external name 'create'; overload;
    procedure setInput(para1: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation); overload; virtual;
    function getKernelID(): ARScript.InnerKernelID; overload; virtual;
    function getFieldID_Input(): ARScript.InnerFieldID; overload; virtual;
  end;

  ATSLocaleSpan = class external 'android.text.style' name 'LocaleSpan' (ATSMetricAffectingSpan, ATParcelableSpan)
  public
    constructor create(para1: JULocale); overload;
    constructor create(para1: AOParcel); overload;
    function getSpanTypeId(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getLocale(): JULocale; overload; virtual;
    procedure updateDrawState(para1: ATTextPaint); overload; virtual;
    procedure updateMeasureState(para1: ATTextPaint); overload; virtual;
  end;

  ANTNfcBarcode = class sealed external 'android.nfc.tech' name 'NfcBarcode' (ANTBasicTagTechnology)
  public
    const
      TYPE_KOVIO = 1;
      TYPE_UNKNOWN = -1;
  public
    class function get(para1: ANTag): ANTNfcBarcode; static; overload;
    function getType(): jint; overload; virtual;
    function getBarcode(): Arr1jbyte; overload; virtual;
    procedure close(); overload; virtual;  // throws java.io.IOException
    procedure connect(); overload; virtual;  // throws java.io.IOException
    function isConnected(): jboolean; overload; virtual;
    function getTag(): ANTag; overload; virtual;
  end;

  ASDDreamService = class external 'android.service.dreams' name 'DreamService' (AAService, AVWindow.InnerCallback)
  public
    const
      DREAM_META_DATA = 'android.service.dream';
      SERVICE_INTERFACE = 'android.service.dreams.DreamService';
  public
    constructor create(); overload;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchKeyShortcutEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
    function onCreatePanelView(para1: jint): AVView; overload; virtual;
    function onCreatePanelMenu(para1: jint; para2: AVMenu): jboolean; overload; virtual;
    function onPreparePanel(para1: jint; para2: AVView; para3: AVMenu): jboolean; overload; virtual;
    function onMenuOpened(para1: jint; para2: AVMenu): jboolean; overload; virtual;
    function onMenuItemSelected(para1: jint; para2: AVMenuItem): jboolean; overload; virtual;
    procedure onWindowAttributesChanged(para1: AVWindowManager.InnerLayoutParams); overload; virtual;
    procedure onContentChanged(); overload; virtual;
    procedure onWindowFocusChanged(para1: jboolean); overload; virtual;
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onPanelClosed(para1: jint; para2: AVMenu); overload; virtual;
    function onSearchRequested(): jboolean; overload; virtual;
    function onWindowStartingActionMode(para1: AVActionMode.InnerCallback): AVActionMode; overload; virtual;
    procedure onActionModeStarted(para1: AVActionMode); overload; virtual;
    procedure onActionModeFinished(para1: AVActionMode); overload; virtual;
    function getWindowManager(): AVWindowManager; overload; virtual;
    function getWindow(): AVWindow; overload; virtual;
    procedure setContentView(para1: jint); overload; virtual;
    procedure setContentView(para1: AVView); overload; virtual;
    procedure setContentView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    procedure addContentView(para1: AVView; para2: AVViewGroup_LayoutParams); overload; virtual;
    function findViewById(para1: jint): AVView; overload; virtual;
    procedure setInteractive(para1: jboolean); overload; virtual;
    function isInteractive(): jboolean; overload; virtual;
    procedure setFullscreen(para1: jboolean); overload; virtual;
    function isFullscreen(): jboolean; overload; virtual;
    procedure setScreenBright(para1: jboolean); overload; virtual;
    function isScreenBright(): jboolean; overload; virtual;
    procedure onCreate(); overload; virtual;
    procedure onDreamingStarted(); overload; virtual;
    procedure onDreamingStopped(); overload; virtual;
    procedure onWakeUp(); overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
    procedure finish(); overload; virtual; final;
    procedure wakeUp(); overload; virtual; final;
    procedure onDestroy(); overload; virtual;
  strict protected
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
  end;

  AAPresentation = class external 'android.app' name 'Presentation' (AADialog)
  public
    constructor create(para1: ACContext; para2: AVDisplay); overload;
    constructor create(para1: ACContext; para2: AVDisplay; para3: jint); overload;
    function getDisplay(): AVDisplay; overload; virtual;
    function getResources(): ACRResources; overload; virtual;
  strict protected
    procedure onStart(); overload; virtual;
    procedure onStop(); overload; virtual;
  public
    procedure show(); overload; virtual;
    procedure onDisplayRemoved(); overload; virtual;
    procedure onDisplayChanged(); overload; virtual;
  end;

  AWTextClock = class external 'android.widget' name 'TextClock' (AWTextView)
  public
    final class var
      fDEFAULT_FORMAT_12_HOUR: JLCharSequence deprecated; external name 'DEFAULT_FORMAT_12_HOUR';
      fDEFAULT_FORMAT_24_HOUR: JLCharSequence deprecated; external name 'DEFAULT_FORMAT_24_HOUR';
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    function getFormat12Hour(): JLCharSequence; overload; virtual;
    procedure setFormat12Hour(para1: JLCharSequence); overload; virtual;
    function getFormat24Hour(): JLCharSequence; overload; virtual;
    procedure setFormat24Hour(para1: JLCharSequence); overload; virtual;
    function is24HourModeEnabled(): jboolean; overload; virtual;
    function getTimeZone(): JLString; overload; virtual;
    procedure setTimeZone(para1: JLString); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  end;

  AAUiAutomation = class sealed external 'android.app' name 'UiAutomation' (JLObject)
  public
    type
      InnerAccessibilityEventFilter = interface;
      Arr1InnerAccessibilityEventFilter = array of InnerAccessibilityEventFilter;
      Arr2InnerAccessibilityEventFilter = array of Arr1InnerAccessibilityEventFilter;
      Arr3InnerAccessibilityEventFilter = array of Arr2InnerAccessibilityEventFilter;
      InnerOnAccessibilityEventListener = interface;
      Arr1InnerOnAccessibilityEventListener = array of InnerOnAccessibilityEventListener;
      Arr2InnerOnAccessibilityEventListener = array of Arr1InnerOnAccessibilityEventListener;
      Arr3InnerOnAccessibilityEventListener = array of Arr2InnerOnAccessibilityEventListener;
      InnerAccessibilityEventFilter = interface external 'android.app' name 'AccessibilityEventFilter' 
        function accept(para1: AVAAccessibilityEvent): jboolean; overload;
      end;

      InnerOnAccessibilityEventListener = interface external 'android.app' name 'OnAccessibilityEventListener' 
        procedure onAccessibilityEvent(para1: AVAAccessibilityEvent); overload;
      end;

  public
    const
      ROTATION_FREEZE_0 = 0;
      ROTATION_FREEZE_180 = 2;
      ROTATION_FREEZE_270 = 3;
      ROTATION_FREEZE_90 = 1;
      ROTATION_FREEZE_CURRENT = -1;
      ROTATION_UNFREEZE = -2;
  public
    procedure setOnAccessibilityEventListener(para1: AAUiAutomation.InnerOnAccessibilityEventListener); overload; virtual;
    function performGlobalAction(para1: jint): jboolean; overload; virtual; final;
    function findFocus(para1: jint): AVAAccessibilityNodeInfo; overload; virtual;
    function getServiceInfo(): AAAccessibilityServiceInfo; overload; virtual; final;
    procedure setServiceInfo(para1: AAAccessibilityServiceInfo); overload; virtual; final;
    function getWindows(): JUList; overload; virtual;
    function getRootInActiveWindow(): AVAAccessibilityNodeInfo; overload; virtual;
    function injectInputEvent(para1: AVInputEvent; para2: jboolean): jboolean; overload; virtual;
    function setRotation(para1: jint): jboolean; overload; virtual;
    function executeAndWaitForEvent(para1: JLRunnable; para2: AAUiAutomation.InnerAccessibilityEventFilter; para3: jlong): AVAAccessibilityEvent; overload; virtual;  // throws java.util.concurrent.TimeoutException
    procedure waitForIdle(para1: jlong; para2: jlong); overload; virtual;  // throws java.util.concurrent.TimeoutException
    function takeScreenshot(): AGBitmap; overload; virtual;
    procedure setRunAsMonkey(para1: jboolean); overload; virtual;
    function clearWindowContentFrameStats(para1: jint): jboolean; overload; virtual;
    function getWindowContentFrameStats(para1: jint): AVWindowContentFrameStats; overload; virtual;
    procedure clearWindowAnimationFrameStats(); overload; virtual;
    function getWindowAnimationFrameStats(): AVWindowAnimationFrameStats; overload; virtual;
    function executeShellCommand(para1: JLString): AOParcelFileDescriptor; overload; virtual;
  end;

  ABBluetoothGattCallback = class abstract external 'android.bluetooth' name 'BluetoothGattCallback' (JLObject)
  public
    constructor create(); overload;
    procedure onConnectionStateChange(para1: ABBluetoothGatt; para2: jint; para3: jint); overload; virtual;
    procedure onServicesDiscovered(para1: ABBluetoothGatt; para2: jint); overload; virtual;
    procedure onCharacteristicRead(para1: ABBluetoothGatt; para2: ABBluetoothGattCharacteristic; para3: jint); overload; virtual;
    procedure onCharacteristicWrite(para1: ABBluetoothGatt; para2: ABBluetoothGattCharacteristic; para3: jint); overload; virtual;
    procedure onCharacteristicChanged(para1: ABBluetoothGatt; para2: ABBluetoothGattCharacteristic); overload; virtual;
    procedure onDescriptorRead(para1: ABBluetoothGatt; para2: ABBluetoothGattDescriptor; para3: jint); overload; virtual;
    procedure onDescriptorWrite(para1: ABBluetoothGatt; para2: ABBluetoothGattDescriptor; para3: jint); overload; virtual;
    procedure onReliableWriteCompleted(para1: ABBluetoothGatt; para2: jint); overload; virtual;
    procedure onReadRemoteRssi(para1: ABBluetoothGatt; para2: jint; para3: jint); overload; virtual;
    procedure onMtuChanged(para1: ABBluetoothGatt; para2: jint; para3: jint); overload; virtual;
  end;

  ABBluetoothGattCharacteristic = class external 'android.bluetooth' name 'BluetoothGattCharacteristic' (JLObject)
  public
    const
      FORMAT_FLOAT = 52;
      FORMAT_SFLOAT = 50;
      FORMAT_SINT16 = 34;
      FORMAT_SINT32 = 36;
      FORMAT_SINT8 = 33;
      FORMAT_UINT16 = 18;
      FORMAT_UINT32 = 20;
      FORMAT_UINT8 = 17;
      PERMISSION_READ = 1;
      PERMISSION_READ_ENCRYPTED = 2;
      PERMISSION_READ_ENCRYPTED_MITM = 4;
      PERMISSION_WRITE = 16;
      PERMISSION_WRITE_ENCRYPTED = 32;
      PERMISSION_WRITE_ENCRYPTED_MITM = 64;
      PERMISSION_WRITE_SIGNED = 128;
      PERMISSION_WRITE_SIGNED_MITM = 256;
      PROPERTY_BROADCAST = 1;
      PROPERTY_EXTENDED_PROPS = 128;
      PROPERTY_INDICATE = 32;
      PROPERTY_NOTIFY = 16;
      PROPERTY_READ = 2;
      PROPERTY_SIGNED_WRITE = 64;
      PROPERTY_WRITE = 8;
      PROPERTY_WRITE_NO_RESPONSE = 4;
      WRITE_TYPE_DEFAULT = 2;
      WRITE_TYPE_NO_RESPONSE = 1;
      WRITE_TYPE_SIGNED = 4;
  strict protected
    var
      fmDescriptors: JUList; external name 'mDescriptors';
  public
    constructor create(para1: JUUUID; para2: jint; para3: jint); overload;
    function addDescriptor(para1: ABBluetoothGattDescriptor): jboolean; overload; virtual;
    function getService(): ABBluetoothGattService; overload; virtual;
    function getUuid(): JUUUID; overload; virtual;
    function getInstanceId(): jint; overload; virtual;
    function getProperties(): jint; overload; virtual;
    function getPermissions(): jint; overload; virtual;
    function getWriteType(): jint; overload; virtual;
    procedure setWriteType(para1: jint); overload; virtual;
    function getDescriptors(): JUList; overload; virtual;
    function getDescriptor(para1: JUUUID): ABBluetoothGattDescriptor; overload; virtual;
    function getValue(): Arr1jbyte; overload; virtual;
    function getIntValue(para1: jint; para2: jint): JLInteger; overload; virtual;
    function getFloatValue(para1: jint; para2: jint): JLFloat; overload; virtual;
    function getStringValue(para1: jint): JLString; overload; virtual;
    function setValue(para1: Arr1jbyte): jboolean; overload; virtual;
    function setValue(var para1: array of jbyte): jboolean; overload; virtual;
    function setValue(para1: jint; para2: jint; para3: jint): jboolean; overload; virtual;
    function setValue(para1: jint; para2: jint; para3: jint; para4: jint): jboolean; overload; virtual;
    function setValue(para1: JLString): jboolean; overload; virtual;
  end;

  ABBluetoothGattDescriptor = class external 'android.bluetooth' name 'BluetoothGattDescriptor' (JLObject)
  public
    final class var
      fDISABLE_NOTIFICATION_VALUE: Arr1jbyte; external name 'DISABLE_NOTIFICATION_VALUE';
      fENABLE_INDICATION_VALUE: Arr1jbyte; external name 'ENABLE_INDICATION_VALUE';
      fENABLE_NOTIFICATION_VALUE: Arr1jbyte; external name 'ENABLE_NOTIFICATION_VALUE';
  public
    const
      PERMISSION_READ = 1;
      PERMISSION_READ_ENCRYPTED = 2;
      PERMISSION_READ_ENCRYPTED_MITM = 4;
      PERMISSION_WRITE = 16;
      PERMISSION_WRITE_ENCRYPTED = 32;
      PERMISSION_WRITE_ENCRYPTED_MITM = 64;
      PERMISSION_WRITE_SIGNED = 128;
      PERMISSION_WRITE_SIGNED_MITM = 256;
  public
    constructor create(para1: JUUUID; para2: jint); overload;
    function getCharacteristic(): ABBluetoothGattCharacteristic; overload; virtual;
    function getUuid(): JUUUID; overload; virtual;
    function getPermissions(): jint; overload; virtual;
    function getValue(): Arr1jbyte; overload; virtual;
    function setValue(para1: Arr1jbyte): jboolean; overload; virtual;
    function setValue(var para1: array of jbyte): jboolean; overload; virtual;
  end;

  ABBluetoothGattServerCallback = class abstract external 'android.bluetooth' name 'BluetoothGattServerCallback' (JLObject)
  public
    constructor create(); overload;
    procedure onConnectionStateChange(para1: ABBluetoothDevice; para2: jint; para3: jint); overload; virtual;
    procedure onServiceAdded(para1: jint; para2: ABBluetoothGattService); overload; virtual;
    procedure onCharacteristicReadRequest(para1: ABBluetoothDevice; para2: jint; para3: jint; para4: ABBluetoothGattCharacteristic); overload; virtual;
    procedure onCharacteristicWriteRequest(para1: ABBluetoothDevice; para2: jint; para3: ABBluetoothGattCharacteristic; para4: jboolean; para5: jboolean; para6: jint; para7: Arr1jbyte); overload; virtual;
    procedure onCharacteristicWriteRequest(para1: ABBluetoothDevice; para2: jint; para3: ABBluetoothGattCharacteristic; para4: jboolean; para5: jboolean; para6: jint; var para7: array of jbyte); overload; virtual;
    procedure onDescriptorReadRequest(para1: ABBluetoothDevice; para2: jint; para3: jint; para4: ABBluetoothGattDescriptor); overload; virtual;
    procedure onDescriptorWriteRequest(para1: ABBluetoothDevice; para2: jint; para3: ABBluetoothGattDescriptor; para4: jboolean; para5: jboolean; para6: jint; para7: Arr1jbyte); overload; virtual;
    procedure onDescriptorWriteRequest(para1: ABBluetoothDevice; para2: jint; para3: ABBluetoothGattDescriptor; para4: jboolean; para5: jboolean; para6: jint; var para7: array of jbyte); overload; virtual;
    procedure onExecuteWrite(para1: ABBluetoothDevice; para2: jint; para3: jboolean); overload; virtual;
    procedure onNotificationSent(para1: ABBluetoothDevice; para2: jint); overload; virtual;
  end;

  ABBluetoothGattService = class external 'android.bluetooth' name 'BluetoothGattService' (JLObject)
  public
    const
      SERVICE_TYPE_PRIMARY = 0;
      SERVICE_TYPE_SECONDARY = 1;
  strict protected
    var
      fmCharacteristics: JUList; external name 'mCharacteristics';
      fmIncludedServices: JUList; external name 'mIncludedServices';
  public
    constructor create(para1: JUUUID; para2: jint); overload;
    function addService(para1: ABBluetoothGattService): jboolean; overload; virtual;
    function addCharacteristic(para1: ABBluetoothGattCharacteristic): jboolean; overload; virtual;
    function getUuid(): JUUUID; overload; virtual;
    function getInstanceId(): jint; overload; virtual;
    function getType(): jint; overload; virtual;
    function getIncludedServices(): JUList; overload; virtual;
    function getCharacteristics(): JUList; overload; virtual;
    function getCharacteristic(para1: JUUUID): ABBluetoothGattCharacteristic; overload; virtual;
  end;

  ABBluetoothManager = class sealed external 'android.bluetooth' name 'BluetoothManager' (JLObject)
  public
    function getAdapter(): ABBluetoothAdapter; overload; virtual;
    function getConnectionState(para1: ABBluetoothDevice; para2: jint): jint; overload; virtual;
    function getConnectedDevices(para1: jint): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(para1: jint; para2: Arr1jint): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(para1: jint; var para2: array of jint): JUList; overload; virtual;
    function openGattServer(para1: ACContext; para2: ABBluetoothGattServerCallback): ABBluetoothGattServer; overload; virtual;
  end;

  AHTriggerEvent = class sealed external 'android.hardware' name 'TriggerEvent' (JLObject)
  public
    var
      fsensor: AHSensor; external name 'sensor';
      ftimestamp: jlong; external name 'timestamp';
  public
    final var
      fvalues: Arr1jfloat; external name 'values';
  end;

  AHTriggerEventListener = class abstract external 'android.hardware' name 'TriggerEventListener' (JLObject)
  public
    constructor create(); overload;
    procedure onTrigger(para1: AHTriggerEvent); overload; virtual; abstract;
  end;

  AMMediaDrm = class sealed external 'android.media' name 'MediaDrm' (JLObject)
  public
    type
      InnerCryptoSession = class;
      Arr1InnerCryptoSession = array of InnerCryptoSession;
      Arr2InnerCryptoSession = array of Arr1InnerCryptoSession;
      Arr3InnerCryptoSession = array of Arr2InnerCryptoSession;
      InnerProvisionRequest = class;
      Arr1InnerProvisionRequest = array of InnerProvisionRequest;
      Arr2InnerProvisionRequest = array of Arr1InnerProvisionRequest;
      Arr3InnerProvisionRequest = array of Arr2InnerProvisionRequest;
      InnerKeyRequest = class;
      Arr1InnerKeyRequest = array of InnerKeyRequest;
      Arr2InnerKeyRequest = array of Arr1InnerKeyRequest;
      Arr3InnerKeyRequest = array of Arr2InnerKeyRequest;
      InnerOnEventListener = interface;
      Arr1InnerOnEventListener = array of InnerOnEventListener;
      Arr2InnerOnEventListener = array of Arr1InnerOnEventListener;
      Arr3InnerOnEventListener = array of Arr2InnerOnEventListener;
      InnerMediaDrmStateException = class;
      Arr1InnerMediaDrmStateException = array of InnerMediaDrmStateException;
      Arr2InnerMediaDrmStateException = array of Arr1InnerMediaDrmStateException;
      Arr3InnerMediaDrmStateException = array of Arr2InnerMediaDrmStateException;
      InnerCryptoSession = class sealed external 'android.media' name 'CryptoSession' 
      end;

      InnerProvisionRequest = class sealed external 'android.media' name 'ProvisionRequest' (JLObject)
      public
        function getData(): Arr1jbyte; overload; virtual;
        function getDefaultUrl(): JLString; overload; virtual;
      end;

      InnerKeyRequest = class sealed external 'android.media' name 'KeyRequest' (JLObject)
      public
        function getData(): Arr1jbyte; overload; virtual;
        function getDefaultUrl(): JLString; overload; virtual;
      end;

      InnerOnEventListener = interface external 'android.media' name 'OnEventListener' 
        procedure onEvent(para1: AMMediaDrm; para2: Arr1jbyte; para3: jint; para4: jint; para5: Arr1jbyte); overload;
        procedure onEvent(para1: AMMediaDrm; var para2: array of jbyte; para3: jint; para4: jint; var para5: array of jbyte); overload;
      end;

      InnerMediaDrmStateException = class sealed external 'android.media' name 'MediaDrmStateException' (JLIllegalStateException)
      public
        function getDiagnosticInfo(): JLString; overload; virtual;
      end;

  public
    const
      EVENT_KEY_EXPIRED = 3;
      EVENT_KEY_REQUIRED = 2;
      EVENT_PROVISION_REQUIRED = 1;
      EVENT_VENDOR_DEFINED = 4;
      KEY_TYPE_OFFLINE = 2;
      KEY_TYPE_RELEASE = 3;
      KEY_TYPE_STREAMING = 1;
      PROPERTY_ALGORITHMS = 'algorithms';
      PROPERTY_DESCRIPTION = 'description';
      PROPERTY_DEVICE_UNIQUE_ID = 'deviceUniqueId';
      PROPERTY_VENDOR = 'vendor';
      PROPERTY_VERSION = 'version';
  public
    constructor create(para1: JUUUID); overload;  // throws android.media.UnsupportedSchemeException
    class function isCryptoSchemeSupported(para1: JUUUID): jboolean; static; overload; final;
    class function isCryptoSchemeSupported(para1: JUUUID; para2: JLString): jboolean; static; overload; final;
    procedure setOnEventListener(para1: AMMediaDrm.InnerOnEventListener); overload; virtual;
    function openSession(): Arr1jbyte; overload; virtual;  // throws android.media.NotProvisionedException, android.media.ResourceBusyException
    procedure closeSession(para1: Arr1jbyte); overload; virtual;
    procedure closeSession(var para1: array of jbyte); overload; virtual;
    function getKeyRequest(para1: Arr1jbyte; para2: Arr1jbyte; para3: JLString; para4: jint; para5: JUHashMap): AMMediaDrm.InnerKeyRequest; overload; virtual;  // throws android.media.NotProvisionedException
    function getKeyRequest(var para1: array of jbyte; var para2: array of jbyte; para3: JLString; para4: jint; para5: JUHashMap): AMMediaDrm.InnerKeyRequest; overload; virtual;  // throws android.media.NotProvisionedException
    function provideKeyResponse(para1: Arr1jbyte; para2: Arr1jbyte): Arr1jbyte; overload; virtual;  // throws android.media.NotProvisionedException, android.media.DeniedByServerException
    function provideKeyResponse(var para1: array of jbyte; var para2: array of jbyte): Arr1jbyte; overload; virtual;  // throws android.media.NotProvisionedException, android.media.DeniedByServerException
    procedure restoreKeys(para1: Arr1jbyte; para2: Arr1jbyte); overload; virtual;
    procedure restoreKeys(var para1: array of jbyte; var para2: array of jbyte); overload; virtual;
    procedure removeKeys(para1: Arr1jbyte); overload; virtual;
    procedure removeKeys(var para1: array of jbyte); overload; virtual;
    function queryKeyStatus(para1: Arr1jbyte): JUHashMap; overload; virtual;
    function queryKeyStatus(var para1: array of jbyte): JUHashMap; overload; virtual;
    function getProvisionRequest(): AMMediaDrm.InnerProvisionRequest; overload; virtual;
    procedure provideProvisionResponse(para1: Arr1jbyte); overload; virtual;  // throws android.media.DeniedByServerException
    procedure provideProvisionResponse(var para1: array of jbyte); overload; virtual;  // throws android.media.DeniedByServerException
    function getSecureStops(): JUList; overload; virtual;
    procedure releaseSecureStops(para1: Arr1jbyte); overload; virtual;
    procedure releaseSecureStops(var para1: array of jbyte); overload; virtual;
    function getPropertyString(para1: JLString): JLString; overload; virtual;
    function getPropertyByteArray(para1: JLString): Arr1jbyte; overload; virtual;
    procedure setPropertyString(para1: JLString; para2: JLString); overload; virtual;
    procedure setPropertyByteArray(para1: JLString; para2: Arr1jbyte); overload; virtual;
    procedure setPropertyByteArray(para1: JLString; var para2: array of jbyte); overload; virtual;
    function getCryptoSession(para1: Arr1jbyte; para2: JLString; para3: JLString): AMMediaDrm.InnerCryptoSession; overload; virtual;
    function getCryptoSession(var para1: array of jbyte; para2: JLString; para3: JLString): AMMediaDrm.InnerCryptoSession; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;
  public
    procedure release(); overload; virtual; final;
  end;

  AOEGLExt = class external 'android.opengl' name 'EGLExt' (JLObject)
  public
    const
      EGL_CONTEXT_FLAGS_KHR = 12540;
      EGL_CONTEXT_MAJOR_VERSION_KHR = 12440;
      EGL_CONTEXT_MINOR_VERSION_KHR = 12539;
      EGL_OPENGL_ES3_BIT_KHR = 64;
  public
    constructor create(); overload;
    class function eglPresentationTimeANDROID(para1: AOEGLDisplay; para2: AOEGLSurface; para3: jlong): jboolean; static; overload;
  end;

  AOTrace = class sealed external 'android.os' name 'Trace' (JLObject)
  public
    class procedure beginSection(para1: JLString); static; overload;
    class procedure endSection(); static; overload;
  end;

  ATBidiFormatter = class sealed external 'android.text' name 'BidiFormatter' (JLObject)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.text' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        constructor create(para1: jboolean); overload;
        constructor create(para1: JULocale); overload;
        function stereoReset(para1: jboolean): ATBidiFormatter.InnerBuilder; overload; virtual;
        function setTextDirectionHeuristic(para1: ATTextDirectionHeuristic): ATBidiFormatter.InnerBuilder; overload; virtual;
        function build(): ATBidiFormatter; overload; virtual;
      end;

  public
    class function getInstance(): ATBidiFormatter; static; overload;
    class function getInstance(para1: jboolean): ATBidiFormatter; static; overload;
    class function getInstance(para1: JULocale): ATBidiFormatter; static; overload;
    function isRtlContext(): jboolean; overload; virtual;
    function getStereoReset(): jboolean; overload; virtual;
    function isRtl(para1: JLString): jboolean; overload; virtual;
    function unicodeWrap(para1: JLString; para2: ATTextDirectionHeuristic; para3: jboolean): JLString; overload; virtual;
    function unicodeWrap(para1: JLString; para2: ATTextDirectionHeuristic): JLString; overload; virtual;
    function unicodeWrap(para1: JLString; para2: jboolean): JLString; overload; virtual;
    function unicodeWrap(para1: JLString): JLString; overload; virtual;
  end;

  ATTextDirectionHeuristic = interface external 'android.text' name 'TextDirectionHeuristic' 
    function isRtl(para1: Arr1jchar; para2: jint; para3: jint): jboolean; overload;
    function isRtl(var para1: array of jchar; para2: jint; para3: jint): jboolean; overload;
    function isRtl(para1: JLCharSequence; para2: jint; para3: jint): jboolean; overload;
  end;

  ATTextDirectionHeuristics = class external 'android.text' name 'TextDirectionHeuristics' (JLObject)
  public
    final class var
      fANYRTL_LTR: ATTextDirectionHeuristic; external name 'ANYRTL_LTR';
      fFIRSTSTRONG_LTR: ATTextDirectionHeuristic; external name 'FIRSTSTRONG_LTR';
      fFIRSTSTRONG_RTL: ATTextDirectionHeuristic; external name 'FIRSTSTRONG_RTL';
      fLOCALE: ATTextDirectionHeuristic; external name 'LOCALE';
      fLTR: ATTextDirectionHeuristic; external name 'LTR';
      fRTL: ATTextDirectionHeuristic; external name 'RTL';
  public
    constructor create(); overload;
  end;

  AVViewOverlay = class external 'android.view' name 'ViewOverlay' (JLObject)
  public
    procedure add(para1: AGDDrawable); overload; virtual;
    procedure remove(para1: AGDDrawable); overload; virtual;
    procedure clear(); overload; virtual;
  end;

  AMMediaDrmException = class external 'android.media' name 'MediaDrmException' (JLException)
  public
    constructor create(para1: JLString); overload;
  end;

  AUSparseLongArray = class external 'android.util' name 'SparseLongArray' (JLObject, JLCloneable)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    function clone(): AUSparseLongArray; overload; virtual;
    function get(para1: jint): jlong; overload; virtual;
    function get(para1: jint; para2: jlong): jlong; overload; virtual;
    procedure delete(para1: jint); overload; virtual;
    procedure removeAt(para1: jint); overload; virtual;
    procedure put(para1: jint; para2: jlong); overload; virtual;
    function size(): jint; overload; virtual;
    function keyAt(para1: jint): jint; overload; virtual;
    function valueAt(para1: jint): jlong; overload; virtual;
    function indexOfKey(para1: jint): jint; overload; virtual;
    function indexOfValue(para1: jlong): jint; overload; virtual;
    procedure clear(); overload; virtual;
    procedure append(para1: jint; para2: jlong); overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AARectEvaluator = class external 'android.animation' name 'RectEvaluator' (JLObject, AATypeEvaluator)
  public
    constructor create(); overload;
    constructor create(para1: AGRect); overload;
    function evaluate(para1: jfloat; para2: AGRect; para3: AGRect): AGRect; overload; virtual;
    function evaluate(para1: jfloat; para2: JLObject; para3: JLObject): JLObject; overload; virtual;
  end;

  ABBluetoothGatt = class sealed external 'android.bluetooth' name 'BluetoothGatt' (JLObject, ABBluetoothProfile)
  public
    const
      CONNECTION_PRIORITY_BALANCED = 0;
      CONNECTION_PRIORITY_HIGH = 1;
      CONNECTION_PRIORITY_LOW_POWER = 2;
      GATT_CONNECTION_CONGESTED = 143;
      GATT_FAILURE = 257;
      GATT_INSUFFICIENT_AUTHENTICATION = 5;
      GATT_INSUFFICIENT_ENCRYPTION = 15;
      GATT_INVALID_ATTRIBUTE_LENGTH = 13;
      GATT_INVALID_OFFSET = 7;
      GATT_READ_NOT_PERMITTED = 2;
      GATT_REQUEST_NOT_SUPPORTED = 6;
      GATT_SUCCESS = 0;
      GATT_WRITE_NOT_PERMITTED = 3;
  public
    procedure close(); overload; virtual;
    procedure disconnect(); overload; virtual;
    function connect(): jboolean; overload; virtual;
    function getDevice(): ABBluetoothDevice; overload; virtual;
    function discoverServices(): jboolean; overload; virtual;
    function getServices(): JUList; overload; virtual;
    function getService(para1: JUUUID): ABBluetoothGattService; overload; virtual;
    function readCharacteristic(para1: ABBluetoothGattCharacteristic): jboolean; overload; virtual;
    function writeCharacteristic(para1: ABBluetoothGattCharacteristic): jboolean; overload; virtual;
    function readDescriptor(para1: ABBluetoothGattDescriptor): jboolean; overload; virtual;
    function writeDescriptor(para1: ABBluetoothGattDescriptor): jboolean; overload; virtual;
    function beginReliableWrite(): jboolean; overload; virtual;
    function executeReliableWrite(): jboolean; overload; virtual;
    procedure abortReliableWrite(); overload; virtual;
    procedure abortReliableWrite(para1: ABBluetoothDevice); overload; virtual;
    function setCharacteristicNotification(para1: ABBluetoothGattCharacteristic; para2: jboolean): jboolean; overload; virtual;
    function readRemoteRssi(): jboolean; overload; virtual;
    function requestMtu(para1: jint): jboolean; overload; virtual;
    function requestConnectionPriority(para1: jint): jboolean; overload; virtual;
    function getConnectionState(para1: ABBluetoothDevice): jint; overload; virtual;
    function getConnectedDevices(): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(para1: Arr1jint): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(var para1: array of jint): JUList; overload; virtual;
  end;

  ABBluetoothGattServer = class sealed external 'android.bluetooth' name 'BluetoothGattServer' (JLObject, ABBluetoothProfile)
  public
    procedure close(); overload; virtual;
    function connect(para1: ABBluetoothDevice; para2: jboolean): jboolean; overload; virtual;
    procedure cancelConnection(para1: ABBluetoothDevice); overload; virtual;
    function sendResponse(para1: ABBluetoothDevice; para2: jint; para3: jint; para4: jint; para5: Arr1jbyte): jboolean; overload; virtual;
    function sendResponse(para1: ABBluetoothDevice; para2: jint; para3: jint; para4: jint; var para5: array of jbyte): jboolean; overload; virtual;
    function notifyCharacteristicChanged(para1: ABBluetoothDevice; para2: ABBluetoothGattCharacteristic; para3: jboolean): jboolean; overload; virtual;
    function addService(para1: ABBluetoothGattService): jboolean; overload; virtual;
    function removeService(para1: ABBluetoothGattService): jboolean; overload; virtual;
    procedure clearServices(); overload; virtual;
    function getServices(): JUList; overload; virtual;
    function getService(para1: JUUUID): ABBluetoothGattService; overload; virtual;
    function getConnectionState(para1: ABBluetoothDevice): jint; overload; virtual;
    function getConnectedDevices(): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(para1: Arr1jint): JUList; overload; virtual;
    function getDevicesMatchingConnectionStates(var para1: array of jint): JUList; overload; virtual;
  end;

  AOGLES30 = class external 'android.opengl' name 'GLES30' (AOGLES20)
  public
    const
      GL_ACTIVE_UNIFORM_BLOCKS = 35382;
      GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;
      GL_ALREADY_SIGNALED = 37146;
      GL_ANY_SAMPLES_PASSED = 35887;
      GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
      GL_BLUE = 6405;
      GL_BUFFER_ACCESS_FLAGS = 37151;
      GL_BUFFER_MAPPED = 35004;
      GL_BUFFER_MAP_LENGTH = 37152;
      GL_BUFFER_MAP_OFFSET = 37153;
      GL_BUFFER_MAP_POINTER = 35005;
      GL_COLOR = 6144;
      GL_COLOR_ATTACHMENT1 = 36065;
      GL_COLOR_ATTACHMENT10 = 36074;
      GL_COLOR_ATTACHMENT11 = 36075;
      GL_COLOR_ATTACHMENT12 = 36076;
      GL_COLOR_ATTACHMENT13 = 36077;
      GL_COLOR_ATTACHMENT14 = 36078;
      GL_COLOR_ATTACHMENT15 = 36079;
      GL_COLOR_ATTACHMENT2 = 36066;
      GL_COLOR_ATTACHMENT3 = 36067;
      GL_COLOR_ATTACHMENT4 = 36068;
      GL_COLOR_ATTACHMENT5 = 36069;
      GL_COLOR_ATTACHMENT6 = 36070;
      GL_COLOR_ATTACHMENT7 = 36071;
      GL_COLOR_ATTACHMENT8 = 36072;
      GL_COLOR_ATTACHMENT9 = 36073;
      GL_COMPARE_REF_TO_TEXTURE = 34894;
      GL_COMPRESSED_R11_EAC = 37488;
      GL_COMPRESSED_RG11_EAC = 37490;
      GL_COMPRESSED_RGB8_ETC2 = 37492;
      GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;
      GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;
      GL_COMPRESSED_SIGNED_R11_EAC = 37489;
      GL_COMPRESSED_SIGNED_RG11_EAC = 37491;
      GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;
      GL_COMPRESSED_SRGB8_ETC2 = 37493;
      GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;
      GL_CONDITION_SATISFIED = 37148;
      GL_COPY_READ_BUFFER = 36662;
      GL_COPY_READ_BUFFER_BINDING = 36662;
      GL_COPY_WRITE_BUFFER = 36663;
      GL_COPY_WRITE_BUFFER_BINDING = 36663;
      GL_CURRENT_QUERY = 34917;
      GL_DEPTH = 6145;
      GL_DEPTH24_STENCIL8 = 35056;
      GL_DEPTH32F_STENCIL8 = 36013;
      GL_DEPTH_COMPONENT24 = 33190;
      GL_DEPTH_COMPONENT32F = 36012;
      GL_DEPTH_STENCIL = 34041;
      GL_DEPTH_STENCIL_ATTACHMENT = 33306;
      GL_DRAW_BUFFER0 = 34853;
      GL_DRAW_BUFFER1 = 34854;
      GL_DRAW_BUFFER10 = 34863;
      GL_DRAW_BUFFER11 = 34864;
      GL_DRAW_BUFFER12 = 34865;
      GL_DRAW_BUFFER13 = 34866;
      GL_DRAW_BUFFER14 = 34867;
      GL_DRAW_BUFFER15 = 34868;
      GL_DRAW_BUFFER2 = 34855;
      GL_DRAW_BUFFER3 = 34856;
      GL_DRAW_BUFFER4 = 34857;
      GL_DRAW_BUFFER5 = 34858;
      GL_DRAW_BUFFER6 = 34859;
      GL_DRAW_BUFFER7 = 34860;
      GL_DRAW_BUFFER8 = 34861;
      GL_DRAW_BUFFER9 = 34862;
      GL_DRAW_FRAMEBUFFER = 36009;
      GL_DRAW_FRAMEBUFFER_BINDING = 36006;
      GL_DYNAMIC_COPY = 35050;
      GL_DYNAMIC_READ = 35049;
      GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
      GL_FLOAT_MAT2x3 = 35685;
      GL_FLOAT_MAT2x4 = 35686;
      GL_FLOAT_MAT3x2 = 35687;
      GL_FLOAT_MAT3x4 = 35688;
      GL_FLOAT_MAT4x2 = 35689;
      GL_FLOAT_MAT4x3 = 35690;
      GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
      GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
      GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
      GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
      GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
      GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
      GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
      GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
      GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
      GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
      GL_FRAMEBUFFER_DEFAULT = 33304;
      GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
      GL_FRAMEBUFFER_UNDEFINED = 33305;
      GL_GREEN = 6404;
      GL_HALF_FLOAT = 5131;
      GL_INTERLEAVED_ATTRIBS = 35980;
      GL_INT_2_10_10_10_REV = 36255;
      GL_INT_SAMPLER_2D = 36298;
      GL_INT_SAMPLER_2D_ARRAY = 36303;
      GL_INT_SAMPLER_3D = 36299;
      GL_INT_SAMPLER_CUBE = 36300;
      GL_INVALID_INDEX = -1;
      GL_MAJOR_VERSION = 33307;
      GL_MAP_FLUSH_EXPLICIT_BIT = 16;
      GL_MAP_INVALIDATE_BUFFER_BIT = 8;
      GL_MAP_INVALIDATE_RANGE_BIT = 4;
      GL_MAP_READ_BIT = 1;
      GL_MAP_UNSYNCHRONIZED_BIT = 32;
      GL_MAP_WRITE_BIT = 2;
      GL_MAX = 32776;
      GL_MAX_3D_TEXTURE_SIZE = 32883;
      GL_MAX_ARRAY_TEXTURE_LAYERS = 35071;
      GL_MAX_COLOR_ATTACHMENTS = 36063;
      GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
      GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374;
      GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
      GL_MAX_DRAW_BUFFERS = 34852;
      GL_MAX_ELEMENTS_INDICES = 33001;
      GL_MAX_ELEMENTS_VERTICES = 33000;
      GL_MAX_ELEMENT_INDEX = 36203;
      GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
      GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
      GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
      GL_MAX_PROGRAM_TEXEL_OFFSET = 35077;
      GL_MAX_SAMPLES = 36183;
      GL_MAX_SERVER_WAIT_TIMEOUT = 37137;
      GL_MAX_TEXTURE_LOD_BIAS = 34045;
      GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
      GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
      GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
      GL_MAX_UNIFORM_BLOCK_SIZE = 35376;
      GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375;
      GL_MAX_VARYING_COMPONENTS = 35659;
      GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
      GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371;
      GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
      GL_MIN = 32775;
      GL_MINOR_VERSION = 33308;
      GL_MIN_PROGRAM_TEXEL_OFFSET = 35076;
      GL_NUM_EXTENSIONS = 33309;
      GL_NUM_PROGRAM_BINARY_FORMATS = 34814;
      GL_NUM_SAMPLE_COUNTS = 37760;
      GL_OBJECT_TYPE = 37138;
      GL_PACK_ROW_LENGTH = 3330;
      GL_PACK_SKIP_PIXELS = 3332;
      GL_PACK_SKIP_ROWS = 3331;
      GL_PIXEL_PACK_BUFFER = 35051;
      GL_PIXEL_PACK_BUFFER_BINDING = 35053;
      GL_PIXEL_UNPACK_BUFFER = 35052;
      GL_PIXEL_UNPACK_BUFFER_BINDING = 35055;
      GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201;
      GL_PROGRAM_BINARY_FORMATS = 34815;
      GL_PROGRAM_BINARY_LENGTH = 34625;
      GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367;
      GL_QUERY_RESULT = 34918;
      GL_QUERY_RESULT_AVAILABLE = 34919;
      GL_R11F_G11F_B10F = 35898;
      GL_R16F = 33325;
      GL_R16I = 33331;
      GL_R16UI = 33332;
      GL_R32F = 33326;
      GL_R32I = 33333;
      GL_R32UI = 33334;
      GL_R8 = 33321;
      GL_R8I = 33329;
      GL_R8UI = 33330;
      GL_R8_SNORM = 36756;
      GL_RASTERIZER_DISCARD = 35977;
      GL_READ_BUFFER = 3074;
      GL_READ_FRAMEBUFFER = 36008;
      GL_READ_FRAMEBUFFER_BINDING = 36010;
      GL_RED = 6403;
      GL_RED_INTEGER = 36244;
      GL_RENDERBUFFER_SAMPLES = 36011;
      GL_RG = 33319;
      GL_RG16F = 33327;
      GL_RG16I = 33337;
      GL_RG16UI = 33338;
      GL_RG32F = 33328;
      GL_RG32I = 33339;
      GL_RG32UI = 33340;
      GL_RG8 = 33323;
      GL_RG8I = 33335;
      GL_RG8UI = 33336;
      GL_RG8_SNORM = 36757;
      GL_RGB10_A2 = 32857;
      GL_RGB10_A2UI = 36975;
      GL_RGB16F = 34843;
      GL_RGB16I = 36233;
      GL_RGB16UI = 36215;
      GL_RGB32F = 34837;
      GL_RGB32I = 36227;
      GL_RGB32UI = 36209;
      GL_RGB8 = 32849;
      GL_RGB8I = 36239;
      GL_RGB8UI = 36221;
      GL_RGB8_SNORM = 36758;
      GL_RGB9_E5 = 35901;
      GL_RGBA16F = 34842;
      GL_RGBA16I = 36232;
      GL_RGBA16UI = 36214;
      GL_RGBA32F = 34836;
      GL_RGBA32I = 36226;
      GL_RGBA32UI = 36208;
      GL_RGBA8 = 32856;
      GL_RGBA8I = 36238;
      GL_RGBA8UI = 36220;
      GL_RGBA8_SNORM = 36759;
      GL_RGBA_INTEGER = 36249;
      GL_RGB_INTEGER = 36248;
      GL_RG_INTEGER = 33320;
      GL_SAMPLER_2D_ARRAY = 36289;
      GL_SAMPLER_2D_ARRAY_SHADOW = 36292;
      GL_SAMPLER_2D_SHADOW = 35682;
      GL_SAMPLER_3D = 35679;
      GL_SAMPLER_BINDING = 35097;
      GL_SAMPLER_CUBE_SHADOW = 36293;
      GL_SEPARATE_ATTRIBS = 35981;
      GL_SIGNALED = 37145;
      GL_SIGNED_NORMALIZED = 36764;
      GL_SRGB = 35904;
      GL_SRGB8 = 35905;
      GL_SRGB8_ALPHA8 = 35907;
      GL_STATIC_COPY = 35046;
      GL_STATIC_READ = 35045;
      GL_STENCIL = 6146;
      GL_STREAM_COPY = 35042;
      GL_STREAM_READ = 35041;
      GL_SYNC_CONDITION = 37139;
      GL_SYNC_FENCE = 37142;
      GL_SYNC_FLAGS = 37141;
      GL_SYNC_FLUSH_COMMANDS_BIT = 1;
      GL_SYNC_GPU_COMMANDS_COMPLETE = 37143;
      GL_SYNC_STATUS = 37140;
      GL_TEXTURE_2D_ARRAY = 35866;
      GL_TEXTURE_3D = 32879;
      GL_TEXTURE_BASE_LEVEL = 33084;
      GL_TEXTURE_BINDING_2D_ARRAY = 35869;
      GL_TEXTURE_BINDING_3D = 32874;
      GL_TEXTURE_COMPARE_FUNC = 34893;
      GL_TEXTURE_COMPARE_MODE = 34892;
      GL_TEXTURE_IMMUTABLE_FORMAT = 37167;
      GL_TEXTURE_IMMUTABLE_LEVELS = 33503;
      GL_TEXTURE_MAX_LEVEL = 33085;
      GL_TEXTURE_MAX_LOD = 33083;
      GL_TEXTURE_MIN_LOD = 33082;
      GL_TEXTURE_SWIZZLE_A = 36421;
      GL_TEXTURE_SWIZZLE_B = 36420;
      GL_TEXTURE_SWIZZLE_G = 36419;
      GL_TEXTURE_SWIZZLE_R = 36418;
      GL_TEXTURE_WRAP_R = 32882;
      GL_TIMEOUT_EXPIRED = 37147;
      GL_TIMEOUT_IGNORED = jlong(-1);
      GL_TRANSFORM_FEEDBACK = 36386;
      GL_TRANSFORM_FEEDBACK_ACTIVE = 36388;
      GL_TRANSFORM_FEEDBACK_BINDING = 36389;
      GL_TRANSFORM_FEEDBACK_BUFFER = 35982;
      GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
      GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
      GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
      GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972;
      GL_TRANSFORM_FEEDBACK_PAUSED = 36387;
      GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
      GL_TRANSFORM_FEEDBACK_VARYINGS = 35971;
      GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958;
      GL_UNIFORM_ARRAY_STRIDE = 35388;
      GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
      GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
      GL_UNIFORM_BLOCK_BINDING = 35391;
      GL_UNIFORM_BLOCK_DATA_SIZE = 35392;
      GL_UNIFORM_BLOCK_INDEX = 35386;
      GL_UNIFORM_BLOCK_NAME_LENGTH = 35393;
      GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
      GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
      GL_UNIFORM_BUFFER = 35345;
      GL_UNIFORM_BUFFER_BINDING = 35368;
      GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
      GL_UNIFORM_BUFFER_SIZE = 35370;
      GL_UNIFORM_BUFFER_START = 35369;
      GL_UNIFORM_IS_ROW_MAJOR = 35390;
      GL_UNIFORM_MATRIX_STRIDE = 35389;
      GL_UNIFORM_NAME_LENGTH = 35385;
      GL_UNIFORM_OFFSET = 35387;
      GL_UNIFORM_SIZE = 35384;
      GL_UNIFORM_TYPE = 35383;
      GL_UNPACK_IMAGE_HEIGHT = 32878;
      GL_UNPACK_ROW_LENGTH = 3314;
      GL_UNPACK_SKIP_IMAGES = 32877;
      GL_UNPACK_SKIP_PIXELS = 3316;
      GL_UNPACK_SKIP_ROWS = 3315;
      GL_UNSIGNALED = 37144;
      GL_UNSIGNED_INT_10F_11F_11F_REV = 35899;
      GL_UNSIGNED_INT_24_8 = 34042;
      GL_UNSIGNED_INT_2_10_10_10_REV = 33640;
      GL_UNSIGNED_INT_5_9_9_9_REV = 35902;
      GL_UNSIGNED_INT_SAMPLER_2D = 36306;
      GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
      GL_UNSIGNED_INT_SAMPLER_3D = 36307;
      GL_UNSIGNED_INT_SAMPLER_CUBE = 36308;
      GL_UNSIGNED_INT_VEC2 = 36294;
      GL_UNSIGNED_INT_VEC3 = 36295;
      GL_UNSIGNED_INT_VEC4 = 36296;
      GL_UNSIGNED_NORMALIZED = 35863;
      GL_VERTEX_ARRAY_BINDING = 34229;
      GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
      GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
      GL_WAIT_FAILED = 37149;
  public
    constructor create(); overload;
    class procedure glReadBuffer(para1: jint); static; overload;
    class procedure glDrawRangeElements(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: JNBuffer); static; overload;
    class procedure glDrawRangeElements(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure glTexImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: JNBuffer); static; overload;
    class procedure glTexImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint); static; overload;
    class procedure glTexSubImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint; para11: JNBuffer); static; overload;
    class procedure glTexSubImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint; para11: jint); static; overload;
    class procedure glCopyTexSubImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint); static; overload;
    class procedure glCompressedTexImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: JNBuffer); static; overload;
    class procedure glCompressedTexImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint); static; overload;
    class procedure glCompressedTexSubImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint; para11: JNBuffer); static; overload;
    class procedure glCompressedTexSubImage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint; para11: jint); static; overload;
    class procedure glGenQueries(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenQueries(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenQueries(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glDeleteQueries(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteQueries(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteQueries(para1: jint; para2: JNIntBuffer); static; overload;
    class function glIsQuery(para1: jint): jboolean; static; overload;
    class procedure glBeginQuery(para1: jint; para2: jint); static; overload;
    class procedure glEndQuery(para1: jint); static; overload;
    class procedure glGetQueryiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetQueryiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetQueryiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetQueryObjectuiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetQueryObjectuiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetQueryObjectuiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class function glUnmapBuffer(para1: jint): jboolean; static; overload;
    class function glGetBufferPointerv(para1: jint; para2: jint): JNBuffer; static; overload;
    class procedure glDrawBuffers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDrawBuffers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDrawBuffers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glUniformMatrix2x3fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix2x3fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix2x3fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glUniformMatrix3x2fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix3x2fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix3x2fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glUniformMatrix2x4fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix2x4fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix2x4fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glUniformMatrix4x2fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix4x2fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix4x2fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glUniformMatrix3x4fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix3x4fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix3x4fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glUniformMatrix4x3fv(para1: jint; para2: jint; para3: jboolean; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix4x3fv(para1: jint; para2: jint; para3: jboolean; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glUniformMatrix4x3fv(para1: jint; para2: jint; para3: jboolean; para4: JNFloatBuffer); static; overload;
    class procedure glBlitFramebuffer(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint); static; overload;
    class procedure glRenderbufferStorageMultisample(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glFramebufferTextureLayer(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class function glMapBufferRange(para1: jint; para2: jint; para3: jint; para4: jint): JNBuffer; static; overload;
    class procedure glFlushMappedBufferRange(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glBindVertexArray(para1: jint); static; overload;
    class procedure glDeleteVertexArrays(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteVertexArrays(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteVertexArrays(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGenVertexArrays(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenVertexArrays(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenVertexArrays(para1: jint; para2: JNIntBuffer); static; overload;
    class function glIsVertexArray(para1: jint): jboolean; static; overload;
    class procedure glGetIntegeri_v(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetIntegeri_v(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetIntegeri_v(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glBeginTransformFeedback(para1: jint); static; overload;
    class procedure glEndTransformFeedback(); static; overload;
    class procedure glBindBufferRange(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glBindBufferBase(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTransformFeedbackVaryings(para1: jint; para2: Arr1JLString; para3: jint); static; overload;
    class procedure glTransformFeedbackVaryings(para1: jint; var para2: array of JLString; para3: jint); static; overload;
    class procedure glGetTransformFeedbackVarying(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint; para6: Arr1jint; para7: jint; para8: Arr1jint; para9: jint; para10: Arr1jbyte; para11: jint); static; overload;
    class procedure glGetTransformFeedbackVarying(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint; var para6: array of jint; para7: jint; var para8: array of jint; para9: jint; var para10: array of jbyte; para11: jint); static; overload;
    class procedure glGetTransformFeedbackVarying(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer; para5: JNIntBuffer; para6: JNIntBuffer; para7: jbyte); static; overload;
    class function glGetTransformFeedbackVarying(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: Arr1jint; para6: jint): JLString; static; overload;
    class function glGetTransformFeedbackVarying(para1: jint; para2: jint; var para3: array of jint; para4: jint; var para5: array of jint; para6: jint): JLString; static; overload;
    class function glGetTransformFeedbackVarying(para1: jint; para2: jint; para3: JNIntBuffer; para4: JNIntBuffer): JLString; static; overload;
    class procedure glVertexAttribIPointer(para1: jint; para2: jint; para3: jint; para4: jint; para5: JNBuffer); static; overload;
    class procedure glVertexAttribIPointer(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glGetVertexAttribIiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetVertexAttribIiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetVertexAttribIiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetVertexAttribIuiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetVertexAttribIuiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetVertexAttribIuiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glVertexAttribI4i(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glVertexAttribI4ui(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glVertexAttribI4iv(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glVertexAttribI4iv(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glVertexAttribI4iv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glVertexAttribI4uiv(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glVertexAttribI4uiv(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glVertexAttribI4uiv(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGetUniformuiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetUniformuiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetUniformuiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class function glGetFragDataLocation(para1: jint; para2: JLString): jint; static; overload;
    class procedure glUniform1ui(para1: jint; para2: jint); static; overload;
    class procedure glUniform2ui(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glUniform3ui(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glUniform4ui(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glUniform1uiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glUniform1uiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glUniform1uiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glUniform2uiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glUniform2uiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glUniform2uiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glUniform3uiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glUniform3uiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glUniform3uiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glUniform4uiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glUniform4uiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glUniform4uiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glClearBufferiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glClearBufferiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glClearBufferiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glClearBufferuiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glClearBufferuiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glClearBufferuiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glClearBufferfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glClearBufferfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glClearBufferfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glClearBufferfi(para1: jint; para2: jint; para3: jfloat; para4: jint); static; overload;
    class function glGetStringi(para1: jint; para2: jint): JLString; static; overload;
    class procedure glCopyBufferSubData(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glGetUniformIndices(para1: jint; para2: Arr1JLString; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetUniformIndices(para1: jint; var para2: array of JLString; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetUniformIndices(para1: jint; para2: Arr1JLString; para3: JNIntBuffer); static; overload;
    class procedure glGetUniformIndices(para1: jint; var para2: array of JLString; para3: JNIntBuffer); static; overload;
    class procedure glGetActiveUniformsiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: jint; para6: Arr1jint; para7: jint); static; overload;
    class procedure glGetActiveUniformsiv(para1: jint; para2: jint; var para3: array of jint; para4: jint; para5: jint; var para6: array of jint; para7: jint); static; overload;
    class procedure glGetActiveUniformsiv(para1: jint; para2: jint; para3: JNIntBuffer; para4: jint; para5: JNIntBuffer); static; overload;
    class function glGetUniformBlockIndex(para1: jint; para2: JLString): jint; static; overload;
    class procedure glGetActiveUniformBlockiv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glGetActiveUniformBlockiv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glGetActiveUniformBlockiv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glGetActiveUniformBlockName(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint; para6: Arr1jbyte; para7: jint); static; overload;
    class procedure glGetActiveUniformBlockName(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint; var para6: array of jbyte; para7: jint); static; overload;
    class procedure glGetActiveUniformBlockName(para1: jint; para2: jint; para3: JNBuffer; para4: JNBuffer); static; overload;
    class function glGetActiveUniformBlockName(para1: jint; para2: jint): JLString; static; overload;
    class procedure glUniformBlockBinding(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glDrawArraysInstanced(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glDrawElementsInstanced(para1: jint; para2: jint; para3: jint; para4: JNBuffer; para5: jint); static; overload;
    class procedure glDrawElementsInstanced(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class function glFenceSync(para1: jint; para2: jint): jlong; static; overload;
    class function glIsSync(para1: jlong): jboolean; static; overload;
    class procedure glDeleteSync(para1: jlong); static; overload;
    class function glClientWaitSync(para1: jlong; para2: jint; para3: jlong): jint; static; overload;
    class procedure glWaitSync(para1: jlong; para2: jint; para3: jlong); static; overload;
    class procedure glGetInteger64v(para1: jint; para2: Arr1jlong; para3: jint); static; overload;
    class procedure glGetInteger64v(para1: jint; var para2: array of jlong; para3: jint); static; overload;
    class procedure glGetInteger64v(para1: jint; para2: JNLongBuffer); static; overload;
    class procedure glGetSynciv(para1: jlong; para2: jint; para3: jint; para4: Arr1jint; para5: jint; para6: Arr1jint; para7: jint); static; overload;
    class procedure glGetSynciv(para1: jlong; para2: jint; para3: jint; var para4: array of jint; para5: jint; var para6: array of jint; para7: jint); static; overload;
    class procedure glGetSynciv(para1: jlong; para2: jint; para3: jint; para4: JNIntBuffer; para5: JNIntBuffer); static; overload;
    class procedure glGetInteger64i_v(para1: jint; para2: jint; para3: Arr1jlong; para4: jint); static; overload;
    class procedure glGetInteger64i_v(para1: jint; para2: jint; var para3: array of jlong; para4: jint); static; overload;
    class procedure glGetInteger64i_v(para1: jint; para2: jint; para3: JNLongBuffer); static; overload;
    class procedure glGetBufferParameteri64v(para1: jint; para2: jint; para3: Arr1jlong; para4: jint); static; overload;
    class procedure glGetBufferParameteri64v(para1: jint; para2: jint; var para3: array of jlong; para4: jint); static; overload;
    class procedure glGetBufferParameteri64v(para1: jint; para2: jint; para3: JNLongBuffer); static; overload;
    class procedure glGenSamplers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenSamplers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenSamplers(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glDeleteSamplers(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteSamplers(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteSamplers(para1: jint; para2: JNIntBuffer); static; overload;
    class function glIsSampler(para1: jint): jboolean; static; overload;
    class procedure glBindSampler(para1: jint; para2: jint); static; overload;
    class procedure glSamplerParameteri(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glSamplerParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glSamplerParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glSamplerParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glSamplerParameterf(para1: jint; para2: jint; para3: jfloat); static; overload;
    class procedure glSamplerParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glSamplerParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glSamplerParameterfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glGetSamplerParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetSamplerParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetSamplerParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetSamplerParameterfv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetSamplerParameterfv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetSamplerParameterfv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glVertexAttribDivisor(para1: jint; para2: jint); static; overload;
    class procedure glBindTransformFeedback(para1: jint; para2: jint); static; overload;
    class procedure glDeleteTransformFeedbacks(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteTransformFeedbacks(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteTransformFeedbacks(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGenTransformFeedbacks(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenTransformFeedbacks(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenTransformFeedbacks(para1: jint; para2: JNIntBuffer); static; overload;
    class function glIsTransformFeedback(para1: jint): jboolean; static; overload;
    class procedure glPauseTransformFeedback(); static; overload;
    class procedure glResumeTransformFeedback(); static; overload;
    class procedure glGetProgramBinary(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: Arr1jint; para6: jint; para7: JNBuffer); static; overload;
    class procedure glGetProgramBinary(para1: jint; para2: jint; var para3: array of jint; para4: jint; var para5: array of jint; para6: jint; para7: JNBuffer); static; overload;
    class procedure glGetProgramBinary(para1: jint; para2: jint; para3: JNIntBuffer; para4: JNIntBuffer; para5: JNBuffer); static; overload;
    class procedure glProgramBinary(para1: jint; para2: jint; para3: JNBuffer; para4: jint); static; overload;
    class procedure glProgramParameteri(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glInvalidateFramebuffer(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glInvalidateFramebuffer(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glInvalidateFramebuffer(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glInvalidateSubFramebuffer(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); static; overload;
    class procedure glInvalidateSubFramebuffer(para1: jint; para2: jint; var para3: array of jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint); static; overload;
    class procedure glInvalidateSubFramebuffer(para1: jint; para2: jint; para3: JNIntBuffer; para4: jint; para5: jint; para6: jint; para7: jint); static; overload;
    class procedure glTexStorage2D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glTexStorage3D(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure glGetInternalformativ(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jint; para6: jint); static; overload;
    class procedure glGetInternalformativ(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jint; para6: jint); static; overload;
    class procedure glGetInternalformativ(para1: jint; para2: jint; para3: jint; para4: jint; para5: JNIntBuffer); static; overload;
  end;

  ACRestrictionEntry = class external 'android.content' name 'RestrictionEntry' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      TYPE_BOOLEAN = 1;
      TYPE_CHOICE = 2;
      TYPE_INTEGER = 5;
      TYPE_MULTI_SELECT = 4;
      TYPE_NULL = 0;
      TYPE_STRING = 6;
  public
    constructor create(para1: jint; para2: JLString); overload;
    constructor create(para1: JLString; para2: JLString); overload;
    constructor create(para1: JLString; para2: jboolean); overload;
    constructor create(para1: JLString; para2: Arr1JLString); overload;
    constructor create(para1: JLString; const para2: array of JLString); overload;
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: AOParcel); overload;
    procedure setType(para1: jint); overload; virtual;
    function getType(): jint; overload; virtual;
    function getSelectedString(): JLString; overload; virtual;
    function getAllSelectedStrings(): Arr1JLString; overload; virtual;
    function getSelectedState(): jboolean; overload; virtual;
    function getIntValue(): jint; overload; virtual;
    procedure setIntValue(para1: jint); overload; virtual;
    procedure setSelectedString(para1: JLString); overload; virtual;
    procedure setSelectedState(para1: jboolean); overload; virtual;
    procedure setAllSelectedStrings(para1: Arr1JLString); overload; virtual;
    procedure setAllSelectedStrings(var para1: array of JLString); overload; virtual;
    procedure setChoiceValues(para1: Arr1JLString); overload; virtual;
    procedure setChoiceValues(var para1: array of JLString); overload; virtual;
    procedure setChoiceValues(para1: ACContext; para2: jint); overload; virtual;
    function getChoiceValues(): Arr1JLString; overload; virtual;
    procedure setChoiceEntries(para1: Arr1JLString); overload; virtual;
    procedure setChoiceEntries(var para1: array of JLString); overload; virtual;
    procedure setChoiceEntries(para1: ACContext; para2: jint); overload; virtual;
    function getChoiceEntries(): Arr1JLString; overload; virtual;
    function getDescription(): JLString; overload; virtual;
    procedure setDescription(para1: JLString); overload; virtual;
    function getKey(): JLString; overload; virtual;
    function getTitle(): JLString; overload; virtual;
    procedure setTitle(para1: JLString); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ANWWifiEnterpriseConfig = class external 'android.net.wifi' name 'WifiEnterpriseConfig' (JLObject, AOParcelable)
  public
    type
      InnerPhase2 = class;
      Arr1InnerPhase2 = array of InnerPhase2;
      Arr2InnerPhase2 = array of Arr1InnerPhase2;
      Arr3InnerPhase2 = array of Arr2InnerPhase2;
      InnerEap = class;
      Arr1InnerEap = array of InnerEap;
      Arr2InnerEap = array of Arr1InnerEap;
      Arr3InnerEap = array of Arr2InnerEap;
      InnerPhase2 = class sealed external 'android.net.wifi' name 'Phase2' (JLObject)
      public
        const
          GTC = 4;
          MSCHAP = 2;
          MSCHAPV2 = 3;
          NONE = 0;
          PAP = 1;
      end;

      InnerEap = class sealed external 'android.net.wifi' name 'Eap' (JLObject)
      public
        const
          AKA = 5;
          NONE = -1;
          PEAP = 0;
          PWD = 3;
          SIM = 4;
          TLS = 1;
          TTLS = 2;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(); overload;
    constructor create(para1: ANWWifiEnterpriseConfig); overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    procedure setEapMethod(para1: jint); overload; virtual;
    function getEapMethod(): jint; overload; virtual;
    procedure setPhase2Method(para1: jint); overload; virtual;
    function getPhase2Method(): jint; overload; virtual;
    procedure setIdentity(para1: JLString); overload; virtual;
    function getIdentity(): JLString; overload; virtual;
    procedure setAnonymousIdentity(para1: JLString); overload; virtual;
    function getAnonymousIdentity(): JLString; overload; virtual;
    procedure setPassword(para1: JLString); overload; virtual;
    function getPassword(): JLString; overload; virtual;
    procedure setCaCertificate(para1: JSCX509Certificate); overload; virtual;
    function getCaCertificate(): JSCX509Certificate; overload; virtual;
    procedure setClientKeyEntry(para1: JSPrivateKey; para2: JSCX509Certificate); overload; virtual;
    function getClientCertificate(): JSCX509Certificate; overload; virtual;
    procedure setSubjectMatch(para1: JLString); overload; virtual;
    function getSubjectMatch(): JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ASNStatusBarNotification = class external 'android.service.notification' name 'StatusBarNotification' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: JLString; para2: JLString; para3: jint; para4: JLString; para5: jint; para6: jint; para7: jint; para8: AANotification; para9: AOUserHandle; para10: jlong); overload;
    constructor create(para1: AOParcel); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function clone(): ASNStatusBarNotification; overload; virtual;
    function toString(): JLString; overload; virtual;
    function isOngoing(): jboolean; overload; virtual;
    function isClearable(): jboolean; overload; virtual;
    function getUserId(): jint; overload; virtual;
    function getPackageName(): JLString; overload; virtual;
    function getId(): jint; overload; virtual;
    function getTag(): JLString; overload; virtual;
    function getNotification(): AANotification; overload; virtual;
    function getUser(): AOUserHandle; overload; virtual;
    function getPostTime(): jlong; overload; virtual;
    function getKey(): JLString; overload; virtual;
    function getGroupKey(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  ATCellIdentityWcdma = class sealed external 'android.telephony' name 'CellIdentityWcdma' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getMcc(): jint; overload; virtual;
    function getMnc(): jint; overload; virtual;
    function getLac(): jint; overload; virtual;
    function getCid(): jint; overload; virtual;
    function getPsc(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AVWindowId = class external 'android.view' name 'WindowId' (JLObject, AOParcelable)
  public
    type
      InnerFocusObserver = class;
      Arr1InnerFocusObserver = array of InnerFocusObserver;
      Arr2InnerFocusObserver = array of Arr1InnerFocusObserver;
      Arr3InnerFocusObserver = array of Arr2InnerFocusObserver;
      InnerFocusObserver = class abstract external 'android.view' name 'FocusObserver' (JLObject)
      public
        constructor create(); overload;
        procedure onFocusGained(para1: AVWindowId); overload; virtual; abstract;
        procedure onFocusLost(para1: AVWindowId); overload; virtual; abstract;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function isFocused(): jboolean; overload; virtual;
    procedure registerFocusObserver(para1: AVWindowId.InnerFocusObserver); overload; virtual;
    procedure unregisterFocusObserver(para1: AVWindowId.InnerFocusObserver); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ATCellSignalStrengthWcdma = class sealed external 'android.telephony' name 'CellSignalStrengthWcdma' (ATCellSignalStrength, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getLevel(): jint; overload; virtual;
    function getDbm(): jint; overload; virtual;
    function getAsuLevel(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AVViewGroupOverlay = class external 'android.view' name 'ViewGroupOverlay' (AVViewOverlay)
  public
    procedure add(para1: AVView); overload; virtual;
    procedure remove(para1: AVView); overload; virtual;
  end;

  ASKeyPairGeneratorSpec = class sealed external 'android.security' name 'KeyPairGeneratorSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.security' name 'Builder' (JLObject)
      public
        constructor create(para1: ACContext); overload;
        function setAlias(para1: JLString): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;
        function setKeyType(para1: JLString): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;  // throws java.security.NoSuchAlgorithmException
        function setKeySize(para1: jint): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;
        function setAlgorithmParameterSpec(para1: JSSAlgorithmParameterSpec): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;
        function setSubject(para1: JSAXX500Principal): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;
        function setSerialNumber(para1: JMBigInteger): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;
        function setStartDate(para1: JUDate): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;
        function setEndDate(para1: JUDate): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;
        function setEncryptionRequired(): ASKeyPairGeneratorSpec.InnerBuilder; overload; virtual;
        function build(): ASKeyPairGeneratorSpec; overload; virtual;
      end;

  public
    function getContext(): ACContext; overload; virtual;
    function getKeystoreAlias(): JLString; overload; virtual;
    function getKeyType(): JLString; overload; virtual;
    function getKeySize(): jint; overload; virtual;
    function getAlgorithmParameterSpec(): JSSAlgorithmParameterSpec; overload; virtual;
    function getSubjectDN(): JSAXX500Principal; overload; virtual;
    function getSerialNumber(): JMBigInteger; overload; virtual;
    function getStartDate(): JUDate; overload; virtual;
    function getEndDate(): JUDate; overload; virtual;
    function isEncryptionRequired(): jboolean; overload; virtual;
  end;

  AMDeniedByServerException = class sealed external 'android.media' name 'DeniedByServerException' (AMMediaDrmException)
  public
    constructor create(para1: JLString); overload;
  end;

  AMNotProvisionedException = class sealed external 'android.media' name 'NotProvisionedException' (AMMediaDrmException)
  public
    constructor create(para1: JLString); overload;
  end;

  AMUnsupportedSchemeException = class sealed external 'android.media' name 'UnsupportedSchemeException' (AMMediaDrmException)
  public
    constructor create(para1: JLString); overload;
  end;

  AMMediaMuxer = class sealed external 'android.media' name 'MediaMuxer' (JLObject)
  public
    type
      InnerOutputFormat = class;
      Arr1InnerOutputFormat = array of InnerOutputFormat;
      Arr2InnerOutputFormat = array of Arr1InnerOutputFormat;
      Arr3InnerOutputFormat = array of Arr2InnerOutputFormat;
      InnerOutputFormat = class sealed external 'android.media' name 'OutputFormat' (JLObject)
      public
        const
          MUXER_OUTPUT_MPEG_4 = 0;
          MUXER_OUTPUT_WEBM = 1;
      end;

  public
    constructor create(para1: JLString; para2: jint); overload;  // throws java.io.IOException
    procedure setOrientationHint(para1: jint); overload; virtual;
    procedure setLocation(para1: jfloat; para2: jfloat); overload; virtual;
    procedure start(); overload; virtual;
    procedure stop(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  public
    function addTrack(para1: AMMediaFormat): jint; overload; virtual;
    procedure writeSampleData(para1: jint; para2: JNByteBuffer; para3: AMMediaCodec.InnerBufferInfo); overload; virtual;
    procedure release(); overload; virtual;
  end;

  ATCellInfoWcdma = class sealed external 'android.telephony' name 'CellInfoWcdma' (ATCellInfo, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getCellIdentity(): ATCellIdentityWcdma; overload; virtual;
    function getCellSignalStrength(): ATCellSignalStrengthWcdma; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ASKeyStoreParameter = class sealed external 'android.security' name 'KeyStoreParameter' (JLObject, JSKeyStore.InnerProtectionParameter)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.security' name 'Builder' (JLObject)
      public
        constructor create(para1: ACContext); overload;
        function setEncryptionRequired(para1: jboolean): ASKeyStoreParameter.InnerBuilder; overload; virtual;
        function build(): ASKeyStoreParameter; overload; virtual;
      end;

  public
    function isEncryptionRequired(): jboolean; overload; virtual;
  end;

  ARScriptIntrinsic3DLUT = class sealed external 'android.renderscript' name 'ScriptIntrinsic3DLUT' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsic3DLUT; static; external name 'create'; overload;
    procedure setLUT(para1: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARAllocation; para3: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelID(): ARScript.InnerKernelID; overload; virtual;
  end;

  ASNNotificationListenerService = class abstract external 'android.service.notification' name 'NotificationListenerService' (AAService)
  public
    type
      InnerRanking = class;
      Arr1InnerRanking = array of InnerRanking;
      Arr2InnerRanking = array of Arr1InnerRanking;
      Arr3InnerRanking = array of Arr2InnerRanking;
      InnerRankingMap = class;
      Arr1InnerRankingMap = array of InnerRankingMap;
      Arr2InnerRankingMap = array of Arr1InnerRankingMap;
      Arr3InnerRankingMap = array of Arr2InnerRankingMap;
      InnerRanking = class external 'android.service.notification' name 'Ranking' (JLObject)
      public
        constructor create(); overload;
        function getKey(): JLString; overload; virtual;
        function getRank(): jint; overload; virtual;
        function isAmbient(): jboolean; overload; virtual;
        function matchesInterruptionFilter(): jboolean; overload; virtual;
      end;

      InnerRankingMap = class external 'android.service.notification' name 'RankingMap' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        function getOrderedKeys(): Arr1JLString; overload; virtual;
        function getRanking(para1: JLString; para2: ASNNotificationListenerService.InnerRanking): jboolean; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
      end;

  public
    const
      HINT_HOST_DISABLE_EFFECTS = 1;
      INTERRUPTION_FILTER_ALL = 1;
      INTERRUPTION_FILTER_NONE = 3;
      INTERRUPTION_FILTER_PRIORITY = 2;
      SERVICE_INTERFACE = 'android.service.notification.NotificationListenerService';
  public
    constructor create(); overload;
    procedure onNotificationPosted(para1: ASNStatusBarNotification); overload; virtual;
    procedure onNotificationPosted(para1: ASNStatusBarNotification; para2: ASNNotificationListenerService.InnerRankingMap); overload; virtual;
    procedure onNotificationRemoved(para1: ASNStatusBarNotification); overload; virtual;
    procedure onNotificationRemoved(para1: ASNStatusBarNotification; para2: ASNNotificationListenerService.InnerRankingMap); overload; virtual;
    procedure onListenerConnected(); overload; virtual;
    procedure onNotificationRankingUpdate(para1: ASNNotificationListenerService.InnerRankingMap); overload; virtual;
    procedure onListenerHintsChanged(para1: jint); overload; virtual;
    procedure onInterruptionFilterChanged(para1: jint); overload; virtual;
    procedure cancelNotification(para1: JLString; para2: JLString; para3: jint); overload; virtual; final;
    procedure cancelNotification(para1: JLString); overload; virtual; final;
    procedure cancelAllNotifications(); overload; virtual; final;
    procedure cancelNotifications(para1: Arr1JLString); overload; virtual; final;
    procedure cancelNotifications(var para1: array of JLString); overload; virtual; final;
    function getActiveNotifications(): Arr1ASNStatusBarNotification; overload; virtual;
    function getActiveNotifications(para1: Arr1JLString): Arr1ASNStatusBarNotification; overload; virtual;
    function getActiveNotifications(var para1: array of JLString): Arr1ASNStatusBarNotification; overload; virtual;
    function getCurrentListenerHints(): jint; overload; virtual; final;
    function getCurrentInterruptionFilter(): jint; overload; virtual; final;
    procedure requestListenerHints(para1: jint); overload; virtual; final;
    procedure requestInterruptionFilter(para1: jint); overload; virtual; final;
    function getCurrentRanking(): ASNNotificationListenerService.InnerRankingMap; overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual;
  end;

  AAAppOpsManager = class external 'android.app' name 'AppOpsManager' (JLObject)
  public
    type
      InnerOnOpChangedListener = interface;
      Arr1InnerOnOpChangedListener = array of InnerOnOpChangedListener;
      Arr2InnerOnOpChangedListener = array of Arr1InnerOnOpChangedListener;
      Arr3InnerOnOpChangedListener = array of Arr2InnerOnOpChangedListener;
      InnerOnOpChangedListener = interface external 'android.app' name 'OnOpChangedListener' 
        procedure onOpChanged(para1: JLString; para2: JLString); overload;
      end;

  public
    const
      MODE_ALLOWED = 0;
      MODE_DEFAULT = 3;
      MODE_ERRORED = 2;
      MODE_IGNORED = 1;
      OPSTR_COARSE_LOCATION = 'android:coarse_location';
      OPSTR_FINE_LOCATION = 'android:fine_location';
      OPSTR_GET_USAGE_STATS = 'android:get_usage_stats';
      OPSTR_MONITOR_HIGH_POWER_LOCATION = 'android:monitor_location_high_power';
      OPSTR_MONITOR_LOCATION = 'android:monitor_location';
  public
    procedure startWatchingMode(para1: JLString; para2: JLString; para3: AAAppOpsManager.InnerOnOpChangedListener); overload; virtual;
    procedure stopWatchingMode(para1: AAAppOpsManager.InnerOnOpChangedListener); overload; virtual;
    function checkOp(para1: JLString; para2: jint; para3: JLString): jint; overload; virtual;
    function checkOpNoThrow(para1: JLString; para2: jint; para3: JLString): jint; overload; virtual;
    function noteOp(para1: JLString; para2: jint; para3: JLString): jint; overload; virtual;
    function noteOpNoThrow(para1: JLString; para2: jint; para3: JLString): jint; overload; virtual;
    function startOp(para1: JLString; para2: jint; para3: JLString): jint; overload; virtual;
    function startOpNoThrow(para1: JLString; para2: jint; para3: JLString): jint; overload; virtual;
    procedure finishOp(para1: JLString; para2: jint; para3: JLString); overload; virtual;
    procedure checkPackage(para1: jint; para2: JLString); overload; virtual;
  end;

  AGPPdfDocument = class external 'android.graphics.pdf' name 'PdfDocument' (JLObject)
  public
    type
      InnerPageInfo = class;
      Arr1InnerPageInfo = array of InnerPageInfo;
      Arr2InnerPageInfo = array of Arr1InnerPageInfo;
      Arr3InnerPageInfo = array of Arr2InnerPageInfo;
      InnerPage = class;
      Arr1InnerPage = array of InnerPage;
      Arr2InnerPage = array of Arr1InnerPage;
      Arr3InnerPage = array of Arr2InnerPage;
      InnerPageInfo = class sealed external 'android.graphics.pdf' name 'PageInfo' (JLObject)
      public
        type
          InnerBuilder = class;
          Arr1InnerBuilder = array of InnerBuilder;
          Arr2InnerBuilder = array of Arr1InnerBuilder;
          Arr3InnerBuilder = array of Arr2InnerBuilder;
          InnerBuilder = class sealed external 'android.graphics.pdf' name 'Builder' (JLObject)
          public
            constructor create(para1: jint; para2: jint; para3: jint); overload;
            function setContentRect(para1: AGRect): AGPPdfDocument.InnerPageInfo.InnerBuilder; overload; virtual;
            function create_(): AGPPdfDocument.InnerPageInfo; external name 'create'; overload; virtual;
          end;

      public
        function getPageWidth(): jint; overload; virtual;
        function getPageHeight(): jint; overload; virtual;
        function getContentRect(): AGRect; overload; virtual;
        function getPageNumber(): jint; overload; virtual;
      end;

      InnerPage = class sealed external 'android.graphics.pdf' name 'Page' (JLObject)
      public
        function getCanvas(): AGCanvas; overload; virtual;
        function getInfo(): AGPPdfDocument.InnerPageInfo; overload; virtual;
      end;

  public
    constructor create(); overload;
    function startPage(para1: AGPPdfDocument.InnerPageInfo): AGPPdfDocument.InnerPage; overload; virtual;
    procedure finishPage(para1: AGPPdfDocument.InnerPage); overload; virtual;
    procedure writeTo(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
    function getPages(): JUList; overload; virtual;
    procedure close(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AHConsumerIrManager = class sealed external 'android.hardware' name 'ConsumerIrManager' (JLObject)
  public
    type
      InnerCarrierFrequencyRange = class;
      Arr1InnerCarrierFrequencyRange = array of InnerCarrierFrequencyRange;
      Arr2InnerCarrierFrequencyRange = array of Arr1InnerCarrierFrequencyRange;
      Arr3InnerCarrierFrequencyRange = array of Arr2InnerCarrierFrequencyRange;
      InnerCarrierFrequencyRange = class sealed external 'android.hardware' name 'CarrierFrequencyRange' 
      end;

  public
    function hasIrEmitter(): jboolean; overload; virtual;
    procedure transmit(para1: jint; para2: Arr1jint); overload; virtual;
    procedure transmit(para1: jint; var para2: array of jint); overload; virtual;
    function getCarrierFrequencies(): AHConsumerIrManager.Arr1InnerCarrierFrequencyRange; overload; virtual;
  end;

  AMAudioTimestamp = class sealed external 'android.media' name 'AudioTimestamp' (JLObject)
  public
    var
      fframePosition: jlong; external name 'framePosition';
      fnanoTime: jlong; external name 'nanoTime';
  public
    constructor create(); overload;
  end;

  AMMediaMetadataEditor = class abstract external 'android.media' name 'MediaMetadataEditor' (JLObject)
  public
    const
      BITMAP_KEY_ARTWORK = 100;
      RATING_KEY_BY_OTHERS = 101;
      RATING_KEY_BY_USER = 268435457;
  public
    procedure apply(); overload; virtual; abstract;
    procedure clear(); overload; virtual;
    procedure addEditableKey(para1: jint); overload; virtual;
    procedure removeEditableKeys(); overload; virtual;
    function getEditableKeys(): Arr1jint; overload; virtual;
    function putString(para1: jint; para2: JLString): AMMediaMetadataEditor; overload; virtual;  // throws java.lang.IllegalArgumentException
    function putLong(para1: jint; para2: jlong): AMMediaMetadataEditor; overload; virtual;  // throws java.lang.IllegalArgumentException
    function putBitmap(para1: jint; para2: AGBitmap): AMMediaMetadataEditor; overload; virtual;  // throws java.lang.IllegalArgumentException
    function putObject(para1: jint; para2: JLObject): AMMediaMetadataEditor; overload; virtual;  // throws java.lang.IllegalArgumentException
    function getLong(para1: jint; para2: jlong): jlong; overload; virtual;  // throws java.lang.IllegalArgumentException
    function getString(para1: jint; para2: JLString): JLString; overload; virtual;  // throws java.lang.IllegalArgumentException
    function getBitmap(para1: jint; para2: AGBitmap): AGBitmap; overload; virtual;  // throws java.lang.IllegalArgumentException
    function getObject(para1: jint; para2: JLObject): JLObject; overload; virtual;  // throws java.lang.IllegalArgumentException
  end;

  AMRemoteController = class sealed external 'android.media' name 'RemoteController' (JLObject)
  public
    type
      InnerMetadataEditor = class;
      Arr1InnerMetadataEditor = array of InnerMetadataEditor;
      Arr2InnerMetadataEditor = array of Arr1InnerMetadataEditor;
      Arr3InnerMetadataEditor = array of Arr2InnerMetadataEditor;
      InnerOnClientUpdateListener = interface;
      Arr1InnerOnClientUpdateListener = array of InnerOnClientUpdateListener;
      Arr2InnerOnClientUpdateListener = array of Arr1InnerOnClientUpdateListener;
      Arr3InnerOnClientUpdateListener = array of Arr2InnerOnClientUpdateListener;
      InnerMetadataEditor = class external 'android.media' name 'MetadataEditor' 
      end;

      InnerOnClientUpdateListener = interface external 'android.media' name 'OnClientUpdateListener' 
        procedure onClientChange(para1: jboolean); overload;
        procedure onClientPlaybackStateUpdate(para1: jint); overload;
        procedure onClientPlaybackStateUpdate(para1: jint; para2: jlong; para3: jlong; para4: jfloat); overload;
        procedure onClientTransportControlUpdate(para1: jint); overload;
        procedure onClientMetadataUpdate(para1: AMRemoteController.InnerMetadataEditor); overload;
      end;

  public
    const
      POSITION_SYNCHRONIZATION_CHECK = 1;
      POSITION_SYNCHRONIZATION_NONE = 0;
  public
    constructor create(para1: ACContext; para2: AMRemoteController.InnerOnClientUpdateListener); overload;  // throws java.lang.IllegalArgumentException
    constructor create(para1: ACContext; para2: AMRemoteController.InnerOnClientUpdateListener; para3: AOLooper); overload;  // throws java.lang.IllegalArgumentException
    function getEstimatedMediaPosition(): jlong; overload; virtual;
    function sendMediaKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;  // throws java.lang.IllegalArgumentException
    function seekTo(para1: jlong): jboolean; overload; virtual;  // throws java.lang.IllegalArgumentException
    function setArtworkConfiguration(para1: jint; para2: jint): jboolean; overload; virtual;  // throws java.lang.IllegalArgumentException
    function clearArtworkConfiguration(): jboolean; overload; virtual;
    function setSynchronizationMode(para1: jint): jboolean; overload; virtual;  // throws java.lang.IllegalArgumentException
    function editMetadata(): AMRemoteController.InnerMetadataEditor; overload; virtual;
  end;

  ANCCardEmulation = class sealed external 'android.nfc.cardemulation' name 'CardEmulation' (JLObject)
  public
    const
      ACTION_CHANGE_DEFAULT = 'android.nfc.cardemulation.action.ACTION_CHANGE_DEFAULT';
      CATEGORY_OTHER = 'other';
      CATEGORY_PAYMENT = 'payment';
      EXTRA_CATEGORY = 'category';
      EXTRA_SERVICE_COMPONENT = 'component';
      SELECTION_MODE_ALWAYS_ASK = 1;
      SELECTION_MODE_ASK_IF_CONFLICT = 2;
      SELECTION_MODE_PREFER_DEFAULT = 0;
  public
    class function getInstance(para1: ANNfcAdapter): ANCCardEmulation; static; overload;
    function isDefaultServiceForCategory(para1: ACComponentName; para2: JLString): jboolean; overload; virtual;
    function isDefaultServiceForAid(para1: ACComponentName; para2: JLString): jboolean; overload; virtual;
    function categoryAllowsForegroundPreference(para1: JLString): jboolean; overload; virtual;
    function getSelectionModeForCategory(para1: JLString): jint; overload; virtual;
    function registerAidsForService(para1: ACComponentName; para2: JLString; para3: JUList): jboolean; overload; virtual;
    function getAidsForService(para1: ACComponentName; para2: JLString): JUList; overload; virtual;
    function removeAidsForService(para1: ACComponentName; para2: JLString): jboolean; overload; virtual;
    function setPreferredService(para1: AAActivity; para2: ACComponentName): jboolean; overload; virtual;
    function unsetPreferredService(para1: AAActivity): jboolean; overload; virtual;
    function supportsAidPrefixRegistration(): jboolean; overload; virtual;
  end;

  APPrintDocumentAdapter = class abstract external 'android.print' name 'PrintDocumentAdapter' (JLObject)
  public
    type
      InnerLayoutResultCallback = class;
      Arr1InnerLayoutResultCallback = array of InnerLayoutResultCallback;
      Arr2InnerLayoutResultCallback = array of Arr1InnerLayoutResultCallback;
      Arr3InnerLayoutResultCallback = array of Arr2InnerLayoutResultCallback;
      InnerWriteResultCallback = class;
      Arr1InnerWriteResultCallback = array of InnerWriteResultCallback;
      Arr2InnerWriteResultCallback = array of Arr1InnerWriteResultCallback;
      Arr3InnerWriteResultCallback = array of Arr2InnerWriteResultCallback;
      InnerLayoutResultCallback = class abstract external 'android.print' name 'LayoutResultCallback' (JLObject)
      public
        procedure onLayoutFinished(para1: APPrintDocumentInfo; para2: jboolean); overload; virtual;
        procedure onLayoutFailed(para1: JLCharSequence); overload; virtual;
        procedure onLayoutCancelled(); overload; virtual;
      end;

      InnerWriteResultCallback = class abstract external 'android.print' name 'WriteResultCallback' (JLObject)
      public
        procedure onWriteFinished(para1: Arr1APPageRange); overload; virtual;
        procedure onWriteFinished(var para1: array of APPageRange); overload; virtual;
        procedure onWriteFailed(para1: JLCharSequence); overload; virtual;
        procedure onWriteCancelled(); overload; virtual;
      end;

  public
    const
      EXTRA_PRINT_PREVIEW = 'EXTRA_PRINT_PREVIEW';
  public
    constructor create(); overload;
    procedure onStart(); overload; virtual;
    procedure onLayout(para1: APPrintAttributes; para2: APPrintAttributes; para3: AOCancellationSignal; para4: APPrintDocumentAdapter.InnerLayoutResultCallback; para5: AOBundle); overload; virtual; abstract;
    procedure onWrite(para1: Arr1APPageRange; para2: AOParcelFileDescriptor; para3: AOCancellationSignal; para4: APPrintDocumentAdapter.InnerWriteResultCallback); overload; virtual; abstract;
    procedure onWrite(var para1: array of APPageRange; para2: AOParcelFileDescriptor; para3: AOCancellationSignal; para4: APPrintDocumentAdapter.InnerWriteResultCallback); overload; virtual; abstract;
    procedure onFinish(); overload; virtual;
  end;

  APPrintJob = class sealed external 'android.print' name 'PrintJob' (JLObject)
  public
    function getId(): APPrintJobId; overload; virtual;
    function getInfo(): APPrintJobInfo; overload; virtual;
    procedure cancel(); overload; virtual;
    procedure restart(); overload; virtual;
    function isQueued(): jboolean; overload; virtual;
    function isStarted(): jboolean; overload; virtual;
    function isBlocked(): jboolean; overload; virtual;
    function isCompleted(): jboolean; overload; virtual;
    function isFailed(): jboolean; overload; virtual;
    function isCancelled(): jboolean; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  APPrintManager = class sealed external 'android.print' name 'PrintManager' (JLObject)
  public
    function getPrintJobs(): JUList; overload; virtual;
    function print(para1: JLString; para2: APPrintDocumentAdapter; para3: APPrintAttributes): APPrintJob; overload; virtual;
  end;

  APPrintDocument = class sealed external 'android.printservice' name 'PrintDocument' (JLObject)
  public
    function getInfo(): APPrintDocumentInfo; overload; virtual;
    function getData(): AOParcelFileDescriptor; overload; virtual;
  end;

  APservicePrintJob = class sealed external 'android.printservice' name 'PrintJob' (JLObject)
  public
    function getId(): APPrintJobId; overload; virtual;
    function getInfo(): APPrintJobInfo; overload; virtual;
    function getDocument(): APPrintDocument; overload; virtual;
    function isQueued(): jboolean; overload; virtual;
    function isStarted(): jboolean; overload; virtual;
    function isBlocked(): jboolean; overload; virtual;
    function isCompleted(): jboolean; overload; virtual;
    function isFailed(): jboolean; overload; virtual;
    function isCancelled(): jboolean; overload; virtual;
    function start(): jboolean; overload; virtual;
    function block(para1: JLString): jboolean; overload; virtual;
    function complete(): jboolean; overload; virtual;
    function fail(para1: JLString): jboolean; overload; virtual;
    function cancel(): jboolean; overload; virtual;
    function setTag(para1: JLString): jboolean; overload; virtual;
    function getTag(): JLString; overload; virtual;
    function getAdvancedStringOption(para1: JLString): JLString; overload; virtual;
    function hasAdvancedOption(para1: JLString): jboolean; overload; virtual;
    function getAdvancedIntOption(para1: JLString): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  APPrinterDiscoverySession = class abstract external 'android.printservice' name 'PrinterDiscoverySession' (JLObject)
  public
    constructor create(); overload;
    function getPrinters(): JUList; overload; virtual; final;
    procedure addPrinters(para1: JUList); overload; virtual; final;
    procedure removePrinters(para1: JUList); overload; virtual; final;
    procedure onStartPrinterDiscovery(para1: JUList); overload; virtual; abstract;
    procedure onStopPrinterDiscovery(); overload; virtual; abstract;
    procedure onValidatePrinters(para1: JUList); overload; virtual; abstract;
    procedure onStartPrinterStateTracking(para1: APPrinterId); overload; virtual; abstract;
    procedure onStopPrinterStateTracking(para1: APPrinterId); overload; virtual; abstract;
    function getTrackedPrinters(): JUList; overload; virtual; final;
    procedure onDestroy(); overload; virtual; abstract;
    function isDestroyed(): jboolean; overload; virtual; final;
    function isPrinterDiscoveryStarted(): jboolean; overload; virtual; final;
  end;

  APDocumentsContract = class sealed external 'android.provider' name 'DocumentsContract' (JLObject)
  public
    type
      InnerRoot = class;
      Arr1InnerRoot = array of InnerRoot;
      Arr2InnerRoot = array of Arr1InnerRoot;
      Arr3InnerRoot = array of Arr2InnerRoot;
      InnerDocument = class;
      Arr1InnerDocument = array of InnerDocument;
      Arr2InnerDocument = array of Arr1InnerDocument;
      Arr3InnerDocument = array of Arr2InnerDocument;
      InnerRoot = class sealed external 'android.provider' name 'Root' (JLObject)
      public
        const
          COLUMN_AVAILABLE_BYTES = 'available_bytes';
          COLUMN_DOCUMENT_ID = 'document_id';
          COLUMN_FLAGS = 'flags';
          COLUMN_ICON = 'icon';
          COLUMN_MIME_TYPES = 'mime_types';
          COLUMN_ROOT_ID = 'root_id';
          COLUMN_SUMMARY = 'summary';
          COLUMN_TITLE = 'title';
          FLAG_LOCAL_ONLY = 2;
          FLAG_SUPPORTS_CREATE = 1;
          FLAG_SUPPORTS_IS_CHILD = 16;
          FLAG_SUPPORTS_RECENTS = 4;
          FLAG_SUPPORTS_SEARCH = 8;
      end;

      InnerDocument = class sealed external 'android.provider' name 'Document' (JLObject)
      public
        const
          COLUMN_DISPLAY_NAME = '_display_name';
          COLUMN_DOCUMENT_ID = 'document_id';
          COLUMN_FLAGS = 'flags';
          COLUMN_ICON = 'icon';
          COLUMN_LAST_MODIFIED = 'last_modified';
          COLUMN_MIME_TYPE = 'mime_type';
          COLUMN_SIZE = '_size';
          COLUMN_SUMMARY = 'summary';
          FLAG_DIR_PREFERS_GRID = 16;
          FLAG_DIR_PREFERS_LAST_MODIFIED = 32;
          FLAG_DIR_SUPPORTS_CREATE = 8;
          FLAG_SUPPORTS_DELETE = 4;
          FLAG_SUPPORTS_RENAME = 64;
          FLAG_SUPPORTS_THUMBNAIL = 1;
          FLAG_SUPPORTS_WRITE = 2;
          MIME_TYPE_DIR = 'vnd.android.document/directory';
      end;

  public
    const
      EXTRA_ERROR = 'error';
      EXTRA_INFO = 'info';
      EXTRA_LOADING = 'loading';
      PROVIDER_INTERFACE = 'android.content.action.DOCUMENTS_PROVIDER';
  public
    class function buildRootsUri(para1: JLString): ANUri; static; overload;
    class function buildRootUri(para1: JLString; para2: JLString): ANUri; static; overload;
    class function buildRecentDocumentsUri(para1: JLString; para2: JLString): ANUri; static; overload;
    class function buildTreeDocumentUri(para1: JLString; para2: JLString): ANUri; static; overload;
    class function buildDocumentUri(para1: JLString; para2: JLString): ANUri; static; overload;
    class function buildDocumentUriUsingTree(para1: ANUri; para2: JLString): ANUri; static; overload;
    class function buildChildDocumentsUri(para1: JLString; para2: JLString): ANUri; static; overload;
    class function buildChildDocumentsUriUsingTree(para1: ANUri; para2: JLString): ANUri; static; overload;
    class function buildSearchDocumentsUri(para1: JLString; para2: JLString; para3: JLString): ANUri; static; overload;
    class function isDocumentUri(para1: ACContext; para2: ANUri): jboolean; static; overload;
    class function getRootId(para1: ANUri): JLString; static; overload;
    class function getDocumentId(para1: ANUri): JLString; static; overload;
    class function getTreeDocumentId(para1: ANUri): JLString; static; overload;
    class function getSearchDocumentsQuery(para1: ANUri): JLString; static; overload;
    class function getDocumentThumbnail(para1: ACContentResolver; para2: ANUri; para3: AGPoint; para4: AOCancellationSignal): AGBitmap; static; overload;
    class function createDocument(para1: ACContentResolver; para2: ANUri; para3: JLString; para4: JLString): ANUri; static; overload;
    class function renameDocument(para1: ACContentResolver; para2: ANUri; para3: JLString): ANUri; static; overload;
    class function deleteDocument(para1: ACContentResolver; para2: ANUri): jboolean; static; overload;
  end;

  ATScene = class sealed external 'android.transition' name 'Scene' (JLObject)
  public
    constructor create(para1: AVViewGroup); overload;
    constructor create(para1: AVViewGroup; para2: AVView); overload;
    constructor create(para1: AVViewGroup; para2: AVViewGroup); overload;
    class function getSceneForLayout(para1: AVViewGroup; para2: jint; para3: ACContext): ATScene; static; overload;
    function getSceneRoot(): AVViewGroup; overload; virtual;
    procedure exit(); overload; virtual;
    procedure enter(); overload; virtual;
    procedure setEnterAction(para1: JLRunnable); overload; virtual;
    procedure setExitAction(para1: JLRunnable); overload; virtual;
  end;

  ATTransitionInflater = class external 'android.transition' name 'TransitionInflater' (JLObject)
  public
    class function from(para1: ACContext): ATTransitionInflater; static; overload;
    function inflateTransition(para1: jint): ATTransition; overload; virtual;
    function inflateTransitionManager(para1: jint; para2: AVViewGroup): ATTransitionManager; overload; virtual;
  end;

  ATTransitionManager = class external 'android.transition' name 'TransitionManager' (JLObject)
  public
    constructor create(); overload;
    procedure setTransition(para1: ATScene; para2: ATTransition); overload; virtual;
    procedure setTransition(para1: ATScene; para2: ATScene; para3: ATTransition); overload; virtual;
    procedure transitionTo(para1: ATScene); overload; virtual;
    class procedure go(para1: ATScene); static; overload;
    class procedure go(para1: ATScene; para2: ATTransition); static; overload;
    class procedure beginDelayedTransition(para1: AVViewGroup); static; overload;
    class procedure beginDelayedTransition(para1: AVViewGroup; para2: ATTransition); static; overload;
  end;

  ATTransitionValues = class external 'android.transition' name 'TransitionValues' (JLObject)
  public
    final var
      fvalues: JUMap; external name 'values';
  public
    var
      fview: AVView; external name 'view';
  public
    constructor create(); overload;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AULayoutDirection = class sealed external 'android.util' name 'LayoutDirection' (JLObject)
  public
    const
      INHERIT = 2;
      LOCALE = 3;
      LTR = 0;
      RTL = 1;
  end;

  AVACaptioningManager = class external 'android.view.accessibility' name 'CaptioningManager' (JLObject)
  public
    type
      InnerCaptioningChangeListener = class;
      Arr1InnerCaptioningChangeListener = array of InnerCaptioningChangeListener;
      Arr2InnerCaptioningChangeListener = array of Arr1InnerCaptioningChangeListener;
      Arr3InnerCaptioningChangeListener = array of Arr2InnerCaptioningChangeListener;
      InnerCaptionStyle = class;
      Arr1InnerCaptionStyle = array of InnerCaptionStyle;
      Arr2InnerCaptionStyle = array of Arr1InnerCaptionStyle;
      Arr3InnerCaptionStyle = array of Arr2InnerCaptionStyle;
      InnerCaptioningChangeListener = class abstract external 'android.view.accessibility' name 'CaptioningChangeListener' (JLObject)
      public
        constructor create(); overload;
        procedure onEnabledChanged(para1: jboolean); overload; virtual;
        procedure onUserStyleChanged(para1: AVACaptioningManager.InnerCaptionStyle); overload; virtual;
        procedure onLocaleChanged(para1: JULocale); overload; virtual;
        procedure onFontScaleChanged(para1: jfloat); overload; virtual;
      end;

      InnerCaptionStyle = class sealed external 'android.view.accessibility' name 'CaptionStyle' (JLObject)
      public
        const
          EDGE_TYPE_DEPRESSED = 4;
          EDGE_TYPE_DROP_SHADOW = 2;
          EDGE_TYPE_NONE = 0;
          EDGE_TYPE_OUTLINE = 1;
          EDGE_TYPE_RAISED = 3;
          EDGE_TYPE_UNSPECIFIED = -1;
      public
        final var
          fbackgroundColor: jint; external name 'backgroundColor';
          fedgeColor: jint; external name 'edgeColor';
          fedgeType: jint; external name 'edgeType';
          fforegroundColor: jint; external name 'foregroundColor';
          fwindowColor: jint; external name 'windowColor';
      public
        function hasBackgroundColor(): jboolean; overload; virtual;
        function hasForegroundColor(): jboolean; overload; virtual;
        function hasEdgeType(): jboolean; overload; virtual;
        function hasEdgeColor(): jboolean; overload; virtual;
        function hasWindowColor(): jboolean; overload; virtual;
        function getTypeface(): AGTypeface; overload; virtual;
      end;

  public
    function isEnabled(): jboolean; overload; virtual; final;
    function getLocale(): JULocale; overload; virtual; final;
    function getFontScale(): jfloat; overload; virtual; final;
    function getUserStyle(): AVACaptioningManager.InnerCaptionStyle; overload; virtual;
    procedure addCaptioningChangeListener(para1: AVACaptioningManager.InnerCaptioningChangeListener); overload; virtual;
    procedure removeCaptioningChangeListener(para1: AVACaptioningManager.InnerCaptioningChangeListener); overload; virtual;
  end;

  JUObjects = class sealed external 'java.util' name 'Objects' (JLObject)
  public
    class function compare(para1: JLObject; para2: JLObject; para3: JUComparator): jint; static; overload;
    class function deepEquals(para1: JLObject; para2: JLObject): jboolean; static; overload;
    class function equals(para1: JLObject; para2: JLObject): jboolean; static; overload;
    class function hash(para1: Arr1JLObject): jint; static; overload;
    class function hash(const para1: array of JLObject): jint; static; overload;
    class function hashCode(para1: JLObject): jint; static; overload;
    class function requireNonNull(para1: JLObject): JLObject; static; overload;
    class function requireNonNull(para1: JLObject; para2: JLString): JLObject; static; overload;
    class function toString(para1: JLObject): JLString; static; overload;
    class function toString(para1: JLObject; para2: JLString): JLString; static; overload;
  end;

  ATTransition = class abstract external 'android.transition' name 'Transition' (JLObject, JLCloneable)
  public
    type
      InnerEpicenterCallback = class;
      Arr1InnerEpicenterCallback = array of InnerEpicenterCallback;
      Arr2InnerEpicenterCallback = array of Arr1InnerEpicenterCallback;
      Arr3InnerEpicenterCallback = array of Arr2InnerEpicenterCallback;
      InnerTransitionListener = interface;
      Arr1InnerTransitionListener = array of InnerTransitionListener;
      Arr2InnerTransitionListener = array of Arr1InnerTransitionListener;
      Arr3InnerTransitionListener = array of Arr2InnerTransitionListener;
      InnerEpicenterCallback = class abstract external 'android.transition' name 'EpicenterCallback' (JLObject)
      public
        constructor create(); overload;
        function onGetEpicenter(para1: ATTransition): AGRect; overload; virtual; abstract;
      end;

      InnerTransitionListener = interface external 'android.transition' name 'TransitionListener' 
        procedure onTransitionStart(para1: ATTransition); overload;
        procedure onTransitionEnd(para1: ATTransition); overload;
        procedure onTransitionCancel(para1: ATTransition); overload;
        procedure onTransitionPause(para1: ATTransition); overload;
        procedure onTransitionResume(para1: ATTransition); overload;
      end;

  public
    const
      MATCH_ID = 3;
      MATCH_INSTANCE = 1;
      MATCH_ITEM_ID = 4;
      MATCH_NAME = 2;
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function setDuration(para1: jlong): ATTransition; overload; virtual;
    function getDuration(): jlong; overload; virtual;
    function setStartDelay(para1: jlong): ATTransition; overload; virtual;
    function getStartDelay(): jlong; overload; virtual;
    function setInterpolator(para1: AATimeInterpolator): ATTransition; overload; virtual;
    function getInterpolator(): AATimeInterpolator; overload; virtual;
    function getTransitionProperties(): Arr1JLString; overload; virtual;
    function createAnimator(para1: AVViewGroup; para2: ATTransitionValues; para3: ATTransitionValues): AAAnimator; overload; virtual;
    procedure setMatchOrder(para1: Arr1jint); overload; virtual;
    procedure setMatchOrder(const para1: array of jint); overload; virtual;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual; abstract;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual; abstract;
    function addTarget(para1: jint): ATTransition; overload; virtual;
    function addTarget(para1: JLString): ATTransition; overload; virtual;
    function addTarget(para1: JLClass): ATTransition; overload; virtual;
    function removeTarget(para1: jint): ATTransition; overload; virtual;
    function removeTarget(para1: JLString): ATTransition; overload; virtual;
    function excludeTarget(para1: jint; para2: jboolean): ATTransition; overload; virtual;
    function excludeTarget(para1: JLString; para2: jboolean): ATTransition; overload; virtual;
    function excludeChildren(para1: jint; para2: jboolean): ATTransition; overload; virtual;
    function excludeTarget(para1: AVView; para2: jboolean): ATTransition; overload; virtual;
    function excludeChildren(para1: AVView; para2: jboolean): ATTransition; overload; virtual;
    function excludeTarget(para1: JLClass; para2: jboolean): ATTransition; overload; virtual;
    function excludeChildren(para1: JLClass; para2: jboolean): ATTransition; overload; virtual;
    function addTarget(para1: AVView): ATTransition; overload; virtual;
    function removeTarget(para1: AVView): ATTransition; overload; virtual;
    function removeTarget(para1: JLClass): ATTransition; overload; virtual;
    function getTargetIds(): JUList; overload; virtual;
    function getTargets(): JUList; overload; virtual;
    function getTargetNames(): JUList; overload; virtual;
    function getTargetTypes(): JUList; overload; virtual;
    function getTransitionValues(para1: AVView; para2: jboolean): ATTransitionValues; overload; virtual;
    function addListener(para1: ATTransition.InnerTransitionListener): ATTransition; overload; virtual;
    function removeListener(para1: ATTransition.InnerTransitionListener): ATTransition; overload; virtual;
    procedure setEpicenterCallback(para1: ATTransition.InnerEpicenterCallback); overload; virtual;
    function getEpicenterCallback(): ATTransition.InnerEpicenterCallback; overload; virtual;
    function getEpicenter(): AGRect; overload; virtual;
    procedure setPathMotion(para1: ATPathMotion); overload; virtual;
    function getPathMotion(): ATPathMotion; overload; virtual;
    procedure setPropagation(para1: ATTransitionPropagation); overload; virtual;
    function getPropagation(): ATTransitionPropagation; overload; virtual;
    function canRemoveViews(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function clone(): ATTransition; overload; virtual;
    function getName(): JLString; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  AUArrayMap = class sealed external 'android.util' name 'ArrayMap' (JLObject, JUMap)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: AUArrayMap); overload;
    procedure clear(); overload; virtual;
    procedure ensureCapacity(para1: jint); overload; virtual;
    function containsKey(para1: JLObject): jboolean; overload; virtual;
    function indexOfKey(para1: JLObject): jint; overload; virtual;
    function containsValue(para1: JLObject): jboolean; overload; virtual;
    function get(para1: JLObject): JLObject; overload; virtual;
    function keyAt(para1: jint): JLObject; overload; virtual;
    function valueAt(para1: jint): JLObject; overload; virtual;
    function setValueAt(para1: jint; para2: JLObject): JLObject; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function put(para1: JLObject; para2: JLObject): JLObject; overload; virtual;
    procedure putAll(para1: AUArrayMap); overload; virtual;
    function remove(para1: JLObject): JLObject; overload; virtual;
    function removeAt(para1: jint): JLObject; overload; virtual;
    function size(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function containsAll(para1: JUCollection): jboolean; overload; virtual;
    procedure putAll(para1: JUMap); overload; virtual;
    function removeAll(para1: JUCollection): jboolean; overload; virtual;
    function retainAll(para1: JUCollection): jboolean; overload; virtual;
    function entrySet(): JUSet; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function values(): JUCollection; overload; virtual;
  end;

  APPPrintedPdfDocument = class external 'android.print.pdf' name 'PrintedPdfDocument' (AGPPdfDocument)
  public
    constructor create(para1: ACContext; para2: APPrintAttributes); overload;
    function startPage(para1: jint): AGPPdfDocument.InnerPage; overload; virtual;
    function getPageWidth(): jint; overload; virtual;
    function getPageHeight(): jint; overload; virtual;
    function getPageContentRect(): AGRect; overload; virtual;
  end;

  AHSensorEventListener2 = interface external 'android.hardware' name 'SensorEventListener2' (AHSensorEventListener)
    procedure onFlushCompleted(para1: AHSensor); overload;
  end;

  AMALoudnessEnhancer = class external 'android.media.audiofx' name 'LoudnessEnhancer' (AMAAudioEffect)
  public
    const
      PARAM_TARGET_GAIN_MB = 0;
  public
    constructor create(para1: jint); overload;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException, java.lang.RuntimeException
    procedure setTargetGain(para1: jint); overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
    function getTargetGain(): jfloat; overload; virtual;  // throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException
  end;

  ACSyncRequest = class external 'android.content' name 'SyncRequest' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.content' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function syncOnce(): ACSyncRequest.InnerBuilder; overload; virtual;
        function syncPeriodic(para1: jlong; para2: jlong): ACSyncRequest.InnerBuilder; overload; virtual;
        function setDisallowMetered(para1: jboolean): ACSyncRequest.InnerBuilder; overload; virtual;
        function setSyncAdapter(para1: AAAccount; para2: JLString): ACSyncRequest.InnerBuilder; overload; virtual;
        function setExtras(para1: AOBundle): ACSyncRequest.InnerBuilder; overload; virtual;
        function setNoRetry(para1: jboolean): ACSyncRequest.InnerBuilder; overload; virtual;
        function setIgnoreSettings(para1: jboolean): ACSyncRequest.InnerBuilder; overload; virtual;
        function setIgnoreBackoff(para1: jboolean): ACSyncRequest.InnerBuilder; overload; virtual;
        function setManual(para1: jboolean): ACSyncRequest.InnerBuilder; overload; virtual;
        function setExpedited(para1: jboolean): ACSyncRequest.InnerBuilder; overload; virtual;
        function build(): ACSyncRequest; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ACUriPermission = class sealed external 'android.content' name 'UriPermission' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      INVALID_TIME = jlong(-9223372036854775808);
  public
    function getUri(): ANUri; overload; virtual;
    function isReadPermission(): jboolean; overload; virtual;
    function isWritePermission(): jboolean; overload; virtual;
    function getPersistedTime(): jlong; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AMRating = class sealed external 'android.media' name 'Rating' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      RATING_3_STARS = 3;
      RATING_4_STARS = 4;
      RATING_5_STARS = 5;
      RATING_HEART = 1;
      RATING_NONE = 0;
      RATING_PERCENTAGE = 6;
      RATING_THUMB_UP_DOWN = 2;
  public
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    class function newUnratedRating(para1: jint): AMRating; static; overload;
    class function newHeartRating(para1: jboolean): AMRating; static; overload;
    class function newThumbRating(para1: jboolean): AMRating; static; overload;
    class function newStarRating(para1: jint; para2: jfloat): AMRating; static; overload;
    class function newPercentageRating(para1: jfloat): AMRating; static; overload;
    function isRated(): jboolean; overload; virtual;
    function getRatingStyle(): jint; overload; virtual;
    function hasHeart(): jboolean; overload; virtual;
    function isThumbUp(): jboolean; overload; virtual;
    function getStarRating(): jfloat; overload; virtual;
    function getPercentRating(): jfloat; overload; virtual;
  end;

  APPageRange = class sealed external 'android.print' name 'PageRange' (JLObject, AOParcelable)
  public
    final class var
      fALL_PAGES: APPageRange; external name 'ALL_PAGES';
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: jint; para2: jint); overload;
    function getStart(): jint; overload; virtual;
    function getEnd(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  APPrintAttributes = class sealed external 'android.print' name 'PrintAttributes' (JLObject, AOParcelable)
  public
    type
      InnerResolution = class;
      Arr1InnerResolution = array of InnerResolution;
      Arr2InnerResolution = array of Arr1InnerResolution;
      Arr3InnerResolution = array of Arr2InnerResolution;
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerMargins = class;
      Arr1InnerMargins = array of InnerMargins;
      Arr2InnerMargins = array of Arr1InnerMargins;
      Arr3InnerMargins = array of Arr2InnerMargins;
      InnerMediaSize = class;
      Arr1InnerMediaSize = array of InnerMediaSize;
      Arr2InnerMediaSize = array of Arr1InnerMediaSize;
      Arr3InnerMediaSize = array of Arr2InnerMediaSize;
      InnerResolution = class sealed external 'android.print' name 'Resolution' (JLObject)
      public
        constructor create(para1: JLString; para2: JLString; para3: jint; para4: jint); overload;
        function getId(): JLString; overload; virtual;
        function getLabel(): JLString; overload; virtual;
        function getHorizontalDpi(): jint; overload; virtual;
        function getVerticalDpi(): jint; overload; virtual;
        function hashCode(): jint; overload; virtual;
        function equals(para1: JLObject): jboolean; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerBuilder = class sealed external 'android.print' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function setMediaSize(para1: APPrintAttributes.InnerMediaSize): APPrintAttributes.InnerBuilder; overload; virtual;
        function setResolution(para1: APPrintAttributes.InnerResolution): APPrintAttributes.InnerBuilder; overload; virtual;
        function setMinMargins(para1: APPrintAttributes.InnerMargins): APPrintAttributes.InnerBuilder; overload; virtual;
        function setColorMode(para1: jint): APPrintAttributes.InnerBuilder; overload; virtual;
        function build(): APPrintAttributes; overload; virtual;
      end;

      InnerMargins = class sealed external 'android.print' name 'Margins' (JLObject)
      public
        final class var
          fNO_MARGINS: APPrintAttributes.InnerMargins; external name 'NO_MARGINS';
      public
        constructor create(para1: jint; para2: jint; para3: jint; para4: jint); overload;
        function getLeftMils(): jint; overload; virtual;
        function getTopMils(): jint; overload; virtual;
        function getRightMils(): jint; overload; virtual;
        function getBottomMils(): jint; overload; virtual;
        function hashCode(): jint; overload; virtual;
        function equals(para1: JLObject): jboolean; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

      InnerMediaSize = class sealed external 'android.print' name 'MediaSize' (JLObject)
      public
        final class var
          fISO_A0: APPrintAttributes.InnerMediaSize; external name 'ISO_A0';
          fISO_A1: APPrintAttributes.InnerMediaSize; external name 'ISO_A1';
          fISO_A10: APPrintAttributes.InnerMediaSize; external name 'ISO_A10';
          fISO_A2: APPrintAttributes.InnerMediaSize; external name 'ISO_A2';
          fISO_A3: APPrintAttributes.InnerMediaSize; external name 'ISO_A3';
          fISO_A4: APPrintAttributes.InnerMediaSize; external name 'ISO_A4';
          fISO_A5: APPrintAttributes.InnerMediaSize; external name 'ISO_A5';
          fISO_A6: APPrintAttributes.InnerMediaSize; external name 'ISO_A6';
          fISO_A7: APPrintAttributes.InnerMediaSize; external name 'ISO_A7';
          fISO_A8: APPrintAttributes.InnerMediaSize; external name 'ISO_A8';
          fISO_A9: APPrintAttributes.InnerMediaSize; external name 'ISO_A9';
          fISO_B0: APPrintAttributes.InnerMediaSize; external name 'ISO_B0';
          fISO_B1: APPrintAttributes.InnerMediaSize; external name 'ISO_B1';
          fISO_B10: APPrintAttributes.InnerMediaSize; external name 'ISO_B10';
          fISO_B2: APPrintAttributes.InnerMediaSize; external name 'ISO_B2';
          fISO_B3: APPrintAttributes.InnerMediaSize; external name 'ISO_B3';
          fISO_B4: APPrintAttributes.InnerMediaSize; external name 'ISO_B4';
          fISO_B5: APPrintAttributes.InnerMediaSize; external name 'ISO_B5';
          fISO_B6: APPrintAttributes.InnerMediaSize; external name 'ISO_B6';
          fISO_B7: APPrintAttributes.InnerMediaSize; external name 'ISO_B7';
          fISO_B8: APPrintAttributes.InnerMediaSize; external name 'ISO_B8';
          fISO_B9: APPrintAttributes.InnerMediaSize; external name 'ISO_B9';
          fISO_C0: APPrintAttributes.InnerMediaSize; external name 'ISO_C0';
          fISO_C1: APPrintAttributes.InnerMediaSize; external name 'ISO_C1';
          fISO_C10: APPrintAttributes.InnerMediaSize; external name 'ISO_C10';
          fISO_C2: APPrintAttributes.InnerMediaSize; external name 'ISO_C2';
          fISO_C3: APPrintAttributes.InnerMediaSize; external name 'ISO_C3';
          fISO_C4: APPrintAttributes.InnerMediaSize; external name 'ISO_C4';
          fISO_C5: APPrintAttributes.InnerMediaSize; external name 'ISO_C5';
          fISO_C6: APPrintAttributes.InnerMediaSize; external name 'ISO_C6';
          fISO_C7: APPrintAttributes.InnerMediaSize; external name 'ISO_C7';
          fISO_C8: APPrintAttributes.InnerMediaSize; external name 'ISO_C8';
          fISO_C9: APPrintAttributes.InnerMediaSize; external name 'ISO_C9';
          fJIS_B0: APPrintAttributes.InnerMediaSize; external name 'JIS_B0';
          fJIS_B1: APPrintAttributes.InnerMediaSize; external name 'JIS_B1';
          fJIS_B10: APPrintAttributes.InnerMediaSize; external name 'JIS_B10';
          fJIS_B2: APPrintAttributes.InnerMediaSize; external name 'JIS_B2';
          fJIS_B3: APPrintAttributes.InnerMediaSize; external name 'JIS_B3';
          fJIS_B4: APPrintAttributes.InnerMediaSize; external name 'JIS_B4';
          fJIS_B5: APPrintAttributes.InnerMediaSize; external name 'JIS_B5';
          fJIS_B6: APPrintAttributes.InnerMediaSize; external name 'JIS_B6';
          fJIS_B7: APPrintAttributes.InnerMediaSize; external name 'JIS_B7';
          fJIS_B8: APPrintAttributes.InnerMediaSize; external name 'JIS_B8';
          fJIS_B9: APPrintAttributes.InnerMediaSize; external name 'JIS_B9';
          fJIS_EXEC: APPrintAttributes.InnerMediaSize; external name 'JIS_EXEC';
          fJPN_CHOU2: APPrintAttributes.InnerMediaSize; external name 'JPN_CHOU2';
          fJPN_CHOU3: APPrintAttributes.InnerMediaSize; external name 'JPN_CHOU3';
          fJPN_CHOU4: APPrintAttributes.InnerMediaSize; external name 'JPN_CHOU4';
          fJPN_HAGAKI: APPrintAttributes.InnerMediaSize; external name 'JPN_HAGAKI';
          fJPN_KAHU: APPrintAttributes.InnerMediaSize; external name 'JPN_KAHU';
          fJPN_KAKU2: APPrintAttributes.InnerMediaSize; external name 'JPN_KAKU2';
          fJPN_OUFUKU: APPrintAttributes.InnerMediaSize; external name 'JPN_OUFUKU';
          fJPN_YOU4: APPrintAttributes.InnerMediaSize; external name 'JPN_YOU4';
          fNA_FOOLSCAP: APPrintAttributes.InnerMediaSize; external name 'NA_FOOLSCAP';
          fNA_GOVT_LETTER: APPrintAttributes.InnerMediaSize; external name 'NA_GOVT_LETTER';
          fNA_INDEX_3X5: APPrintAttributes.InnerMediaSize; external name 'NA_INDEX_3X5';
          fNA_INDEX_4X6: APPrintAttributes.InnerMediaSize; external name 'NA_INDEX_4X6';
          fNA_INDEX_5X8: APPrintAttributes.InnerMediaSize; external name 'NA_INDEX_5X8';
          fNA_JUNIOR_LEGAL: APPrintAttributes.InnerMediaSize; external name 'NA_JUNIOR_LEGAL';
          fNA_LEDGER: APPrintAttributes.InnerMediaSize; external name 'NA_LEDGER';
          fNA_LEGAL: APPrintAttributes.InnerMediaSize; external name 'NA_LEGAL';
          fNA_LETTER: APPrintAttributes.InnerMediaSize; external name 'NA_LETTER';
          fNA_MONARCH: APPrintAttributes.InnerMediaSize; external name 'NA_MONARCH';
          fNA_QUARTO: APPrintAttributes.InnerMediaSize; external name 'NA_QUARTO';
          fNA_TABLOID: APPrintAttributes.InnerMediaSize; external name 'NA_TABLOID';
          fOM_DAI_PA_KAI: APPrintAttributes.InnerMediaSize; external name 'OM_DAI_PA_KAI';
          fOM_JUURO_KU_KAI: APPrintAttributes.InnerMediaSize; external name 'OM_JUURO_KU_KAI';
          fOM_PA_KAI: APPrintAttributes.InnerMediaSize; external name 'OM_PA_KAI';
          fPRC_1: APPrintAttributes.InnerMediaSize; external name 'PRC_1';
          fPRC_10: APPrintAttributes.InnerMediaSize; external name 'PRC_10';
          fPRC_16K: APPrintAttributes.InnerMediaSize; external name 'PRC_16K';
          fPRC_2: APPrintAttributes.InnerMediaSize; external name 'PRC_2';
          fPRC_3: APPrintAttributes.InnerMediaSize; external name 'PRC_3';
          fPRC_4: APPrintAttributes.InnerMediaSize; external name 'PRC_4';
          fPRC_5: APPrintAttributes.InnerMediaSize; external name 'PRC_5';
          fPRC_6: APPrintAttributes.InnerMediaSize; external name 'PRC_6';
          fPRC_7: APPrintAttributes.InnerMediaSize; external name 'PRC_7';
          fPRC_8: APPrintAttributes.InnerMediaSize; external name 'PRC_8';
          fPRC_9: APPrintAttributes.InnerMediaSize; external name 'PRC_9';
          fROC_16K: APPrintAttributes.InnerMediaSize; external name 'ROC_16K';
          fROC_8K: APPrintAttributes.InnerMediaSize; external name 'ROC_8K';
          fUNKNOWN_LANDSCAPE: APPrintAttributes.InnerMediaSize; external name 'UNKNOWN_LANDSCAPE';
          fUNKNOWN_PORTRAIT: APPrintAttributes.InnerMediaSize; external name 'UNKNOWN_PORTRAIT';
      public
        constructor create(para1: JLString; para2: JLString; para3: jint; para4: jint); overload;
        function getId(): JLString; overload; virtual;
        function getLabel(para1: ACPPackageManager): JLString; overload; virtual;
        function getWidthMils(): jint; overload; virtual;
        function getHeightMils(): jint; overload; virtual;
        function isPortrait(): jboolean; overload; virtual;
        function asPortrait(): APPrintAttributes.InnerMediaSize; overload; virtual;
        function asLandscape(): APPrintAttributes.InnerMediaSize; overload; virtual;
        function hashCode(): jint; overload; virtual;
        function equals(para1: JLObject): jboolean; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;

  public
    const
      COLOR_MODE_COLOR = 2;
      COLOR_MODE_MONOCHROME = 1;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getMediaSize(): APPrintAttributes.InnerMediaSize; overload; virtual;
    function getResolution(): APPrintAttributes.InnerResolution; overload; virtual;
    function getMinMargins(): APPrintAttributes.InnerMargins; overload; virtual;
    function getColorMode(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  APPrintDocumentInfo = class sealed external 'android.print' name 'PrintDocumentInfo' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.print' name 'Builder' (JLObject)
      public
        constructor create(para1: JLString); overload;
        function setPageCount(para1: jint): APPrintDocumentInfo.InnerBuilder; overload; virtual;
        function setContentType(para1: jint): APPrintDocumentInfo.InnerBuilder; overload; virtual;
        function build(): APPrintDocumentInfo; overload; virtual;
      end;

  public
    const
      CONTENT_TYPE_DOCUMENT = 0;
      CONTENT_TYPE_PHOTO = 1;
      CONTENT_TYPE_UNKNOWN = -1;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      PAGE_COUNT_UNKNOWN = -1;
  public
    function getName(): JLString; overload; virtual;
    function getPageCount(): jint; overload; virtual;
    function getContentType(): jint; overload; virtual;
    function getDataSize(): jlong; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  APPrintJobId = class sealed external 'android.print' name 'PrintJobId' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  APPrintJobInfo = class sealed external 'android.print' name 'PrintJobInfo' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.print' name 'Builder' (JLObject)
      public
        constructor create(para1: APPrintJobInfo); overload;
        procedure setCopies(para1: jint); overload; virtual;
        procedure setAttributes(para1: APPrintAttributes); overload; virtual;
        procedure setPages(para1: Arr1APPageRange); overload; virtual;
        procedure setPages(var para1: array of APPageRange); overload; virtual;
        procedure putAdvancedOption(para1: JLString; para2: JLString); overload; virtual;
        procedure putAdvancedOption(para1: JLString; para2: jint); overload; virtual;
        function build(): APPrintJobInfo; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      STATE_BLOCKED = 4;
      STATE_CANCELED = 7;
      STATE_COMPLETED = 5;
      STATE_CREATED = 1;
      STATE_FAILED = 6;
      STATE_QUEUED = 2;
      STATE_STARTED = 3;
  public
    function getId(): APPrintJobId; overload; virtual;
    function getLabel(): JLString; overload; virtual;
    function getPrinterId(): APPrinterId; overload; virtual;
    function getState(): jint; overload; virtual;
    function getCreationTime(): jlong; overload; virtual;
    function getCopies(): jint; overload; virtual;
    function getPages(): Arr1APPageRange; overload; virtual;
    function getAttributes(): APPrintAttributes; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  APPrinterId = class sealed external 'android.print' name 'PrinterId' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getLocalId(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  APPrinterInfo = class sealed external 'android.print' name 'PrinterInfo' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.print' name 'Builder' (JLObject)
      public
        constructor create(para1: APPrinterId; para2: JLString; para3: jint); overload;
        constructor create(para1: APPrinterInfo); overload;
        function setStatus(para1: jint): APPrinterInfo.InnerBuilder; overload; virtual;
        function setName(para1: JLString): APPrinterInfo.InnerBuilder; overload; virtual;
        function setDescription(para1: JLString): APPrinterInfo.InnerBuilder; overload; virtual;
        function setCapabilities(para1: APPrinterCapabilitiesInfo): APPrinterInfo.InnerBuilder; overload; virtual;
        function build(): APPrinterInfo; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      STATUS_BUSY = 2;
      STATUS_IDLE = 1;
      STATUS_UNAVAILABLE = 3;
  public
    function getId(): APPrinterId; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getStatus(): jint; overload; virtual;
    function getDescription(): JLString; overload; virtual;
    function getCapabilities(): APPrinterCapabilitiesInfo; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  APTelephony = class sealed external 'android.provider' name 'Telephony' (JLObject)
  public
    type
      InnerCarriers = class;
      Arr1InnerCarriers = array of InnerCarriers;
      Arr2InnerCarriers = array of Arr1InnerCarriers;
      Arr3InnerCarriers = array of Arr2InnerCarriers;
      InnerMmsSms = class;
      Arr1InnerMmsSms = array of InnerMmsSms;
      Arr2InnerMmsSms = array of Arr1InnerMmsSms;
      Arr3InnerMmsSms = array of Arr2InnerMmsSms;
      InnerThreadsColumns = interface;
      Arr1InnerThreadsColumns = array of InnerThreadsColumns;
      Arr2InnerThreadsColumns = array of Arr1InnerThreadsColumns;
      Arr3InnerThreadsColumns = array of Arr2InnerThreadsColumns;
      InnerCanonicalAddressesColumns = interface;
      Arr1InnerCanonicalAddressesColumns = array of InnerCanonicalAddressesColumns;
      Arr2InnerCanonicalAddressesColumns = array of Arr1InnerCanonicalAddressesColumns;
      Arr3InnerCanonicalAddressesColumns = array of Arr2InnerCanonicalAddressesColumns;
      InnerBaseMmsColumns = interface;
      Arr1InnerBaseMmsColumns = array of InnerBaseMmsColumns;
      Arr2InnerBaseMmsColumns = array of Arr1InnerBaseMmsColumns;
      Arr3InnerBaseMmsColumns = array of Arr2InnerBaseMmsColumns;
      InnerTextBasedSmsColumns = interface;
      Arr1InnerTextBasedSmsColumns = array of InnerTextBasedSmsColumns;
      Arr2InnerTextBasedSmsColumns = array of Arr1InnerTextBasedSmsColumns;
      Arr3InnerTextBasedSmsColumns = array of Arr2InnerTextBasedSmsColumns;
      InnerThreads = class;
      Arr1InnerThreads = array of InnerThreads;
      Arr2InnerThreads = array of Arr1InnerThreads;
      Arr3InnerThreads = array of Arr2InnerThreads;
      InnerMms = class;
      Arr1InnerMms = array of InnerMms;
      Arr2InnerMms = array of Arr1InnerMms;
      Arr3InnerMms = array of Arr2InnerMms;
      InnerSms = class;
      Arr1InnerSms = array of InnerSms;
      Arr2InnerSms = array of Arr1InnerSms;
      Arr3InnerSms = array of Arr2InnerSms;
      InnerCarriers = class sealed external 'android.provider' name 'Carriers' (JLObject, APBaseColumns)
      public
        const
          APN = 'apn';
          AUTH_TYPE = 'authtype';
          BEARER = 'bearer';
          CARRIER_ENABLED = 'carrier_enabled';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          CURRENT = 'current';
          DEFAULT_SORT_ORDER = 'name ASC';
          MCC = 'mcc';
          MMSC = 'mmsc';
          MMSPORT = 'mmsport';
          MMSPROXY = 'mmsproxy';
          MNC = 'mnc';
          MVNO_MATCH_DATA = 'mvno_match_data';
          MVNO_TYPE = 'mvno_type';
          NAME = 'name';
          NUMERIC = 'numeric';
          PASSWORD = 'password';
          PORT = 'port';
          PROTOCOL = 'protocol';
          PROXY = 'proxy';
          ROAMING_PROTOCOL = 'roaming_protocol';
          SERVER = 'server';
          &TYPE = 'type';
          USER = 'user';
      end;

      InnerMmsSms = class sealed external 'android.provider' name 'MmsSms' (JLObject, APBaseColumns)
      public
        type
          InnerPendingMessages = class;
          Arr1InnerPendingMessages = array of InnerPendingMessages;
          Arr2InnerPendingMessages = array of Arr1InnerPendingMessages;
          Arr3InnerPendingMessages = array of Arr2InnerPendingMessages;
          InnerPendingMessages = class sealed external 'android.provider' name 'PendingMessages' (JLObject, APBaseColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DUE_TIME = 'due_time';
              ERROR_CODE = 'err_code';
              ERROR_TYPE = 'err_type';
              LAST_TRY = 'last_try';
              MSG_ID = 'msg_id';
              MSG_TYPE = 'msg_type';
              PROTO_TYPE = 'proto_type';
              RETRY_INDEX = 'retry_index';
          end;

      public
        final class var
          fCONTENT_CONVERSATIONS_URI: ANUri; external name 'CONTENT_CONVERSATIONS_URI';
          fCONTENT_DRAFT_URI: ANUri; external name 'CONTENT_DRAFT_URI';
          fCONTENT_FILTER_BYPHONE_URI: ANUri; external name 'CONTENT_FILTER_BYPHONE_URI';
          fCONTENT_LOCKED_URI: ANUri; external name 'CONTENT_LOCKED_URI';
          fCONTENT_UNDELIVERED_URI: ANUri; external name 'CONTENT_UNDELIVERED_URI';
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          ERR_TYPE_GENERIC = 1;
          ERR_TYPE_GENERIC_PERMANENT = 10;
          ERR_TYPE_MMS_PROTO_PERMANENT = 12;
          ERR_TYPE_MMS_PROTO_TRANSIENT = 3;
          ERR_TYPE_SMS_PROTO_PERMANENT = 11;
          ERR_TYPE_SMS_PROTO_TRANSIENT = 2;
          ERR_TYPE_TRANSPORT_FAILURE = 4;
          MMS_PROTO = 1;
          NO_ERROR = 0;
      public
        final class var
          fSEARCH_URI: ANUri; external name 'SEARCH_URI';
      public
        const
          SMS_PROTO = 0;
          TYPE_DISCRIMINATOR_COLUMN = 'transport_type';
      end;

      InnerThreadsColumns = interface external 'android.provider' name 'ThreadsColumns' (APBaseColumns)
        const
          ARCHIVED = 'archived';
          DATE = 'date';
          ERROR = 'error';
          HAS_ATTACHMENT = 'has_attachment';
          MESSAGE_COUNT = 'message_count';
          READ = 'read';
          RECIPIENT_IDS = 'recipient_ids';
          SNIPPET = 'snippet';
          SNIPPET_CHARSET = 'snippet_cs';
          &TYPE = 'type';
      end;

      InnerCanonicalAddressesColumns = interface external 'android.provider' name 'CanonicalAddressesColumns' (APBaseColumns)
        const
          ADDRESS = 'address';
      end;

      InnerBaseMmsColumns = interface external 'android.provider' name 'BaseMmsColumns' (APBaseColumns)
        const
          CONTENT_CLASS = 'ct_cls';
          CONTENT_LOCATION = 'ct_l';
          CONTENT_TYPE = 'ct_t';
          CREATOR = 'creator';
          DATE = 'date';
          DATE_SENT = 'date_sent';
          DELIVERY_REPORT = 'd_rpt';
          DELIVERY_TIME = 'd_tm';
          EXPIRY = 'exp';
          LOCKED = 'locked';
          MESSAGE_BOX = 'msg_box';
          MESSAGE_BOX_ALL = 0;
          MESSAGE_BOX_DRAFTS = 3;
          MESSAGE_BOX_FAILED = 5;
          MESSAGE_BOX_INBOX = 1;
          MESSAGE_BOX_OUTBOX = 4;
          MESSAGE_BOX_SENT = 2;
          MESSAGE_CLASS = 'm_cls';
          MESSAGE_ID = 'm_id';
          MESSAGE_SIZE = 'm_size';
          MESSAGE_TYPE = 'm_type';
          MMS_VERSION = 'v';
          PRIORITY = 'pri';
          READ = 'read';
          READ_REPORT = 'rr';
          READ_STATUS = 'read_status';
          REPORT_ALLOWED = 'rpt_a';
          RESPONSE_STATUS = 'resp_st';
          RESPONSE_TEXT = 'resp_txt';
          RETRIEVE_STATUS = 'retr_st';
          RETRIEVE_TEXT = 'retr_txt';
          RETRIEVE_TEXT_CHARSET = 'retr_txt_cs';
          SEEN = 'seen';
          STATUS = 'st';
          SUBJECT = 'sub';
          SUBJECT_CHARSET = 'sub_cs';
          TEXT_ONLY = 'text_only';
          THREAD_ID = 'thread_id';
          TRANSACTION_ID = 'tr_id';
      end;

      InnerTextBasedSmsColumns = interface external 'android.provider' name 'TextBasedSmsColumns' 
        const
          ADDRESS = 'address';
          BODY = 'body';
          CREATOR = 'creator';
          DATE = 'date';
          DATE_SENT = 'date_sent';
          ERROR_CODE = 'error_code';
          LOCKED = 'locked';
          MESSAGE_TYPE_ALL = 0;
          MESSAGE_TYPE_DRAFT = 3;
          MESSAGE_TYPE_FAILED = 5;
          MESSAGE_TYPE_INBOX = 1;
          MESSAGE_TYPE_OUTBOX = 4;
          MESSAGE_TYPE_QUEUED = 6;
          MESSAGE_TYPE_SENT = 2;
          PERSON = 'person';
          PROTOCOL = 'protocol';
          READ = 'read';
          REPLY_PATH_PRESENT = 'reply_path_present';
          SEEN = 'seen';
          SERVICE_CENTER = 'service_center';
          STATUS = 'status';
          STATUS_COMPLETE = 0;
          STATUS_FAILED = 64;
          STATUS_NONE = -1;
          STATUS_PENDING = 32;
          SUBJECT = 'subject';
          THREAD_ID = 'thread_id';
          &TYPE = 'type';
      end;

      InnerThreads = class sealed external 'android.provider' name 'Threads' (JLObject, APTelephony.InnerThreadsColumns)
      public
        const
          BROADCAST_THREAD = 1;
          COMMON_THREAD = 0;
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          fOBSOLETE_THREADS_URI: ANUri; external name 'OBSOLETE_THREADS_URI';
      end;

      InnerMms = class sealed external 'android.provider' name 'Mms' (JLObject, APTelephony.InnerBaseMmsColumns)
      public
        type
          InnerIntents = class;
          Arr1InnerIntents = array of InnerIntents;
          Arr2InnerIntents = array of Arr1InnerIntents;
          Arr3InnerIntents = array of Arr2InnerIntents;
          InnerRate = class;
          Arr1InnerRate = array of InnerRate;
          Arr2InnerRate = array of Arr1InnerRate;
          Arr3InnerRate = array of Arr2InnerRate;
          InnerPart = class;
          Arr1InnerPart = array of InnerPart;
          Arr2InnerPart = array of Arr1InnerPart;
          Arr3InnerPart = array of Arr2InnerPart;
          InnerAddr = class;
          Arr1InnerAddr = array of InnerAddr;
          Arr2InnerAddr = array of Arr1InnerAddr;
          Arr3InnerAddr = array of Arr2InnerAddr;
          InnerOutbox = class;
          Arr1InnerOutbox = array of InnerOutbox;
          Arr2InnerOutbox = array of Arr1InnerOutbox;
          Arr3InnerOutbox = array of Arr2InnerOutbox;
          InnerDraft = class;
          Arr1InnerDraft = array of InnerDraft;
          Arr2InnerDraft = array of Arr1InnerDraft;
          Arr3InnerDraft = array of Arr2InnerDraft;
          InnerSent = class;
          Arr1InnerSent = array of InnerSent;
          Arr2InnerSent = array of Arr1InnerSent;
          Arr3InnerSent = array of Arr2InnerSent;
          InnerInbox = class;
          Arr1InnerInbox = array of InnerInbox;
          Arr2InnerInbox = array of Arr1InnerInbox;
          Arr3InnerInbox = array of Arr2InnerInbox;
          InnerIntents = class sealed external 'android.provider' name 'Intents' (JLObject)
          public
            const
              CONTENT_CHANGED_ACTION = 'android.intent.action.CONTENT_CHANGED';
              DELETED_CONTENTS = 'deleted_contents';
          end;

          InnerRate = class sealed external 'android.provider' name 'Rate' (JLObject)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              SENT_TIME = 'sent_time';
          end;

          InnerPart = class sealed external 'android.provider' name 'Part' (JLObject, APBaseColumns)
          public
            const
              CHARSET = 'chset';
              CONTENT_DISPOSITION = 'cd';
              CONTENT_ID = 'cid';
              CONTENT_LOCATION = 'cl';
              CONTENT_TYPE = 'ct';
              CT_START = 'ctt_s';
              CT_TYPE = 'ctt_t';
              FILENAME = 'fn';
              MSG_ID = 'mid';
              NAME = 'name';
              SEQ = 'seq';
              TEXT = 'text';
              _DATA = '_data';
          end;

          InnerAddr = class sealed external 'android.provider' name 'Addr' (JLObject, APBaseColumns)
          public
            const
              ADDRESS = 'address';
              CHARSET = 'charset';
              CONTACT_ID = 'contact_id';
              MSG_ID = 'msg_id';
              &TYPE = 'type';
          end;

          InnerOutbox = class sealed external 'android.provider' name 'Outbox' (JLObject, APTelephony.InnerBaseMmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
          end;

          InnerDraft = class sealed external 'android.provider' name 'Draft' (JLObject, APTelephony.InnerBaseMmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
          end;

          InnerSent = class sealed external 'android.provider' name 'Sent' (JLObject, APTelephony.InnerBaseMmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
          end;

          InnerInbox = class sealed external 'android.provider' name 'Inbox' (JLObject, APTelephony.InnerBaseMmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
          end;

      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'date DESC';
      public
        final class var
          fREPORT_REQUEST_URI: ANUri; external name 'REPORT_REQUEST_URI';
          fREPORT_STATUS_URI: ANUri; external name 'REPORT_STATUS_URI';
      end;

      InnerSms = class sealed external 'android.provider' name 'Sms' (JLObject, APBaseColumns, APTelephony.InnerTextBasedSmsColumns)
      public
        type
          InnerIntents = class;
          Arr1InnerIntents = array of InnerIntents;
          Arr2InnerIntents = array of Arr1InnerIntents;
          Arr3InnerIntents = array of Arr2InnerIntents;
          InnerConversations = class;
          Arr1InnerConversations = array of InnerConversations;
          Arr2InnerConversations = array of Arr1InnerConversations;
          Arr3InnerConversations = array of Arr2InnerConversations;
          InnerOutbox = class;
          Arr1InnerOutbox = array of InnerOutbox;
          Arr2InnerOutbox = array of Arr1InnerOutbox;
          Arr3InnerOutbox = array of Arr2InnerOutbox;
          InnerDraft = class;
          Arr1InnerDraft = array of InnerDraft;
          Arr2InnerDraft = array of Arr1InnerDraft;
          Arr3InnerDraft = array of Arr2InnerDraft;
          InnerSent = class;
          Arr1InnerSent = array of InnerSent;
          Arr2InnerSent = array of Arr1InnerSent;
          Arr3InnerSent = array of Arr2InnerSent;
          InnerInbox = class;
          Arr1InnerInbox = array of InnerInbox;
          Arr2InnerInbox = array of Arr1InnerInbox;
          Arr3InnerInbox = array of Arr2InnerInbox;
          InnerIntents = class sealed external 'android.provider' name 'Intents' (JLObject)
          public
            const
              ACTION_CHANGE_DEFAULT = 'android.provider.Telephony.ACTION_CHANGE_DEFAULT';
              DATA_SMS_RECEIVED_ACTION = 'android.intent.action.DATA_SMS_RECEIVED';
              EXTRA_PACKAGE_NAME = 'package';
              RESULT_SMS_DUPLICATED = 5;
              RESULT_SMS_GENERIC_ERROR = 2;
              RESULT_SMS_HANDLED = 1;
              RESULT_SMS_OUT_OF_MEMORY = 3;
              RESULT_SMS_UNSUPPORTED = 4;
              SIM_FULL_ACTION = 'android.provider.Telephony.SIM_FULL';
              SMS_CB_RECEIVED_ACTION = 'android.provider.Telephony.SMS_CB_RECEIVED';
              SMS_DELIVER_ACTION = 'android.provider.Telephony.SMS_DELIVER';
              SMS_EMERGENCY_CB_RECEIVED_ACTION = 'android.provider.Telephony.SMS_EMERGENCY_CB_RECEIVED';
              SMS_RECEIVED_ACTION = 'android.provider.Telephony.SMS_RECEIVED';
              SMS_REJECTED_ACTION = 'android.provider.Telephony.SMS_REJECTED';
              SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED_ACTION = 'android.provider.Telephony.SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED';
              WAP_PUSH_DELIVER_ACTION = 'android.provider.Telephony.WAP_PUSH_DELIVER';
              WAP_PUSH_RECEIVED_ACTION = 'android.provider.Telephony.WAP_PUSH_RECEIVED';
          public
            class function getMessagesFromIntent(para1: ACIntent): Arr1ATSmsMessage; static; overload;
          end;

          InnerConversations = class sealed external 'android.provider' name 'Conversations' (JLObject, APBaseColumns, APTelephony.InnerTextBasedSmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
              MESSAGE_COUNT = 'msg_count';
              SNIPPET = 'snippet';
          end;

          InnerOutbox = class sealed external 'android.provider' name 'Outbox' (JLObject, APBaseColumns, APTelephony.InnerTextBasedSmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
          end;

          InnerDraft = class sealed external 'android.provider' name 'Draft' (JLObject, APBaseColumns, APTelephony.InnerTextBasedSmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
          end;

          InnerSent = class sealed external 'android.provider' name 'Sent' (JLObject, APBaseColumns, APTelephony.InnerTextBasedSmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
          end;

          InnerInbox = class sealed external 'android.provider' name 'Inbox' (JLObject, APBaseColumns, APTelephony.InnerTextBasedSmsColumns)
          public
            final class var
              fCONTENT_URI: ANUri; external name 'CONTENT_URI';
          public
            const
              DEFAULT_SORT_ORDER = 'date DESC';
          end;

      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          DEFAULT_SORT_ORDER = 'date DESC';
      public
        class function getDefaultSmsPackage(para1: ACContext): JLString; static; overload;
      end;

  end;

  AMImage = class abstract external 'android.media' name 'Image' (JLObject, JLAutoCloseable)
  public
    type
      InnerPlane = class;
      Arr1InnerPlane = array of InnerPlane;
      Arr2InnerPlane = array of Arr1InnerPlane;
      Arr3InnerPlane = array of Arr2InnerPlane;
      InnerPlane = class abstract external 'android.media' name 'Plane' (JLObject)
      public
        function getRowStride(): jint; overload; virtual; abstract;
        function getPixelStride(): jint; overload; virtual; abstract;
        function getBuffer(): JNByteBuffer; overload; virtual; abstract;
      end;

  public
    function getFormat(): jint; overload; virtual; abstract;
    function getWidth(): jint; overload; virtual; abstract;
    function getHeight(): jint; overload; virtual; abstract;
    function getTimestamp(): jlong; overload; virtual; abstract;
    function getCropRect(): AGRect; overload; virtual;
    procedure setCropRect(para1: AGRect); overload; virtual;
    function getPlanes(): AMImage.Arr1InnerPlane; overload; virtual; abstract;
    procedure close(); overload; virtual; abstract;
  end;

  AMImageReader = class external 'android.media' name 'ImageReader' (JLObject, JLAutoCloseable)
  public
    type
      InnerOnImageAvailableListener = interface;
      Arr1InnerOnImageAvailableListener = array of InnerOnImageAvailableListener;
      Arr2InnerOnImageAvailableListener = array of Arr1InnerOnImageAvailableListener;
      Arr3InnerOnImageAvailableListener = array of Arr2InnerOnImageAvailableListener;
      InnerOnImageAvailableListener = interface external 'android.media' name 'OnImageAvailableListener' 
        procedure onImageAvailable(para1: AMImageReader); overload;
      end;

  public
    class function newInstance(para1: jint; para2: jint; para3: jint; para4: jint): AMImageReader; static; overload;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
    function getImageFormat(): jint; overload; virtual;
    function getMaxImages(): jint; overload; virtual;
    function getSurface(): AVSurface; overload; virtual;
    function acquireLatestImage(): AMImage; overload; virtual;
    function acquireNextImage(): AMImage; overload; virtual;
    procedure setOnImageAvailableListener(para1: AMImageReader.InnerOnImageAvailableListener; para2: AOHandler); overload; virtual;
    procedure close(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  JLSafeVarargs = interface external 'java.lang' name 'SafeVarargs' (JLAAnnotation)
  end;

  JCSGCMParameterSpec = class external 'javax.crypto.spec' name 'GCMParameterSpec' (JLObject, JSSAlgorithmParameterSpec)
  public
    constructor create(para1: jint; para2: Arr1jbyte); overload;
    constructor create(para1: jint; const para2: array of jbyte); overload;
    constructor create(para1: jint; para2: Arr1jbyte; para3: jint; para4: jint); overload;
    constructor create(para1: jint; const para2: array of jbyte; para3: jint; para4: jint); overload;
    function getTLen(): jint; overload; virtual;
    function getIV(): Arr1jbyte; overload; virtual;
  end;

  AMResourceBusyException = class sealed external 'android.media' name 'ResourceBusyException' (AMMediaDrmException)
  public
    constructor create(para1: JLString); overload;
  end;

  ATChangeBounds = class external 'android.transition' name 'ChangeBounds' (ATTransition)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getTransitionProperties(): Arr1JLString; overload; virtual;
    procedure setResizeClip(para1: jboolean); overload; virtual;
    procedure setReparent(para1: jboolean); overload; virtual;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual;
    function createAnimator(para1: AVViewGroup; para2: ATTransitionValues; para3: ATTransitionValues): AAAnimator; overload; virtual;
  end;

  ATTransitionSet = class external 'android.transition' name 'TransitionSet' (ATTransition)
  public
    const
      ORDERING_SEQUENTIAL = 1;
      ORDERING_TOGETHER = 0;
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function setOrdering(para1: jint): ATTransitionSet; overload; virtual;
    function getOrdering(): jint; overload; virtual;
    function addTransition(para1: ATTransition): ATTransitionSet; overload; virtual;
    function getTransitionCount(): jint; overload; virtual;
    function getTransitionAt(para1: jint): ATTransition; overload; virtual;
    function setDuration(para1: jlong): ATTransitionSet; overload; virtual;
    function setStartDelay(para1: jlong): ATTransitionSet; overload; virtual;
    function setInterpolator(para1: AATimeInterpolator): ATTransitionSet; overload; virtual;
    function addTarget(para1: AVView): ATTransitionSet; overload; virtual;
    function addTarget(para1: jint): ATTransitionSet; overload; virtual;
    function addTarget(para1: JLString): ATTransitionSet; overload; virtual;
    function addTarget(para1: JLClass): ATTransitionSet; overload; virtual;
    function addListener(para1: ATTransition.InnerTransitionListener): ATTransitionSet; overload; virtual;
    function removeTarget(para1: jint): ATTransitionSet; overload; virtual;
    function removeTarget(para1: AVView): ATTransitionSet; overload; virtual;
    function removeTarget(para1: JLClass): ATTransitionSet; overload; virtual;
    function removeTarget(para1: JLString): ATTransitionSet; overload; virtual;
    function excludeTarget(para1: AVView; para2: jboolean): ATTransition; overload; virtual;
    function excludeTarget(para1: JLString; para2: jboolean): ATTransition; overload; virtual;
    function excludeTarget(para1: jint; para2: jboolean): ATTransition; overload; virtual;
    function excludeTarget(para1: JLClass; para2: jboolean): ATTransition; overload; virtual;
    function removeListener(para1: ATTransition.InnerTransitionListener): ATTransitionSet; overload; virtual;
    procedure setPathMotion(para1: ATPathMotion); overload; virtual;
    function removeTransition(para1: ATTransition): ATTransitionSet; overload; virtual;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual;
    procedure setPropagation(para1: ATTransitionPropagation); overload; virtual;
    procedure setEpicenterCallback(para1: ATTransition.InnerEpicenterCallback); overload; virtual;
    function clone(): ATTransitionSet; overload; virtual;
    function clone(): ATTransition; overload; virtual;
    function removeListener(para1: ATTransition.InnerTransitionListener): ATTransition; overload; virtual;
    function addListener(para1: ATTransition.InnerTransitionListener): ATTransition; overload; virtual;
    function removeTarget(para1: JLClass): ATTransition; overload; virtual;
    function removeTarget(para1: AVView): ATTransition; overload; virtual;
    function addTarget(para1: AVView): ATTransition; overload; virtual;
    function removeTarget(para1: JLString): ATTransition; overload; virtual;
    function removeTarget(para1: jint): ATTransition; overload; virtual;
    function addTarget(para1: JLClass): ATTransition; overload; virtual;
    function addTarget(para1: JLString): ATTransition; overload; virtual;
    function addTarget(para1: jint): ATTransition; overload; virtual;
    function setInterpolator(para1: AATimeInterpolator): ATTransition; overload; virtual;
    function setStartDelay(para1: jlong): ATTransition; overload; virtual;
    function setDuration(para1: jlong): ATTransition; overload; virtual;
    function clone(): JLObject; overload; virtual;  // throws java.lang.CloneNotSupportedException
  end;

  ATVisibility = class abstract external 'android.transition' name 'Visibility' (ATTransition)
  public
    const
      MODE_IN = 1;
      MODE_OUT = 2;
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setMode(para1: jint); overload; virtual;
    function getMode(): jint; overload; virtual;
    function getTransitionProperties(): Arr1JLString; overload; virtual;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual;
    function isVisible(para1: ATTransitionValues): jboolean; overload; virtual;
    function createAnimator(para1: AVViewGroup; para2: ATTransitionValues; para3: ATTransitionValues): AAAnimator; overload; virtual;
    function onAppear(para1: AVViewGroup; para2: ATTransitionValues; para3: jint; para4: ATTransitionValues; para5: jint): AAAnimator; overload; virtual;
    function onAppear(para1: AVViewGroup; para2: AVView; para3: ATTransitionValues; para4: ATTransitionValues): AAAnimator; overload; virtual;
    function onDisappear(para1: AVViewGroup; para2: ATTransitionValues; para3: jint; para4: ATTransitionValues; para5: jint): AAAnimator; overload; virtual;
    function onDisappear(para1: AVViewGroup; para2: AVView; para3: ATTransitionValues; para4: ATTransitionValues): AAAnimator; overload; virtual;
  end;

  APPrinterCapabilitiesInfo = class sealed external 'android.print' name 'PrinterCapabilitiesInfo' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.print' name 'Builder' (JLObject)
      public
        constructor create(para1: APPrinterId); overload;
        function addMediaSize(para1: APPrintAttributes.InnerMediaSize; para2: jboolean): APPrinterCapabilitiesInfo.InnerBuilder; overload; virtual;
        function addResolution(para1: APPrintAttributes.InnerResolution; para2: jboolean): APPrinterCapabilitiesInfo.InnerBuilder; overload; virtual;
        function setMinMargins(para1: APPrintAttributes.InnerMargins): APPrinterCapabilitiesInfo.InnerBuilder; overload; virtual;
        function setColorModes(para1: jint; para2: jint): APPrinterCapabilitiesInfo.InnerBuilder; overload; virtual;
        function build(): APPrinterCapabilitiesInfo; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getMediaSizes(): JUList; overload; virtual;
    function getResolutions(): JUList; overload; virtual;
    function getMinMargins(): APPrintAttributes.InnerMargins; overload; virtual;
    function getColorModes(): jint; overload; virtual;
    function getDefaults(): APPrintAttributes; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  JCAEADBadTagException = class external 'javax.crypto' name 'AEADBadTagException' (JCBadPaddingException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
  end;

  ATAutoTransition = class external 'android.transition' name 'AutoTransition' (ATTransitionSet)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
  end;

  ATFade = class external 'android.transition' name 'Fade' (ATVisibility)
  public
    const
      &IN = 1;
      OUT = 2;
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function onAppear(para1: AVViewGroup; para2: AVView; para3: ATTransitionValues; para4: ATTransitionValues): AAAnimator; overload; virtual;
    function onDisappear(para1: AVViewGroup; para2: AVView; para3: ATTransitionValues; para4: ATTransitionValues): AAAnimator; overload; virtual;
  end;

  APDocumentsProvider = class abstract external 'android.provider' name 'DocumentsProvider' (ACContentProvider)
  public
    constructor create(); overload;
    procedure attachInfo(para1: ACContext; para2: ACPProviderInfo); overload; virtual;
    function isChildDocument(para1: JLString; para2: JLString): jboolean; overload; virtual;
    function createDocument(para1: JLString; para2: JLString; para3: JLString): JLString; overload; virtual;  // throws java.io.FileNotFoundException
    function renameDocument(para1: JLString; para2: JLString): JLString; overload; virtual;  // throws java.io.FileNotFoundException
    procedure deleteDocument(para1: JLString); overload; virtual;  // throws java.io.FileNotFoundException
    function queryRoots(para1: Arr1JLString): ADCursor; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function queryRoots(var para1: array of JLString): ADCursor; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function queryRecentDocuments(para1: JLString; para2: Arr1JLString): ADCursor; overload; virtual;  // throws java.io.FileNotFoundException
    function queryRecentDocuments(para1: JLString; var para2: array of JLString): ADCursor; overload; virtual;  // throws java.io.FileNotFoundException
    function queryDocument(para1: JLString; para2: Arr1JLString): ADCursor; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function queryDocument(para1: JLString; var para2: array of JLString): ADCursor; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function queryChildDocuments(para1: JLString; para2: Arr1JLString; para3: JLString): ADCursor; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function queryChildDocuments(para1: JLString; var para2: array of JLString; para3: JLString): ADCursor; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function querySearchDocuments(para1: JLString; para2: JLString; para3: Arr1JLString): ADCursor; overload; virtual;  // throws java.io.FileNotFoundException
    function querySearchDocuments(para1: JLString; para2: JLString; var para3: array of JLString): ADCursor; overload; virtual;  // throws java.io.FileNotFoundException
    function getDocumentType(para1: JLString): JLString; overload; virtual;  // throws java.io.FileNotFoundException
    function openDocument(para1: JLString; para2: JLString; para3: AOCancellationSignal): AOParcelFileDescriptor; overload; virtual; abstract;  // throws java.io.FileNotFoundException
    function openDocumentThumbnail(para1: JLString; para2: AGPoint; para3: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual;  // throws java.io.FileNotFoundException
    function query(para1: ANUri; para2: Arr1JLString; para3: JLString; para4: Arr1JLString; para5: JLString): ADCursor; overload; virtual; final;
    function query(para1: ANUri; var para2: array of JLString; para3: JLString; var para4: array of JLString; para5: JLString): ADCursor; overload; virtual; final;
    function getType(para1: ANUri): JLString; overload; virtual; final;
    function canonicalize(para1: ANUri): ANUri; overload; virtual;
    function insert(para1: ANUri; para2: ACContentValues): ANUri; overload; virtual; final;
    function delete(para1: ANUri; para2: JLString; para3: Arr1JLString): jint; overload; virtual; final;
    function delete(para1: ANUri; para2: JLString; var para3: array of JLString): jint; overload; virtual; final;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; para4: Arr1JLString): jint; overload; virtual; final;
    function update(para1: ANUri; para2: ACContentValues; para3: JLString; var para4: array of JLString): jint; overload; virtual; final;
    function call(para1: JLString; para2: JLString; para3: AOBundle): AOBundle; overload; virtual;
    procedure revokeDocumentPermission(para1: JLString); overload; virtual; final;
    function openFile(para1: ANUri; para2: JLString): AOParcelFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openFile(para1: ANUri; para2: JLString; para3: AOCancellationSignal): AOParcelFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openAssetFile(para1: ANUri; para2: JLString): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openAssetFile(para1: ANUri; para2: JLString; para3: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openTypedAssetFile(para1: ANUri; para2: JLString; para3: AOBundle): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
    function openTypedAssetFile(para1: ANUri; para2: JLString; para3: AOBundle; para4: AOCancellationSignal): ACRAssetFileDescriptor; overload; virtual; final;  // throws java.io.FileNotFoundException
  end;

  ARScriptIntrinsicHistogram = class sealed external 'android.renderscript' name 'ScriptIntrinsicHistogram' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript; para2: ARElement): ARScriptIntrinsicHistogram; static; external name 'create'; overload;
    procedure forEach(para1: ARAllocation); overload; virtual;
    procedure forEach(para1: ARAllocation; para2: ARScript.InnerLaunchOptions); overload; virtual;
    procedure setDotCoefficients(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload; virtual;
    procedure setOutput(para1: ARAllocation); overload; virtual;
    procedure forEach_Dot(para1: ARAllocation); overload; virtual;
    procedure forEach_Dot(para1: ARAllocation; para2: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelID_Separate(): ARScript.InnerKernelID; overload; virtual;
    function getFieldID_Input(): ARScript.InnerFieldID; overload; virtual;
  end;

  ALSettingInjectorService = class abstract external 'android.location' name 'SettingInjectorService' (AAService)
  public
    const
      ACTION_INJECTED_SETTING_CHANGED = 'android.location.InjectedSettingChanged';
      ACTION_SERVICE_INTENT = 'android.location.SettingInjectorService';
      ATTRIBUTES_NAME = 'injected-location-setting';
      META_DATA_NAME = 'android.location.SettingInjectorService';
  public
    constructor create(para1: JLString); overload;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
    procedure onStart(para1: ACIntent; para2: jint); overload; virtual; final;
    function onStartCommand(para1: ACIntent; para2: jint; para3: jint): jint; overload; virtual; final;
  strict protected
    function onGetSummary(): JLString; overload; virtual; abstract;
    function onGetEnabled(): jboolean; overload; virtual; abstract;
  end;

  ANCHostApduService = class abstract external 'android.nfc.cardemulation' name 'HostApduService' (AAService)
  public
    const
      DEACTIVATION_DESELECTED = 1;
      DEACTIVATION_LINK_LOSS = 0;
      SERVICE_INTERFACE = 'android.nfc.cardemulation.action.HOST_APDU_SERVICE';
      SERVICE_META_DATA = 'android.nfc.cardemulation.host_apdu_service';
  public
    constructor create(); overload;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
    procedure sendResponseApdu(para1: Arr1jbyte); overload; virtual; final;
    procedure sendResponseApdu(var para1: array of jbyte); overload; virtual; final;
    procedure notifyUnhandled(); overload; virtual; final;
    function processCommandApdu(para1: Arr1jbyte; para2: AOBundle): Arr1jbyte; overload; virtual; abstract;
    function processCommandApdu(var para1: array of jbyte; para2: AOBundle): Arr1jbyte; overload; virtual; abstract;
    procedure onDeactivated(para1: jint); overload; virtual; abstract;
  end;

  ANCOffHostApduService = class abstract external 'android.nfc.cardemulation' name 'OffHostApduService' (AAService)
  public
    const
      SERVICE_INTERFACE = 'android.nfc.cardemulation.action.OFF_HOST_APDU_SERVICE';
      SERVICE_META_DATA = 'android.nfc.cardemulation.off_host_apdu_service';
  public
    constructor create(); overload;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; abstract;
  end;

  APPrintService = class abstract external 'android.printservice' name 'PrintService' (AAService)
  public
    const
      EXTRA_PRINTER_INFO = 'android.intent.extra.print.EXTRA_PRINTER_INFO';
      EXTRA_PRINT_JOB_INFO = 'android.intent.extra.print.PRINT_JOB_INFO';
      SERVICE_INTERFACE = 'android.printservice.PrintService';
      SERVICE_META_DATA = 'android.printservice';
  public
    constructor create(); overload;
  strict protected
    procedure attachBaseContext(para1: ACContext); overload; virtual; final;
    procedure onConnected(); overload; virtual;
    procedure onDisconnected(); overload; virtual;
    function onCreatePrinterDiscoverySession(): APPrinterDiscoverySession; overload; virtual; abstract;
    procedure onRequestCancelPrintJob(para1: APservicePrintJob); overload; virtual; abstract;
    procedure onPrintJobQueued(para1: APservicePrintJob); overload; virtual; abstract;
  public
    function getActivePrintJobs(): JUList; overload; virtual; final;
    function generatePrinterId(para1: JLString): APPrinterId; overload; virtual; final;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
  end;

  AVWindowInsets = class sealed external 'android.view' name 'WindowInsets' (JLObject)
  public
    constructor create(para1: AVWindowInsets); overload;
    function getSystemWindowInsetLeft(): jint; overload; virtual;
    function getSystemWindowInsetTop(): jint; overload; virtual;
    function getSystemWindowInsetRight(): jint; overload; virtual;
    function getSystemWindowInsetBottom(): jint; overload; virtual;
    function hasSystemWindowInsets(): jboolean; overload; virtual;
    function hasInsets(): jboolean; overload; virtual;
    function isConsumed(): jboolean; overload; virtual;
    function isRound(): jboolean; overload; virtual;
    function consumeSystemWindowInsets(): AVWindowInsets; overload; virtual;
    function replaceSystemWindowInsets(para1: jint; para2: jint; para3: jint; para4: jint): AVWindowInsets; overload; virtual;
    function replaceSystemWindowInsets(para1: AGRect): AVWindowInsets; overload; virtual;
    function getStableInsetTop(): jint; overload; virtual;
    function getStableInsetLeft(): jint; overload; virtual;
    function getStableInsetRight(): jint; overload; virtual;
    function getStableInsetBottom(): jint; overload; virtual;
    function hasStableInsets(): jboolean; overload; virtual;
    function consumeStableInsets(): AVWindowInsets; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AARemoteInput = class sealed external 'android.app' name 'RemoteInput' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.app' name 'Builder' (JLObject)
      public
        constructor create(para1: JLString); overload;
        function setLabel(para1: JLCharSequence): AARemoteInput.InnerBuilder; overload; virtual;
        function setChoices(para1: Arr1JLCharSequence): AARemoteInput.InnerBuilder; overload; virtual;
        function setChoices(var para1: array of JLCharSequence): AARemoteInput.InnerBuilder; overload; virtual;
        function setAllowFreeFormInput(para1: jboolean): AARemoteInput.InnerBuilder; overload; virtual;
        function addExtras(para1: AOBundle): AARemoteInput.InnerBuilder; overload; virtual;
        function getExtras(): AOBundle; overload; virtual;
        function build(): AARemoteInput; overload; virtual;
      end;

  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      EXTRA_RESULTS_DATA = 'android.remoteinput.resultsData';
      RESULTS_CLIP_LABEL = 'android.remoteinput.results';
  public
    function getResultKey(): JLString; overload; virtual;
    function getLabel(): JLCharSequence; overload; virtual;
    function getChoices(): Arr1JLCharSequence; overload; virtual;
    function getAllowFreeFormInput(): jboolean; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    class function getResultsFromIntent(para1: ACIntent): AOBundle; static; overload;
    class procedure addResultsToIntent(para1: Arr1AARemoteInput; para2: ACIntent; para3: AOBundle); static; overload;
    class procedure addResultsToIntent(var para1: array of AARemoteInput; para2: ACIntent; para3: AOBundle); static; overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ARScriptIntrinsicResize = class sealed external 'android.renderscript' name 'ScriptIntrinsicResize' (ARScriptIntrinsic)
  public
    class function create_(para1: ARRenderScript): ARScriptIntrinsicResize; static; external name 'create'; overload;
    procedure setInput(para1: ARAllocation); overload; virtual;
    function getFieldID_Input(): ARScript.InnerFieldID; overload; virtual;
    procedure forEach_bicubic(para1: ARAllocation); overload; virtual;
    procedure forEach_bicubic(para1: ARAllocation; para2: ARScript.InnerLaunchOptions); overload; virtual;
    function getKernelID_bicubic(): ARScript.InnerKernelID; overload; virtual;
  end;

  AAStateListAnimator = class external 'android.animation' name 'StateListAnimator' (JLObject)
  public
    constructor create(); overload;
    procedure addState(para1: Arr1jint; para2: AAAnimator); overload; virtual;
    procedure addState(var para1: array of jint; para2: AAAnimator); overload; virtual;
    procedure jumpToCurrentState(); overload; virtual;
  end;

  AATypeConverter = class abstract external 'android.animation' name 'TypeConverter' (JLObject)
  public
    constructor create(para1: JLClass; para2: JLClass); overload;
    function convert(para1: JLObject): JLObject; overload; virtual; abstract;
  end;

  AASharedElementCallback = class abstract external 'android.app' name 'SharedElementCallback' (JLObject)
  public
    constructor create(); overload;
    procedure onSharedElementStart(para1: JUList; para2: JUList; para3: JUList); overload; virtual;
    procedure onSharedElementEnd(para1: JUList; para2: JUList; para3: JUList); overload; virtual;
    procedure onRejectSharedElements(para1: JUList); overload; virtual;
    procedure onMapSharedElements(para1: JUList; para2: JUMap); overload; virtual;
    function onCaptureSharedElementSnapshot(para1: AVView; para2: AGMatrix; para3: AGRectF): AOParcelable; overload; virtual;
    function onCreateSnapshotView(para1: ACContext; para2: AOParcelable): AVView; overload; virtual;
  end;

  AAJJobScheduler = class abstract external 'android.app.job' name 'JobScheduler' (JLObject)
  public
    const
      RESULT_FAILURE = 0;
      RESULT_SUCCESS = 1;
  public
    constructor create(); overload;
    function schedule(para1: AAJJobInfo): jint; overload; virtual; abstract;
    procedure cancel(para1: jint); overload; virtual; abstract;
    procedure cancelAll(); overload; virtual; abstract;
    function getAllPendingJobs(): JUList; overload; virtual; abstract;
  end;

  AAUUsageStatsManager = class sealed external 'android.app.usage' name 'UsageStatsManager' (JLObject)
  public
    const
      INTERVAL_BEST = 4;
      INTERVAL_DAILY = 0;
      INTERVAL_MONTHLY = 2;
      INTERVAL_WEEKLY = 1;
      INTERVAL_YEARLY = 3;
  public
    function queryUsageStats(para1: jint; para2: jlong; para3: jlong): JUList; overload; virtual;
    function queryConfigurations(para1: jint; para2: jlong; para3: jlong): JUList; overload; virtual;
    function queryEvents(para1: jlong; para2: jlong): AAUUsageEvents; overload; virtual;
    function queryAndAggregateUsageStats(para1: jlong; para2: jlong): JUMap; overload; virtual;
  end;

  ABLAdvertiseCallback = class abstract external 'android.bluetooth.le' name 'AdvertiseCallback' (JLObject)
  public
    const
      ADVERTISE_FAILED_ALREADY_STARTED = 3;
      ADVERTISE_FAILED_DATA_TOO_LARGE = 1;
      ADVERTISE_FAILED_FEATURE_UNSUPPORTED = 5;
      ADVERTISE_FAILED_INTERNAL_ERROR = 4;
      ADVERTISE_FAILED_TOO_MANY_ADVERTISERS = 2;
  public
    constructor create(); overload;
    procedure onStartSuccess(para1: ABLAdvertiseSettings); overload; virtual;
    procedure onStartFailure(para1: jint); overload; virtual;
  end;

  ABLBluetoothLeAdvertiser = class sealed external 'android.bluetooth.le' name 'BluetoothLeAdvertiser' (JLObject)
  public
    procedure startAdvertising(para1: ABLAdvertiseSettings; para2: ABLAdvertiseData; para3: ABLAdvertiseCallback); overload; virtual;
    procedure startAdvertising(para1: ABLAdvertiseSettings; para2: ABLAdvertiseData; para3: ABLAdvertiseData; para4: ABLAdvertiseCallback); overload; virtual;
    procedure stopAdvertising(para1: ABLAdvertiseCallback); overload; virtual;
  end;

  ABLBluetoothLeScanner = class sealed external 'android.bluetooth.le' name 'BluetoothLeScanner' (JLObject)
  public
    procedure startScan(para1: ABLScanCallback); overload; virtual;
    procedure startScan(para1: JUList; para2: ABLScanSettings; para3: ABLScanCallback); overload; virtual;
    procedure stopScan(para1: ABLScanCallback); overload; virtual;
    procedure flushPendingScanResults(para1: ABLScanCallback); overload; virtual;
  end;

  ABLScanCallback = class abstract external 'android.bluetooth.le' name 'ScanCallback' (JLObject)
  public
    const
      SCAN_FAILED_ALREADY_STARTED = 1;
      SCAN_FAILED_APPLICATION_REGISTRATION_FAILED = 2;
      SCAN_FAILED_FEATURE_UNSUPPORTED = 4;
      SCAN_FAILED_INTERNAL_ERROR = 3;
  public
    constructor create(); overload;
    procedure onScanResult(para1: jint; para2: ABLScanResult); overload; virtual;
    procedure onBatchScanResults(para1: JUList); overload; virtual;
    procedure onScanFailed(para1: jint); overload; virtual;
  end;

  ABLScanRecord = class sealed external 'android.bluetooth.le' name 'ScanRecord' (JLObject)
  public
    function getAdvertiseFlags(): jint; overload; virtual;
    function getServiceUuids(): JUList; overload; virtual;
    function getManufacturerSpecificData(): AUSparseArray; overload; virtual;
    function getManufacturerSpecificData(para1: jint): Arr1jbyte; overload; virtual;
    function getServiceData(): JUMap; overload; virtual;
    function getServiceData(para1: AOParcelUuid): Arr1jbyte; overload; virtual;
    function getTxPowerLevel(): jint; overload; virtual;
    function getDeviceName(): JLString; overload; virtual;
    function getBytes(): Arr1jbyte; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ACRestrictionsManager = class external 'android.content' name 'RestrictionsManager' (JLObject)
  public
    const
      ACTION_PERMISSION_RESPONSE_RECEIVED = 'android.content.action.PERMISSION_RESPONSE_RECEIVED';
      ACTION_REQUEST_LOCAL_APPROVAL = 'android.content.action.REQUEST_LOCAL_APPROVAL';
      ACTION_REQUEST_PERMISSION = 'android.content.action.REQUEST_PERMISSION';
      EXTRA_PACKAGE_NAME = 'android.content.extra.PACKAGE_NAME';
      EXTRA_REQUEST_BUNDLE = 'android.content.extra.REQUEST_BUNDLE';
      EXTRA_REQUEST_ID = 'android.content.extra.REQUEST_ID';
      EXTRA_REQUEST_TYPE = 'android.content.extra.REQUEST_TYPE';
      EXTRA_RESPONSE_BUNDLE = 'android.content.extra.RESPONSE_BUNDLE';
      META_DATA_APP_RESTRICTIONS = 'android.content.APP_RESTRICTIONS';
      REQUEST_KEY_APPROVE_LABEL = 'android.request.approve_label';
      REQUEST_KEY_DATA = 'android.request.data';
      REQUEST_KEY_DENY_LABEL = 'android.request.deny_label';
      REQUEST_KEY_ICON = 'android.request.icon';
      REQUEST_KEY_ID = 'android.request.id';
      REQUEST_KEY_MESSAGE = 'android.request.mesg';
      REQUEST_KEY_NEW_REQUEST = 'android.request.new_request';
      REQUEST_KEY_TITLE = 'android.request.title';
      REQUEST_TYPE_APPROVAL = 'android.request.type.approval';
      RESPONSE_KEY_ERROR_CODE = 'android.response.errorcode';
      RESPONSE_KEY_MESSAGE = 'android.response.msg';
      RESPONSE_KEY_RESPONSE_TIMESTAMP = 'android.response.timestamp';
      RESPONSE_KEY_RESULT = 'android.response.result';
      RESULT_APPROVED = 1;
      RESULT_DENIED = 2;
      RESULT_ERROR = 5;
      RESULT_ERROR_BAD_REQUEST = 1;
      RESULT_ERROR_INTERNAL = 3;
      RESULT_ERROR_NETWORK = 2;
      RESULT_NO_RESPONSE = 3;
      RESULT_UNKNOWN_REQUEST = 4;
  public
    function getApplicationRestrictions(): AOBundle; overload; virtual;
    function hasRestrictionsProvider(): jboolean; overload; virtual;
    procedure requestPermission(para1: JLString; para2: JLString; para3: AOPersistableBundle); overload; virtual;
    function createLocalApprovalIntent(): ACIntent; overload; virtual;
    procedure notifyPermissionResponse(para1: JLString; para2: AOPersistableBundle); overload; virtual;
    function getManifestRestrictions(para1: JLString): JUList; overload; virtual;
  end;

  ACPLauncherActivityInfo = class external 'android.content.pm' name 'LauncherActivityInfo' (JLObject)
  public
    function getComponentName(): ACComponentName; overload; virtual;
    function getUser(): AOUserHandle; overload; virtual;
    function getLabel(): JLCharSequence; overload; virtual;
    function getIcon(para1: jint): AGDDrawable; overload; virtual;
    function getApplicationInfo(): ACPApplicationInfo; overload; virtual;
    function getFirstInstallTime(): jlong; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getBadgedIcon(para1: jint): AGDDrawable; overload; virtual;
  end;

  ACPLauncherApps = class external 'android.content.pm' name 'LauncherApps' (JLObject)
  public
    type
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = class abstract external 'android.content.pm' name 'Callback' (JLObject)
      public
        constructor create(); overload;
        procedure onPackageRemoved(para1: JLString; para2: AOUserHandle); overload; virtual; abstract;
        procedure onPackageAdded(para1: JLString; para2: AOUserHandle); overload; virtual; abstract;
        procedure onPackageChanged(para1: JLString; para2: AOUserHandle); overload; virtual; abstract;
        procedure onPackagesAvailable(para1: Arr1JLString; para2: AOUserHandle; para3: jboolean); overload; virtual; abstract;
        procedure onPackagesAvailable(var para1: array of JLString; para2: AOUserHandle; para3: jboolean); overload; virtual; abstract;
        procedure onPackagesUnavailable(para1: Arr1JLString; para2: AOUserHandle; para3: jboolean); overload; virtual; abstract;
        procedure onPackagesUnavailable(var para1: array of JLString; para2: AOUserHandle; para3: jboolean); overload; virtual; abstract;
      end;
  public
    function getActivityList(para1: JLString; para2: AOUserHandle): JUList; overload; virtual;
    function resolveActivity(para1: ACIntent; para2: AOUserHandle): ACPLauncherActivityInfo; overload; virtual;
    procedure startMainActivity(para1: ACComponentName; para2: AOUserHandle; para3: AGRect; para4: AOBundle); overload; virtual;
    procedure startAppDetailsActivity(para1: ACComponentName; para2: AOUserHandle; para3: AGRect; para4: AOBundle); overload; virtual;
    function isPackageEnabled(para1: JLString; para2: AOUserHandle): jboolean; overload; virtual;
    function isActivityEnabled(para1: ACComponentName; para2: AOUserHandle): jboolean; overload; virtual;
    procedure registerCallback(para1: ACPLauncherApps.InnerCallback); overload; virtual;
    procedure registerCallback(para1: ACPLauncherApps.InnerCallback; para2: AOHandler); overload; virtual;
    procedure unregisterCallback(para1: ACPLauncherApps.InnerCallback); overload; virtual;
  end;

  AGOutline = class sealed external 'android.graphics' name 'Outline' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: AGOutline); overload;
    procedure setEmpty(); overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function canClip(): jboolean; overload; virtual;
    procedure setAlpha(para1: jfloat); overload; virtual;
    function getAlpha(): jfloat; overload; virtual;
    procedure &set(para1: AGOutline); overload; virtual;
    procedure setRect(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setRect(para1: AGRect); overload; virtual;
    procedure setRoundRect(para1: jint; para2: jint; para3: jint; para4: jint; para5: jfloat); overload; virtual;
    procedure setRoundRect(para1: AGRect; para2: jfloat); overload; virtual;
    procedure setOval(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setOval(para1: AGRect); overload; virtual;
    procedure setConvexPath(para1: AGPath); overload; virtual;
  end;

  AHCCameraMetadata = class abstract external 'android.hardware.camera2' name 'CameraMetadata' (JLObject)
  public
    const
      COLOR_CORRECTION_ABERRATION_MODE_FAST = 1;
      COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY = 2;
      COLOR_CORRECTION_ABERRATION_MODE_OFF = 0;
      COLOR_CORRECTION_MODE_FAST = 1;
      COLOR_CORRECTION_MODE_HIGH_QUALITY = 2;
      COLOR_CORRECTION_MODE_TRANSFORM_MATRIX = 0;
      CONTROL_AE_ANTIBANDING_MODE_50HZ = 1;
      CONTROL_AE_ANTIBANDING_MODE_60HZ = 2;
      CONTROL_AE_ANTIBANDING_MODE_AUTO = 3;
      CONTROL_AE_ANTIBANDING_MODE_OFF = 0;
      CONTROL_AE_MODE_OFF = 0;
      CONTROL_AE_MODE_ON = 1;
      CONTROL_AE_MODE_ON_ALWAYS_FLASH = 3;
      CONTROL_AE_MODE_ON_AUTO_FLASH = 2;
      CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE = 4;
      CONTROL_AE_PRECAPTURE_TRIGGER_IDLE = 0;
      CONTROL_AE_PRECAPTURE_TRIGGER_START = 1;
      CONTROL_AE_STATE_CONVERGED = 2;
      CONTROL_AE_STATE_FLASH_REQUIRED = 4;
      CONTROL_AE_STATE_INACTIVE = 0;
      CONTROL_AE_STATE_LOCKED = 3;
      CONTROL_AE_STATE_PRECAPTURE = 5;
      CONTROL_AE_STATE_SEARCHING = 1;
      CONTROL_AF_MODE_AUTO = 1;
      CONTROL_AF_MODE_CONTINUOUS_PICTURE = 4;
      CONTROL_AF_MODE_CONTINUOUS_VIDEO = 3;
      CONTROL_AF_MODE_EDOF = 5;
      CONTROL_AF_MODE_MACRO = 2;
      CONTROL_AF_MODE_OFF = 0;
      CONTROL_AF_STATE_ACTIVE_SCAN = 3;
      CONTROL_AF_STATE_FOCUSED_LOCKED = 4;
      CONTROL_AF_STATE_INACTIVE = 0;
      CONTROL_AF_STATE_NOT_FOCUSED_LOCKED = 5;
      CONTROL_AF_STATE_PASSIVE_FOCUSED = 2;
      CONTROL_AF_STATE_PASSIVE_SCAN = 1;
      CONTROL_AF_STATE_PASSIVE_UNFOCUSED = 6;
      CONTROL_AF_TRIGGER_CANCEL = 2;
      CONTROL_AF_TRIGGER_IDLE = 0;
      CONTROL_AF_TRIGGER_START = 1;
      CONTROL_AWB_MODE_AUTO = 1;
      CONTROL_AWB_MODE_CLOUDY_DAYLIGHT = 6;
      CONTROL_AWB_MODE_DAYLIGHT = 5;
      CONTROL_AWB_MODE_FLUORESCENT = 3;
      CONTROL_AWB_MODE_INCANDESCENT = 2;
      CONTROL_AWB_MODE_OFF = 0;
      CONTROL_AWB_MODE_SHADE = 8;
      CONTROL_AWB_MODE_TWILIGHT = 7;
      CONTROL_AWB_MODE_WARM_FLUORESCENT = 4;
      CONTROL_AWB_STATE_CONVERGED = 2;
      CONTROL_AWB_STATE_INACTIVE = 0;
      CONTROL_AWB_STATE_LOCKED = 3;
      CONTROL_AWB_STATE_SEARCHING = 1;
      CONTROL_CAPTURE_INTENT_CUSTOM = 0;
      CONTROL_CAPTURE_INTENT_MANUAL = 6;
      CONTROL_CAPTURE_INTENT_PREVIEW = 1;
      CONTROL_CAPTURE_INTENT_STILL_CAPTURE = 2;
      CONTROL_CAPTURE_INTENT_VIDEO_RECORD = 3;
      CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT = 4;
      CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG = 5;
      CONTROL_EFFECT_MODE_AQUA = 8;
      CONTROL_EFFECT_MODE_BLACKBOARD = 7;
      CONTROL_EFFECT_MODE_MONO = 1;
      CONTROL_EFFECT_MODE_NEGATIVE = 2;
      CONTROL_EFFECT_MODE_OFF = 0;
      CONTROL_EFFECT_MODE_POSTERIZE = 5;
      CONTROL_EFFECT_MODE_SEPIA = 4;
      CONTROL_EFFECT_MODE_SOLARIZE = 3;
      CONTROL_EFFECT_MODE_WHITEBOARD = 6;
      CONTROL_MODE_AUTO = 1;
      CONTROL_MODE_OFF = 0;
      CONTROL_MODE_OFF_KEEP_STATE = 3;
      CONTROL_MODE_USE_SCENE_MODE = 2;
      CONTROL_SCENE_MODE_ACTION = 2;
      CONTROL_SCENE_MODE_BARCODE = 16;
      CONTROL_SCENE_MODE_BEACH = 8;
      CONTROL_SCENE_MODE_CANDLELIGHT = 15;
      CONTROL_SCENE_MODE_DISABLED = 0;
      CONTROL_SCENE_MODE_FACE_PRIORITY = 1;
      CONTROL_SCENE_MODE_FIREWORKS = 12;
      CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO = 17;
      CONTROL_SCENE_MODE_LANDSCAPE = 4;
      CONTROL_SCENE_MODE_NIGHT = 5;
      CONTROL_SCENE_MODE_NIGHT_PORTRAIT = 6;
      CONTROL_SCENE_MODE_PARTY = 14;
      CONTROL_SCENE_MODE_PORTRAIT = 3;
      CONTROL_SCENE_MODE_SNOW = 9;
      CONTROL_SCENE_MODE_SPORTS = 13;
      CONTROL_SCENE_MODE_STEADYPHOTO = 11;
      CONTROL_SCENE_MODE_SUNSET = 10;
      CONTROL_SCENE_MODE_THEATRE = 7;
      CONTROL_VIDEO_STABILIZATION_MODE_OFF = 0;
      CONTROL_VIDEO_STABILIZATION_MODE_ON = 1;
      EDGE_MODE_FAST = 1;
      EDGE_MODE_HIGH_QUALITY = 2;
      EDGE_MODE_OFF = 0;
      FLASH_MODE_OFF = 0;
      FLASH_MODE_SINGLE = 1;
      FLASH_MODE_TORCH = 2;
      FLASH_STATE_CHARGING = 1;
      FLASH_STATE_FIRED = 3;
      FLASH_STATE_PARTIAL = 4;
      FLASH_STATE_READY = 2;
      FLASH_STATE_UNAVAILABLE = 0;
      HOT_PIXEL_MODE_FAST = 1;
      HOT_PIXEL_MODE_HIGH_QUALITY = 2;
      HOT_PIXEL_MODE_OFF = 0;
      INFO_SUPPORTED_HARDWARE_LEVEL_FULL = 1;
      INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY = 2;
      INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED = 0;
      LENS_FACING_BACK = 1;
      LENS_FACING_FRONT = 0;
      LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE = 1;
      LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED = 2;
      LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED = 0;
      LENS_OPTICAL_STABILIZATION_MODE_OFF = 0;
      LENS_OPTICAL_STABILIZATION_MODE_ON = 1;
      LENS_STATE_MOVING = 1;
      LENS_STATE_STATIONARY = 0;
      NOISE_REDUCTION_MODE_FAST = 1;
      NOISE_REDUCTION_MODE_HIGH_QUALITY = 2;
      NOISE_REDUCTION_MODE_OFF = 0;
      REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE = 0;
      REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING = 2;
      REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR = 1;
      REQUEST_AVAILABLE_CAPABILITIES_RAW = 3;
      SCALER_CROPPING_TYPE_CENTER_ONLY = 0;
      SCALER_CROPPING_TYPE_FREEFORM = 1;
      SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR = 3;
      SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG = 2;
      SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG = 1;
      SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB = 4;
      SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB = 0;
      SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME = 1;
      SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN = 0;
      SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER = 10;
      SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT = 14;
      SENSOR_REFERENCE_ILLUMINANT1_D50 = 23;
      SENSOR_REFERENCE_ILLUMINANT1_D55 = 20;
      SENSOR_REFERENCE_ILLUMINANT1_D65 = 21;
      SENSOR_REFERENCE_ILLUMINANT1_D75 = 22;
      SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT = 1;
      SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT = 12;
      SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT = 13;
      SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER = 9;
      SENSOR_REFERENCE_ILLUMINANT1_FLASH = 4;
      SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT = 2;
      SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN = 24;
      SENSOR_REFERENCE_ILLUMINANT1_SHADE = 11;
      SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A = 17;
      SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B = 18;
      SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C = 19;
      SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN = 3;
      SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT = 15;
      SENSOR_TEST_PATTERN_MODE_COLOR_BARS = 2;
      SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY = 3;
      SENSOR_TEST_PATTERN_MODE_CUSTOM1 = 256;
      SENSOR_TEST_PATTERN_MODE_OFF = 0;
      SENSOR_TEST_PATTERN_MODE_PN9 = 4;
      SENSOR_TEST_PATTERN_MODE_SOLID_COLOR = 1;
      SHADING_MODE_FAST = 1;
      SHADING_MODE_HIGH_QUALITY = 2;
      SHADING_MODE_OFF = 0;
      STATISTICS_FACE_DETECT_MODE_FULL = 2;
      STATISTICS_FACE_DETECT_MODE_OFF = 0;
      STATISTICS_FACE_DETECT_MODE_SIMPLE = 1;
      STATISTICS_LENS_SHADING_MAP_MODE_OFF = 0;
      STATISTICS_LENS_SHADING_MAP_MODE_ON = 1;
      STATISTICS_SCENE_FLICKER_50HZ = 1;
      STATISTICS_SCENE_FLICKER_60HZ = 2;
      STATISTICS_SCENE_FLICKER_NONE = 0;
      SYNC_MAX_LATENCY_PER_FRAME_CONTROL = 0;
      SYNC_MAX_LATENCY_UNKNOWN = -1;
      TONEMAP_MODE_CONTRAST_CURVE = 0;
      TONEMAP_MODE_FAST = 1;
      TONEMAP_MODE_HIGH_QUALITY = 2;
  public
    function getKeys(): JUList; overload; virtual;
  end;

  AHCCaptureFailure = class external 'android.hardware.camera2' name 'CaptureFailure' (JLObject)
  public
    const
      REASON_ERROR = 0;
      REASON_FLUSHED = 1;
  public
    function getRequest(): AHCCaptureRequest; overload; virtual;
    function getFrameNumber(): jlong; overload; virtual;
    function getReason(): jint; overload; virtual;
    function wasImageCaptured(): jboolean; overload; virtual;
    function getSequenceId(): jint; overload; virtual;
  end;

  AHCPBlackLevelPattern = class sealed external 'android.hardware.camera2.params' name 'BlackLevelPattern' (JLObject)
  public
    const
      COUNT = 4;
  public
    function getOffsetForIndex(para1: jint; para2: jint): jint; overload; virtual;
    procedure copyTo(para1: Arr1jint; para2: jint); overload; virtual;
    procedure copyTo(var para1: array of jint; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  AHCPColorSpaceTransform = class sealed external 'android.hardware.camera2.params' name 'ColorSpaceTransform' (JLObject)
  public
    constructor create(para1: Arr1AURational); overload;
    constructor create(const para1: array of AURational); overload;
    constructor create(para1: Arr1jint); overload;
    constructor create(const para1: array of jint); overload;
    function getElement(para1: jint; para2: jint): AURational; overload; virtual;
    procedure copyElements(para1: Arr1AURational; para2: jint); overload; virtual;
    procedure copyElements(var para1: array of AURational; para2: jint); overload; virtual;
    procedure copyElements(para1: Arr1jint; para2: jint); overload; virtual;
    procedure copyElements(var para1: array of jint; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AHCPFace = class sealed external 'android.hardware.camera2.params' name 'Face' (JLObject)
  public
    const
      ID_UNSUPPORTED = -1;
      SCORE_MAX = 100;
      SCORE_MIN = 1;
  public
    function getBounds(): AGRect; overload; virtual;
    function getScore(): jint; overload; virtual;
    function getId(): jint; overload; virtual;
    function getLeftEyePosition(): AGPoint; overload; virtual;
    function getRightEyePosition(): AGPoint; overload; virtual;
    function getMouthPosition(): AGPoint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AHCPLensShadingMap = class sealed external 'android.hardware.camera2.params' name 'LensShadingMap' (JLObject)
  public
    const
      MINIMUM_GAIN_FACTOR = jfloat(1.0);
  public
    function getRowCount(): jint; overload; virtual;
    function getColumnCount(): jint; overload; virtual;
    function getGainFactorCount(): jint; overload; virtual;
    function getGainFactor(para1: jint; para2: jint; para3: jint): jfloat; overload; virtual;
    function getGainFactorVector(para1: jint; para2: jint): AHCPRggbChannelVector; overload; virtual;
    procedure copyGainFactors(para1: Arr1jfloat; para2: jint); overload; virtual;
    procedure copyGainFactors(var para1: array of jfloat; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  AHCPMeteringRectangle = class sealed external 'android.hardware.camera2.params' name 'MeteringRectangle' (JLObject)
  public
    const
      METERING_WEIGHT_DONT_CARE = 0;
      METERING_WEIGHT_MAX = 1000;
      METERING_WEIGHT_MIN = 0;
  public
    constructor create(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); overload;
    constructor create(para1: AGPoint; para2: AUSize; para3: jint); overload;
    constructor create(para1: AGRect; para2: jint); overload;
    function getX(): jint; overload; virtual;
    function getY(): jint; overload; virtual;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
    function getMeteringWeight(): jint; overload; virtual;
    function getUpperLeftPoint(): AGPoint; overload; virtual;
    function getSize(): AUSize; overload; virtual;
    function getRect(): AGRect; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function equals(para1: AHCPMeteringRectangle): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AHCPRggbChannelVector = class sealed external 'android.hardware.camera2.params' name 'RggbChannelVector' (JLObject)
  public
    const
      BLUE = 3;
      COUNT = 4;
      GREEN_EVEN = 1;
      GREEN_ODD = 2;
      RED = 0;
  public
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    function getRed(): jfloat; overload; virtual; final;
    function getGreenEven(): jfloat; overload; virtual;
    function getGreenOdd(): jfloat; overload; virtual;
    function getBlue(): jfloat; overload; virtual;
    function getComponent(para1: jint): jfloat; overload; virtual;
    procedure copyTo(para1: Arr1jfloat; para2: jint); overload; virtual;
    procedure copyTo(var para1: array of jfloat; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AHCPStreamConfigurationMap = class sealed external 'android.hardware.camera2.params' name 'StreamConfigurationMap' (JLObject)
  public
    function getOutputFormats(): Arr1jint; overload; virtual; final;
    function isOutputSupportedFor(para1: jint): jboolean; overload; virtual;
    class function isOutputSupportedFor(para1: JLClass): jboolean; static; overload;
    function isOutputSupportedFor(para1: AVSurface): jboolean; overload; virtual;
    function getOutputSizes(para1: JLClass): Arr1AUSize; overload; virtual;
    function getOutputSizes(para1: jint): Arr1AUSize; overload; virtual;
    function getHighSpeedVideoSizes(): Arr1AUSize; overload; virtual;
    function getHighSpeedVideoFpsRangesFor(para1: AUSize): Arr1AURange; overload; virtual;
    function getHighSpeedVideoFpsRanges(): Arr1AURange; overload; virtual;
    function getHighSpeedVideoSizesFor(para1: AURange): Arr1AUSize; overload; virtual;
    function getOutputMinFrameDuration(para1: jint; para2: AUSize): jlong; overload; virtual;
    function getOutputMinFrameDuration(para1: JLClass; para2: AUSize): jlong; overload; virtual;
    function getOutputStallDuration(para1: jint; para2: AUSize): jlong; overload; virtual;
    function getOutputStallDuration(para1: JLClass; para2: AUSize): jlong; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  AHCPTonemapCurve = class sealed external 'android.hardware.camera2.params' name 'TonemapCurve' (JLObject)
  public
    const
      CHANNEL_BLUE = 2;
      CHANNEL_GREEN = 1;
      CHANNEL_RED = 0;
      LEVEL_BLACK = jfloat(0.0);
      LEVEL_WHITE = jfloat(1.0);
      POINT_SIZE = 2;
  public
    constructor create(para1: Arr1jfloat; para2: Arr1jfloat; para3: Arr1jfloat); overload;
    constructor create(const para1: array of jfloat; const para2: array of jfloat; const para3: array of jfloat); overload;
    function getPointCount(para1: jint): jint; overload; virtual;
    function getPoint(para1: jint; para2: jint): AGPointF; overload; virtual;
    procedure copyColorCurve(para1: jint; para2: Arr1jfloat; para3: jint); overload; virtual;
    procedure copyColorCurve(para1: jint; var para2: array of jfloat; para3: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AMVolumeProvider = class abstract external 'android.media' name 'VolumeProvider' (JLObject)
  public
    const
      VOLUME_CONTROL_ABSOLUTE = 2;
      VOLUME_CONTROL_FIXED = 0;
      VOLUME_CONTROL_RELATIVE = 1;
  public
    constructor create(para1: jint; para2: jint; para3: jint); overload;
    function getVolumeControl(): jint; overload; virtual; final;
    function getMaxVolume(): jint; overload; virtual; final;
    function getCurrentVolume(): jint; overload; virtual; final;
    procedure setCurrentVolume(para1: jint); overload; virtual; final;
    procedure onSetVolumeTo(para1: jint); overload; virtual;
    procedure onAdjustVolume(para1: jint); overload; virtual;
  end;

  AMPMediaProjectionManager = class sealed external 'android.media.projection' name 'MediaProjectionManager' (JLObject)
  public
    function createScreenCaptureIntent(): ACIntent; overload; virtual;
    function getMediaProjection(para1: jint; para2: ACIntent): AMPMediaProjection; overload; virtual;
  end;

  AMSMediaSessionManager = class sealed external 'android.media.session' name 'MediaSessionManager' (JLObject)
  public
    type
      InnerOnActiveSessionsChangedListener = interface;
      Arr1InnerOnActiveSessionsChangedListener = array of InnerOnActiveSessionsChangedListener;
      Arr2InnerOnActiveSessionsChangedListener = array of Arr1InnerOnActiveSessionsChangedListener;
      Arr3InnerOnActiveSessionsChangedListener = array of Arr2InnerOnActiveSessionsChangedListener;
      InnerOnActiveSessionsChangedListener = interface external 'android.media.session' name 'OnActiveSessionsChangedListener' 
        procedure onActiveSessionsChanged(para1: JUList); overload;
      end;
  public
    function getActiveSessions(para1: ACComponentName): JUList; overload; virtual;
    procedure addOnActiveSessionsChangedListener(para1: AMSMediaSessionManager.InnerOnActiveSessionsChangedListener; para2: ACComponentName); overload; virtual;
    procedure addOnActiveSessionsChangedListener(para1: AMSMediaSessionManager.InnerOnActiveSessionsChangedListener; para2: ACComponentName; para3: AOHandler); overload; virtual;
    procedure removeOnActiveSessionsChangedListener(para1: AMSMediaSessionManager.InnerOnActiveSessionsChangedListener); overload; virtual;
  end;

  AMTTvContentRating = class sealed external 'android.media.tv' name 'TvContentRating' (JLObject)
  public
    class function createRating(para1: JLString; para2: JLString; para3: JLString; para4: Arr1JLString): AMTTvContentRating; static; overload;
    class function createRating(para1: JLString; para2: JLString; para3: JLString; const para4: array of JLString): AMTTvContentRating; static; overload;
    class function unflattenFromString(para1: JLString): AMTTvContentRating; static; overload;
    function getDomain(): JLString; overload; virtual;
    function getRatingSystem(): JLString; overload; virtual;
    function getMainRating(): JLString; overload; virtual;
    function getSubRatings(): JUList; overload; virtual;
    function flattenToString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  AMTTvInputManager = class sealed external 'android.media.tv' name 'TvInputManager' (JLObject)
  public
    type
      InnerTvInputCallback = class;
      Arr1InnerTvInputCallback = array of InnerTvInputCallback;
      Arr2InnerTvInputCallback = array of Arr1InnerTvInputCallback;
      Arr3InnerTvInputCallback = array of Arr2InnerTvInputCallback;
      InnerTvInputCallback = class abstract external 'android.media.tv' name 'TvInputCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onInputStateChanged(para1: JLString; para2: jint); overload; virtual;
        procedure onInputAdded(para1: JLString); overload; virtual;
        procedure onInputRemoved(para1: JLString); overload; virtual;
      end;
  public
    const
      ACTION_BLOCKED_RATINGS_CHANGED = 'android.media.tv.action.BLOCKED_RATINGS_CHANGED';
      ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED = 'android.media.tv.action.PARENTAL_CONTROLS_ENABLED_CHANGED';
      ACTION_QUERY_CONTENT_RATING_SYSTEMS = 'android.media.tv.action.QUERY_CONTENT_RATING_SYSTEMS';
      INPUT_STATE_CONNECTED = 0;
      INPUT_STATE_CONNECTED_STANDBY = 1;
      INPUT_STATE_DISCONNECTED = 2;
      META_DATA_CONTENT_RATING_SYSTEMS = 'android.media.tv.metadata.CONTENT_RATING_SYSTEMS';
      VIDEO_UNAVAILABLE_REASON_BUFFERING = 3;
      VIDEO_UNAVAILABLE_REASON_TUNING = 1;
      VIDEO_UNAVAILABLE_REASON_UNKNOWN = 0;
      VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL = 2;
  public
    function getTvInputList(): JUList; overload; virtual;
    function getTvInputInfo(para1: JLString): AMTTvInputInfo; overload; virtual;
    function getInputState(para1: JLString): jint; overload; virtual;
    procedure registerCallback(para1: AMTTvInputManager.InnerTvInputCallback; para2: AOHandler); overload; virtual;
    procedure unregisterCallback(para1: AMTTvInputManager.InnerTvInputCallback); overload; virtual;
    function isParentalControlsEnabled(): jboolean; overload; virtual;
    function isRatingBlocked(para1: AMTTvContentRating): jboolean; overload; virtual;
  end;

  ANPskKeyManager = class abstract external 'android.net' name 'PskKeyManager' (JLObject)
  public
    const
      MAX_IDENTITY_HINT_LENGTH_BYTES = 128;
      MAX_IDENTITY_LENGTH_BYTES = 128;
      MAX_KEY_LENGTH_BYTES = 256;
  public
    constructor create(); overload;
    function chooseServerKeyIdentityHint(para1: JNSocket): JLString; overload; virtual;
    function chooseServerKeyIdentityHint(para1: JNSSSLEngine): JLString; overload; virtual;
    function chooseClientKeyIdentity(para1: JLString; para2: JNSocket): JLString; overload; virtual;
    function chooseClientKeyIdentity(para1: JLString; para2: JNSSSLEngine): JLString; overload; virtual;
    function getKey(para1: JLString; para2: JLString; para3: JNSocket): JCSecretKey; overload; virtual;
    function getKey(para1: JLString; para2: JLString; para3: JNSSSLEngine): JCSecretKey; overload; virtual;
  end;

  AOGLES31Ext = class external 'android.opengl' name 'GLES31Ext' (JLObject)
  public
    type
      InnerDebugProcKHR = interface;
      Arr1InnerDebugProcKHR = array of InnerDebugProcKHR;
      Arr2InnerDebugProcKHR = array of Arr1InnerDebugProcKHR;
      Arr3InnerDebugProcKHR = array of Arr2InnerDebugProcKHR;
      InnerDebugProcKHR = interface external 'android.opengl' name 'DebugProcKHR' 
        procedure onMessage(para1: jint; para2: jint; para3: jint; para4: jint; para5: JLString); overload;
      end;
  public
    const
      GL_BLEND_ADVANCED_COHERENT_KHR = 37509;
      GL_BUFFER_KHR = 33504;
      GL_CLAMP_TO_BORDER_EXT = 33069;
      GL_COLORBURN_KHR = 37530;
      GL_COLORDODGE_KHR = 37529;
      GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819;
      GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816;
      GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817;
      GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818;
      GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820;
      GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821;
      GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808;
      GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809;
      GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810;
      GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811;
      GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812;
      GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813;
      GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814;
      GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846;
      GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847;
      GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 2;
      GL_DARKEN_KHR = 37527;
      GL_DEBUG_CALLBACK_FUNCTION_KHR = 33348;
      GL_DEBUG_CALLBACK_USER_PARAM_KHR = 33349;
      GL_DEBUG_GROUP_STACK_DEPTH_KHR = 33389;
      GL_DEBUG_LOGGED_MESSAGES_KHR = 37189;
      GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 33347;
      GL_DEBUG_OUTPUT_KHR = 37600;
      GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 33346;
      GL_DEBUG_SEVERITY_HIGH_KHR = 37190;
      GL_DEBUG_SEVERITY_LOW_KHR = 37192;
      GL_DEBUG_SEVERITY_MEDIUM_KHR = 37191;
      GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 33387;
      GL_DEBUG_SOURCE_API_KHR = 33350;
      GL_DEBUG_SOURCE_APPLICATION_KHR = 33354;
      GL_DEBUG_SOURCE_OTHER_KHR = 33355;
      GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 33352;
      GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 33353;
      GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 33351;
      GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 33357;
      GL_DEBUG_TYPE_ERROR_KHR = 33356;
      GL_DEBUG_TYPE_MARKER_KHR = 33384;
      GL_DEBUG_TYPE_OTHER_KHR = 33361;
      GL_DEBUG_TYPE_PERFORMANCE_KHR = 33360;
      GL_DEBUG_TYPE_POP_GROUP_KHR = 33386;
      GL_DEBUG_TYPE_PORTABILITY_KHR = 33359;
      GL_DEBUG_TYPE_PUSH_GROUP_KHR = 33385;
      GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 33358;
      GL_DECODE_EXT = 35401;
      GL_DIFFERENCE_KHR = 37534;
      GL_EXCLUSION_KHR = 37536;
      GL_FIRST_VERTEX_CONVENTION_EXT = 36429;
      GL_FRACTIONAL_EVEN_EXT = 36476;
      GL_FRACTIONAL_ODD_EXT = 36475;
      GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 36445;
      GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263;
      GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 37650;
      GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264;
      GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095;
      GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096;
      GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094;
      GL_GEOMETRY_SHADER_BIT_EXT = 4;
      GL_GEOMETRY_SHADER_EXT = 36313;
      GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 34943;
      GL_HARDLIGHT_KHR = 37531;
      GL_HSL_COLOR_KHR = 37551;
      GL_HSL_HUE_KHR = 37549;
      GL_HSL_LUMINOSITY_KHR = 37552;
      GL_HSL_SATURATION_KHR = 37550;
      GL_IMAGE_BUFFER_EXT = 36945;
      GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948;
      GL_INT_IMAGE_BUFFER_EXT = 36956;
      GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959;
      GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37132;
      GL_INT_SAMPLER_BUFFER_EXT = 36304;
      GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36878;
      GL_ISOLINES_EXT = 36474;
      GL_IS_PER_PATCH_EXT = 37607;
      GL_LAST_VERTEX_CONVENTION_EXT = 36430;
      GL_LAYER_PROVOKING_VERTEX_EXT = 33374;
      GL_LIGHTEN_KHR = 37528;
      GL_LINES_ADJACENCY_EXT = 10;
      GL_LINE_STRIP_ADJACENCY_EXT = 11;
      GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 35378;
      GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36382;
      GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36383;
      GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 33388;
      GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 37188;
      GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 37187;
      GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 36444;
      GL_MAX_FRAMEBUFFER_LAYERS_EXT = 37655;
      GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 37589;
      GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 37583;
      GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 37069;
      GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 37155;
      GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 37156;
      GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320;
      GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 36442;
      GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 37079;
      GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881;
      GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321;
      GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 35372;
      GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319;
      GL_MAX_LABEL_LENGTH_KHR = 33512;
      GL_MAX_PATCH_VERTICES_EXT = 36477;
      GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 37587;
      GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 37581;
      GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 37067;
      GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 34924;
      GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 36483;
      GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 37080;
      GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 36481;
      GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 36485;
      GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 36489;
      GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36479;
      GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 37588;
      GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 37582;
      GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 37068;
      GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 34925;
      GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 36486;
      GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 37081;
      GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 36482;
      GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 36490;
      GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36480;
      GL_MAX_TESS_GEN_LEVEL_EXT = 36478;
      GL_MAX_TESS_PATCH_COMPONENTS_EXT = 36484;
      GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883;
      GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 36443;
      GL_MIN_SAMPLE_SHADING_VALUE_OES = 35895;
      GL_MULTIPLY_KHR = 37524;
      GL_OVERLAY_KHR = 37526;
      GL_PATCHES_EXT = 14;
      GL_PATCH_VERTICES_EXT = 36466;
      GL_PRIMITIVES_GENERATED_EXT = 35975;
      GL_PRIMITIVE_BOUNDING_BOX_EXT = 37566;
      GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;
      GL_PROGRAM_KHR = 33506;
      GL_QUADS_EXT = 7;
      GL_QUERY_KHR = 33507;
      GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 37641;
      GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 37639;
      GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 37640;
      GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37131;
      GL_SAMPLER_BUFFER_EXT = 36290;
      GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 36876;
      GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 36877;
      GL_SAMPLER_KHR = 33510;
      GL_SAMPLE_SHADING_OES = 35894;
      GL_SCREEN_KHR = 37525;
      GL_SHADER_KHR = 33505;
      GL_SKIP_DECODE_EXT = 35402;
      GL_SOFTLIGHT_KHR = 37532;
      GL_STACK_OVERFLOW_KHR = 1283;
      GL_STACK_UNDERFLOW_KHR = 1284;
      GL_STENCIL_INDEX8_OES = 36168;
      GL_STENCIL_INDEX_OES = 6401;
      GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 36469;
      GL_TESS_CONTROL_SHADER_BIT_EXT = 8;
      GL_TESS_CONTROL_SHADER_EXT = 36488;
      GL_TESS_EVALUATION_SHADER_BIT_EXT = 16;
      GL_TESS_EVALUATION_SHADER_EXT = 36487;
      GL_TESS_GEN_MODE_EXT = 36470;
      GL_TESS_GEN_POINT_MODE_EXT = 36473;
      GL_TESS_GEN_SPACING_EXT = 36471;
      GL_TESS_GEN_VERTEX_ORDER_EXT = 36472;
      GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 37122;
      GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 37125;
      GL_TEXTURE_BINDING_BUFFER_EXT = 35884;
      GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 36874;
      GL_TEXTURE_BORDER_COLOR_EXT = 4100;
      GL_TEXTURE_BUFFER_BINDING_EXT = 35882;
      GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885;
      GL_TEXTURE_BUFFER_EXT = 35882;
      GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 37279;
      GL_TEXTURE_BUFFER_OFFSET_EXT = 37277;
      GL_TEXTURE_BUFFER_SIZE_EXT = 37278;
      GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 36873;
      GL_TEXTURE_SRGB_DECODE_EXT = 35400;
      GL_TRIANGLES_ADJACENCY_EXT = 12;
      GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13;
      GL_UNDEFINED_VERTEX_EXT = 33376;
      GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967;
      GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970;
      GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37133;
      GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312;
      GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36879;
      GL_VERTEX_ARRAY_KHR = 32884;
  public
    class procedure glBlendBarrierKHR(); static; overload;
    class procedure glDebugMessageControlKHR(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jint; para6: jint; para7: jboolean); static; overload;
    class procedure glDebugMessageControlKHR(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jint; para6: jint; para7: jboolean); static; overload;
    class procedure glDebugMessageControlKHR(para1: jint; para2: jint; para3: jint; para4: jint; para5: JNIntBuffer; para6: jboolean); static; overload;
    class procedure glDebugMessageInsertKHR(para1: jint; para2: jint; para3: jint; para4: jint; para5: JLString); static; overload;
    class procedure glDebugMessageCallbackKHR(para1: AOGLES31Ext.InnerDebugProcKHR); static; overload;
    class function glGetDebugMessageLogKHR(para1: jint; para2: jint; para3: Arr1jint; para4: jint; para5: Arr1jint; para6: jint; para7: Arr1jint; para8: jint; para9: Arr1jint; para10: jint; para11: Arr1jint; para12: jint; para13: Arr1jbyte; para14: jint): jint; static; overload;
    class function glGetDebugMessageLogKHR(para1: jint; para2: jint; var para3: array of jint; para4: jint; var para5: array of jint; para6: jint; var para7: array of jint; para8: jint; var para9: array of jint; para10: jint; var para11: array of jint; para12: jint; var para13: array of jbyte; para14: jint): jint; static; overload;
    class function glGetDebugMessageLogKHR(para1: jint; para2: JNIntBuffer; para3: JNIntBuffer; para4: JNIntBuffer; para5: JNIntBuffer; para6: JNIntBuffer; para7: JNByteBuffer): jint; static; overload;
    class function glGetDebugMessageLogKHR(para1: jint; para2: Arr1jint; para3: jint; para4: Arr1jint; para5: jint; para6: Arr1jint; para7: jint; para8: Arr1jint; para9: jint): Arr1JLString; static; overload;
    class function glGetDebugMessageLogKHR(para1: jint; var para2: array of jint; para3: jint; var para4: array of jint; para5: jint; var para6: array of jint; para7: jint; var para8: array of jint; para9: jint): Arr1JLString; static; overload;
    class function glGetDebugMessageLogKHR(para1: jint; para2: JNIntBuffer; para3: JNIntBuffer; para4: JNIntBuffer; para5: JNIntBuffer): Arr1JLString; static; overload;
    class procedure glPushDebugGroupKHR(para1: jint; para2: jint; para3: jint; para4: JLString); static; overload;
    class procedure glPopDebugGroupKHR(); static; overload;
    class procedure glObjectLabelKHR(para1: jint; para2: jint; para3: jint; para4: JLString); static; overload;
    class function glGetObjectLabelKHR(para1: jint; para2: jint): JLString; static; overload;
    class procedure glObjectPtrLabelKHR(para1: jlong; para2: JLString); static; overload;
    class function glGetObjectPtrLabelKHR(para1: jlong): JLString; static; overload;
    class function glGetDebugMessageCallbackKHR(): AOGLES31Ext.InnerDebugProcKHR; static; overload;
    class procedure glMinSampleShadingOES(para1: jfloat); static; overload;
    class procedure glTexStorage3DMultisampleOES(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jboolean); static; overload;
    class procedure glCopyImageSubDataEXT(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint; para7: jint; para8: jint; para9: jint; para10: jint; para11: jint; para12: jint; para13: jint; para14: jint; para15: jint); static; overload;
    class procedure glEnableiEXT(para1: jint; para2: jint); static; overload;
    class procedure glDisableiEXT(para1: jint; para2: jint); static; overload;
    class procedure glBlendEquationiEXT(para1: jint; para2: jint); static; overload;
    class procedure glBlendEquationSeparateiEXT(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glBlendFunciEXT(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glBlendFuncSeparateiEXT(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glColorMaskiEXT(para1: jint; para2: jboolean; para3: jboolean; para4: jboolean; para5: jboolean); static; overload;
    class function glIsEnablediEXT(para1: jint; para2: jint): jboolean; static; overload;
    class procedure glFramebufferTextureEXT(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glPrimitiveBoundingBoxEXT(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat; para7: jfloat; para8: jfloat); static; overload;
    class procedure glPatchParameteriEXT(para1: jint; para2: jint); static; overload;
    class procedure glTexParameterIivEXT(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexParameterIivEXT(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexParameterIivEXT(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTexParameterIuivEXT(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glTexParameterIuivEXT(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glTexParameterIuivEXT(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexParameterIivEXT(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexParameterIivEXT(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexParameterIivEXT(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetTexParameterIuivEXT(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetTexParameterIuivEXT(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetTexParameterIuivEXT(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glSamplerParameterIivEXT(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glSamplerParameterIivEXT(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glSamplerParameterIivEXT(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glSamplerParameterIuivEXT(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glSamplerParameterIuivEXT(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glSamplerParameterIuivEXT(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetSamplerParameterIivEXT(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetSamplerParameterIivEXT(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetSamplerParameterIivEXT(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetSamplerParameterIuivEXT(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetSamplerParameterIuivEXT(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetSamplerParameterIuivEXT(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glTexBufferEXT(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glTexBufferRangeEXT(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
  end;

  ASVAlwaysOnHotwordDetector = class external 'android.service.voice' name 'AlwaysOnHotwordDetector' (JLObject)
  public
    type
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerEventPayload = class;
      Arr1InnerEventPayload = array of InnerEventPayload;
      Arr2InnerEventPayload = array of Arr1InnerEventPayload;
      Arr3InnerEventPayload = array of Arr2InnerEventPayload;
      InnerCallback = class abstract external 'android.service.voice' name 'Callback' (JLObject)
      public
        constructor create(); overload;
        procedure onAvailabilityChanged(para1: jint); overload; virtual; abstract;
        procedure onDetected(para1: ASVAlwaysOnHotwordDetector.InnerEventPayload); overload; virtual; abstract;
        procedure onError(); overload; virtual; abstract;
        procedure onRecognitionPaused(); overload; virtual; abstract;
        procedure onRecognitionResumed(); overload; virtual; abstract;
      end;
      InnerEventPayload = class external 'android.service.voice' name 'EventPayload' (JLObject)
      public
        function getCaptureAudioFormat(): AMAudioFormat; overload; virtual;
        function getTriggerAudio(): Arr1jbyte; overload; virtual;
      end;
  public
    const
      RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS = 2;
      RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO = 1;
      RECOGNITION_MODE_USER_IDENTIFICATION = 2;
      RECOGNITION_MODE_VOICE_TRIGGER = 1;
      STATE_HARDWARE_UNAVAILABLE = -2;
      STATE_KEYPHRASE_ENROLLED = 2;
      STATE_KEYPHRASE_UNENROLLED = 1;
      STATE_KEYPHRASE_UNSUPPORTED = -1;
  public
    function getSupportedRecognitionModes(): jint; overload; virtual;
    function startRecognition(para1: jint): jboolean; overload; virtual;
    function stopRecognition(): jboolean; overload; virtual;
    function createEnrollIntent(): ACIntent; overload; virtual;
    function createUnEnrollIntent(): ACIntent; overload; virtual;
    function createReEnrollIntent(): ACIntent; overload; virtual;
  end;

  ASOs = class sealed external 'android.system' name 'Os' (JLObject)
  public
    class function accept(para1: JIFileDescriptor; para2: JNInetSocketAddress): JIFileDescriptor; static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class function access(para1: JLString; para2: jint): jboolean; static; overload;  // throws android.system.ErrnoException
    class procedure bind(para1: JIFileDescriptor; para2: JNInetAddress; para3: jint); static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class procedure chmod(para1: JLString; para2: jint); static; overload;  // throws android.system.ErrnoException
    class procedure chown(para1: JLString; para2: jint; para3: jint); static; overload;  // throws android.system.ErrnoException
    class procedure close(para1: JIFileDescriptor); static; overload;  // throws android.system.ErrnoException
    class procedure connect(para1: JIFileDescriptor; para2: JNInetAddress; para3: jint); static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class function dup(para1: JIFileDescriptor): JIFileDescriptor; static; overload;  // throws android.system.ErrnoException
    class function dup2(para1: JIFileDescriptor; para2: jint): JIFileDescriptor; static; overload;  // throws android.system.ErrnoException
    class function environ(): Arr1JLString; static; overload;
    class procedure execv(para1: JLString; para2: Arr1JLString); static; overload;  // throws android.system.ErrnoException
    class procedure execv(para1: JLString; var para2: array of JLString); static; overload;  // throws android.system.ErrnoException
    class procedure execve(para1: JLString; para2: Arr1JLString; para3: Arr1JLString); static; overload;  // throws android.system.ErrnoException
    class procedure execve(para1: JLString; var para2: array of JLString; var para3: array of JLString); static; overload;  // throws android.system.ErrnoException
    class procedure fchmod(para1: JIFileDescriptor; para2: jint); static; overload;  // throws android.system.ErrnoException
    class procedure fchown(para1: JIFileDescriptor; para2: jint; para3: jint); static; overload;  // throws android.system.ErrnoException
    class procedure fdatasync(para1: JIFileDescriptor); static; overload;  // throws android.system.ErrnoException
    class function fstat(para1: JIFileDescriptor): ASStructStat; static; overload;  // throws android.system.ErrnoException
    class function fstatvfs(para1: JIFileDescriptor): ASStructStatVfs; static; overload;  // throws android.system.ErrnoException
    class procedure fsync(para1: JIFileDescriptor); static; overload;  // throws android.system.ErrnoException
    class procedure ftruncate(para1: JIFileDescriptor; para2: jlong); static; overload;  // throws android.system.ErrnoException
    class function gai_strerror(para1: jint): JLString; static; overload;
    class function getegid(): jint; static; overload;
    class function geteuid(): jint; static; overload;
    class function getgid(): jint; static; overload;
    class function getenv(para1: JLString): JLString; static; overload;
    class function getpeername(para1: JIFileDescriptor): JNSocketAddress; static; overload;  // throws android.system.ErrnoException
    class function getpid(): jint; static; overload;
    class function getppid(): jint; static; overload;
    class function getsockname(para1: JIFileDescriptor): JNSocketAddress; static; overload;  // throws android.system.ErrnoException
    class function gettid(): jint; static; overload;
    class function getuid(): jint; static; overload;
    class function if_indextoname(para1: jint): JLString; static; overload;
    class function inet_pton(para1: jint; para2: JLString): JNInetAddress; static; overload;
    class function isatty(para1: JIFileDescriptor): jboolean; static; overload;
    class procedure kill(para1: jint; para2: jint); static; overload;  // throws android.system.ErrnoException
    class procedure lchown(para1: JLString; para2: jint; para3: jint); static; overload;  // throws android.system.ErrnoException
    class procedure link(para1: JLString; para2: JLString); static; overload;  // throws android.system.ErrnoException
    class procedure listen(para1: JIFileDescriptor; para2: jint); static; overload;  // throws android.system.ErrnoException
    class function lseek(para1: JIFileDescriptor; para2: jlong; para3: jint): jlong; static; overload;  // throws android.system.ErrnoException
    class function lstat(para1: JLString): ASStructStat; static; overload;  // throws android.system.ErrnoException
    class procedure mincore(para1: jlong; para2: jlong; para3: Arr1jbyte); static; overload;  // throws android.system.ErrnoException
    class procedure mincore(para1: jlong; para2: jlong; var para3: array of jbyte); static; overload;  // throws android.system.ErrnoException
    class procedure mkdir(para1: JLString; para2: jint); static; overload;  // throws android.system.ErrnoException
    class procedure mkfifo(para1: JLString; para2: jint); static; overload;  // throws android.system.ErrnoException
    class procedure mlock(para1: jlong; para2: jlong); static; overload;  // throws android.system.ErrnoException
    class function mmap(para1: jlong; para2: jlong; para3: jint; para4: jint; para5: JIFileDescriptor; para6: jlong): jlong; static; overload;  // throws android.system.ErrnoException
    class procedure msync(para1: jlong; para2: jlong; para3: jint); static; overload;  // throws android.system.ErrnoException
    class procedure munlock(para1: jlong; para2: jlong); static; overload;  // throws android.system.ErrnoException
    class procedure munmap(para1: jlong; para2: jlong); static; overload;  // throws android.system.ErrnoException
    class function open(para1: JLString; para2: jint; para3: jint): JIFileDescriptor; static; overload;  // throws android.system.ErrnoException
    class function pipe(): Arr1JIFileDescriptor; static; overload;  // throws android.system.ErrnoException
    class function poll(para1: Arr1ASStructPollfd; para2: jint): jint; static; overload;  // throws android.system.ErrnoException
    class function poll(var para1: array of ASStructPollfd; para2: jint): jint; static; overload;  // throws android.system.ErrnoException
    class procedure posix_fallocate(para1: JIFileDescriptor; para2: jlong; para3: jlong); static; overload;  // throws android.system.ErrnoException
    class function prctl(para1: jint; para2: jlong; para3: jlong; para4: jlong; para5: jlong): jint; static; overload;  // throws android.system.ErrnoException
    class function pread(para1: JIFileDescriptor; para2: JNByteBuffer; para3: jlong): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function pread(para1: JIFileDescriptor; para2: Arr1jbyte; para3: jint; para4: jint; para5: jlong): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function pread(para1: JIFileDescriptor; var para2: array of jbyte; para3: jint; para4: jint; para5: jlong): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function pwrite(para1: JIFileDescriptor; para2: JNByteBuffer; para3: jlong): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function pwrite(para1: JIFileDescriptor; para2: Arr1jbyte; para3: jint; para4: jint; para5: jlong): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function pwrite(para1: JIFileDescriptor; var para2: array of jbyte; para3: jint; para4: jint; para5: jlong): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function read(para1: JIFileDescriptor; para2: JNByteBuffer): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function read(para1: JIFileDescriptor; para2: Arr1jbyte; para3: jint; para4: jint): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function read(para1: JIFileDescriptor; var para2: array of jbyte; para3: jint; para4: jint): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function readlink(para1: JLString): JLString; static; overload;  // throws android.system.ErrnoException
    class function readv(para1: JIFileDescriptor; para2: Arr1JLObject; para3: Arr1jint; para4: Arr1jint): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function readv(para1: JIFileDescriptor; var para2: array of JLObject; var para3: array of jint; var para4: array of jint): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function recvfrom(para1: JIFileDescriptor; para2: JNByteBuffer; para3: jint; para4: JNInetSocketAddress): jint; static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class function recvfrom(para1: JIFileDescriptor; para2: Arr1jbyte; para3: jint; para4: jint; para5: jint; para6: JNInetSocketAddress): jint; static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class function recvfrom(para1: JIFileDescriptor; var para2: array of jbyte; para3: jint; para4: jint; para5: jint; para6: JNInetSocketAddress): jint; static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class procedure remove(para1: JLString); static; overload;  // throws android.system.ErrnoException
    class procedure rename(para1: JLString; para2: JLString); static; overload;  // throws android.system.ErrnoException
    class function sendfile(para1: JIFileDescriptor; para2: JIFileDescriptor; para3: AUMutableLong; para4: jlong): jlong; static; overload;  // throws android.system.ErrnoException
    class function sendto(para1: JIFileDescriptor; para2: JNByteBuffer; para3: jint; para4: JNInetAddress; para5: jint): jint; static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class function sendto(para1: JIFileDescriptor; para2: Arr1jbyte; para3: jint; para4: jint; para5: jint; para6: JNInetAddress; para7: jint): jint; static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class function sendto(para1: JIFileDescriptor; var para2: array of jbyte; para3: jint; para4: jint; para5: jint; para6: JNInetAddress; para7: jint): jint; static; overload;  // throws android.system.ErrnoException, java.net.SocketException
    class procedure setegid(para1: jint); static; overload;  // throws android.system.ErrnoException
    class procedure setenv(para1: JLString; para2: JLString; para3: jboolean); static; overload;  // throws android.system.ErrnoException
    class procedure seteuid(para1: jint); static; overload;  // throws android.system.ErrnoException
    class procedure setgid(para1: jint); static; overload;  // throws android.system.ErrnoException
    class function setsid(): jint; static; overload;  // throws android.system.ErrnoException
    class procedure setuid(para1: jint); static; overload;  // throws android.system.ErrnoException
    class procedure shutdown(para1: JIFileDescriptor; para2: jint); static; overload;  // throws android.system.ErrnoException
    class function socket(para1: jint; para2: jint; para3: jint): JIFileDescriptor; static; overload;  // throws android.system.ErrnoException
    class procedure socketpair(para1: jint; para2: jint; para3: jint; para4: JIFileDescriptor; para5: JIFileDescriptor); static; overload;  // throws android.system.ErrnoException
    class function stat(para1: JLString): ASStructStat; static; overload;  // throws android.system.ErrnoException
    class function statvfs(para1: JLString): ASStructStatVfs; static; overload;  // throws android.system.ErrnoException
    class function strerror(para1: jint): JLString; static; overload;
    class function strsignal(para1: jint): JLString; static; overload;
    class procedure symlink(para1: JLString; para2: JLString); static; overload;  // throws android.system.ErrnoException
    class function sysconf(para1: jint): jlong; static; overload;
    class procedure tcdrain(para1: JIFileDescriptor); static; overload;  // throws android.system.ErrnoException
    class procedure tcsendbreak(para1: JIFileDescriptor; para2: jint); static; overload;  // throws android.system.ErrnoException
    class function umask(para1: jint): jint; static; overload;
    class function uname(): ASStructUtsname; static; overload;
    class procedure unsetenv(para1: JLString); static; overload;  // throws android.system.ErrnoException
    class function waitpid(para1: jint; para2: AUMutableInt; para3: jint): jint; static; overload;  // throws android.system.ErrnoException
    class function write(para1: JIFileDescriptor; para2: JNByteBuffer): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function write(para1: JIFileDescriptor; para2: Arr1jbyte; para3: jint; para4: jint): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function write(para1: JIFileDescriptor; var para2: array of jbyte; para3: jint; para4: jint): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function writev(para1: JIFileDescriptor; para2: Arr1JLObject; para3: Arr1jint; para4: Arr1jint): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
    class function writev(para1: JIFileDescriptor; var para2: array of JLObject; var para3: array of jint; var para4: array of jint): jint; static; overload;  // throws android.system.ErrnoException, java.io.InterruptedIOException
  end;

  ASOsConstants = class sealed external 'android.system' name 'OsConstants' (JLObject)
  public
    final class var
      fAF_INET: jint; external name 'AF_INET';
      fAF_INET6: jint; external name 'AF_INET6';
      fAF_UNIX: jint; external name 'AF_UNIX';
      fAF_UNSPEC: jint; external name 'AF_UNSPEC';
      fAI_ADDRCONFIG: jint; external name 'AI_ADDRCONFIG';
      fAI_ALL: jint; external name 'AI_ALL';
      fAI_CANONNAME: jint; external name 'AI_CANONNAME';
      fAI_NUMERICHOST: jint; external name 'AI_NUMERICHOST';
      fAI_NUMERICSERV: jint; external name 'AI_NUMERICSERV';
      fAI_PASSIVE: jint; external name 'AI_PASSIVE';
      fAI_V4MAPPED: jint; external name 'AI_V4MAPPED';
      fCAP_AUDIT_CONTROL: jint; external name 'CAP_AUDIT_CONTROL';
      fCAP_AUDIT_WRITE: jint; external name 'CAP_AUDIT_WRITE';
      fCAP_BLOCK_SUSPEND: jint; external name 'CAP_BLOCK_SUSPEND';
      fCAP_CHOWN: jint; external name 'CAP_CHOWN';
      fCAP_DAC_OVERRIDE: jint; external name 'CAP_DAC_OVERRIDE';
      fCAP_DAC_READ_SEARCH: jint; external name 'CAP_DAC_READ_SEARCH';
      fCAP_FOWNER: jint; external name 'CAP_FOWNER';
      fCAP_FSETID: jint; external name 'CAP_FSETID';
      fCAP_IPC_LOCK: jint; external name 'CAP_IPC_LOCK';
      fCAP_IPC_OWNER: jint; external name 'CAP_IPC_OWNER';
      fCAP_KILL: jint; external name 'CAP_KILL';
      fCAP_LAST_CAP: jint; external name 'CAP_LAST_CAP';
      fCAP_LEASE: jint; external name 'CAP_LEASE';
      fCAP_LINUX_IMMUTABLE: jint; external name 'CAP_LINUX_IMMUTABLE';
      fCAP_MAC_ADMIN: jint; external name 'CAP_MAC_ADMIN';
      fCAP_MAC_OVERRIDE: jint; external name 'CAP_MAC_OVERRIDE';
      fCAP_MKNOD: jint; external name 'CAP_MKNOD';
      fCAP_NET_ADMIN: jint; external name 'CAP_NET_ADMIN';
      fCAP_NET_BIND_SERVICE: jint; external name 'CAP_NET_BIND_SERVICE';
      fCAP_NET_BROADCAST: jint; external name 'CAP_NET_BROADCAST';
      fCAP_NET_RAW: jint; external name 'CAP_NET_RAW';
      fCAP_SETFCAP: jint; external name 'CAP_SETFCAP';
      fCAP_SETGID: jint; external name 'CAP_SETGID';
      fCAP_SETPCAP: jint; external name 'CAP_SETPCAP';
      fCAP_SETUID: jint; external name 'CAP_SETUID';
      fCAP_SYSLOG: jint; external name 'CAP_SYSLOG';
      fCAP_SYS_ADMIN: jint; external name 'CAP_SYS_ADMIN';
      fCAP_SYS_BOOT: jint; external name 'CAP_SYS_BOOT';
      fCAP_SYS_CHROOT: jint; external name 'CAP_SYS_CHROOT';
      fCAP_SYS_MODULE: jint; external name 'CAP_SYS_MODULE';
      fCAP_SYS_NICE: jint; external name 'CAP_SYS_NICE';
      fCAP_SYS_PACCT: jint; external name 'CAP_SYS_PACCT';
      fCAP_SYS_PTRACE: jint; external name 'CAP_SYS_PTRACE';
      fCAP_SYS_RAWIO: jint; external name 'CAP_SYS_RAWIO';
      fCAP_SYS_RESOURCE: jint; external name 'CAP_SYS_RESOURCE';
      fCAP_SYS_TIME: jint; external name 'CAP_SYS_TIME';
      fCAP_SYS_TTY_CONFIG: jint; external name 'CAP_SYS_TTY_CONFIG';
      fCAP_WAKE_ALARM: jint; external name 'CAP_WAKE_ALARM';
      fE2BIG: jint; external name 'E2BIG';
      fEACCES: jint; external name 'EACCES';
      fEADDRINUSE: jint; external name 'EADDRINUSE';
      fEADDRNOTAVAIL: jint; external name 'EADDRNOTAVAIL';
      fEAFNOSUPPORT: jint; external name 'EAFNOSUPPORT';
      fEAGAIN: jint; external name 'EAGAIN';
      fEAI_AGAIN: jint; external name 'EAI_AGAIN';
      fEAI_BADFLAGS: jint; external name 'EAI_BADFLAGS';
      fEAI_FAIL: jint; external name 'EAI_FAIL';
      fEAI_FAMILY: jint; external name 'EAI_FAMILY';
      fEAI_MEMORY: jint; external name 'EAI_MEMORY';
      fEAI_NODATA: jint; external name 'EAI_NODATA';
      fEAI_NONAME: jint; external name 'EAI_NONAME';
      fEAI_OVERFLOW: jint; external name 'EAI_OVERFLOW';
      fEAI_SERVICE: jint; external name 'EAI_SERVICE';
      fEAI_SOCKTYPE: jint; external name 'EAI_SOCKTYPE';
      fEAI_SYSTEM: jint; external name 'EAI_SYSTEM';
      fEALREADY: jint; external name 'EALREADY';
      fEBADF: jint; external name 'EBADF';
      fEBADMSG: jint; external name 'EBADMSG';
      fEBUSY: jint; external name 'EBUSY';
      fECANCELED: jint; external name 'ECANCELED';
      fECHILD: jint; external name 'ECHILD';
      fECONNABORTED: jint; external name 'ECONNABORTED';
      fECONNREFUSED: jint; external name 'ECONNREFUSED';
      fECONNRESET: jint; external name 'ECONNRESET';
      fEDEADLK: jint; external name 'EDEADLK';
      fEDESTADDRREQ: jint; external name 'EDESTADDRREQ';
      fEDOM: jint; external name 'EDOM';
      fEDQUOT: jint; external name 'EDQUOT';
      fEEXIST: jint; external name 'EEXIST';
      fEFAULT: jint; external name 'EFAULT';
      fEFBIG: jint; external name 'EFBIG';
      fEHOSTUNREACH: jint; external name 'EHOSTUNREACH';
      fEIDRM: jint; external name 'EIDRM';
      fEILSEQ: jint; external name 'EILSEQ';
      fEINPROGRESS: jint; external name 'EINPROGRESS';
      fEINTR: jint; external name 'EINTR';
      fEINVAL: jint; external name 'EINVAL';
      fEIO: jint; external name 'EIO';
      fEISCONN: jint; external name 'EISCONN';
      fEISDIR: jint; external name 'EISDIR';
      fELOOP: jint; external name 'ELOOP';
      fEMFILE: jint; external name 'EMFILE';
      fEMLINK: jint; external name 'EMLINK';
      fEMSGSIZE: jint; external name 'EMSGSIZE';
      fEMULTIHOP: jint; external name 'EMULTIHOP';
      fENAMETOOLONG: jint; external name 'ENAMETOOLONG';
      fENETDOWN: jint; external name 'ENETDOWN';
      fENETRESET: jint; external name 'ENETRESET';
      fENETUNREACH: jint; external name 'ENETUNREACH';
      fENFILE: jint; external name 'ENFILE';
      fENOBUFS: jint; external name 'ENOBUFS';
      fENODATA: jint; external name 'ENODATA';
      fENODEV: jint; external name 'ENODEV';
      fENOENT: jint; external name 'ENOENT';
      fENOEXEC: jint; external name 'ENOEXEC';
      fENOLCK: jint; external name 'ENOLCK';
      fENOLINK: jint; external name 'ENOLINK';
      fENOMEM: jint; external name 'ENOMEM';
      fENOMSG: jint; external name 'ENOMSG';
      fENOPROTOOPT: jint; external name 'ENOPROTOOPT';
      fENOSPC: jint; external name 'ENOSPC';
      fENOSR: jint; external name 'ENOSR';
      fENOSTR: jint; external name 'ENOSTR';
      fENOSYS: jint; external name 'ENOSYS';
      fENOTCONN: jint; external name 'ENOTCONN';
      fENOTDIR: jint; external name 'ENOTDIR';
      fENOTEMPTY: jint; external name 'ENOTEMPTY';
      fENOTSOCK: jint; external name 'ENOTSOCK';
      fENOTSUP: jint; external name 'ENOTSUP';
      fENOTTY: jint; external name 'ENOTTY';
      fENXIO: jint; external name 'ENXIO';
      fEOPNOTSUPP: jint; external name 'EOPNOTSUPP';
      fEOVERFLOW: jint; external name 'EOVERFLOW';
      fEPERM: jint; external name 'EPERM';
      fEPIPE: jint; external name 'EPIPE';
      fEPROTO: jint; external name 'EPROTO';
      fEPROTONOSUPPORT: jint; external name 'EPROTONOSUPPORT';
      fEPROTOTYPE: jint; external name 'EPROTOTYPE';
      fERANGE: jint; external name 'ERANGE';
      fEROFS: jint; external name 'EROFS';
      fESPIPE: jint; external name 'ESPIPE';
      fESRCH: jint; external name 'ESRCH';
      fESTALE: jint; external name 'ESTALE';
      fETIME: jint; external name 'ETIME';
      fETIMEDOUT: jint; external name 'ETIMEDOUT';
      fETXTBSY: jint; external name 'ETXTBSY';
      fEXDEV: jint; external name 'EXDEV';
      fEXIT_FAILURE: jint; external name 'EXIT_FAILURE';
      fEXIT_SUCCESS: jint; external name 'EXIT_SUCCESS';
      fFD_CLOEXEC: jint; external name 'FD_CLOEXEC';
      fFIONREAD: jint; external name 'FIONREAD';
      fF_DUPFD: jint; external name 'F_DUPFD';
      fF_GETFD: jint; external name 'F_GETFD';
      fF_GETFL: jint; external name 'F_GETFL';
      fF_GETLK: jint; external name 'F_GETLK';
      fF_GETLK64: jint; external name 'F_GETLK64';
      fF_GETOWN: jint; external name 'F_GETOWN';
      fF_OK: jint; external name 'F_OK';
      fF_RDLCK: jint; external name 'F_RDLCK';
      fF_SETFD: jint; external name 'F_SETFD';
      fF_SETFL: jint; external name 'F_SETFL';
      fF_SETLK: jint; external name 'F_SETLK';
      fF_SETLK64: jint; external name 'F_SETLK64';
      fF_SETLKW: jint; external name 'F_SETLKW';
      fF_SETLKW64: jint; external name 'F_SETLKW64';
      fF_SETOWN: jint; external name 'F_SETOWN';
      fF_UNLCK: jint; external name 'F_UNLCK';
      fF_WRLCK: jint; external name 'F_WRLCK';
      fIFA_F_DADFAILED: jint; external name 'IFA_F_DADFAILED';
      fIFA_F_DEPRECATED: jint; external name 'IFA_F_DEPRECATED';
      fIFA_F_HOMEADDRESS: jint; external name 'IFA_F_HOMEADDRESS';
      fIFA_F_NODAD: jint; external name 'IFA_F_NODAD';
      fIFA_F_OPTIMISTIC: jint; external name 'IFA_F_OPTIMISTIC';
      fIFA_F_PERMANENT: jint; external name 'IFA_F_PERMANENT';
      fIFA_F_SECONDARY: jint; external name 'IFA_F_SECONDARY';
      fIFA_F_TEMPORARY: jint; external name 'IFA_F_TEMPORARY';
      fIFA_F_TENTATIVE: jint; external name 'IFA_F_TENTATIVE';
      fIFF_ALLMULTI: jint; external name 'IFF_ALLMULTI';
      fIFF_AUTOMEDIA: jint; external name 'IFF_AUTOMEDIA';
      fIFF_BROADCAST: jint; external name 'IFF_BROADCAST';
      fIFF_DEBUG: jint; external name 'IFF_DEBUG';
      fIFF_DYNAMIC: jint; external name 'IFF_DYNAMIC';
      fIFF_LOOPBACK: jint; external name 'IFF_LOOPBACK';
      fIFF_MASTER: jint; external name 'IFF_MASTER';
      fIFF_MULTICAST: jint; external name 'IFF_MULTICAST';
      fIFF_NOARP: jint; external name 'IFF_NOARP';
      fIFF_NOTRAILERS: jint; external name 'IFF_NOTRAILERS';
      fIFF_POINTOPOINT: jint; external name 'IFF_POINTOPOINT';
      fIFF_PORTSEL: jint; external name 'IFF_PORTSEL';
      fIFF_PROMISC: jint; external name 'IFF_PROMISC';
      fIFF_RUNNING: jint; external name 'IFF_RUNNING';
      fIFF_SLAVE: jint; external name 'IFF_SLAVE';
      fIFF_UP: jint; external name 'IFF_UP';
      fIPPROTO_ICMP: jint; external name 'IPPROTO_ICMP';
      fIPPROTO_ICMPV6: jint; external name 'IPPROTO_ICMPV6';
      fIPPROTO_IP: jint; external name 'IPPROTO_IP';
      fIPPROTO_IPV6: jint; external name 'IPPROTO_IPV6';
      fIPPROTO_RAW: jint; external name 'IPPROTO_RAW';
      fIPPROTO_TCP: jint; external name 'IPPROTO_TCP';
      fIPPROTO_UDP: jint; external name 'IPPROTO_UDP';
      fIPV6_CHECKSUM: jint; external name 'IPV6_CHECKSUM';
      fIPV6_MULTICAST_HOPS: jint; external name 'IPV6_MULTICAST_HOPS';
      fIPV6_MULTICAST_IF: jint; external name 'IPV6_MULTICAST_IF';
      fIPV6_MULTICAST_LOOP: jint; external name 'IPV6_MULTICAST_LOOP';
      fIPV6_RECVDSTOPTS: jint; external name 'IPV6_RECVDSTOPTS';
      fIPV6_RECVHOPLIMIT: jint; external name 'IPV6_RECVHOPLIMIT';
      fIPV6_RECVHOPOPTS: jint; external name 'IPV6_RECVHOPOPTS';
      fIPV6_RECVPKTINFO: jint; external name 'IPV6_RECVPKTINFO';
      fIPV6_RECVRTHDR: jint; external name 'IPV6_RECVRTHDR';
      fIPV6_RECVTCLASS: jint; external name 'IPV6_RECVTCLASS';
      fIPV6_TCLASS: jint; external name 'IPV6_TCLASS';
      fIPV6_UNICAST_HOPS: jint; external name 'IPV6_UNICAST_HOPS';
      fIPV6_V6ONLY: jint; external name 'IPV6_V6ONLY';
      fIP_MULTICAST_IF: jint; external name 'IP_MULTICAST_IF';
      fIP_MULTICAST_LOOP: jint; external name 'IP_MULTICAST_LOOP';
      fIP_MULTICAST_TTL: jint; external name 'IP_MULTICAST_TTL';
      fIP_TOS: jint; external name 'IP_TOS';
      fIP_TTL: jint; external name 'IP_TTL';
      fMAP_FIXED: jint; external name 'MAP_FIXED';
      fMAP_PRIVATE: jint; external name 'MAP_PRIVATE';
      fMAP_SHARED: jint; external name 'MAP_SHARED';
      fMCAST_BLOCK_SOURCE: jint; external name 'MCAST_BLOCK_SOURCE';
      fMCAST_JOIN_GROUP: jint; external name 'MCAST_JOIN_GROUP';
      fMCAST_JOIN_SOURCE_GROUP: jint; external name 'MCAST_JOIN_SOURCE_GROUP';
      fMCAST_LEAVE_GROUP: jint; external name 'MCAST_LEAVE_GROUP';
      fMCAST_LEAVE_SOURCE_GROUP: jint; external name 'MCAST_LEAVE_SOURCE_GROUP';
      fMCAST_UNBLOCK_SOURCE: jint; external name 'MCAST_UNBLOCK_SOURCE';
      fMCL_CURRENT: jint; external name 'MCL_CURRENT';
      fMCL_FUTURE: jint; external name 'MCL_FUTURE';
      fMSG_CTRUNC: jint; external name 'MSG_CTRUNC';
      fMSG_DONTROUTE: jint; external name 'MSG_DONTROUTE';
      fMSG_EOR: jint; external name 'MSG_EOR';
      fMSG_OOB: jint; external name 'MSG_OOB';
      fMSG_PEEK: jint; external name 'MSG_PEEK';
      fMSG_TRUNC: jint; external name 'MSG_TRUNC';
      fMSG_WAITALL: jint; external name 'MSG_WAITALL';
      fMS_ASYNC: jint; external name 'MS_ASYNC';
      fMS_INVALIDATE: jint; external name 'MS_INVALIDATE';
      fMS_SYNC: jint; external name 'MS_SYNC';
      fNI_DGRAM: jint; external name 'NI_DGRAM';
      fNI_NAMEREQD: jint; external name 'NI_NAMEREQD';
      fNI_NOFQDN: jint; external name 'NI_NOFQDN';
      fNI_NUMERICHOST: jint; external name 'NI_NUMERICHOST';
      fNI_NUMERICSERV: jint; external name 'NI_NUMERICSERV';
      fO_ACCMODE: jint; external name 'O_ACCMODE';
      fO_APPEND: jint; external name 'O_APPEND';
      fO_CREAT: jint; external name 'O_CREAT';
      fO_EXCL: jint; external name 'O_EXCL';
      fO_NOCTTY: jint; external name 'O_NOCTTY';
      fO_NOFOLLOW: jint; external name 'O_NOFOLLOW';
      fO_NONBLOCK: jint; external name 'O_NONBLOCK';
      fO_RDONLY: jint; external name 'O_RDONLY';
      fO_RDWR: jint; external name 'O_RDWR';
      fO_SYNC: jint; external name 'O_SYNC';
      fO_TRUNC: jint; external name 'O_TRUNC';
      fO_WRONLY: jint; external name 'O_WRONLY';
      fPOLLERR: jint; external name 'POLLERR';
      fPOLLHUP: jint; external name 'POLLHUP';
      fPOLLIN: jint; external name 'POLLIN';
      fPOLLNVAL: jint; external name 'POLLNVAL';
      fPOLLOUT: jint; external name 'POLLOUT';
      fPOLLPRI: jint; external name 'POLLPRI';
      fPOLLRDBAND: jint; external name 'POLLRDBAND';
      fPOLLRDNORM: jint; external name 'POLLRDNORM';
      fPOLLWRBAND: jint; external name 'POLLWRBAND';
      fPOLLWRNORM: jint; external name 'POLLWRNORM';
      fPROT_EXEC: jint; external name 'PROT_EXEC';
      fPROT_NONE: jint; external name 'PROT_NONE';
      fPROT_READ: jint; external name 'PROT_READ';
      fPROT_WRITE: jint; external name 'PROT_WRITE';
      fPR_GET_DUMPABLE: jint; external name 'PR_GET_DUMPABLE';
      fPR_SET_DUMPABLE: jint; external name 'PR_SET_DUMPABLE';
      fPR_SET_NO_NEW_PRIVS: jint; external name 'PR_SET_NO_NEW_PRIVS';
      fRT_SCOPE_HOST: jint; external name 'RT_SCOPE_HOST';
      fRT_SCOPE_LINK: jint; external name 'RT_SCOPE_LINK';
      fRT_SCOPE_NOWHERE: jint; external name 'RT_SCOPE_NOWHERE';
      fRT_SCOPE_SITE: jint; external name 'RT_SCOPE_SITE';
      fRT_SCOPE_UNIVERSE: jint; external name 'RT_SCOPE_UNIVERSE';
      fR_OK: jint; external name 'R_OK';
      fSEEK_CUR: jint; external name 'SEEK_CUR';
      fSEEK_END: jint; external name 'SEEK_END';
      fSEEK_SET: jint; external name 'SEEK_SET';
      fSHUT_RD: jint; external name 'SHUT_RD';
      fSHUT_RDWR: jint; external name 'SHUT_RDWR';
      fSHUT_WR: jint; external name 'SHUT_WR';
      fSIGABRT: jint; external name 'SIGABRT';
      fSIGALRM: jint; external name 'SIGALRM';
      fSIGBUS: jint; external name 'SIGBUS';
      fSIGCHLD: jint; external name 'SIGCHLD';
      fSIGCONT: jint; external name 'SIGCONT';
      fSIGFPE: jint; external name 'SIGFPE';
      fSIGHUP: jint; external name 'SIGHUP';
      fSIGILL: jint; external name 'SIGILL';
      fSIGINT: jint; external name 'SIGINT';
      fSIGIO: jint; external name 'SIGIO';
      fSIGKILL: jint; external name 'SIGKILL';
      fSIGPIPE: jint; external name 'SIGPIPE';
      fSIGPROF: jint; external name 'SIGPROF';
      fSIGPWR: jint; external name 'SIGPWR';
      fSIGQUIT: jint; external name 'SIGQUIT';
      fSIGRTMAX: jint; external name 'SIGRTMAX';
      fSIGRTMIN: jint; external name 'SIGRTMIN';
      fSIGSEGV: jint; external name 'SIGSEGV';
      fSIGSTKFLT: jint; external name 'SIGSTKFLT';
      fSIGSTOP: jint; external name 'SIGSTOP';
      fSIGSYS: jint; external name 'SIGSYS';
      fSIGTERM: jint; external name 'SIGTERM';
      fSIGTRAP: jint; external name 'SIGTRAP';
      fSIGTSTP: jint; external name 'SIGTSTP';
      fSIGTTIN: jint; external name 'SIGTTIN';
      fSIGTTOU: jint; external name 'SIGTTOU';
      fSIGURG: jint; external name 'SIGURG';
      fSIGUSR1: jint; external name 'SIGUSR1';
      fSIGUSR2: jint; external name 'SIGUSR2';
      fSIGVTALRM: jint; external name 'SIGVTALRM';
      fSIGWINCH: jint; external name 'SIGWINCH';
      fSIGXCPU: jint; external name 'SIGXCPU';
      fSIGXFSZ: jint; external name 'SIGXFSZ';
      fSIOCGIFADDR: jint; external name 'SIOCGIFADDR';
      fSIOCGIFBRDADDR: jint; external name 'SIOCGIFBRDADDR';
      fSIOCGIFDSTADDR: jint; external name 'SIOCGIFDSTADDR';
      fSIOCGIFNETMASK: jint; external name 'SIOCGIFNETMASK';
      fSOCK_DGRAM: jint; external name 'SOCK_DGRAM';
      fSOCK_RAW: jint; external name 'SOCK_RAW';
      fSOCK_SEQPACKET: jint; external name 'SOCK_SEQPACKET';
      fSOCK_STREAM: jint; external name 'SOCK_STREAM';
      fSOL_SOCKET: jint; external name 'SOL_SOCKET';
      fSO_BINDTODEVICE: jint; external name 'SO_BINDTODEVICE';
      fSO_BROADCAST: jint; external name 'SO_BROADCAST';
      fSO_DEBUG: jint; external name 'SO_DEBUG';
      fSO_DONTROUTE: jint; external name 'SO_DONTROUTE';
      fSO_ERROR: jint; external name 'SO_ERROR';
      fSO_KEEPALIVE: jint; external name 'SO_KEEPALIVE';
      fSO_LINGER: jint; external name 'SO_LINGER';
      fSO_OOBINLINE: jint; external name 'SO_OOBINLINE';
      fSO_PASSCRED: jint; external name 'SO_PASSCRED';
      fSO_PEERCRED: jint; external name 'SO_PEERCRED';
      fSO_RCVBUF: jint; external name 'SO_RCVBUF';
      fSO_RCVLOWAT: jint; external name 'SO_RCVLOWAT';
      fSO_RCVTIMEO: jint; external name 'SO_RCVTIMEO';
      fSO_REUSEADDR: jint; external name 'SO_REUSEADDR';
      fSO_SNDBUF: jint; external name 'SO_SNDBUF';
      fSO_SNDLOWAT: jint; external name 'SO_SNDLOWAT';
      fSO_SNDTIMEO: jint; external name 'SO_SNDTIMEO';
      fSO_TYPE: jint; external name 'SO_TYPE';
      fSTDERR_FILENO: jint; external name 'STDERR_FILENO';
      fSTDIN_FILENO: jint; external name 'STDIN_FILENO';
      fSTDOUT_FILENO: jint; external name 'STDOUT_FILENO';
      fS_IFBLK: jint; external name 'S_IFBLK';
      fS_IFCHR: jint; external name 'S_IFCHR';
      fS_IFDIR: jint; external name 'S_IFDIR';
      fS_IFIFO: jint; external name 'S_IFIFO';
      fS_IFLNK: jint; external name 'S_IFLNK';
      fS_IFMT: jint; external name 'S_IFMT';
      fS_IFREG: jint; external name 'S_IFREG';
      fS_IFSOCK: jint; external name 'S_IFSOCK';
      fS_IRGRP: jint; external name 'S_IRGRP';
      fS_IROTH: jint; external name 'S_IROTH';
      fS_IRUSR: jint; external name 'S_IRUSR';
      fS_IRWXG: jint; external name 'S_IRWXG';
      fS_IRWXO: jint; external name 'S_IRWXO';
      fS_IRWXU: jint; external name 'S_IRWXU';
      fS_ISGID: jint; external name 'S_ISGID';
      fS_ISUID: jint; external name 'S_ISUID';
      fS_ISVTX: jint; external name 'S_ISVTX';
      fS_IWGRP: jint; external name 'S_IWGRP';
      fS_IWOTH: jint; external name 'S_IWOTH';
      fS_IWUSR: jint; external name 'S_IWUSR';
      fS_IXGRP: jint; external name 'S_IXGRP';
      fS_IXOTH: jint; external name 'S_IXOTH';
      fS_IXUSR: jint; external name 'S_IXUSR';
      fTCP_NODELAY: jint; external name 'TCP_NODELAY';
      fWCONTINUED: jint; external name 'WCONTINUED';
      fWEXITED: jint; external name 'WEXITED';
      fWNOHANG: jint; external name 'WNOHANG';
      fWNOWAIT: jint; external name 'WNOWAIT';
      fWSTOPPED: jint; external name 'WSTOPPED';
      fWUNTRACED: jint; external name 'WUNTRACED';
      fW_OK: jint; external name 'W_OK';
      fX_OK: jint; external name 'X_OK';
      f_SC_2_CHAR_TERM: jint; external name '_SC_2_CHAR_TERM';
      f_SC_2_C_BIND: jint; external name '_SC_2_C_BIND';
      f_SC_2_C_DEV: jint; external name '_SC_2_C_DEV';
      f_SC_2_C_VERSION: jint; external name '_SC_2_C_VERSION';
      f_SC_2_FORT_DEV: jint; external name '_SC_2_FORT_DEV';
      f_SC_2_FORT_RUN: jint; external name '_SC_2_FORT_RUN';
      f_SC_2_LOCALEDEF: jint; external name '_SC_2_LOCALEDEF';
      f_SC_2_SW_DEV: jint; external name '_SC_2_SW_DEV';
      f_SC_2_UPE: jint; external name '_SC_2_UPE';
      f_SC_2_VERSION: jint; external name '_SC_2_VERSION';
      f_SC_AIO_LISTIO_MAX: jint; external name '_SC_AIO_LISTIO_MAX';
      f_SC_AIO_MAX: jint; external name '_SC_AIO_MAX';
      f_SC_AIO_PRIO_DELTA_MAX: jint; external name '_SC_AIO_PRIO_DELTA_MAX';
      f_SC_ARG_MAX: jint; external name '_SC_ARG_MAX';
      f_SC_ASYNCHRONOUS_IO: jint; external name '_SC_ASYNCHRONOUS_IO';
      f_SC_ATEXIT_MAX: jint; external name '_SC_ATEXIT_MAX';
      f_SC_AVPHYS_PAGES: jint; external name '_SC_AVPHYS_PAGES';
      f_SC_BC_BASE_MAX: jint; external name '_SC_BC_BASE_MAX';
      f_SC_BC_DIM_MAX: jint; external name '_SC_BC_DIM_MAX';
      f_SC_BC_SCALE_MAX: jint; external name '_SC_BC_SCALE_MAX';
      f_SC_BC_STRING_MAX: jint; external name '_SC_BC_STRING_MAX';
      f_SC_CHILD_MAX: jint; external name '_SC_CHILD_MAX';
      f_SC_CLK_TCK: jint; external name '_SC_CLK_TCK';
      f_SC_COLL_WEIGHTS_MAX: jint; external name '_SC_COLL_WEIGHTS_MAX';
      f_SC_DELAYTIMER_MAX: jint; external name '_SC_DELAYTIMER_MAX';
      f_SC_EXPR_NEST_MAX: jint; external name '_SC_EXPR_NEST_MAX';
      f_SC_FSYNC: jint; external name '_SC_FSYNC';
      f_SC_GETGR_R_SIZE_MAX: jint; external name '_SC_GETGR_R_SIZE_MAX';
      f_SC_GETPW_R_SIZE_MAX: jint; external name '_SC_GETPW_R_SIZE_MAX';
      f_SC_IOV_MAX: jint; external name '_SC_IOV_MAX';
      f_SC_JOB_CONTROL: jint; external name '_SC_JOB_CONTROL';
      f_SC_LINE_MAX: jint; external name '_SC_LINE_MAX';
      f_SC_LOGIN_NAME_MAX: jint; external name '_SC_LOGIN_NAME_MAX';
      f_SC_MAPPED_FILES: jint; external name '_SC_MAPPED_FILES';
      f_SC_MEMLOCK: jint; external name '_SC_MEMLOCK';
      f_SC_MEMLOCK_RANGE: jint; external name '_SC_MEMLOCK_RANGE';
      f_SC_MEMORY_PROTECTION: jint; external name '_SC_MEMORY_PROTECTION';
      f_SC_MESSAGE_PASSING: jint; external name '_SC_MESSAGE_PASSING';
      f_SC_MQ_OPEN_MAX: jint; external name '_SC_MQ_OPEN_MAX';
      f_SC_MQ_PRIO_MAX: jint; external name '_SC_MQ_PRIO_MAX';
      f_SC_NGROUPS_MAX: jint; external name '_SC_NGROUPS_MAX';
      f_SC_NPROCESSORS_CONF: jint; external name '_SC_NPROCESSORS_CONF';
      f_SC_NPROCESSORS_ONLN: jint; external name '_SC_NPROCESSORS_ONLN';
      f_SC_OPEN_MAX: jint; external name '_SC_OPEN_MAX';
      f_SC_PAGESIZE: jint; external name '_SC_PAGESIZE';
      f_SC_PAGE_SIZE: jint; external name '_SC_PAGE_SIZE';
      f_SC_PASS_MAX: jint; external name '_SC_PASS_MAX';
      f_SC_PHYS_PAGES: jint; external name '_SC_PHYS_PAGES';
      f_SC_PRIORITIZED_IO: jint; external name '_SC_PRIORITIZED_IO';
      f_SC_PRIORITY_SCHEDULING: jint; external name '_SC_PRIORITY_SCHEDULING';
      f_SC_REALTIME_SIGNALS: jint; external name '_SC_REALTIME_SIGNALS';
      f_SC_RE_DUP_MAX: jint; external name '_SC_RE_DUP_MAX';
      f_SC_RTSIG_MAX: jint; external name '_SC_RTSIG_MAX';
      f_SC_SAVED_IDS: jint; external name '_SC_SAVED_IDS';
      f_SC_SEMAPHORES: jint; external name '_SC_SEMAPHORES';
      f_SC_SEM_NSEMS_MAX: jint; external name '_SC_SEM_NSEMS_MAX';
      f_SC_SEM_VALUE_MAX: jint; external name '_SC_SEM_VALUE_MAX';
      f_SC_SHARED_MEMORY_OBJECTS: jint; external name '_SC_SHARED_MEMORY_OBJECTS';
      f_SC_SIGQUEUE_MAX: jint; external name '_SC_SIGQUEUE_MAX';
      f_SC_STREAM_MAX: jint; external name '_SC_STREAM_MAX';
      f_SC_SYNCHRONIZED_IO: jint; external name '_SC_SYNCHRONIZED_IO';
      f_SC_THREADS: jint; external name '_SC_THREADS';
      f_SC_THREAD_ATTR_STACKADDR: jint; external name '_SC_THREAD_ATTR_STACKADDR';
      f_SC_THREAD_ATTR_STACKSIZE: jint; external name '_SC_THREAD_ATTR_STACKSIZE';
      f_SC_THREAD_DESTRUCTOR_ITERATIONS: jint; external name '_SC_THREAD_DESTRUCTOR_ITERATIONS';
      f_SC_THREAD_KEYS_MAX: jint; external name '_SC_THREAD_KEYS_MAX';
      f_SC_THREAD_PRIORITY_SCHEDULING: jint; external name '_SC_THREAD_PRIORITY_SCHEDULING';
      f_SC_THREAD_PRIO_INHERIT: jint; external name '_SC_THREAD_PRIO_INHERIT';
      f_SC_THREAD_PRIO_PROTECT: jint; external name '_SC_THREAD_PRIO_PROTECT';
      f_SC_THREAD_SAFE_FUNCTIONS: jint; external name '_SC_THREAD_SAFE_FUNCTIONS';
      f_SC_THREAD_STACK_MIN: jint; external name '_SC_THREAD_STACK_MIN';
      f_SC_THREAD_THREADS_MAX: jint; external name '_SC_THREAD_THREADS_MAX';
      f_SC_TIMERS: jint; external name '_SC_TIMERS';
      f_SC_TIMER_MAX: jint; external name '_SC_TIMER_MAX';
      f_SC_TTY_NAME_MAX: jint; external name '_SC_TTY_NAME_MAX';
      f_SC_TZNAME_MAX: jint; external name '_SC_TZNAME_MAX';
      f_SC_VERSION: jint; external name '_SC_VERSION';
      f_SC_XBS5_ILP32_OFF32: jint; external name '_SC_XBS5_ILP32_OFF32';
      f_SC_XBS5_ILP32_OFFBIG: jint; external name '_SC_XBS5_ILP32_OFFBIG';
      f_SC_XBS5_LP64_OFF64: jint; external name '_SC_XBS5_LP64_OFF64';
      f_SC_XBS5_LPBIG_OFFBIG: jint; external name '_SC_XBS5_LPBIG_OFFBIG';
      f_SC_XOPEN_CRYPT: jint; external name '_SC_XOPEN_CRYPT';
      f_SC_XOPEN_ENH_I18N: jint; external name '_SC_XOPEN_ENH_I18N';
      f_SC_XOPEN_LEGACY: jint; external name '_SC_XOPEN_LEGACY';
      f_SC_XOPEN_REALTIME: jint; external name '_SC_XOPEN_REALTIME';
      f_SC_XOPEN_REALTIME_THREADS: jint; external name '_SC_XOPEN_REALTIME_THREADS';
      f_SC_XOPEN_SHM: jint; external name '_SC_XOPEN_SHM';
      f_SC_XOPEN_UNIX: jint; external name '_SC_XOPEN_UNIX';
      f_SC_XOPEN_VERSION: jint; external name '_SC_XOPEN_VERSION';
      f_SC_XOPEN_XCU_VERSION: jint; external name '_SC_XOPEN_XCU_VERSION';
  public
    class function S_ISBLK(para1: jint): jboolean; static; overload;
    class function S_ISCHR(para1: jint): jboolean; static; overload;
    class function S_ISDIR(para1: jint): jboolean; static; overload;
    class function S_ISFIFO(para1: jint): jboolean; static; overload;
    class function S_ISREG(para1: jint): jboolean; static; overload;
    class function S_ISLNK(para1: jint): jboolean; static; overload;
    class function S_ISSOCK(para1: jint): jboolean; static; overload;
    class function WEXITSTATUS(para1: jint): jint; static; overload;
    class function WCOREDUMP(para1: jint): jboolean; static; overload;
    class function WTERMSIG(para1: jint): jint; static; overload;
    class function WSTOPSIG(para1: jint): jint; static; overload;
    class function WIFEXITED(para1: jint): jboolean; static; overload;
    class function WIFSTOPPED(para1: jint): jboolean; static; overload;
    class function WIFSIGNALED(para1: jint): jboolean; static; overload;
    class function gaiName(para1: jint): JLString; static; overload;
    class function errnoName(para1: jint): JLString; static; overload;
  end;

  ASStructPollfd = class sealed external 'android.system' name 'StructPollfd' (JLObject)
  public
    var
      fevents: jshort; external name 'events';
      ffd: JIFileDescriptor; external name 'fd';
      frevents: jshort; external name 'revents';
      fuserData: JLObject; external name 'userData';
  public
    constructor create(); overload;
    function toString(): JLString; overload; virtual;
  end;

  ASStructStat = class sealed external 'android.system' name 'StructStat' (JLObject)
  public
    final var
      fst_atime: jlong; external name 'st_atime';
      fst_blksize: jlong; external name 'st_blksize';
      fst_blocks: jlong; external name 'st_blocks';
      fst_ctime: jlong; external name 'st_ctime';
      fst_dev: jlong; external name 'st_dev';
      fst_gid: jint; external name 'st_gid';
      fst_ino: jlong; external name 'st_ino';
      fst_mode: jint; external name 'st_mode';
      fst_mtime: jlong; external name 'st_mtime';
      fst_nlink: jlong; external name 'st_nlink';
      fst_rdev: jlong; external name 'st_rdev';
      fst_size: jlong; external name 'st_size';
      fst_uid: jint; external name 'st_uid';
  public
    constructor create(para1: jlong; para2: jlong; para3: jint; para4: jlong; para5: jint; para6: jint; para7: jlong; para8: jlong; para9: jlong; para10: jlong; para11: jlong; para12: jlong; para13: jlong); overload;
    function toString(): JLString; overload; virtual;
  end;

  ASStructStatVfs = class sealed external 'android.system' name 'StructStatVfs' (JLObject)
  public
    final var
      ff_bavail: jlong; external name 'f_bavail';
      ff_bfree: jlong; external name 'f_bfree';
      ff_blocks: jlong; external name 'f_blocks';
      ff_bsize: jlong; external name 'f_bsize';
      ff_favail: jlong; external name 'f_favail';
      ff_ffree: jlong; external name 'f_ffree';
      ff_files: jlong; external name 'f_files';
      ff_flag: jlong; external name 'f_flag';
      ff_frsize: jlong; external name 'f_frsize';
      ff_fsid: jlong; external name 'f_fsid';
      ff_namemax: jlong; external name 'f_namemax';
  public
    constructor create(para1: jlong; para2: jlong; para3: jlong; para4: jlong; para5: jlong; para6: jlong; para7: jlong; para8: jlong; para9: jlong; para10: jlong; para11: jlong); overload;
    function toString(): JLString; overload; virtual;
  end;

  ASStructUtsname = class sealed external 'android.system' name 'StructUtsname' (JLObject)
  public
    final var
      fmachine: JLString; external name 'machine';
      fnodename: JLString; external name 'nodename';
      frelease: JLString; external name 'release';
      fsysname: JLString; external name 'sysname';
      fversion: JLString; external name 'version';
  public
    constructor create(para1: JLString; para2: JLString; para3: JLString; para4: JLString; para5: JLString); overload;
    function toString(): JLString; overload; virtual;
  end;

  ATTelecomManager = class external 'android.telecom' name 'TelecomManager' (JLObject)
  public
    const
      ACTION_SHOW_CALL_SETTINGS = 'android.telecom.action.SHOW_CALL_SETTINGS';
      DTMF_CHARACTER_PAUSE = 44;
      DTMF_CHARACTER_WAIT = 59;
      EXTRA_CALL_DISCONNECT_CAUSE = 'android.telecom.extra.CALL_DISCONNECT_CAUSE';
      EXTRA_CALL_DISCONNECT_MESSAGE = 'android.telecom.extra.CALL_DISCONNECT_MESSAGE';
      EXTRA_START_CALL_WITH_SPEAKERPHONE = 'android.telecom.extra.START_CALL_WITH_SPEAKERPHONE';
      GATEWAY_ORIGINAL_ADDRESS = 'android.telecom.extra.GATEWAY_ORIGINAL_ADDRESS';
      GATEWAY_PROVIDER_PACKAGE = 'android.telecom.extra.GATEWAY_PROVIDER_PACKAGE';
      PRESENTATION_ALLOWED = 1;
      PRESENTATION_PAYPHONE = 4;
      PRESENTATION_RESTRICTED = 2;
      PRESENTATION_UNKNOWN = 3;
  public
    function isInCall(): jboolean; overload; virtual;
    function handleMmi(para1: JLString): jboolean; overload; virtual;
    procedure cancelMissedCallsNotification(); overload; virtual;
    procedure showInCallScreen(para1: jboolean); overload; virtual;
  end;

  ATPathMotion = class abstract external 'android.transition' name 'PathMotion' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getPath(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): AGPath; overload; virtual; abstract;
  end;

  ATTransitionPropagation = class abstract external 'android.transition' name 'TransitionPropagation' (JLObject)
  public
    constructor create(); overload;
    function getStartDelay(para1: AVViewGroup; para2: ATTransition; para3: ATTransitionValues; para4: ATTransitionValues): jlong; overload; virtual; abstract;
    procedure captureValues(para1: ATTransitionValues); overload; virtual; abstract;
    function getPropagationProperties(): Arr1JLString; overload; virtual; abstract;
  end;

  AUMutableBoolean = class sealed external 'android.util' name 'MutableBoolean' (JLObject)
  public
    var
      fvalue: jboolean; external name 'value';
  public
    constructor create(para1: jboolean); overload;
  end;

  AUMutableByte = class sealed external 'android.util' name 'MutableByte' (JLObject)
  public
    var
      fvalue: jbyte; external name 'value';
  public
    constructor create(para1: jbyte); overload;
  end;

  AUMutableChar = class sealed external 'android.util' name 'MutableChar' (JLObject)
  public
    var
      fvalue: jchar; external name 'value';
  public
    constructor create(para1: jchar); overload;
  end;

  AUMutableDouble = class sealed external 'android.util' name 'MutableDouble' (JLObject)
  public
    var
      fvalue: jdouble; external name 'value';
  public
    constructor create(para1: jdouble); overload;
  end;

  AUMutableFloat = class sealed external 'android.util' name 'MutableFloat' (JLObject)
  public
    var
      fvalue: jfloat; external name 'value';
  public
    constructor create(para1: jfloat); overload;
  end;

  AUMutableInt = class sealed external 'android.util' name 'MutableInt' (JLObject)
  public
    var
      fvalue: jint; external name 'value';
  public
    constructor create(para1: jint); overload;
  end;

  AUMutableLong = class sealed external 'android.util' name 'MutableLong' (JLObject)
  public
    var
      fvalue: jlong; external name 'value';
  public
    constructor create(para1: jlong); overload;
  end;

  AUMutableShort = class sealed external 'android.util' name 'MutableShort' (JLObject)
  public
    var
      fvalue: jshort; external name 'value';
  public
    constructor create(para1: jshort); overload;
  end;

  AURange = class sealed external 'android.util' name 'Range' (JLObject)
  public
    constructor create(para1: JLComparable; para2: JLComparable); overload;
    class function create_(para1: JLComparable; para2: JLComparable): AURange; static; external name 'create'; overload;
    function getLower(): JLComparable; overload; virtual;
    function getUpper(): JLComparable; overload; virtual;
    function contains(para1: JLComparable): jboolean; overload; virtual;
    function contains(para1: AURange): jboolean; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function clamp(para1: JLComparable): JLComparable; overload; virtual;
    function intersect(para1: AURange): AURange; overload; virtual;
    function intersect(para1: JLComparable; para2: JLComparable): AURange; overload; virtual;
    function extend(para1: AURange): AURange; overload; virtual;
    function extend(para1: JLComparable; para2: JLComparable): AURange; overload; virtual;
    function extend(para1: JLComparable): AURange; overload; virtual;
    function toString(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  AUSize = class sealed external 'android.util' name 'Size' (JLObject)
  public
    constructor create(para1: jint; para2: jint); overload;
    function getWidth(): jint; overload; virtual;
    function getHeight(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    class function parseSize(para1: JLString): AUSize; static; overload;  // throws java.lang.NumberFormatException
    function hashCode(): jint; overload; virtual;
  end;

  AUSizeF = class sealed external 'android.util' name 'SizeF' (JLObject)
  public
    constructor create(para1: jfloat; para2: jfloat); overload;
    function getWidth(): jfloat; overload; virtual;
    function getHeight(): jfloat; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    class function parseSizeF(para1: JLString): AUSizeF; static; overload;  // throws java.lang.NumberFormatException
    function hashCode(): jint; overload; virtual;
  end;

  AVFrameStats = class abstract external 'android.view' name 'FrameStats' (JLObject)
  public
    const
      UNDEFINED_TIME_NANO = jlong(-1);
  public
    constructor create(); overload;
    function getRefreshPeriodNano(): jlong; overload; virtual; final;
    function getFrameCount(): jint; overload; virtual; final;
    function getStartTimeNano(): jlong; overload; virtual; final;
    function getEndTimeNano(): jlong; overload; virtual; final;
    function getFramePresentedTimeNano(para1: jint): jlong; overload; virtual; final;
  end;

  AVViewAnimationUtils = class sealed external 'android.view' name 'ViewAnimationUtils' (JLObject)
  public
    class function createCircularReveal(para1: AVView; para2: jint; para3: jint; para4: jfloat; para5: jfloat): AAAnimator; static; overload;
  end;

  AVViewOutlineProvider = class abstract external 'android.view' name 'ViewOutlineProvider' (JLObject)
  public
    final class var
      fBACKGROUND: AVViewOutlineProvider; external name 'BACKGROUND';
      fBOUNDS: AVViewOutlineProvider; external name 'BOUNDS';
      fPADDED_BOUNDS: AVViewOutlineProvider; external name 'PADDED_BOUNDS';
  public
    constructor create(); overload;
    procedure getOutline(para1: AVView; para2: AGOutline); overload; virtual; abstract;
  end;

  AWClientCertRequest = class abstract external 'android.webkit' name 'ClientCertRequest' (JLObject)
  public
    constructor create(); overload;
    function getKeyTypes(): Arr1JLString; overload; virtual; abstract;
    function getPrincipals(): Arr1JSPrincipal; overload; virtual; abstract;
    function getHost(): JLString; overload; virtual; abstract;
    function getPort(): jint; overload; virtual; abstract;
    procedure proceed(para1: JSPrivateKey; para2: Arr1JSCX509Certificate); overload; virtual; abstract;
    procedure proceed(para1: JSPrivateKey; var para2: array of JSCX509Certificate); overload; virtual; abstract;
    procedure ignore(); overload; virtual; abstract;
    procedure cancel(); overload; virtual; abstract;
  end;

  AWPermissionRequest = class abstract external 'android.webkit' name 'PermissionRequest' (JLObject)
  public
    const
      RESOURCE_AUDIO_CAPTURE = 'android.webkit.resource.AUDIO_CAPTURE';
      RESOURCE_PROTECTED_MEDIA_ID = 'android.webkit.resource.PROTECTED_MEDIA_ID';
      RESOURCE_VIDEO_CAPTURE = 'android.webkit.resource.VIDEO_CAPTURE';
  public
    constructor create(); overload;
    function getOrigin(): ANUri; overload; virtual; abstract;
    function getResources(): Arr1JLString; overload; virtual; abstract;
    procedure grant(para1: Arr1JLString); overload; virtual; abstract;
    procedure grant(var para1: array of JLString); overload; virtual; abstract;
    procedure deny(); overload; virtual; abstract;
  end;

  AWWebResourceRequest = interface external 'android.webkit' name 'WebResourceRequest' 
    function getUrl(): ANUri; overload;
    function isForMainFrame(): jboolean; overload;
    function hasGesture(): jboolean; overload;
    function getMethod(): JLString; overload;
    function getRequestHeaders(): JUMap; overload;
  end;

  JUCPhaser = class external 'java.util.concurrent' name 'Phaser' (JLObject)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: JUCPhaser); overload;
    constructor create(para1: JUCPhaser; para2: jint); overload;
    function register(): jint; overload; virtual;
    function bulkRegister(para1: jint): jint; overload; virtual;
    function arrive(): jint; overload; virtual;
    function arriveAndDeregister(): jint; overload; virtual;
    function arriveAndAwaitAdvance(): jint; overload; virtual;
    function awaitAdvance(para1: jint): jint; overload; virtual;
    function awaitAdvanceInterruptibly(para1: jint): jint; overload; virtual;  // throws java.lang.InterruptedException
    function awaitAdvanceInterruptibly(para1: jint; para2: jlong; para3: JUCTimeUnit): jint; overload; virtual;  // throws java.lang.InterruptedException, java.util.concurrent.TimeoutException
    procedure forceTermination(); overload; virtual;
    function getPhase(): jint; overload; virtual; final;
    function getRegisteredParties(): jint; overload; virtual;
    function getArrivedParties(): jint; overload; virtual;
    function getUnarrivedParties(): jint; overload; virtual;
    function getParent(): JUCPhaser; overload; virtual;
    function getRoot(): JUCPhaser; overload; virtual;
    function isTerminated(): jboolean; overload; virtual;
  strict protected
    function onAdvance(para1: jint; para2: jint): jboolean; overload; virtual;
  public
    function toString(): JLString; overload; virtual;
  end;

  ASErrnoException = class sealed external 'android.system' name 'ErrnoException' (JLException)
  public
    final var
      ferrno: jint; external name 'errno';
  public
    constructor create(para1: JLString; para2: jint); overload;
    constructor create(para1: JLString; para2: jint; para3: JLThrowable); overload;
    function getMessage(): JLString; overload; virtual;
  end;

  JUIllformedLocaleException = class external 'java.util' name 'IllformedLocaleException' (JLRuntimeException)
  public
    constructor create(); overload;
    constructor create(para1: JLString); overload;
    constructor create(para1: JLString; para2: jint); overload;
    function getErrorIndex(): jint; overload; virtual;
  end;

  AURational = class sealed external 'android.util' name 'Rational' (JLNumber, JLComparable)
  public
    final class var
      fNEGATIVE_INFINITY: AURational; external name 'NEGATIVE_INFINITY';
      fNaN: AURational; external name 'NaN';
      fPOSITIVE_INFINITY: AURational; external name 'POSITIVE_INFINITY';
      fZERO: AURational; external name 'ZERO';
  public
    constructor create(para1: jint; para2: jint); overload;
    function getNumerator(): jint; overload; virtual;
    function getDenominator(): jint; overload; virtual;
    function isNaN(): jboolean; overload; virtual;
    function isInfinite(): jboolean; overload; virtual;
    function isFinite(): jboolean; overload; virtual;
    function isZero(): jboolean; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function doubleValue(): jdouble; overload; virtual;
    function floatValue(): jfloat; overload; virtual;
    function intValue(): jint; overload; virtual;
    function longValue(): jlong; overload; virtual;
    function shortValue(): jshort; overload; virtual;
    function compareTo(para1: AURational): jint; overload; virtual;
    class function parseRational(para1: JLString): AURational; static; overload;  // throws java.lang.NumberFormatException
    function compareTo(para1: JLObject): jint; overload; virtual;
  end;

  AABidirectionalTypeConverter = class abstract external 'android.animation' name 'BidirectionalTypeConverter' (AATypeConverter)
  public
    constructor create(para1: JLClass; para2: JLClass); overload;
    function convertBack(para1: JLObject): JLObject; overload; virtual; abstract;
    function invert(): AABidirectionalTypeConverter; overload; virtual;
  end;

  AAFloatArrayEvaluator = class external 'android.animation' name 'FloatArrayEvaluator' (JLObject, AATypeEvaluator)
  public
    constructor create(); overload;
    constructor create(para1: Arr1jfloat); overload;
    constructor create(const para1: array of jfloat); overload;
    function evaluate(para1: jfloat; para2: Arr1jfloat; para3: Arr1jfloat): Arr1jfloat; overload; virtual;
    function evaluate(para1: jfloat; var para2: array of jfloat; var para3: array of jfloat): Arr1jfloat; overload; virtual;
    function evaluate(para1: jfloat; para2: JLObject; para3: JLObject): JLObject; overload; virtual;
  end;

  AAIntArrayEvaluator = class external 'android.animation' name 'IntArrayEvaluator' (JLObject, AATypeEvaluator)
  public
    constructor create(); overload;
    constructor create(para1: Arr1jint); overload;
    constructor create(const para1: array of jint); overload;
    function evaluate(para1: jfloat; para2: Arr1jint; para3: Arr1jint): Arr1jint; overload; virtual;
    function evaluate(para1: jfloat; var para2: array of jint; var para3: array of jint): Arr1jint; overload; virtual;
    function evaluate(para1: jfloat; para2: JLObject; para3: JLObject): JLObject; overload; virtual;
  end;

  AAPointFEvaluator = class external 'android.animation' name 'PointFEvaluator' (JLObject, AATypeEvaluator)
  public
    constructor create(); overload;
    constructor create(para1: AGPointF); overload;
    function evaluate(para1: jfloat; para2: AGPointF; para3: AGPointF): AGPointF; overload; virtual;
    function evaluate(para1: jfloat; para2: JLObject; para3: JLObject): JLObject; overload; virtual;
  end;

  ASRRestrictionsReceiver = class abstract external 'android.service.restrictions' name 'RestrictionsReceiver' (ACBroadcastReceiver)
  public
    constructor create(); overload;
    procedure onRequestPermission(para1: ACContext; para2: JLString; para3: JLString; para4: JLString; para5: AOPersistableBundle); overload; virtual; abstract;
    procedure onReceive(para1: ACContext; para2: ACIntent); overload; virtual;
  end;

  AHCCameraCharacteristics = class sealed external 'android.hardware.camera2' name 'CameraCharacteristics' (AHCCameraMetadata)
  public
    type
      InnerKey = class;
      Arr1InnerKey = array of InnerKey;
      Arr2InnerKey = array of Arr1InnerKey;
      Arr3InnerKey = array of Arr2InnerKey;
      InnerKey = class sealed external 'android.hardware.camera2' name 'Key' (JLObject)
      public
        function getName(): JLString; overload; virtual;
        function hashCode(): jint; overload; virtual; final;
        function equals(para1: JLObject): jboolean; overload; virtual; final;
      end;
  public
    final class var
      fCOLOR_CORRECTION_AVAILABLE_ABERRATION_MODES: AHCCameraCharacteristics.InnerKey; external name 'COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES';
      fCONTROL_AE_AVAILABLE_ANTIBANDING_MODES: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AE_AVAILABLE_ANTIBANDING_MODES';
      fCONTROL_AE_AVAILABLE_MODES: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AE_AVAILABLE_MODES';
      fCONTROL_AE_AVAILABLE_TARGET_FPS_RANGES: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES';
      fCONTROL_AE_COMPENSATION_RANGE: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AE_COMPENSATION_RANGE';
      fCONTROL_AE_COMPENSATION_STEP: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AE_COMPENSATION_STEP';
      fCONTROL_AF_AVAILABLE_MODES: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AF_AVAILABLE_MODES';
      fCONTROL_AVAILABLE_EFFECTS: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AVAILABLE_EFFECTS';
      fCONTROL_AVAILABLE_SCENE_MODES: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AVAILABLE_SCENE_MODES';
      fCONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES';
      fCONTROL_AWB_AVAILABLE_MODES: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_AWB_AVAILABLE_MODES';
      fCONTROL_MAX_REGIONS_AE: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_MAX_REGIONS_AE';
      fCONTROL_MAX_REGIONS_AF: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_MAX_REGIONS_AF';
      fCONTROL_MAX_REGIONS_AWB: AHCCameraCharacteristics.InnerKey; external name 'CONTROL_MAX_REGIONS_AWB';
      fEDGE_AVAILABLE_EDGE_MODES: AHCCameraCharacteristics.InnerKey; external name 'EDGE_AVAILABLE_EDGE_MODES';
      fFLASH_INFO_AVAILABLE: AHCCameraCharacteristics.InnerKey; external name 'FLASH_INFO_AVAILABLE';
      fHOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES: AHCCameraCharacteristics.InnerKey; external name 'HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES';
      fINFO_SUPPORTED_HARDWARE_LEVEL: AHCCameraCharacteristics.InnerKey; external name 'INFO_SUPPORTED_HARDWARE_LEVEL';
      fJPEG_AVAILABLE_THUMBNAIL_SIZES: AHCCameraCharacteristics.InnerKey; external name 'JPEG_AVAILABLE_THUMBNAIL_SIZES';
      fLENS_FACING: AHCCameraCharacteristics.InnerKey; external name 'LENS_FACING';
      fLENS_INFO_AVAILABLE_APERTURES: AHCCameraCharacteristics.InnerKey; external name 'LENS_INFO_AVAILABLE_APERTURES';
      fLENS_INFO_AVAILABLE_FILTER_DENSITIES: AHCCameraCharacteristics.InnerKey; external name 'LENS_INFO_AVAILABLE_FILTER_DENSITIES';
      fLENS_INFO_AVAILABLE_FOCAL_LENGTHS: AHCCameraCharacteristics.InnerKey; external name 'LENS_INFO_AVAILABLE_FOCAL_LENGTHS';
      fLENS_INFO_AVAILABLE_OPTICAL_STABILIZATION: AHCCameraCharacteristics.InnerKey; external name 'LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION';
      fLENS_INFO_FOCUS_DISTANCE_CALIBRATION: AHCCameraCharacteristics.InnerKey; external name 'LENS_INFO_FOCUS_DISTANCE_CALIBRATION';
      fLENS_INFO_HYPERFOCAL_DISTANCE: AHCCameraCharacteristics.InnerKey; external name 'LENS_INFO_HYPERFOCAL_DISTANCE';
      fLENS_INFO_MINIMUM_FOCUS_DISTANCE: AHCCameraCharacteristics.InnerKey; external name 'LENS_INFO_MINIMUM_FOCUS_DISTANCE';
      fNOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES: AHCCameraCharacteristics.InnerKey; external name 'NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES';
      fREQUEST_AVAILABLE_CAPABILITIES: AHCCameraCharacteristics.InnerKey; external name 'REQUEST_AVAILABLE_CAPABILITIES';
      fREQUEST_MAX_NUM_OUTPUT_PROC: AHCCameraCharacteristics.InnerKey; external name 'REQUEST_MAX_NUM_OUTPUT_PROC';
      fREQUEST_MAX_NUM_OUTPUT_PROC_STALLING: AHCCameraCharacteristics.InnerKey; external name 'REQUEST_MAX_NUM_OUTPUT_PROC_STALLING';
      fREQUEST_MAX_NUM_OUTPUT_RAW: AHCCameraCharacteristics.InnerKey; external name 'REQUEST_MAX_NUM_OUTPUT_RAW';
      fREQUEST_PARTIAL_RESULT_COUNT: AHCCameraCharacteristics.InnerKey; external name 'REQUEST_PARTIAL_RESULT_COUNT';
      fREQUEST_PIPELINE_MAX_DEPTH: AHCCameraCharacteristics.InnerKey; external name 'REQUEST_PIPELINE_MAX_DEPTH';
      fSCALER_AVAILABLE_MAX_DIGITAL_ZOOM: AHCCameraCharacteristics.InnerKey; external name 'SCALER_AVAILABLE_MAX_DIGITAL_ZOOM';
      fSCALER_CROPPING_TYPE: AHCCameraCharacteristics.InnerKey; external name 'SCALER_CROPPING_TYPE';
      fSCALER_STREAM_CONFIGURATION_MAP: AHCCameraCharacteristics.InnerKey; external name 'SCALER_STREAM_CONFIGURATION_MAP';
      fSENSOR_AVAILABLE_TEST_PATTERN_MODES: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_AVAILABLE_TEST_PATTERN_MODES';
      fSENSOR_BLACK_LEVEL_PATTERN: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_BLACK_LEVEL_PATTERN';
      fSENSOR_CALIBRATION_TRANSFORM1: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_CALIBRATION_TRANSFORM1';
      fSENSOR_CALIBRATION_TRANSFORM2: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_CALIBRATION_TRANSFORM2';
      fSENSOR_COLOR_TRANSFORM1: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_COLOR_TRANSFORM1';
      fSENSOR_COLOR_TRANSFORM2: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_COLOR_TRANSFORM2';
      fSENSOR_FORWARD_MATRIX1: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_FORWARD_MATRIX1';
      fSENSOR_FORWARD_MATRIX2: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_FORWARD_MATRIX2';
      fSENSOR_INFO_ACTIVE_ARRAY_SIZE: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_ACTIVE_ARRAY_SIZE';
      fSENSOR_INFO_COLOR_FILTER_ARRANGEMENT: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_COLOR_FILTER_ARRANGEMENT';
      fSENSOR_INFO_EXPOSURE_TIME_RANGE: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_EXPOSURE_TIME_RANGE';
      fSENSOR_INFO_MAX_FRAME_DURATION: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_MAX_FRAME_DURATION';
      fSENSOR_INFO_PHYSICAL_SIZE: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_PHYSICAL_SIZE';
      fSENSOR_INFO_PIXEL_ARRAY_SIZE: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_PIXEL_ARRAY_SIZE';
      fSENSOR_INFO_SENSITIVITY_RANGE: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_SENSITIVITY_RANGE';
      fSENSOR_INFO_TIMESTAMP_SOURCE: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_TIMESTAMP_SOURCE';
      fSENSOR_INFO_WHITE_LEVEL: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_INFO_WHITE_LEVEL';
      fSENSOR_MAX_ANALOG_SENSITIVITY: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_MAX_ANALOG_SENSITIVITY';
      fSENSOR_ORIENTATION: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_ORIENTATION';
      fSENSOR_REFERENCE_ILLUMINANT1: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_REFERENCE_ILLUMINANT1';
      fSENSOR_REFERENCE_ILLUMINANT2: AHCCameraCharacteristics.InnerKey; external name 'SENSOR_REFERENCE_ILLUMINANT2';
      fSTATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES: AHCCameraCharacteristics.InnerKey; external name 'STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES';
      fSTATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES: AHCCameraCharacteristics.InnerKey; external name 'STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES';
      fSTATISTICS_INFO_MAX_FACE_COUNT: AHCCameraCharacteristics.InnerKey; external name 'STATISTICS_INFO_MAX_FACE_COUNT';
      fSYNC_MAX_LATENCY: AHCCameraCharacteristics.InnerKey; external name 'SYNC_MAX_LATENCY';
      fTONEMAP_AVAILABLE_TONE_MAP_MODES: AHCCameraCharacteristics.InnerKey; external name 'TONEMAP_AVAILABLE_TONE_MAP_MODES';
      fTONEMAP_MAX_CURVE_POINTS: AHCCameraCharacteristics.InnerKey; external name 'TONEMAP_MAX_CURVE_POINTS';
  public
    function get(para1: AHCCameraCharacteristics.InnerKey): JLObject; overload; virtual;
    function getKeys(): JUList; overload; virtual;
    function getAvailableCaptureRequestKeys(): JUList; overload; virtual;
    function getAvailableCaptureResultKeys(): JUList; overload; virtual;
  end;

  AHCCaptureResult = class external 'android.hardware.camera2' name 'CaptureResult' (AHCCameraMetadata)
  public
    type
      InnerKey = class;
      Arr1InnerKey = array of InnerKey;
      Arr2InnerKey = array of Arr1InnerKey;
      Arr3InnerKey = array of Arr2InnerKey;
      InnerKey = class sealed external 'android.hardware.camera2' name 'Key' (JLObject)
      public
        function getName(): JLString; overload; virtual;
        function hashCode(): jint; overload; virtual; final;
        function equals(para1: JLObject): jboolean; overload; virtual; final;
      end;
  public
    final class var
      fBLACK_LEVEL_LOCK: AHCCaptureResult.InnerKey; external name 'BLACK_LEVEL_LOCK';
      fCOLOR_CORRECTION_ABERRATION_MODE: AHCCaptureResult.InnerKey; external name 'COLOR_CORRECTION_ABERRATION_MODE';
      fCOLOR_CORRECTION_GAINS: AHCCaptureResult.InnerKey; external name 'COLOR_CORRECTION_GAINS';
      fCOLOR_CORRECTION_MODE: AHCCaptureResult.InnerKey; external name 'COLOR_CORRECTION_MODE';
      fCOLOR_CORRECTION_TRANSFORM: AHCCaptureResult.InnerKey; external name 'COLOR_CORRECTION_TRANSFORM';
      fCONTROL_AE_ANTIBANDING_MODE: AHCCaptureResult.InnerKey; external name 'CONTROL_AE_ANTIBANDING_MODE';
      fCONTROL_AE_EXPOSURE_COMPENSATION: AHCCaptureResult.InnerKey; external name 'CONTROL_AE_EXPOSURE_COMPENSATION';
      fCONTROL_AE_LOCK: AHCCaptureResult.InnerKey; external name 'CONTROL_AE_LOCK';
      fCONTROL_AE_MODE: AHCCaptureResult.InnerKey; external name 'CONTROL_AE_MODE';
      fCONTROL_AE_PRECAPTURE_TRIGGER: AHCCaptureResult.InnerKey; external name 'CONTROL_AE_PRECAPTURE_TRIGGER';
      fCONTROL_AE_REGIONS: AHCCaptureResult.InnerKey; external name 'CONTROL_AE_REGIONS';
      fCONTROL_AE_STATE: AHCCaptureResult.InnerKey; external name 'CONTROL_AE_STATE';
      fCONTROL_AE_TARGET_FPS_RANGE: AHCCaptureResult.InnerKey; external name 'CONTROL_AE_TARGET_FPS_RANGE';
      fCONTROL_AF_MODE: AHCCaptureResult.InnerKey; external name 'CONTROL_AF_MODE';
      fCONTROL_AF_REGIONS: AHCCaptureResult.InnerKey; external name 'CONTROL_AF_REGIONS';
      fCONTROL_AF_STATE: AHCCaptureResult.InnerKey; external name 'CONTROL_AF_STATE';
      fCONTROL_AF_TRIGGER: AHCCaptureResult.InnerKey; external name 'CONTROL_AF_TRIGGER';
      fCONTROL_AWB_LOCK: AHCCaptureResult.InnerKey; external name 'CONTROL_AWB_LOCK';
      fCONTROL_AWB_MODE: AHCCaptureResult.InnerKey; external name 'CONTROL_AWB_MODE';
      fCONTROL_AWB_REGIONS: AHCCaptureResult.InnerKey; external name 'CONTROL_AWB_REGIONS';
      fCONTROL_AWB_STATE: AHCCaptureResult.InnerKey; external name 'CONTROL_AWB_STATE';
      fCONTROL_CAPTURE_INTENT: AHCCaptureResult.InnerKey; external name 'CONTROL_CAPTURE_INTENT';
      fCONTROL_EFFECT_MODE: AHCCaptureResult.InnerKey; external name 'CONTROL_EFFECT_MODE';
      fCONTROL_MODE: AHCCaptureResult.InnerKey; external name 'CONTROL_MODE';
      fCONTROL_SCENE_MODE: AHCCaptureResult.InnerKey; external name 'CONTROL_SCENE_MODE';
      fCONTROL_VIDEO_STABILIZATION_MODE: AHCCaptureResult.InnerKey; external name 'CONTROL_VIDEO_STABILIZATION_MODE';
      fEDGE_MODE: AHCCaptureResult.InnerKey; external name 'EDGE_MODE';
      fFLASH_MODE: AHCCaptureResult.InnerKey; external name 'FLASH_MODE';
      fFLASH_STATE: AHCCaptureResult.InnerKey; external name 'FLASH_STATE';
      fHOT_PIXEL_MODE: AHCCaptureResult.InnerKey; external name 'HOT_PIXEL_MODE';
      fJPEG_GPS_LOCATION: AHCCaptureResult.InnerKey; external name 'JPEG_GPS_LOCATION';
      fJPEG_ORIENTATION: AHCCaptureResult.InnerKey; external name 'JPEG_ORIENTATION';
      fJPEG_QUALITY: AHCCaptureResult.InnerKey; external name 'JPEG_QUALITY';
      fJPEG_THUMBNAIL_QUALITY: AHCCaptureResult.InnerKey; external name 'JPEG_THUMBNAIL_QUALITY';
      fJPEG_THUMBNAIL_SIZE: AHCCaptureResult.InnerKey; external name 'JPEG_THUMBNAIL_SIZE';
      fLENS_APERTURE: AHCCaptureResult.InnerKey; external name 'LENS_APERTURE';
      fLENS_FILTER_DENSITY: AHCCaptureResult.InnerKey; external name 'LENS_FILTER_DENSITY';
      fLENS_FOCAL_LENGTH: AHCCaptureResult.InnerKey; external name 'LENS_FOCAL_LENGTH';
      fLENS_FOCUS_DISTANCE: AHCCaptureResult.InnerKey; external name 'LENS_FOCUS_DISTANCE';
      fLENS_FOCUS_RANGE: AHCCaptureResult.InnerKey; external name 'LENS_FOCUS_RANGE';
      fLENS_OPTICAL_STABILIZATION_MODE: AHCCaptureResult.InnerKey; external name 'LENS_OPTICAL_STABILIZATION_MODE';
      fLENS_STATE: AHCCaptureResult.InnerKey; external name 'LENS_STATE';
      fNOISE_REDUCTION_MODE: AHCCaptureResult.InnerKey; external name 'NOISE_REDUCTION_MODE';
      fREQUEST_PIPELINE_DEPTH: AHCCaptureResult.InnerKey; external name 'REQUEST_PIPELINE_DEPTH';
      fSCALER_CROP_REGION: AHCCaptureResult.InnerKey; external name 'SCALER_CROP_REGION';
      fSENSOR_EXPOSURE_TIME: AHCCaptureResult.InnerKey; external name 'SENSOR_EXPOSURE_TIME';
      fSENSOR_FRAME_DURATION: AHCCaptureResult.InnerKey; external name 'SENSOR_FRAME_DURATION';
      fSENSOR_GREEN_SPLIT: AHCCaptureResult.InnerKey; external name 'SENSOR_GREEN_SPLIT';
      fSENSOR_NEUTRAL_COLOR_POINT: AHCCaptureResult.InnerKey; external name 'SENSOR_NEUTRAL_COLOR_POINT';
      fSENSOR_NOISE_PROFILE: AHCCaptureResult.InnerKey; external name 'SENSOR_NOISE_PROFILE';
      fSENSOR_ROLLING_SHUTTER_SKEW: AHCCaptureResult.InnerKey; external name 'SENSOR_ROLLING_SHUTTER_SKEW';
      fSENSOR_SENSITIVITY: AHCCaptureResult.InnerKey; external name 'SENSOR_SENSITIVITY';
      fSENSOR_TEST_PATTERN_DATA: AHCCaptureResult.InnerKey; external name 'SENSOR_TEST_PATTERN_DATA';
      fSENSOR_TEST_PATTERN_MODE: AHCCaptureResult.InnerKey; external name 'SENSOR_TEST_PATTERN_MODE';
      fSENSOR_TIMESTAMP: AHCCaptureResult.InnerKey; external name 'SENSOR_TIMESTAMP';
      fSHADING_MODE: AHCCaptureResult.InnerKey; external name 'SHADING_MODE';
      fSTATISTICS_FACES: AHCCaptureResult.InnerKey; external name 'STATISTICS_FACES';
      fSTATISTICS_FACE_DETECT_MODE: AHCCaptureResult.InnerKey; external name 'STATISTICS_FACE_DETECT_MODE';
      fSTATISTICS_HOT_PIXEL_MAP: AHCCaptureResult.InnerKey; external name 'STATISTICS_HOT_PIXEL_MAP';
      fSTATISTICS_HOT_PIXEL_MAP_MODE: AHCCaptureResult.InnerKey; external name 'STATISTICS_HOT_PIXEL_MAP_MODE';
      fSTATISTICS_LENS_SHADING_CORRECTION_MAP: AHCCaptureResult.InnerKey; external name 'STATISTICS_LENS_SHADING_CORRECTION_MAP';
      fSTATISTICS_LENS_SHADING_MAP_MODE: AHCCaptureResult.InnerKey; external name 'STATISTICS_LENS_SHADING_MAP_MODE';
      fSTATISTICS_SCENE_FLICKER: AHCCaptureResult.InnerKey; external name 'STATISTICS_SCENE_FLICKER';
      fTONEMAP_CURVE: AHCCaptureResult.InnerKey; external name 'TONEMAP_CURVE';
      fTONEMAP_MODE: AHCCaptureResult.InnerKey; external name 'TONEMAP_MODE';
  public
    function get(para1: AHCCaptureResult.InnerKey): JLObject; overload; virtual;
    function getKeys(): JUList; overload; virtual;
    function getRequest(): AHCCaptureRequest; overload; virtual;
    function getFrameNumber(): jlong; overload; virtual;
    function getSequenceId(): jint; overload; virtual;
  end;

  AMPMediaProjection = class sealed external 'android.media.projection' name 'MediaProjection' (JLObject)
  public
    type
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerCallback = class abstract external 'android.media.projection' name 'Callback' (JLObject)
      public
        constructor create(); overload;
        procedure onStop(); overload; virtual;
      end;
  public
    procedure registerCallback(para1: AMPMediaProjection.InnerCallback; para2: AOHandler); overload; virtual;
    procedure unregisterCallback(para1: AMPMediaProjection.InnerCallback); overload; virtual;
    function createVirtualDisplay(para1: JLString; para2: jint; para3: jint; para4: jint; para5: jint; para6: AVSurface; para7: AHDVirtualDisplay.InnerCallback; para8: AOHandler): AHDVirtualDisplay; overload; virtual;
    procedure stop(); overload; virtual;
  end;

  AAJJobInfo = class external 'android.app.job' name 'JobInfo' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.app.job' name 'Builder' (JLObject)
      public
        constructor create(para1: jint; para2: ACComponentName); overload;
        function setExtras(para1: AOPersistableBundle): AAJJobInfo.InnerBuilder; overload; virtual;
        function setRequiredNetworkType(para1: jint): AAJJobInfo.InnerBuilder; overload; virtual;
        function setRequiresCharging(para1: jboolean): AAJJobInfo.InnerBuilder; overload; virtual;
        function setRequiresDeviceIdle(para1: jboolean): AAJJobInfo.InnerBuilder; overload; virtual;
        function setPeriodic(para1: jlong): AAJJobInfo.InnerBuilder; overload; virtual;
        function setMinimumLatency(para1: jlong): AAJJobInfo.InnerBuilder; overload; virtual;
        function setOverrideDeadline(para1: jlong): AAJJobInfo.InnerBuilder; overload; virtual;
        function setBackoffCriteria(para1: jlong; para2: jint): AAJJobInfo.InnerBuilder; overload; virtual;
        function setPersisted(para1: jboolean): AAJJobInfo.InnerBuilder; overload; virtual;
        function build(): AAJJobInfo; overload; virtual;
      end;
  public
    const
      BACKOFF_POLICY_EXPONENTIAL = 1;
      BACKOFF_POLICY_LINEAR = 0;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      DEFAULT_INITIAL_BACKOFF_MILLIS = jlong(30000);
      MAX_BACKOFF_DELAY_MILLIS = jlong(18000000);
      NETWORK_TYPE_ANY = 1;
      NETWORK_TYPE_NONE = 0;
      NETWORK_TYPE_UNMETERED = 2;
  public
    function getId(): jint; overload; virtual;
    function getExtras(): AOPersistableBundle; overload; virtual;
    function getService(): ACComponentName; overload; virtual;
    function isRequireCharging(): jboolean; overload; virtual;
    function isRequireDeviceIdle(): jboolean; overload; virtual;
    function getNetworkType(): jint; overload; virtual;
    function getMinLatencyMillis(): jlong; overload; virtual;
    function getMaxExecutionDelayMillis(): jlong; overload; virtual;
    function isPeriodic(): jboolean; overload; virtual;
    function isPersisted(): jboolean; overload; virtual;
    function getIntervalMillis(): jlong; overload; virtual;
    function getInitialBackoffMillis(): jlong; overload; virtual;
    function getBackoffPolicy(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AAJJobParameters = class external 'android.app.job' name 'JobParameters' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getJobId(): jint; overload; virtual;
    function getExtras(): AOPersistableBundle; overload; virtual;
    function isOverrideDeadlineExpired(): jboolean; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AAUConfigurationStats = class sealed external 'android.app.usage' name 'ConfigurationStats' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: AAUConfigurationStats); overload;
    function getConfiguration(): ACRConfiguration; overload; virtual;
    function getFirstTimeStamp(): jlong; overload; virtual;
    function getLastTimeStamp(): jlong; overload; virtual;
    function getLastTimeActive(): jlong; overload; virtual;
    function getTotalTimeActive(): jlong; overload; virtual;
    function getActivationCount(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AAUUsageEvents = class sealed external 'android.app.usage' name 'UsageEvents' (JLObject, AOParcelable)
  public
    type
      InnerEvent = class;
      Arr1InnerEvent = array of InnerEvent;
      Arr2InnerEvent = array of Arr1InnerEvent;
      Arr3InnerEvent = array of Arr2InnerEvent;
      InnerEvent = class sealed external 'android.app.usage' name 'Event' (JLObject)
      public
        const
          CONFIGURATION_CHANGE = 5;
          MOVE_TO_BACKGROUND = 2;
          MOVE_TO_FOREGROUND = 1;
          NONE = 0;
      public
        constructor create(); overload;
        function getPackageName(): JLString; overload; virtual;
        function getClassName(): JLString; overload; virtual;
        function getTimeStamp(): jlong; overload; virtual;
        function getEventType(): jint; overload; virtual;
        function getConfiguration(): ACRConfiguration; overload; virtual;
      end;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function hasNextEvent(): jboolean; overload; virtual;
    function getNextEvent(para1: AAUUsageEvents.InnerEvent): jboolean; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AAUUsageStats = class sealed external 'android.app.usage' name 'UsageStats' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: AAUUsageStats); overload;
    function getPackageName(): JLString; overload; virtual;
    function getFirstTimeStamp(): jlong; overload; virtual;
    function getLastTimeStamp(): jlong; overload; virtual;
    function getLastTimeUsed(): jlong; overload; virtual;
    function getTotalTimeInForeground(): jlong; overload; virtual;
    procedure add(para1: AAUUsageStats); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ABLAdvertiseData = class sealed external 'android.bluetooth.le' name 'AdvertiseData' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.bluetooth.le' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function addServiceUuid(para1: AOParcelUuid): ABLAdvertiseData.InnerBuilder; overload; virtual;
        function addServiceData(para1: AOParcelUuid; para2: Arr1jbyte): ABLAdvertiseData.InnerBuilder; overload; virtual;
        function addServiceData(para1: AOParcelUuid; var para2: array of jbyte): ABLAdvertiseData.InnerBuilder; overload; virtual;
        function addManufacturerData(para1: jint; para2: Arr1jbyte): ABLAdvertiseData.InnerBuilder; overload; virtual;
        function addManufacturerData(para1: jint; var para2: array of jbyte): ABLAdvertiseData.InnerBuilder; overload; virtual;
        function setIncludeTxPowerLevel(para1: jboolean): ABLAdvertiseData.InnerBuilder; overload; virtual;
        function setIncludeDeviceName(para1: jboolean): ABLAdvertiseData.InnerBuilder; overload; virtual;
        function build(): ABLAdvertiseData; overload; virtual;
      end;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getServiceUuids(): JUList; overload; virtual;
    function getManufacturerSpecificData(): AUSparseArray; overload; virtual;
    function getServiceData(): JUMap; overload; virtual;
    function getIncludeTxPowerLevel(): jboolean; overload; virtual;
    function getIncludeDeviceName(): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ABLAdvertiseSettings = class sealed external 'android.bluetooth.le' name 'AdvertiseSettings' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.bluetooth.le' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function setAdvertiseMode(para1: jint): ABLAdvertiseSettings.InnerBuilder; overload; virtual;
        function setTxPowerLevel(para1: jint): ABLAdvertiseSettings.InnerBuilder; overload; virtual;
        function setConnectable(para1: jboolean): ABLAdvertiseSettings.InnerBuilder; overload; virtual;
        function setTimeout(para1: jint): ABLAdvertiseSettings.InnerBuilder; overload; virtual;
        function build(): ABLAdvertiseSettings; overload; virtual;
      end;
  public
    const
      ADVERTISE_MODE_BALANCED = 1;
      ADVERTISE_MODE_LOW_LATENCY = 2;
      ADVERTISE_MODE_LOW_POWER = 0;
      ADVERTISE_TX_POWER_HIGH = 3;
      ADVERTISE_TX_POWER_LOW = 1;
      ADVERTISE_TX_POWER_MEDIUM = 2;
      ADVERTISE_TX_POWER_ULTRA_LOW = 0;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getMode(): jint; overload; virtual;
    function getTxPowerLevel(): jint; overload; virtual;
    function isConnectable(): jboolean; overload; virtual;
    function getTimeout(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ABLScanFilter = class sealed external 'android.bluetooth.le' name 'ScanFilter' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.bluetooth.le' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function setDeviceName(para1: JLString): ABLScanFilter.InnerBuilder; overload; virtual;
        function setDeviceAddress(para1: JLString): ABLScanFilter.InnerBuilder; overload; virtual;
        function setServiceUuid(para1: AOParcelUuid): ABLScanFilter.InnerBuilder; overload; virtual;
        function setServiceUuid(para1: AOParcelUuid; para2: AOParcelUuid): ABLScanFilter.InnerBuilder; overload; virtual;
        function setServiceData(para1: AOParcelUuid; para2: Arr1jbyte): ABLScanFilter.InnerBuilder; overload; virtual;
        function setServiceData(para1: AOParcelUuid; var para2: array of jbyte): ABLScanFilter.InnerBuilder; overload; virtual;
        function setServiceData(para1: AOParcelUuid; para2: Arr1jbyte; para3: Arr1jbyte): ABLScanFilter.InnerBuilder; overload; virtual;
        function setServiceData(para1: AOParcelUuid; var para2: array of jbyte; var para3: array of jbyte): ABLScanFilter.InnerBuilder; overload; virtual;
        function setManufacturerData(para1: jint; para2: Arr1jbyte): ABLScanFilter.InnerBuilder; overload; virtual;
        function setManufacturerData(para1: jint; var para2: array of jbyte): ABLScanFilter.InnerBuilder; overload; virtual;
        function setManufacturerData(para1: jint; para2: Arr1jbyte; para3: Arr1jbyte): ABLScanFilter.InnerBuilder; overload; virtual;
        function setManufacturerData(para1: jint; var para2: array of jbyte; var para3: array of jbyte): ABLScanFilter.InnerBuilder; overload; virtual;
        function build(): ABLScanFilter; overload; virtual;
      end;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getDeviceName(): JLString; overload; virtual;
    function getServiceUuid(): AOParcelUuid; overload; virtual;
    function getServiceUuidMask(): AOParcelUuid; overload; virtual;
    function getDeviceAddress(): JLString; overload; virtual;
    function getServiceData(): Arr1jbyte; overload; virtual;
    function getServiceDataMask(): Arr1jbyte; overload; virtual;
    function getServiceDataUuid(): AOParcelUuid; overload; virtual;
    function getManufacturerId(): jint; overload; virtual;
    function getManufacturerData(): Arr1jbyte; overload; virtual;
    function getManufacturerDataMask(): Arr1jbyte; overload; virtual;
    function matches(para1: ABLScanResult): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  ABLScanResult = class sealed external 'android.bluetooth.le' name 'ScanResult' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    constructor create(para1: ABBluetoothDevice; para2: ABLScanRecord; para3: jint; para4: jlong); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function getDevice(): ABBluetoothDevice; overload; virtual;
    function getScanRecord(): ABLScanRecord; overload; virtual;
    function getRssi(): jint; overload; virtual;
    function getTimestampNanos(): jlong; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ABLScanSettings = class sealed external 'android.bluetooth.le' name 'ScanSettings' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.bluetooth.le' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function setScanMode(para1: jint): ABLScanSettings.InnerBuilder; overload; virtual;
        function setReportDelay(para1: jlong): ABLScanSettings.InnerBuilder; overload; virtual;
        function build(): ABLScanSettings; overload; virtual;
      end;
  public
    const
      CALLBACK_TYPE_ALL_MATCHES = 1;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      SCAN_MODE_BALANCED = 1;
      SCAN_MODE_LOW_LATENCY = 2;
      SCAN_MODE_LOW_POWER = 0;
  public
    function getScanMode(): jint; overload; virtual;
    function getCallbackType(): jint; overload; virtual;
    function getScanResultType(): jint; overload; virtual;
    function getReportDelayMillis(): jlong; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  ACPFeatureGroupInfo = class sealed external 'android.content.pm' name 'FeatureGroupInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    var
      ffeatures: Arr1ACPFeatureInfo; external name 'features';
  public
    constructor create(); overload;
    constructor create(para1: ACPFeatureGroupInfo); overload;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AHCCaptureRequest = class sealed external 'android.hardware.camera2' name 'CaptureRequest' (AHCCameraMetadata, AOParcelable)
  public
    type
      InnerKey = class;
      Arr1InnerKey = array of InnerKey;
      Arr2InnerKey = array of Arr1InnerKey;
      Arr3InnerKey = array of Arr2InnerKey;
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerKey = class sealed external 'android.hardware.camera2' name 'Key' (JLObject)
      public
        function getName(): JLString; overload; virtual;
        function hashCode(): jint; overload; virtual; final;
        function equals(para1: JLObject): jboolean; overload; virtual; final;
      end;
      InnerBuilder = class sealed external 'android.hardware.camera2' name 'Builder' (JLObject)
      public
        procedure addTarget(para1: AVSurface); overload; virtual;
        procedure removeTarget(para1: AVSurface); overload; virtual;
        procedure &set(para1: AHCCaptureRequest.InnerKey; para2: JLObject); overload; virtual;
        function get(para1: AHCCaptureRequest.InnerKey): JLObject; overload; virtual;
        procedure setTag(para1: JLObject); overload; virtual;
        function build(): AHCCaptureRequest; overload; virtual;
      end;
  public
    final class var
      fBLACK_LEVEL_LOCK: AHCCaptureRequest.InnerKey; external name 'BLACK_LEVEL_LOCK';
      fCOLOR_CORRECTION_ABERRATION_MODE: AHCCaptureRequest.InnerKey; external name 'COLOR_CORRECTION_ABERRATION_MODE';
      fCOLOR_CORRECTION_GAINS: AHCCaptureRequest.InnerKey; external name 'COLOR_CORRECTION_GAINS';
      fCOLOR_CORRECTION_MODE: AHCCaptureRequest.InnerKey; external name 'COLOR_CORRECTION_MODE';
      fCOLOR_CORRECTION_TRANSFORM: AHCCaptureRequest.InnerKey; external name 'COLOR_CORRECTION_TRANSFORM';
      fCONTROL_AE_ANTIBANDING_MODE: AHCCaptureRequest.InnerKey; external name 'CONTROL_AE_ANTIBANDING_MODE';
      fCONTROL_AE_EXPOSURE_COMPENSATION: AHCCaptureRequest.InnerKey; external name 'CONTROL_AE_EXPOSURE_COMPENSATION';
      fCONTROL_AE_LOCK: AHCCaptureRequest.InnerKey; external name 'CONTROL_AE_LOCK';
      fCONTROL_AE_MODE: AHCCaptureRequest.InnerKey; external name 'CONTROL_AE_MODE';
      fCONTROL_AE_PRECAPTURE_TRIGGER: AHCCaptureRequest.InnerKey; external name 'CONTROL_AE_PRECAPTURE_TRIGGER';
      fCONTROL_AE_REGIONS: AHCCaptureRequest.InnerKey; external name 'CONTROL_AE_REGIONS';
      fCONTROL_AE_TARGET_FPS_RANGE: AHCCaptureRequest.InnerKey; external name 'CONTROL_AE_TARGET_FPS_RANGE';
      fCONTROL_AF_MODE: AHCCaptureRequest.InnerKey; external name 'CONTROL_AF_MODE';
      fCONTROL_AF_REGIONS: AHCCaptureRequest.InnerKey; external name 'CONTROL_AF_REGIONS';
      fCONTROL_AF_TRIGGER: AHCCaptureRequest.InnerKey; external name 'CONTROL_AF_TRIGGER';
      fCONTROL_AWB_LOCK: AHCCaptureRequest.InnerKey; external name 'CONTROL_AWB_LOCK';
      fCONTROL_AWB_MODE: AHCCaptureRequest.InnerKey; external name 'CONTROL_AWB_MODE';
      fCONTROL_AWB_REGIONS: AHCCaptureRequest.InnerKey; external name 'CONTROL_AWB_REGIONS';
      fCONTROL_CAPTURE_INTENT: AHCCaptureRequest.InnerKey; external name 'CONTROL_CAPTURE_INTENT';
      fCONTROL_EFFECT_MODE: AHCCaptureRequest.InnerKey; external name 'CONTROL_EFFECT_MODE';
      fCONTROL_MODE: AHCCaptureRequest.InnerKey; external name 'CONTROL_MODE';
      fCONTROL_SCENE_MODE: AHCCaptureRequest.InnerKey; external name 'CONTROL_SCENE_MODE';
      fCONTROL_VIDEO_STABILIZATION_MODE: AHCCaptureRequest.InnerKey; external name 'CONTROL_VIDEO_STABILIZATION_MODE';
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      fEDGE_MODE: AHCCaptureRequest.InnerKey; external name 'EDGE_MODE';
      fFLASH_MODE: AHCCaptureRequest.InnerKey; external name 'FLASH_MODE';
      fHOT_PIXEL_MODE: AHCCaptureRequest.InnerKey; external name 'HOT_PIXEL_MODE';
      fJPEG_GPS_LOCATION: AHCCaptureRequest.InnerKey; external name 'JPEG_GPS_LOCATION';
      fJPEG_ORIENTATION: AHCCaptureRequest.InnerKey; external name 'JPEG_ORIENTATION';
      fJPEG_QUALITY: AHCCaptureRequest.InnerKey; external name 'JPEG_QUALITY';
      fJPEG_THUMBNAIL_QUALITY: AHCCaptureRequest.InnerKey; external name 'JPEG_THUMBNAIL_QUALITY';
      fJPEG_THUMBNAIL_SIZE: AHCCaptureRequest.InnerKey; external name 'JPEG_THUMBNAIL_SIZE';
      fLENS_APERTURE: AHCCaptureRequest.InnerKey; external name 'LENS_APERTURE';
      fLENS_FILTER_DENSITY: AHCCaptureRequest.InnerKey; external name 'LENS_FILTER_DENSITY';
      fLENS_FOCAL_LENGTH: AHCCaptureRequest.InnerKey; external name 'LENS_FOCAL_LENGTH';
      fLENS_FOCUS_DISTANCE: AHCCaptureRequest.InnerKey; external name 'LENS_FOCUS_DISTANCE';
      fLENS_OPTICAL_STABILIZATION_MODE: AHCCaptureRequest.InnerKey; external name 'LENS_OPTICAL_STABILIZATION_MODE';
      fNOISE_REDUCTION_MODE: AHCCaptureRequest.InnerKey; external name 'NOISE_REDUCTION_MODE';
      fSCALER_CROP_REGION: AHCCaptureRequest.InnerKey; external name 'SCALER_CROP_REGION';
      fSENSOR_EXPOSURE_TIME: AHCCaptureRequest.InnerKey; external name 'SENSOR_EXPOSURE_TIME';
      fSENSOR_FRAME_DURATION: AHCCaptureRequest.InnerKey; external name 'SENSOR_FRAME_DURATION';
      fSENSOR_SENSITIVITY: AHCCaptureRequest.InnerKey; external name 'SENSOR_SENSITIVITY';
      fSENSOR_TEST_PATTERN_DATA: AHCCaptureRequest.InnerKey; external name 'SENSOR_TEST_PATTERN_DATA';
      fSENSOR_TEST_PATTERN_MODE: AHCCaptureRequest.InnerKey; external name 'SENSOR_TEST_PATTERN_MODE';
      fSHADING_MODE: AHCCaptureRequest.InnerKey; external name 'SHADING_MODE';
      fSTATISTICS_FACE_DETECT_MODE: AHCCaptureRequest.InnerKey; external name 'STATISTICS_FACE_DETECT_MODE';
      fSTATISTICS_HOT_PIXEL_MAP_MODE: AHCCaptureRequest.InnerKey; external name 'STATISTICS_HOT_PIXEL_MAP_MODE';
      fSTATISTICS_LENS_SHADING_MAP_MODE: AHCCaptureRequest.InnerKey; external name 'STATISTICS_LENS_SHADING_MAP_MODE';
      fTONEMAP_CURVE: AHCCaptureRequest.InnerKey; external name 'TONEMAP_CURVE';
      fTONEMAP_MODE: AHCCaptureRequest.InnerKey; external name 'TONEMAP_MODE';
  public
    function get(para1: AHCCaptureRequest.InnerKey): JLObject; overload; virtual;
    function getKeys(): JUList; overload; virtual;
    function getTag(): JLObject; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AHUUsbConfiguration = class external 'android.hardware.usb' name 'UsbConfiguration' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getId(): jint; overload; virtual;
    function getName(): JLString; overload; virtual;
    function isSelfPowered(): jboolean; overload; virtual;
    function isRemoteWakeup(): jboolean; overload; virtual;
    function getMaxPower(): jint; overload; virtual;
    function getInterfaceCount(): jint; overload; virtual;
    function getInterface(para1: jint): AHUUsbInterface; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AMAudioAttributes = class sealed external 'android.media' name 'AudioAttributes' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.media' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        constructor create(para1: AMAudioAttributes); overload;
        function build(): AMAudioAttributes; overload; virtual;
        function setUsage(para1: jint): AMAudioAttributes.InnerBuilder; overload; virtual;
        function setContentType(para1: jint): AMAudioAttributes.InnerBuilder; overload; virtual;
        function setFlags(para1: jint): AMAudioAttributes.InnerBuilder; overload; virtual;
        function setLegacyStreamType(para1: jint): AMAudioAttributes.InnerBuilder; overload; virtual;
      end;
  public
    const
      CONTENT_TYPE_MOVIE = 3;
      CONTENT_TYPE_MUSIC = 2;
      CONTENT_TYPE_SONIFICATION = 4;
      CONTENT_TYPE_SPEECH = 1;
      CONTENT_TYPE_UNKNOWN = 0;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_AUDIBILITY_ENFORCED = 1;
      FLAG_HW_AV_SYNC = 16;
      USAGE_ALARM = 4;
      USAGE_ASSISTANCE_ACCESSIBILITY = 11;
      USAGE_ASSISTANCE_NAVIGATION_GUIDANCE = 12;
      USAGE_ASSISTANCE_SONIFICATION = 13;
      USAGE_GAME = 14;
      USAGE_MEDIA = 1;
      USAGE_NOTIFICATION = 5;
      USAGE_NOTIFICATION_COMMUNICATION_DELAYED = 9;
      USAGE_NOTIFICATION_COMMUNICATION_INSTANT = 8;
      USAGE_NOTIFICATION_COMMUNICATION_REQUEST = 7;
      USAGE_NOTIFICATION_EVENT = 10;
      USAGE_NOTIFICATION_RINGTONE = 6;
      USAGE_UNKNOWN = 0;
      USAGE_VOICE_COMMUNICATION = 2;
      USAGE_VOICE_COMMUNICATION_SIGNALLING = 3;
  public
    function getContentType(): jint; overload; virtual;
    function getUsage(): jint; overload; virtual;
    function getFlags(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AMMediaDescription = class external 'android.media' name 'MediaDescription' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.media' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function setMediaId(para1: JLString): AMMediaDescription.InnerBuilder; overload; virtual;
        function setTitle(para1: JLCharSequence): AMMediaDescription.InnerBuilder; overload; virtual;
        function setSubtitle(para1: JLCharSequence): AMMediaDescription.InnerBuilder; overload; virtual;
        function setDescription(para1: JLCharSequence): AMMediaDescription.InnerBuilder; overload; virtual;
        function setIconBitmap(para1: AGBitmap): AMMediaDescription.InnerBuilder; overload; virtual;
        function setIconUri(para1: ANUri): AMMediaDescription.InnerBuilder; overload; virtual;
        function setExtras(para1: AOBundle): AMMediaDescription.InnerBuilder; overload; virtual;
        function build(): AMMediaDescription; overload; virtual;
      end;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getMediaId(): JLString; overload; virtual;
    function getTitle(): JLCharSequence; overload; virtual;
    function getSubtitle(): JLCharSequence; overload; virtual;
    function getDescription(): JLCharSequence; overload; virtual;
    function getIconBitmap(): AGBitmap; overload; virtual;
    function getIconUri(): ANUri; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AMMediaMetadata = class sealed external 'android.media' name 'MediaMetadata' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.media' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        constructor create(para1: AMMediaMetadata); overload;
        function putText(para1: JLString; para2: JLCharSequence): AMMediaMetadata.InnerBuilder; overload; virtual;
        function putString(para1: JLString; para2: JLString): AMMediaMetadata.InnerBuilder; overload; virtual;
        function putLong(para1: JLString; para2: jlong): AMMediaMetadata.InnerBuilder; overload; virtual;
        function putRating(para1: JLString; para2: AMRating): AMMediaMetadata.InnerBuilder; overload; virtual;
        function putBitmap(para1: JLString; para2: AGBitmap): AMMediaMetadata.InnerBuilder; overload; virtual;
        function build(): AMMediaMetadata; overload; virtual;
      end;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      METADATA_KEY_ALBUM = 'android.media.metadata.ALBUM';
      METADATA_KEY_ALBUM_ART = 'android.media.metadata.ALBUM_ART';
      METADATA_KEY_ALBUM_ARTIST = 'android.media.metadata.ALBUM_ARTIST';
      METADATA_KEY_ALBUM_ART_URI = 'android.media.metadata.ALBUM_ART_URI';
      METADATA_KEY_ART = 'android.media.metadata.ART';
      METADATA_KEY_ARTIST = 'android.media.metadata.ARTIST';
      METADATA_KEY_ART_URI = 'android.media.metadata.ART_URI';
      METADATA_KEY_AUTHOR = 'android.media.metadata.AUTHOR';
      METADATA_KEY_COMPILATION = 'android.media.metadata.COMPILATION';
      METADATA_KEY_COMPOSER = 'android.media.metadata.COMPOSER';
      METADATA_KEY_DATE = 'android.media.metadata.DATE';
      METADATA_KEY_DISC_NUMBER = 'android.media.metadata.DISC_NUMBER';
      METADATA_KEY_DISPLAY_DESCRIPTION = 'android.media.metadata.DISPLAY_DESCRIPTION';
      METADATA_KEY_DISPLAY_ICON = 'android.media.metadata.DISPLAY_ICON';
      METADATA_KEY_DISPLAY_ICON_URI = 'android.media.metadata.DISPLAY_ICON_URI';
      METADATA_KEY_DISPLAY_SUBTITLE = 'android.media.metadata.DISPLAY_SUBTITLE';
      METADATA_KEY_DISPLAY_TITLE = 'android.media.metadata.DISPLAY_TITLE';
      METADATA_KEY_DURATION = 'android.media.metadata.DURATION';
      METADATA_KEY_GENRE = 'android.media.metadata.GENRE';
      METADATA_KEY_MEDIA_ID = 'android.media.metadata.MEDIA_ID';
      METADATA_KEY_NUM_TRACKS = 'android.media.metadata.NUM_TRACKS';
      METADATA_KEY_RATING = 'android.media.metadata.RATING';
      METADATA_KEY_TITLE = 'android.media.metadata.TITLE';
      METADATA_KEY_TRACK_NUMBER = 'android.media.metadata.TRACK_NUMBER';
      METADATA_KEY_USER_RATING = 'android.media.metadata.USER_RATING';
      METADATA_KEY_WRITER = 'android.media.metadata.WRITER';
      METADATA_KEY_YEAR = 'android.media.metadata.YEAR';
  public
    function containsKey(para1: JLString): jboolean; overload; virtual;
    function getText(para1: JLString): JLCharSequence; overload; virtual;
    function getString(para1: JLString): JLString; overload; virtual;
    function getLong(para1: JLString): jlong; overload; virtual;
    function getRating(para1: JLString): AMRating; overload; virtual;
    function getBitmap(para1: JLString): AGBitmap; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function size(): jint; overload; virtual;
    function keySet(): JUSet; overload; virtual;
    function getDescription(): AMMediaDescription; overload; virtual;
  end;

  AMSPlaybackState = class sealed external 'android.media.session' name 'PlaybackState' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerCustomAction = class;
      Arr1InnerCustomAction = array of InnerCustomAction;
      Arr2InnerCustomAction = array of Arr1InnerCustomAction;
      Arr3InnerCustomAction = array of Arr2InnerCustomAction;
      InnerBuilder = class sealed external 'android.media.session' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        constructor create(para1: AMSPlaybackState); overload;
        function setState(para1: jint; para2: jlong; para3: jfloat; para4: jlong): AMSPlaybackState.InnerBuilder; overload; virtual;
        function setState(para1: jint; para2: jlong; para3: jfloat): AMSPlaybackState.InnerBuilder; overload; virtual;
        function setActions(para1: jlong): AMSPlaybackState.InnerBuilder; overload; virtual;
        function addCustomAction(para1: JLString; para2: JLString; para3: jint): AMSPlaybackState.InnerBuilder; overload; virtual;
        function addCustomAction(para1: AMSPlaybackState.InnerCustomAction): AMSPlaybackState.InnerBuilder; overload; virtual;
        function setBufferedPosition(para1: jlong): AMSPlaybackState.InnerBuilder; overload; virtual;
        function setActiveQueueItemId(para1: jlong): AMSPlaybackState.InnerBuilder; overload; virtual;
        function setErrorMessage(para1: JLCharSequence): AMSPlaybackState.InnerBuilder; overload; virtual;
        function build(): AMSPlaybackState; overload; virtual;
      end;
      InnerCustomAction = class sealed external 'android.media.session' name 'CustomAction' (JLObject, AOParcelable)
      public
        type
          InnerBuilder = class;
          Arr1InnerBuilder = array of InnerBuilder;
          Arr2InnerBuilder = array of Arr1InnerBuilder;
          Arr3InnerBuilder = array of Arr2InnerBuilder;
          InnerBuilder = class sealed external 'android.media.session' name 'Builder' (JLObject)
          public
            constructor create(para1: JLString; para2: JLCharSequence; para3: jint); overload;
            function setExtras(para1: AOBundle): AMSPlaybackState.InnerCustomAction.InnerBuilder; overload; virtual;
            function build(): AMSPlaybackState.InnerCustomAction; overload; virtual;
          end;
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function describeContents(): jint; overload; virtual;
        function getAction(): JLString; overload; virtual;
        function getName(): JLCharSequence; overload; virtual;
        function getIcon(): jint; overload; virtual;
        function getExtras(): AOBundle; overload; virtual;
        function toString(): JLString; overload; virtual;
      end;
  public
    const
      ACTION_FAST_FORWARD = jlong(64);
      ACTION_PAUSE = jlong(2);
      ACTION_PLAY = jlong(4);
      ACTION_PLAY_FROM_MEDIA_ID = jlong(1024);
      ACTION_PLAY_FROM_SEARCH = jlong(2048);
      ACTION_PLAY_PAUSE = jlong(512);
      ACTION_REWIND = jlong(8);
      ACTION_SEEK_TO = jlong(256);
      ACTION_SET_RATING = jlong(128);
      ACTION_SKIP_TO_NEXT = jlong(32);
      ACTION_SKIP_TO_PREVIOUS = jlong(16);
      ACTION_SKIP_TO_QUEUE_ITEM = jlong(4096);
      ACTION_STOP = jlong(1);
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      PLAYBACK_POSITION_UNKNOWN = jlong(-1);
      STATE_BUFFERING = 6;
      STATE_CONNECTING = 8;
      STATE_ERROR = 7;
      STATE_FAST_FORWARDING = 4;
      STATE_NONE = 0;
      STATE_PAUSED = 2;
      STATE_PLAYING = 3;
      STATE_REWINDING = 5;
      STATE_SKIPPING_TO_NEXT = 10;
      STATE_SKIPPING_TO_PREVIOUS = 9;
      STATE_SKIPPING_TO_QUEUE_ITEM = 11;
      STATE_STOPPED = 1;
  public
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getState(): jint; overload; virtual;
    function getPosition(): jlong; overload; virtual;
    function getBufferedPosition(): jlong; overload; virtual;
    function getPlaybackSpeed(): jfloat; overload; virtual;
    function getActions(): jlong; overload; virtual;
    function getCustomActions(): JUList; overload; virtual;
    function getErrorMessage(): JLCharSequence; overload; virtual;
    function getLastPositionUpdateTime(): jlong; overload; virtual;
    function getActiveQueueItemId(): jlong; overload; virtual;
  end;

  AMTTvInputInfo = class sealed external 'android.media.tv' name 'TvInputInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      EXTRA_INPUT_ID = 'android.media.tv.extra.INPUT_ID';
      TYPE_COMPONENT = 1004;
      TYPE_COMPOSITE = 1001;
      TYPE_DISPLAY_PORT = 1008;
      TYPE_DVI = 1006;
      TYPE_HDMI = 1007;
      TYPE_OTHER = 1000;
      TYPE_SCART = 1003;
      TYPE_SVIDEO = 1002;
      TYPE_TUNER = 0;
      TYPE_VGA = 1005;
  public
    function getId(): JLString; overload; virtual;
    function getParentId(): JLString; overload; virtual;
    function getServiceInfo(): ACPServiceInfo; overload; virtual;
    function createSetupIntent(): ACIntent; overload; virtual;
    function createSettingsIntent(): ACIntent; overload; virtual;
    function getType(): jint; overload; virtual;
    function isPassthroughInput(): jboolean; overload; virtual;
    function loadLabel(para1: ACContext): JLCharSequence; overload; virtual;
    function loadIcon(para1: ACContext): AGDDrawable; overload; virtual;
    function describeContents(): jint; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AMTTvTrackInfo = class sealed external 'android.media.tv' name 'TvTrackInfo' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.media.tv' name 'Builder' (JLObject)
      public
        constructor create(para1: jint; para2: JLString); overload;
        function setLanguage(para1: JLString): AMTTvTrackInfo.InnerBuilder; overload; virtual; final;
        function setAudioChannelCount(para1: jint): AMTTvTrackInfo.InnerBuilder; overload; virtual; final;
        function setAudioSampleRate(para1: jint): AMTTvTrackInfo.InnerBuilder; overload; virtual; final;
        function setVideoWidth(para1: jint): AMTTvTrackInfo.InnerBuilder; overload; virtual; final;
        function setVideoHeight(para1: jint): AMTTvTrackInfo.InnerBuilder; overload; virtual; final;
        function setVideoFrameRate(para1: jfloat): AMTTvTrackInfo.InnerBuilder; overload; virtual; final;
        function setExtra(para1: AOBundle): AMTTvTrackInfo.InnerBuilder; overload; virtual; final;
        function build(): AMTTvTrackInfo; overload; virtual;
      end;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      TYPE_AUDIO = 0;
      TYPE_SUBTITLE = 2;
      TYPE_VIDEO = 1;
  public
    function getType(): jint; overload; virtual; final;
    function getId(): JLString; overload; virtual; final;
    function getLanguage(): JLString; overload; virtual; final;
    function getAudioChannelCount(): jint; overload; virtual; final;
    function getAudioSampleRate(): jint; overload; virtual; final;
    function getVideoWidth(): jint; overload; virtual; final;
    function getVideoHeight(): jint; overload; virtual; final;
    function getVideoFrameRate(): jfloat; overload; virtual; final;
    function getExtra(): AOBundle; overload; virtual; final;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANIpPrefix = class sealed external 'android.net' name 'IpPrefix' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function getAddress(): JNInetAddress; overload; virtual;
    function getRawAddress(): Arr1jbyte; overload; virtual;
    function getPrefixLength(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANLinkAddress = class external 'android.net' name 'LinkAddress' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function getAddress(): JNInetAddress; overload; virtual;
    function getPrefixLength(): jint; overload; virtual;
    function getFlags(): jint; overload; virtual;
    function getScope(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANLinkProperties = class sealed external 'android.net' name 'LinkProperties' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getInterfaceName(): JLString; overload; virtual;
    function getLinkAddresses(): JUList; overload; virtual;
    function getDnsServers(): JUList; overload; virtual;
    function getDomains(): JLString; overload; virtual;
    function getRoutes(): JUList; overload; virtual;
    function getHttpProxy(): ANProxyInfo; overload; virtual;
    function describeContents(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANNetwork = class external 'android.net' name 'Network' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getAllByName(para1: JLString): Arr1JNInetAddress; overload; virtual;  // throws java.net.UnknownHostException
    function getByName(para1: JLString): JNInetAddress; overload; virtual;  // throws java.net.UnknownHostException
    function getSocketFactory(): JNSocketFactory; overload; virtual;
    function openConnection(para1: JNURL): JNURLConnection; overload; virtual;  // throws java.io.IOException
    procedure bindSocket(para1: JNSocket); overload; virtual;  // throws java.io.IOException
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ANNetworkCapabilities = class sealed external 'android.net' name 'NetworkCapabilities' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      NET_CAPABILITY_CBS = 5;
      NET_CAPABILITY_DUN = 2;
      NET_CAPABILITY_EIMS = 10;
      NET_CAPABILITY_FOTA = 3;
      NET_CAPABILITY_IA = 7;
      NET_CAPABILITY_IMS = 4;
      NET_CAPABILITY_INTERNET = 12;
      NET_CAPABILITY_MMS = 0;
      NET_CAPABILITY_NOT_METERED = 11;
      NET_CAPABILITY_NOT_RESTRICTED = 13;
      NET_CAPABILITY_NOT_VPN = 15;
      NET_CAPABILITY_RCS = 8;
      NET_CAPABILITY_SUPL = 1;
      NET_CAPABILITY_TRUSTED = 14;
      NET_CAPABILITY_WIFI_P2P = 6;
      NET_CAPABILITY_XCAP = 9;
      TRANSPORT_BLUETOOTH = 2;
      TRANSPORT_CELLULAR = 0;
      TRANSPORT_ETHERNET = 3;
      TRANSPORT_VPN = 4;
      TRANSPORT_WIFI = 1;
  public
    constructor create(para1: ANNetworkCapabilities); overload;
    function hasCapability(para1: jint): jboolean; overload; virtual;
    function hasTransport(para1: jint): jboolean; overload; virtual;
    function getLinkUpstreamBandwidthKbps(): jint; overload; virtual;
    function getLinkDownstreamBandwidthKbps(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ANNetworkRequest = class external 'android.net' name 'NetworkRequest' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class external 'android.net' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function build(): ANNetworkRequest; overload; virtual;
        function addCapability(para1: jint): ANNetworkRequest.InnerBuilder; overload; virtual;
        function removeCapability(para1: jint): ANNetworkRequest.InnerBuilder; overload; virtual;
        function addTransportType(para1: jint): ANNetworkRequest.InnerBuilder; overload; virtual;
        function removeTransportType(para1: jint): ANNetworkRequest.InnerBuilder; overload; virtual;
        function setNetworkSpecifier(para1: JLString): ANNetworkRequest.InnerBuilder; overload; virtual;
      end;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
  end;

  ANProxyInfo = class external 'android.net' name 'ProxyInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    class function buildDirectProxy(para1: JLString; para2: jint): ANProxyInfo; static; overload;
    class function buildDirectProxy(para1: JLString; para2: jint; para3: JUList): ANProxyInfo; static; overload;
    class function buildPacProxy(para1: ANUri): ANProxyInfo; static; overload;
    function getPacFileUrl(): ANUri; overload; virtual;
    function getHost(): JLString; overload; virtual;
    function getPort(): jint; overload; virtual;
    function getExclusionList(): Arr1JLString; overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  ANRouteInfo = class sealed external 'android.net' name 'RouteInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getDestination(): ANIpPrefix; overload; virtual;
    function getGateway(): JNInetAddress; overload; virtual;
    function getInterface(): JLString; overload; virtual;
    function isDefaultRoute(): jboolean; overload; virtual;
    function matches(para1: JNInetAddress): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
  end;

  AOPersistableBundle = class sealed external 'android.os' name 'PersistableBundle' (AOBaseBundle, JLCloneable, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      fEMPTY: AOPersistableBundle; external name 'EMPTY';
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: AOPersistableBundle); overload;
    function clone(): JLObject; overload; virtual;
    procedure putPersistableBundle(para1: JLString; para2: AOPersistableBundle); overload; virtual;
    function getPersistableBundle(para1: JLString): AOPersistableBundle; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  ASTVoice = class external 'android.speech.tts' name 'Voice' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      LATENCY_HIGH = 400;
      LATENCY_LOW = 200;
      LATENCY_NORMAL = 300;
      LATENCY_VERY_HIGH = 500;
      LATENCY_VERY_LOW = 100;
      QUALITY_HIGH = 400;
      QUALITY_LOW = 200;
      QUALITY_NORMAL = 300;
      QUALITY_VERY_HIGH = 500;
      QUALITY_VERY_LOW = 100;
  public
    constructor create(para1: JLString; para2: JULocale; para3: jint; para4: jint; para5: jboolean; para6: JUSet); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function describeContents(): jint; overload; virtual;
    function getLocale(): JULocale; overload; virtual;
    function getQuality(): jint; overload; virtual;
    function getLatency(): jint; overload; virtual;
    function isNetworkConnectionRequired(): jboolean; overload; virtual;
    function getName(): JLString; overload; virtual;
    function getFeatures(): JUSet; overload; virtual;
    function toString(): JLString; overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
  end;

  ATIccOpenLogicalChannelResponse = class external 'android.telephony' name 'IccOpenLogicalChannelResponse' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      INVALID_CHANNEL = -1;
      STATUS_MISSING_RESOURCE = 2;
      STATUS_NO_ERROR = 1;
      STATUS_NO_SUCH_ELEMENT = 3;
      STATUS_UNKNOWN_ERROR = 4;
  public
    function getChannel(): jint; overload; virtual;
    function getStatus(): jint; overload; virtual;
    function getSelectResponse(): Arr1jbyte; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVAAccessibilityWindowInfo = class sealed external 'android.view.accessibility' name 'AccessibilityWindowInfo' (JLObject, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      TYPE_APPLICATION = 1;
      TYPE_INPUT_METHOD = 2;
      TYPE_SYSTEM = 3;
  public
    function getType(): jint; overload; virtual;
    function getLayer(): jint; overload; virtual;
    function getRoot(): AVAAccessibilityNodeInfo; overload; virtual;
    function getParent(): AVAAccessibilityWindowInfo; overload; virtual;
    function getId(): jint; overload; virtual;
    procedure getBoundsInScreen(para1: AGRect); overload; virtual;
    function isActive(): jboolean; overload; virtual;
    function isFocused(): jboolean; overload; virtual;
    function isAccessibilityFocused(): jboolean; overload; virtual;
    function getChildCount(): jint; overload; virtual;
    function getChild(para1: jint): AVAAccessibilityWindowInfo; overload; virtual;
    class function obtain(): AVAAccessibilityWindowInfo; static; overload;
    class function obtain(para1: AVAAccessibilityWindowInfo): AVAAccessibilityWindowInfo; static; overload;
    procedure recycle(); overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVICursorAnchorInfo = class sealed external 'android.view.inputmethod' name 'CursorAnchorInfo' (JLObject, AOParcelable)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerBuilder = class sealed external 'android.view.inputmethod' name 'Builder' (JLObject)
      public
        constructor create(); overload;
        function setSelectionRange(para1: jint; para2: jint): AVICursorAnchorInfo.InnerBuilder; overload; virtual;
        function setComposingText(para1: jint; para2: JLCharSequence): AVICursorAnchorInfo.InnerBuilder; overload; virtual;
        function setInsertionMarkerLocation(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat; para5: jint): AVICursorAnchorInfo.InnerBuilder; overload; virtual;
        function addCharacterBounds(para1: jint; para2: jfloat; para3: jfloat; para4: jfloat; para5: jfloat; para6: jint): AVICursorAnchorInfo.InnerBuilder; overload; virtual;
        function setMatrix(para1: AGMatrix): AVICursorAnchorInfo.InnerBuilder; overload; virtual;
        function build(): AVICursorAnchorInfo; overload; virtual;
        procedure reset(); overload; virtual;
      end;
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    const
      FLAG_HAS_INVISIBLE_REGION = 2;
      FLAG_HAS_VISIBLE_REGION = 1;
      FLAG_IS_RTL = 4;
  public
    constructor create(para1: AOParcel); overload;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function hashCode(): jint; overload; virtual;
    function equals(para1: JLObject): jboolean; overload; virtual;
    function toString(): JLString; overload; virtual;
    function getSelectionStart(): jint; overload; virtual;
    function getSelectionEnd(): jint; overload; virtual;
    function getComposingTextStart(): jint; overload; virtual;
    function getComposingText(): JLCharSequence; overload; virtual;
    function getInsertionMarkerFlags(): jint; overload; virtual;
    function getInsertionMarkerHorizontal(): jfloat; overload; virtual;
    function getInsertionMarkerTop(): jfloat; overload; virtual;
    function getInsertionMarkerBaseline(): jfloat; overload; virtual;
    function getInsertionMarkerBottom(): jfloat; overload; virtual;
    function getCharacterBounds(para1: jint): AGRectF; overload; virtual;
    function getCharacterBoundsFlags(para1: jint): jint; overload; virtual;
    function getMatrix(): AGMatrix; overload; virtual;
    function describeContents(): jint; overload; virtual;
  end;

  AMTTvContract = class sealed external 'android.media.tv' name 'TvContract' (JLObject)
  public
    type
      InnerBaseTvColumns = interface;
      Arr1InnerBaseTvColumns = array of InnerBaseTvColumns;
      Arr2InnerBaseTvColumns = array of Arr1InnerBaseTvColumns;
      Arr3InnerBaseTvColumns = array of Arr2InnerBaseTvColumns;
      InnerPrograms = class;
      Arr1InnerPrograms = array of InnerPrograms;
      Arr2InnerPrograms = array of Arr1InnerPrograms;
      Arr3InnerPrograms = array of Arr2InnerPrograms;
      InnerChannels = class;
      Arr1InnerChannels = array of InnerChannels;
      Arr2InnerChannels = array of Arr1InnerChannels;
      Arr3InnerChannels = array of Arr2InnerChannels;
      InnerBaseTvColumns = interface external 'android.media.tv' name 'BaseTvColumns' (APBaseColumns)
        const
          COLUMN_PACKAGE_NAME = 'package_name';
      end;
      InnerPrograms = class sealed external 'android.media.tv' name 'Programs' (JLObject, AMTTvContract.InnerBaseTvColumns)
      public
        type
          InnerGenres = class;
          Arr1InnerGenres = array of InnerGenres;
          Arr2InnerGenres = array of Arr1InnerGenres;
          Arr3InnerGenres = array of Arr2InnerGenres;
          InnerGenres = class sealed external 'android.media.tv' name 'Genres' (JLObject)
          public
            const
              ANIMAL_WILDLIFE = 'ANIMAL_WILDLIFE';
              COMEDY = 'COMEDY';
              DRAMA = 'DRAMA';
              EDUCATION = 'EDUCATION';
              FAMILY_KIDS = 'FAMILY_KIDS';
              GAMING = 'GAMING';
              MOVIES = 'MOVIES';
              NEWS = 'NEWS';
              SHOPPING = 'SHOPPING';
              SPORTS = 'SPORTS';
              TRAVEL = 'TRAVEL';
          public
            class function encode(para1: Arr1JLString): JLString; static; overload;
            class function encode(const para1: array of JLString): JLString; static; overload;
            class function decode(para1: JLString): Arr1JLString; static; overload;
          end;
      public
        const
          COLUMN_AUDIO_LANGUAGE = 'audio_language';
          COLUMN_BROADCAST_GENRE = 'broadcast_genre';
          COLUMN_CANONICAL_GENRE = 'canonical_genre';
          COLUMN_CHANNEL_ID = 'channel_id';
          COLUMN_CONTENT_RATING = 'content_rating';
          COLUMN_END_TIME_UTC_MILLIS = 'end_time_utc_millis';
          COLUMN_EPISODE_NUMBER = 'episode_number';
          COLUMN_EPISODE_TITLE = 'episode_title';
          COLUMN_INTERNAL_PROVIDER_DATA = 'internal_provider_data';
          COLUMN_LONG_DESCRIPTION = 'long_description';
          COLUMN_POSTER_ART_URI = 'poster_art_uri';
          COLUMN_SEASON_NUMBER = 'season_number';
          COLUMN_SHORT_DESCRIPTION = 'short_description';
          COLUMN_START_TIME_UTC_MILLIS = 'start_time_utc_millis';
          COLUMN_THUMBNAIL_URI = 'thumbnail_uri';
          COLUMN_TITLE = 'title';
          COLUMN_VERSION_NUMBER = 'version_number';
          COLUMN_VIDEO_HEIGHT = 'video_height';
          COLUMN_VIDEO_WIDTH = 'video_width';
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/program';
          CONTENT_TYPE = 'vnd.android.cursor.dir/program';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      end;
      InnerChannels = class sealed external 'android.media.tv' name 'Channels' (JLObject, AMTTvContract.InnerBaseTvColumns)
      public
        type
          InnerLogo = class;
          Arr1InnerLogo = array of InnerLogo;
          Arr2InnerLogo = array of Arr1InnerLogo;
          Arr3InnerLogo = array of Arr2InnerLogo;
          InnerLogo = class sealed external 'android.media.tv' name 'Logo' (JLObject)
          public
            const
              CONTENT_DIRECTORY = 'logo';
          end;
      public
        const
          COLUMN_DESCRIPTION = 'description';
          COLUMN_DISPLAY_NAME = 'display_name';
          COLUMN_DISPLAY_NUMBER = 'display_number';
          COLUMN_INPUT_ID = 'input_id';
          COLUMN_INTERNAL_PROVIDER_DATA = 'internal_provider_data';
          COLUMN_NETWORK_AFFILIATION = 'network_affiliation';
          COLUMN_ORIGINAL_NETWORK_ID = 'original_network_id';
          COLUMN_SEARCHABLE = 'searchable';
          COLUMN_SERVICE_ID = 'service_id';
          COLUMN_SERVICE_TYPE = 'service_type';
          COLUMN_TRANSPORT_STREAM_ID = 'transport_stream_id';
          COLUMN_TYPE = 'type';
          COLUMN_VERSION_NUMBER = 'version_number';
          COLUMN_VIDEO_FORMAT = 'video_format';
          CONTENT_ITEM_TYPE = 'vnd.android.cursor.item/channel';
          CONTENT_TYPE = 'vnd.android.cursor.dir/channel';
      public
        final class var
          fCONTENT_URI: ANUri; external name 'CONTENT_URI';
      public
        const
          SERVICE_TYPE_AUDIO = 'SERVICE_TYPE_AUDIO';
          SERVICE_TYPE_AUDIO_VIDEO = 'SERVICE_TYPE_AUDIO_VIDEO';
          SERVICE_TYPE_OTHER = 'SERVICE_TYPE_OTHER';
          TYPE_1SEG = 'TYPE_1SEG';
          TYPE_ATSC_C = 'TYPE_ATSC_C';
          TYPE_ATSC_M_H = 'TYPE_ATSC_M_H';
          TYPE_ATSC_T = 'TYPE_ATSC_T';
          TYPE_CMMB = 'TYPE_CMMB';
          TYPE_DTMB = 'TYPE_DTMB';
          TYPE_DVB_C = 'TYPE_DVB_C';
          TYPE_DVB_C2 = 'TYPE_DVB_C2';
          TYPE_DVB_H = 'TYPE_DVB_H';
          TYPE_DVB_S = 'TYPE_DVB_S';
          TYPE_DVB_S2 = 'TYPE_DVB_S2';
          TYPE_DVB_SH = 'TYPE_DVB_SH';
          TYPE_DVB_T = 'TYPE_DVB_T';
          TYPE_DVB_T2 = 'TYPE_DVB_T2';
          TYPE_ISDB_C = 'TYPE_ISDB_C';
          TYPE_ISDB_S = 'TYPE_ISDB_S';
          TYPE_ISDB_T = 'TYPE_ISDB_T';
          TYPE_ISDB_TB = 'TYPE_ISDB_TB';
          TYPE_NTSC = 'TYPE_NTSC';
          TYPE_OTHER = 'TYPE_OTHER';
          TYPE_PAL = 'TYPE_PAL';
          TYPE_SECAM = 'TYPE_SECAM';
          TYPE_S_DMB = 'TYPE_S_DMB';
          TYPE_T_DMB = 'TYPE_T_DMB';
          VIDEO_FORMAT_1080I = 'VIDEO_FORMAT_1080I';
          VIDEO_FORMAT_1080P = 'VIDEO_FORMAT_1080P';
          VIDEO_FORMAT_2160P = 'VIDEO_FORMAT_2160P';
          VIDEO_FORMAT_240P = 'VIDEO_FORMAT_240P';
          VIDEO_FORMAT_360P = 'VIDEO_FORMAT_360P';
          VIDEO_FORMAT_4320P = 'VIDEO_FORMAT_4320P';
          VIDEO_FORMAT_480I = 'VIDEO_FORMAT_480I';
          VIDEO_FORMAT_480P = 'VIDEO_FORMAT_480P';
          VIDEO_FORMAT_576I = 'VIDEO_FORMAT_576I';
          VIDEO_FORMAT_576P = 'VIDEO_FORMAT_576P';
          VIDEO_FORMAT_720P = 'VIDEO_FORMAT_720P';
          VIDEO_RESOLUTION_ED = 'VIDEO_RESOLUTION_ED';
          VIDEO_RESOLUTION_FHD = 'VIDEO_RESOLUTION_FHD';
          VIDEO_RESOLUTION_HD = 'VIDEO_RESOLUTION_HD';
          VIDEO_RESOLUTION_SD = 'VIDEO_RESOLUTION_SD';
          VIDEO_RESOLUTION_UHD = 'VIDEO_RESOLUTION_UHD';
      public
        class function getVideoResolution(para1: JLString): JLString; static; overload; final;
      end;
  public
    const
      AUTHORITY = 'android.media.tv';
  public
    class function buildInputId(para1: ACComponentName): JLString; static; overload; final;
    class function buildChannelUri(para1: jlong): ANUri; static; overload; final;
    class function buildChannelUriForPassthroughInput(para1: JLString): ANUri; static; overload; final;
    class function buildChannelLogoUri(para1: jlong): ANUri; static; overload; final;
    class function buildChannelLogoUri(para1: ANUri): ANUri; static; overload; final;
    class function buildChannelsUriForInput(para1: JLString): ANUri; static; overload; final;
    class function buildProgramUri(para1: jlong): ANUri; static; overload; final;
    class function buildProgramsUriForChannel(para1: jlong): ANUri; static; overload; final;
    class function buildProgramsUriForChannel(para1: ANUri): ANUri; static; overload; final;
    class function buildProgramsUriForChannel(para1: jlong; para2: jlong; para3: jlong): ANUri; static; overload; final;
    class function buildProgramsUriForChannel(para1: ANUri; para2: jlong; para3: jlong): ANUri; static; overload; final;
  end;

  ATArcMotion = class external 'android.transition' name 'ArcMotion' (ATPathMotion)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setMinimumHorizontalAngle(para1: jfloat); overload; virtual;
    function getMinimumHorizontalAngle(): jfloat; overload; virtual;
    procedure setMinimumVerticalAngle(para1: jfloat); overload; virtual;
    function getMinimumVerticalAngle(): jfloat; overload; virtual;
    procedure setMaximumAngle(para1: jfloat); overload; virtual;
    function getMaximumAngle(): jfloat; overload; virtual;
    function getPath(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): AGPath; overload; virtual;
  end;

  ATPatternPathMotion = class external 'android.transition' name 'PatternPathMotion' (ATPathMotion)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: AGPath); overload;
    function getPatternPath(): AGPath; overload; virtual;
    procedure setPatternPath(para1: AGPath); overload; virtual;
    function getPath(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat): AGPath; overload; virtual;
  end;

  ATVisibilityPropagation = class abstract external 'android.transition' name 'VisibilityPropagation' (ATTransitionPropagation)
  public
    constructor create(); overload;
    procedure captureValues(para1: ATTransitionValues); overload; virtual;
    function getPropagationProperties(): Arr1JLString; overload; virtual;
    function getViewVisibility(para1: ATTransitionValues): jint; overload; virtual;
    function getViewX(para1: ATTransitionValues): jint; overload; virtual;
    function getViewY(para1: ATTransitionValues): jint; overload; virtual;
  end;

  AVWindowAnimationFrameStats = class sealed external 'android.view' name 'WindowAnimationFrameStats' (AVFrameStats, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AVWindowContentFrameStats = class sealed external 'android.view' name 'WindowContentFrameStats' (AVFrameStats, AOParcelable)
  public
    final class var
      fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
  public
    function getFramePostedTimeNano(para1: jint): jlong; overload; virtual;
    function getFrameReadyTimeNano(para1: jint): jlong; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function toString(): JLString; overload; virtual;
  end;

  AGPPdfRenderer = class sealed external 'android.graphics.pdf' name 'PdfRenderer' (JLObject, JLAutoCloseable)
  public
    type
      InnerPage = class;
      Arr1InnerPage = array of InnerPage;
      Arr2InnerPage = array of Arr1InnerPage;
      Arr3InnerPage = array of Arr2InnerPage;
      InnerPage = class sealed external 'android.graphics.pdf' name 'Page' 
      end;
  public
    constructor create(para1: AOParcelFileDescriptor); overload;  // throws java.io.IOException
    procedure close(); overload; virtual;
    function getPageCount(): jint; overload; virtual;
    function shouldScaleForPrinting(): jboolean; overload; virtual;
    function openPage(para1: jint): AGPPdfRenderer.InnerPage; overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  AHCCameraCaptureSession = class abstract external 'android.hardware.camera2' name 'CameraCaptureSession' (JLObject, JLAutoCloseable)
  public
    type
      InnerCaptureCallback = class;
      Arr1InnerCaptureCallback = array of InnerCaptureCallback;
      Arr2InnerCaptureCallback = array of Arr1InnerCaptureCallback;
      Arr3InnerCaptureCallback = array of Arr2InnerCaptureCallback;
      InnerStateCallback = class;
      Arr1InnerStateCallback = array of InnerStateCallback;
      Arr2InnerStateCallback = array of Arr1InnerStateCallback;
      Arr3InnerStateCallback = array of Arr2InnerStateCallback;
      InnerCaptureCallback = class abstract external 'android.hardware.camera2' name 'CaptureCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onCaptureStarted(para1: AHCCameraCaptureSession; para2: AHCCaptureRequest; para3: jlong; para4: jlong); overload; virtual;
        procedure onCaptureProgressed(para1: AHCCameraCaptureSession; para2: AHCCaptureRequest; para3: AHCCaptureResult); overload; virtual;
        procedure onCaptureCompleted(para1: AHCCameraCaptureSession; para2: AHCCaptureRequest; para3: AHCTotalCaptureResult); overload; virtual;
        procedure onCaptureFailed(para1: AHCCameraCaptureSession; para2: AHCCaptureRequest; para3: AHCCaptureFailure); overload; virtual;
        procedure onCaptureSequenceCompleted(para1: AHCCameraCaptureSession; para2: jint; para3: jlong); overload; virtual;
        procedure onCaptureSequenceAborted(para1: AHCCameraCaptureSession; para2: jint); overload; virtual;
      end;
      InnerStateCallback = class abstract external 'android.hardware.camera2' name 'StateCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onConfigured(para1: AHCCameraCaptureSession); overload; virtual; abstract;
        procedure onConfigureFailed(para1: AHCCameraCaptureSession); overload; virtual; abstract;
        procedure onReady(para1: AHCCameraCaptureSession); overload; virtual;
        procedure onActive(para1: AHCCameraCaptureSession); overload; virtual;
        procedure onClosed(para1: AHCCameraCaptureSession); overload; virtual;
      end;
  public
    constructor create(); overload;
    function getDevice(): AHCCameraDevice; overload; virtual; abstract;
    function capture(para1: AHCCaptureRequest; para2: AHCCameraCaptureSession.InnerCaptureCallback; para3: AOHandler): jint; overload; virtual; abstract;  // throws android.hardware.camera2.CameraAccessException
    function captureBurst(para1: JUList; para2: AHCCameraCaptureSession.InnerCaptureCallback; para3: AOHandler): jint; overload; virtual; abstract;  // throws android.hardware.camera2.CameraAccessException
    function setRepeatingRequest(para1: AHCCaptureRequest; para2: AHCCameraCaptureSession.InnerCaptureCallback; para3: AOHandler): jint; overload; virtual; abstract;  // throws android.hardware.camera2.CameraAccessException
    function setRepeatingBurst(para1: JUList; para2: AHCCameraCaptureSession.InnerCaptureCallback; para3: AOHandler): jint; overload; virtual; abstract;  // throws android.hardware.camera2.CameraAccessException
    procedure stopRepeating(); overload; virtual; abstract;  // throws android.hardware.camera2.CameraAccessException
    procedure abortCaptures(); overload; virtual; abstract;  // throws android.hardware.camera2.CameraAccessException
    procedure close(); overload; virtual; abstract;
  end;

  AHCDngCreator = class sealed external 'android.hardware.camera2' name 'DngCreator' (JLObject, JLAutoCloseable)
  public
    const
      MAX_THUMBNAIL_DIMENSION = 256;
  public
    constructor create(para1: AHCCameraCharacteristics; para2: AHCCaptureResult); overload;
    function setOrientation(para1: jint): AHCDngCreator; overload; virtual;
    function setThumbnail(para1: AGBitmap): AHCDngCreator; overload; virtual;
    function setThumbnail(para1: AMImage): AHCDngCreator; overload; virtual;
    function setLocation(para1: ALLocation): AHCDngCreator; overload; virtual;
    function setDescription(para1: JLString): AHCDngCreator; overload; virtual;
    procedure writeInputStream(para1: JIOutputStream; para2: AUSize; para3: JIInputStream; para4: jlong); overload; virtual;  // throws java.io.IOException
    procedure writeByteBuffer(para1: JIOutputStream; para2: AUSize; para3: JNByteBuffer; para4: jlong); overload; virtual;  // throws java.io.IOException
    procedure writeImage(para1: JIOutputStream; para2: AMImage); overload; virtual;  // throws java.io.IOException
    procedure close(); overload; virtual;
  strict protected
    procedure finalize(); overload; virtual;  // throws java.lang.Throwable
  end;

  JUCForkJoinTask = class abstract external 'java.util.concurrent' name 'ForkJoinTask' (JLObject, JUCFuture, JISerializable)
  public
    constructor create(); overload;
    function fork(): JUCForkJoinTask; overload; virtual; final;
    function join(): JLObject; overload; virtual; final;
    function invoke(): JLObject; overload; virtual; final;
    class procedure invokeAll(para1: JUCForkJoinTask; para2: JUCForkJoinTask); static; overload;
    class procedure invokeAll(para1: Arr1JUCForkJoinTask); static; overload;
    class procedure invokeAll(const para1: array of JUCForkJoinTask); static; overload;
    class function invokeAll(para1: JUCollection): JUCollection; static; overload;
    function cancel(para1: jboolean): jboolean; overload; virtual;
    function isDone(): jboolean; overload; virtual; final;
    function isCancelled(): jboolean; overload; virtual; final;
    function isCompletedAbnormally(): jboolean; overload; virtual; final;
    function isCompletedNormally(): jboolean; overload; virtual; final;
    function getException(): JLThrowable; overload; virtual; final;
    procedure completeExceptionally(para1: JLThrowable); overload; virtual;
    procedure complete(para1: JLObject); overload; virtual;
    function get(): JLObject; overload; virtual; final;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    function get(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual; final;  // throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    procedure quietlyJoin(); overload; virtual; final;
    procedure quietlyInvoke(); overload; virtual; final;
    class procedure helpQuiesce(); static; overload;
    procedure reinitialize(); overload; virtual;
    class function getPool(): JUCForkJoinPool; static; overload;
    class function inForkJoinPool(): jboolean; static; overload;
    function tryUnfork(): jboolean; overload; virtual;
    class function getQueuedTaskCount(): jint; static; overload;
    class function getSurplusQueuedTaskCount(): jint; static; overload;
    function getRawResult(): JLObject; overload; virtual; abstract;
  strict protected
    procedure setRawResult(para1: JLObject); overload; virtual; abstract;
    function exec(): jboolean; overload; virtual; abstract;
    class function peekNextLocalTask(): JUCForkJoinTask; static; overload;
    class function pollNextLocalTask(): JUCForkJoinTask; static; overload;
    class function pollTask(): JUCForkJoinTask; static; overload;
  public
    class function adapt(para1: JLRunnable): JUCForkJoinTask; static; overload;
    class function adapt(para1: JLRunnable; para2: JLObject): JUCForkJoinTask; static; overload;
    class function adapt(para1: JUCCallable): JUCForkJoinTask; static; overload;
  end;

  AHCCameraAccessException = class external 'android.hardware.camera2' name 'CameraAccessException' (AUAndroidException)
  public
    const
      CAMERA_DISABLED = 1;
      CAMERA_DISCONNECTED = 2;
      CAMERA_ERROR = 3;
  public
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JLString); overload;
    constructor create(para1: jint; para2: JLString; para3: JLThrowable); overload;
    constructor create(para1: jint; para2: JLThrowable); overload;
    function getReason(): jint; overload; virtual; final;
  end;

  ATChangeClipBounds = class external 'android.transition' name 'ChangeClipBounds' (ATTransition)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getTransitionProperties(): Arr1JLString; overload; virtual;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual;
    function createAnimator(para1: AVViewGroup; para2: ATTransitionValues; para3: ATTransitionValues): AAAnimator; overload; virtual;
  end;

  ATChangeImageTransform = class external 'android.transition' name 'ChangeImageTransform' (ATTransition)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual;
    function getTransitionProperties(): Arr1JLString; overload; virtual;
    function createAnimator(para1: AVViewGroup; para2: ATTransitionValues; para3: ATTransitionValues): AAAnimator; overload; virtual;
  end;

  ATChangeTransform = class external 'android.transition' name 'ChangeTransform' (ATTransition)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getReparentWithOverlay(): jboolean; overload; virtual;
    procedure setReparentWithOverlay(para1: jboolean); overload; virtual;
    function getReparent(): jboolean; overload; virtual;
    procedure setReparent(para1: jboolean); overload; virtual;
    function getTransitionProperties(): Arr1JLString; overload; virtual;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual;
    function createAnimator(para1: AVViewGroup; para2: ATTransitionValues; para3: ATTransitionValues): AAAnimator; overload; virtual;
  end;

  JUCThreadLocalRandom = class external 'java.util.concurrent' name 'ThreadLocalRandom' (JURandom)
  public
    class function current(): JUCThreadLocalRandom; static; overload;
    procedure setSeed(para1: jlong); overload; virtual;
  strict protected
    function next(para1: jint): jint; overload; virtual;
  public
    function nextInt(para1: jint; para2: jint): jint; overload; virtual;
    function nextLong(para1: jlong): jlong; overload; virtual;
    function nextLong(para1: jlong; para2: jlong): jlong; overload; virtual;
    function nextDouble(para1: jdouble): jdouble; overload; virtual;
    function nextDouble(para1: jdouble; para2: jdouble): jdouble; overload; virtual;
  end;

  AVAPathInterpolator = class external 'android.view.animation' name 'PathInterpolator' (JLObject, AVAInterpolator)
  public
    constructor create(para1: AGPath); overload;
    constructor create(para1: jfloat; para2: jfloat); overload;
    constructor create(para1: jfloat; para2: jfloat; para3: jfloat; para4: jfloat); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    function getInterpolation(para1: jfloat): jfloat; overload; virtual;
  end;

  AHCTotalCaptureResult = class sealed external 'android.hardware.camera2' name 'TotalCaptureResult' (AHCCaptureResult)
  public
    function getPartialResults(): JUList; overload; virtual;
  end;

  AOGLES31 = class external 'android.opengl' name 'GLES31' (AOGLES30)
  public
    const
      GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593;
      GL_ACTIVE_PROGRAM = 33369;
      GL_ACTIVE_RESOURCES = 37621;
      GL_ACTIVE_VARIABLES = 37637;
      GL_ALL_SHADER_BITS = -1;
      GL_ARRAY_SIZE = 37627;
      GL_ARRAY_STRIDE = 37630;
      GL_ATOMIC_COUNTER_BARRIER_BIT = 4096;
      GL_ATOMIC_COUNTER_BUFFER = 37568;
      GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569;
      GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633;
      GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571;
      GL_ATOMIC_COUNTER_BUFFER_START = 37570;
      GL_BLOCK_INDEX = 37629;
      GL_BUFFER_BINDING = 37634;
      GL_BUFFER_DATA_SIZE = 37635;
      GL_BUFFER_UPDATE_BARRIER_BIT = 512;
      GL_BUFFER_VARIABLE = 37605;
      GL_COMMAND_BARRIER_BIT = 64;
      GL_COMPUTE_SHADER = 37305;
      GL_COMPUTE_SHADER_BIT = 32;
      GL_COMPUTE_WORK_GROUP_SIZE = 33383;
      GL_DEPTH_STENCIL_TEXTURE_MODE = 37098;
      GL_DISPATCH_INDIRECT_BUFFER = 37102;
      GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103;
      GL_DRAW_INDIRECT_BUFFER = 36671;
      GL_DRAW_INDIRECT_BUFFER_BINDING = 36675;
      GL_FRAGMENT_SHADER_BIT = 2;
      GL_FRAMEBUFFER_BARRIER_BIT = 1024;
      GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;
      GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649;
      GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651;
      GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648;
      GL_IMAGE_2D = 36941;
      GL_IMAGE_2D_ARRAY = 36947;
      GL_IMAGE_3D = 36942;
      GL_IMAGE_BINDING_ACCESS = 36670;
      GL_IMAGE_BINDING_FORMAT = 36974;
      GL_IMAGE_BINDING_LAYER = 36669;
      GL_IMAGE_BINDING_LAYERED = 36668;
      GL_IMAGE_BINDING_LEVEL = 36667;
      GL_IMAGE_BINDING_NAME = 36666;
      GL_IMAGE_CUBE = 36944;
      GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065;
      GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064;
      GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063;
      GL_INT_IMAGE_2D = 36952;
      GL_INT_IMAGE_2D_ARRAY = 36958;
      GL_INT_IMAGE_3D = 36953;
      GL_INT_IMAGE_CUBE = 36955;
      GL_INT_SAMPLER_2D_MULTISAMPLE = 37129;
      GL_IS_ROW_MAJOR = 37632;
      GL_LOCATION = 37646;
      GL_MATRIX_STRIDE = 37631;
      GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596;
      GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592;
      GL_MAX_COLOR_TEXTURE_SAMPLES = 37134;
      GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591;
      GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585;
      GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;
      GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071;
      GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665;
      GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;
      GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381;
      GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;
      GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309;
      GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;
      GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;
      GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;
      GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307;
      GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;
      GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310;
      GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;
      GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311;
      GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135;
      GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590;
      GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584;
      GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070;
      GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;
      GL_MAX_FRAMEBUFFER_HEIGHT = 37654;
      GL_MAX_FRAMEBUFFER_SAMPLES = 37656;
      GL_MAX_FRAMEBUFFER_WIDTH = 37653;
      GL_MAX_IMAGE_UNITS = 36664;
      GL_MAX_INTEGER_SAMPLES = 37136;
      GL_MAX_NAME_LENGTH = 37622;
      GL_MAX_NUM_ACTIVE_VARIABLES = 37623;
      GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447;
      GL_MAX_SAMPLE_MASK_WORDS = 36441;
      GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;
      GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;
      GL_MAX_UNIFORM_LOCATIONS = 33390;
      GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586;
      GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580;
      GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498;
      GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;
      GL_MAX_VERTEX_ATTRIB_STRIDE = 33509;
      GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066;
      GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;
      GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446;
      GL_NAME_LENGTH = 37625;
      GL_NUM_ACTIVE_VARIABLES = 37636;
      GL_OFFSET = 37628;
      GL_PIXEL_BUFFER_BARRIER_BIT = 128;
      GL_PROGRAM_INPUT = 37603;
      GL_PROGRAM_OUTPUT = 37604;
      GL_PROGRAM_PIPELINE_BINDING = 33370;
      GL_PROGRAM_SEPARABLE = 33368;
      GL_READ_ONLY = 35000;
      GL_READ_WRITE = 35002;
      GL_REFERENCED_BY_COMPUTE_SHADER = 37643;
      GL_REFERENCED_BY_FRAGMENT_SHADER = 37642;
      GL_REFERENCED_BY_VERTEX_SHADER = 37638;
      GL_SAMPLER_2D_MULTISAMPLE = 37128;
      GL_SAMPLE_MASK = 36433;
      GL_SAMPLE_MASK_VALUE = 36434;
      GL_SAMPLE_POSITION = 36432;
      GL_SHADER_STORAGE_BARRIER_BIT = 8192;
      GL_SHADER_STORAGE_BLOCK = 37606;
      GL_SHADER_STORAGE_BUFFER = 37074;
      GL_SHADER_STORAGE_BUFFER_BINDING = 37075;
      GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;
      GL_SHADER_STORAGE_BUFFER_SIZE = 37077;
      GL_SHADER_STORAGE_BUFFER_START = 37076;
      GL_STENCIL_INDEX = 6401;
      GL_TEXTURE_2D_MULTISAMPLE = 37120;
      GL_TEXTURE_ALPHA_SIZE = 32863;
      GL_TEXTURE_ALPHA_TYPE = 35859;
      GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124;
      GL_TEXTURE_BLUE_SIZE = 32862;
      GL_TEXTURE_BLUE_TYPE = 35858;
      GL_TEXTURE_COMPRESSED = 34465;
      GL_TEXTURE_DEPTH = 32881;
      GL_TEXTURE_DEPTH_SIZE = 34890;
      GL_TEXTURE_DEPTH_TYPE = 35862;
      GL_TEXTURE_FETCH_BARRIER_BIT = 8;
      GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127;
      GL_TEXTURE_GREEN_SIZE = 32861;
      GL_TEXTURE_GREEN_TYPE = 35857;
      GL_TEXTURE_HEIGHT = 4097;
      GL_TEXTURE_INTERNAL_FORMAT = 4099;
      GL_TEXTURE_RED_SIZE = 32860;
      GL_TEXTURE_RED_TYPE = 35856;
      GL_TEXTURE_SAMPLES = 37126;
      GL_TEXTURE_SHARED_SIZE = 35903;
      GL_TEXTURE_STENCIL_SIZE = 35057;
      GL_TEXTURE_UPDATE_BARRIER_BIT = 256;
      GL_TEXTURE_WIDTH = 4096;
      GL_TOP_LEVEL_ARRAY_SIZE = 37644;
      GL_TOP_LEVEL_ARRAY_STRIDE = 37645;
      GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048;
      GL_TRANSFORM_FEEDBACK_VARYING = 37620;
      GL_TYPE = 37626;
      GL_UNIFORM = 37601;
      GL_UNIFORM_BARRIER_BIT = 4;
      GL_UNIFORM_BLOCK = 37602;
      GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595;
      GL_UNSIGNED_INT_IMAGE_2D = 36963;
      GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969;
      GL_UNSIGNED_INT_IMAGE_3D = 36964;
      GL_UNSIGNED_INT_IMAGE_CUBE = 36966;
      GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130;
      GL_VERTEX_ATTRIB_BINDING = 33492;
      GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;
      GL_VERTEX_BINDING_BUFFER = 36687;
      GL_VERTEX_BINDING_DIVISOR = 33494;
      GL_VERTEX_BINDING_OFFSET = 33495;
      GL_VERTEX_BINDING_STRIDE = 33496;
      GL_VERTEX_SHADER_BIT = 1;
      GL_WRITE_ONLY = 35001;
  public
    class procedure glDispatchCompute(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glDispatchComputeIndirect(para1: jlong); static; overload;
    class procedure glDrawArraysIndirect(para1: jint; para2: jlong); static; overload;
    class procedure glDrawElementsIndirect(para1: jint; para2: jint; para3: jlong); static; overload;
    class procedure glFramebufferParameteri(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glGetFramebufferParameteriv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetFramebufferParameteriv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetFramebufferParameteriv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glGetProgramInterfaceiv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glGetProgramInterfaceiv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glGetProgramInterfaceiv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class function glGetProgramResourceIndex(para1: jint; para2: jint; para3: JLString): jint; static; overload;
    class function glGetProgramResourceName(para1: jint; para2: jint; para3: jint): JLString; static; overload;
    class procedure glGetProgramResourceiv(para1: jint; para2: jint; para3: jint; para4: jint; para5: Arr1jint; para6: jint; para7: jint; para8: Arr1jint; para9: jint; para10: Arr1jint; para11: jint); static; overload;
    class procedure glGetProgramResourceiv(para1: jint; para2: jint; para3: jint; para4: jint; var para5: array of jint; para6: jint; para7: jint; var para8: array of jint; para9: jint; var para10: array of jint; para11: jint); static; overload;
    class procedure glGetProgramResourceiv(para1: jint; para2: jint; para3: jint; para4: jint; para5: JNIntBuffer; para6: jint; para7: JNIntBuffer; para8: JNIntBuffer); static; overload;
    class function glGetProgramResourceLocation(para1: jint; para2: jint; para3: JLString): jint; static; overload;
    class procedure glUseProgramStages(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glActiveShaderProgram(para1: jint; para2: jint); static; overload;
    class function glCreateShaderProgramv(para1: jint; para2: Arr1JLString): jint; static; overload;
    class function glCreateShaderProgramv(para1: jint; var para2: array of JLString): jint; static; overload;
    class procedure glBindProgramPipeline(para1: jint); static; overload;
    class procedure glDeleteProgramPipelines(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glDeleteProgramPipelines(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glDeleteProgramPipelines(para1: jint; para2: JNIntBuffer); static; overload;
    class procedure glGenProgramPipelines(para1: jint; para2: Arr1jint; para3: jint); static; overload;
    class procedure glGenProgramPipelines(para1: jint; var para2: array of jint; para3: jint); static; overload;
    class procedure glGenProgramPipelines(para1: jint; para2: JNIntBuffer); static; overload;
    class function glIsProgramPipeline(para1: jint): jboolean; static; overload;
    class procedure glGetProgramPipelineiv(para1: jint; para2: jint; para3: Arr1jint; para4: jint); static; overload;
    class procedure glGetProgramPipelineiv(para1: jint; para2: jint; var para3: array of jint; para4: jint); static; overload;
    class procedure glGetProgramPipelineiv(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glProgramUniform1i(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glProgramUniform2i(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glProgramUniform3i(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glProgramUniform4i(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure glProgramUniform1ui(para1: jint; para2: jint; para3: jint); static; overload;
    class procedure glProgramUniform2ui(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glProgramUniform3ui(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint); static; overload;
    class procedure glProgramUniform4ui(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jint); static; overload;
    class procedure glProgramUniform1f(para1: jint; para2: jint; para3: jfloat); static; overload;
    class procedure glProgramUniform2f(para1: jint; para2: jint; para3: jfloat; para4: jfloat); static; overload;
    class procedure glProgramUniform3f(para1: jint; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat); static; overload;
    class procedure glProgramUniform4f(para1: jint; para2: jint; para3: jfloat; para4: jfloat; para5: jfloat; para6: jfloat); static; overload;
    class procedure glProgramUniform1iv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glProgramUniform1iv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glProgramUniform1iv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glProgramUniform2iv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glProgramUniform2iv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glProgramUniform2iv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glProgramUniform3iv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glProgramUniform3iv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glProgramUniform3iv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glProgramUniform4iv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glProgramUniform4iv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glProgramUniform4iv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glProgramUniform1uiv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glProgramUniform1uiv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glProgramUniform1uiv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glProgramUniform2uiv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glProgramUniform2uiv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glProgramUniform2uiv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glProgramUniform3uiv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glProgramUniform3uiv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glProgramUniform3uiv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glProgramUniform4uiv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glProgramUniform4uiv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glProgramUniform4uiv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glProgramUniform1fv(para1: jint; para2: jint; para3: jint; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glProgramUniform1fv(para1: jint; para2: jint; para3: jint; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glProgramUniform1fv(para1: jint; para2: jint; para3: jint; para4: JNFloatBuffer); static; overload;
    class procedure glProgramUniform2fv(para1: jint; para2: jint; para3: jint; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glProgramUniform2fv(para1: jint; para2: jint; para3: jint; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glProgramUniform2fv(para1: jint; para2: jint; para3: jint; para4: JNFloatBuffer); static; overload;
    class procedure glProgramUniform3fv(para1: jint; para2: jint; para3: jint; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glProgramUniform3fv(para1: jint; para2: jint; para3: jint; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glProgramUniform3fv(para1: jint; para2: jint; para3: jint; para4: JNFloatBuffer); static; overload;
    class procedure glProgramUniform4fv(para1: jint; para2: jint; para3: jint; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glProgramUniform4fv(para1: jint; para2: jint; para3: jint; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glProgramUniform4fv(para1: jint; para2: jint; para3: jint; para4: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix2x3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix2x3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix2x3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix3x2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix3x2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix3x2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix2x4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix2x4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix2x4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix4x2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix4x2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix4x2fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix3x4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix3x4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix3x4fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glProgramUniformMatrix4x3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: Arr1jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix4x3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; var para5: array of jfloat; para6: jint); static; overload;
    class procedure glProgramUniformMatrix4x3fv(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: JNFloatBuffer); static; overload;
    class procedure glValidateProgramPipeline(para1: jint); static; overload;
    class function glGetProgramPipelineInfoLog(para1: jint): JLString; static; overload;
    class procedure glBindImageTexture(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: jint; para6: jint; para7: jint); static; overload;
    class procedure glGetBooleani_v(para1: jint; para2: jint; para3: Arr1jboolean; para4: jint); static; overload;
    class procedure glGetBooleani_v(para1: jint; para2: jint; var para3: array of jboolean; para4: jint); static; overload;
    class procedure glGetBooleani_v(para1: jint; para2: jint; para3: JNIntBuffer); static; overload;
    class procedure glMemoryBarrier(para1: jint); static; overload;
    class procedure glMemoryBarrierByRegion(para1: jint); static; overload;
    class procedure glTexStorage2DMultisample(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint; para6: jboolean); static; overload;
    class procedure glGetMultisamplefv(para1: jint; para2: jint; para3: Arr1jfloat; para4: jint); static; overload;
    class procedure glGetMultisamplefv(para1: jint; para2: jint; var para3: array of jfloat; para4: jint); static; overload;
    class procedure glGetMultisamplefv(para1: jint; para2: jint; para3: JNFloatBuffer); static; overload;
    class procedure glSampleMaski(para1: jint; para2: jint); static; overload;
    class procedure glGetTexLevelParameteriv(para1: jint; para2: jint; para3: jint; para4: Arr1jint; para5: jint); static; overload;
    class procedure glGetTexLevelParameteriv(para1: jint; para2: jint; para3: jint; var para4: array of jint; para5: jint); static; overload;
    class procedure glGetTexLevelParameteriv(para1: jint; para2: jint; para3: jint; para4: JNIntBuffer); static; overload;
    class procedure glGetTexLevelParameterfv(para1: jint; para2: jint; para3: jint; para4: Arr1jfloat; para5: jint); static; overload;
    class procedure glGetTexLevelParameterfv(para1: jint; para2: jint; para3: jint; var para4: array of jfloat; para5: jint); static; overload;
    class procedure glGetTexLevelParameterfv(para1: jint; para2: jint; para3: jint; para4: JNFloatBuffer); static; overload;
    class procedure glBindVertexBuffer(para1: jint; para2: jint; para3: jlong; para4: jint); static; overload;
    class procedure glVertexAttribFormat(para1: jint; para2: jint; para3: jint; para4: jboolean; para5: jint); static; overload;
    class procedure glVertexAttribIFormat(para1: jint; para2: jint; para3: jint; para4: jint); static; overload;
    class procedure glVertexAttribBinding(para1: jint; para2: jint); static; overload;
    class procedure glVertexBindingDivisor(para1: jint; para2: jint); static; overload;
  end;

  AMBMediaBrowser = class sealed external 'android.media.browse' name 'MediaBrowser' (JLObject)
  public
    type
      InnerSubscriptionCallback = class;
      Arr1InnerSubscriptionCallback = array of InnerSubscriptionCallback;
      Arr2InnerSubscriptionCallback = array of Arr1InnerSubscriptionCallback;
      Arr3InnerSubscriptionCallback = array of Arr2InnerSubscriptionCallback;
      InnerConnectionCallback = class;
      Arr1InnerConnectionCallback = array of InnerConnectionCallback;
      Arr2InnerConnectionCallback = array of Arr1InnerConnectionCallback;
      Arr3InnerConnectionCallback = array of Arr2InnerConnectionCallback;
      InnerMediaItem = class;
      Arr1InnerMediaItem = array of InnerMediaItem;
      Arr2InnerMediaItem = array of Arr1InnerMediaItem;
      Arr3InnerMediaItem = array of Arr2InnerMediaItem;
      InnerSubscriptionCallback = class abstract external 'android.media.browse' name 'SubscriptionCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onChildrenLoaded(para1: JLString; para2: JUList); overload; virtual;
        procedure onError(para1: JLString); overload; virtual;
      end;
      InnerConnectionCallback = class external 'android.media.browse' name 'ConnectionCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onConnected(); overload; virtual;
        procedure onConnectionSuspended(); overload; virtual;
        procedure onConnectionFailed(); overload; virtual;
      end;
      InnerMediaItem = class external 'android.media.browse' name 'MediaItem' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        const
          FLAG_BROWSABLE = 1;
          FLAG_PLAYABLE = 2;
      public
        constructor create(para1: AMMediaDescription; para2: jint); overload;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
        function toString(): JLString; overload; virtual;
        function getFlags(): jint; overload; virtual;
        function isBrowsable(): jboolean; overload; virtual;
        function isPlayable(): jboolean; overload; virtual;
        function getDescription(): AMMediaDescription; overload; virtual;
        function getMediaId(): JLString; overload; virtual;
      end;
  public
    constructor create(para1: ACContext; para2: ACComponentName; para3: AMBMediaBrowser.InnerConnectionCallback; para4: AOBundle); overload;
    procedure connect(); overload; virtual;
    procedure disconnect(); overload; virtual;
    function isConnected(): jboolean; overload; virtual;
    function getServiceComponent(): ACComponentName; overload; virtual;
    function getRoot(): JLString; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function getSessionToken(): AMSMediaSession.InnerToken; overload; virtual;
    procedure subscribe(para1: JLString; para2: AMBMediaBrowser.InnerSubscriptionCallback); overload; virtual;
    procedure unsubscribe(para1: JLString); overload; virtual;
  end;

  AMSMediaController = class sealed external 'android.media.session' name 'MediaController' (JLObject)
  public
    type
      InnerPlaybackInfo = class;
      Arr1InnerPlaybackInfo = array of InnerPlaybackInfo;
      Arr2InnerPlaybackInfo = array of Arr1InnerPlaybackInfo;
      Arr3InnerPlaybackInfo = array of Arr2InnerPlaybackInfo;
      InnerTransportControls = class;
      Arr1InnerTransportControls = array of InnerTransportControls;
      Arr2InnerTransportControls = array of Arr1InnerTransportControls;
      Arr3InnerTransportControls = array of Arr2InnerTransportControls;
      InnerCallback = class;
      Arr1InnerCallback = array of InnerCallback;
      Arr2InnerCallback = array of Arr1InnerCallback;
      Arr3InnerCallback = array of Arr2InnerCallback;
      InnerPlaybackInfo = class sealed external 'android.media.session' name 'PlaybackInfo' (JLObject)
      public
        const
          PLAYBACK_TYPE_LOCAL = 1;
          PLAYBACK_TYPE_REMOTE = 2;
      public
        function getPlaybackType(): jint; overload; virtual;
        function getAudioAttributes(): AMAudioAttributes; overload; virtual;
        function getVolumeControl(): jint; overload; virtual;
        function getMaxVolume(): jint; overload; virtual;
        function getCurrentVolume(): jint; overload; virtual;
      end;
      InnerTransportControls = class sealed external 'android.media.session' name 'TransportControls' 
      end;
      InnerCallback = class abstract external 'android.media.session' name 'Callback' (JLObject)
      public
        constructor create(); overload;
        procedure onSessionDestroyed(); overload; virtual;
        procedure onSessionEvent(para1: JLString; para2: AOBundle); overload; virtual;
        procedure onPlaybackStateChanged(para1: AMSPlaybackState); overload; virtual;
        procedure onMetadataChanged(para1: AMMediaMetadata); overload; virtual;
        procedure onQueueChanged(para1: JUList); overload; virtual;
        procedure onQueueTitleChanged(para1: JLCharSequence); overload; virtual;
        procedure onExtrasChanged(para1: AOBundle); overload; virtual;
        procedure onAudioInfoChanged(para1: AMSMediaController.InnerPlaybackInfo); overload; virtual;
      end;
  public
    constructor create(para1: ACContext; para2: AMSMediaSession.InnerToken); overload;
    function getTransportControls(): AMSMediaController.InnerTransportControls; overload; virtual;
    function dispatchMediaButtonEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function getPlaybackState(): AMSPlaybackState; overload; virtual;
    function getMetadata(): AMMediaMetadata; overload; virtual;
    function getQueue(): JUList; overload; virtual;
    function getQueueTitle(): JLCharSequence; overload; virtual;
    function getExtras(): AOBundle; overload; virtual;
    function getRatingType(): jint; overload; virtual;
    function getFlags(): jlong; overload; virtual;
    function getPlaybackInfo(): AMSMediaController.InnerPlaybackInfo; overload; virtual;
    function getSessionActivity(): AAPendingIntent; overload; virtual;
    function getSessionToken(): AMSMediaSession.InnerToken; overload; virtual;
    procedure setVolumeTo(para1: jint; para2: jint); overload; virtual;
    procedure adjustVolume(para1: jint; para2: jint); overload; virtual;
    procedure registerCallback(para1: AMSMediaController.InnerCallback); overload; virtual;
    procedure registerCallback(para1: AMSMediaController.InnerCallback; para2: AOHandler); overload; virtual;
    procedure unregisterCallback(para1: AMSMediaController.InnerCallback); overload; virtual;
    procedure sendCommand(para1: JLString; para2: AOBundle; para3: AOResultReceiver); overload; virtual;
    function getPackageName(): JLString; overload; virtual;
  end;

  ATSTtsSpan = class external 'android.text.style' name 'TtsSpan' (JLObject, ATParcelableSpan)
  public
    type
      InnerBuilder = class;
      Arr1InnerBuilder = array of InnerBuilder;
      Arr2InnerBuilder = array of Arr1InnerBuilder;
      Arr3InnerBuilder = array of Arr2InnerBuilder;
      InnerSemioticClassBuilder = class;
      Arr1InnerSemioticClassBuilder = array of InnerSemioticClassBuilder;
      Arr2InnerSemioticClassBuilder = array of Arr1InnerSemioticClassBuilder;
      Arr3InnerSemioticClassBuilder = array of Arr2InnerSemioticClassBuilder;
      InnerVerbatimBuilder = class;
      Arr1InnerVerbatimBuilder = array of InnerVerbatimBuilder;
      Arr2InnerVerbatimBuilder = array of Arr1InnerVerbatimBuilder;
      Arr3InnerVerbatimBuilder = array of Arr2InnerVerbatimBuilder;
      InnerDigitsBuilder = class;
      Arr1InnerDigitsBuilder = array of InnerDigitsBuilder;
      Arr2InnerDigitsBuilder = array of Arr1InnerDigitsBuilder;
      Arr3InnerDigitsBuilder = array of Arr2InnerDigitsBuilder;
      InnerElectronicBuilder = class;
      Arr1InnerElectronicBuilder = array of InnerElectronicBuilder;
      Arr2InnerElectronicBuilder = array of Arr1InnerElectronicBuilder;
      Arr3InnerElectronicBuilder = array of Arr2InnerElectronicBuilder;
      InnerTelephoneBuilder = class;
      Arr1InnerTelephoneBuilder = array of InnerTelephoneBuilder;
      Arr2InnerTelephoneBuilder = array of Arr1InnerTelephoneBuilder;
      Arr3InnerTelephoneBuilder = array of Arr2InnerTelephoneBuilder;
      InnerMoneyBuilder = class;
      Arr1InnerMoneyBuilder = array of InnerMoneyBuilder;
      Arr2InnerMoneyBuilder = array of Arr1InnerMoneyBuilder;
      Arr3InnerMoneyBuilder = array of Arr2InnerMoneyBuilder;
      InnerDateBuilder = class;
      Arr1InnerDateBuilder = array of InnerDateBuilder;
      Arr2InnerDateBuilder = array of Arr1InnerDateBuilder;
      Arr3InnerDateBuilder = array of Arr2InnerDateBuilder;
      InnerTimeBuilder = class;
      Arr1InnerTimeBuilder = array of InnerTimeBuilder;
      Arr2InnerTimeBuilder = array of Arr1InnerTimeBuilder;
      Arr3InnerTimeBuilder = array of Arr2InnerTimeBuilder;
      InnerMeasureBuilder = class;
      Arr1InnerMeasureBuilder = array of InnerMeasureBuilder;
      Arr2InnerMeasureBuilder = array of Arr1InnerMeasureBuilder;
      Arr3InnerMeasureBuilder = array of Arr2InnerMeasureBuilder;
      InnerFractionBuilder = class;
      Arr1InnerFractionBuilder = array of InnerFractionBuilder;
      Arr2InnerFractionBuilder = array of Arr1InnerFractionBuilder;
      Arr3InnerFractionBuilder = array of Arr2InnerFractionBuilder;
      InnerDecimalBuilder = class;
      Arr1InnerDecimalBuilder = array of InnerDecimalBuilder;
      Arr2InnerDecimalBuilder = array of Arr1InnerDecimalBuilder;
      Arr3InnerDecimalBuilder = array of Arr2InnerDecimalBuilder;
      InnerOrdinalBuilder = class;
      Arr1InnerOrdinalBuilder = array of InnerOrdinalBuilder;
      Arr2InnerOrdinalBuilder = array of Arr1InnerOrdinalBuilder;
      Arr3InnerOrdinalBuilder = array of Arr2InnerOrdinalBuilder;
      InnerCardinalBuilder = class;
      Arr1InnerCardinalBuilder = array of InnerCardinalBuilder;
      Arr2InnerCardinalBuilder = array of Arr1InnerCardinalBuilder;
      Arr3InnerCardinalBuilder = array of Arr2InnerCardinalBuilder;
      InnerTextBuilder = class;
      Arr1InnerTextBuilder = array of InnerTextBuilder;
      Arr2InnerTextBuilder = array of Arr1InnerTextBuilder;
      Arr3InnerTextBuilder = array of Arr2InnerTextBuilder;
      InnerBuilder = class external 'android.text.style' name 'Builder' (JLObject)
      public
        constructor create(para1: JLString); overload;
        function build(): ATSTtsSpan; overload; virtual;
        function setStringArgument(para1: JLString; para2: JLString): ATSTtsSpan.InnerBuilder; overload; virtual;
        function setIntArgument(para1: JLString; para2: jint): ATSTtsSpan.InnerBuilder; overload; virtual;
        function setLongArgument(para1: JLString; para2: jlong): ATSTtsSpan.InnerBuilder; overload; virtual;
      end;
      InnerSemioticClassBuilder = class external 'android.text.style' name 'SemioticClassBuilder' (InnerBuilder)
      public
        constructor create(para1: JLString); overload;
        function setGender(para1: JLString): ATSTtsSpan.InnerSemioticClassBuilder; overload; virtual;
        function setAnimacy(para1: JLString): ATSTtsSpan.InnerSemioticClassBuilder; overload; virtual;
        function setMultiplicity(para1: JLString): ATSTtsSpan.InnerSemioticClassBuilder; overload; virtual;
        function setCase(para1: JLString): ATSTtsSpan.InnerSemioticClassBuilder; overload; virtual;
      end;
      InnerVerbatimBuilder = class external 'android.text.style' name 'VerbatimBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function setVerbatim(para1: JLString): ATSTtsSpan.InnerVerbatimBuilder; overload; virtual;
      end;
      InnerDigitsBuilder = class external 'android.text.style' name 'DigitsBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function setDigits(para1: JLString): ATSTtsSpan.InnerDigitsBuilder; overload; virtual;
      end;
      InnerElectronicBuilder = class external 'android.text.style' name 'ElectronicBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        function setEmailArguments(para1: JLString; para2: JLString): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
        function setProtocol(para1: JLString): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
        function setUsername(para1: JLString): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
        function setPassword(para1: JLString): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
        function setDomain(para1: JLString): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
        function setPort(para1: jint): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
        function setPath(para1: JLString): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
        function setQueryString(para1: JLString): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
        function setFragmentId(para1: JLString): ATSTtsSpan.InnerElectronicBuilder; overload; virtual;
      end;
      InnerTelephoneBuilder = class external 'android.text.style' name 'TelephoneBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function setCountryCode(para1: JLString): ATSTtsSpan.InnerTelephoneBuilder; overload; virtual;
        function setNumberParts(para1: JLString): ATSTtsSpan.InnerTelephoneBuilder; overload; virtual;
        function setExtension(para1: JLString): ATSTtsSpan.InnerTelephoneBuilder; overload; virtual;
      end;
      InnerMoneyBuilder = class external 'android.text.style' name 'MoneyBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        function setIntegerPart(para1: jlong): ATSTtsSpan.InnerMoneyBuilder; overload; virtual;
        function setIntegerPart(para1: JLString): ATSTtsSpan.InnerMoneyBuilder; overload; virtual;
        function setFractionalPart(para1: JLString): ATSTtsSpan.InnerMoneyBuilder; overload; virtual;
        function setCurrency(para1: JLString): ATSTtsSpan.InnerMoneyBuilder; overload; virtual;
        function setQuantity(para1: JLString): ATSTtsSpan.InnerMoneyBuilder; overload; virtual;
      end;
      InnerDateBuilder = class external 'android.text.style' name 'DateBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: JLInteger; para2: JLInteger; para3: JLInteger; para4: JLInteger); overload;
        function setWeekday(para1: jint): ATSTtsSpan.InnerDateBuilder; overload; virtual;
        function setDay(para1: jint): ATSTtsSpan.InnerDateBuilder; overload; virtual;
        function setMonth(para1: jint): ATSTtsSpan.InnerDateBuilder; overload; virtual;
        function setYear(para1: jint): ATSTtsSpan.InnerDateBuilder; overload; virtual;
      end;
      InnerTimeBuilder = class external 'android.text.style' name 'TimeBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: jint; para2: jint); overload;
        function setHours(para1: jint): ATSTtsSpan.InnerTimeBuilder; overload; virtual;
        function setMinutes(para1: jint): ATSTtsSpan.InnerTimeBuilder; overload; virtual;
      end;
      InnerMeasureBuilder = class external 'android.text.style' name 'MeasureBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        function setNumber(para1: jlong): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setNumber(para1: JLString): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setIntegerPart(para1: jlong): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setIntegerPart(para1: JLString): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setFractionalPart(para1: JLString): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setNumerator(para1: jlong): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setNumerator(para1: JLString): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setDenominator(para1: jlong): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setDenominator(para1: JLString): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
        function setUnit(para1: JLString): ATSTtsSpan.InnerMeasureBuilder; overload; virtual;
      end;
      InnerFractionBuilder = class external 'android.text.style' name 'FractionBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: jlong; para2: jlong; para3: jlong); overload;
        function setIntegerPart(para1: jlong): ATSTtsSpan.InnerFractionBuilder; overload; virtual;
        function setIntegerPart(para1: JLString): ATSTtsSpan.InnerFractionBuilder; overload; virtual;
        function setNumerator(para1: jlong): ATSTtsSpan.InnerFractionBuilder; overload; virtual;
        function setNumerator(para1: JLString): ATSTtsSpan.InnerFractionBuilder; overload; virtual;
        function setDenominator(para1: jlong): ATSTtsSpan.InnerFractionBuilder; overload; virtual;
        function setDenominator(para1: JLString): ATSTtsSpan.InnerFractionBuilder; overload; virtual;
      end;
      InnerDecimalBuilder = class external 'android.text.style' name 'DecimalBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: jdouble; para2: jint; para3: jint); overload;
        constructor create(para1: JLString; para2: JLString); overload;
        function setArgumentsFromDouble(para1: jdouble; para2: jint; para3: jint): ATSTtsSpan.InnerDecimalBuilder; overload; virtual;
        function setIntegerPart(para1: jlong): ATSTtsSpan.InnerDecimalBuilder; overload; virtual;
        function setIntegerPart(para1: JLString): ATSTtsSpan.InnerDecimalBuilder; overload; virtual;
        function setFractionalPart(para1: JLString): ATSTtsSpan.InnerDecimalBuilder; overload; virtual;
      end;
      InnerOrdinalBuilder = class external 'android.text.style' name 'OrdinalBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: jlong); overload;
        constructor create(para1: JLString); overload;
        function setNumber(para1: jlong): ATSTtsSpan.InnerOrdinalBuilder; overload; virtual;
        function setNumber(para1: JLString): ATSTtsSpan.InnerOrdinalBuilder; overload; virtual;
      end;
      InnerCardinalBuilder = class external 'android.text.style' name 'CardinalBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: jlong); overload;
        constructor create(para1: JLString); overload;
        function setNumber(para1: jlong): ATSTtsSpan.InnerCardinalBuilder; overload; virtual;
        function setNumber(para1: JLString): ATSTtsSpan.InnerCardinalBuilder; overload; virtual;
      end;
      InnerTextBuilder = class external 'android.text.style' name 'TextBuilder' (InnerSemioticClassBuilder)
      public
        constructor create(); overload;
        constructor create(para1: JLString); overload;
        function setText(para1: JLString): ATSTtsSpan.InnerTextBuilder; overload; virtual;
      end;
  public
    const
      ANIMACY_ANIMATE = 'android.animate';
      ANIMACY_INANIMATE = 'android.inanimate';
      ARG_ANIMACY = 'android.arg.animacy';
      ARG_CASE = 'android.arg.case';
      ARG_COUNTRY_CODE = 'android.arg.country_code';
      ARG_CURRENCY = 'android.arg.money';
      ARG_DAY = 'android.arg.day';
      ARG_DENOMINATOR = 'android.arg.denominator';
      ARG_DIGITS = 'android.arg.digits';
      ARG_DOMAIN = 'android.arg.domain';
      ARG_EXTENSION = 'android.arg.extension';
      ARG_FRACTIONAL_PART = 'android.arg.fractional_part';
      ARG_FRAGMENT_ID = 'android.arg.fragment_id';
      ARG_GENDER = 'android.arg.gender';
      ARG_HOURS = 'android.arg.hours';
      ARG_INTEGER_PART = 'android.arg.integer_part';
      ARG_MINUTES = 'android.arg.minutes';
      ARG_MONTH = 'android.arg.month';
      ARG_MULTIPLICITY = 'android.arg.multiplicity';
      ARG_NUMBER = 'android.arg.number';
      ARG_NUMBER_PARTS = 'android.arg.number_parts';
      ARG_NUMERATOR = 'android.arg.numerator';
      ARG_PASSWORD = 'android.arg.password';
      ARG_PATH = 'android.arg.path';
      ARG_PORT = 'android.arg.port';
      ARG_PROTOCOL = 'android.arg.protocol';
      ARG_QUANTITY = 'android.arg.quantity';
      ARG_QUERY_STRING = 'android.arg.query_string';
      ARG_TEXT = 'android.arg.text';
      ARG_UNIT = 'android.arg.unit';
      ARG_USERNAME = 'android.arg.username';
      ARG_VERBATIM = 'android.arg.verbatim';
      ARG_WEEKDAY = 'android.arg.weekday';
      ARG_YEAR = 'android.arg.year';
      CASE_ABLATIVE = 'android.ablative';
      CASE_ACCUSATIVE = 'android.accusative';
      CASE_DATIVE = 'android.dative';
      CASE_GENITIVE = 'android.genitive';
      CASE_INSTRUMENTAL = 'android.instrumental';
      CASE_LOCATIVE = 'android.locative';
      CASE_NOMINATIVE = 'android.nominative';
      CASE_VOCATIVE = 'android.vocative';
      GENDER_FEMALE = 'android.female';
      GENDER_MALE = 'android.male';
      GENDER_NEUTRAL = 'android.neutral';
      MONTH_APRIL = 3;
      MONTH_AUGUST = 7;
      MONTH_DECEMBER = 11;
      MONTH_FEBRUARY = 1;
      MONTH_JANUARY = 0;
      MONTH_JULY = 6;
      MONTH_JUNE = 5;
      MONTH_MARCH = 2;
      MONTH_MAY = 4;
      MONTH_NOVEMBER = 10;
      MONTH_OCTOBER = 9;
      MONTH_SEPTEMBER = 8;
      MULTIPLICITY_DUAL = 'android.dual';
      MULTIPLICITY_PLURAL = 'android.plural';
      MULTIPLICITY_SINGLE = 'android.single';
      TYPE_CARDINAL = 'android.type.cardinal';
      TYPE_DATE = 'android.type.date';
      TYPE_DECIMAL = 'android.type.decimal';
      TYPE_DIGITS = 'android.type.digits';
      TYPE_ELECTRONIC = 'android.type.electronic';
      TYPE_FRACTION = 'android.type.fraction';
      TYPE_MEASURE = 'android.type.measure';
      TYPE_MONEY = 'android.type.money';
      TYPE_ORDINAL = 'android.type.ordinal';
      TYPE_TELEPHONE = 'android.type.telephone';
      TYPE_TEXT = 'android.type.text';
      TYPE_TIME = 'android.type.time';
      TYPE_VERBATIM = 'android.type.verbatim';
      WEEKDAY_FRIDAY = 6;
      WEEKDAY_MONDAY = 2;
      WEEKDAY_SATURDAY = 7;
      WEEKDAY_SUNDAY = 1;
      WEEKDAY_THURSDAY = 5;
      WEEKDAY_TUESDAY = 3;
      WEEKDAY_WEDNESDAY = 4;
  public
    constructor create(para1: JLString; para2: AOPersistableBundle); overload;
    constructor create(para1: AOParcel); overload;
    function getType(): JLString; overload; virtual;
    function getArgs(): AOPersistableBundle; overload; virtual;
    function describeContents(): jint; overload; virtual;
    procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
    function getSpanTypeId(): jint; overload; virtual;
  end;

  ATCircularPropagation = class external 'android.transition' name 'CircularPropagation' (ATVisibilityPropagation)
  public
    constructor create(); overload;
    procedure setPropagationSpeed(para1: jfloat); overload; virtual;
    function getStartDelay(para1: AVViewGroup; para2: ATTransition; para3: ATTransitionValues; para4: ATTransitionValues): jlong; overload; virtual;
  end;

  ATSidePropagation = class external 'android.transition' name 'SidePropagation' (ATVisibilityPropagation)
  public
    constructor create(); overload;
    procedure setSide(para1: jint); overload; virtual;
    procedure setPropagationSpeed(para1: jfloat); overload; virtual;
    function getStartDelay(para1: AVViewGroup; para2: ATTransition; para3: ATTransitionValues; para4: ATTransitionValues): jlong; overload; virtual;
  end;

  AHCCameraDevice = class abstract external 'android.hardware.camera2' name 'CameraDevice' (JLObject, JLAutoCloseable)
  public
    type
      InnerStateCallback = class;
      Arr1InnerStateCallback = array of InnerStateCallback;
      Arr2InnerStateCallback = array of Arr1InnerStateCallback;
      Arr3InnerStateCallback = array of Arr2InnerStateCallback;
      InnerStateCallback = class abstract external 'android.hardware.camera2' name 'StateCallback' (JLObject)
      public
        const
          ERROR_CAMERA_DEVICE = 4;
          ERROR_CAMERA_DISABLED = 3;
          ERROR_CAMERA_IN_USE = 1;
          ERROR_CAMERA_SERVICE = 5;
          ERROR_MAX_CAMERAS_IN_USE = 2;
      public
        constructor create(); overload;
        procedure onOpened(para1: AHCCameraDevice); overload; virtual; abstract;
        procedure onClosed(para1: AHCCameraDevice); overload; virtual;
        procedure onDisconnected(para1: AHCCameraDevice); overload; virtual; abstract;
        procedure onError(para1: AHCCameraDevice; para2: jint); overload; virtual; abstract;
      end;
  public
    const
      TEMPLATE_MANUAL = 6;
      TEMPLATE_PREVIEW = 1;
      TEMPLATE_RECORD = 3;
      TEMPLATE_STILL_CAPTURE = 2;
      TEMPLATE_VIDEO_SNAPSHOT = 4;
      TEMPLATE_ZERO_SHUTTER_LAG = 5;
  public
    function getId(): JLString; overload; virtual; abstract;
    procedure createCaptureSession(para1: JUList; para2: AHCCameraCaptureSession.InnerStateCallback; para3: AOHandler); overload; virtual; abstract;  // throws android.hardware.camera2.CameraAccessException
    function createCaptureRequest(para1: jint): AHCCaptureRequest.InnerBuilder; overload; virtual; abstract;  // throws android.hardware.camera2.CameraAccessException
    procedure close(); overload; virtual; abstract;
  end;

  ACPPackageInstaller = class external 'android.content.pm' name 'PackageInstaller' (JLObject)
  public
    type
      InnerSessionCallback = class;
      Arr1InnerSessionCallback = array of InnerSessionCallback;
      Arr2InnerSessionCallback = array of Arr1InnerSessionCallback;
      Arr3InnerSessionCallback = array of Arr2InnerSessionCallback;
      InnerSessionInfo = class;
      Arr1InnerSessionInfo = array of InnerSessionInfo;
      Arr2InnerSessionInfo = array of Arr1InnerSessionInfo;
      Arr3InnerSessionInfo = array of Arr2InnerSessionInfo;
      InnerSessionParams = class;
      Arr1InnerSessionParams = array of InnerSessionParams;
      Arr2InnerSessionParams = array of Arr1InnerSessionParams;
      Arr3InnerSessionParams = array of Arr2InnerSessionParams;
      InnerSession = class;
      Arr1InnerSession = array of InnerSession;
      Arr2InnerSession = array of Arr1InnerSession;
      Arr3InnerSession = array of Arr2InnerSession;
      InnerSessionCallback = class abstract external 'android.content.pm' name 'SessionCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onCreated(para1: jint); overload; virtual; abstract;
        procedure onBadgingChanged(para1: jint); overload; virtual; abstract;
        procedure onActiveChanged(para1: jint; para2: jboolean); overload; virtual; abstract;
        procedure onProgressChanged(para1: jint; para2: jfloat); overload; virtual; abstract;
        procedure onFinished(para1: jint; para2: jboolean); overload; virtual; abstract;
      end;
      InnerSessionInfo = class external 'android.content.pm' name 'SessionInfo' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        function getSessionId(): jint; overload; virtual;
        function getInstallerPackageName(): JLString; overload; virtual;
        function getProgress(): jfloat; overload; virtual;
        function isActive(): jboolean; overload; virtual;
        function getAppPackageName(): JLString; overload; virtual;
        function getAppIcon(): AGBitmap; overload; virtual;
        function getAppLabel(): JLCharSequence; overload; virtual;
        function createDetailsIntent(): ACIntent; overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
      end;
      InnerSessionParams = class external 'android.content.pm' name 'SessionParams' (JLObject, AOParcelable)
      public
        final class var
          fCREATOR: AOParcelable.InnerCreator; external name 'CREATOR';
      public
        const
          MODE_FULL_INSTALL = 1;
          MODE_INHERIT_EXISTING = 2;
      public
        constructor create(para1: jint); overload;
        procedure setInstallLocation(para1: jint); overload; virtual;
        procedure setSize(para1: jlong); overload; virtual;
        procedure setAppPackageName(para1: JLString); overload; virtual;
        procedure setAppIcon(para1: AGBitmap); overload; virtual;
        procedure setAppLabel(para1: JLCharSequence); overload; virtual;
        procedure setOriginatingUri(para1: ANUri); overload; virtual;
        procedure setReferrerUri(para1: ANUri); overload; virtual;
        function describeContents(): jint; overload; virtual;
        procedure writeToParcel(para1: AOParcel; para2: jint); overload; virtual;
      end;
      InnerSession = class external 'android.content.pm' name 'Session' (JLObject, JICloseable)
      public
        procedure setStagingProgress(para1: jfloat); overload; virtual;
        function openWrite(para1: JLString; para2: jlong; para3: jlong): JIOutputStream; overload; virtual;  // throws java.io.IOException
        procedure fsync(para1: JIOutputStream); overload; virtual;  // throws java.io.IOException
        function getNames(): Arr1JLString; overload; virtual;  // throws java.io.IOException
        function openRead(para1: JLString): JIInputStream; overload; virtual;  // throws java.io.IOException
        procedure commit(para1: ACIntentSender); overload; virtual;
        procedure close(); overload; virtual;
        procedure abandon(); overload; virtual;
      end;
  public
    const
      ACTION_SESSION_DETAILS = 'android.content.pm.action.SESSION_DETAILS';
      EXTRA_OTHER_PACKAGE_NAME = 'android.content.pm.extra.OTHER_PACKAGE_NAME';
      EXTRA_PACKAGE_NAME = 'android.content.pm.extra.PACKAGE_NAME';
      EXTRA_SESSION_ID = 'android.content.pm.extra.SESSION_ID';
      EXTRA_STATUS = 'android.content.pm.extra.STATUS';
      EXTRA_STATUS_MESSAGE = 'android.content.pm.extra.STATUS_MESSAGE';
      EXTRA_STORAGE_PATH = 'android.content.pm.extra.STORAGE_PATH';
      STATUS_FAILURE = 1;
      STATUS_FAILURE_ABORTED = 3;
      STATUS_FAILURE_BLOCKED = 2;
      STATUS_FAILURE_CONFLICT = 5;
      STATUS_FAILURE_INCOMPATIBLE = 7;
      STATUS_FAILURE_INVALID = 4;
      STATUS_FAILURE_STORAGE = 6;
      STATUS_PENDING_USER_ACTION = -1;
      STATUS_SUCCESS = 0;
  public
    function createSession(para1: ACPPackageInstaller.InnerSessionParams): jint; overload; virtual;  // throws java.io.IOException
    function openSession(para1: jint): ACPPackageInstaller.InnerSession; overload; virtual;  // throws java.io.IOException
    procedure updateSessionAppIcon(para1: jint; para2: AGBitmap); overload; virtual;
    procedure updateSessionAppLabel(para1: jint; para2: JLCharSequence); overload; virtual;
    procedure abandonSession(para1: jint); overload; virtual;
    function getSessionInfo(para1: jint): ACPPackageInstaller.InnerSessionInfo; overload; virtual;
    function getAllSessions(): JUList; overload; virtual;
    function getMySessions(): JUList; overload; virtual;
    procedure uninstall(para1: JLString; para2: ACIntentSender); overload; virtual;
    procedure registerSessionCallback(para1: ACPPackageInstaller.InnerSessionCallback); overload; virtual;
    procedure registerSessionCallback(para1: ACPPackageInstaller.InnerSessionCallback; para2: AOHandler); overload; virtual;
    procedure unregisterSessionCallback(para1: ACPPackageInstaller.InnerSessionCallback); overload; virtual;
  end;

  JUCForkJoinWorkerThread = class external 'java.util.concurrent' name 'ForkJoinWorkerThread' (JLThread)
  strict protected
    constructor create(para1: JUCForkJoinPool); overload;
  public
    function getPool(): JUCForkJoinPool; overload; virtual;
    function getPoolIndex(): jint; overload; virtual;
  strict protected
    procedure onStart(); overload; virtual;
    procedure onTermination(para1: JLThrowable); overload; virtual;
  public
    procedure run(); overload; virtual;
  end;

  JUCRecursiveAction = class abstract external 'java.util.concurrent' name 'RecursiveAction' (JUCForkJoinTask)
  public
    constructor create(); overload;
  strict protected
    procedure compute(); overload; virtual; abstract;
  public
    function getRawResult(): JLVoid; overload; virtual; final;
  strict protected
    procedure setRawResult(para1: JLVoid); overload; virtual; final;
    function exec(): jboolean; overload; virtual; final;
    procedure setRawResult(para1: JLObject); overload; virtual;
  public
    function getRawResult(): JLObject; overload; virtual;
  end;

  JUCRecursiveTask = class abstract external 'java.util.concurrent' name 'RecursiveTask' (JUCForkJoinTask)
  public
    constructor create(); overload;
  strict protected
    function compute(): JLObject; overload; virtual; abstract;
  public
    function getRawResult(): JLObject; overload; virtual; final;
  strict protected
    procedure setRawResult(para1: JLObject); overload; virtual; final;
    function exec(): jboolean; overload; virtual; final;
  end;

  ATExplode = class external 'android.transition' name 'Explode' (ATVisibility)
  public
    constructor create(); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual;
    function onAppear(para1: AVViewGroup; para2: AVView; para3: ATTransitionValues; para4: ATTransitionValues): AAAnimator; overload; virtual;
    function onDisappear(para1: AVViewGroup; para2: AVView; para3: ATTransitionValues; para4: ATTransitionValues): AAAnimator; overload; virtual;
  end;

  ATSlide = class external 'android.transition' name 'Slide' (ATVisibility)
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure captureStartValues(para1: ATTransitionValues); overload; virtual;
    procedure captureEndValues(para1: ATTransitionValues); overload; virtual;
    procedure setSlideEdge(para1: jint); overload; virtual;
    function getSlideEdge(): jint; overload; virtual;
    function onAppear(para1: AVViewGroup; para2: AVView; para3: ATTransitionValues; para4: ATTransitionValues): AAAnimator; overload; virtual;
    function onDisappear(para1: AVViewGroup; para2: AVView; para3: ATTransitionValues; para4: ATTransitionValues): AAAnimator; overload; virtual;
  end;

  JUCConcurrentLinkedDeque = class external 'java.util.concurrent' name 'ConcurrentLinkedDeque' (JUAbstractCollection, JUDeque, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    procedure addFirst(para1: JLObject); overload; virtual;
    procedure addLast(para1: JLObject); overload; virtual;
    function offerFirst(para1: JLObject): jboolean; overload; virtual;
    function offerLast(para1: JLObject): jboolean; overload; virtual;
    function peekFirst(): JLObject; overload; virtual;
    function peekLast(): JLObject; overload; virtual;
    function getFirst(): JLObject; overload; virtual;
    function getLast(): JLObject; overload; virtual;
    function pollFirst(): JLObject; overload; virtual;
    function pollLast(): JLObject; overload; virtual;
    function removeFirst(): JLObject; overload; virtual;
    function removeLast(): JLObject; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function poll(): JLObject; overload; virtual;
    function remove(): JLObject; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function element(): JLObject; overload; virtual;
    procedure push(para1: JLObject); overload; virtual;
    function pop(): JLObject; overload; virtual;
    function removeFirstOccurrence(para1: JLObject): jboolean; overload; virtual;
    function removeLastOccurrence(para1: JLObject): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function addAll(para1: JUCollection): jboolean; overload; virtual;
    procedure clear(); overload; virtual;
    function toArray(): Arr1JLObject; overload; virtual;
    function toArray(para1: Arr1JLObject): Arr1JLObject; overload; virtual;
    function toArray(var para1: array of JLObject): Arr1JLObject; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function descendingIterator(): JUIterator; overload; virtual;
  end;

  JUCTransferQueue = interface external 'java.util.concurrent' name 'TransferQueue' (JUCBlockingQueue)
    function tryTransfer(para1: JLObject): jboolean; overload;
    procedure transfer(para1: JLObject); overload;  // throws java.lang.InterruptedException
    function tryTransfer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload;  // throws java.lang.InterruptedException
    function hasWaitingConsumer(): jboolean; overload;
    function getWaitingConsumerCount(): jint; overload;
  end;

  AHCCameraManager = class sealed external 'android.hardware.camera2' name 'CameraManager' (JLObject)
  public
    type
      InnerAvailabilityCallback = class;
      Arr1InnerAvailabilityCallback = array of InnerAvailabilityCallback;
      Arr2InnerAvailabilityCallback = array of Arr1InnerAvailabilityCallback;
      Arr3InnerAvailabilityCallback = array of Arr2InnerAvailabilityCallback;
      InnerAvailabilityCallback = class abstract external 'android.hardware.camera2' name 'AvailabilityCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onCameraAvailable(para1: JLString); overload; virtual;
        procedure onCameraUnavailable(para1: JLString); overload; virtual;
      end;
  public
    function getCameraIdList(): Arr1JLString; overload; virtual;  // throws android.hardware.camera2.CameraAccessException
    procedure registerAvailabilityCallback(para1: AHCCameraManager.InnerAvailabilityCallback; para2: AOHandler); overload; virtual;
    procedure unregisterAvailabilityCallback(para1: AHCCameraManager.InnerAvailabilityCallback); overload; virtual;
    function getCameraCharacteristics(para1: JLString): AHCCameraCharacteristics; overload; virtual;  // throws android.hardware.camera2.CameraAccessException
    procedure openCamera(para1: JLString; para2: AHCCameraDevice.InnerStateCallback; para3: AOHandler); overload; virtual;  // throws android.hardware.camera2.CameraAccessException
  end;

  JUCForkJoinPool = class external 'java.util.concurrent' name 'ForkJoinPool' (JUCAbstractExecutorService)
  public
    type
      InnerManagedBlocker = interface;
      Arr1InnerManagedBlocker = array of InnerManagedBlocker;
      Arr2InnerManagedBlocker = array of Arr1InnerManagedBlocker;
      Arr3InnerManagedBlocker = array of Arr2InnerManagedBlocker;
      InnerForkJoinWorkerThreadFactory = interface;
      Arr1InnerForkJoinWorkerThreadFactory = array of InnerForkJoinWorkerThreadFactory;
      Arr2InnerForkJoinWorkerThreadFactory = array of Arr1InnerForkJoinWorkerThreadFactory;
      Arr3InnerForkJoinWorkerThreadFactory = array of Arr2InnerForkJoinWorkerThreadFactory;
      InnerManagedBlocker = interface external 'java.util.concurrent' name 'ManagedBlocker' 
        function block(): jboolean; overload;  // throws java.lang.InterruptedException
        function isReleasable(): jboolean; overload;
      end;
      InnerForkJoinWorkerThreadFactory = interface external 'java.util.concurrent' name 'ForkJoinWorkerThreadFactory' 
        function newThread(para1: JUCForkJoinPool): JUCForkJoinWorkerThread; overload;
      end;
  public
    final class var
      fdefaultForkJoinWorkerThreadFactory: JUCForkJoinPool.InnerForkJoinWorkerThreadFactory; external name 'defaultForkJoinWorkerThreadFactory';
  public
    constructor create(); overload;
    constructor create(para1: jint); overload;
    constructor create(para1: jint; para2: JUCForkJoinPool.InnerForkJoinWorkerThreadFactory; para3: JLThread.InnerUncaughtExceptionHandler; para4: jboolean); overload;
    function invoke(para1: JUCForkJoinTask): JLObject; overload; virtual;
    procedure execute(para1: JUCForkJoinTask); overload; virtual;
    procedure execute(para1: JLRunnable); overload; virtual;
    function submit(para1: JUCForkJoinTask): JUCForkJoinTask; overload; virtual;
    function submit(para1: JUCCallable): JUCForkJoinTask; overload; virtual;
    function submit(para1: JLRunnable; para2: JLObject): JUCForkJoinTask; overload; virtual;
    function submit(para1: JLRunnable): JUCForkJoinTask; overload; virtual;
    function invokeAll(para1: JUCollection): JUList; overload; virtual;
    function getFactory(): JUCForkJoinPool.InnerForkJoinWorkerThreadFactory; overload; virtual;
    function getUncaughtExceptionHandler(): JLThread.InnerUncaughtExceptionHandler; overload; virtual;
    function getParallelism(): jint; overload; virtual;
    function getPoolSize(): jint; overload; virtual;
    function getAsyncMode(): jboolean; overload; virtual;
    function getRunningThreadCount(): jint; overload; virtual;
    function getActiveThreadCount(): jint; overload; virtual;
    function isQuiescent(): jboolean; overload; virtual;
    function getStealCount(): jlong; overload; virtual;
    function getQueuedTaskCount(): jlong; overload; virtual;
    function getQueuedSubmissionCount(): jint; overload; virtual;
    function hasQueuedSubmissions(): jboolean; overload; virtual;
  strict protected
    function pollSubmission(): JUCForkJoinTask; overload; virtual;
    function drainTasksTo(para1: JUCollection): jint; overload; virtual;
  public
    function toString(): JLString; overload; virtual;
    procedure shutdown(); overload; virtual;
    function shutdownNow(): JUList; overload; virtual;
    function isTerminated(): jboolean; overload; virtual;
    function isTerminating(): jboolean; overload; virtual;
    function isShutdown(): jboolean; overload; virtual;
    function awaitTermination(para1: jlong; para2: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    function awaitQuiescence(para1: jlong; para2: JUCTimeUnit): jboolean; overload; virtual;
    class procedure managedBlock(para1: JUCForkJoinPool.InnerManagedBlocker); static; overload;  // throws java.lang.InterruptedException
  strict protected
    function newTaskFor(para1: JLRunnable; para2: JLObject): JUCRunnableFuture; overload; virtual;
    function newTaskFor(para1: JUCCallable): JUCRunnableFuture; overload; virtual;
  public
    function submit(para1: JUCCallable): JUCFuture; overload; virtual;
    function submit(para1: JLRunnable; para2: JLObject): JUCFuture; overload; virtual;
    function submit(para1: JLRunnable): JUCFuture; overload; virtual;
  end;

  ASVVoiceInteractionSession = class abstract external 'android.service.voice' name 'VoiceInteractionSession' (JLObject, AVKeyEvent.InnerCallback)
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AOHandler); overload;
    procedure finish(); overload; virtual;
    procedure onCreate(para1: AOBundle); overload; virtual;
    procedure onDestroy(); overload; virtual;
    procedure setContentView(para1: AVView); overload; virtual;
    procedure onCloseSystemDialogs(); overload; virtual;
    function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyLongPress(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
    function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
  end;

  JUCLinkedTransferQueue = class external 'java.util.concurrent' name 'LinkedTransferQueue' (JUAbstractQueue, JUCTransferQueue, JISerializable)
  public
    constructor create(); overload;
    constructor create(para1: JUCollection); overload;
    procedure put(para1: JLObject); overload; virtual;
    function offer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;
    function offer(para1: JLObject): jboolean; overload; virtual;
    function add(para1: JLObject): jboolean; overload; virtual;
    function tryTransfer(para1: JLObject): jboolean; overload; virtual;
    procedure transfer(para1: JLObject); overload; virtual;  // throws java.lang.InterruptedException
    function tryTransfer(para1: JLObject; para2: jlong; para3: JUCTimeUnit): jboolean; overload; virtual;  // throws java.lang.InterruptedException
    function take(): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(para1: jlong; para2: JUCTimeUnit): JLObject; overload; virtual;  // throws java.lang.InterruptedException
    function poll(): JLObject; overload; virtual;
    function drainTo(para1: JUCollection): jint; overload; virtual;
    function drainTo(para1: JUCollection; para2: jint): jint; overload; virtual;
    function iterator(): JUIterator; overload; virtual;
    function peek(): JLObject; overload; virtual;
    function isEmpty(): jboolean; overload; virtual;
    function hasWaitingConsumer(): jboolean; overload; virtual;
    function size(): jint; overload; virtual;
    function getWaitingConsumerCount(): jint; overload; virtual;
    function remove(para1: JLObject): jboolean; overload; virtual;
    function contains(para1: JLObject): jboolean; overload; virtual;
    function remainingCapacity(): jint; overload; virtual;
  end;

  AGDAnimatedVectorDrawable = class external 'android.graphics.drawable' name 'AnimatedVectorDrawable' (AGDDrawable, AGDAnimatable)
  public
    constructor create(); overload;
    function mutate(): AGDDrawable; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    function getChangingConfigurations(): jint; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
  strict protected
    procedure onBoundsChange(para1: AGRect); overload; virtual;
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    function onLevelChange(para1: jint): jboolean; overload; virtual;
  public
    function getAlpha(): jint; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setHotspot(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setHotspotBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    function isStateful(): jboolean; overload; virtual;
    function getOpacity(): jint; overload; virtual;
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function canApplyTheme(): jboolean; overload; virtual;
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function isRunning(): jboolean; overload; virtual;
    procedure start(); overload; virtual;
    procedure stop(); overload; virtual;
  end;

  AGDVectorDrawable = class external 'android.graphics.drawable' name 'VectorDrawable' (AGDDrawable)
  public
    constructor create(); overload;
    function mutate(): AGDDrawable; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getAlpha(): jint; overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    procedure setTintList(para1: ACRColorStateList); overload; virtual;
    procedure setTintMode(para1: AGPorterDuff.InnerMode); overload; virtual;
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
  public
    function getOpacity(): jint; overload; virtual;
    function getIntrinsicWidth(): jint; overload; virtual;
    function getIntrinsicHeight(): jint; overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function getChangingConfigurations(): jint; overload; virtual;
    procedure setAutoMirrored(para1: jboolean); overload; virtual;
    function isAutoMirrored(): jboolean; overload; virtual;
  end;

  AGDRippleDrawable = class external 'android.graphics.drawable' name 'RippleDrawable' (AGDLayerDrawable)
  public
    constructor create(para1: ACRColorStateList; para2: AGDDrawable; para3: AGDDrawable); overload;
    procedure jumpToCurrentState(); overload; virtual;
    procedure setAlpha(para1: jint); overload; virtual;
    procedure setColorFilter(para1: AGColorFilter); overload; virtual;
    function getOpacity(): jint; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
    procedure onBoundsChange(para1: AGRect); overload; virtual;
  public
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    function isStateful(): jboolean; overload; virtual;
    procedure setColor(para1: ACRColorStateList); overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function setDrawableByLayerId(para1: jint; para2: AGDDrawable): jboolean; overload; virtual;
    procedure setPaddingMode(para1: jint); overload; virtual;
    procedure applyTheme(para1: ACRResources.InnerTheme); overload; virtual;
    function canApplyTheme(): jboolean; overload; virtual;
    procedure setHotspot(para1: jfloat; para2: jfloat); overload; virtual;
    procedure setHotspotBounds(para1: jint; para2: jint; para3: jint; para4: jint); overload; virtual;
    procedure getOutline(para1: AGOutline); overload; virtual;
    procedure draw(para1: AGCanvas); overload; virtual;
    function getDirtyBounds(): AGRect; overload; virtual;
    function getConstantState(): AGDDrawable.InnerConstantState; overload; virtual;
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AGDAnimatedStateListDrawable = class external 'android.graphics.drawable' name 'AnimatedStateListDrawable' (AGDStateListDrawable)
  public
    constructor create(); overload;
    function setVisible(para1: jboolean; para2: jboolean): jboolean; overload; virtual;
    procedure addState(para1: Arr1jint; para2: AGDDrawable; para3: jint); overload; virtual;
    procedure addState(var para1: array of jint; para2: AGDDrawable; para3: jint); overload; virtual;
    procedure addTransition(para1: jint; para2: jint; para3: AGDDrawable; para4: jboolean); overload; virtual;
    function isStateful(): jboolean; overload; virtual;
  strict protected
    function onStateChange(para1: Arr1jint): jboolean; overload; virtual;
    function onStateChange(var para1: array of jint): jboolean; overload; virtual;
  public
    procedure jumpToCurrentState(); overload; virtual;
    procedure inflate(para1: ACRResources; para2: OXVXmlPullParser; para3: AUAttributeSet; para4: ACRResources.InnerTheme); overload; virtual;  // throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    function mutate(): AGDDrawable; overload; virtual;
  end;

  AAJJobService = class abstract external 'android.app.job' name 'JobService' (AAService)
  public
    const
      PERMISSION_BIND = 'android.permission.BIND_JOB_SERVICE';
  public
    constructor create(); overload;
    function onStartJob(para1: AAJJobParameters): jboolean; overload; virtual; abstract;
    function onStopJob(para1: AAJJobParameters): jboolean; overload; virtual; abstract;
    procedure jobFinished(para1: AAJJobParameters; para2: jboolean); overload; virtual; final;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
  end;

  AMTTvInputService = class abstract external 'android.media.tv' name 'TvInputService' (AAService)
  public
    type
      InnerSession = class;
      Arr1InnerSession = array of InnerSession;
      Arr2InnerSession = array of Arr1InnerSession;
      Arr3InnerSession = array of Arr2InnerSession;
      InnerHardwareSession = class;
      Arr1InnerHardwareSession = array of InnerHardwareSession;
      Arr2InnerHardwareSession = array of Arr1InnerHardwareSession;
      Arr3InnerHardwareSession = array of Arr2InnerHardwareSession;
      InnerSession = class abstract external 'android.media.tv' name 'Session' (JLObject, AVKeyEvent.InnerCallback)
      public
        constructor create(para1: ACContext); overload;
        procedure setOverlayViewEnabled(para1: jboolean); overload; virtual;
        procedure notifyChannelRetuned(para1: ANUri); overload; virtual;
        procedure notifyTracksChanged(para1: JUList); overload; virtual;
        procedure notifyTrackSelected(para1: jint; para2: JLString); overload; virtual;
        procedure notifyVideoAvailable(); overload; virtual;
        procedure notifyVideoUnavailable(para1: jint); overload; virtual;
        procedure notifyContentAllowed(); overload; virtual;
        procedure notifyContentBlocked(para1: AMTTvContentRating); overload; virtual;
        procedure onRelease(); overload; virtual; abstract;
        function onSetSurface(para1: AVSurface): jboolean; overload; virtual; abstract;
        procedure onSurfaceChanged(para1: jint; para2: jint; para3: jint); overload; virtual;
        procedure onSetStreamVolume(para1: jfloat); overload; virtual; abstract;
        function onTune(para1: ANUri): jboolean; overload; virtual; abstract;
        procedure onSetCaptionEnabled(para1: jboolean); overload; virtual; abstract;
        procedure onUnblockContent(para1: AMTTvContentRating); overload; virtual;
        function onSelectTrack(para1: jint; para2: JLString): jboolean; overload; virtual;
        function onCreateOverlayView(): AVView; overload; virtual;
        function onKeyDown(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
        function onKeyLongPress(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
        function onKeyMultiple(para1: jint; para2: jint; para3: AVKeyEvent): jboolean; overload; virtual;
        function onKeyUp(para1: jint; para2: AVKeyEvent): jboolean; overload; virtual;
        function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
        function onTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
        function onGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
      end;
      InnerHardwareSession = class abstract external 'android.media.tv' name 'HardwareSession' (InnerSession)
      public
        constructor create(para1: ACContext); overload;
        function getHardwareInputId(): JLString; overload; virtual; abstract;
        function onSetSurface(para1: AVSurface): jboolean; overload; virtual; final;
        procedure onHardwareVideoAvailable(); overload; virtual;
        procedure onHardwareVideoUnavailable(para1: jint); overload; virtual;
      end;
  public
    const
      SERVICE_INTERFACE = 'android.media.tv.TvInputService';
      SERVICE_META_DATA = 'android.media.tv.input';
  public
    constructor create(); overload;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual; final;
    function onCreateSession(para1: JLString): AMTTvInputService.InnerSession; overload; virtual; abstract;
  end;

  ASMMediaBrowserService = class abstract external 'android.service.media' name 'MediaBrowserService' (AAService)
  public
    type
      InnerBrowserRoot = class;
      Arr1InnerBrowserRoot = array of InnerBrowserRoot;
      Arr2InnerBrowserRoot = array of Arr1InnerBrowserRoot;
      Arr3InnerBrowserRoot = array of Arr2InnerBrowserRoot;
      InnerResult = class;
      Arr1InnerResult = array of InnerResult;
      Arr2InnerResult = array of Arr1InnerResult;
      Arr3InnerResult = array of Arr2InnerResult;
      InnerBrowserRoot = class sealed external 'android.service.media' name 'BrowserRoot' (JLObject)
      public
        constructor create(para1: JLString; para2: AOBundle); overload;
        function getRootId(): JLString; overload; virtual;
        function getExtras(): AOBundle; overload; virtual;
      end;
      InnerResult = class external 'android.service.media' name 'Result' 
      end;
  public
    const
      SERVICE_INTERFACE = 'android.media.browse.MediaBrowserService';
  public
    constructor create(); overload;
    procedure onCreate(); overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
    function onGetRoot(para1: JLString; para2: jint; para3: AOBundle): ASMMediaBrowserService.InnerBrowserRoot; overload; virtual; abstract;
    procedure onLoadChildren(para1: JLString; para2: ASMMediaBrowserService.InnerResult); overload; virtual; abstract;
    procedure setSessionToken(para1: AMSMediaSession.InnerToken); overload; virtual;
    function getSessionToken(): AMSMediaSession.InnerToken; overload; virtual;
    procedure notifyChildrenChanged(para1: JLString); overload; virtual;
  end;

  ASVVoiceInteractionService = class external 'android.service.voice' name 'VoiceInteractionService' (AAService)
  public
    const
      SERVICE_INTERFACE = 'android.service.voice.VoiceInteractionService';
      SERVICE_META_DATA = 'android.voice_interaction';
  public
    constructor create(); overload;
    class function isActiveService(para1: ACContext; para2: ACComponentName): jboolean; static; overload;
    procedure startSession(para1: AOBundle); overload; virtual;
    procedure onCreate(); overload; virtual;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual;
    procedure onReady(); overload; virtual;
    procedure onShutdown(); overload; virtual;
    function createAlwaysOnHotwordDetector(para1: JLString; para2: JULocale; para3: ASVAlwaysOnHotwordDetector.InnerCallback): ASVAlwaysOnHotwordDetector; overload; virtual; final;
  strict protected
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; para3: Arr1JLString); overload; virtual;
    procedure dump(para1: JIFileDescriptor; para2: JIPrintWriter; var para3: array of JLString); overload; virtual;
  end;

  ASVVoiceInteractionSessionService = class abstract external 'android.service.voice' name 'VoiceInteractionSessionService' (AAService)
  public
    constructor create(); overload;
    procedure onCreate(); overload; virtual;
    function onNewSession(para1: AOBundle): ASVVoiceInteractionSession; overload; virtual; abstract;
    function onBind(para1: ACIntent): AOIBinder; overload; virtual;
  end;

  AMTTvView = class external 'android.media.tv' name 'TvView' (AVViewGroup)
  public
    type
      InnerOnUnhandledInputEventListener = interface;
      Arr1InnerOnUnhandledInputEventListener = array of InnerOnUnhandledInputEventListener;
      Arr2InnerOnUnhandledInputEventListener = array of Arr1InnerOnUnhandledInputEventListener;
      Arr3InnerOnUnhandledInputEventListener = array of Arr2InnerOnUnhandledInputEventListener;
      InnerTvInputCallback = class;
      Arr1InnerTvInputCallback = array of InnerTvInputCallback;
      Arr2InnerTvInputCallback = array of Arr1InnerTvInputCallback;
      Arr3InnerTvInputCallback = array of Arr2InnerTvInputCallback;
      InnerOnUnhandledInputEventListener = interface external 'android.media.tv' name 'OnUnhandledInputEventListener' 
        function onUnhandledInputEvent(para1: AVInputEvent): jboolean; overload;
      end;
      InnerTvInputCallback = class abstract external 'android.media.tv' name 'TvInputCallback' (JLObject)
      public
        constructor create(); overload;
        procedure onConnectionFailed(para1: JLString); overload; virtual;
        procedure onDisconnected(para1: JLString); overload; virtual;
        procedure onVideoSizeChanged(para1: JLString; para2: jint; para3: jint); overload; virtual;
        procedure onChannelRetuned(para1: JLString; para2: ANUri); overload; virtual;
        procedure onTracksChanged(para1: JLString; para2: JUList); overload; virtual;
        procedure onTrackSelected(para1: JLString; para2: jint; para3: JLString); overload; virtual;
        procedure onVideoAvailable(para1: JLString); overload; virtual;
        procedure onVideoUnavailable(para1: JLString; para2: jint); overload; virtual;
        procedure onContentAllowed(para1: JLString); overload; virtual;
        procedure onContentBlocked(para1: JLString; para2: AMTTvContentRating); overload; virtual;
      end;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    procedure setCallback(para1: AMTTvView.InnerTvInputCallback); overload; virtual;
    procedure setStreamVolume(para1: jfloat); overload; virtual;
    procedure tune(para1: JLString; para2: ANUri); overload; virtual;
    procedure reset(); overload; virtual;
    procedure setCaptionEnabled(para1: jboolean); overload; virtual;
    procedure selectTrack(para1: jint; para2: JLString); overload; virtual;
    function getTracks(para1: jint): JUList; overload; virtual;
    function getSelectedTrack(para1: jint): JLString; overload; virtual;
    function dispatchUnhandledInputEvent(para1: AVInputEvent): jboolean; overload; virtual;
    function onUnhandledInputEvent(para1: AVInputEvent): jboolean; overload; virtual;
    procedure setOnUnhandledInputEventListener(para1: AMTTvView.InnerOnUnhandledInputEventListener); overload; virtual;
    function dispatchKeyEvent(para1: AVKeyEvent): jboolean; overload; virtual;
    function dispatchTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchTrackballEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    function dispatchGenericMotionEvent(para1: AVMotionEvent): jboolean; overload; virtual;
    procedure dispatchWindowFocusChanged(para1: jboolean); overload; virtual;
  strict protected
    procedure onAttachedToWindow(); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onVisibilityChanged(para1: AVView; para2: jint); overload; virtual;
  end;

  AWActionMenuView = class external 'android.widget' name 'ActionMenuView' (AWLinearLayout)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerOnMenuItemClickListener = interface;
      Arr1InnerOnMenuItemClickListener = array of InnerOnMenuItemClickListener;
      Arr2InnerOnMenuItemClickListener = array of Arr1InnerOnMenuItemClickListener;
      Arr3InnerOnMenuItemClickListener = array of Arr2InnerOnMenuItemClickListener;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AWLinearLayout.InnerLayoutParams)
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
        constructor create(para1: AWActionMenuView.InnerLayoutParams); overload;
        constructor create(para1: jint; para2: jint); overload;
      end;
      InnerOnMenuItemClickListener = interface external 'android.widget' name 'OnMenuItemClickListener' 
        function onMenuItemClick(para1: AVMenuItem): jboolean; overload;
      end;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    procedure setPopupTheme(para1: jint); overload; virtual;
    function getPopupTheme(): jint; overload; virtual;
    procedure onConfigurationChanged(para1: ACRConfiguration); overload; virtual;
    procedure setOnMenuItemClickListener(para1: AWActionMenuView.InnerOnMenuItemClickListener); overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    procedure onDetachedFromWindow(); overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AWActionMenuView.InnerLayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AWActionMenuView.InnerLayoutParams; overload; virtual;
  strict protected
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AWActionMenuView.InnerLayoutParams; overload; virtual;
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
  public
    function getMenu(): AVMenu; overload; virtual;
    function showOverflowMenu(): jboolean; overload; virtual;
    function hideOverflowMenu(): jboolean; overload; virtual;
    function isOverflowMenuShowing(): jboolean; overload; virtual;
    procedure dismissPopupMenus(); overload; virtual;
    function dispatchPopulateAccessibilityEvent(para1: AVAAccessibilityEvent): jboolean; overload; virtual;
  strict protected
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AWLinearLayout.InnerLayoutParams; overload; virtual;
    function generateDefaultLayoutParams(): AWLinearLayout.InnerLayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AWLinearLayout.InnerLayoutParams; overload; virtual;
  strict protected
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;

  AWToolbar = class external 'android.widget' name 'Toolbar' (AVViewGroup)
  public
    type
      InnerLayoutParams = class;
      Arr1InnerLayoutParams = array of InnerLayoutParams;
      Arr2InnerLayoutParams = array of Arr1InnerLayoutParams;
      Arr3InnerLayoutParams = array of Arr2InnerLayoutParams;
      InnerOnMenuItemClickListener = interface;
      Arr1InnerOnMenuItemClickListener = array of InnerOnMenuItemClickListener;
      Arr2InnerOnMenuItemClickListener = array of Arr1InnerOnMenuItemClickListener;
      Arr3InnerOnMenuItemClickListener = array of Arr2InnerOnMenuItemClickListener;
      InnerLayoutParams = class external 'android.widget' name 'LayoutParams' (AAActionBar.InnerLayoutParams)
      public
        constructor create(para1: ACContext; para2: AUAttributeSet); overload;
        constructor create(para1: jint; para2: jint); overload;
        constructor create(para1: jint; para2: jint; para3: jint); overload;
        constructor create(para1: jint); overload;
        constructor create(para1: AWToolbar.InnerLayoutParams); overload;
        constructor create(para1: AAActionBar.InnerLayoutParams); overload;
        constructor create(para1: AVViewGroup.InnerMarginLayoutParams); overload;
        constructor create(para1: AVViewGroup_LayoutParams); overload;
      end;
      InnerOnMenuItemClickListener = interface external 'android.widget' name 'OnMenuItemClickListener' 
        function onMenuItemClick(para1: AVMenuItem): jboolean; overload;
      end;
  public
    constructor create(para1: ACContext); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint); overload;
    constructor create(para1: ACContext; para2: AUAttributeSet; para3: jint; para4: jint); overload;
    procedure setPopupTheme(para1: jint); overload; virtual;
    function getPopupTheme(): jint; overload; virtual;
    procedure onRtlPropertiesChanged(para1: jint); overload; virtual;
    procedure setLogo(para1: jint); overload; virtual;
    function isOverflowMenuShowing(): jboolean; overload; virtual;
    function showOverflowMenu(): jboolean; overload; virtual;
    function hideOverflowMenu(): jboolean; overload; virtual;
    procedure dismissPopupMenus(); overload; virtual;
    procedure setLogo(para1: AGDDrawable); overload; virtual;
    function getLogo(): AGDDrawable; overload; virtual;
    procedure setLogoDescription(para1: jint); overload; virtual;
    procedure setLogoDescription(para1: JLCharSequence); overload; virtual;
    function getLogoDescription(): JLCharSequence; overload; virtual;
    function hasExpandedActionView(): jboolean; overload; virtual;
    procedure collapseActionView(); overload; virtual;
    function getTitle(): JLCharSequence; overload; virtual;
    procedure setTitle(para1: jint); overload; virtual;
    procedure setTitle(para1: JLCharSequence); overload; virtual;
    function getSubtitle(): JLCharSequence; overload; virtual;
    procedure setSubtitle(para1: jint); overload; virtual;
    procedure setSubtitle(para1: JLCharSequence); overload; virtual;
    procedure setTitleTextAppearance(para1: ACContext; para2: jint); overload; virtual;
    procedure setSubtitleTextAppearance(para1: ACContext; para2: jint); overload; virtual;
    procedure setTitleTextColor(para1: jint); overload; virtual;
    procedure setSubtitleTextColor(para1: jint); overload; virtual;
    function getNavigationContentDescription(): JLCharSequence; overload; virtual;
    procedure setNavigationContentDescription(para1: jint); overload; virtual;
    procedure setNavigationContentDescription(para1: JLCharSequence); overload; virtual;
    procedure setNavigationIcon(para1: jint); overload; virtual;
    procedure setNavigationIcon(para1: AGDDrawable); overload; virtual;
    function getNavigationIcon(): AGDDrawable; overload; virtual;
    procedure setNavigationOnClickListener(para1: AVView.InnerOnClickListener); overload; virtual;
    function getMenu(): AVMenu; overload; virtual;
    procedure inflateMenu(para1: jint); overload; virtual;
    procedure setOnMenuItemClickListener(para1: AWToolbar.InnerOnMenuItemClickListener); overload; virtual;
    procedure setContentInsetsRelative(para1: jint; para2: jint); overload; virtual;
    function getContentInsetStart(): jint; overload; virtual;
    function getContentInsetEnd(): jint; overload; virtual;
    procedure setContentInsetsAbsolute(para1: jint; para2: jint); overload; virtual;
    function getContentInsetLeft(): jint; overload; virtual;
    function getContentInsetRight(): jint; overload; virtual;
  strict protected
    function onSaveInstanceState(): AOParcelable; overload; virtual;
    procedure onRestoreInstanceState(para1: AOParcelable); overload; virtual;
    procedure onDetachedFromWindow(); overload; virtual;
  public
    function onTouchEvent(para1: AVMotionEvent): jboolean; overload; virtual;
  strict protected
    procedure onMeasure(para1: jint; para2: jint); overload; virtual;
    procedure onLayout(para1: jboolean; para2: jint; para3: jint; para4: jint; para5: jint); overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AWToolbar.InnerLayoutParams; overload; virtual;
  strict protected
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AWToolbar.InnerLayoutParams; overload; virtual;
    function generateDefaultLayoutParams(): AWToolbar.InnerLayoutParams; overload; virtual;
    function checkLayoutParams(para1: AVViewGroup_LayoutParams): jboolean; overload; virtual;
    function generateDefaultLayoutParams(): AVViewGroup_LayoutParams; overload; virtual;
    function generateLayoutParams(para1: AVViewGroup_LayoutParams): AVViewGroup_LayoutParams; overload; virtual;
  public
    function generateLayoutParams(para1: AUAttributeSet): AVViewGroup_LayoutParams; overload; virtual;
  end;


