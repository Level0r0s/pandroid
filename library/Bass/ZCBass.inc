  CUBBASS = class external 'com.un4seen.bass' name 'BASS' (JLObject)
  public
    type
      InnerUtils = class;
      Arr1InnerUtils = array of InnerUtils;
      Arr2InnerUtils = array of Arr1InnerUtils;
      Arr3InnerUtils = array of Arr2InnerUtils;
      InnerAsset = class;
      Arr1InnerAsset = array of InnerAsset;
      Arr2InnerAsset = array of Arr1InnerAsset;
      Arr3InnerAsset = array of Arr2InnerAsset;
      InnerBASS_DX8_REVERB = class;
      Arr1InnerBASS_DX8_REVERB = array of InnerBASS_DX8_REVERB;
      Arr2InnerBASS_DX8_REVERB = array of Arr1InnerBASS_DX8_REVERB;
      Arr3InnerBASS_DX8_REVERB = array of Arr2InnerBASS_DX8_REVERB;
      InnerBASS_DX8_PARAMEQ = class;
      Arr1InnerBASS_DX8_PARAMEQ = array of InnerBASS_DX8_PARAMEQ;
      Arr2InnerBASS_DX8_PARAMEQ = array of Arr1InnerBASS_DX8_PARAMEQ;
      Arr3InnerBASS_DX8_PARAMEQ = array of Arr2InnerBASS_DX8_PARAMEQ;
      InnerBASS_DX8_FLANGER = class;
      Arr1InnerBASS_DX8_FLANGER = array of InnerBASS_DX8_FLANGER;
      Arr2InnerBASS_DX8_FLANGER = array of Arr1InnerBASS_DX8_FLANGER;
      Arr3InnerBASS_DX8_FLANGER = array of Arr2InnerBASS_DX8_FLANGER;
      InnerBASS_DX8_ECHO = class;
      Arr1InnerBASS_DX8_ECHO = array of InnerBASS_DX8_ECHO;
      Arr2InnerBASS_DX8_ECHO = array of Arr1InnerBASS_DX8_ECHO;
      Arr3InnerBASS_DX8_ECHO = array of Arr2InnerBASS_DX8_ECHO;
      InnerBASS_DX8_DISTORTION = class;
      Arr1InnerBASS_DX8_DISTORTION = array of InnerBASS_DX8_DISTORTION;
      Arr2InnerBASS_DX8_DISTORTION = array of Arr1InnerBASS_DX8_DISTORTION;
      Arr3InnerBASS_DX8_DISTORTION = array of Arr2InnerBASS_DX8_DISTORTION;
      InnerBASS_DX8_CHORUS = class;
      Arr1InnerBASS_DX8_CHORUS = array of InnerBASS_DX8_CHORUS;
      Arr2InnerBASS_DX8_CHORUS = array of Arr1InnerBASS_DX8_CHORUS;
      Arr3InnerBASS_DX8_CHORUS = array of Arr2InnerBASS_DX8_CHORUS;
      InnerTAG_APE_BINARY = class;
      Arr1InnerTAG_APE_BINARY = array of InnerTAG_APE_BINARY;
      Arr2InnerTAG_APE_BINARY = array of Arr1InnerTAG_APE_BINARY;
      Arr3InnerTAG_APE_BINARY = array of Arr2InnerTAG_APE_BINARY;
      InnerTAG_ID3 = class;
      Arr1InnerTAG_ID3 = array of InnerTAG_ID3;
      Arr2InnerTAG_ID3 = array of Arr1InnerTAG_ID3;
      Arr3InnerTAG_ID3 = array of Arr2InnerTAG_ID3;
      InnerRECORDPROC = interface;
      Arr1InnerRECORDPROC = array of InnerRECORDPROC;
      Arr2InnerRECORDPROC = array of Arr1InnerRECORDPROC;
      Arr3InnerRECORDPROC = array of Arr2InnerRECORDPROC;
      InnerDSPPROC = interface;
      Arr1InnerDSPPROC = array of InnerDSPPROC;
      Arr2InnerDSPPROC = array of Arr1InnerDSPPROC;
      Arr3InnerDSPPROC = array of Arr2InnerDSPPROC;
      InnerSYNCPROC = interface;
      Arr1InnerSYNCPROC = array of InnerSYNCPROC;
      Arr2InnerSYNCPROC = array of Arr1InnerSYNCPROC;
      Arr3InnerSYNCPROC = array of Arr2InnerSYNCPROC;
      InnerDOWNLOADPROC = interface;
      Arr1InnerDOWNLOADPROC = array of InnerDOWNLOADPROC;
      Arr2InnerDOWNLOADPROC = array of Arr1InnerDOWNLOADPROC;
      Arr3InnerDOWNLOADPROC = array of Arr2InnerDOWNLOADPROC;
      InnerBASS_FILEPROCS = interface;
      Arr1InnerBASS_FILEPROCS = array of InnerBASS_FILEPROCS;
      Arr2InnerBASS_FILEPROCS = array of Arr1InnerBASS_FILEPROCS;
      Arr3InnerBASS_FILEPROCS = array of Arr2InnerBASS_FILEPROCS;
      InnerSTREAMPROC = interface;
      Arr1InnerSTREAMPROC = array of InnerSTREAMPROC;
      Arr2InnerSTREAMPROC = array of Arr1InnerSTREAMPROC;
      Arr3InnerSTREAMPROC = array of Arr2InnerSTREAMPROC;
      InnerBASS_3DVECTOR = class;
      Arr1InnerBASS_3DVECTOR = array of InnerBASS_3DVECTOR;
      Arr2InnerBASS_3DVECTOR = array of Arr1InnerBASS_3DVECTOR;
      Arr3InnerBASS_3DVECTOR = array of Arr2InnerBASS_3DVECTOR;
      InnerBASS_PLUGINFORM = class;
      Arr1InnerBASS_PLUGINFORM = array of InnerBASS_PLUGINFORM;
      Arr2InnerBASS_PLUGINFORM = array of Arr1InnerBASS_PLUGINFORM;
      Arr3InnerBASS_PLUGINFORM = array of Arr2InnerBASS_PLUGINFORM;
      InnerBASS_CHANNELINFO = class;
      Arr1InnerBASS_CHANNELINFO = array of InnerBASS_CHANNELINFO;
      Arr2InnerBASS_CHANNELINFO = array of Arr1InnerBASS_CHANNELINFO;
      Arr3InnerBASS_CHANNELINFO = array of Arr2InnerBASS_CHANNELINFO;
      InnerBASS_SAMPLE = class;
      Arr1InnerBASS_SAMPLE = array of InnerBASS_SAMPLE;
      Arr2InnerBASS_SAMPLE = array of Arr1InnerBASS_SAMPLE;
      Arr3InnerBASS_SAMPLE = array of Arr2InnerBASS_SAMPLE;
      InnerBASS_RECORDINFO = class;
      Arr1InnerBASS_RECORDINFO = array of InnerBASS_RECORDINFO;
      Arr2InnerBASS_RECORDINFO = array of Arr1InnerBASS_RECORDINFO;
      Arr3InnerBASS_RECORDINFO = array of Arr2InnerBASS_RECORDINFO;
      InnerBASS_INFO = class;
      Arr1InnerBASS_INFO = array of InnerBASS_INFO;
      Arr2InnerBASS_INFO = array of Arr1InnerBASS_INFO;
      Arr3InnerBASS_INFO = array of Arr2InnerBASS_INFO;
      InnerBASS_DEVICEINFO = class;
      Arr1InnerBASS_DEVICEINFO = array of InnerBASS_DEVICEINFO;
      Arr2InnerBASS_DEVICEINFO = array of Arr1InnerBASS_DEVICEINFO;
      Arr3InnerBASS_DEVICEINFO = array of Arr2InnerBASS_DEVICEINFO;
      InnerBASS_PLUGININFO = class;
      Arr1InnerBASS_PLUGININFO = array of InnerBASS_PLUGININFO;
      Arr2InnerBASS_PLUGININFO = array of Arr1InnerBASS_PLUGININFO;
      Arr3InnerBASS_PLUGININFO = array of Arr2InnerBASS_PLUGININFO;
      InnerUtils = class external 'com.un4seen.bass' name 'Utils' (JLObject)
      public
        constructor create(); overload;
        class function LOBYTE(para1: jint): jint; static; overload;
        class function HIBYTE(para1: jint): jint; static; overload;
        class function LOWORD(para1: jint): jint; static; overload;
        class function HIWORD(para1: jint): jint; static; overload;
        class function MAKEWORD(para1: jint; para2: jint): jint; static; overload;
        class function MAKELONG(para1: jint; para2: jint): jint; static; overload;
      end;

      InnerAsset = class external 'com.un4seen.bass' name 'Asset' (JLObject)
      public
        var
          ffile: JLString; external name 'file';
      public
        constructor create(); overload;
      end;

      InnerBASS_DX8_REVERB = class external 'com.un4seen.bass' name 'BASS_DX8_REVERB' (JLObject)
      public
        var
          ffInGain: jfloat; external name 'fInGain';
          ffReverbMix: jfloat; external name 'fReverbMix';
          ffReverbTime: jfloat; external name 'fReverbTime';
          ffHighFreqRTRatio: jfloat; external name 'fHighFreqRTRatio';
      public
        constructor create(); overload;
      end;

      InnerBASS_DX8_PARAMEQ = class external 'com.un4seen.bass' name 'BASS_DX8_PARAMEQ' (JLObject)
      public
        var
          ffCenter: jfloat; external name 'fCenter';
          ffBandwidth: jfloat; external name 'fBandwidth';
          ffGain: jfloat; external name 'fGain';
      public
        constructor create(); overload;
      end;

      InnerBASS_DX8_FLANGER = class external 'com.un4seen.bass' name 'BASS_DX8_FLANGER' (JLObject)
      public
        var
          ffWetDryMix: jfloat; external name 'fWetDryMix';
          ffDepth: jfloat; external name 'fDepth';
          ffFeedback: jfloat; external name 'fFeedback';
          ffFrequency: jfloat; external name 'fFrequency';
          flWaveform: jint; external name 'lWaveform';
          ffDelay: jfloat; external name 'fDelay';
          flPhase: jint; external name 'lPhase';
      public
        constructor create(); overload;
      end;

      InnerBASS_DX8_ECHO = class external 'com.un4seen.bass' name 'BASS_DX8_ECHO' (JLObject)
      public
        var
          ffWetDryMix: jfloat; external name 'fWetDryMix';
          ffFeedback: jfloat; external name 'fFeedback';
          ffLeftDelay: jfloat; external name 'fLeftDelay';
          ffRightDelay: jfloat; external name 'fRightDelay';
          flPanDelay: jboolean; external name 'lPanDelay';
      public
        constructor create(); overload;
      end;

      InnerBASS_DX8_DISTORTION = class external 'com.un4seen.bass' name 'BASS_DX8_DISTORTION' (JLObject)
      public
        var
          ffGain: jfloat; external name 'fGain';
          ffEdge: jfloat; external name 'fEdge';
          ffPostEQCenterFrequency: jfloat; external name 'fPostEQCenterFrequency';
          ffPostEQBandwidth: jfloat; external name 'fPostEQBandwidth';
          ffPreLowpassCutoff: jfloat; external name 'fPreLowpassCutoff';
      public
        constructor create(); overload;
      end;

      InnerBASS_DX8_CHORUS = class external 'com.un4seen.bass' name 'BASS_DX8_CHORUS' (JLObject)
      public
        var
          ffWetDryMix: jfloat; external name 'fWetDryMix';
          ffDepth: jfloat; external name 'fDepth';
          ffFeedback: jfloat; external name 'fFeedback';
          ffFrequency: jfloat; external name 'fFrequency';
          flWaveform: jint; external name 'lWaveform';
          ffDelay: jfloat; external name 'fDelay';
          flPhase: jint; external name 'lPhase';
      public
        constructor create(); overload;
      end;

      InnerTAG_APE_BINARY = class external 'com.un4seen.bass' name 'TAG_APE_BINARY' (JLObject)
      public
        var
          fkey: JLString; external name 'key';
          fdata: JNByteBuffer; external name 'data';
          flength: jint; external name 'length';
      public
        constructor create(); overload;
      end;

      InnerTAG_ID3 = class external 'com.un4seen.bass' name 'TAG_ID3' (JLObject)
      public
        var
          fid: JLString; external name 'id';
          ftitle: JLString; external name 'title';
          fartist: JLString; external name 'artist';
          falbum: JLString; external name 'album';
          fyear: JLString; external name 'year';
          fcomment: JLString; external name 'comment';
          fgenre: jbyte; external name 'genre';
          ftrack: jbyte; external name 'track';
      public
        constructor create(); overload;
      end;

      InnerRECORDPROC = interface external 'com.un4seen.bass' name 'RECORDPROC' 
        function RECORDPROC(para1: jint; para2: JNByteBuffer; para3: jint; para4: JLObject): jboolean; overload;
      end;

      InnerDSPPROC = interface external 'com.un4seen.bass' name 'DSPPROC' 
        procedure DSPPROC(para1: jint; para2: jint; para3: JNByteBuffer; para4: jint; para5: JLObject); overload;
      end;

      InnerSYNCPROC = interface external 'com.un4seen.bass' name 'SYNCPROC' 
        procedure SYNCPROC(para1: jint; para2: jint; para3: jint; para4: JLObject); overload;
      end;

      InnerDOWNLOADPROC = interface external 'com.un4seen.bass' name 'DOWNLOADPROC' 
        procedure DOWNLOADPROC(para1: JNByteBuffer; para2: jint; para3: JLObject); overload;
      end;

      InnerBASS_FILEPROCS = interface external 'com.un4seen.bass' name 'BASS_FILEPROCS' 
        procedure FILECLOSEPROC(para1: JLObject); overload;
        function FILELENPROC(para1: JLObject): jlong; overload;
        function FILEREADPROC(para1: JNByteBuffer; para2: jint; para3: JLObject): jint; overload;
        function FILESEEKPROC(para1: jlong; para2: JLObject): jboolean; overload;
      end;

      InnerSTREAMPROC = interface external 'com.un4seen.bass' name 'STREAMPROC' 
        function STREAMPROC(para1: jint; para2: JNByteBuffer; para3: jint; para4: JLObject): jint; overload;
      end;

      InnerBASS_3DVECTOR = class external 'com.un4seen.bass' name 'BASS_3DVECTOR' (JLObject)
      public
        var
          fx: jfloat; external name 'x';
          fy: jfloat; external name 'y';
          fz: jfloat; external name 'z';
      public
        constructor create(); overload;
        constructor create(para1: jfloat; para2: jfloat; para3: jfloat); overload;
      end;

      InnerBASS_PLUGINFORM = class external 'com.un4seen.bass' name 'BASS_PLUGINFORM' (JLObject)
      public
        var
          fctype: jint; external name 'ctype';
          fname: JLString; external name 'name';
          fexts: JLString; external name 'exts';
      public
        constructor create(); overload;
      end;

      InnerBASS_CHANNELINFO = class external 'com.un4seen.bass' name 'BASS_CHANNELINFO' (JLObject)
      public
        var
          ffreq: jint; external name 'freq';
          fchans: jint; external name 'chans';
          fflags: jint; external name 'flags';
          fctype: jint; external name 'ctype';
          forigres: jint; external name 'origres';
          fplugin: jint; external name 'plugin';
          fsample: jint; external name 'sample';
          ffilename: JLString; external name 'filename';
      public
        constructor create(); overload;
      end;

      InnerBASS_SAMPLE = class external 'com.un4seen.bass' name 'BASS_SAMPLE' (JLObject)
      public
        var
          ffreq: jint; external name 'freq';
          fvolume: jfloat; external name 'volume';
          fpan: jfloat; external name 'pan';
          fflags: jint; external name 'flags';
          flength: jint; external name 'length';
          fmax: jint; external name 'max';
          forigres: jint; external name 'origres';
          fchans: jint; external name 'chans';
          fmingap: jint; external name 'mingap';
          fmode3d: jint; external name 'mode3d';
          fmindist: jfloat; external name 'mindist';
          fmaxdist: jfloat; external name 'maxdist';
          fiangle: jint; external name 'iangle';
          foangle: jint; external name 'oangle';
          foutvol: jfloat; external name 'outvol';
          fvam: jint; external name 'vam';
          fpriority: jint; external name 'priority';
      public
        constructor create(); overload;
      end;

      InnerBASS_RECORDINFO = class external 'com.un4seen.bass' name 'BASS_RECORDINFO' (JLObject)
      public
        var
          fflags: jint; external name 'flags';
          fformats: jint; external name 'formats';
          finputs: jint; external name 'inputs';
          fsinglein: jboolean; external name 'singlein';
          ffreq: jint; external name 'freq';
      public
        constructor create(); overload;
      end;

      InnerBASS_INFO = class external 'com.un4seen.bass' name 'BASS_INFO' (JLObject)
      public
        var
          fflags: jint; external name 'flags';
          fhwsize: jint; external name 'hwsize';
          fhwfree: jint; external name 'hwfree';
          ffreesam: jint; external name 'freesam';
          ffree3d: jint; external name 'free3d';
          fminrate: jint; external name 'minrate';
          fmaxrate: jint; external name 'maxrate';
          feax: jint; external name 'eax';
          fminbuf: jint; external name 'minbuf';
          fdsver: jint; external name 'dsver';
          flatency: jint; external name 'latency';
          finitflags: jint; external name 'initflags';
          fspeakers: jint; external name 'speakers';
          ffreq: jint; external name 'freq';
      public
        constructor create(); overload;
      end;

      InnerBASS_DEVICEINFO = class external 'com.un4seen.bass' name 'BASS_DEVICEINFO' (JLObject)
      public
        var
          fname: JLString; external name 'name';
          fdriver: JLString; external name 'driver';
          fflags: jint; external name 'flags';
      public
        constructor create(); overload;
      end;

      InnerBASS_PLUGININFO = class external 'com.un4seen.bass' name 'BASS_PLUGININFO' (JLObject)
      public
        var
          fversion: jint; external name 'version';
          fformatc: jint; external name 'formatc';
          fformats: CUBBASS.Arr1InnerBASS_PLUGINFORM; external name 'formats';
      public
        constructor create(); overload;
      end;

  public
    const
      BASSVERSION = 516;
      BASSVERSIONTEXT = '2.4';
      BASS_OK = 0;
      BASS_ERROR_MEM = 1;
      BASS_ERROR_FILEOPEN = 2;
      BASS_ERROR_DRIVER = 3;
      BASS_ERROR_BUFLOST = 4;
      BASS_ERROR_HANDLE = 5;
      BASS_ERROR_FORMAT = 6;
      BASS_ERROR_POSITION = 7;
      BASS_ERROR_INIT = 8;
      BASS_ERROR_START = 9;
      BASS_ERROR_SSL = 10;
      BASS_ERROR_ALREADY = 14;
      BASS_ERROR_NOCHAN = 18;
      BASS_ERROR_ILLTYPE = 19;
      BASS_ERROR_ILLPARAM = 20;
      BASS_ERROR_NO3D = 21;
      BASS_ERROR_NOEAX = 22;
      BASS_ERROR_DEVICE = 23;
      BASS_ERROR_NOPLAY = 24;
      BASS_ERROR_FREQ = 25;
      BASS_ERROR_NOTFILE = 27;
      BASS_ERROR_NOHW = 29;
      BASS_ERROR_EMPTY = 31;
      BASS_ERROR_NONET = 32;
      BASS_ERROR_CREATE = 33;
      BASS_ERROR_NOFX = 34;
      BASS_ERROR_NOTAVAIL = 37;
      BASS_ERROR_DECODE = 38;
      BASS_ERROR_DX = 39;
      BASS_ERROR_TIMEOUT = 40;
      BASS_ERROR_FILEFORM = 41;
      BASS_ERROR_SPEAKER = 42;
      BASS_ERROR_VERSION = 43;
      BASS_ERROR_CODEC = 44;
      BASS_ERROR_ENDED = 45;
      BASS_ERROR_BUSY = 46;
      BASS_ERROR_UNKNOWN = -1;
      BASS_ERROR_JAVA_CLASS = 500;
      BASS_CONFIG_BUFFER = 0;
      BASS_CONFIG_UPDATEPERIOD = 1;
      BASS_CONFIG_GVOL_SAMPLE = 4;
      BASS_CONFIG_GVOL_STREAM = 5;
      BASS_CONFIG_GVOL_MUSIC = 6;
      BASS_CONFIG_CURVE_VOL = 7;
      BASS_CONFIG_CURVE_PAN = 8;
      BASS_CONFIG_FLOATDSP = 9;
      BASS_CONFIG_3DALGORITHM = 10;
      BASS_CONFIG_NET_TIMEOUT = 11;
      BASS_CONFIG_NET_BUFFER = 12;
      BASS_CONFIG_PAUSE_NOPLAY = 13;
      BASS_CONFIG_NET_PREBUF = 15;
      BASS_CONFIG_NET_PASSIVE = 18;
      BASS_CONFIG_REC_BUFFER = 19;
      BASS_CONFIG_NET_PLAYLIST = 21;
      BASS_CONFIG_MUSIC_VIRTUAL = 22;
      BASS_CONFIG_VERIFY = 23;
      BASS_CONFIG_UPDATETHREADS = 24;
      BASS_CONFIG_DEV_BUFFER = 27;
      BASS_CONFIG_DEV_DEFAULT = 36;
      BASS_CONFIG_NET_READTIMEOUT = 37;
      BASS_CONFIG_HANDLES = 41;
      BASS_CONFIG_SRC = 43;
      BASS_CONFIG_SRC_SAMPLE = 44;
      BASS_CONFIG_ASYNCFILE_BUFFER = 45;
      BASS_CONFIG_OGG_PRESCAN = 47;
      BASS_CONFIG_DEV_NONSTOP = 50;
      BASS_CONFIG_VERIFY_NET = 52;
      BASS_CONFIG_DEV_PERIOD = 53;
      BASS_CONFIG_FLOAT = 54;
      BASS_CONFIG_NET_SEEK = 56;
      BASS_CONFIG_NET_AGENT = 16;
      BASS_CONFIG_NET_PROXY = 17;
      BASS_DEVICE_8BITS = 1;
      BASS_DEVICE_MONO = 2;
      BASS_DEVICE_3D = 4;
      BASS_DEVICE_16BITS = 8;
      BASS_DEVICE_LATENCY = 256;
      BASS_DEVICE_SPEAKERS = 2048;
      BASS_DEVICE_NOSPEAKER = 4096;
      BASS_DEVICE_FREQ = 16384;
      BASS_DEVICE_ENABLED = 1;
      BASS_DEVICE_DEFAULT = 2;
      BASS_DEVICE_INIT = 4;
      BASS_SAMPLE_8BITS = 1;
      BASS_SAMPLE_FLOAT = 256;
      BASS_SAMPLE_MONO = 2;
      BASS_SAMPLE_LOOP = 4;
      BASS_SAMPLE_3D = 8;
      BASS_SAMPLE_SOFTWARE = 16;
      BASS_SAMPLE_MUTEMAX = 32;
      BASS_SAMPLE_VAM = 64;
      BASS_SAMPLE_FX = 128;
      BASS_SAMPLE_OVER_VOL = 65536;
      BASS_SAMPLE_OVER_POS = 131072;
      BASS_SAMPLE_OVER_DIST = 196608;
      BASS_STREAM_PRESCAN = 131072;
      BASS_MP3_SETPOS = 131072;
      BASS_STREAM_AUTOFREE = 262144;
      BASS_STREAM_RESTRATE = 524288;
      BASS_STREAM_BLOCK = 1048576;
      BASS_STREAM_DECODE = 2097152;
      BASS_STREAM_STATUS = 8388608;
      BASS_MUSIC_FLOAT = 256;
      BASS_MUSIC_MONO = 2;
      BASS_MUSIC_LOOP = 4;
      BASS_MUSIC_3D = 8;
      BASS_MUSIC_FX = 128;
      BASS_MUSIC_AUTOFREE = 262144;
      BASS_MUSIC_DECODE = 2097152;
      BASS_MUSIC_PRESCAN = 131072;
      BASS_MUSIC_CALCLEN = 131072;
      BASS_MUSIC_RAMP = 512;
      BASS_MUSIC_RAMPS = 1024;
      BASS_MUSIC_SURROUND = 2048;
      BASS_MUSIC_SURROUND2 = 4096;
      BASS_MUSIC_FT2PAN = 8192;
      BASS_MUSIC_FT2MOD = 8192;
      BASS_MUSIC_PT1MOD = 16384;
      BASS_MUSIC_NONINTER = 65536;
      BASS_MUSIC_SINCINTER = 8388608;
      BASS_MUSIC_POSRESET = 32768;
      BASS_MUSIC_POSRESETEX = 4194304;
      BASS_MUSIC_STOPBACK = 524288;
      BASS_MUSIC_NOSAMPLE = 1048576;
      BASS_SPEAKER_FRONT = 16777216;
      BASS_SPEAKER_REAR = 33554432;
      BASS_SPEAKER_CENLFE = 50331648;
      BASS_SPEAKER_REAR2 = 67108864;
      BASS_SPEAKER_LEFT = 268435456;
      BASS_SPEAKER_RIGHT = 536870912;
      BASS_SPEAKER_FRONTLEFT = 285212672;
      BASS_SPEAKER_FRONTRIGHT = 553648128;
      BASS_SPEAKER_REARLEFT = 301989888;
      BASS_SPEAKER_REARRIGHT = 570425344;
      BASS_SPEAKER_CENTER = 318767104;
      BASS_SPEAKER_LFE = 587202560;
      BASS_SPEAKER_REAR2LEFT = 335544320;
      BASS_SPEAKER_REAR2RIGHT = 603979776;
      BASS_ASYNCFILE = 1073741824;
      BASS_RECORD_PAUSE = 32768;
      BASS_CTYPE_SAMPLE = 1;
      BASS_CTYPE_RECORD = 2;
      BASS_CTYPE_STREAM = 65536;
      BASS_CTYPE_STREAM_OGG = 65538;
      BASS_CTYPE_STREAM_MP1 = 65539;
      BASS_CTYPE_STREAM_MP2 = 65540;
      BASS_CTYPE_STREAM_MP3 = 65541;
      BASS_CTYPE_STREAM_AIFF = 65542;
      BASS_CTYPE_STREAM_CA = 65543;
      BASS_CTYPE_STREAM_MF = 65544;
      BASS_CTYPE_STREAM_WAV = 262144;
      BASS_CTYPE_STREAM_WAV_PCM = 327681;
      BASS_CTYPE_STREAM_WAV_FLOAT = 327683;
      BASS_CTYPE_MUSIC_MOD = 131072;
      BASS_CTYPE_MUSIC_MTM = 131073;
      BASS_CTYPE_MUSIC_S3M = 131074;
      BASS_CTYPE_MUSIC_XM = 131075;
      BASS_CTYPE_MUSIC_IT = 131076;
      BASS_CTYPE_MUSIC_MO3 = 256;
      BASS_3DMODE_NORMAL = 0;
      BASS_3DMODE_RELATIVE = 1;
      BASS_3DMODE_OFF = 2;
      BASS_3DALG_DEFAULT = 0;
      BASS_3DALG_OFF = 1;
      BASS_3DALG_FULL = 2;
      BASS_3DALG_LIGHT = 3;
      BASS_STREAMPROC_END = -2147483648;
      STREAMPROC_DUMMY = 0;
      STREAMPROC_PUSH = -1;
      STREAMFILE_NOBUFFER = 0;
      STREAMFILE_BUFFER = 1;
      STREAMFILE_BUFFERPUSH = 2;
      BASS_FILEDATA_END = 0;
      BASS_FILEPOS_CURRENT = 0;
      BASS_FILEPOS_DECODE = 0;
      BASS_FILEPOS_DOWNLOAD = 1;
      BASS_FILEPOS_END = 2;
      BASS_FILEPOS_START = 3;
      BASS_FILEPOS_CONNECTED = 4;
      BASS_FILEPOS_BUFFER = 5;
      BASS_FILEPOS_SOCKET = 6;
      BASS_FILEPOS_ASYNCBUF = 7;
      BASS_FILEPOS_SIZE = 8;
      BASS_SYNC_POS = 0;
      BASS_SYNC_END = 2;
      BASS_SYNC_META = 4;
      BASS_SYNC_SLIDE = 5;
      BASS_SYNC_STALL = 6;
      BASS_SYNC_DOWNLOAD = 7;
      BASS_SYNC_FREE = 8;
      BASS_SYNC_SETPOS = 11;
      BASS_SYNC_MUSICPOS = 10;
      BASS_SYNC_MUSICINST = 1;
      BASS_SYNC_MUSICFX = 3;
      BASS_SYNC_OGG_CHANGE = 12;
      BASS_SYNC_MIXTIME = 1073741824;
      BASS_SYNC_ONETIME = -2147483648;
      BASS_ACTIVE_STOPPED = 0;
      BASS_ACTIVE_PLAYING = 1;
      BASS_ACTIVE_STALLED = 2;
      BASS_ACTIVE_PAUSED = 3;
      BASS_ATTRIB_FREQ = 1;
      BASS_ATTRIB_VOL = 2;
      BASS_ATTRIB_PAN = 3;
      BASS_ATTRIB_EAXMIX = 4;
      BASS_ATTRIB_NOBUFFER = 5;
      BASS_ATTRIB_VBR = 6;
      BASS_ATTRIB_CPU = 7;
      BASS_ATTRIB_SRC = 8;
      BASS_ATTRIB_NET_RESUME = 9;
      BASS_ATTRIB_SCANINFO = 10;
      BASS_ATTRIB_NORAMP = 11;
      BASS_ATTRIB_BITRATE = 12;
      BASS_ATTRIB_MUSIC_AMPLIFY = 256;
      BASS_ATTRIB_MUSIC_PANSEP = 257;
      BASS_ATTRIB_MUSIC_PSCALER = 258;
      BASS_ATTRIB_MUSIC_BPM = 259;
      BASS_ATTRIB_MUSIC_SPEED = 260;
      BASS_ATTRIB_MUSIC_VOL_GLOBAL = 261;
      BASS_ATTRIB_MUSIC_VOL_CHAN = 512;
      BASS_ATTRIB_MUSIC_VOL_INST = 768;
      BASS_DATA_AVAILABLE = 0;
      BASS_DATA_FIXED = 536870912;
      BASS_DATA_FLOAT = 1073741824;
      BASS_DATA_FFT256 = -2147483648;
      BASS_DATA_FFT512 = -2147483647;
      BASS_DATA_FFT1024 = -2147483646;
      BASS_DATA_FFT2048 = -2147483645;
      BASS_DATA_FFT4096 = -2147483644;
      BASS_DATA_FFT8192 = -2147483643;
      BASS_DATA_FFT16384 = -2147483642;
      BASS_DATA_FFT32768 = -2147483641;
      BASS_DATA_FFT_INDIVIDUAL = 16;
      BASS_DATA_FFT_NOWINDOW = 32;
      BASS_DATA_FFT_REMOVEDC = 64;
      BASS_DATA_FFT_COMPLEX = 128;
      BASS_LEVEL_MONO = 1;
      BASS_LEVEL_STEREO = 2;
      BASS_LEVEL_RMS = 4;
      BASS_TAG_ID3 = 0;
      BASS_TAG_ID3V2 = 1;
      BASS_TAG_OGG = 2;
      BASS_TAG_HTTP = 3;
      BASS_TAG_ICY = 4;
      BASS_TAG_META = 5;
      BASS_TAG_APE = 6;
      BASS_TAG_MP4 = 7;
      BASS_TAG_VENDOR = 9;
      BASS_TAG_LYRICS3 = 10;
      BASS_TAG_WAVEFORMAT = 14;
      BASS_TAG_RIFF_INFO = 256;
      BASS_TAG_RIFF_BEXT = 257;
      BASS_TAG_RIFF_CART = 258;
      BASS_TAG_RIFF_DISP = 259;
      BASS_TAG_APE_BINARY = 4096;
      BASS_TAG_MUSIC_NAME = 65536;
      BASS_TAG_MUSIC_MESSAGE = 65537;
      BASS_TAG_MUSIC_ORDERS = 65538;
      BASS_TAG_MUSIC_AUTH = 65539;
      BASS_TAG_MUSIC_INST = 65792;
      BASS_TAG_MUSIC_SAMPLE = 66304;
      BASS_TAG_BYTEBUFFER = 268435456;
      BASS_POS_BYTE = 0;
      BASS_POS_MUSIC_ORDER = 1;
      BASS_POS_OGG = 3;
      BASS_POS_RELATIVE = 67108864;
      BASS_POS_INEXACT = 134217728;
      BASS_POS_DECODE = 268435456;
      BASS_POS_DECODETO = 536870912;
      BASS_POS_SCAN = 1073741824;
      BASS_FX_DX8_CHORUS = 0;
      BASS_FX_DX8_COMPRESSOR = 1;
      BASS_FX_DX8_DISTORTION = 2;
      BASS_FX_DX8_ECHO = 3;
      BASS_FX_DX8_FLANGER = 4;
      BASS_FX_DX8_GARGLE = 5;
      BASS_FX_DX8_I3DL2REVERB = 6;
      BASS_FX_DX8_PARAMEQ = 7;
      BASS_FX_DX8_REVERB = 8;
      BASS_DX8_PHASE_NEG_180 = 0;
      BASS_DX8_PHASE_NEG_90 = 1;
      BASS_DX8_PHASE_ZERO = 2;
      BASS_DX8_PHASE_90 = 3;
      BASS_DX8_PHASE_180 = 4;
  public
    constructor create(); overload;
    class function BASS_SPEAKER_N(para1: jint): jint; static; overload;
    class function BASS_SetConfig(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_GetConfig(para1: jint): jint; static; overload;
    class function BASS_SetConfigPtr(para1: jint; para2: JLObject): jboolean; static; overload;
    class function BASS_GetConfigPtr(para1: jint): JLObject; static; overload;
    class function BASS_GetVersion(): jint; static; overload;
    class function BASS_ErrorGetCode(): jint; static; overload;
    class function BASS_GetDeviceInfo(para1: jint; para2: CUBBASS.InnerBASS_DEVICEINFO): jboolean; static; overload;
    class function BASS_Init(para1: jint; para2: jint; para3: jint): jboolean; static; overload;
    class function BASS_SetDevice(para1: jint): jboolean; static; overload;
    class function BASS_GetDevice(): jint; static; overload;
    class function BASS_Free(): jboolean; static; overload;
    class function BASS_GetInfo(para1: CUBBASS.InnerBASS_INFO): jboolean; static; overload;
    class function BASS_Update(para1: jint): jboolean; static; overload;
    class function BASS_GetCPU(): jfloat; static; overload;
    class function BASS_Start(): jboolean; static; overload;
    class function BASS_Stop(): jboolean; static; overload;
    class function BASS_Pause(): jboolean; static; overload;
    class function BASS_SetVolume(para1: jfloat): jboolean; static; overload;
    class function BASS_GetVolume(): jfloat; static; overload;
    class function BASS_PluginLoad(para1: JLString; para2: jint): jint; static; overload;
    class function BASS_PluginFree(para1: jint): jboolean; static; overload;
    class function BASS_PluginGetInfo(para1: jint): CUBBASS.InnerBASS_PLUGININFO; static; overload;
    class function BASS_Set3DFactors(para1: jfloat; para2: jfloat; para3: jfloat): jboolean; static; overload;
    class function BASS_Get3DFactors(para1: JLFloat; para2: JLFloat; para3: JLFloat): jboolean; static; overload;
    class function BASS_Set3DPosition(para1: CUBBASS.InnerBASS_3DVECTOR; para2: CUBBASS.InnerBASS_3DVECTOR; para3: CUBBASS.InnerBASS_3DVECTOR; para4: CUBBASS.InnerBASS_3DVECTOR): jboolean; static; overload;
    class function BASS_Get3DPosition(para1: CUBBASS.InnerBASS_3DVECTOR; para2: CUBBASS.InnerBASS_3DVECTOR; para3: CUBBASS.InnerBASS_3DVECTOR; para4: CUBBASS.InnerBASS_3DVECTOR): jboolean; static; overload;
    class procedure BASS_Apply3D(); static; overload;
    class function BASS_SampleLoad(para1: JLString; para2: jlong; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function BASS_SampleLoad(para1: JNByteBuffer; para2: jlong; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function BASS_SampleLoad(para1: CUBBASS.InnerAsset; para2: jlong; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function BASS_SampleCreate(para1: jint; para2: jint; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function BASS_SampleFree(para1: jint): jboolean; static; overload;
    class function BASS_SampleSetData(para1: jint; para2: JNByteBuffer): jboolean; static; overload;
    class function BASS_SampleGetData(para1: jint; para2: JNByteBuffer): jboolean; static; overload;
    class function BASS_SampleGetInfo(para1: jint; para2: CUBBASS.InnerBASS_SAMPLE): jboolean; static; overload;
    class function BASS_SampleSetInfo(para1: jint; para2: CUBBASS.InnerBASS_SAMPLE): jboolean; static; overload;
    class function BASS_SampleGetChannel(para1: jint; para2: jboolean): jint; static; overload;
    class function BASS_SampleGetChannels(para1: jint; para2: Arr1jint): jint; static; overload;
    class function BASS_SampleGetChannels(para1: jint; var para2: array of jint): jint; static; overload;
    class function BASS_SampleStop(para1: jint): jboolean; static; overload;
    class function BASS_MusicLoad(para1: JLString; para2: jlong; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function BASS_MusicLoad(para1: JNByteBuffer; para2: jlong; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function BASS_MusicLoad(para1: CUBBASS.InnerAsset; para2: jlong; para3: jint; para4: jint; para5: jint): jint; static; overload;
    class function BASS_MusicFree(para1: jint): jboolean; static; overload;
    class function BASS_StreamCreate(para1: jint; para2: jint; para3: jint; para4: CUBBASS.InnerSTREAMPROC; para5: JLObject): jint; static; overload;
    class function BASS_StreamCreate(para1: jint; para2: jint; para3: jint; para4: jint; para5: JLObject): jint; static; overload;
    class function BASS_StreamCreateFile(para1: JLString; para2: jlong; para3: jlong; para4: jint): jint; static; overload;
    class function BASS_StreamCreateFile(para1: JNByteBuffer; para2: jlong; para3: jlong; para4: jint): jint; static; overload;
    class function BASS_StreamCreateFile(para1: CUBBASS.InnerAsset; para2: jlong; para3: jlong; para4: jint): jint; static; overload;
    class function BASS_StreamCreateURL(para1: JLString; para2: jint; para3: jint; para4: CUBBASS.InnerDOWNLOADPROC; para5: JLObject): jint; static; overload;
    class function BASS_StreamCreateFileUser(para1: jint; para2: jint; para3: CUBBASS.InnerBASS_FILEPROCS; para4: JLObject): jint; static; overload;
    class function BASS_StreamFree(para1: jint): jboolean; static; overload;
    class function BASS_StreamGetFilePosition(para1: jint; para2: jint): jlong; static; overload;
    class function BASS_StreamPutData(para1: jint; para2: JNByteBuffer; para3: jint): jint; static; overload;
    class function BASS_StreamPutFileData(para1: jint; para2: JNByteBuffer; para3: jint): jint; static; overload;
    class function BASS_RecordGetDeviceInfo(para1: jint; para2: CUBBASS.InnerBASS_DEVICEINFO): jboolean; static; overload;
    class function BASS_RecordInit(para1: jint): jboolean; static; overload;
    class function BASS_RecordSetDevice(para1: jint): jboolean; static; overload;
    class function BASS_RecordGetDevice(): jint; static; overload;
    class function BASS_RecordFree(): jboolean; static; overload;
    class function BASS_RecordGetInfo(para1: CUBBASS.InnerBASS_RECORDINFO): jboolean; static; overload;
    class function BASS_RecordGetInputName(para1: jint): JLString; static; overload;
    class function BASS_RecordSetInput(para1: jint; para2: jint; para3: jfloat): jboolean; static; overload;
    class function BASS_RecordGetInput(para1: jint; para2: JLFloat): jint; static; overload;
    class function BASS_RecordStart(para1: jint; para2: jint; para3: jint; para4: CUBBASS.InnerRECORDPROC; para5: JLObject): jint; static; overload;
    class function BASS_ChannelBytes2Seconds(para1: jint; para2: jlong): jdouble; static; overload;
    class function BASS_ChannelSeconds2Bytes(para1: jint; para2: jdouble): jlong; static; overload;
    class function BASS_ChannelGetDevice(para1: jint): jint; static; overload;
    class function BASS_ChannelSetDevice(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_ChannelIsActive(para1: jint): jint; static; overload;
    class function BASS_ChannelGetInfo(para1: jint; para2: CUBBASS.InnerBASS_CHANNELINFO): jboolean; static; overload;
    class function BASS_ChannelGetTags(para1: jint; para2: jint): JLObject; static; overload;
    class function BASS_ChannelFlags(para1: jint; para2: jint; para3: jint): jlong; static; overload;
    class function BASS_ChannelUpdate(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_ChannelLock(para1: jint; para2: jboolean): jboolean; static; overload;
    class function BASS_ChannelPlay(para1: jint; para2: jboolean): jboolean; static; overload;
    class function BASS_ChannelStop(para1: jint): jboolean; static; overload;
    class function BASS_ChannelPause(para1: jint): jboolean; static; overload;
    class function BASS_ChannelSetAttribute(para1: jint; para2: jint; para3: jfloat): jboolean; static; overload;
    class function BASS_ChannelGetAttribute(para1: jint; para2: jint; para3: JLFloat): jboolean; static; overload;
    class function BASS_ChannelSlideAttribute(para1: jint; para2: jint; para3: jfloat; para4: jint): jboolean; static; overload;
    class function BASS_ChannelIsSliding(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_ChannelSetAttributeEx(para1: jint; para2: jint; para3: JNByteBuffer; para4: jint): jboolean; static; overload;
    class function BASS_ChannelGetAttributeEx(para1: jint; para2: jint; para3: JNByteBuffer; para4: jint): jint; static; overload;
    class function BASS_ChannelSet3DAttributes(para1: jint; para2: jint; para3: jfloat; para4: jfloat; para5: jint; para6: jint; para7: jfloat): jboolean; static; overload;
    class function BASS_ChannelGet3DAttributes(para1: jint; para2: JLInteger; para3: JLFloat; para4: JLFloat; para5: JLInteger; para6: JLInteger; para7: JLFloat): jboolean; static; overload;
    class function BASS_ChannelSet3DPosition(para1: jint; para2: CUBBASS.InnerBASS_3DVECTOR; para3: CUBBASS.InnerBASS_3DVECTOR; para4: CUBBASS.InnerBASS_3DVECTOR): jboolean; static; overload;
    class function BASS_ChannelGet3DPosition(para1: jint; para2: CUBBASS.InnerBASS_3DVECTOR; para3: CUBBASS.InnerBASS_3DVECTOR; para4: CUBBASS.InnerBASS_3DVECTOR): jboolean; static; overload;
    class function BASS_ChannelGetLength(para1: jint; para2: jint): jlong; static; overload;
    class function BASS_ChannelSetPosition(para1: jint; para2: jlong; para3: jint): jboolean; static; overload;
    class function BASS_ChannelGetPosition(para1: jint; para2: jint): jlong; static; overload;
    class function BASS_ChannelGetLevel(para1: jint): jint; static; overload;
    class function BASS_ChannelGetLevelEx(para1: jint; para2: Arr1jfloat; para3: jfloat; para4: jint): jboolean; static; overload;
    class function BASS_ChannelGetLevelEx(para1: jint; var para2: array of jfloat; para3: jfloat; para4: jint): jboolean; static; overload;
    class function BASS_ChannelGetData(para1: jint; para2: JNByteBuffer; para3: jint): jint; static; overload;
    class function BASS_ChannelSetSync(para1: jint; para2: jint; para3: jlong; para4: CUBBASS.InnerSYNCPROC; para5: JLObject): jint; static; overload;
    class function BASS_ChannelRemoveSync(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_ChannelSetDSP(para1: jint; para2: CUBBASS.InnerDSPPROC; para3: JLObject; para4: jint): jint; static; overload;
    class function BASS_ChannelRemoveDSP(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_ChannelSetLink(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_ChannelRemoveLink(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_ChannelSetFX(para1: jint; para2: jint; para3: jint): jint; static; overload;
    class function BASS_ChannelRemoveFX(para1: jint; para2: jint): jboolean; static; overload;
    class function BASS_FXSetParameters(para1: jint; para2: JLObject): jboolean; static; overload;
    class function BASS_FXGetParameters(para1: jint; para2: JLObject): jboolean; static; overload;
    class function BASS_FXReset(para1: jint): jboolean; static; overload;
    class function BASS_FXSetPriority(para1: jint; para2: jint): jboolean; static; overload;
  end;

